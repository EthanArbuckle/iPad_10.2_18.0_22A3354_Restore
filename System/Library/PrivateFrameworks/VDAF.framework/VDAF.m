uint64_t FixedWidthInteger.isPositiveAndPowerOfTwo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 8);
  v55 = *(_QWORD *)(v5 + 24);
  v58 = *(_QWORD *)(v55 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v57 = (char *)&v50 - v9;
  v10 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v53 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v17 = (char *)&v50 - v16;
  v19 = MEMORY[0x24BDAC7A8](v15, v18);
  v56 = (char *)&v50 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v24 = (char *)&v50 - v23;
  MEMORY[0x24BDAC7A8](v22, v25);
  v27 = (char *)&v50 - v26;
  v28 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v28 & 1) != 0)
  {
    if (v29 <= 64)
      goto LABEL_3;
  }
  else if (v29 <= 63)
  {
LABEL_3:
    v51 = AssociatedTypeWitness;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v30(v27, v2, a1);
    v31 = dispatch thunk of BinaryInteger._lowWord.getter();
    v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v27, a1);
    v52 = v30;
    v30(v24, v3, a1);
    AssociatedTypeWitness = v51;
    if (v31 > 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  v59 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v39 = dispatch thunk of static Comparable.< infix(_:_:)();
  v32 = *(void (**)(char *, uint64_t))(v10 + 8);
  v32(v27, a1);
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v52(v24, v3, a1);
  if ((v39 & 1) != 0)
  {
LABEL_4:
    v54 = v24;
    v33 = v58;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v35 = v57;
    MEMORY[0x24BD00928](&unk_249C28BC0, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
    v36 = v35;
    v37 = v54;
    MEMORY[0x24BD00904](v36, a1, v33);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v32(v17, a1);
    v38 = v56;
    MEMORY[0x24BD005F8](v37, v27, a1, v5);
    v32(v27, a1);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
        goto LABEL_16;
      goto LABEL_15;
    }
    v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v41 & 1) != 0)
    {
      if (v42 <= 64)
      {
        v43 = v57;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
        v44 = v43;
        v37 = v54;
        MEMORY[0x24BD00904](v44, a1, v58);
        v45 = dispatch thunk of static Comparable.>= infix(_:_:)();
        v32(v27, a1);
        v46 = v53;
        v52(v53, (uint64_t)v38, a1);
        v40 = (v45 & 1) != 0 && dispatch thunk of BinaryInteger._lowWord.getter() == 0;
        v48 = v46;
        goto LABEL_17;
      }
    }
    else if (v42 < 64)
    {
LABEL_15:
      v47 = dispatch thunk of BinaryInteger._lowWord.getter();
      v32(v38, a1);
      v32(v37, a1);
      v40 = v47 == 0;
      return v40 & 1;
    }
LABEL_16:
    v59 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v40 = dispatch thunk of static Equatable.== infix(_:_:)();
    v48 = v27;
LABEL_17:
    v32(v48, a1);
    v32(v38, a1);
    v32(v37, a1);
    return v40 & 1;
  }
LABEL_9:
  v32(v24, a1);
  v40 = 0;
  return v40 & 1;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t FixedWidthInteger.nextPowerOfTwo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  char v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v4 = v3;
  v77 = a3;
  v6 = *(_QWORD *)(a2 + 8);
  v73 = *(_QWORD *)(v6 + 24);
  v74 = a2;
  v76 = *(_QWORD *)(v73 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v75 = (char *)&v67 - v10;
  v11 = *(_QWORD *)(a1 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v71 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v72 = (char *)&v67 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v70 = (char *)&v67 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v24 = (char *)&v67 - v23;
  v26 = MEMORY[0x24BDAC7A8](v22, v25);
  v28 = (char *)&v67 - v27;
  MEMORY[0x24BDAC7A8](v26, v29);
  v31 = (char *)&v67 - v30;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v32((char *)&v67 - v30, v3, a1);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
LABEL_9:
      v78 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v39 = dispatch thunk of static Comparable.< infix(_:_:)();
      v11 = *(_QWORD *)(v11 + 8);
      ((void (*)(char *, uint64_t))v11)(v28, a1);
      ((void (*)(char *, uint64_t))v11)(v31, a1);
      if ((v39 & 1) == 0)
        goto LABEL_17;
      __break(1u);
      goto LABEL_11;
    }
    v33 = dispatch thunk of BinaryInteger._lowWord.getter();
    v11 = *(_QWORD *)(v11 + 8);
    ((void (*)(char *, uint64_t))v11)(v31, a1);
    if ((v33 & 0x8000000000000000) == 0)
      goto LABEL_17;
    __break(1u);
  }
  v69 = v32;
  v34 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v37 = __OFSUB__(v35, 64);
  v36 = v35 - 64 < 0;
  if ((v34 & 1) != 0)
  {
    if (v35 <= 64)
      goto LABEL_15;
    v78 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v38 = dispatch thunk of static Comparable.< infix(_:_:)();
    v11 = *(_QWORD *)(v11 + 8);
    ((void (*)(char *, uint64_t))v11)(v28, a1);
    ((void (*)(char *, uint64_t))v11)(v31, a1);
    v32 = v69;
    if ((v38 & 1) == 0)
      goto LABEL_17;
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  if (v36 == v37)
  {
    v11 = *(_QWORD *)(v11 + 8);
    ((void (*)(char *, uint64_t))v11)(v31, a1);
    v32 = v69;
    goto LABEL_17;
  }
  v40 = dispatch thunk of BinaryInteger._lowWord.getter();
  v11 = *(_QWORD *)(v11 + 8);
  ((void (*)(char *, uint64_t))v11)(v31, a1);
  v32 = v69;
  if ((v40 & 0x8000000000000000) == 0)
  {
LABEL_17:
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
      {
LABEL_28:
        v78 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v58 = dispatch thunk of static Equatable.== infix(_:_:)();
        ((void (*)(char *, uint64_t))v11)(v28, a1);
        if ((v58 & 1) != 0)
        {
LABEL_29:
          v78 = 1;
          v59 = lazy protocol witness table accessor for type Int and conformance Int();
          return MEMORY[0x24BD00694](&v78, MEMORY[0x24BEE1768], v59, a1, v6);
        }
        goto LABEL_31;
      }
    }
    else
    {
      v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v47 & 1) != 0)
      {
        if (v48 > 64)
          goto LABEL_28;
        v49 = v76;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v51 = v32;
        v52 = v4;
        v53 = v75;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
        MEMORY[0x24BD00904](v53, a1, v49);
        v54 = dispatch thunk of static Comparable.>= infix(_:_:)();
        ((void (*)(char *, uint64_t))v11)(v28, a1);
        v55 = v70;
        v51(v70, v52, a1);
        if ((v54 & 1) == 0)
        {
          ((void (*)(char *, uint64_t))v11)(v55, a1);
LABEL_31:
          v78 = 1;
          v60 = lazy protocol witness table accessor for type Int and conformance Int();
          MEMORY[0x24BD00694](&v78, MEMORY[0x24BEE1768], v60, a1, v6);
          v61 = v76;
          v62 = swift_getAssociatedConformanceWitness();
          v63 = v75;
          MEMORY[0x24BD00928](&unk_249C28BC0, 512, AssociatedTypeWitness, v62);
          v64 = v71;
          MEMORY[0x24BD00904](v63, a1, v61);
          v65 = v72;
          dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
          ((void (*)(char *, uint64_t))v11)(v64, a1);
          v66 = FixedWidthInteger.bitLength.getter();
          ((void (*)(char *, uint64_t))v11)(v65, a1);
          v78 = v66;
          dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
          return ((uint64_t (*)(char *, uint64_t))v11)(v28, a1);
        }
        v56 = dispatch thunk of BinaryInteger._lowWord.getter();
        v57 = v55;
LABEL_26:
        ((void (*)(char *, uint64_t))v11)(v57, a1);
        if (!v56)
          goto LABEL_29;
        goto LABEL_31;
      }
      if (v48 >= 64)
        goto LABEL_28;
    }
    v32(v28, v4, a1);
    v56 = dispatch thunk of BinaryInteger._lowWord.getter();
    v57 = v28;
    goto LABEL_26;
  }
  __break(1u);
LABEL_15:
  v68 = v4;
  v41 = v76;
  v42 = swift_getAssociatedConformanceWitness();
  v43 = v75;
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, AssociatedTypeWitness, v42);
  MEMORY[0x24BD00904](v43, a1, v41);
  v44 = dispatch thunk of static Comparable.< infix(_:_:)();
  v11 = *(_QWORD *)(v11 + 8);
  ((void (*)(char *, uint64_t))v11)(v28, a1);
  v32 = v69;
  v69(v24, (uint64_t)v31, a1);
  if ((v44 & 1) != 0)
  {
    ((void (*)(char *, uint64_t))v11)(v24, a1);
    result = ((uint64_t (*)(char *, uint64_t))v11)(v31, a1);
  }
  else
  {
    v45 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, uint64_t))v11)(v24, a1);
    result = ((uint64_t (*)(char *, uint64_t))v11)(v31, a1);
    v4 = v68;
    if ((v45 & 0x8000000000000000) == 0)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t FixedWidthInteger.bitLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t result;

  v0 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v1 = dispatch thunk of FixedWidthInteger.leadingZeroBitCount.getter();
  v2 = __OFSUB__(v0, v1);
  result = v0 - v1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t FixedWidthInteger.bigEndianBytes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of FloatingPoint.exponent.getter();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)implicit closure #1 in FixedWidthInteger.bigEndianBytes.getter, 0, a1, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v9[2];
}

size_t implicit closure #1 in FixedWidthInteger.bigEndianBytes.getter@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result;

  result = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD00BBC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t FixedWidthInteger.divideAndRoundUp(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  char *v33;
  char *v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  v37 = *(_QWORD *)(v6 + 24);
  v40 = *(_QWORD *)(v37 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v39 = (char *)v36 - v10;
  v11 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v41 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v18 = (char *)v36 - v17;
  v20 = MEMORY[0x24BDAC7A8](v16, v19);
  v22 = (char *)v36 - v21;
  MEMORY[0x24BDAC7A8](v20, v23);
  v25 = (char *)v36 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v43 = a1;
  v26((char *)v36 - v24, a1, a2);
  v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v27 & 1) == 0)
    goto LABEL_5;
  if (v28 <= 64)
    goto LABEL_6;
  while (1)
  {
    v44 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v29 = dispatch thunk of static Comparable.< infix(_:_:)();
    v11 = *(_QWORD *)(v11 + 8);
    ((void (*)(char *, uint64_t))v11)(v22, a2);
    v28 = ((uint64_t (*)(char *, uint64_t))v11)(v25, a2);
    if ((v29 & 1) != 0)
      break;
    while (1)
    {
      __break(1u);
LABEL_5:
      if (v28 > 63)
        break;
LABEL_6:
      v30 = dispatch thunk of BinaryInteger._lowWord.getter();
      v11 = *(_QWORD *)(v11 + 8);
      v28 = ((uint64_t (*)(char *, uint64_t))v11)(v25, a2);
      if (v30 > 0)
        goto LABEL_7;
    }
  }
LABEL_7:
  v36[1] = v6;
  MEMORY[0x24BD0085C](v38, v43, a2, *(_QWORD *)(v37 + 8));
  v31 = v40;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v33 = v39;
  MEMORY[0x24BD00928](&unk_249C28BC0, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  v34 = v41;
  MEMORY[0x24BD00904](v33, a2, v31);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  ((void (*)(char *, uint64_t))v11)(v34, a2);
  ((void (*)(char *, uint64_t))v11)(v18, a2);
  dispatch thunk of static BinaryInteger./ infix(_:_:)();
  return ((uint64_t (*)(char *, uint64_t))v11)(v22, a2);
}

uint64_t static FixedWidthInteger.randomVector(in:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static FixedWidthInteger.randomVector(in:count:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for closure #1 in static FixedWidthInteger.randomVector(in:count:));
}

{
  return static FixedWidthInteger.randomVector(in:count:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for closure #1 in static FixedWidthInteger.randomVector(in:count:));
}

uint64_t partial apply for closure #1 in static FixedWidthInteger.randomVector(in:count:)()
{
  return static FixedWidthInteger.random(in:)();
}

{
  return static FixedWidthInteger.random(in:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t result;
  Swift::Int v26;
  void (*v27)(char *, _QWORD);
  void (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *);
  uint64_t v42;
  char *v43;
  Swift::Int v44;
  uint64_t v45;
  char v46[32];
  uint64_t v47;

  v33 = a5;
  v34 = a8;
  v41 = a1;
  v42 = a2;
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v43 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v15 = (char *)&v32 - v14;
  MEMORY[0x24BDAC7A8](v13, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v19 - 8);
  v36 = v19;
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v32 - v21;
  v23 = dispatch thunk of Collection.count.getter();
  if (!v23)
    return static Array._allocateUninitialized(_:)();
  v39 = AssociatedTypeWitness;
  v24 = v23;
  v47 = Array.init()();
  v37 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v24);
  v40 = v8;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v24 & 0x8000000000000000) == 0)
  {
    v26 = v24;
    v38 = v18;
    while (v26)
    {
      v44 = v26;
      v27 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v28 = *(void (**)(char *))(v11 + 16);
      v29 = v11;
      v30 = v39;
      v28(v15);
      v27(v46, 0);
      v31 = v45;
      v41(v15, v43);
      if (v31)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v34, v43, v33);
      }
      v45 = 0;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
      ContiguousArray.append(_:)();
      result = dispatch thunk of Collection.formIndex(after:)();
      v26 = v44 - 1;
      v11 = v29;
      if (v44 == 1)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
        return v47;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE1BD8], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD00BC8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t static FixedWidthInteger.randomVector(in:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[10];

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v13[8] = 0;
    v13[9] = a2;
    v7 = MEMORY[0x24BDAC7A8](result, a2);
    v13[2] = v8;
    v13[3] = v9;
    v13[4] = v7;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    v11 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a5, (uint64_t)v13, v10, a3, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  }
  return result;
}

uint64_t static FixedWidthInteger.randomVector(count:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[8];

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v8[6] = 0;
    v8[7] = result;
    MEMORY[0x24BDAC7A8](result, a2);
    v8[2] = v3;
    v8[3] = v4;
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    v6 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FixedWidthInteger.randomVector(count:), (uint64_t)v8, v5, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  }
  return result;
}

uint64_t closure #1 in static FixedWidthInteger.randomVector(count:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t TupleTypeMetadata2;
  uint64_t v48;
  uint64_t v49;

  v48 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v5);
  v44 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v11 = (char *)&v40 - v10;
  v45 = *(_QWORD *)(a1 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v16);
  v18 = (char *)&v40 - v17;
  v19 = type metadata accessor for ClosedRange();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v43 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v24);
  v46 = (char *)&v40 - v25;
  dispatch thunk of static FixedWidthInteger.min.getter();
  v49 = a2;
  dispatch thunk of static FixedWidthInteger.max.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v41 = v19;
    v42 = v20;
    v27 = TupleTypeMetadata2;
    v28 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    v29 = v45;
    v30 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v30(v11, v18, a1);
    v40 = v28;
    v30(v28, v15, a1);
    v31 = v44;
    v32 = &v44[*(int *)(v27 + 48)];
    v33 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v33(v44, v11, a1);
    v33(v32, v28, a1);
    v34 = v43;
    v30(v43, v31, a1);
    v35 = *(void (**)(char *, uint64_t))(v29 + 8);
    v35(v32, a1);
    v36 = &v31[*(int *)(v27 + 48)];
    v30(v31, v11, a1);
    v30(v36, v40, a1);
    v37 = v41;
    v30(&v34[*(int *)(v41 + 36)], v36, a1);
    v35(v31, a1);
    v38 = v42;
    v39 = v46;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v46, v34, v37);
    static FixedWidthInteger.random(in:)();
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v37);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in static FixedWidthInteger.randomVector(count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static FixedWidthInteger.randomVector(count:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t default argument 1 of FieldElement.init<A>(bytes:mask:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static FixedWidthInteger.max.getter();
}

double default argument 4 of PINECircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 8.7;
}

uint64_t default argument 5 of PINECircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 100;
}

void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
  }
}

uint64_t Seed.init<A>(length:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = specialized Seed.init<A>(length:using:)(a1, a2, a3, a4);
  swift_unknownObjectRelease();
  return v4;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int8 *)(a1 + 33);
  v4 = (unsigned __int8 *)(a2 + 33);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t i;
  int v13;
  int v14;
  int v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(v4 + 16);
  if (v6 != *(_QWORD *)(v5 + 16))
    return 0;
  v7 = 1;
  do
  {
    if (v6 && v4 != v5)
    {
      if (*(unsigned __int8 *)(v4 + 32) != *(unsigned __int8 *)(v5 + 32))
        return 0;
      if (v6 != 1)
      {
        if (*(unsigned __int8 *)(v4 + 33) != *(unsigned __int8 *)(v5 + 33))
          return 0;
        v10 = (unsigned __int8 *)(v4 + 34);
        v11 = (unsigned __int8 *)(v5 + 34);
        for (i = v6 - 2; i; --i)
        {
          v14 = *v10++;
          v13 = v14;
          v15 = *v11++;
          if (v13 != v15)
            return 0;
        }
      }
    }
    if (v7 == v2)
      return 1;
    result = 0;
    v9 = 8 * v7++;
    v4 = *(_QWORD *)(v3 + v9);
    v5 = *(_QWORD *)(a2 + 32 + v9);
    v6 = *(_QWORD *)(v4 + 16);
  }
  while (v6 == *(_QWORD *)(v5 + 16));
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Seed(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t Seed.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = specialized Seed.init<A>(from:parameter:)(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v5;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Seed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = specialized Seed.init<A>(from:parameter:)(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t Seed.encodedLength.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t Seed.encode<A>(into:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  return dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance Seed()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Seed()
{
  return Seed.encode<A>(into:)();
}

uint64_t specialized Seed.init<A>(length:using:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result >= 1)
    return (*(uint64_t (**)(void))(a4 + 40))();
  __break(1u);
  return result;
}

uint64_t specialized Seed.init<A>(from:parameter:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1, a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return Array.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
  }
  return result;
}

ValueMetadata *type metadata accessor for Seed()
{
  return &type metadata for Seed;
}

uint64_t VDAFCodableFixedWidthInteger.encodedLength.getter()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter() / 8;
}

uint64_t VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  char *v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t (*v42)(char *, uint64_t);
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  unsigned __int8 v64;
  BOOL v65;
  char *v66;
  unsigned __int8 v67;
  char *v68;
  uint64_t v69;
  void (*v70)(void);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t AssociatedTypeWitness;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t);
  uint64_t v84;
  char v85;
  unsigned __int8 v86;

  v73 = a3;
  v74 = a5;
  v72 = a1;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v12 = (char *)&v68 - v11;
  v14 = MEMORY[0x24BDAC7A8](v10, v13);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v14, v17);
  v75 = (char *)&v68 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v23 = (char *)&v68 - v22;
  v25 = MEMORY[0x24BDAC7A8](v21, v24);
  v71 = (char *)&v68 - v26;
  MEMORY[0x24BDAC7A8](v25, v27);
  v29 = *(void (**)(void))(v28 + 16);
  v77 = (char *)&v68 - v30;
  v69 = v28;
  v70 = v29;
  v29();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a4 + 24) + 16))(a2);
  if (result < 0)
    goto LABEL_22;
  v32 = result;
  if (!result)
  {
    v42 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
    v34 = v77;
    return v42(v34, a2);
  }
  v68 = v16;
  v79 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v34 = v77;
  v35 = v71;
  v36 = v69;
  v80 = v23;
  v81 = v12;
  v78 = AssociatedConformanceWitness;
  while (1)
  {
    v82 = v32;
    v44 = AssociatedTypeWitness;
    MEMORY[0x24BD00928](&unk_249C28C50, 2304, AssociatedTypeWitness, AssociatedConformanceWitness);
    v45 = v12;
    v46 = v79;
    MEMORY[0x24BD00904](v45, a2, v79);
    MEMORY[0x24BD005F8](v34, v23, a2, v7);
    v47 = v36;
    v48 = *(uint64_t (**)(char *, uint64_t))(v36 + 8);
    v49 = v44;
    v83 = v48;
    v48(v23, a2);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
    {
      v50 = v81;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v49, AssociatedConformanceWitness);
      MEMORY[0x24BD00904](v50, a2, v46);
      v51 = dispatch thunk of static Comparable.>= infix(_:_:)();
      result = v83(v23, a2);
      if ((v51 & 1) == 0)
        break;
    }
    v52 = v49;
    v36 = v47;
    v53 = v7;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 8)
      goto LABEL_5;
    ((void (*)(char *, char *, uint64_t))v70)(v75, v35, a2);
    v86 = -1;
    v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v54 & 1) != 0)
    {
      if (v55 > 8)
        goto LABEL_4;
      v56 = v81;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v52, v78);
      v57 = v80;
      MEMORY[0x24BD00904](v56, a2, v79);
      v58 = v75;
      v59 = dispatch thunk of static Comparable.> infix(_:_:)();
      v83(v57, a2);
      v60 = v86;
      v61 = v47;
      v62 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      v63 = v68;
      v62(v68, v58, a2);
      if ((v59 & 1) != 0)
      {
        v64 = dispatch thunk of BinaryInteger._lowWord.getter();
        result = v83(v63, a2);
        v65 = v60 >= v64;
        v35 = v71;
        v36 = v61;
        if (!v65)
          goto LABEL_21;
      }
      else
      {
        v83(v63, a2);
        v35 = v71;
        v36 = v61;
      }
    }
    else
    {
      if (v55 >= 9)
      {
LABEL_4:
        lazy protocol witness table accessor for type UInt8 and conformance UInt8();
        v37 = v80;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v38 = v75;
        v39 = dispatch thunk of static Comparable.< infix(_:_:)();
        v40 = v37;
        v41 = v83;
        v83(v40, a2);
        result = v41(v38, a2);
        v35 = v71;
        v36 = v69;
        if ((v39 & 1) != 0)
          goto LABEL_21;
        goto LABEL_5;
      }
      v66 = v75;
      v67 = dispatch thunk of BinaryInteger._lowWord.getter();
      result = v83(v66, a2);
      v35 = v71;
      v36 = v69;
      if (v86 < v67)
        goto LABEL_21;
    }
LABEL_5:
    v42 = v83;
    v43 = dispatch thunk of BinaryInteger._lowWord.getter();
    v42(v35, a2);
    v85 = v43;
    dispatch thunk of RangeReplaceableCollection.append(_:)();
    v84 = 8;
    lazy protocol witness table accessor for type Int and conformance Int();
    v23 = v80;
    v34 = v77;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v42(v34, a2);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v34, v23, a2);
    v12 = v81;
    v32 = v82 - 1;
    v7 = v53;
    AssociatedConformanceWitness = v78;
    if (v82 == 1)
      return v42(v34, a2);
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

uint64_t VDAFCodableFixedWidthInteger.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(unint64_t *, _QWORD);
  char *v46;
  char v47;
  char *v48;
  char *v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  Swift::String v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;

  v64 = a6;
  v72 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v71 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v63 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v69 = (char *)&v61 - v17;
  v74 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v70 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v24 = (char *)&v61 - v23;
  MEMORY[0x24BDAC7A8](v22, v25);
  v27 = (char *)&v61 - v26;
  v73 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  dispatch thunk of IteratorProtocol.next()();
  v65 = a1;
  v76 = v10;
  v28 = dispatch thunk of Collection.count.getter();
  v29 = *(_QWORD *)(a4 + 24);
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 16);
  if (v28 == v30(a2, v29))
  {
    v77 = v24;
    v62 = AssociatedTypeWitness;
    v31 = a3;
    v32 = v65;
    result = v30(a2, v29);
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v34 = v27;
      v35 = v32;
      v67 = v31;
      v68 = v34;
      v36 = a2;
      v37 = v62;
      v38 = v63;
      v39 = v77;
      v40 = v73;
      if (result)
      {
        v41 = 0;
        v42 = 0;
        v66 = result;
        do
        {
          v75 = v42 + 1;
          dispatch thunk of Collection.startIndex.getter();
          v43 = v69;
          dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
          v44 = *(void (**)(char *, uint64_t))(v71 + 8);
          v44(v38, v37);
          v40 = v73;
          v45 = (void (*)(unint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
          v47 = *v46;
          v45(&v78, 0);
          v48 = v43;
          v49 = v70;
          v44(v48, v37);
          LOBYTE(v78) = v47;
          v50 = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
          MEMORY[0x24BD00694](&v78, MEMORY[0x24BEE4260], v50, v36, v40);
          v78 = v41;
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
          v51 = *(void (**)(char *, uint64_t))(v74 + 8);
          v51(v49, v36);
          dispatch thunk of static BinaryInteger.|= infix(_:_:)();
          v39 = v77;
          v51(v77, v36);
          v41 += 8;
          v42 = v75;
        }
        while (v66 != v75);
      }
      v52 = v74;
      v53 = v68;
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v39, v68, v36);
      MEMORY[0x24BD00694](v39, v36, v40, v36, v40);
      (*(void (**)(uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v35);
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v53, v36);
    }
  }
  else
  {
    v78 = 0;
    v79 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v78 = 0xD00000000000001DLL;
    v79 = 0x8000000249C300D0;
    v80 = v30(a2, v29);
    v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0x3D746F67202CLL;
    v55._object = (void *)0xE600000000000000;
    String.append(_:)(v55);
    v56 = v65;
    v80 = dispatch thunk of Collection.count.getter();
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58 = v78;
    v59 = v79;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v60 = v58;
    v60[1] = v59;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v56, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v27, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError;
  if (!lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VDAFCodableError, &type metadata for VDAFCodableError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError;
  if (!lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VDAFCodableError, &type metadata for VDAFCodableError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError);
  }
  return result;
}

uint64_t Array<A>.init<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t TupleTypeMetadata3;
  uint64_t AssociatedTypeWitness;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v49 = a1;
  v45 = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v9 = type metadata accessor for Optional();
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)&v41 - v12;
  v47 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11, v14);
  v42 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v15, v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of IteratorProtocol.next()();
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a4 + 24) + 16))(a2);
  v22 = v49;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, a2);
  v46 = a5;
  v48 = a3;
  v23 = dispatch thunk of Collection.count.getter();
  if (v21 == -1)
    goto LABEL_5;
  if (v21)
    goto LABEL_7;
  if (!v23)
  {
    dispatch thunk of Collection.count.getter();
    __break(1u);
LABEL_5:
    v23 = dispatch thunk of Collection.count.getter();
    if (v23 != 0x8000000000000000)
      goto LABEL_10;
    __break(1u);
LABEL_7:
    if (v23 % v21)
      goto LABEL_8;
    v23 = dispatch thunk of Collection.count.getter();
LABEL_10:
    v34 = v48;
    v35 = v23 / v21;
    v36 = (uint64_t)v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v42, v22, v48);
    v37 = TupleTypeMetadata3;
    v38 = *(int *)(TupleTypeMetadata3 + 48);
    v39 = *(int *)(TupleTypeMetadata3 + 64);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v13, 1, 1);
    *(_QWORD *)&v13[v38] = v35;
    *(_QWORD *)&v13[v39] = v21;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v13, 0, 1, v37);
    v32 = Array<A>.init<A>(from:parameter:)(v36, (uint64_t)v13, a2, v34, v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49, v34);
    return v32;
  }
LABEL_8:
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  type metadata accessor for Array();
  v24._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x8000000249C30120;
  v25._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v25);
  v26 = v48;
  v52 = dispatch thunk of Collection.count.getter();
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0xD00000000000002ELL;
  v28._object = (void *)0x8000000249C30140;
  String.append(_:)(v28);
  v52 = v21;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 41;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31 = v50;
  v32 = v51;
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v33 = v31;
  v33[1] = v32;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v22, v26);
  return v32;
}

{
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v40 = *(_QWORD *)(a4 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v11 = type metadata accessor for Optional();
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v15 = (char *)&AssociatedTypeWitness - v14;
  v43 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v13, v16);
  v18 = (char *)&AssociatedTypeWitness - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a5;
  v45 = a3;
  v19 = dispatch thunk of Collection.count.getter();
  v44 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  v20 = v44(a2, a4);
  v42 = a1;
  if (v20 != -1)
  {
    if (v20)
      v19 %= v20;
    if (v19)
    {
      v46 = 0;
      v47 = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      type metadata accessor for Array();
      v21._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._object = (void *)0x8000000249C30120;
      v22._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v22);
      v23 = v45;
      v48 = dispatch thunk of Collection.count.getter();
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 0xD00000000000002ELL;
      v25._object = (void *)0x8000000249C30140;
      String.append(_:)(v25);
      v48 = v44(a2, a4);
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 41;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      v28 = v46;
      v29 = v47;
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(_QWORD *)v30 = v28;
      *(_QWORD *)(v30 + 8) = v29;
      *(_BYTE *)(v30 + 16) = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v23);
      return v28;
    }
  }
  v31 = dispatch thunk of Collection.count.getter();
  result = v44(a2, a4);
  if (result)
  {
    if (v31 != 0x8000000000000000 || result != -1)
    {
      v34 = v31 / result;
      v35 = a1;
      v36 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v18, v35, v45);
      v37 = *(int *)(TupleTypeMetadata3 + 48);
      v38 = *(int *)(TupleTypeMetadata3 + 64);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v15, 1, 1);
      *(_QWORD *)&v15[v37] = v34;
      *(_QWORD *)&v15[v38] = v44(a2, a4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(v15, 0, 1, TupleTypeMetadata3);
      v28 = Array<A>.init<A>(from:parameter:)((uint64_t)v18, (uint64_t)v15, a2, v36, v40, v41);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v36);
      return v28;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for UInt32(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for UInt32, MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance UInt32@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;

  v10 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance UInt32()
{
  return 4;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance UInt32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return VDAFCodableFixedWidthInteger.encode<A>(into:)(a1, a4, a2, v8, a3);
}

unint64_t instantiation function for generic protocol witness table for UInt64(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for UInt64, MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE45A0], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance UInt64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;

  v10 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  return VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance UInt64()
{
  return 8;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance UInt64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  return VDAFCodableFixedWidthInteger.encode<A>(into:)(a1, a4, a2, v8, a3);
}

unint64_t instantiation function for generic protocol witness table for _UInt128(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _UInt128 and conformance _UInt128()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128, &type metadata for _UInt128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance _UInt128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;

  v10 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  return VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance _UInt128()
{
  return 16;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance _UInt128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  return VDAFCodableFixedWidthInteger.encode<A>(into:)(a1, a4, a2, v8, a3);
}

uint64_t AggregateShare.share.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AggregateShare.share.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AggregateShare.share.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t AggregateShare.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static AggregateShare.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AggregateShare<A>()
{
  return static AggregateShare.== infix(_:_:)();
}

uint64_t static AggregateShare.+= infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  v6 = type metadata accessor for Array();
  return Array<A>.elementwiseAdd(_:)(v5, v6, a4);
}

uint64_t AggregateShare.accumulate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = type metadata accessor for Array();
  v4 = swift_bridgeObjectRetain();
  Array<A>.elementwiseAdd(_:)(v4, v3, v2);
  return swift_bridgeObjectRelease();
}

_QWORD *AggregateShare.init(_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static AggregatableProtocol.+= infix(_:_:) in conformance AggregateShare<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static AggregateShare.+= infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for AggregatableProtocol.accumulate(_:) in conformance AggregateShare<A>(uint64_t a1, uint64_t a2)
{
  return AggregateShare.accumulate(_:)(a1, a2);
}

uint64_t AggregateShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v17);
  v18 = Array<A>.init<A>(from:)((uint64_t)v16, a3, a4, a5, a6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
  if (!v7)
    *a7 = v18;
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance AggregateShare<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return AggregateShare.init<A>(from:parameter:)(a1, a2, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4, a6);
}

uint64_t AggregateShare.encodedLength.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BD00400](v3, v4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(v4);
  result = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    __break(1u);
  return result;
}

uint64_t AggregateShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return Array<A>.encode<A>(into:)(a1, *v4, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40), a4);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance AggregateShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AggregateShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t dispatch thunk of static AggregatableProtocol.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AggregatableProtocol.accumulate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AggregatableProtocol.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata instantiation function for AggregateShare()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for AggregateShare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AggregateShare);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24BD00B80](a1, v6, a5);
}

int64_t specialized static FixedWidthInteger.randomVector(count:)(int64_t result)
{
  int64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    v2 = MEMORY[0x24BEE4AF8];
    if (result)
    {
      v7 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      v2 = v7;
      do
      {
        v6 = 0;
        MEMORY[0x24BD00C64](&v6, 8);
        v3 = v6;
        v7 = v2;
        v5 = *(_QWORD *)(v2 + 16);
        v4 = *(_QWORD *)(v2 + 24);
        if (v5 >= v4 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1);
          v2 = v7;
        }
        *(_QWORD *)(v2 + 16) = v5 + 1;
        *(_BYTE *)(v2 + v5 + 32) = v3;
        --v1;
      }
      while (v1);
    }
    return v2;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VDAFError(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t static VDAFErrorProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = VDAFErrorProtocol.value.getter(a3);
  v6 = v5;
  v7 = VDAFErrorProtocol.value.getter(a3);
  if (v6)
  {
    if (v8)
    {
      if (v4 == v7 && v6 == v8)
      {
        swift_bridgeObjectRelease();
        v9 = 1;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    if (!v8)
    {
      v9 = 1;
      return v9 & 1;
    }
    v9 = 0;
  }
  swift_bridgeObjectRelease();
  return v9 & 1;
}

VDAF::VDAFCodepoint_optional __swiftcall VDAFCodepoint.init(rawValue:)(Swift::UInt32 rawValue)
{
  char *v1;
  char v2;

  if ((int)rawValue > -2)
  {
    v2 = 1;
    switch(rawValue)
    {
      case 0xFFFFFFFF:
        *v1 = 11;
        break;
      case 0u:
        v2 = 0;
        goto LABEL_15;
      case 1u:
LABEL_15:
        *v1 = v2;
        break;
      case 2u:
        *v1 = 2;
        break;
      case 3u:
        *v1 = 3;
        break;
      default:
        if (rawValue == 4096)
          *v1 = 4;
        else
LABEL_18:
          *v1 = 12;
        break;
    }
  }
  else
  {
    switch(rawValue)
    {
      case 0xFFFF1000:
        *v1 = 6;
        break;
      case 0xFFFF1001:
        *v1 = 7;
        break;
      case 0xFFFF1002:
        *v1 = 8;
        break;
      case 0xFFFF1003:
        *v1 = 9;
        break;
      case 0xFFFF1004:
        *v1 = 10;
        break;
      default:
        if (rawValue != -65536)
          goto LABEL_18;
        *v1 = 5;
        break;
    }
  }
  return (VDAF::VDAFCodepoint_optional)rawValue;
}

uint64_t VDAFCodepoint.rawValue.getter()
{
  char *v0;

  return dword_249C290F8[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance VDAFCodepoint(char *a1, char *a2)
{
  return dword_249C290F8[*a1] == dword_249C290F8[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VDAFCodepoint()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_249C290F8[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance VDAFCodepoint()
{
  char *v0;

  Hasher._combine(_:)(dword_249C290F8[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VDAFCodepoint()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_249C290F8[v1]);
  return Hasher._finalize()();
}

VDAF::VDAFCodepoint_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VDAFCodepoint(Swift::UInt32 *a1)
{
  return VDAFCodepoint.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance VDAFCodepoint(_DWORD *a1@<X8>)
{
  char *v1;

  *a1 = dword_249C290F8[*v1];
}

char *static VDAFProtocol.domainSeparationTag(usage:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return static VDAFProtocol.domainSeparationTag(usage:)(a1, a2, a3);
}

{
  int v5;
  char *v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  unsigned int v15;
  int v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x24BEE4AF8]);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 224))(a2, a3);
  v9 = *((_QWORD *)v6 + 2);
  v8 = *((_QWORD *)v6 + 3);
  v10 = v8 >> 1;
  v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v6);
    v8 = *((_QWORD *)v6 + 3);
    v10 = v8 >> 1;
  }
  *((_QWORD *)v6 + 2) = v11;
  v6[v9 + 32] = v7;
  if (v10 < (uint64_t)(v9 + 2))
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 2, 1, v6);
  *((_QWORD *)v6 + 2) = v9 + 2;
  v6[v11 + 32] = 0;
  v17 = v6;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a3 + 208))((char *)&v16 + 3, a2, a3);
  v15 = bswap32(dword_249C290F8[SHIBYTE(v16)]);
  v12 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v15, (unint64_t)&v16);
  specialized Array.append<A>(contentsOf:)(v12);
  LOWORD(v15) = __rev16(v5 + 1);
  v13 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v15, (unint64_t)&v15 + 2);
  specialized Array.append<A>(contentsOf:)(v13);
  return v17;
}

uint64_t VDAFErrorProtocol.value.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  MEMORY[0x24BDAC7A8](a1, v1);
  (*(void (**)(char *))(v3 + 16))((char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8[2] = String.init<A>(describing:)();
  v8[3] = v4;
  v8[0] = 40;
  v8[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = *(_QWORD *)(v5 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + v7 + 32), (const void *)(v6 + 32), v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    goto LABEL_8;
  v13 = *(_QWORD *)(v7 + 24) >> 1;
  if (v13 < v9)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v14 = v8 + v6;
      else
        v14 = v8;
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)isUniquelyReferenced_nonNull_native, v14, 1, (char *)v7);
      v7 = isUniquelyReferenced_nonNull_native;
      v13 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) >> 1;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_12:
  v15 = *(_QWORD *)(v7 + 16);
  if (v13 - v15 < v6)
    goto LABEL_19;
  memcpy((void *)(v7 + 8 * v15 + 32), (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    swift_unknownObjectRelease();
    *v4 = v7;
    return;
  }
  v16 = *(_QWORD *)(v7 + 16);
  v17 = __OFADD__(v16, v6);
  v18 = v16 + v6;
  if (!v17)
  {
    *(_QWORD *)(v7 + 16) = v18;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t VDAFProtocol.domainSeparationTag(usage:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return (*(uint64_t (**)(char *))(a3 + 240))(&v4);
}

Swift::Bool __swiftcall VDAFProtocol.isValidAggregatorID(_:)(Swift::Int a1)
{
  uint64_t v1;
  Swift::Int v3;

  v3 = (*(uint64_t (**)())(v1 + 232))();
  if (v3 < 0)
    __break(1u);
  else
    LOBYTE(v3) = a1 >= 0 && v3 > a1;
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VDAFProtocol.assertValidAggregatorID(_:)(Swift::Int a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (*(uint64_t (**)())(v1 + 232))();
  if (v3 < 0)
  {
    __break(1u);
  }
  else if (a1 < 0 || v3 <= a1)
  {
    v4 = dispatch thunk of CustomStringConvertible.description.getter();
    v6 = v5;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v7 = v4;
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = 0;
    swift_willThrow();
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VDAFProtocol.isLeaderAggregatorID(_:)(Swift::Int a1)
{
  VDAFProtocol.assertValidAggregatorID(_:)(a1);
  return a1 == 0;
}

uint64_t Client.shard(_:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, int64_t *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v16;

  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  v16 = specialized static FixedWidthInteger.randomVector(count:)(v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int64_t *, uint64_t, unint64_t, uint64_t, uint64_t))(a5 + 24);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v13 = lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  v14 = v11(a1, a2, a3, &v16, v12, v13, a4, a5);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t Aggregator.prepareMessageFrom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v13)(uint64_t *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v17[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v11 = (char *)v17 - v10;
  v19 = MEMORY[0x24BEE4AF8];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = *(uint64_t (**)(uint64_t *, uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v15 = lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  result = v13(&v19, v14, v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!v4)
  {
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 136))(v18, v11, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(size_t result, unint64_t a2)
{
  const void *v3;
  int64_t v4;
  _QWORD *v5;

  if (!result)
    return MEMORY[0x24BEE4AF8];
  v3 = (const void *)result;
  v4 = a2 - result;
  if (a2 == result)
    return MEMORY[0x24BEE4AF8];
  if (v4 < 1)
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v5 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2)
      goto LABEL_13;
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VDAFError and conformance VDAFError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VDAFError and conformance VDAFError;
  if (!lazy protocol witness table cache variable for type VDAFError and conformance VDAFError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VDAFError, &type metadata for VDAFError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFError and conformance VDAFError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VDAFError and conformance VDAFError;
  if (!lazy protocol witness table cache variable for type VDAFError and conformance VDAFError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VDAFError, &type metadata for VDAFError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFError and conformance VDAFError);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for VDAFError(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  result = lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type VDAFCodepoint and conformance VDAFCodepoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VDAFCodepoint and conformance VDAFCodepoint;
  if (!lazy protocol witness table cache variable for type VDAFCodepoint and conformance VDAFCodepoint)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VDAFCodepoint, &type metadata for VDAFCodepoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFCodepoint and conformance VDAFCodepoint);
  }
  return result;
}

uint64_t outlined copy of VDAFError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for VDAFError(uint64_t a1)
{
  return outlined consume of VDAFError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of VDAFError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for VDAFError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of VDAFError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VDAFError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of VDAFError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of VDAFError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VDAFError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of VDAFError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VDAFError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VDAFError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for VDAFError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for VDAFError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VDAFError()
{
  return &type metadata for VDAFError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for VDAFCodepoint(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VDAFCodepoint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_249BB6738 + 4 * byte_249C28E0F[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_249BB676C + 4 * byte_249C28E0A[v4]))();
}

uint64_t sub_249BB676C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249BB6774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249BB677CLL);
  return result;
}

uint64_t sub_249BB6788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249BB6790);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_249BB6794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249BB679C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for VDAFCodepoint(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for VDAFCodepoint(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for VDAFCodepoint()
{
  return &type metadata for VDAFCodepoint;
}

uint64_t dispatch thunk of static VDAFProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of static VDAFProtocol.nonceSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of static VDAFProtocol.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of VDAFProtocol.numOfAggregators.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of static VDAFProtocol.domainSeparationTag(usage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 240))();
}

uint64_t dispatch thunk of Client.randomSizeForShard.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Client.shard<A>(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

uint64_t type metadata completion function for PrepareTransition()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[6];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2 = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v7[4] = v7;
      v4 = swift_getAssociatedTypeWitness();
      AssociatedTypeWitness = v4;
      if (v5 <= 0x3F)
      {
        v7[5] = *(_QWORD *)(v4 - 8) + 64;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrepareTransition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v20 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v20 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v5 + v7;
  v9 = (v8 & ~(unint64_t)v7) + *(_QWORD *)(v6 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = (*(_BYTE *)(v4 + 80) | v7 | *(_BYTE *)(v11 + 80));
  if (v13 <= 7
    && v12 + 1 <= 0x18
    && ((*(_DWORD *)(v4 + 80) | v7 | *(_DWORD *)(v11 + 80)) & 0x100000) == 0)
  {
    v17 = *((unsigned __int8 *)a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    if (v17 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, v10);
      *((_BYTE *)a1 + v12) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v8) & ~(unint64_t)v7, ((unint64_t)a2 + v8) & ~(unint64_t)v7, v20);
      *((_BYTE *)a1 + v12) = 0;
    }
  }
  else
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for PrepareTransition(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v4 + v7;
  v9 = (v8 & ~v7) + *(_QWORD *)(v6 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= v9)
    v12 = v9;
  v13 = *(unsigned __int8 *)(a1 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 1)
  {
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    v16 = a1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
    v16 = (v8 + a1) & ~v7;
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    v10 = v5;
  }
  return v15(v16, v10);
}

uint64_t initializeWithCopy for PrepareTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v5 + v8;
  v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v10)
    v13 = v10;
  else
    v13 = *(_QWORD *)(v12 + 64);
  v14 = *(unsigned __int8 *)(a2 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, a2, v11);
    v16 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v9 + a1) & ~v8, (v9 + a2) & ~v8, v6);
    v16 = 0;
  }
  *(_BYTE *)(a1 + v13) = v16;
  return a1;
}

uint64_t assignWithCopy for PrepareTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v20 = swift_getAssociatedTypeWitness();
    v6 = *(_QWORD *)(v20 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v8 = v5 + v7;
    v9 = (v8 & ~v7) + *(_QWORD *)(v6 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v11 + 64) <= v9)
      v12 = v9;
    else
      v12 = *(_QWORD *)(v11 + 64);
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v7;
    if (v13 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v8 + a1) & v15, v20);
    }
    v16 = *(unsigned __int8 *)(a2 + v12);
    if (v16 >= 2)
    {
      if (v12 <= 3)
        v17 = v12;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, a2, v10);
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((v8 + a1) & v15, (v8 + a2) & v15, v20);
      v18 = 0;
    }
    *(_BYTE *)(a1 + v12) = v18;
  }
  return a1;
}

uint64_t initializeWithTake for PrepareTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v5 + v8;
  v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v10)
    v13 = v10;
  else
    v13 = *(_QWORD *)(v12 + 64);
  v14 = *(unsigned __int8 *)(a2 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a1, a2, v11);
    v16 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))((v9 + a1) & ~v8, (v9 + a2) & ~v8, v6);
    v16 = 0;
  }
  *(_BYTE *)(a1 + v13) = v16;
  return a1;
}

uint64_t assignWithTake for PrepareTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v20 = swift_getAssociatedTypeWitness();
    v6 = *(_QWORD *)(v20 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v8 = v5 + v7;
    v9 = (v8 & ~v7) + *(_QWORD *)(v6 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v11 + 64) <= v9)
      v12 = v9;
    else
      v12 = *(_QWORD *)(v11 + 64);
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v7;
    if (v13 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v8 + a1) & v15, v20);
    }
    v16 = *(unsigned __int8 *)(a2 + v12);
    if (v16 >= 2)
    {
      if (v12 <= 3)
        v17 = v12;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a1, a2, v10);
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))((v8 + a1) & v15, (v8 + a2) & v15, v20);
      v18 = 0;
    }
    *(_BYTE *)(a1 + v12) = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PrepareTransition(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = ((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) <= v6)
    v8 = v6;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 > 3)
      LODWORD(v9) = 4;
    __asm { BR              X11 }
  }
  return (v14 + 255);
}

void storeEnumTagSinglePayload for PrepareTransition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v8)
    v9 = v8;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for PrepareTransition(uint64_t a1)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = ((v2 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4)
    v5 = v4;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void destructiveInjectEnumTag for PrepareTransition(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  if (a2 > 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v10 = ((v8 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v11 = swift_getAssociatedTypeWitness();
    if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) <= v10)
      v12 = v10;
    else
      v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
    v13 = a2 - 2;
    if (v12 < 4)
    {
      v14 = v13 >> (8 * v12);
      v15 = v13 & ~(-1 << (8 * v12));
      a1[v12] = v14 + 2;
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v12 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
    else
    {
      a1[v12] = 2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v13;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v6 = swift_getAssociatedTypeWitness();
    v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
    if (v4 > v7)
      v7 = v4;
    a1[v7] = a2;
  }
}

uint64_t type metadata accessor for PrepareTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrepareTransition);
}

uint64_t dispatch thunk of static Aggregator.numOfRounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of Aggregator.verifyKeyLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of Aggregator.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 128))(a1, a2);
}

uint64_t dispatch thunk of Aggregator.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of Aggregator.prepareNext(state:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of Aggregator.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 152))();
}

uint64_t dispatch thunk of Aggregator.isValid(parameter:previousParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of Aggregator.inputShare<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 168))();
}

uint64_t dispatch thunk of Aggregator.publicShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

uint64_t dispatch thunk of Aggregator.prepareState<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 184))();
}

uint64_t dispatch thunk of Aggregator.prepareShare<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 192))();
}

uint64_t dispatch thunk of Aggregator.prepareMessage<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 200))();
}

uint64_t dispatch thunk of Aggregator.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 208))();
}

uint64_t dispatch thunk of Collector.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of Collector.aggregateShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

void static VerificationJointRandomness.partUsage.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static VerificationJointRandomness.seedUsage.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static VerificationJointRandomness.randomnessUsage.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t VerificationJointRandomness.parts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VerificationJointRandomness.seed.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (v0[3])
  {
    v1 = v0[3];
  }
  else
  {
    v2 = v0;
    v3 = *v0;
    v4 = v2[2];
    v5 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VerificationJointRandomness<A, B>, v3);
    v1 = static JointRandomness.jointRandSeed(parts:)(v4, v3, v5);
    v2[3] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VerificationJointRandomness.seed.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*VerificationJointRandomness.seed.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = VerificationJointRandomness.seed.getter();
  return VerificationJointRandomness.seed.modify;
}

uint64_t VerificationJointRandomness.seed.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 24) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t VerificationJointRandomness.xof.getter()
{
  _QWORD *v0;
  uint64_t v1;

  if (v0[4])
  {
    v1 = v0[4];
  }
  else
  {
    v1 = closure #1 in VerificationJointRandomness.xof.getter(v0);
    v0[4] = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t VerificationJointRandomness.xof.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in VerificationJointRandomness.xof.getter(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  char v12;

  v2 = *(_QWORD *)(*a1 + 96);
  v3 = *(_QWORD *)(*a1 + 80);
  v4 = VerificationJointRandomness.seed.getter();
  v12 = 2;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 240))(&v12, v3, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_249C29130;
  v7 = a1[6];
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 <= 0xFF)
  {
    v8 = result;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_BYTE *)(v8 + 32) = v7;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v11 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v4, v5, v8, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t (*VerificationJointRandomness.xof.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = VerificationJointRandomness.xof.getter();
  return VerificationJointRandomness.xof.modify;
}

uint64_t VerificationJointRandomness.xof.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 32) = *a1;
  return swift_unknownObjectRelease();
}

uint64_t VerificationJointRandomness.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t VerificationJointRandomness.numOfProofs.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

_QWORD *VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = a1;
  result[6] = a2;
  result[2] = a3;
  result[3] = 0;
  return result;
}

_QWORD *VerificationJointRandomness.init(count:numOfProofs:parts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = 0;
  v3[5] = a1;
  v3[6] = a2;
  v3[2] = a3;
  v3[3] = 0;
  return v3;
}

_QWORD *VerificationJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:count:numOfProofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;

  v19 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VerificationJointRandomness<A, B>, v10);
  v20 = static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a1, a2, a3, a4, a5, a6, a7, a8, v10, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = a9;
  result[6] = a10;
  result[2] = v20;
  result[3] = 0;
  return result;
}

uint64_t VerificationJointRandomness.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 88);
  v2 = v0[5];
  v3 = VerificationJointRandomness.xof.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = static FieldElement.randomVector<A>(count:using:)(v2, v3, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t VerificationJointRandomness.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t VerificationJointRandomness.__deallocating_deinit()
{
  VerificationJointRandomness.deinit();
  return swift_deallocClassInstance();
}

uint64_t associated type witness table accessor for JointRandomness.F : FieldElement in VerificationJointRandomness<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 104);
}

uint64_t associated type witness table accessor for JointRandomness.VDAF : VDAFProtocol in VerificationJointRandomness<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

void protocol witness for static JointRandomness.partUsage.getter in conformance VerificationJointRandomness<A, B>(_BYTE *a1@<X8>)
{
  static VerificationJointRandomness.partUsage.getter(a1);
}

void protocol witness for static JointRandomness.seedUsage.getter in conformance VerificationJointRandomness<A, B>(_BYTE *a1@<X8>)
{
  static VerificationJointRandomness.seedUsage.getter(a1);
}

void protocol witness for static JointRandomness.randomnessUsage.getter in conformance VerificationJointRandomness<A, B>(_BYTE *a1@<X8>)
{
  static VerificationJointRandomness.randomnessUsage.getter(a1);
}

uint64_t protocol witness for JointRandomness.parts.getter in conformance VerificationJointRandomness<A, B>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for JointRandomness.seed.getter in conformance VerificationJointRandomness<A, B>()
{
  return VerificationJointRandomness.seed.getter();
}

uint64_t protocol witness for JointRandomness.xof.getter in conformance VerificationJointRandomness<A, B>()
{
  return VerificationJointRandomness.xof.getter();
}

uint64_t protocol witness for JointRandomness.next() in conformance VerificationJointRandomness<A, B>()
{
  return VerificationJointRandomness.next()();
}

uint64_t sub_249BB8394@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = VerificationJointRandomness.seed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_249BB83BC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4BD0], VerificationJointRandomness.seed.setter);
}

uint64_t sub_249BB83D0()
{
  return 32;
}

__n128 sub_249BB83DC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_249BB83E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = VerificationJointRandomness.xof.getter();
  *a1 = result;
  return result;
}

uint64_t sub_249BB8410(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4F80], VerificationJointRandomness.xof.setter);
}

uint64_t keypath_setTm(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(uint64_t))
{
  uint64_t v7;

  v7 = a5(*a1);
  return a6(v7);
}

uint64_t sub_249BB8450()
{
  return 32;
}

__n128 sub_249BB845C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata completion function for VerificationJointRandomness()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for VerificationJointRandomness()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t method lookup function for VerificationJointRandomness()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t RandomAccessCollection<>.popFirst(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a2);
  Collection.prefix(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v2, a2);
  return Collection.dropFirst(_:)();
}

BOOL specialized SignedInteger<>.isMultiple(of:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!(a2 | a1))
    return (a4 | a3) == 0;
  if (a2 == -1 && a1 == -1)
    return 1;
  _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
  return !v6 && v5 == 0;
}

uint64_t _UInt128.low.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _UInt128.low.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_UInt128.low.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _UInt128.high.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _UInt128.high.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_UInt128.high.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _UInt128.init(high:low:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a2;
  a3[1] = result;
  return result;
}

void _UInt128.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t _UInt128.init(bitPattern:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double static _UInt128.one.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_249C291E0;
  return result;
}

uint64_t _UInt128.description.getter()
{
  Swift::String v0;

  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _UInt128()
{
  Swift::String v0;

  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t _UInt128.debugDescription.getter()
{
  Swift::String v0;

  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

BOOL static _UInt128.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL static _UInt128.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    return *a1 < *a2;
  else
    return v5;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _UInt128(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    return *a1 < *a2;
  else
    return v5;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _UInt128(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 >= v2;
  if (v4)
    return *a2 >= *a1;
  else
    return v5;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _UInt128(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 >= v3;
  if (v4)
    return *a1 >= *a2;
  else
    return v5;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _UInt128(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 < v2;
  if (v4)
    return *a2 < *a1;
  else
    return v5;
}

void _UInt128.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int _UInt128.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _UInt128()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

uint64_t _UInt128.components.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t (*_UInt128.components.modify(int8x16_t *a1))()
{
  int8x16_t *v1;

  a1[1].i64[0] = (uint64_t)v1;
  *a1 = vextq_s8(*v1, *v1, 8uLL);
  return _UInt128.components.modify;
}

unint64_t *static _UInt128.- infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  char v9;
  unint64_t v10;

  v4 = *result;
  v3 = result[1];
  v6 = *a2;
  v5 = a2[1];
  v7 = v3 >= v5;
  v8 = v3 - v5;
  v9 = !v7;
  v7 = v4 >= v6;
  v10 = v4 - v6;
  if (v7)
  {
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8;
      return result;
    }
  }
  else
  {
    if (!v8)
      v9 = 1;
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t _UInt128.subtractingReportingOverflow(_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = *v2;
  v6 = v2[1];
  v7 = v6 >= v4;
  v8 = v6 - v4;
  v9 = !v7;
  v7 = v5 >= v3;
  v10 = v5 - v3;
  LODWORD(v3) = v5 < v3;
  if (v7)
  {
    if (v9)
    {
      v3 = 1;
      v11 = v8;
      goto LABEL_13;
    }
    v11 = v8;
  }
  else
  {
    v11 = v8 - 1;
    if ((v9 & 1) != 0)
    {
      v3 = 1;
      goto LABEL_13;
    }
  }
  if (v8)
    v3 = 0;
  else
    v3 = v3;
LABEL_13:
  *a1 = v10;
  a1[1] = v11;
  return v3;
}

unint64_t *static _UInt128.-= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8;
  unint64_t v9;

  v3 = *a2;
  v2 = a2[1];
  v5 = *result;
  v4 = result[1];
  v6 = v4 >= v2;
  v7 = v4 - v2;
  v8 = !v6;
  v6 = v5 >= v3;
  v9 = v5 - v3;
  if (v6)
  {
    if ((v8 & 1) == 0)
    {
      *result = v9;
      result[1] = v7;
      return result;
    }
  }
  else
  {
    if (!v7)
      v8 = 1;
    if ((v8 & 1) == 0)
    {
      *result = v9;
      result[1] = v7 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

_QWORD *static _UInt128.+ infix(_:_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;

  v3 = result[1];
  v4 = a2[1];
  v5 = __CFADD__(*result, *a2);
  v6 = __CFADD__(v3, v4);
  v7 = v3 + v4;
  if (v6 || (v5 ? (v8 = v7 == -1) : (v8 = 0), v8))
  {
    __break(1u);
  }
  else
  {
    *a3 = *result + *a2;
    a3[1] = v7 + v5;
  }
  return result;
}

uint64_t _UInt128.addingReportingOverflow(_:)(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  v4 = v2[1];
  v5 = __CFADD__(*v2, *a2);
  v6 = __CFADD__(v4, v3);
  v7 = v4 + v3;
  if (v6)
  {
    v8 = 1;
    if (v5)
    {
LABEL_12:
      v9 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    v8 = v7 == -1 && v5;
    if (v5)
      goto LABEL_12;
  }
  v9 = 0;
LABEL_13:
  *a1 = *v2 + *a2;
  a1[1] = v9 + v7;
  return v8;
}

_QWORD *static _UInt128.+= infix(_:_:)(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;

  v2 = a2[1];
  v3 = result[1];
  v4 = __CFADD__(*result, *a2);
  v5 = __CFADD__(v3, v2);
  v6 = v3 + v2;
  if (v5 || (v4 ? (v7 = v6 == -1) : (v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += *a2;
    result[1] = v6 + v4;
  }
  return result;
}

_QWORD *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _UInt128@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;

  v3 = result[1];
  v4 = a2[1];
  v5 = __CFADD__(*result, *a2);
  v6 = __CFADD__(v3, v4);
  v7 = v3 + v4;
  if (v6 || (v5 ? (v8 = v7 == -1) : (v8 = 0), v8))
  {
    __break(1u);
  }
  else
  {
    *a3 = *result + *a2;
    a3[1] = v7 + v5;
  }
  return result;
}

_QWORD *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _UInt128(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;

  v2 = a2[1];
  v3 = result[1];
  v4 = __CFADD__(*result, *a2);
  v5 = __CFADD__(v3, v2);
  v6 = v3 + v2;
  if (v5 || (v4 ? (v7 = v6 == -1) : (v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += *a2;
    result[1] = v6 + v4;
  }
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _UInt128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  char v9;
  unint64_t v10;

  v4 = *result;
  v3 = result[1];
  v6 = *a2;
  v5 = a2[1];
  v7 = v3 >= v5;
  v8 = v3 - v5;
  v9 = !v7;
  v7 = v4 >= v6;
  v10 = v4 - v6;
  if (v7)
  {
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8;
      return result;
    }
  }
  else
  {
    if (!v8)
      v9 = 1;
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance _UInt128(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8;
  unint64_t v9;

  v3 = *a2;
  v2 = a2[1];
  v5 = *result;
  v4 = result[1];
  v6 = v4 >= v2;
  v7 = v4 - v2;
  v8 = !v6;
  v6 = v5 >= v3;
  v9 = v5 - v3;
  if (v6)
  {
    if ((v8 & 1) == 0)
    {
      *result = v9;
      result[1] = v7;
      return result;
    }
  }
  else
  {
    if (!v7)
      v8 = 1;
    if ((v8 & 1) == 0)
    {
      *result = v9;
      result[1] = v7 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 _UInt128.magnitude.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 _UInt128.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t _UInt128.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[2];
  char v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  result = _UInt128.init<A>(exactly:)(v10, a2, a3, v15);
  if (v16 == 1)
  {
    __break(1u);
  }
  else
  {
    v13 = v15[0];
    v12 = v15[1];
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
    *a4 = v13;
    a4[1] = v12;
  }
  return result;
}

uint64_t _UInt128.init<A>(exactly:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char v71;
  uint64_t v72;
  char *v73;
  char v74;
  char *v75;
  char *v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t AssociatedConformanceWitness;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t result;
  uint64_t *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t);
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  unint64_t v150;
  char *v151;
  char *v152;
  void (*v153)(char *, char *, uint64_t);
  char v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  BOOL v179;
  char *v180;
  char *v181;
  char v182;
  char *v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  void (*v197)(char *, uint64_t);
  char *v198;
  char *v199;
  uint64_t AssociatedTypeWitness;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  void (*v209)(char *, char *, uint64_t);
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  unint64_t v216;

  v211 = a4;
  v7 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  v201 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v199 = (char *)&v186 - v9;
  v10 = swift_checkMetadataState();
  v210 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v192 = (char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v17 = (char *)&v186 - v16;
  v19 = MEMORY[0x24BDAC7A8](v15, v18);
  v21 = (char *)&v186 - v20;
  v23 = MEMORY[0x24BDAC7A8](v19, v22);
  v207 = (char *)&v186 - v24;
  MEMORY[0x24BDAC7A8](v23, v25);
  v215 = (char *)&v186 - v26;
  v212 = v7;
  v205 = *(_QWORD *)(v7 + 16);
  v206 = swift_getAssociatedTypeWitness();
  v28 = MEMORY[0x24BDAC7A8](v206, v27);
  v204 = (char *)&v186 - v29;
  v30 = *(_QWORD *)(a2 - 8);
  v32 = MEMORY[0x24BDAC7A8](v28, v31);
  v189 = (char *)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v198 = (char *)&v186 - v36;
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v190 = (char *)&v186 - v39;
  v41 = MEMORY[0x24BDAC7A8](v38, v40);
  v194 = (char *)&v186 - v42;
  v44 = MEMORY[0x24BDAC7A8](v41, v43);
  v195 = (char *)&v186 - v45;
  v47 = MEMORY[0x24BDAC7A8](v44, v46);
  v193 = (char *)&v186 - v48;
  v50 = MEMORY[0x24BDAC7A8](v47, v49);
  v203 = (char *)&v186 - v51;
  v53 = MEMORY[0x24BDAC7A8](v50, v52);
  v208 = (char *)&v186 - v54;
  v56 = MEMORY[0x24BDAC7A8](v53, v55);
  v196 = (char *)&v186 - v57;
  v59 = MEMORY[0x24BDAC7A8](v56, v58);
  v61 = (char *)&v186 - v60;
  v63 = MEMORY[0x24BDAC7A8](v59, v62);
  v213 = (char *)&v186 - v64;
  MEMORY[0x24BDAC7A8](v63, v65);
  v67 = (char *)&v186 - v66;
  v209 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v209((char *)&v186 - v66, a1, a2);
  v68 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v214 = a1;
  if ((v68 & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      v216 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      v76 = v213;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v77 = dispatch thunk of static Comparable.< infix(_:_:)();
      v78 = v76;
      v70 = *(void (**)(char *, uint64_t))(v30 + 8);
      v70(v78, a2);
      v70(v67, a2);
      if ((v77 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v69 = dispatch thunk of BinaryInteger._lowWord.getter();
      v70 = *(void (**)(char *, uint64_t))(v30 + 8);
      v70(v67, a2);
      if (v69 < 0)
        goto LABEL_21;
    }
  }
  else
  {
    v71 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v72 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v71 & 1) != 0)
    {
      if (v72 <= 64)
      {
        v202 = v17;
        v188 = v30;
        v81 = v205;
        v80 = v206;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v83 = v204;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, v80, AssociatedConformanceWitness);
        v84 = v213;
        v85 = v81;
        v30 = v188;
        MEMORY[0x24BD00904](v83, a2, v85);
        LOBYTE(v80) = dispatch thunk of static Comparable.< infix(_:_:)();
        v86 = *(void (**)(char *, uint64_t))(v30 + 8);
        v86(v84, a2);
        v209(v61, v67, a2);
        a1 = v214;
        if ((v80 & 1) != 0)
        {
          v86(v61, a2);
          v86(v67, a2);
          v70 = v86;
        }
        else
        {
          v87 = dispatch thunk of BinaryInteger._lowWord.getter();
          v86(v61, a2);
          v86(v67, a2);
          v70 = v86;
          v17 = v202;
          if ((v87 & 0x8000000000000000) == 0)
            goto LABEL_18;
        }
LABEL_21:
        v104 = a1;
LABEL_22:
        result = ((uint64_t (*)(char *, uint64_t))v70)(v104, a2);
        v106 = v211;
        *v211 = 0;
        v106[1] = 0;
        *((_BYTE *)v106 + 16) = 1;
        return result;
      }
      v216 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      v73 = v213;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v74 = dispatch thunk of static Comparable.< infix(_:_:)();
      v75 = v73;
      v70 = *(void (**)(char *, uint64_t))(v30 + 8);
      v70(v75, a2);
      v70(v67, a2);
      a1 = v214;
      if ((v74 & 1) != 0)
        goto LABEL_21;
    }
    else if (v72 < 64)
    {
      v79 = dispatch thunk of BinaryInteger._lowWord.getter();
      v70 = *(void (**)(char *, uint64_t))(v30 + 8);
      v70(v67, a2);
      a1 = v214;
      if (v79 < 0)
        goto LABEL_21;
    }
    else
    {
      v70 = *(void (**)(char *, uint64_t))(v30 + 8);
      v70(v67, a2);
    }
  }
LABEL_18:
  v202 = v17;
  v188 = v30;
  v191 = v21;
  v197 = v70;
  v88 = v215;
  dispatch thunk of Numeric.magnitude.getter();
  v89 = swift_getAssociatedConformanceWitness();
  v90 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v91 = v210;
  v92 = *(void (**)(char *, char *, uint64_t))(v210 + 16);
  v93 = v207;
  v92(v207, v88, v10);
  if ((v90 & 1) != 0)
  {
    v94 = AssociatedTypeWitness;
    v95 = v201;
    v96 = swift_getAssociatedConformanceWitness();
    v187 = v89;
    v97 = v93;
    v98 = v199;
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v94, v96);
    v99 = v191;
    v100 = v95;
    v101 = v210;
    MEMORY[0x24BD00904](v98, v10, v100);
    swift_getAssociatedConformanceWitness();
    LOBYTE(v94) = dispatch thunk of static Comparable.< infix(_:_:)();
    v70 = *(void (**)(char *, uint64_t))(v101 + 8);
    v70(v99, v10);
    v102 = v97;
    v89 = v187;
    v70(v102, v10);
    v103 = v202;
    if ((v94 & 1) != 0)
      goto LABEL_38;
  }
  else
  {
    v70 = *(void (**)(char *, uint64_t))(v91 + 8);
    v70(v93, v10);
    v103 = v202;
  }
  v107 = v215;
  v108 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v92(v103, v107, v10);
  if (v108 <= 63)
  {
    v70(v103, v10);
    v109 = v214;
    goto LABEL_26;
  }
  v216 = -1;
  v116 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v117 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v116 & 1) != 0)
  {
    v109 = v214;
    if (v117 <= 64)
    {
      v187 = v89;
      v118 = AssociatedTypeWitness;
      v119 = v201;
      v120 = swift_getAssociatedConformanceWitness();
      v121 = v199;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v118, v120);
      v122 = v191;
      MEMORY[0x24BD00904](v121, v10, v119);
      swift_getAssociatedConformanceWitness();
      LOBYTE(v119) = dispatch thunk of static Comparable.> infix(_:_:)();
      v70(v122, v10);
      v123 = v216;
      v124 = (unint64_t)v192;
      (*(void (**)(char *, char *, uint64_t))(v210 + 32))(v192, v103, v10);
      if ((v119 & 1) == 0)
      {
LABEL_51:
        v70((char *)v124, v10);
        goto LABEL_26;
      }
      v125 = dispatch thunk of BinaryInteger._lowWord.getter();
      v70((char *)v124, v10);
      if (v123 < v125)
        goto LABEL_38;
LABEL_26:
      v110 = v215;
      v111 = dispatch thunk of BinaryInteger._lowWord.getter();
      v70(v110, v10);
      v112 = v213;
      dispatch thunk of IteratorProtocol.next()();
      v113 = dispatch thunk of static Comparable.< infix(_:_:)();
      v114 = (uint64_t (*)(char *, uint64_t))v197;
      v197(v112, a2);
      v115 = v113 << 63 >> 63;
      if ((v113 & 1) != 0)
        v111 = -v111;
      result = v114(v109, a2);
      goto LABEL_71;
    }
LABEL_35:
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    v126 = v191;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    swift_getAssociatedConformanceWitness();
    v127 = dispatch thunk of static Comparable.< infix(_:_:)();
    v70(v126, v10);
    v70(v103, v10);
    if ((v127 & 1) != 0)
      goto LABEL_38;
    goto LABEL_26;
  }
  v109 = v214;
  if (v117 >= 65)
    goto LABEL_35;
  v128 = dispatch thunk of BinaryInteger._lowWord.getter();
  v70(v103, v10);
  if (v216 >= v128)
    goto LABEL_26;
LABEL_38:
  v70(v215, v10);
  v216 = -1;
  v129 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  v130 = v213;
  v215 = (char *)v129;
  MEMORY[0x24BD00694](&v216, MEMORY[0x24BEE4568]);
  v131 = v196;
  MEMORY[0x24BD005F8](v214, v130, a2, a3);
  v70 = v197;
  v197(v130, a2);
  v216 = 64;
  lazy protocol witness table accessor for type Int and conformance Int();
  v109 = v208;
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  v10 = (uint64_t)v203;
  v209(v203, v131, a2);
  v132 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v133 = v206;
  if ((v132 & 1) != 0)
  {
    v134 = v205;
    v135 = swift_getAssociatedConformanceWitness();
    v136 = v204;
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v133, v135);
    v137 = v134;
    v10 = (uint64_t)v203;
    MEMORY[0x24BD00904](v136, a2, v137);
    v138 = dispatch thunk of static Comparable.>= infix(_:_:)();
    result = ((uint64_t (*)(char *, uint64_t))v70)(v130, a2);
    if ((v138 & 1) == 0)
    {
      __break(1u);
      return result;
    }
  }
  v139 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v140 = v195;
  if (v139 < 64)
    goto LABEL_53;
  v141 = v193;
  v209(v193, (char *)v10, a2);
  v216 = -1;
  v142 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v143 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v142 & 1) != 0)
  {
    if (v143 <= 64)
    {
      v144 = v205;
      v145 = v206;
      v146 = swift_getAssociatedConformanceWitness();
      v147 = v141;
      v148 = v204;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v145, v146);
      v149 = v213;
      MEMORY[0x24BD00904](v148, a2, v144);
      LOBYTE(v145) = dispatch thunk of static Comparable.> infix(_:_:)();
      v70(v149, a2);
      v150 = v216;
      v151 = v190;
      (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v190, v147, a2);
      if ((v145 & 1) != 0)
      {
        v124 = dispatch thunk of BinaryInteger._lowWord.getter();
        v70(v151, a2);
        v10 = (uint64_t)v203;
        v109 = v208;
        if (v150 < v124)
          goto LABEL_50;
      }
      else
      {
        v70(v151, a2);
        v10 = (uint64_t)v203;
        v109 = v208;
      }
      goto LABEL_53;
    }
LABEL_47:
    v152 = v213;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v124 = dispatch thunk of static Comparable.< infix(_:_:)();
    v70(v152, a2);
    v70(v141, a2);
    if ((v124 & 1) != 0)
      goto LABEL_50;
    goto LABEL_53;
  }
  if (v143 >= 65)
    goto LABEL_47;
  v124 = dispatch thunk of BinaryInteger._lowWord.getter();
  v70(v141, a2);
  if (v216 < v124)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_53:
  v111 = dispatch thunk of BinaryInteger._lowWord.getter();
  v70((char *)v10, a2);
  v153 = v209;
  v209(v140, v109, a2);
  v154 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v155 = v194;
  v153(v194, v140, a2);
  if ((v154 & 1) != 0)
  {
    v157 = v205;
    v156 = v206;
    v158 = swift_getAssociatedConformanceWitness();
    v159 = v204;
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v156, v158);
    v160 = v213;
    v161 = v157;
    v70 = v197;
    MEMORY[0x24BD00904](v159, a2, v161);
    LOBYTE(v156) = dispatch thunk of static Comparable.< infix(_:_:)();
    v70(v160, a2);
    v70(v155, a2);
    v162 = v208;
    v163 = v198;
    if ((v156 & 1) != 0)
      goto LABEL_68;
  }
  else
  {
    v70(v155, a2);
    v162 = v208;
    v163 = v198;
  }
  v164 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v209(v163, v140, a2);
  if (v164 > 63)
  {
    v165 = v131;
    v216 = -1;
    v166 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v167 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v166 & 1) != 0)
    {
      if (v167 <= 64)
      {
        v169 = v205;
        v168 = v206;
        v170 = swift_getAssociatedConformanceWitness();
        v171 = v204;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, v168, v170);
        v172 = v213;
        MEMORY[0x24BD00904](v171, a2, v169);
        v173 = v198;
        LOBYTE(v168) = dispatch thunk of static Comparable.> infix(_:_:)();
        v70(v172, a2);
        v174 = v216;
        v175 = v189;
        (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v189, v173, a2);
        if ((v168 & 1) == 0)
        {
          v70(v175, a2);
          v131 = v165;
          v162 = v208;
          goto LABEL_70;
        }
        v176 = dispatch thunk of BinaryInteger._lowWord.getter();
        v177 = v175;
        v178 = v176;
        v70(v177, a2);
        v179 = v174 >= v178;
LABEL_67:
        v131 = v165;
        v162 = v208;
        if (v179)
          goto LABEL_70;
LABEL_68:
        v70(v140, a2);
        v70(v214, a2);
        v70(v162, a2);
        v104 = v131;
        goto LABEL_22;
      }
    }
    else if (v167 < 65)
    {
      v183 = v198;
      v184 = dispatch thunk of BinaryInteger._lowWord.getter();
      v70(v183, a2);
      v179 = v216 >= v184;
      goto LABEL_67;
    }
    v180 = v213;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v181 = v198;
    v182 = dispatch thunk of static Comparable.< infix(_:_:)();
    v70(v180, a2);
    v70(v181, a2);
    v131 = v165;
    v162 = v208;
    if ((v182 & 1) == 0)
      goto LABEL_70;
    goto LABEL_68;
  }
  v70(v163, a2);
LABEL_70:
  v115 = dispatch thunk of BinaryInteger._lowWord.getter();
  v70(v140, a2);
  v70(v214, a2);
  v70(v162, a2);
  result = ((uint64_t (*)(char *, uint64_t))v70)(v131, a2);
LABEL_71:
  v185 = v211;
  *v211 = v111;
  v185[1] = v115;
  *((_BYTE *)v185 + 16) = 0;
  return result;
}

uint64_t static _UInt128.isSigned.getter()
{
  return 0;
}

unint64_t *static _UInt128.* infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v16;

  v3 = *result;
  v4 = result[1];
  v5 = *a2;
  v6 = a2[1];
  v7 = !is_mul_ok(v4, *a2);
  v8 = v4 * *a2;
  v9 = !is_mul_ok(*result, v6);
  v10 = __CFADD__(v8, *result * v6);
  v11 = v8 + *result * v6;
  v12 = v10;
  v13 = (v5 * (unsigned __int128)v3) >> 64;
  v10 = __CFADD__(v11, v13);
  v14 = v11 + v13;
  v15 = v10;
  if (v6)
    v16 = v4 == 0;
  else
    v16 = 1;
  if (!v16 || v7 || v9 || (v12 & 1) != 0 || (v15 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a3 = v5 * v3;
    a3[1] = v14;
  }
  return result;
}

uint64_t _UInt128.multipliedReportingOverflow(by:)(uint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v3 = a2[1];
  v6 = *v2;
  v5 = v2[1];
  v7 = v5 * *a2;
  v8 = *v2 * v3;
  if (v5)
    v9 = v3 == 0;
  else
    v9 = 1;
  LODWORD(v12) = !v9 || (v5 * (unsigned __int128)*a2) >> 64 != 0 || (*v2 * (unsigned __int128)v3) >> 64 != 0;
  v13 = __CFADD__(v7, v8);
  v14 = v7 + v8;
  v15 = v6 * v4;
  v16 = (v6 * (unsigned __int128)v4) >> 64;
  if (v13)
    LODWORD(v12) = 1;
  v13 = __CFADD__(v14, v16);
  v17 = v14 + v16;
  if (v13)
    v12 = 1;
  else
    v12 = v12;
  *a1 = v15;
  a1[1] = v17;
  return v12;
}

__n128 protocol witness for Numeric.magnitude.getter in conformance _UInt128@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

_QWORD *protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance _UInt128@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = 0;
  }
  return result;
}

uint64_t _UInt128.init(integerLiteral:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = result;
    a2[1] = 0;
  }
  return result;
}

__n128 _UInt128.Words._value.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 _UInt128.Words._value.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*_UInt128.Words._value.modify())()
{
  return AggregateShare.share.modify;
}

__n128 _UInt128.Words.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t _UInt128.Words.count.getter()
{
  return 2;
}

uint64_t _UInt128.Words.startIndex.getter()
{
  return 0;
}

uint64_t _UInt128.Words.endIndex.getter()
{
  return 2;
}

uint64_t _UInt128.Words.indices.getter()
{
  return 0;
}

Swift::Int __swiftcall _UInt128.Words.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall _UInt128.Words.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

unint64_t _UInt128.Words.subscript.getter(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result > 1)
  {
    __break(1u);
  }
  else
  {
    v2 = v1 + 8;
    if (!result)
      v2 = v1;
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t static _UInt128.bitWidth.getter()
{
  return 128;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _UInt128.Words@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance _UInt128.Words(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for Collection.endIndex.getter in conformance _UInt128.Words(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _UInt128.Words(_QWORD *a1, unint64_t *a2))()
{
  _QWORD *v4;
  uint64_t (*v5)();
  uint64_t v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = _UInt128.Words.subscript.read((uint64_t)v4, *a2);
  v4[4] = v6;
  v4[5] = v5;
  return protocol witness for Collection.subscript.read in conformance _UInt128.Words;
}

uint64_t (*_UInt128.Words.subscript.read(uint64_t a1, unint64_t a2))()
{
  uint64_t (*result)();

  if (a2 <= 1)
    return AggregateShare.share.modify;
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance _UInt128.Words@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], v4 > 2))
  {
    __break(1u);
  }
  else
  {
    *(_OWORD *)(a2 + 16) = *v2;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
  }
  return result;
}

double protocol witness for Collection.indices.getter in conformance _UInt128.Words@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_249C291F0;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance _UInt128.Words()
{
  return 0;
}

uint64_t protocol witness for Collection.count.getter in conformance _UInt128.Words()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UInt128.Words()
{
  uint64_t *v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance _UInt128.Words(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _UInt128.Words()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t _UInt128._lowWord.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

__n128 _UInt128.words.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

void static _UInt128.max.getter(_QWORD *a1@<X8>)
{
  *a1 = -1;
  a1[1] = -1;
}

void static _UInt128.min.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t specialized _wideAddReportingOverflow22<A>(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BOOL4 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v10 = __CFADD__(a5, a9);
  v11 = a6 + a10;
  if (!__CFADD__(a6, a10))
  {
    v12 = v11 == -1 && v10;
    if (v10)
      goto LABEL_12;
LABEL_7:
    v13 = 0;
    goto LABEL_13;
  }
  v12 = 1;
  if (!v10)
    goto LABEL_7;
LABEL_12:
  v13 = 1;
LABEL_13:
  v14 = a3 + a7;
  v15 = __CFADD__(a3, a7);
  v16 = a4 + a8;
  if (__CFADD__(a4, a8))
  {
    v17 = v16 + v15;
    v18 = 1;
  }
  else
  {
    if (v16 != -1)
    {
      v17 = v16 + v15;
      goto LABEL_24;
    }
    if (!v15)
    {
      v17 = -1;
LABEL_24:
      if ((v17 & v14) == 0xFFFFFFFFFFFFFFFFLL)
        v18 = v12;
      else
        v18 = 0;
      goto LABEL_27;
    }
    v17 = 0;
    v18 = 1;
  }
LABEL_27:
  v19 = __CFADD__(v14, v12);
  v20 = v14 + v12;
  if (v19)
    v21 = v17 + 1;
  else
    v21 = v17;
  *a1 = v20;
  a1[1] = v21;
  *a2 = a5 + a9;
  a2[1] = v13 + v11;
  return v18;
}

uint64_t _UInt128.multipliedReportingOverflow(by:)(_QWORD *a1, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2[1];
  v4 = !is_mul_ok(v3, a2);
  v5 = v3 * a2;
  v6 = (*v2 * (unsigned __int128)a2) >> 64;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = v7 || v4;
  *a1 = *v2 * a2;
  a1[1] = v8;
  return v9;
}

unint64_t _UInt128.multiplied(by:)@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  v3 = v2[1];
  v4 = !is_mul_ok(v3, result);
  v5 = v3 * result;
  v6 = (*v2 * (unsigned __int128)result) >> 64;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = v7;
  if (v4 || (v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2 * result;
    a2[1] = v8;
  }
  return result;
}

uint64_t _UInt128.quotientAndRemainder(dividingBy:)(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = specialized _wideDivide22<A>(_:by:)(&v11, &v10, &v9, v3[1], *v3, a3[1], *a3);
  v7 = v10;
  v8 = v9;
  *a1 = v11;
  a1[1] = result;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

uint64_t specialized _wideDivide22<A>(_:by:)(uint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;

  if (a6 | a7)
  {
    v7 = a7;
    v8 = a5;
    v12 = a7 < a5;
    if (a6 != a4)
      v12 = a6 < a4;
    if (!v12)
    {
      v16 = a4 < a6;
      v17 = 0;
      if (a6 == a4)
        v16 = a5 < a7;
      if (v16)
      {
        *a1 = 0;
        *a2 = a4;
        *a3 = a5;
      }
      else
      {
        *a1 = 1;
        *a2 = 0;
        *a3 = 0;
      }
      return v17;
    }
    if (a4)
    {
      if (a6)
      {
        v13 = __clz(a6);
        if (v13)
        {
          a6 = (a7 >> -(char)v13) | (a6 << v13);
          v7 = a7 << v13;
          v14 = (a5 >> (0x80 - v13)) | (a4 << v13);
          if (((0x80 - (_BYTE)v13) & 0x7F) == 0)
            v14 = a5;
          if (((0x80 - (_BYTE)v13) & 0x7Fu) <= 0x3FuLL)
            v15 = v14;
          else
            v15 = a4 >> (0x80 - v13);
          a4 = (a5 >> (-(char)v13 & 0x3F)) | (a4 << v13);
          v8 = a5 << v13;
        }
        else
        {
          v15 = 0;
        }
        v19 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v24, &v23, v15, a4, v8, a6, v7);
        v17 = 0;
        v21 = v23;
        v20 = v24;
        *a1 = v19;
        if (v13)
        {
          v21 = (v21 >> v13) | (v20 << -(char)v13);
          v20 >>= v13;
        }
        *a3 = v21;
        *a2 = v20;
        return v17;
      }
      if (a7)
      {
        v17 = a4 / a7;
        if (a4 % a7)
          v18 = __udivti3();
        else
          v18 = a5 / a7;
        *a1 = v18;
        *a3 = v8 - v18 * v7;
        goto LABEL_29;
      }
    }
    else
    {
      if (a7)
      {
        v17 = 0;
        *a3 = a5 % a7;
        *a1 = a5 / a7;
LABEL_29:
        *a2 = 0;
        return v17;
      }
      __break(1u);
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL _UInt128.dividedReportingOverflow(by:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v4 = a2[1];
  v6 = *v2;
  v5 = v2[1];
  v7 = v4 | *a2;
  v8 = v7 == 0;
  if (v7)
  {
    v5 = specialized _wideDivide22<A>(_:by:)((uint64_t *)&v12, &v11, &v10, v5, v6, v4, *a2);
    v6 = v12;
  }
  *a1 = v6;
  a1[1] = v5;
  return v8;
}

BOOL _UInt128.remainderReportingOverflow(dividingBy:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  v6 = *v2;
  v5 = v2[1];
  v7 = v4 | *a2;
  v8 = v7 == 0;
  if (v7)
  {
    specialized _wideDivide22<A>(_:by:)(&v12, &v11, &v10, v5, v6, v4, *a2);
    v6 = v10;
    v5 = v11;
  }
  *a1 = v6;
  a1[1] = v5;
  return v8;
}

_OWORD *_UInt128.multipliedFullWidth(by:)(_OWORD *result, _QWORD *a2, unint64_t *a3)
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v4 = *a3;
  v5 = a3[1];
  v6 = *v3;
  v7 = v3[1];
  v8 = (v7 * (unsigned __int128)*a3) >> 64;
  v9 = *v3 * v5;
  v10 = (*(_OWORD *)v3 * *a3) >> 64;
  v11 = __CFADD__((*v3 * (unsigned __int128)*a3) >> 64, v7 * *a3);
  v12 = __CFADD__(v10, v9);
  v13 = v10 + v9;
  v14 = (v7 * (unsigned __int128)v5) >> 64;
  v15 = v7 * v5;
  v16 = (v6 * (unsigned __int128)v5) >> 64;
  v18 = v12;
  v12 = __CFADD__(v12, v15);
  v17 = v18 + v15;
  v12 |= __CFADD__(v11, v17);
  v17 += v11;
  v19 = v12;
  v12 = __CFADD__(v8, v16);
  v20 = v8 + v16;
  if (v12)
    v21 = v14 + 1;
  else
    v21 = v14;
  *result = __PAIR128__(v21, v20) + __PAIR128__(v19, v17);
  *a2 = v6 * v4;
  a2[1] = v13;
  return result;
}

uint64_t _UInt128.dividingFullWidth(_:)(_QWORD *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = specialized _wideDivide42<A>(_:by:)(&v12, &v11, &v10, a3[1], *a3, a4[1], *a4, v4[1], *v4);
  v8 = v11;
  v9 = v10;
  *a1 = v12;
  a1[1] = result;
  *a2 = v9;
  a2[1] = v8;
  return result;
}

uint64_t specialized _wideDivide42<A>(_:by:)(uint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v9 = a9;
  if (!(a8 | a9))
    goto LABEL_44;
  v10 = a8;
  v12 = a9 >= a5;
  if (a8 != a4)
    v12 = a8 >= a4;
  if (!v12)
    goto LABEL_44;
  v13 = a7;
  v14 = a6;
  if (!(a4 | a5))
    return specialized _wideDivide22<A>(_:by:)(a1, a2, a3, a6, a7, a8, a9);
  if (a8)
  {
    v19 = __clz(a8);
    if (v19)
    {
      v20 = 0x80 - v19;
      v21 = (a5 >> -(char)v19) | (a4 << v19);
      v22 = (128 - v19) & 0x7F;
      v23 = a6 << v19;
      if (v22 > 0x3F)
      {
        v28 = a6 >> v20;
      }
      else
      {
        v24 = (a7 >> v20) | v23;
        v25 = a6 >> v20;
        v26 = v22 == 0;
        if (v22)
          v27 = v25;
        else
          v27 = a6;
        if (v26)
          v28 = a7;
        else
          v28 = v24;
        v21 |= v27;
      }
      v10 = (a9 >> -(char)v19) | (a8 << v19);
      v9 = a9 << v19;
      v33 = v28 | (a5 << v19);
      v14 = (a7 >> (-(char)v19 & 0x3F)) | v23;
      v13 = a7 << v19;
      if (v21)
        goto LABEL_32;
    }
    else
    {
      v33 = a7 | a5;
      v21 = a6 | a4;
      if (a6 | a4)
        goto LABEL_32;
    }
    v34 = v14 < v9;
    if (v33 != v10)
      v34 = v33 < v10;
    if (v34)
    {
      v35 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v43, &v42, v33, v14, v13, v10, v9);
      v30 = 0;
      v37 = v42;
      v36 = v43;
      *a1 = v35;
      v38 = (v37 >> v19) | (v36 << -(char)v19);
      v39 = v19 == 0;
      v40 = v36 >> v19;
LABEL_33:
      if (!v39)
      {
        v37 = v38;
        v36 = v40;
      }
      *a3 = v37;
      *a2 = v36;
      return v30;
    }
LABEL_32:
    v30 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v43, &v42, v21, v33, v14, v10, v9);
    v41 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v43, &v42, v43, v42, v13, v10, v9);
    v37 = v42;
    v36 = v43;
    *a1 = v41;
    v38 = (v37 >> v19) | (v36 << -(char)v19);
    v40 = v36 >> v19;
    v39 = v19 == 0;
    goto LABEL_33;
  }
  if (!a9)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (a4 % a9)
  {
    v29 = __umodti3();
    if (v29)
      goto LABEL_20;
LABEL_37:
    v30 = v14 / a9;
    v31 = v14 % a9;
    if (v14 % a9)
    {
LABEL_22:
      if (v31 < a9)
      {
        v32 = __udivti3();
LABEL_39:
        *a3 = v13 - v32 * a9;
        *a1 = v32;
        *a2 = 0;
        return v30;
      }
      goto LABEL_43;
    }
LABEL_38:
    v32 = v13 / a9;
    goto LABEL_39;
  }
  v29 = a5 % a9;
  if (!(a5 % a9))
    goto LABEL_37;
LABEL_20:
  if (v29 < a9)
  {
    v30 = __udivti3();
    v31 = v14 - v30 * a9;
    if (v31)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int8x16_t static _UInt128.&= infix(_:_:)(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result;

  result = vandq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t static _UInt128.|= infix(_:_:)(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result;

  result = vorrq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t static _UInt128.^= infix(_:_:)(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result;

  result = veorq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

uint64_t *static _UInt128.<<= infix(_:_:)(uint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (a2[1] || (v2 = *a2, *a2 >= 0x80))
  {
    *result = 0;
    result[1] = 0;
  }
  else
  {
    v3 = *result;
    v4 = result[1];
    if (v2)
    {
      v4 = (v4 << v2) | ((unint64_t)*result >> -(char)v2);
      v3 = *result << v2;
    }
    v5 = v2 > 0x3F;
    if (v2 <= 0x3F)
      v6 = v4;
    else
      v6 = *result << v2;
    if (v5)
      v3 = 0;
    *result = v3;
    result[1] = v6;
  }
  return result;
}

uint64_t *static _UInt128.>>= infix(_:_:)(uint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;

  if (a2[1] || (v2 = *a2, *a2 >= 0x80))
  {
    *result = 0;
    result[1] = 0;
  }
  else
  {
    v3 = *result;
    v4 = result[1];
    v5 = v4 >> v2;
    v6 = (v4 << -(char)v2) | ((unint64_t)*result >> v2);
    if (v2)
    {
      v4 >>= v2;
      v3 = v6;
    }
    v7 = v2 >= 0x3F;
    v8 = v2 == 63;
    if (v2 <= 0x3F)
      v9 = v4;
    else
      v9 = 0;
    if (!v8 && v7)
      v3 = v5;
    *result = v3;
    result[1] = v9;
  }
  return result;
}

uint64_t *static _UInt128.&<< infix(_:_:)@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *result;
  v4 = result[1];
  v5 = *a2 & 0x7FLL;
  if (v5)
  {
    v4 = (v4 << *a2) | ((unint64_t)*result >> -(char)*a2);
    v3 = *result << *a2;
  }
  if (v5 > 0x3F)
  {
    v4 = *result << *a2;
    v3 = 0;
  }
  *a3 = v3;
  a3[1] = v4;
  return result;
}

uint64_t *static _UInt128.&>> infix(_:_:)@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *result;
  v4 = result[1];
  v5 = *a2 & 0x7FLL;
  v6 = v4 >> *a2;
  v7 = ((unint64_t)*result >> *a2) | (v4 << -(char)*a2);
  if (v5)
  {
    v4 >>= *a2;
    v3 = v7;
  }
  if (v5 > 0x3F)
  {
    v4 = 0;
    v3 = v6;
  }
  *a3 = v3;
  a3[1] = v4;
  return result;
}

unint64_t *static _UInt128./ infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    result = (unint64_t *)specialized _wideDivide22<A>(_:by:)(&v6, &v5, &v4, result[1], *result, a2[1], *a2);
    *a3 = v6;
    a3[1] = result;
  }
  return result;
}

unint64_t *static _UInt128.% infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    result = (unint64_t *)specialized _wideDivide22<A>(_:by:)(&v7, &v6, &v5, result[1], *result, a2[1], *a2);
    v4 = v6;
    *a3 = v5;
    a3[1] = v4;
  }
  return result;
}

uint64_t _UInt128.init(_truncatingBits:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

unint64_t _UInt128.leadingZeroBitCount.getter()
{
  unint64_t *v0;
  unint64_t v1;

  v1 = v0[1];
  if (v1)
    return __clz(v1);
  else
    return __clz(*v0) + 64;
}

unint64_t _UInt128.trailingZeroBitCount.getter()
{
  unint64_t *v0;

  if (*v0)
    return __clz(__rbit64(*v0));
  else
    return __clz(__rbit64(v0[1])) + 64;
}

uint64_t _UInt128.nonzeroBitCount.getter()
{
  int8x16_t *v0;

  return vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v0)))));
}

int8x16_t _UInt128.byteSwapped.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int8x16_t *v1;
  int8x16_t v2;
  int8x16_t result;

  v2 = vrev64q_s8(*v1);
  result = vextq_s8(v2, v2, 8uLL);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static FixedWidthInteger.bitWidth.getter in conformance _UInt128()
{
  return 128;
}

void protocol witness for static FixedWidthInteger.max.getter in conformance _UInt128(_QWORD *a1@<X8>)
{
  *a1 = -1;
  a1[1] = -1;
}

void protocol witness for static FixedWidthInteger.min.getter in conformance _UInt128(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for FixedWidthInteger.addingReportingOverflow(_:) in conformance _UInt128(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  v4 = v2[1];
  v5 = __CFADD__(*v2, *a2);
  v6 = __CFADD__(v4, v3);
  v7 = v4 + v3;
  if (v6)
  {
    v8 = 1;
    if (v5)
    {
LABEL_12:
      v9 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    v8 = v7 == -1 && v5;
    if (v5)
      goto LABEL_12;
  }
  v9 = 0;
LABEL_13:
  *a1 = *v2 + *a2;
  a1[1] = v9 + v7;
  return v8;
}

unint64_t protocol witness for FixedWidthInteger.subtractingReportingOverflow(_:) in conformance _UInt128(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = *v2;
  v6 = v2[1];
  v7 = v6 >= v4;
  v8 = v6 - v4;
  v9 = !v7;
  v7 = v5 >= v3;
  v10 = v5 - v3;
  LODWORD(v3) = v5 < v3;
  if (v7)
  {
    if (v9)
    {
      v3 = 1;
      v11 = v8;
      goto LABEL_13;
    }
    v11 = v8;
  }
  else
  {
    v11 = v8 - 1;
    if ((v9 & 1) != 0)
    {
      v3 = 1;
      goto LABEL_13;
    }
  }
  if (v8)
    v3 = 0;
  else
    v3 = v3;
LABEL_13:
  *a1 = v10;
  a1[1] = v11;
  return v3;
}

uint64_t protocol witness for FixedWidthInteger.dividingFullWidth(_:) in conformance _UInt128(_QWORD *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = specialized _wideDivide42<A>(_:by:)(&v12, &v11, &v10, a3[1], *a3, a4[1], *a4, v4[1], *v4);
  v8 = v11;
  v9 = v10;
  *a1 = v12;
  a1[1] = result;
  *a2 = v9;
  a2[1] = v8;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

int8x16_t protocol witness for FixedWidthInteger.init(bigEndian:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  int8x16_t v2;
  int8x16_t result;

  v2 = vrev64q_s8(*a1);
  result = vextq_s8(v2, v2, 8uLL);
  *a2 = result;
  return result;
}

int8x16_t protocol witness for FixedWidthInteger.byteSwapped.getter in conformance _UInt128@<Q0>(int8x16_t *a1@<X8>)
{
  int8x16_t *v1;
  int8x16_t v2;
  int8x16_t result;

  v2 = vrev64q_s8(*v1);
  result = vextq_s8(v2, v2, 8uLL);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static FixedWidthInteger.&* infix(_:_:) in conformance _UInt128@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;

  v3 = *a1;
  return _UInt128.multipliedReportingOverflow(by:)(a2, (unint64_t *)&v3);
}

uint64_t protocol witness for BinaryInteger.init<A>(exactly:) in conformance _UInt128()
{
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  return FixedWidthInteger.init<A>(exactly:)();
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128(a1, a2, (void (*)(void))lazy protocol witness table accessor for type _UInt128 and conformance _UInt128, a3);
}

double protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type _UInt128 and conformance _UInt128, a5);
}

uint64_t protocol witness for BinaryInteger.init<A>(clamping:) in conformance _UInt128()
{
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  return FixedWidthInteger.init<A>(clamping:)();
}

uint64_t protocol witness for BinaryInteger._lowWord.getter in conformance _UInt128()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t protocol witness for BinaryInteger._binaryLogarithm() in conformance _UInt128()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t result;

  v1 = v0[1];
  if (v1)
    return __clz(v1) ^ 0x7F;
  if (*v0)
    return (__clz(*v0) | 0x40) ^ 0x7F;
  __break(1u);
  return result;
}

_QWORD *protocol witness for static BinaryInteger.~ prefix(_:) in conformance _UInt128@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[1];
  v3 = -v2;
  v4 = v2 != 0;
  v5 = -*result;
  if (*result)
  {
    v6 = v3 - 1;
    v7 = v5 - 1;
LABEL_5:
    *a2 = v7;
    a2[1] = v6;
    return result;
  }
  v6 = v3;
  if (v4)
  {
    v6 = v3;
    v7 = v5 - 1;
    if (*result)
      goto LABEL_5;
  }
  else
  {
    v7 = v5 - 1;
    if (*result)
      goto LABEL_5;
  }
  *a2 = v7;
  a2[1] = v6 - 1;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.& infix(_:_:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t result;

  result = vandq_s8(*a2, *a1);
  *a3 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.| infix(_:_:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t result;

  result = vorrq_s8(*a2, *a1);
  *a3 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.^ infix(_:_:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t result;

  result = veorq_s8(*a2, *a1);
  *a3 = result;
  return result;
}

double protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128(a1, a2, a3, a4, (void (*)(double *__return_ptr, _QWORD *, __int128 *))static _UInt128.&<< infix(_:_:), (void (*)(double *__return_ptr, _QWORD *, __int128 *))static _UInt128.&>> infix(_:_:), a5);
}

uint64_t protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance _UInt128(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance _UInt128(a1, a2, a3, a4, a5, a6, (_QWORD *(*)(int64_t *__return_ptr, __int128 *, __int128 *))static _UInt128.&<< infix(_:_:), (_QWORD *(*)(int64_t *__return_ptr, __int128 *, __int128 *))static _UInt128.&>> infix(_:_:));
}

double protocol witness for static BinaryInteger.<< infix<A>(_:_:) in conformance _UInt128@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128(a1, a2, a3, a4, (void (*)(double *__return_ptr, _QWORD *, __int128 *))static _UInt128.&>> infix(_:_:), (void (*)(double *__return_ptr, _QWORD *, __int128 *))static _UInt128.&<< infix(_:_:), a5);
}

double protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(double *__return_ptr, _QWORD *, __int128 *)@<X6>, void (*a6)(double *__return_ptr, _QWORD *, __int128 *)@<X7>, _OWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t AssociatedConformanceWitness;
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char v69;
  uint64_t v70;
  char *v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  double result;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, unint64_t, uint64_t);
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  void (*v85)(double *__return_ptr, _QWORD *, __int128 *);
  char *v86;
  char *v87;
  char *v88;
  uint64_t AssociatedTypeWitness;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(double *__return_ptr, _QWORD *, __int128 *);
  char *v93;
  char *v94;
  char *v95;
  _OWORD *v96;
  __int128 v97;
  __int128 v98;
  _QWORD v99[2];
  double v100[4];

  v92 = a6;
  v85 = a5;
  v96 = a7;
  v90 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v88 = (char *)&v83 - v12;
  v13 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11, v14);
  v17 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v15, v18);
  v86 = (char *)&v83 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v94 = (char *)&v83 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v93 = (char *)&v83 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v87 = (char *)&v83 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v33 = (char *)&v83 - v32;
  v35 = MEMORY[0x24BDAC7A8](v31, v34);
  v95 = (char *)&v83 - v36;
  MEMORY[0x24BDAC7A8](v35, v37);
  v39 = (char *)&v83 - v38;
  v40 = *a1;
  v91 = a1[1];
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v41 & 1) == 0)
    {
      if (v42 >= 64)
        goto LABEL_10;
      goto LABEL_9;
    }
    if (v42 <= 64)
    {
      v84 = v40;
      v64 = AssociatedTypeWitness;
      v63 = v90;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v66 = v88;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v64, AssociatedConformanceWitness);
      MEMORY[0x24BD00904](v66, a3, v63);
      LOBYTE(v63) = dispatch thunk of static Comparable.< infix(_:_:)();
      v67 = *(void (**)(char *, uint64_t))(v13 + 8);
      v67(v39, a3);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, a2, a3);
      if ((v63 & 1) != 0)
      {
        v67(v17, a3);
        goto LABEL_27;
      }
      v68 = dispatch thunk of BinaryInteger._lowWord.getter();
      v67(v17, a3);
      v40 = v84;
      if (v68 < -128)
        goto LABEL_27;
      goto LABEL_10;
    }
LABEL_6:
    v100[0] = NAN;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v43 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v39, a3);
    if ((v43 & 1) != 0)
      goto LABEL_27;
    goto LABEL_10;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    goto LABEL_6;
LABEL_9:
  if (dispatch thunk of BinaryInteger._lowWord.getter() < -128)
    goto LABEL_27;
LABEL_10:
  v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v84 = v40;
  if ((v44 & 1) != 0)
  {
    if (v45 > 64)
      goto LABEL_12;
  }
  else if (v45 >= 64)
  {
LABEL_12:
    *(_QWORD *)&v100[0] = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v46 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v39, a3);
    if ((v46 & 1) != 0)
      goto LABEL_27;
    goto LABEL_16;
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() > 128)
    goto LABEL_27;
LABEL_16:
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v48 = v95;
  v47(v95, a2, a3);
  v49 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v83 = (void (*)(char *, char *, uint64_t))v47;
  v47(v33, (uint64_t)v48, a3);
  if ((v49 & 1) == 0)
  {
    v51 = *(void (**)(char *, uint64_t))(v13 + 8);
    v51(v33, a3);
    v58 = v94;
    v54 = v95;
    v52 = v84;
    v56 = v93;
    goto LABEL_36;
  }
  v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v51 = *(void (**)(char *, uint64_t))(v13 + 8);
  v51(v33, a3);
  v52 = v84;
  if (v50 <= 64)
  {
    v58 = v94;
    v54 = v95;
    v56 = v93;
    goto LABEL_36;
  }
  v53 = v87;
  v54 = v95;
  v83(v87, v95, a3);
  v100[0] = -0.0;
  v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v56 = v93;
  if ((v55 & 1) != 0)
  {
    v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v58 = v94;
    if (v57 < 64)
    {
LABEL_34:
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_35:
      v51(v53, a3);
      goto LABEL_36;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v59 = v53;
    v60 = dispatch thunk of static Comparable.< infix(_:_:)();
    v51(v39, a3);
    v51(v59, a3);
    if ((v60 & 1) == 0)
      goto LABEL_36;
    goto LABEL_31;
  }
  v69 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v62 = __OFSUB__(v70, 64);
  v61 = v70 - 64 < 0;
  if ((v69 & 1) == 0)
    goto LABEL_32;
  if (v70 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v71 = v87;
    v72 = dispatch thunk of static Comparable.< infix(_:_:)();
    v51(v39, a3);
    v51(v71, a3);
    v58 = v94;
    if ((v72 & 1) == 0)
      goto LABEL_36;
LABEL_31:
    __break(1u);
LABEL_32:
    v58 = v94;
    v53 = v87;
    if (v61 == v62)
      goto LABEL_35;
    goto LABEL_34;
  }
  v79 = AssociatedTypeWitness;
  v80 = swift_getAssociatedConformanceWitness();
  v81 = v88;
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v79, v80);
  MEMORY[0x24BD00904](v81, a3, v90);
  v77 = (unint64_t)v87;
  LOBYTE(v79) = dispatch thunk of static Comparable.< infix(_:_:)();
  v51(v39, a3);
  v82 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 32);
  v58 = v86;
  v82(v86, v77, a3);
  if ((v79 & 1) != 0)
    goto LABEL_55;
  dispatch thunk of BinaryInteger._lowWord.getter();
  v51(v58, a3);
  v58 = v94;
LABEL_36:
  v73 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v83(v56, v54, a3);
  if (v73 >= 65)
  {
    v51(v56, a3);
    goto LABEL_38;
  }
  v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v51(v56, a3);
  if (v76 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_38:
    v83(v58, v54, a3);
    v100[0] = NAN;
    v74 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v75 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v74 & 1) != 0)
    {
      if (v75 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_47:
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v77 = dispatch thunk of static Comparable.< infix(_:_:)();
        v51(v39, a3);
        v51(v58, a3);
        if ((v77 & 1) == 0)
          goto LABEL_48;
        __break(1u);
LABEL_55:
        v51(v58, a3);
        __break(1u);
LABEL_56:
        if (v77 > 0xFFFFFFFFFFFFFF80)
        {
          specialized static FixedWidthInteger._truncatingInit<A>(_:)(-(uint64_t)v77, &v97);
          v98 = v97;
          v85(v100, v99, &v98);
          goto LABEL_51;
        }
        goto LABEL_27;
      }
    }
    else if (v75 >= 64)
    {
      v99[0] = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_47;
    }
    dispatch thunk of BinaryInteger._lowWord.getter();
    v51(v58, a3);
  }
LABEL_48:
  v77 = dispatch thunk of BinaryInteger._lowWord.getter();
  v51(v54, a3);
  v99[0] = v52;
  v99[1] = v91;
  if ((v77 & 0x8000000000000000) != 0)
    goto LABEL_56;
  if (v77 < 0x80)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)(v77, &v97);
    v98 = v97;
    v92(v100, v99, &v98);
    goto LABEL_51;
  }
LABEL_27:
  *(_OWORD *)v100 = 0uLL;
LABEL_51:
  result = v100[0];
  *v96 = *(_OWORD *)v100;
  return result;
}

uint64_t protocol witness for static BinaryInteger.<<= infix<A>(_:_:) in conformance _UInt128(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance _UInt128(a1, a2, a3, a4, a5, a6, (_QWORD *(*)(int64_t *__return_ptr, __int128 *, __int128 *))static _UInt128.&>> infix(_:_:), (_QWORD *(*)(int64_t *__return_ptr, __int128 *, __int128 *))static _UInt128.&<< infix(_:_:));
}

uint64_t protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance _UInt128(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *(*a7)(int64_t *__return_ptr, __int128 *, __int128 *), _QWORD *(*a8)(int64_t *__return_ptr, __int128 *, __int128 *))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t result;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  char v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t AssociatedConformanceWitness;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int64_t v83;
  BOOL v84;
  char *v85;
  uint64_t v86;
  _QWORD *(*v87)(int64_t *__return_ptr, __int128 *, __int128 *);
  char *v88;
  uint64_t AssociatedTypeWitness;
  uint64_t v90;
  _QWORD *(*v91)(int64_t *__return_ptr, __int128 *, __int128 *);
  char *v92;
  char *v93;
  char *v94;
  _OWORD *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int64_t v100;
  uint64_t v101;

  v91 = a8;
  v87 = a7;
  v90 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v11);
  v88 = (char *)&v85 - v13;
  v96 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v15, v18);
  v21 = (char *)&v85 - v20;
  v23 = MEMORY[0x24BDAC7A8](v19, v22);
  v92 = (char *)&v85 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23, v25);
  v93 = (char *)&v85 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26, v28);
  v31 = (uint64_t)&v85 - v30;
  v33 = MEMORY[0x24BDAC7A8](v29, v32);
  v35 = (char *)&v85 - v34;
  v37 = MEMORY[0x24BDAC7A8](v33, v36);
  v94 = (char *)&v85 - v38;
  MEMORY[0x24BDAC7A8](v37, v39);
  v41 = (char *)&v85 - v40;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      v100 = -128;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v42 = dispatch thunk of static Comparable.< infix(_:_:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v41, a3);
      if ((v42 & 1) != 0)
        goto LABEL_39;
      goto LABEL_11;
    }
  }
  else
  {
    v85 = v21;
    v86 = v31;
    v95 = a1;
    v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v44 & 1) != 0)
    {
      if (v45 <= 64)
      {
        v64 = AssociatedTypeWitness;
        v65 = v90;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v67 = v88;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, v64, AssociatedConformanceWitness);
        MEMORY[0x24BD00904](v67, a3, v65);
        LOBYTE(v64) = dispatch thunk of static Comparable.< infix(_:_:)();
        v68 = v96;
        v69 = *(void (**)(char *, uint64_t))(v96 + 8);
        v69(v41, a3);
        (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v17, a2, a3);
        if ((v64 & 1) != 0)
        {
          result = ((uint64_t (*)(char *, uint64_t))v69)(v17, a3);
          a1 = v95;
          goto LABEL_39;
        }
        v70 = dispatch thunk of BinaryInteger._lowWord.getter();
        result = ((uint64_t (*)(char *, uint64_t))v69)(v17, a3);
        a1 = v95;
        v21 = v85;
        v31 = v86;
        if (v70 < -128)
          goto LABEL_39;
      }
      else
      {
        v100 = -128;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v46 = dispatch thunk of static Comparable.< infix(_:_:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v41, a3);
        a1 = v95;
        v21 = v85;
        v31 = v86;
        if ((v46 & 1) != 0)
          goto LABEL_39;
      }
      goto LABEL_11;
    }
    a1 = v95;
    v21 = v85;
    v31 = v86;
    if (v45 >= 64)
      goto LABEL_11;
  }
  result = dispatch thunk of BinaryInteger._lowWord.getter();
  if (result < -128)
    goto LABEL_39;
LABEL_11:
  v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v47 & 1) != 0)
  {
    if (v48 > 64)
      goto LABEL_13;
  }
  else if (v48 >= 64)
  {
LABEL_13:
    v100 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v49 = dispatch thunk of static Comparable.< infix(_:_:)();
    v50 = v96;
    result = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v41, a3);
    if ((v49 & 1) != 0)
      goto LABEL_39;
    goto LABEL_17;
  }
  result = dispatch thunk of BinaryInteger._lowWord.getter();
  v50 = v96;
  if (result > 128)
    goto LABEL_39;
LABEL_17:
  v95 = a1;
  a1 = *(_OWORD **)(v50 + 16);
  v51 = v94;
  ((void (*)(void))a1)();
  v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
  ((void (*)(char *, char *, uint64_t))a1)(v35, v51, a3);
  if ((v52 & 1) == 0)
  {
    v54 = *(void (**)(char *, uint64_t))(v50 + 8);
    v54(v35, a3);
    goto LABEL_24;
  }
  v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v54 = *(void (**)(char *, uint64_t))(v50 + 8);
  v54(v35, a3);
  if (v53 <= 64)
  {
LABEL_24:
    v21 = v92;
    v56 = v93;
    goto LABEL_25;
  }
  ((void (*)(uint64_t, char *, uint64_t))a1)(v31, v51, a3);
  v100 = 0x8000000000000000;
  v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v56 = v93;
  if ((v55 & 1) != 0)
  {
    v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v21 = v92;
    if (v57 >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v76 = v31;
      v31 = dispatch thunk of static Comparable.< infix(_:_:)();
      v54(v41, a3);
      v54((char *)v76, a3);
      if ((v31 & 1) != 0)
        goto LABEL_54;
    }
    else
    {
      v58 = dispatch thunk of BinaryInteger._lowWord.getter();
      v59 = v31;
      v31 = v58;
      v54((char *)v59, a3);
      if (v31 < v100)
        goto LABEL_54;
    }
  }
  else
  {
    v73 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v73 & 1) != 0)
    {
      if (v74 <= 64)
        goto LABEL_55;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v75 = v31;
      v31 = dispatch thunk of static Comparable.< infix(_:_:)();
      v54(v41, a3);
      v54((char *)v75, a3);
      v51 = v94;
      v21 = v92;
      if ((v31 & 1) != 0)
      {
LABEL_54:
        do
        {
          __break(1u);
LABEL_55:
          v79 = AssociatedTypeWitness;
          v80 = swift_getAssociatedConformanceWitness();
          v81 = v88;
          MEMORY[0x24BD00928](&unk_249C28BC8, 256, v79, v80);
          MEMORY[0x24BD00904](v81, a3, v90);
          v82 = v31;
          v71 = dispatch thunk of static Comparable.< infix(_:_:)();
          v54(v41, a3);
          (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v21, v82, a3);
          if ((v71 & 1) != 0)
            goto LABEL_60;
          v83 = v100;
          v31 = dispatch thunk of BinaryInteger._lowWord.getter();
          v54(v21, a3);
          v84 = v31 < v83;
          v51 = v94;
          v21 = v92;
        }
        while (v84);
      }
    }
    else
    {
      v21 = v92;
      if (v74 < 64)
      {
        v77 = dispatch thunk of BinaryInteger._lowWord.getter();
        v78 = v31;
        v31 = v77;
        v54((char *)v78, a3);
        v51 = v94;
        if (v31 < v100)
          goto LABEL_54;
      }
      else
      {
        v54((char *)v31, a3);
        v51 = v94;
      }
    }
  }
LABEL_25:
  v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))a1)(v56, v51, a3);
  if (v60 >= 65)
  {
    v54(v56, a3);
    goto LABEL_27;
  }
  v63 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v54(v56, a3);
  if (v63 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_27:
    ((void (*)(char *, char *, uint64_t))a1)(v21, v51, a3);
    v100 = 0x7FFFFFFFFFFFFFFFLL;
    v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v61 & 1) != 0)
    {
      if (v62 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_40:
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v71 = dispatch thunk of static Comparable.< infix(_:_:)();
        v54(v41, a3);
        v54(v21, a3);
        if ((v71 & 1) == 0)
          goto LABEL_41;
        __break(1u);
LABEL_60:
        result = ((uint64_t (*)(char *, uint64_t))v54)(v21, a3);
        __break(1u);
LABEL_61:
        if (v71 > 0xFFFFFFFFFFFFFF80)
        {
          specialized static FixedWidthInteger._truncatingInit<A>(_:)(-(uint64_t)v71, &v97);
          v98 = v97;
          result = (uint64_t)v87(&v100, &v99, &v98);
          goto LABEL_44;
        }
        goto LABEL_39;
      }
    }
    else if (v62 >= 64)
    {
      *(_QWORD *)&v99 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_40;
    }
    dispatch thunk of BinaryInteger._lowWord.getter();
    v54(v21, a3);
  }
LABEL_41:
  v71 = dispatch thunk of BinaryInteger._lowWord.getter();
  result = ((uint64_t (*)(char *, uint64_t))v54)(v51, a3);
  a1 = v95;
  v99 = *v95;
  if ((v71 & 0x8000000000000000) != 0)
    goto LABEL_61;
  if (v71 < 0x80)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)(v71, &v97);
    v98 = v97;
    result = (uint64_t)v91(&v100, &v99, &v98);
    goto LABEL_44;
  }
LABEL_39:
  v100 = 0;
  v101 = 0;
LABEL_44:
  v72 = v101;
  *(_QWORD *)a1 = v100;
  *((_QWORD *)a1 + 1) = v72;
  return result;
}

uint64_t protocol witness for BinaryInteger.quotientAndRemainder(dividingBy:) in conformance _UInt128(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = specialized _wideDivide22<A>(_:by:)(&v11, &v10, &v9, v3[1], *v3, a3[1], *a3);
  v7 = v10;
  v8 = v9;
  *a1 = v11;
  a1[1] = result;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

BOOL protocol witness for BinaryInteger.isMultiple(of:) in conformance _UInt128(unint64_t *a1)
{
  unint64_t *v1;

  return specialized BinaryInteger.isMultiple(of:)(*a1, a1[1], *v1, v1[1]);
}

BOOL specialized BinaryInteger.isMultiple(of:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a3;
  if (a2 | a1)
  {
    specialized _wideDivide22<A>(_:by:)(&v8, &v7, &v6, a4, a3, a2, a1);
    v4 = v6;
    a4 = v7;
  }
  return (a4 | v4) == 0;
}

void protocol witness for BinaryInteger.signum() in conformance _UInt128(_QWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1 != 0;
  a1[1] = 0;
}

BOOL specialized BinaryInteger.signum()(uint64_t a1, unint64_t a2)
{
  _BOOL8 v2;

  if (a2)
    v2 = (uint64_t)a2 > 0;
  else
    v2 = a1 != 0;
  return v2 - (a2 >> 63);
}

unint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance _UInt128@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  _BOOL4 v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  unint64_t v46;
  unint64_t v47;
  char v48;
  __int128 v49;
  char v50;

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((a2 & 0x1000000000000000) == 0)
    {
      if ((a2 & 0x2000000000000000) == 0)
      {
        if ((result & 0x1000000000000000) != 0)
          v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        else
          v8 = _StringObject.sharedUTF8.getter();
        specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10, (uint64_t)&v46);
LABEL_78:
        v40 = v48;
        v42 = v46;
        v41 = v47;
        result = swift_bridgeObjectRelease();
        *(_QWORD *)&v49 = v42;
        *((_QWORD *)&v49 + 1) = v41;
        if ((v40 & 1) == 0)
        {
LABEL_79:
          *(_OWORD *)a3 = v49;
          *(_BYTE *)(a3 + 16) = 0;
          return result;
        }
        goto LABEL_84;
      }
      v45[0] = result;
      v45[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      if (result == 43)
      {
        if (v5)
        {
          if (v5 != 1)
          {
            v22 = (result >> 8) - 48;
            if (v22 < 0xAu)
            {
              v23 = (unsigned __int8 *)v45 + 2;
              specialized static FixedWidthInteger._truncatingInit<A>(_:)(v22, &v43);
              v24 = 0;
              v25 = 0;
              v26 = 0;
              v27 = v43;
              v28 = v44;
              v29 = v5 - 2;
              while (1)
              {
                v19 = v26 + v27;
                v30 = __CFADD__(v26, v27);
                v17 = v25 + v28;
                if (__CFADD__(v25, v28))
                  break;
                if (v17 == -1)
                {
                  if (v30 || v24)
                    goto LABEL_77;
                  v17 = -1;
                }
                else if (v30)
                {
                  if (v24)
                    goto LABEL_77;
                  ++v17;
                }
                else if (v24)
                {
                  goto LABEL_77;
                }
                if (!v29)
                {
LABEL_34:
                  v46 = v19;
LABEL_81:
                  v47 = v17;
                  v48 = 0;
                  goto LABEL_78;
                }
                v31 = *v23 - 48;
                if (v31 < 0xA)
                {
                  ++v23;
                  specialized static FixedWidthInteger._truncatingInit<A>(_:)(v31, &v43);
                  v27 = v43;
                  v28 = v44;
                  v26 = 10 * v19;
                  v25 = (__PAIR128__(v17, v19) * 0xA) >> 64;
                  v24 = __CFADD__((v19 * (unsigned __int128)0xAuLL) >> 64, 10 * v17);
                  --v29;
                  if (is_mul_ok(v17, 0xAuLL))
                    continue;
                }
                goto LABEL_77;
              }
            }
          }
          goto LABEL_77;
        }
      }
      else
      {
        if (result != 45)
        {
          if (v5 && (result - 48) <= 9u)
          {
            v32 = 0;
            v17 = 0;
            v33 = v5 - 1;
            v34 = (unsigned __int8 *)v45 + 1;
            while (1)
            {
              specialized static FixedWidthInteger._truncatingInit<A>(_:)((result - 48), &v43);
              v35 = (__PAIR128__(v17, v32) * 0xA) >> 64;
              v36 = __CFADD__((v32 * (unsigned __int128)0xAuLL) >> 64, 10 * v17);
              if (!is_mul_ok(v17, 0xAuLL))
                break;
              v37 = __CFADD__(10 * v32, v43);
              v32 = 10 * v32 + v43;
              v38 = v37;
              v17 = v35 + v44;
              if (__CFADD__(v35, v44))
                break;
              if (v17 == -1)
              {
                if (v38 || v36)
                  goto LABEL_77;
                v17 = -1;
              }
              else if (v38)
              {
                if (v36)
                  goto LABEL_77;
                ++v17;
              }
              else if (v36)
              {
                goto LABEL_77;
              }
              if (!v33)
              {
                v46 = v32;
                goto LABEL_81;
              }
              v39 = *v34++;
              LODWORD(result) = v39;
              --v33;
              if ((v39 - 48) >= 0xA)
                goto LABEL_77;
            }
          }
          goto LABEL_77;
        }
        if (v5)
        {
          if (v5 != 1)
          {
            v9 = (result >> 8) - 48;
            if (v9 < 0xAu)
            {
              v10 = (unsigned __int8 *)v45 + 2;
              specialized static FixedWidthInteger._truncatingInit<A>(_:)(v9, &v43);
              v11 = 0;
              v12 = 0;
              v13 = 0;
              v14 = v43;
              v15 = v44;
              v16 = v5 - 2;
              while (1)
              {
                v17 = v12 - v15;
                v18 = v12 < v15;
                v19 = v13 - v14;
                if (v13 < v14)
                  break;
                if (v18)
                  goto LABEL_77;
                if (v17)
                  goto LABEL_24;
                if (v11)
                  goto LABEL_77;
                v17 = 0;
                if (!v16)
                  goto LABEL_34;
LABEL_26:
                v21 = *v10 - 48;
                if (v21 < 0xA)
                {
                  ++v10;
                  specialized static FixedWidthInteger._truncatingInit<A>(_:)(v21, &v43);
                  v14 = v43;
                  v15 = v44;
                  v13 = 10 * v19;
                  v12 = (__PAIR128__(v17, v19) * 0xA) >> 64;
                  v11 = __CFADD__((v19 * (unsigned __int128)0xAuLL) >> 64, 10 * v17);
                  --v16;
                  if (is_mul_ok(v17, 0xAuLL))
                    continue;
                }
                goto LABEL_77;
              }
              if (v17)
                v20 = v18;
              else
                v20 = 1;
              if ((v20 & 1) != 0)
                goto LABEL_77;
              --v17;
LABEL_24:
              if (v11)
                goto LABEL_77;
              if (!v16)
                goto LABEL_34;
              goto LABEL_26;
            }
          }
LABEL_77:
          v46 = 0;
          v47 = 0;
          v48 = 1;
          goto LABEL_78;
        }
        __break(1u);
      }
      __break(1u);
      return result;
    }
    specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10, (uint64_t)&v49);
    result = swift_bridgeObjectRelease();
    if ((v50 & 1) == 0)
      goto LABEL_79;
  }
  else
  {
    result = swift_bridgeObjectRelease();
  }
LABEL_84:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

unint64_t *protocol witness for Strideable.distance(to:) in conformance _UInt128@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v3 = *result;
  v4 = result[1];
  v6 = *v2;
  v5 = v2[1];
  v7 = *result < *v2;
  if (v4 != v5)
    v7 = v4 < v5;
  if (v7)
  {
    v8 = v6 >= v3;
    v9 = v6 - v3;
    v10 = !v8;
    v8 = v5 >= v4;
    v11 = v5 - v4;
    v12 = !v8;
    if ((v10 & 1) != 0)
    {
      if (!v11)
        v12 = 1;
      if ((v12 & 1) == 0)
      {
        --v11;
        goto LABEL_27;
      }
    }
    else if ((v12 & 1) == 0)
    {
LABEL_27:
      v15 = v9 < 0;
      v16 = v11 == 0;
      LODWORD(v11) = v11 != 0;
      if (v16)
        v11 = v9 < 0;
      else
        v11 = v11;
      if ((v11 & 1) == 0)
      {
        v17 = __OFSUB__(0, v9);
        v13 = -v9;
        if (!v17)
        {
LABEL_38:
          *a2 = v13;
          return result;
        }
        __break(1u);
        goto LABEL_34;
      }
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    __break(1u);
    goto LABEL_40;
  }
  v8 = v3 >= v6;
  v13 = v3 - v6;
  v14 = !v8;
  v8 = v4 >= v5;
  v11 = v4 - v5;
  v15 = !v8;
  if ((v14 & 1) != 0)
  {
    if (!v11)
      v15 = 1;
    if (!v15)
    {
      --v11;
      goto LABEL_35;
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_34:
  if (v15)
    goto LABEL_41;
LABEL_35:
  v16 = v11 == 0;
  v18 = v11 != 0;
  if (v16)
    v18 = v13 < 0;
  if (!v18)
    goto LABEL_38;
LABEL_42:
  __break(1u);
  return result;
}

unint64_t *protocol witness for Strideable.advanced(by:) in conformance _UInt128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v8;
  uint64_t v9;

  v3 = *result;
  v5 = *v2;
  v4 = v2[1];
  if ((*result & 0x8000000000000000) == 0)
  {
    v6 = __CFADD__(v5, v3);
    v3 += v5;
    v5 = v6;
    if (!v6 || v4 != -1)
      goto LABEL_17;
    __break(1u);
  }
  v8 = -(uint64_t)v3;
  v6 = v5 >= v8;
  v3 = v5 - v8;
  v9 = !v6;
  if (v4 || (v9 & 1) == 0)
  {
    v5 = v9 << 63 >> 63;
LABEL_17:
    *a2 = v3;
    a2[1] = v4 + v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Strideable<>._step(after:from:by:));
}

uint64_t *specialized static Strideable<>._step(after:from:by:)(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (a8 < 0)
  {
    v11 = -a8;
    if (__OFSUB__(0, a8))
    {
      __break(1u);
    }
    else if ((v11 & 0x8000000000000000) == 0)
    {
      v8 = a5 == 0;
      v12 = a4 >= v11;
      v9 = a4 + a8;
      v13 = !v12;
      v10 = v13 << 63 >> 63;
      if (v12)
        v8 = 0;
      goto LABEL_15;
    }
    __break(1u);
    return result;
  }
  v8 = a5 == -1;
  v9 = a4 + a8;
  v10 = __CFADD__(a4, a8);
  if (!__CFADD__(a4, a8))
    v8 = 0;
LABEL_15:
  v14 = v10 + a5;
  if (v8)
    v15 = ~a8 >> 63;
  else
    v15 = v9;
  if (v8)
    v14 = ~a8 >> 63;
  v16 = 0x8000000000000000;
  if (!v8)
    v16 = 0;
  *result = v15;
  result[1] = v14;
  return (uint64_t *)v16;
}

uint64_t _Int128.low.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_Int128.low.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _Int128.high.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Int128.high.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_Int128.high.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _Int128.init(high:low:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Int128.init()()
{
  return 0;
}

uint64_t _Int128.init(bitPattern:)(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t static _Int128.zero.getter()
{
  return 0;
}

uint64_t static _Int128.one.getter()
{
  return 1;
}

uint64_t _Int128.description.getter()
{
  lazy protocol witness table accessor for type _Int128 and conformance _Int128();
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _Int128()
{
  lazy protocol witness table accessor for type _Int128 and conformance _Int128();
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t _Int128.debugDescription.getter()
{
  lazy protocol witness table accessor for type _Int128 and conformance _Int128();
  return String.init<A>(_:radix:uppercase:)();
}

BOOL static _Int128.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4 && a1 == a3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _Int128(_QWORD *a1, _QWORD *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL static _Int128.< infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 == a4)
    return a1 < a3;
  else
    return a2 < a4;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _Int128(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    return *a1 < *a2;
  else
    return v5;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _Int128(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 >= v2;
  if (v4)
    return *a2 >= *a1;
  else
    return v5;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _Int128(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 >= v3;
  if (v4)
    return *a1 >= *a2;
  else
    return v5;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _Int128(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 < v2;
  if (v4)
    return *a2 < *a1;
  else
    return v5;
}

void _Int128.hash(into:)(int a1, Swift::UInt64 a2, Swift::UInt64 a3)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
}

Swift::Int _Int128.hashValue.getter(Swift::UInt64 a1, Swift::UInt64 a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _UInt128()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _UInt128()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _Int128.components.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Int128.components.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = a2;
  v2[1] = result;
  return result;
}

int8x16_t (*_Int128.components.modify(int8x16_t *a1))(int8x16_t *a1)
{
  int8x16_t *v1;

  a1[1].i64[0] = (uint64_t)v1;
  *a1 = vextq_s8(*v1, *v1, 8uLL);
  return _Int128.components.modify;
}

int8x16_t _Int128.components.modify(int8x16_t *a1)
{
  int8x16_t result;

  result = vextq_s8(*a1, *a1, 8uLL);
  *(int8x16_t *)a1[1].i64[0] = result;
  return result;
}

unint64_t static _Int128.- infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  unint64_t result;

  v4 = __OFSUB__(a2, a4);
  v5 = a2 - a4;
  v6 = v4;
  v7 = a1 >= a3;
  result = a1 - a3;
  if (v7)
  {
    if ((v6 & 1) == 0)
      return result;
    goto LABEL_10;
  }
  if (v5 == 0x8000000000000000)
    v6 = 1;
  if ((v6 & 1) != 0)
LABEL_10:
    __break(1u);
  return result;
}

uint64_t _Int128.subtractingReportingOverflow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 - a1;
}

unint64_t *static _Int128.-= infix(_:_:)(unint64_t *result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  char v7;
  BOOL v8;
  unint64_t v9;

  v4 = *result;
  v3 = result[1];
  v5 = __OFSUB__(v3, a3);
  v6 = v3 - a3;
  v7 = v5;
  v8 = v4 >= a2;
  v9 = v4 - a2;
  if (v8)
  {
    if ((v7 & 1) == 0)
    {
      *result = v9;
      result[1] = v6;
      return result;
    }
  }
  else
  {
    if (v6 == 0x8000000000000000)
      v7 = 1;
    if ((v7 & 1) == 0)
    {
      *result = v9;
      result[1] = v6 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static _Int128.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t result;
  int v6;

  v4 = __CFADD__(a1, a3);
  result = a1 + a3;
  v6 = v4;
  if (__OFADD__(a2, a4) || v6 && a2 + a4 == 0x7FFFFFFFFFFFFFFFLL)
    __break(1u);
  return result;
}

uint64_t _Int128.addingReportingOverflow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 + a1;
}

_QWORD *static _Int128.+= infix(_:_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;

  v3 = result[1];
  v4 = __CFADD__(*result, a2);
  v5 = __OFADD__(v3, a3);
  v6 = v3 + a3;
  if (v5 || (v4 ? (v7 = v6 == 0x7FFFFFFFFFFFFFFFLL) : (v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += a2;
    result[1] = v6 + v4;
  }
  return result;
}

_QWORD *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _Int128@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;

  v3 = result[1];
  v4 = a2[1];
  v5 = __CFADD__(*result, *a2);
  v6 = __OFADD__(v3, v4);
  v7 = v3 + v4;
  if (v6 || (v5 ? (v8 = v7 == 0x7FFFFFFFFFFFFFFFLL) : (v8 = 0), v8))
  {
    __break(1u);
  }
  else
  {
    *a3 = *result + *a2;
    a3[1] = v7 + v5;
  }
  return result;
}

_QWORD *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _Int128(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;

  v2 = a2[1];
  v3 = result[1];
  v4 = __CFADD__(*result, *a2);
  v5 = __OFADD__(v3, v2);
  v6 = v3 + v2;
  if (v5 || (v4 ? (v7 = v6 == 0x7FFFFFFFFFFFFFFFLL) : (v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += *a2;
    result[1] = v6 + v4;
  }
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _Int128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  unint64_t v11;

  v4 = *result;
  v3 = result[1];
  v6 = *a2;
  v5 = a2[1];
  v7 = __OFSUB__(v3, v5);
  v8 = v3 - v5;
  v9 = v7;
  v10 = v4 >= v6;
  v11 = v4 - v6;
  if (v10)
  {
    if ((v9 & 1) == 0)
    {
      *a3 = v11;
      a3[1] = v8;
      return result;
    }
  }
  else
  {
    if (v8 == 0x8000000000000000)
      v9 = 1;
    if ((v9 & 1) == 0)
    {
      *a3 = v11;
      a3[1] = v8 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance _Int128(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  unint64_t v10;

  v3 = *a2;
  v2 = a2[1];
  v5 = *result;
  v4 = result[1];
  v6 = __OFSUB__(v4, v2);
  v7 = v4 - v2;
  v8 = v6;
  v9 = v5 >= v3;
  v10 = v5 - v3;
  if (v9)
  {
    if ((v8 & 1) == 0)
    {
      *result = v10;
      result[1] = v7;
      return result;
    }
  }
  else
  {
    if (v7 == 0x8000000000000000)
      v8 = 1;
    if ((v8 & 1) == 0)
    {
      *result = v10;
      result[1] = v7 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t _Int128.magnitude.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = -(uint64_t)result;
  v5 = (unsigned __int128)-(__int128)__PAIR128__(v3, result) >> 64;
  if (a2 >= 0)
  {
    v4 = result;
    v5 = a2;
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

_QWORD *_Int128.init(_:)(_QWORD *result)
{
  if ((result[1] & 0x8000000000000000) == 0)
    return (_QWORD *)*result;
  __break(1u);
  return result;
}

uint64_t _Int128.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = specialized _Int128.init<A>(_:)(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t _Int128.init<A>(exactly:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, char *, unint64_t);
  uint64_t v72;
  uint64_t v73;
  char v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  void (*v91)(char *, char *, unint64_t);
  void (*v92)(char *, char *, uint64_t);
  unint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t result;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  BOOL v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char v129;
  uint64_t v130;
  char *v131;
  char v132;
  char *v133;
  uint64_t v134;
  char *v135;
  BOOL v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char *v144;
  char v145;
  char *v146;
  uint64_t v147;
  char v148;
  char *v149;
  char *v150;
  char v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  int64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(char *, char *, uint64_t);
  char *v176;
  char *v177;
  uint64_t AssociatedTypeWitness;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t AssociatedConformanceWitness;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;

  v196 = a3;
  v5 = *(_QWORD *)(a3 + 24);
  v179 = *(_QWORD *)(v5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v6);
  v177 = (char *)&v169 - v8;
  v192 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7, v9);
  v169 = (char *)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v171 = (char *)&v169 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v185 = (char *)&v169 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v183 = (char *)&v169 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v184 = (char *)&v169 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v170 = (char *)&v169 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v181 = (char *)&v169 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v182 = (char *)&v169 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31, v33);
  v176 = (char *)&v169 - v35;
  v37 = MEMORY[0x24BDAC7A8](v34, v36);
  v188 = (char *)&v169 - v38;
  v40 = MEMORY[0x24BDAC7A8](v37, v39);
  v194 = (char *)&v169 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40, v42);
  v195 = (char *)&v169 - v44;
  MEMORY[0x24BDAC7A8](v43, v45);
  v187 = (char *)&v169 - v46;
  v197 = v5;
  swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v48 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v48, v49);
  v51 = (char *)&v169 - v50;
  v52 = swift_checkMetadataState();
  v53 = *(_QWORD **)(v52 - 8);
  v55 = MEMORY[0x24BDAC7A8](v52, v54);
  v175 = (void (*)(char *, char *, uint64_t))((char *)&v169 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = MEMORY[0x24BDAC7A8](v55, v57);
  v193 = (char *)&v169 - v59;
  v61 = MEMORY[0x24BDAC7A8](v58, v60);
  v63 = (char *)&v169 - v62;
  v65 = MEMORY[0x24BDAC7A8](v61, v64);
  v67 = (char *)&v169 - v66;
  MEMORY[0x24BDAC7A8](v65, v68);
  v70 = (char *)&v169 - v69;
  v190 = a1;
  dispatch thunk of Numeric.magnitude.getter();
  v189 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v71 = (void (*)(char *, char *, unint64_t))v53[2];
  v191 = v70;
  v71(v67, v70, v52);
  v180 = v63;
  v174 = v47;
  v173 = v48;
  v172 = v51;
  if ((a1 & 1) != 0)
  {
    v72 = swift_getAssociatedConformanceWitness();
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v48, v72);
    MEMORY[0x24BD00904](v51, v52, v47);
    v73 = v189;
    swift_getAssociatedConformanceWitness();
    v74 = dispatch thunk of static Comparable.< infix(_:_:)();
    v75 = (char *)v53[1];
    ((void (*)(char *, unint64_t))v75)(v63, v52);
    ((void (*)(char *, unint64_t))v75)(v67, v52);
    v76 = v191;
    if ((v74 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v75 = (char *)v53[1];
    ((void (*)(char *, unint64_t))v75)(v67, v52);
    v76 = v191;
    v73 = v189;
  }
  v77 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v78 = v193;
  v71(v193, v76, v52);
  if (v77 <= 63)
  {
    ((void (*)(char *, unint64_t))v75)(v78, v52);
LABEL_32:
    v126 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, unint64_t))v75)(v76, v52);
    v127 = v195;
    dispatch thunk of IteratorProtocol.next()();
    v128 = v190;
    v129 = dispatch thunk of static Comparable.< infix(_:_:)();
    v100 = *(void (**)(char *, uint64_t))(v192 + 8);
    v100(v127, v73);
    if ((v129 & 1) != 0)
      v130 = -v126;
    else
      v130 = v126;
    v131 = v128;
    goto LABEL_58;
  }
  v199 = -1;
  v79 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v80 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v79 & 1) != 0)
  {
    if (v80 > 64)
    {
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      v81 = v180;
      goto LABEL_12;
    }
    v84 = v174;
    v85 = v173;
    v86 = swift_getAssociatedConformanceWitness();
    v87 = v172;
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v85, v86);
    v88 = v180;
    MEMORY[0x24BD00904](v87, v52, v84);
    swift_getAssociatedConformanceWitness();
    v89 = v193;
    LOBYTE(v85) = dispatch thunk of static Comparable.> infix(_:_:)();
    ((void (*)(char *, unint64_t))v75)(v88, v52);
    v90 = v199;
    v91 = (void (*)(char *, char *, unint64_t))v53[4];
    v92 = v175;
    v91((char *)v175, v89, v52);
    if ((v85 & 1) == 0)
    {
LABEL_31:
      ((void (*)(void (*)(char *, char *, uint64_t), unint64_t))v75)(v92, v52);
      v76 = v191;
      goto LABEL_32;
    }
    v93 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(void (*)(char *, char *, uint64_t), unint64_t))v75)(v92, v52);
    v76 = v191;
    if (v90 >= v93)
      goto LABEL_32;
  }
  else
  {
    v81 = v180;
    if (v80 >= 65)
    {
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
LABEL_12:
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      swift_getAssociatedConformanceWitness();
      v82 = v193;
      v83 = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, unint64_t))v75)(v81, v52);
      ((void (*)(char *, unint64_t))v75)(v82, v52);
      if ((v83 & 1) == 0)
        goto LABEL_32;
      goto LABEL_18;
    }
    v94 = v193;
    v95 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, unint64_t))v75)(v94, v52);
    if (v199 >= v95)
      goto LABEL_32;
  }
LABEL_18:
  ((void (*)(char *, unint64_t))v75)(v76, v52);
  v199 = -1;
  v52 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  v96 = v195;
  v97 = v196;
  MEMORY[0x24BD00694](&v199, MEMORY[0x24BEE4568], v52, v73, v196);
  v98 = v187;
  v75 = v190;
  MEMORY[0x24BD005F8](v190, v96, v73, v97);
  v99 = v192;
  v100 = *(void (**)(char *, uint64_t))(v192 + 8);
  v100(v96, v73);
  v199 = 64;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  v92 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
  v101 = v188;
  v92(v188, v98, v73);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    goto LABEL_20;
  v102 = v179;
  v103 = AssociatedTypeWitness;
  v104 = swift_getAssociatedConformanceWitness();
  v105 = v75;
  v106 = v177;
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v103, v104);
  v107 = v106;
  v75 = v105;
  v101 = v188;
  MEMORY[0x24BD00904](v107, v73, v102);
  LOBYTE(v103) = dispatch thunk of static Comparable.>= infix(_:_:)();
  result = ((uint64_t (*)(char *, uint64_t))v100)(v96, v73);
  if ((v103 & 1) != 0)
  {
LABEL_20:
    v109 = v101;
    v110 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v111 = v182;
    v112 = v185;
    if (v110 < 64)
      goto LABEL_37;
    v113 = v176;
    v92(v176, v109, v73);
    v199 = -1;
    v114 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v115 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v114 & 1) != 0)
    {
      if (v115 <= 64)
      {
        v116 = AssociatedTypeWitness;
        v117 = swift_getAssociatedConformanceWitness();
        v118 = v113;
        v119 = v177;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, v116, v117);
        v120 = v195;
        MEMORY[0x24BD00904](v119, v73, v179);
        LOBYTE(v116) = dispatch thunk of static Comparable.> infix(_:_:)();
        v100(v120, v73);
        v52 = v199;
        v121 = v170;
        (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v170, v118, v73);
        v112 = v185;
        if ((v116 & 1) == 0)
        {
          v100(v121, v73);
          v109 = v188;
          goto LABEL_37;
        }
        v122 = dispatch thunk of BinaryInteger._lowWord.getter();
        v100(v121, v73);
        v123 = v52 >= v122;
        goto LABEL_29;
      }
    }
    else if (v115 < 65)
    {
      v125 = dispatch thunk of BinaryInteger._lowWord.getter();
      v100(v113, v73);
      v123 = v199 >= v125;
      v112 = v185;
LABEL_29:
      v109 = v188;
      if (!v123)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
LABEL_37:
      v130 = dispatch thunk of BinaryInteger._lowWord.getter();
      v100(v109, v73);
      v92(v111, v194, v73);
      v132 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v133 = v181;
      v92(v181, v111, v73);
      if ((v132 & 1) != 0)
      {
        v134 = dispatch thunk of BinaryInteger.bitWidth.getter();
        v100(v133, v73);
        v135 = v184;
        v92(v184, v111, v73);
        v136 = v134 < 65;
        v137 = v135;
        v138 = v183;
        if (!v136)
        {
          v199 = 0x8000000000000000;
          if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
          {
            v139 = v184;
            if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
            {
              v140 = dispatch thunk of BinaryInteger._lowWord.getter();
              v100(v139, v73);
              v75 = v190;
              if (v140 < (uint64_t)v199)
                goto LABEL_77;
LABEL_45:
              v141 = dispatch thunk of BinaryInteger.bitWidth.getter();
              v92(v138, v111, v73);
              if (v141 < 65)
              {
                v147 = dispatch thunk of BinaryInteger.bitWidth.getter();
                v100(v138, v73);
                if (v147 != 64)
                {
                  v92(v112, v111, v73);
                  goto LABEL_56;
                }
                v148 = dispatch thunk of static BinaryInteger.isSigned.getter();
                v92(v112, v111, v73);
                if ((v148 & 1) != 0)
                  goto LABEL_56;
              }
              else
              {
                v100(v138, v73);
                v92(v112, v111, v73);
              }
              v199 = 0x7FFFFFFFFFFFFFFFLL;
              v142 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v143 = dispatch thunk of BinaryInteger.bitWidth.getter();
              if ((v142 & 1) != 0)
              {
                if (v143 > 64)
                {
                  lazy protocol witness table accessor for type Int64 and conformance Int64();
                  v144 = v195;
                  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                  v145 = dispatch thunk of static Comparable.< infix(_:_:)();
                  v100(v144, v73);
                  v146 = v112;
                  goto LABEL_61;
                }
              }
              else if (v143 > 63)
              {
                v198 = 0x7FFFFFFFFFFFFFFFLL;
                v149 = v195;
                (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v195, v112, v73);
                lazy protocol witness table accessor for type Int64 and conformance Int64();
                v150 = v171;
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                v145 = dispatch thunk of static Comparable.< infix(_:_:)();
                v100(v150, v73);
                v146 = v149;
LABEL_61:
                v100(v146, v73);
                if ((v145 & 1) != 0)
                  goto LABEL_77;
LABEL_57:
                dispatch thunk of BinaryInteger._lowWord.getter();
                v100(v111, v73);
                v100(v75, v73);
                v100(v194, v73);
                v131 = v187;
LABEL_58:
                v100(v131, v73);
                return v130;
              }
              dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_56:
              v100(v112, v73);
              goto LABEL_57;
            }
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v156 = v195;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v155 = dispatch thunk of static Comparable.< infix(_:_:)();
            v157 = v156;
            v138 = v183;
            v100(v157, v73);
            v100(v139, v73);
          }
          else
          {
            v151 = dispatch thunk of static BinaryInteger.isSigned.getter();
            v152 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if ((v151 & 1) == 0)
            {
              if (v152 < 64)
              {
                v158 = v184;
                v159 = dispatch thunk of BinaryInteger._lowWord.getter();
                v100(v158, v73);
                v138 = v183;
                if (v159 < (uint64_t)v199)
                  goto LABEL_77;
              }
              else
              {
                v100(v184, v73);
                v138 = v183;
              }
              goto LABEL_45;
            }
            if (v152 <= 64)
            {
              v160 = AssociatedTypeWitness;
              v161 = swift_getAssociatedConformanceWitness();
              v162 = v177;
              MEMORY[0x24BD00928](&unk_249C28BC8, 256, v160, v161);
              v163 = v195;
              MEMORY[0x24BD00904](v162, v73, v179);
              v164 = v184;
              LOBYTE(v160) = dispatch thunk of static Comparable.< infix(_:_:)();
              v100(v163, v73);
              v165 = v169;
              (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v169, v164, v73);
              if ((v160 & 1) != 0)
              {
                v100(v165, v73);
                v75 = v190;
              }
              else
              {
                v166 = v165;
                v167 = v199;
                v168 = dispatch thunk of BinaryInteger._lowWord.getter();
                v100(v166, v73);
                v136 = v168 < v167;
                v138 = v183;
                v75 = v190;
                if (!v136)
                  goto LABEL_45;
              }
LABEL_77:
              v100(v111, v73);
              v100(v75, v73);
              v100(v194, v73);
              v100(v187, v73);
              return 0;
            }
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v153 = v195;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v154 = v184;
            v155 = dispatch thunk of static Comparable.< infix(_:_:)();
            v100(v153, v73);
            v100(v154, v73);
            v138 = v183;
          }
          v75 = v190;
          if ((v155 & 1) != 0)
            goto LABEL_77;
          goto LABEL_45;
        }
      }
      else
      {
        v100(v133, v73);
        v137 = v184;
        v92(v184, v111, v73);
        v138 = v183;
      }
      v100(v137, v73);
      goto LABEL_45;
    }
    v124 = v195;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v52 = dispatch thunk of static Comparable.< infix(_:_:)();
    v100(v124, v73);
    v100(v113, v73);
    v112 = v185;
    v109 = v188;
    if ((v52 & 1) != 0)
      goto LABEL_30;
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

uint64_t static _Int128.isSigned.getter()
{
  return 1;
}

unint64_t static _Int128.* infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result;
  char v5;

  result = _Int128.multipliedReportingOverflow(by:)(a3, a4, a1, a2);
  if ((v5 & 1) != 0)
    __break(1u);
  return result;
}

unint64_t _Int128.multipliedReportingOverflow(by:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  _BOOL4 v17;
  unint64_t result;

  if (a4)
  {
    v6 = (unint64_t)a4 >> 63;
    if (!a2)
    {
      LODWORD(v7) = 0;
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    if (!a2)
      goto LABEL_6;
  }
  v7 = (unint64_t)a2 >> 63;
LABEL_6:
  v8 = v7 ^ v6;
  v9 = -(uint64_t)a3;
  v10 = (unsigned __int128)-(__int128)__PAIR128__(v4, a3) >> 64;
  if (a4 < 0)
  {
    v11 = v10;
  }
  else
  {
    v9 = a3;
    v11 = a4;
  }
  v12 = (unsigned __int128)-(__int128)__PAIR128__(v5, a1) >> 64;
  if (a2 >= 0)
    v13 = a1;
  else
    v13 = -(uint64_t)a1;
  if (a2 >= 0)
    v14 = a2;
  else
    v14 = v12;
  v15 = !is_mul_ok(v11, v13);
  v16 = !is_mul_ok(v9, v14);
  v17 = __CFADD__(v11 * v13, v9 * v14);
  result = v9 * v13;
  if (v11 && v14 || v15 || v16 || v17)
  {
    if (!v8)
      return result;
    return -(uint64_t)result;
  }
  if ((v8 & 1) != 0)
    return -(uint64_t)result;
  return result;
}

unint64_t static _Int128.*= infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v5;
  char v6;

  result = _Int128.multipliedReportingOverflow(by:)(a2, a3, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v6 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t protocol witness for Numeric.init<A>(exactly:) in conformance _Int128@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  char v7;

  result = _Int128.init<A>(exactly:)(a1, a2, a3);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v6;
  *(_BYTE *)(a4 + 16) = v7 & 1;
  return result;
}

void protocol witness for Numeric.magnitude.getter in conformance _Int128(_QWORD *a1@<X8>)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = v2[1];
  v5 = (unsigned __int128)-(__int128)__PAIR128__(v1, *v2) >> 64;
  if (v4 < 0)
  {
    v3 = -*v2;
    v4 = v5;
  }
  *a1 = v3;
  a1[1] = v4;
}

unint64_t protocol witness for static Numeric.* infix(_:_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;
  unint64_t v5;
  char v6;

  result = _Int128.multipliedReportingOverflow(by:)(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v6 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a3 = result;
    a3[1] = v5;
  }
  return result;
}

unint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance _Int128(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  char v5;

  result = _Int128.multipliedReportingOverflow(by:)(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v4;
  }
  return result;
}

uint64_t *protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance _Int128@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result >> 63;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t _Int128.Words._value.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*_Int128.Words._value.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _Int128.Words.count.getter()
{
  return 2;
}

uint64_t _Int128.Words.startIndex.getter()
{
  return 0;
}

uint64_t _Int128.Words.indices.getter()
{
  return 0;
}

Swift::Int __swiftcall _Int128.Words.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall _Int128.Words.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

unint64_t _Int128.Words.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result > 1)
  {
    __break(1u);
  }
  else if (result)
  {
    return a3;
  }
  else
  {
    return a2;
  }
  return result;
}

uint64_t static _Int128.bitWidth.getter()
{
  return 128;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance _Int128.Words@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Int128.Words(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _Int128.Words(_QWORD *a1, unint64_t *a2))()
{
  _QWORD *v4;
  uint64_t (*v5)();
  uint64_t v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = _Int128.Words.subscript.read((uint64_t)v4, *a2);
  v4[4] = v6;
  v4[5] = v5;
  return protocol witness for Collection.subscript.read in conformance _UInt128.Words;
}

void protocol witness for Collection.subscript.read in conformance _UInt128.Words(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 40))(*a1);
  free(v1);
}

uint64_t (*_Int128.Words.subscript.read(uint64_t a1, unint64_t a2))()
{
  uint64_t (*result)();

  if (a2 <= 1)
    return AggregateShare.share.modify;
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.subscript.getter in conformance _Int128.Words@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v3;

  if ((*result & 0x8000000000000000) != 0 || (v3 = result[1], v3 > 2))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = *result;
    *(_QWORD *)(a2 + 8) = v3;
    *(_OWORD *)(a2 + 16) = *v2;
  }
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance _Int128.Words(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _UInt128.Words@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;

  v3 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v3 <= 2)
  {
    *a3 = v3;
    return result;
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.distance(from:to:) in conformance _UInt128.Words(_QWORD *result, unint64_t *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (*result <= 2uLL && v2 <= 2)
    return (_QWORD *)(v2 - *result);
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _UInt128.Words(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _UInt128.Words(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance _Int128.Words@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _Int128.Words(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _Int128.Words@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Int128.Words()
{
  uint64_t *v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance _Int128.Words(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t static _Int128.max.getter()
{
  return -1;
}

uint64_t static _Int128.min.getter()
{
  return 0;
}

uint64_t _Int128.multipliedReportingOverflow(by:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = -(uint64_t)a2;
  v5 = (unsigned __int128)-(__int128)__PAIR128__(v3, a2) >> 64;
  if (a3 >= 0)
  {
    v4 = a2;
    v5 = a3;
  }
  v6 = (v5 * (unsigned __int128)a1) >> 64;
  result = v4 * a1;
  if (v6)
  {
    if ((a3 & 0x8000000000000000) == 0)
      return result;
    return -result;
  }
  else
  {
    if ((a3 & 0x8000000000000000) == 0)
      return result;
    return -result;
  }
}

uint64_t _Int128.multiplied(by:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v4;

  result = _Int128.multipliedReportingOverflow(by:)(a1, a2, a3);
  if ((v4 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t _Int128.quotientAndRemainder(dividingBy:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v5 = a4;
  v6 = (unsigned __int128)-(__int128)__PAIR128__(v4, a3) >> 64;
  v7 = a4 < 0;
  if (a4 >= 0)
    v8 = a3;
  else
    v8 = -(uint64_t)a3;
  if (a4 < 0)
    a4 = v6;
  v9 = (unsigned __int128)-(__int128)__PAIR128__(v6, a1) >> 64;
  v10 = a2 < 0;
  if (a2 >= 0)
    v11 = a1;
  else
    v11 = -(uint64_t)a1;
  if (a2 >= 0)
    v12 = a2;
  else
    v12 = v9;
  v13 = specialized _wideDivide22<A>(_:by:)(&v19, &v18, &v17, a4, v8, v12, v11);
  v15 = v18;
  result = v19;
  if (v10 == v7)
  {
    if (v13 < 0)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_19;
LABEL_26:
    if ((v15 & 0x8000000000000000) == 0)
      return result;
    goto LABEL_29;
  }
  if (v13 != 0x8000000000000000 || v19)
    goto LABEL_21;
  v13 = 0x8000000000000000;
  if (v5 < 0)
    goto LABEL_26;
LABEL_19:
  while ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_21:
    if (v13 < 0)
      goto LABEL_30;
    v16 = result == 0;
    result = -result;
    if (v16)
      v13 = -v13;
    else
      v13 = ~v13;
    if (v5 < 0)
      goto LABEL_26;
  }
  return result;
}

uint64_t _Int128.dividedReportingOverflow(by:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  unint64_t v4;

  v4 = a3;
  if (a2 != -1)
  {
    if (!a2 && !a1)
      return v4;
    return _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
  }
  if (a1 != -1 || a4 != 0x8000000000000000 || a3)
    return _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
  return v4;
}

unint64_t _Int128.remainderReportingOverflow(dividingBy:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  if (a2 != -1)
  {
    if (!a2 && !a1)
      return a3;
LABEL_8:
    _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
    return a3;
  }
  if (a1 != -1 || a4 != 0x8000000000000000 || a3)
    goto LABEL_8;
  return a3;
}

uint64_t _Int128.multipliedFullWidth(by:)(uint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5)
  {
    if (a3)
    {
      v6 = ((a5 ^ a3) & 0x8000000000000000) == 0;
      if ((a5 & 0x8000000000000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
    if ((a5 & 0x8000000000000000) != 0)
    {
      v6 = 0;
LABEL_11:
      v19 = a4 == 0;
      a4 = -(uint64_t)a4;
      a5 = -(uint64_t)(a5 + !v19);
LABEL_12:
      v8 = (unsigned __int128)-(__int128)__PAIR128__(v5, a2) >> 64;
      if (a3 >= 0)
      {
        v7 = a3;
      }
      else
      {
        a2 = -(uint64_t)a2;
        v7 = v8;
      }
      goto LABEL_15;
    }
    v7 = 0;
    v6 = 1;
  }
  else
  {
    if (a3)
    {
      a5 = 0;
      v6 = a3 >= 0;
      goto LABEL_12;
    }
    v7 = 0;
    a5 = 0;
    v6 = 1;
  }
LABEL_15:
  v9 = (__PAIR128__(v7, a2) * __PAIR128__(a5, a4)) >> 64;
  v10 = __CFADD__((__PAIR128__(a5, a4) * a2) >> 64, a4 * v7);
  v11 = a4 * a2;
  v12 = ((a5 * (unsigned __int128)a2) >> 64)
      + ((a4 * (unsigned __int128)(unint64_t)v7) >> 64)
      + v10
      + __CFADD__((a4 * (unsigned __int128)a2) >> 64, a5 * a2)
      + a5 * v7;
  if (!v6)
  {
    v13 = -v12 - 1;
    v19 = v11 == 0;
    v14 = -v11;
    if (v19)
      v15 = -v9;
    else
      v15 = ~v9;
    v19 = v14 != 0;
    v16 = v14 - 1;
    v17 = !v19;
    v18 = v17 << 63 >> 63;
    LODWORD(v17) = v15 - v17 == -1;
    v19 = __CFADD__(v16, 1);
    v11 = v16 + 1;
    if (v19)
      v17 = v17;
    else
      v17 = 0;
    v9 = v18 + v19 + v15;
    v12 = v13 + v17;
  }
  *a1 = v11;
  a1[1] = v9;
  return v12;
}

uint64_t _Int128.dividingFullWidth(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17[2];
  uint64_t v18[2];

  specialized _wideMagnitude22<A>(_:)(v18, v17, a1, a2, *a3, a3[1]);
  v8 = -(uint64_t)a4;
  v10 = (unsigned __int128)-(__int128)__PAIR128__(v9, a4) >> 64;
  if (a5 < 0)
  {
    v11 = v10;
  }
  else
  {
    v8 = a4;
    v11 = a5;
  }
  v12 = specialized _wideDivide42<A>(_:by:)(v18, v17, &v16, v18[1], v18[0], v17[1], v17[0], v11, v8);
  result = v18[0];
  v14 = v17[0];
  if (a2 < 0 != a5 < 0)
  {
    if (v12 == 0x8000000000000000 && v18[0] == 0)
      goto LABEL_16;
    if (v12 < 0)
      goto LABEL_21;
    result = -v18[0];
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_14;
    goto LABEL_17;
  }
  if (v12 < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2 < 0)
  {
LABEL_17:
    if ((v14 & 0x8000000000000000) == 0)
      return result;
    goto LABEL_20;
  }
LABEL_14:
  while ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_16:
    result = 0;
    if (a2 < 0)
      goto LABEL_17;
  }
  return result;
}

_QWORD *specialized _wideMagnitude22<A>(_:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unsigned __int128 v7;
  unint64_t v8;

  if (a4 < 0)
  {
    v6 = -a4;
    if (a3)
      v6 = ~a4;
    v7 = __PAIR128__(v6, -a3) - 1;
    v8 = -a6;
    if (a5)
      v8 = ~a6;
    return (_QWORD *)specialized _wideAddReportingOverflow22<A>(_:_:)(result, a2, v7, *((uint64_t *)&v7 + 1), -a5 - 1, (__PAIR128__(v8, -a5) - 1) >> 64, 0, 0, 1, 0);
  }
  else
  {
    *result = a3;
    result[1] = a4;
    *a2 = a5;
    a2[1] = a6;
  }
  return result;
}

_QWORD *static _Int128.&= infix(_:_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result[1] & a3;
  *result &= a2;
  result[1] = v3;
  return result;
}

_QWORD *static _Int128.|= infix(_:_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result[1] | a3;
  *result |= a2;
  result[1] = v3;
  return result;
}

_QWORD *static _Int128.^= infix(_:_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result[1] ^ a3;
  *result ^= a2;
  result[1] = v3;
  return result;
}

uint64_t *static _Int128.<<= infix(_:_:)(uint64_t *result, unint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (!a3)
  {
    if (a2 < 0x80)
    {
      v8 = *result;
      v9 = result[1];
      if (a2)
      {
        v9 = (v9 << a2) | ((unint64_t)*result >> -(char)a2);
        v8 = *result << a2;
      }
      if (a2 > 0x3F)
      {
        v9 = *result << a2;
        v8 = 0;
      }
      *result = v8;
      result[1] = v9;
      return result;
    }
LABEL_18:
    *result = 0;
    result[1] = 0;
    return result;
  }
  if ((a3 & 0x8000000000000000) == 0)
    goto LABEL_18;
  v3 = __OFSUB__(0, a3);
  v4 = -a3;
  v5 = v3;
  v6 = a2 == 0;
  v7 = -(uint64_t)a2;
  if (v6)
  {
    if ((v5 & 1) == 0)
      return static _Int128.>>= infix(_:_:)(result, v7, v4);
  }
  else
  {
    if (v4 == 0x8000000000000000)
      v5 = 1;
    if ((v5 & 1) == 0)
      return static _Int128.>>= infix(_:_:)(result, v7, --v4);
  }
  __break(1u);
  return result;
}

uint64_t *static _Int128.>>= infix(_:_:)(uint64_t *result, unint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a3)
  {
    if (a2 < 0x80)
    {
      v8 = *result;
      v9 = result[1];
      v10 = v9 >> 63;
      v11 = v9 >> a2;
      v12 = (v9 << -(char)a2) | ((unint64_t)*result >> a2);
      if (a2)
      {
        v9 >>= a2;
        v8 = v12;
      }
      if (a2 > 0x3F)
      {
        v9 = v10;
        v8 = v11;
      }
      *result = v8;
      result[1] = v9;
      return result;
    }
LABEL_18:
    v13 = result[1] >> 63;
    *result = v13;
    result[1] = v13;
    return result;
  }
  if ((a3 & 0x8000000000000000) == 0)
    goto LABEL_18;
  v3 = __OFSUB__(0, a3);
  v4 = -a3;
  v5 = v3;
  v6 = a2 == 0;
  v7 = -(uint64_t)a2;
  if (v6)
  {
    if ((v5 & 1) == 0)
      return (uint64_t *)static _Int128.<<= infix(_:_:)(result, v7, v4);
  }
  else
  {
    if (v4 == 0x8000000000000000)
      v5 = 1;
    if ((v5 & 1) == 0)
      return (uint64_t *)static _Int128.<<= infix(_:_:)(result, v7, --v4);
  }
  __break(1u);
  return result;
}

unint64_t static _Int128./ infix(_:_:)(unint64_t result, int64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4 == -1)
  {
    if (a3 == -1 && a2 == 0x8000000000000000 && !result)
      goto LABEL_9;
    return _Int128.quotientAndRemainder(dividingBy:)(a3, a4, result, a2);
  }
  if (a4 || a3)
    return _Int128.quotientAndRemainder(dividingBy:)(a3, a4, result, a2);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t static _Int128.% infix(_:_:)(unint64_t result, int64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a4 == -1)
  {
    if (a3 == -1 && a2 == 0x8000000000000000 && !result)
      goto LABEL_9;
LABEL_8:
    _Int128.quotientAndRemainder(dividingBy:)(a3, a4, result, a2);
    return v4;
  }
  if (a4 || a3)
    goto LABEL_8;
LABEL_9:
  __break(1u);
  return result;
}

unint64_t _Int128.leadingZeroBitCount.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = __clz(a2);
  v3 = __clz(a1) + 64;
  if (a2)
    return v2;
  else
    return v3;
}

unint64_t _Int128.trailingZeroBitCount.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = __clz(__rbit64(a1));
  v3 = __clz(__rbit64(a2)) + 64;
  if (a1)
    return v2;
  else
    return v3;
}

uint64_t _Int128.nonzeroBitCount.getter(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  uint8x8_t v4;

  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  v3 = v2.u32[0];
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v4.i16[0] = vaddlv_u8(v4);
  return v3 + v4.u32[0];
}

unint64_t _Int128.byteSwapped.getter(uint64_t a1, unint64_t a2)
{
  return bswap64(a2);
}

double protocol witness for static FixedWidthInteger.max.getter in conformance _Int128@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = NAN;
  *a1 = xmmword_249C29200;
  return result;
}

double protocol witness for static FixedWidthInteger.min.getter in conformance _Int128@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_249C29210;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.addingReportingOverflow(_:) in conformance _Int128(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  v4 = v2[1];
  v5 = __CFADD__(*v2, *a2);
  v6 = __OFADD__(v4, v3);
  v7 = v4 + v3;
  if (v6)
  {
    v8 = 1;
    if (v5)
    {
LABEL_12:
      v9 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    v8 = v7 == 0x7FFFFFFFFFFFFFFFLL && v5;
    if (v5)
      goto LABEL_12;
  }
  v9 = 0;
LABEL_13:
  *a1 = *v2 + *a2;
  a1[1] = v9 + v7;
  return v8;
}

unint64_t protocol witness for FixedWidthInteger.subtractingReportingOverflow(_:) in conformance _Int128(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;

  v3 = *a2;
  v4 = a2[1];
  v5 = *v2;
  v6 = v2[1];
  v7 = __OFSUB__(v6, v4);
  v8 = v6 - v4;
  v9 = v7;
  v10 = v5 >= v3;
  v11 = v5 - v3;
  LODWORD(v3) = v5 < v3;
  if (v10)
  {
    if (v9)
    {
      v3 = 1;
      v12 = v8;
      goto LABEL_13;
    }
    v12 = v8;
  }
  else
  {
    v12 = v8 - 1;
    if ((v9 & 1) != 0)
    {
      v3 = 1;
      goto LABEL_13;
    }
  }
  if (v8 == 0x8000000000000000)
    v3 = v3;
  else
    v3 = 0;
LABEL_13:
  *a1 = v11;
  a1[1] = v12;
  return v3;
}

uint64_t protocol witness for FixedWidthInteger.multipliedReportingOverflow(by:) in conformance _Int128(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char v5;

  *a1 = _Int128.multipliedReportingOverflow(by:)(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  a1[1] = v4;
  return v5 & 1;
}

uint64_t protocol witness for FixedWidthInteger.dividedReportingOverflow(by:) in conformance _Int128(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  BOOL v8;
  uint64_t result;
  int64_t v12;

  v4 = *a2;
  v5 = a2[1];
  v6 = *v2;
  v7 = v2[1];
  if (v5 == -1)
  {
    if (v4 == -1 && v7 == 0x8000000000000000 && v6 == 0)
    {
      v6 = 0;
      result = 1;
      v7 = 0x8000000000000000;
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v5)
    v8 = 0;
  else
    v8 = v4 == 0;
  if (!v8)
  {
LABEL_15:
    v6 = _Int128.quotientAndRemainder(dividingBy:)(v4, v5, v6, v7);
    v7 = v12;
    result = 0;
    goto LABEL_16;
  }
  result = 1;
LABEL_16:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.remainderReportingOverflow(dividingBy:) in conformance _Int128(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  BOOL v8;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = *v2;
  v7 = v2[1];
  if (v5 == -1)
  {
    if (v4 != -1 || v7 != 0x8000000000000000 || v6 != 0)
      goto LABEL_15;
    v6 = 0;
    v7 = 0;
LABEL_17:
    result = 1;
    goto LABEL_18;
  }
  if (v5)
    v8 = 0;
  else
    v8 = v4 == 0;
  if (v8)
    goto LABEL_17;
LABEL_15:
  _Int128.quotientAndRemainder(dividingBy:)(v4, v5, v6, v7);
  result = 0;
LABEL_18:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.multipliedFullWidth(by:) in conformance _Int128(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t result;
  uint64_t v6;

  result = _Int128.multipliedFullWidth(by:)(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *v3, v3[1]);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.dividingFullWidth(_:) in conformance _Int128(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = _Int128.dividingFullWidth(_:)(*a3, a3[1], a4, *(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  *a1 = result;
  a1[1] = v8;
  *a2 = v9;
  a2[1] = v10;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.nonzeroBitCount.getter in conformance _Int128()
{
  int8x16_t *v0;

  return vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v0)))));
}

unint64_t protocol witness for FixedWidthInteger.leadingZeroBitCount.getter in conformance _Int128()
{
  unint64_t *v0;
  unint64_t v1;

  v1 = v0[1];
  if (v1)
    return __clz(v1);
  else
    return __clz(*v0) + 64;
}

__n128 protocol witness for FixedWidthInteger.init(littleEndian:) in conformance _Int128@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized static _Int128.&>> infix(_:_:), a3);
}

uint64_t *protocol witness for static FixedWidthInteger.&>>= infix(_:_:) in conformance _Int128(uint64_t *a1, _QWORD *a2)
{
  return specialized static _Int128.&>>= infix(_:_:)(a1, *a2);
}

uint64_t protocol witness for static FixedWidthInteger.&<< infix(_:_:) in conformance _Int128@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized static _Int128.&<< infix(_:_:), a3);
}

uint64_t protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = a3(*a1, a1[1], *a2);
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t *protocol witness for static FixedWidthInteger.&<<= infix(_:_:) in conformance _Int128(uint64_t *a1, _QWORD *a2)
{
  return specialized static _Int128.&<<= infix(_:_:)(a1, *a2);
}

unint64_t protocol witness for static FixedWidthInteger.&* infix(_:_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;
  unint64_t v5;

  result = _Int128.multipliedReportingOverflow(by:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for static BinaryInteger.isSigned.getter in conformance _Int128()
{
  return 1;
}

uint64_t protocol witness for BinaryInteger.init<A>(exactly:) in conformance _Int128()
{
  lazy protocol witness table accessor for type _Int128 and conformance _Int128();
  return FixedWidthInteger.init<A>(exactly:)();
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128(a1, a2, (void (*)(void))lazy protocol witness table accessor for type _Int128 and conformance _Int128, a3);
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X5>, _OWORD *a4@<X8>)
{
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  __int128 v12;
  char v13;

  a3();
  static FixedWidthInteger._convert<A>(from:)();
  if ((v13 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v8._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x8000000249C301F0;
    v9._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 0xD00000000000002ELL;
    v11._object = (void *)0x8000000249C30210;
    String.append(_:)(v11);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    *a4 = v12;
  }
  return result;
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = specialized _Int128.init<A>(_:)(a1, a2, a3);
  v9 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

double protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _Int128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type _Int128 and conformance _Int128, a5);
}

double protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X5>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  double result;
  __int128 v13;

  v11 = a5();
  static FixedWidthInteger._truncatingInit<A>(_:)(a1, a4, a2, v11, a3, (uint64_t)&v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = *(double *)&v13;
  *a6 = v13;
  return result;
}

uint64_t protocol witness for BinaryInteger.init<A>(clamping:) in conformance _Int128()
{
  lazy protocol witness table accessor for type _Int128 and conformance _Int128();
  return FixedWidthInteger.init<A>(clamping:)();
}

unint64_t protocol witness for BinaryInteger._binaryLogarithm() in conformance _Int128()
{
  unint64_t *v0;
  int64_t v1;
  unint64_t result;

  v1 = v0[1];
  if (v1)
  {
    if (v1 >= 1)
      return __clz(v1) ^ 0x7F;
    __break(1u);
  }
  else if (*v0)
  {
    return (__clz(*v0) | 0x40) ^ 0x7F;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for BinaryInteger.trailingZeroBitCount.getter in conformance _Int128()
{
  unint64_t *v0;

  if (*v0)
    return __clz(__rbit64(*v0));
  else
    return __clz(__rbit64(v0[1])) + 64;
}

unint64_t protocol witness for static BinaryInteger./ infix(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  int64_t v5;
  unint64_t result;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  result = *a2;
  v7 = a2[1];
  if (v7 == -1)
  {
    if (result != -1 || v5 != 0x8000000000000000 || v4 != 0)
      goto LABEL_6;
  }
  else
  {
    if (v7)
      v8 = 0;
    else
      v8 = result == 0;
    if (!v8)
    {
LABEL_6:
      result = _Int128.quotientAndRemainder(dividingBy:)(result, v7, v4, v5);
      *a3 = result;
      a3[1] = v9;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static BinaryInteger./= infix(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2)
{
  return specialized static _Int128./= infix(_:_:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

unint64_t protocol witness for static BinaryInteger.% infix(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  int64_t v5;
  unint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  result = *a2;
  v7 = a2[1];
  if (v7 == -1)
  {
    if (result != -1 || v5 != 0x8000000000000000 || v4 != 0)
      goto LABEL_6;
  }
  else
  {
    if (v7)
      v8 = 0;
    else
      v8 = result == 0;
    if (!v8)
    {
LABEL_6:
      result = _Int128.quotientAndRemainder(dividingBy:)(result, v7, v4, v5);
      *a3 = v9;
      a3[1] = v10;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static BinaryInteger.%= infix(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2)
{
  return specialized static _Int128.%= infix(_:_:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

_QWORD *protocol witness for static BinaryInteger.~ prefix(_:) in conformance _Int128@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = result[1];
  if (*result)
    v3 = ~v2;
  else
    v3 = -v2;
  v4 = *result == 0;
  *a2 = -*result - 1;
  a2[1] = v3 - v4;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.&= infix(_:_:) in conformance _Int128(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result;

  result = vandq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.|= infix(_:_:) in conformance _Int128(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result;

  result = vorrq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.^= infix(_:_:) in conformance _Int128(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result;

  result = veorq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t, char *);
  char *v48;
  char v49;
  void (*v50)(char *, char *, char *);
  uint64_t v51;
  void (*v52)(char *, char *);
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t AssociatedConformanceWitness;
  char *v62;
  void (*v63)(char *, char *);
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  char v67;
  uint64_t v68;
  BOOL v69;
  BOOL v70;
  char v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  char v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t AssociatedTypeWitness;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;

  v101 = a5;
  v99 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v97 = (char *)&v93 - v10;
  v11 = *((_QWORD *)a3 - 1);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v95 = (char *)&v93 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v100 = (char *)&v93 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20, v22);
  v25 = (char *)&v93 - v24;
  v27 = MEMORY[0x24BDAC7A8](v23, v26);
  v96 = (char *)&v93 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  v32 = (char *)&v93 - v31;
  v34 = MEMORY[0x24BDAC7A8](v30, v33);
  v102 = (char *)&v93 - v35;
  MEMORY[0x24BDAC7A8](v34, v36);
  v38 = (char *)&v93 - v37;
  v39 = a1[1];
  v103 = *a1;
  v104 = v39;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
      goto LABEL_9;
    goto LABEL_6;
  }
  v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v40 & 1) == 0)
  {
    if (v41 >= 64)
      goto LABEL_10;
LABEL_9:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= -128)
      goto LABEL_10;
LABEL_25:
    specialized static _Int128.&>> infix(_:_:)(v103, v104, 127);
LABEL_26:
    result = 0;
    v66 = 0;
    goto LABEL_53;
  }
  if (v41 > 64)
  {
LABEL_6:
    v106 = -128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v42 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, char *))(v11 + 8))(v38, a3);
    if ((v42 & 1) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
  v94 = v25;
  v60 = AssociatedTypeWitness;
  v59 = v99;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v62 = v97;
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v60, AssociatedConformanceWitness);
  MEMORY[0x24BD00904](v62, a3, v59);
  LOBYTE(v59) = dispatch thunk of static Comparable.< infix(_:_:)();
  v63 = *(void (**)(char *, char *))(v11 + 8);
  v63(v38, a3);
  (*(void (**)(char *, uint64_t, char *))(v11 + 16))(v15, a2, a3);
  if ((v59 & 1) != 0)
  {
    v63(v15, a3);
    goto LABEL_25;
  }
  v64 = dispatch thunk of BinaryInteger._lowWord.getter();
  v63(v15, a3);
  v25 = v94;
  if (v64 < -128)
    goto LABEL_25;
LABEL_10:
  v43 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v45 = v25;
  if ((v43 & 1) != 0)
  {
    if (v44 > 64)
      goto LABEL_12;
  }
  else if (v44 >= 64)
  {
LABEL_12:
    v106 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v46 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, char *))(v11 + 8))(v38, a3);
    if ((v46 & 1) == 0)
      goto LABEL_13;
LABEL_20:
    v56 = v103;
    v57 = v104;
    v58 = 127;
LABEL_52:
    result = specialized static _Int128.&>> infix(_:_:)(v56, v57, v58);
    goto LABEL_53;
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() > 128)
    goto LABEL_20;
LABEL_13:
  v94 = v38;
  v47 = *(void (**)(char *, uint64_t, char *))(v11 + 16);
  v48 = v102;
  v47(v102, a2, a3);
  v49 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v50 = (void (*)(char *, char *, char *))v47;
  v47(v32, (uint64_t)v48, a3);
  if ((v49 & 1) == 0)
  {
    v52 = *(void (**)(char *, char *))(v11 + 8);
    v52(v32, a3);
    v53 = v45;
    goto LABEL_37;
  }
  v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v52 = *(void (**)(char *, char *))(v11 + 8);
  v52(v32, a3);
  v53 = v45;
  if (v51 <= 64)
    goto LABEL_37;
  v54 = v96;
  v50(v96, v102, a3);
  v106 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v67 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v70 = __OFSUB__(v68, 64);
    v69 = v68 - 64 < 0;
    if ((v67 & 1) == 0)
      goto LABEL_32;
    if (v68 <= 64)
    {
      v87 = AssociatedTypeWitness;
      v86 = v99;
      v88 = swift_getAssociatedConformanceWitness();
      v89 = v97;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v87, v88);
      v90 = v94;
      MEMORY[0x24BD00904](v89, a3, v86);
      v91 = v96;
      v82 = dispatch thunk of static Comparable.< infix(_:_:)();
      v52(v90, a3);
      v80 = v95;
      (*(void (**)(char *, char *, char *))(v11 + 32))(v95, v91, a3);
      if ((v82 & 1) != 0)
        goto LABEL_57;
      dispatch thunk of BinaryInteger._lowWord.getter();
      v72 = v80;
      goto LABEL_36;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    v55 = v94;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v54 = v96;
LABEL_30:
    v71 = dispatch thunk of static Comparable.< infix(_:_:)();
    v52(v55, a3);
    v52(v54, a3);
    if ((v71 & 1) == 0)
      goto LABEL_37;
    __break(1u);
LABEL_32:
    v54 = v96;
    if (v69 == v70)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v55 = v94;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    goto LABEL_30;
  }
LABEL_34:
  dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_35:
  v72 = v54;
LABEL_36:
  v52(v72, a3);
LABEL_37:
  v73 = v102;
  v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v50(v53, v73, a3);
  if (v74 >= 65)
  {
    v52(v53, a3);
    goto LABEL_39;
  }
  v77 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v52(v53, a3);
  if (v77 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_39:
    v50(v100, v102, a3);
    v106 = 0x7FFFFFFFFFFFFFFFLL;
    v75 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v75 & 1) != 0)
    {
      if (v76 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_48:
        v79 = v94;
        v80 = a3;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v81 = v100;
        v82 = dispatch thunk of static Comparable.< infix(_:_:)();
        v52(v79, a3);
        v52(v81, a3);
        if ((v82 & 1) == 0)
          goto LABEL_49;
        __break(1u);
LABEL_57:
        v52(v80, a3);
        __break(1u);
LABEL_58:
        if (v82 > 0xFFFFFFFFFFFFFF80)
        {
          specialized static FixedWidthInteger._truncatingInit<A>(_:)();
          result = specialized static _Int128.&<< infix(_:_:)(v103, v104, v92);
          goto LABEL_53;
        }
        goto LABEL_26;
      }
    }
    else if (v76 >= 64)
    {
      v105 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_48;
    }
    v78 = v100;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v52(v78, a3);
  }
LABEL_49:
  v83 = v102;
  v82 = dispatch thunk of BinaryInteger._lowWord.getter();
  v52(v83, a3);
  result = specialized static _Int128.&>> infix(_:_:)(v103, v104, 127);
  if ((v82 & 0x8000000000000000) != 0)
    goto LABEL_58;
  if (v82 < 0x80)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)();
    v58 = v84;
    v56 = v103;
    v57 = v104;
    goto LABEL_52;
  }
LABEL_53:
  v85 = v101;
  *v101 = result;
  v85[1] = v66;
  return result;
}

uint64_t protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  char v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t result;
  unint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  int64_t v81;
  uint64_t v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  unint64_t *v86;
  char *v87;
  char *v88;
  uint64_t AssociatedTypeWitness;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  int64_t v96;

  v90 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v88 = (char *)&v85 - v9;
  v10 = *(char **)(a3 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v12, v15);
  v87 = (char *)&v85 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v92 = (char *)&v85 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v93 = (char *)&v85 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v91 = (char *)&v85 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v30 = (char *)&v85 - v29;
  v32 = MEMORY[0x24BDAC7A8](v28, v31);
  v94 = (char *)&v85 - v33;
  MEMORY[0x24BDAC7A8](v32, v34);
  v36 = (char *)&v85 - v35;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_9:
      if (dispatch thunk of BinaryInteger._lowWord.getter() < -128)
      {
LABEL_10:
        v39 = -128;
        goto LABEL_42;
      }
      goto LABEL_14;
    }
  }
  else
  {
    v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v37 & 1) == 0)
    {
      if (v38 >= 64)
        goto LABEL_14;
      goto LABEL_9;
    }
    if (v38 <= 64)
    {
      v86 = a1;
      v41 = AssociatedTypeWitness;
      v42 = v90;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v44 = v88;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v41, AssociatedConformanceWitness);
      MEMORY[0x24BD00904](v44, a3, v42);
      LOBYTE(v41) = dispatch thunk of static Comparable.< infix(_:_:)();
      v45 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
      v45(v36, a3);
      (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v14, a2, a3);
      if ((v41 & 1) != 0)
      {
        v45(v14, a3);
        v39 = -128;
        a1 = v86;
        goto LABEL_42;
      }
      v46 = dispatch thunk of BinaryInteger._lowWord.getter();
      v45(v14, a3);
      a1 = v86;
      if (v46 < -128)
        goto LABEL_10;
LABEL_14:
      v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v47 & 1) != 0)
      {
        if (v48 > 64)
          goto LABEL_16;
      }
      else if (v48 >= 64)
      {
LABEL_16:
        v39 = 128;
        v96 = 128;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v49 = dispatch thunk of static Comparable.< infix(_:_:)();
        (*((void (**)(char *, uint64_t))v10 + 1))(v36, a3);
        if ((v49 & 1) != 0)
          goto LABEL_42;
        goto LABEL_21;
      }
      if (dispatch thunk of BinaryInteger._lowWord.getter() > 128)
      {
        v39 = 128;
        goto LABEL_42;
      }
LABEL_21:
      v50 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v10 + 2);
      v51 = v94;
      v50(v94, a2, a3);
      v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v50(v30, (uint64_t)v51, a3);
      if ((v52 & 1) != 0)
      {
        v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
        v54 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
        v54(v30, a3);
        if (v53 > 64)
        {
          v50(v91, (uint64_t)v51, a3);
          v96 = 0x8000000000000000;
          v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
          v56 = v93;
          if ((v55 & 1) != 0)
          {
            v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v10 = v92;
            if (v57 >= 64)
            {
              lazy protocol witness table accessor for type Int and conformance Int();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v73 = dispatch thunk of static Comparable.< infix(_:_:)();
              v54(v36, a3);
              v54(v91, a3);
              if ((v73 & 1) != 0)
                goto LABEL_55;
            }
            else
            {
              v58 = v91;
              v90 = dispatch thunk of BinaryInteger._lowWord.getter();
              v54(v58, a3);
              if (v90 < v96)
                goto LABEL_55;
            }
          }
          else
          {
            v69 = dispatch thunk of static BinaryInteger.isSigned.getter();
            v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if ((v69 & 1) != 0)
            {
              if (v70 <= 64)
                goto LABEL_56;
              lazy protocol witness table accessor for type Int and conformance Int();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v71 = v91;
              v72 = dispatch thunk of static Comparable.< infix(_:_:)();
              v54(v36, a3);
              v54(v71, a3);
              v51 = v94;
              v10 = v92;
              if ((v72 & 1) != 0)
              {
LABEL_55:
                do
                {
                  __break(1u);
LABEL_56:
                  v76 = AssociatedTypeWitness;
                  v77 = swift_getAssociatedConformanceWitness();
                  v78 = v88;
                  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v76, v77);
                  MEMORY[0x24BD00904](v78, a3, v90);
                  v79 = v91;
                  LOBYTE(v76) = dispatch thunk of static Comparable.< infix(_:_:)();
                  v54(v36, a3);
                  v80 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v10 + 4);
                  v10 = v87;
                  v80(v87, v79, a3);
                  if ((v76 & 1) != 0)
                    goto LABEL_63;
                  v81 = v96;
                  v82 = dispatch thunk of BinaryInteger._lowWord.getter();
                  v54(v10, a3);
                  v83 = v82 < v81;
                  v51 = v94;
                  v10 = v92;
                }
                while (v83);
              }
            }
            else
            {
              v10 = v92;
              if (v70 < 64)
              {
                v74 = v91;
                v75 = dispatch thunk of BinaryInteger._lowWord.getter();
                v54(v74, a3);
                v51 = v94;
                if (v75 < v96)
                  goto LABEL_55;
              }
              else
              {
                v54(v91, a3);
                v51 = v94;
              }
            }
          }
LABEL_29:
          v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v50(v56, (uint64_t)v51, a3);
          if (v59 < 65)
          {
            v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v54(v56, a3);
            if (v62 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
              goto LABEL_41;
          }
          else
          {
            v54(v56, a3);
          }
          v50(v10, (uint64_t)v51, a3);
          v96 = 0x7FFFFFFFFFFFFFFFLL;
          v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
          v61 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v60 & 1) != 0)
          {
            if (v61 > 64)
            {
              lazy protocol witness table accessor for type Int and conformance Int();
LABEL_40:
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v63 = dispatch thunk of static Comparable.< infix(_:_:)();
              v54(v36, a3);
              v54(v10, a3);
              v51 = v94;
              if ((v63 & 1) == 0)
                goto LABEL_41;
              __break(1u);
LABEL_63:
              v54(v10, a3);
              __break(1u);
              goto LABEL_64;
            }
          }
          else if (v61 >= 64)
          {
            v95 = 0x7FFFFFFFFFFFFFFFLL;
            lazy protocol witness table accessor for type Int and conformance Int();
            goto LABEL_40;
          }
          dispatch thunk of BinaryInteger._lowWord.getter();
          v54(v10, a3);
          v51 = v94;
LABEL_41:
          v39 = dispatch thunk of BinaryInteger._lowWord.getter();
          v54(v51, a3);
          goto LABEL_42;
        }
      }
      else
      {
        v54 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
        v54(v30, a3);
      }
      v10 = v92;
      v56 = v93;
      goto LABEL_29;
    }
  }
  v39 = -128;
  v96 = -128;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v40 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*((void (**)(char *, uint64_t))v10 + 1))(v36, a3);
  if ((v40 & 1) == 0)
    goto LABEL_14;
LABEL_42:
  v64 = *a1;
  v65 = a1[1];
  result = specialized static _Int128.&>> infix(_:_:)(*a1, v65, 127);
  if ((v39 & 0x8000000000000000) != 0)
  {
    if (v39 > 0xFFFFFFFFFFFFFF80)
    {
      specialized static FixedWidthInteger._truncatingInit<A>(_:)();
      result = specialized static _Int128.&<< infix(_:_:)(v64, v65, v84);
      goto LABEL_45;
    }
LABEL_64:
    result = 0;
    v67 = 0;
    goto LABEL_45;
  }
  if (v39 < 0x80)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)();
    result = specialized static _Int128.&>> infix(_:_:)(v64, v65, v68);
  }
LABEL_45:
  *a1 = result;
  a1[1] = v67;
  return result;
}

uint64_t protocol witness for static BinaryInteger.<< infix<A>(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t, char *);
  char *v48;
  char v49;
  void (*v50)(char *, char *, char *);
  uint64_t v51;
  void (*v52)(char *, char *);
  char *v53;
  char *v54;
  char *v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t AssociatedConformanceWitness;
  char *v61;
  void (*v62)(char *, char *);
  uint64_t v63;
  char v64;
  uint64_t v65;
  BOOL v66;
  BOOL v67;
  char v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t AssociatedTypeWitness;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;

  v98 = a5;
  v96 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v94 = (char *)&v90 - v10;
  v11 = *((_QWORD *)a3 - 1);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v92 = (char *)&v90 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v97 = (char *)&v90 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20, v22);
  v25 = (char *)&v90 - v24;
  v27 = MEMORY[0x24BDAC7A8](v23, v26);
  v93 = (char *)&v90 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  v32 = (char *)&v90 - v31;
  v34 = MEMORY[0x24BDAC7A8](v30, v33);
  v99 = (char *)&v90 - v35;
  MEMORY[0x24BDAC7A8](v34, v36);
  v38 = (char *)&v90 - v37;
  v39 = a1[1];
  v100 = *a1;
  v101 = v39;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
      goto LABEL_9;
    goto LABEL_6;
  }
  v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v40 & 1) == 0)
  {
    if (v41 >= 64)
      goto LABEL_10;
LABEL_9:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= -128)
      goto LABEL_10;
LABEL_26:
    result = specialized static _Int128.&>> infix(_:_:)(v100, v101, 127);
    goto LABEL_52;
  }
  if (v41 > 64)
  {
LABEL_6:
    v103 = -128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v42 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, char *))(v11 + 8))(v38, a3);
    if ((v42 & 1) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
  v91 = v25;
  v59 = AssociatedTypeWitness;
  v58 = v96;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v61 = v94;
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v59, AssociatedConformanceWitness);
  MEMORY[0x24BD00904](v61, a3, v58);
  LOBYTE(v58) = dispatch thunk of static Comparable.< infix(_:_:)();
  v62 = *(void (**)(char *, char *))(v11 + 8);
  v62(v38, a3);
  (*(void (**)(char *, uint64_t, char *))(v11 + 16))(v15, a2, a3);
  if ((v58 & 1) != 0)
  {
    v62(v15, a3);
    goto LABEL_26;
  }
  v63 = dispatch thunk of BinaryInteger._lowWord.getter();
  v62(v15, a3);
  v25 = v91;
  if (v63 < -128)
    goto LABEL_26;
LABEL_10:
  v43 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v45 = v25;
  if ((v43 & 1) != 0)
  {
    if (v44 > 64)
      goto LABEL_12;
  }
  else if (v44 >= 64)
  {
LABEL_12:
    v103 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v46 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, char *))(v11 + 8))(v38, a3);
    if ((v46 & 1) == 0)
      goto LABEL_13;
LABEL_20:
    specialized static _Int128.&>> infix(_:_:)(v100, v101, 127);
LABEL_21:
    result = 0;
    v57 = 0;
    goto LABEL_52;
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() > 128)
    goto LABEL_20;
LABEL_13:
  v91 = v38;
  v47 = *(void (**)(char *, uint64_t, char *))(v11 + 16);
  v48 = v99;
  v47(v99, a2, a3);
  v49 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v50 = (void (*)(char *, char *, char *))v47;
  v47(v32, (uint64_t)v48, a3);
  if ((v49 & 1) == 0)
  {
    v52 = *(void (**)(char *, char *))(v11 + 8);
    v52(v32, a3);
    v53 = v45;
    goto LABEL_37;
  }
  v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v52 = *(void (**)(char *, char *))(v11 + 8);
  v52(v32, a3);
  v53 = v45;
  if (v51 <= 64)
    goto LABEL_37;
  v54 = v93;
  v50(v93, v99, a3);
  v103 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v64 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v67 = __OFSUB__(v65, 64);
    v66 = v65 - 64 < 0;
    if ((v64 & 1) == 0)
      goto LABEL_32;
    if (v65 <= 64)
    {
      v84 = AssociatedTypeWitness;
      v83 = v96;
      v85 = swift_getAssociatedConformanceWitness();
      v86 = v94;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v84, v85);
      v87 = v91;
      MEMORY[0x24BD00904](v86, a3, v83);
      v88 = v93;
      v79 = dispatch thunk of static Comparable.< infix(_:_:)();
      v52(v87, a3);
      v77 = v92;
      (*(void (**)(char *, char *, char *))(v11 + 32))(v92, v88, a3);
      if ((v79 & 1) != 0)
        goto LABEL_56;
      dispatch thunk of BinaryInteger._lowWord.getter();
      v69 = v77;
      goto LABEL_36;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    v55 = v91;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v54 = v93;
LABEL_30:
    v68 = dispatch thunk of static Comparable.< infix(_:_:)();
    v52(v55, a3);
    v52(v54, a3);
    if ((v68 & 1) == 0)
      goto LABEL_37;
    __break(1u);
LABEL_32:
    v54 = v93;
    if (v66 == v67)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v55 = v91;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    goto LABEL_30;
  }
LABEL_34:
  dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_35:
  v69 = v54;
LABEL_36:
  v52(v69, a3);
LABEL_37:
  v70 = v99;
  v71 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v50(v53, v70, a3);
  if (v71 >= 65)
  {
    v52(v53, a3);
    goto LABEL_39;
  }
  v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v52(v53, a3);
  if (v74 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_39:
    v50(v97, v99, a3);
    v103 = 0x7FFFFFFFFFFFFFFFLL;
    v72 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v73 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v72 & 1) != 0)
    {
      if (v73 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_48:
        v76 = v91;
        v77 = a3;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v78 = v97;
        v79 = dispatch thunk of static Comparable.< infix(_:_:)();
        v52(v76, a3);
        v52(v78, a3);
        if ((v79 & 1) == 0)
          goto LABEL_49;
        __break(1u);
LABEL_56:
        result = ((uint64_t (*)(char *, char *))v52)(v77, a3);
        __break(1u);
        goto LABEL_57;
      }
    }
    else if (v73 >= 64)
    {
      v102 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_48;
    }
    v75 = v97;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v52(v75, a3);
  }
LABEL_49:
  v80 = v99;
  v79 = dispatch thunk of BinaryInteger._lowWord.getter();
  v52(v80, a3);
  result = specialized static _Int128.&>> infix(_:_:)(v100, v101, 127);
  if ((v79 & 0x8000000000000000) == 0)
  {
    if (v79 < 0x80)
    {
      specialized static FixedWidthInteger._truncatingInit<A>(_:)();
      result = specialized static _Int128.&<< infix(_:_:)(v100, v101, v81);
      goto LABEL_52;
    }
    goto LABEL_21;
  }
LABEL_57:
  if (v79 > 0xFFFFFFFFFFFFFF80)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)();
    result = specialized static _Int128.&>> infix(_:_:)(v100, v101, v89);
  }
LABEL_52:
  v82 = v98;
  *v98 = result;
  v82[1] = v57;
  return result;
}

uint64_t protocol witness for static BinaryInteger.<<= infix<A>(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t result;
  unint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t AssociatedConformanceWitness;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  int64_t v81;
  uint64_t v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  unint64_t *v86;
  void (**v87)(char *, uint64_t);
  char *v88;
  uint64_t AssociatedTypeWitness;
  uint64_t v90;
  char *v91;
  void (**v92)(char *, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  int64_t v96;

  v90 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v88 = (char *)&v85 - v9;
  v10 = *(void (***)(char *, uint64_t))(a3 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v12, v15);
  v87 = (void (**)(char *, uint64_t))((char *)&v85 - v17);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v92 = (void (**)(char *, uint64_t))((char *)&v85 - v20);
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v93 = (char *)&v85 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v91 = (char *)&v85 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v30 = (char *)&v85 - v29;
  v32 = MEMORY[0x24BDAC7A8](v28, v31);
  v94 = (char *)&v85 - v33;
  MEMORY[0x24BDAC7A8](v32, v34);
  v36 = (char *)&v85 - v35;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_9:
      if (dispatch thunk of BinaryInteger._lowWord.getter() < -128)
        goto LABEL_10;
LABEL_14:
      v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v47 & 1) != 0)
      {
        if (v48 > 64)
          goto LABEL_16;
      }
      else if (v48 >= 64)
      {
LABEL_16:
        v39 = 128;
        v96 = 128;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v49 = dispatch thunk of static Comparable.< infix(_:_:)();
        v10[1](v36, a3);
        if ((v49 & 1) != 0)
          goto LABEL_42;
LABEL_21:
        v50 = v10[2];
        v51 = v94;
        ((void (*)(char *, uint64_t, uint64_t))v50)(v94, a2, a3);
        v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
        ((void (*)(char *, char *, uint64_t))v50)(v30, v51, a3);
        if ((v52 & 1) != 0)
        {
          v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v54 = v10[1];
          v54(v30, a3);
          if (v53 > 64)
          {
            ((void (*)(char *, char *, uint64_t))v50)(v91, v51, a3);
            v96 = 0x8000000000000000;
            v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
            v56 = v93;
            if ((v55 & 1) != 0)
            {
              v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
              v10 = v92;
              if (v57 >= 64)
              {
                lazy protocol witness table accessor for type Int and conformance Int();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                v73 = dispatch thunk of static Comparable.< infix(_:_:)();
                v54(v36, a3);
                v54(v91, a3);
                if ((v73 & 1) != 0)
                  goto LABEL_55;
              }
              else
              {
                v58 = v91;
                v90 = dispatch thunk of BinaryInteger._lowWord.getter();
                v54(v58, a3);
                if (v90 < v96)
                  goto LABEL_55;
              }
            }
            else
            {
              v69 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
              if ((v69 & 1) != 0)
              {
                if (v70 <= 64)
                  goto LABEL_56;
                lazy protocol witness table accessor for type Int and conformance Int();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                v71 = v91;
                v72 = dispatch thunk of static Comparable.< infix(_:_:)();
                v54(v36, a3);
                v54(v71, a3);
                v51 = v94;
                v10 = v92;
                if ((v72 & 1) != 0)
                {
LABEL_55:
                  do
                  {
                    __break(1u);
LABEL_56:
                    v76 = AssociatedTypeWitness;
                    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
                    v78 = v88;
                    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v76, AssociatedConformanceWitness);
                    MEMORY[0x24BD00904](v78, a3, v90);
                    v79 = v91;
                    LOBYTE(v76) = dispatch thunk of static Comparable.< infix(_:_:)();
                    v54(v36, a3);
                    v80 = v10[4];
                    v10 = v87;
                    ((void (*)(void (**)(char *, uint64_t), char *, uint64_t))v80)(v87, v79, a3);
                    if ((v76 & 1) != 0)
                      goto LABEL_64;
                    v81 = v96;
                    v82 = dispatch thunk of BinaryInteger._lowWord.getter();
                    v54((char *)v10, a3);
                    v83 = v82 < v81;
                    v51 = v94;
                    v10 = v92;
                  }
                  while (v83);
                }
              }
              else
              {
                v10 = v92;
                if (v70 < 64)
                {
                  v74 = v91;
                  v75 = dispatch thunk of BinaryInteger._lowWord.getter();
                  v54(v74, a3);
                  v51 = v94;
                  if (v75 < v96)
                    goto LABEL_55;
                }
                else
                {
                  v54(v91, a3);
                  v51 = v94;
                }
              }
            }
LABEL_29:
            v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
            ((void (*)(char *, char *, uint64_t))v50)(v56, v51, a3);
            if (v59 < 65)
            {
              v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
              v54(v56, a3);
              if (v62 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
                goto LABEL_41;
            }
            else
            {
              v54(v56, a3);
            }
            ((void (*)(void (**)(char *, uint64_t), char *, uint64_t))v50)(v10, v51, a3);
            v96 = 0x7FFFFFFFFFFFFFFFLL;
            v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
            v61 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if ((v60 & 1) != 0)
            {
              if (v61 > 64)
              {
                lazy protocol witness table accessor for type Int and conformance Int();
LABEL_40:
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                v63 = dispatch thunk of static Comparable.< infix(_:_:)();
                v54(v36, a3);
                v54((char *)v10, a3);
                v51 = v94;
                if ((v63 & 1) == 0)
                  goto LABEL_41;
                __break(1u);
LABEL_64:
                result = ((uint64_t (*)(_QWORD, uint64_t))v54)(v10, a3);
                __break(1u);
                return result;
              }
            }
            else if (v61 >= 64)
            {
              v95 = 0x7FFFFFFFFFFFFFFFLL;
              lazy protocol witness table accessor for type Int and conformance Int();
              goto LABEL_40;
            }
            dispatch thunk of BinaryInteger._lowWord.getter();
            v54((char *)v10, a3);
            v51 = v94;
LABEL_41:
            v39 = dispatch thunk of BinaryInteger._lowWord.getter();
            v54(v51, a3);
            goto LABEL_42;
          }
        }
        else
        {
          v54 = v10[1];
          v54(v30, a3);
        }
        v10 = v92;
        v56 = v93;
        goto LABEL_29;
      }
      if (dispatch thunk of BinaryInteger._lowWord.getter() > 128)
      {
        v39 = 128;
        goto LABEL_42;
      }
      goto LABEL_21;
    }
    goto LABEL_6;
  }
  v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v37 & 1) == 0)
  {
    if (v38 >= 64)
      goto LABEL_14;
    goto LABEL_9;
  }
  if (v38 > 64)
  {
LABEL_6:
    v39 = -128;
    v96 = -128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v40 = dispatch thunk of static Comparable.< infix(_:_:)();
    v10[1](v36, a3);
    if ((v40 & 1) != 0)
      goto LABEL_42;
    goto LABEL_14;
  }
  v86 = a1;
  v41 = AssociatedTypeWitness;
  v42 = v90;
  v43 = swift_getAssociatedConformanceWitness();
  v44 = v88;
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v41, v43);
  MEMORY[0x24BD00904](v44, a3, v42);
  LOBYTE(v41) = dispatch thunk of static Comparable.< infix(_:_:)();
  v45 = v10[1];
  v45(v36, a3);
  ((void (*)(char *, uint64_t, uint64_t))v10[2])(v14, a2, a3);
  if ((v41 & 1) != 0)
  {
    v45(v14, a3);
    v39 = -128;
    a1 = v86;
    goto LABEL_42;
  }
  v46 = dispatch thunk of BinaryInteger._lowWord.getter();
  v45(v14, a3);
  a1 = v86;
  if (v46 >= -128)
    goto LABEL_14;
LABEL_10:
  v39 = -128;
LABEL_42:
  v64 = *a1;
  v65 = a1[1];
  result = specialized static _Int128.&>> infix(_:_:)(*a1, v65, 127);
  if ((v39 & 0x8000000000000000) != 0)
  {
    if (v39 > 0xFFFFFFFFFFFFFF80)
    {
      specialized static FixedWidthInteger._truncatingInit<A>(_:)();
      result = specialized static _Int128.&>> infix(_:_:)(v64, v65, v84);
    }
  }
  else if (v39 >= 0x80)
  {
    result = 0;
    v67 = 0;
  }
  else
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)();
    result = specialized static _Int128.&<< infix(_:_:)(v64, v65, v68);
  }
  *a1 = result;
  a1[1] = v67;
  return result;
}

uint64_t protocol witness for BinaryInteger.quotientAndRemainder(dividingBy:) in conformance _Int128(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = _Int128.quotientAndRemainder(dividingBy:)(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
  *a1 = result;
  a1[1] = v7;
  *a2 = v8;
  a2[1] = v9;
  return result;
}

BOOL protocol witness for BinaryInteger.isMultiple(of:) in conformance _Int128(uint64_t a1)
{
  uint64_t v1;

  return specialized SignedInteger<>.isMultiple(of:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

BOOL protocol witness for BinaryInteger.signum() in conformance _Int128@<W0>(_BOOL8 *a1@<X8>)
{
  uint64_t v1;
  _BOOL8 result;
  _BOOL8 v4;

  result = specialized BinaryInteger.signum()(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance _Int128@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _BOOL4 v41;
  int v42;
  char v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD v48[3];

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
    v44 = 0;
    v45 = 0;
    v43 = 1;
LABEL_61:
    *(_QWORD *)a3 = v44;
    *(_QWORD *)(a3 + 8) = v45;
    *(_BYTE *)(a3 + 16) = v43 & 1;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v9 = specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
    v11 = v46;
    v13 = v47;
    goto LABEL_55;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v9 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10);
    v11 = v10;
    v13 = v12 & 1;
    goto LABEL_55;
  }
  v48[0] = result;
  v48[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = result >> 8;
  if (result == 43)
  {
    if (!v5)
      goto LABEL_67;
    if (v5 == 1 || (BYTE1(result) - 48) > 9u)
    {
LABEL_41:
      v9 = 0;
      v11 = 0;
      v13 = 1;
LABEL_55:
      result = swift_bridgeObjectRelease();
      v43 = v13 & 1;
      if ((v13 & 1) != 0)
        v44 = 0;
      else
        v44 = v9;
      if ((v13 & 1) != 0)
        v45 = 0;
      else
        v45 = v11;
      goto LABEL_61;
    }
    v15 = 0;
    v16 = 0;
    v25 = (unsigned __int8 *)v48 + 2;
    v26 = v5 - 2;
    v13 = 1;
    while (1)
    {
      v27 = v14 - 48;
      v28 = _Int128.multipliedReportingOverflow(by:)(0xAuLL, 0, v15, v16);
      v31 = v30;
      v15 = v28 + v27;
      v32 = __CFADD__(v28, v27);
      if (v29 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (((v32 | v31) & 1) != 0)
          goto LABEL_41;
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v16 = v29;
        if (v32)
        {
          if ((v31 & 1) != 0)
            goto LABEL_41;
          v16 = v29 + 1;
        }
        else if ((v31 & 1) != 0)
        {
          goto LABEL_41;
        }
      }
      if (!v26)
        break;
      v9 = 0;
      v11 = 0;
      v33 = *v25++;
      LOBYTE(v14) = v33;
      --v26;
      if ((v33 - 48) >= 0xA)
        goto LABEL_55;
    }
LABEL_62:
    v13 = 0;
    v9 = (unsigned __int8 *)v15;
    v11 = v16;
    goto LABEL_55;
  }
  if (result != 45)
  {
    if (!v5 || (result - 48) > 9u)
      goto LABEL_41;
    v15 = 0;
    v16 = 0;
    v34 = v5 - 1;
    v35 = (unsigned __int8 *)v48 + 1;
    v13 = 1;
    while (1)
    {
      v36 = result - 48;
      v37 = _Int128.multipliedReportingOverflow(by:)(0xAuLL, 0, v15, v16);
      v40 = v39;
      v15 = v37 + v36;
      v41 = __CFADD__(v37, v36);
      if (v38 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (((v41 | v40) & 1) != 0)
          goto LABEL_41;
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v16 = v38;
        if (v41)
        {
          if ((v40 & 1) != 0)
            goto LABEL_41;
          v16 = v38 + 1;
        }
        else if ((v40 & 1) != 0)
        {
          goto LABEL_41;
        }
      }
      if (!v34)
        goto LABEL_62;
      v9 = 0;
      v11 = 0;
      v42 = *v35++;
      LOBYTE(result) = v42;
      --v34;
      if ((v42 - 48) >= 0xA)
        goto LABEL_55;
    }
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      v15 = 0;
      v16 = 0;
      v17 = (unsigned __int8 *)v48 + 2;
      v18 = v5 - 2;
      v13 = 1;
      while (1)
      {
        v19 = v14 - 48;
        v20 = _Int128.multipliedReportingOverflow(by:)(0xAuLL, 0, v15, v16);
        v23 = v22;
        v15 = v20 - v19;
        if (v21 == 0x8000000000000000)
          v23 |= v20 < v19;
        if ((v23 & 1) != 0)
          break;
        v16 = (__PAIR128__(v21, v20) - v19) >> 64;
        if (!v18)
          goto LABEL_62;
        v9 = 0;
        v11 = 0;
        v24 = *v17++;
        LOBYTE(v14) = v24;
        --v18;
        if ((v24 - 48) >= 0xA)
          goto LABEL_55;
      }
    }
    goto LABEL_41;
  }
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

unint64_t *protocol witness for Strideable.distance(to:) in conformance _Int128@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v3 = *result;
  v4 = result[1];
  v5 = *v2;
  v6 = v2[1];
  if (!v6)
  {
    if (v4 < 0)
    {
      v6 = 0;
LABEL_9:
      v7 = 0;
LABEL_10:
      v8 = v3 == 0;
      v3 = -(uint64_t)v3;
      v4 = -(v4 + !v8);
      goto LABEL_38;
    }
    goto LABEL_12;
  }
  if (!v4)
  {
    if (v6 < 0)
    {
      v4 = 0;
      v8 = v5 == 0;
      v5 = -(uint64_t)v5;
      if (v8)
        v6 = -v6;
      else
        v6 = ~v6;
      v7 = 1;
      goto LABEL_38;
    }
LABEL_12:
    v9 = __OFSUB__(v4, v6);
    v10 = v4 - v6;
    v11 = v9;
    v8 = v3 >= v5;
    v12 = v3 - v5;
    if (v8)
    {
      if ((v11 & 1) == 0)
      {
LABEL_22:
        LOBYTE(v5) = v12 >= 0;
        if (v10 != -1)
          LOBYTE(v5) = v10 < -1;
        if ((v5 & 1) == 0)
        {
          LOBYTE(v5) = v12 < 0;
          v13 = v10 == 0;
          LODWORD(v10) = v10 > 0;
          if (v13)
            v10 = v12 < 0;
          else
            v10 = v10;
          if ((v10 & 1) == 0)
          {
            *a2 = v12;
            return result;
          }
          goto LABEL_50;
        }
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    else
    {
      if (v10 == 0x8000000000000000)
        LOBYTE(v5) = 1;
      else
        LOBYTE(v5) = v11;
      if ((v5 & 1) == 0)
      {
        --v10;
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_49;
  }
  if (v4 < 0 == v6 < 0)
    goto LABEL_12;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_55;
    goto LABEL_9;
  }
  v8 = v5 == 0;
  v5 = -(uint64_t)v5;
  if (v8)
    v6 = -v6;
  else
    v6 = ~v6;
  v7 = 1;
  if (v4 < 0)
    goto LABEL_10;
LABEL_38:
  v8 = __CFADD__(v5, v3);
  v14 = v5 + v3;
  LODWORD(v5) = v8;
  v8 = __CFADD__(v6, v4);
  v10 = v6 + v4;
  if (v8)
    goto LABEL_52;
  if ((_DWORD)v5)
    goto LABEL_54;
  if (v10)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v14 < 0)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    if ((v5 & 1) != 0)
      goto LABEL_56;
    __break(1u);
LABEL_54:
    if (v10 != -1)
      goto LABEL_55;
LABEL_56:
    __break(1u);
    return result;
  }
  if (!v7)
    v14 = -v14;
  *a2 = v14;
  return result;
}

void protocol witness for Strideable.advanced(by:) in conformance _Int128(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  BOOL v9;

  v4 = *v1;
  v3 = v1[1];
  specialized static FixedWidthInteger._truncatingInit<A>(_:)();
  v7 = __CFADD__(v4, v5);
  v8 = v3 + v6;
  if (__OFADD__(v3, v6) || (v7 ? (v9 = v8 == 0x7FFFFFFFFFFFFFFFLL) : (v9 = 0), v9))
  {
    __break(1u);
  }
  else
  {
    *a1 = v4 + v5;
    a1[1] = v8 + v7;
  }
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance _Int128(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Strideable<>._step(after:from:by:));
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a9(a1, a2, a3 & 1, *a4, a4[1], *a5, a5[1], *a6);
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v8 = a4 + a8;
  v9 = __CFADD__(a4, a8);
  v10 = a5 + (a8 >> 63);
  if (__OFADD__(a5, a8 >> 63))
    goto LABEL_6;
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = 0;
    v11 = v10 + v9;
    goto LABEL_11;
  }
  if (v9)
  {
LABEL_6:
    v8 = ~a8 >> 63;
    v11 = (a8 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    v12 = 0x8000000000000000;
  }
  else
  {
    v12 = 0;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_11:
  *a1 = v8;
  a1[1] = v11;
  return v12;
}

uint64_t specialized _wideDivide32<A>(_:by:)(uint64_t result, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v11;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int128 v15;
  BOOL v16;
  _BOOL4 v17;

  v11 = a3;
  v13 = (_QWORD *)result;
  if (a3 == a6)
  {
    result = -1;
    goto LABEL_6;
  }
  if (!a6)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (a3 >= a6)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  result = __udivti3();
LABEL_6:
  v14 = result * a7;
  v15 = (((unint64_t)result * (unsigned __int128)a7) >> 64) + a6 * (unsigned __int128)(unint64_t)result;
  v16 = v11 >= *((_QWORD *)&v15 + 1);
  if (v11 != *((_QWORD *)&v15 + 1))
    goto LABEL_13;
LABEL_10:
  v16 = a4 >= (unint64_t)v15;
  if (a4 != (_QWORD)v15)
  {
    while (1)
    {
      while (1)
      {
LABEL_13:
        if (v16)
          goto LABEL_25;
LABEL_14:
        v17 = __CFADD__(a5, a7);
        v16 = __CFADD__(a4, a6);
        a4 += a6;
        if (!v16)
          break;
        if (v17)
          goto LABEL_22;
LABEL_23:
        ++v11;
        --result;
        a5 += a7;
        v16 = v11 >= *((_QWORD *)&v15 + 1);
        if (v11 == *((_QWORD *)&v15 + 1))
          goto LABEL_10;
      }
      if (a4 == -1)
      {
        if (!v17)
        {
          a4 = -1;
          goto LABEL_9;
        }
LABEL_22:
        ++a4;
        goto LABEL_23;
      }
      a4 += v17;
LABEL_9:
      a5 += a7;
      --result;
      v16 = v11 >= *((_QWORD *)&v15 + 1);
      if (v11 == *((_QWORD *)&v15 + 1))
        goto LABEL_10;
    }
  }
  if (a5 < v14)
    goto LABEL_14;
  a4 = v15;
LABEL_25:
  *v13 = a4 - v15 - *((_QWORD *)&v15 + 1);
  *a2 = a5 - v14;
  return result;
}

uint64_t *protocol witness for static SignedNumeric.- prefix(_:) in conformance _Int128@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = __OFSUB__(0, v2);
  v5 = -v2;
  v6 = v4;
  v7 = v3 == 0;
  v8 = -v3;
  if (v7)
  {
    if ((v6 & 1) == 0)
    {
      *a2 = v8;
      a2[1] = v5;
      return result;
    }
  }
  else
  {
    if (v5 == 0x8000000000000000)
      v6 = 1;
    if ((v6 & 1) == 0)
    {
      *a2 = v8;
      a2[1] = v5 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for SignedNumeric.negate() in conformance _Int128()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v0;
  v1 = v0[1];
  v3 = __OFSUB__(0, v1);
  v4 = -v1;
  v5 = v3;
  v6 = v2 == 0;
  v7 = -v2;
  if (v6)
  {
    if ((v5 & 1) == 0)
    {
      *v0 = v7;
      v0[1] = v4;
      return;
    }
  }
  else
  {
    if (v4 == 0x8000000000000000)
      v5 = 1;
    if ((v5 & 1) == 0)
    {
      *v0 = v7;
      v0[1] = v4 - 1;
      return;
    }
  }
  __break(1u);
}

uint64_t protocol witness for static SignedInteger._maskingAdd(_:_:) in conformance _Int128()
{
  lazy protocol witness table accessor for type _Int128 and conformance _Int128();
  return static SignedInteger<>._maskingAdd(_:_:)();
}

uint64_t protocol witness for static SignedInteger._maskingSubtract(_:_:) in conformance _Int128()
{
  lazy protocol witness table accessor for type _Int128 and conformance _Int128();
  return static SignedInteger<>._maskingSubtract(_:_:)();
}

uint64_t _Int128.dividedBy1e18()(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = _Int128.multipliedFullWidth(by:)(&v10, 0x73AFF322E62439FDuLL, 0x9392EE8E921D5D0, a1, a2);
  *((_QWORD *)&v6 + 1) = v4;
  *(_QWORD *)&v6 = v3;
  v5 = v6 >> 55;
  v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63))
    v8 = (v4 >> 55) + 1;
  else
    v8 = v4 >> 55;
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0xDE0B6B3A7640000uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e15()(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = _Int128.multipliedFullWidth(by:)(&v10, 0xF9D37014BF60A11uLL, 0x901D7CF73AB0ACD9, a1, a2);
  v6 = (__int128)(__PAIR128__(v5, v4) + __PAIR128__(a2, a1)) >> 49;
  v7 = v6 + (a2 >> 63);
  if (__CFADD__(v6, a2 >> 63))
    v8 = ((uint64_t)((__PAIR128__(v5, v4) + __PAIR128__(a2, a1)) >> 64) >> 49) + 1;
  else
    v8 = (uint64_t)((__PAIR128__(v5, v4) + __PAIR128__(a2, a1)) >> 64) >> 49;
  _Int128.multipliedReportingOverflow(by:)(v6 + (a2 >> 63), v8, 0x38D7EA4C68000uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e12()(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = _Int128.multipliedFullWidth(by:)(&v10, 0xFE4FE1EDD10B9175, 0x232F33025BD42232, a1, a2);
  *((_QWORD *)&v6 + 1) = v4;
  *(_QWORD *)&v6 = v3;
  v5 = v6 >> 37;
  v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63))
    v8 = (v4 >> 37) + 1;
  else
    v8 = v4 >> 37;
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0xE8D4A51000uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e9()(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = _Int128.multipliedFullWidth(by:)(&v10, 0x98B405447C4A9819, 0x44B82FA09B5A52CBLL, a1, a2);
  *((_QWORD *)&v6 + 1) = v4;
  *(_QWORD *)&v6 = v3;
  v5 = v6 >> 28;
  v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63))
    v8 = (v4 >> 28) + 1;
  else
    v8 = v4 >> 28;
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0x3B9ACA00uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e6()(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = _Int128.multipliedFullWidth(by:)(&v10, 0x5A63F9A49C2C1B11uLL, 0x8637BD05AF6C69BLL, a1, a2);
  *((_QWORD *)&v6 + 1) = v4;
  *(_QWORD *)&v6 = v3;
  v5 = v6 >> 15;
  v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63))
    v8 = (v4 >> 15) + 1;
  else
    v8 = v4 >> 15;
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0xF4240uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e3()(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = _Int128.multipliedFullWidth(by:)(&v10, 0xB22D0E5604189375, 0x4189374BC6A7EF9DLL, a1, a2);
  *((_QWORD *)&v6 + 1) = v4;
  *(_QWORD *)&v6 = v3;
  v5 = v6 >> 8;
  v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63))
    v8 = (v4 >> 8) + 1;
  else
    v8 = v4 >> 8;
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0x3E8uLL, 0);
  return v7;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_10;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_9;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    *a2 = a4;
    if (a3 == 1)
    {
      v5 = 1;
LABEL_9:
      v6 = a3;
      goto LABEL_10;
    }
    a2[1] = a5;
    v5 = 2;
    v6 = 2;
    if (a3 == 2)
      goto LABEL_9;
LABEL_10:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)v6;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (!a2)
  {
    v5 = 0;
    a3 = 0;
LABEL_9:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_9;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v5 = 1;
    *a2 = a4;
    if (a3 != 1)
    {
      v5 = 2;
      a2[1] = a5;
      if (a3 != 2)
      {
        v5 = 2;
        a3 = 2;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v14 = v7;
    v15 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = &v14;
    goto LABEL_7;
  }
  v7 = static String._copying(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)((uint64_t)v9, v10, a3, a4);
  return swift_bridgeObjectRelease();
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  __int128 v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 *v29;
  __int128 v30;
  char v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  __int128 v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  _BOOL4 v40;
  BOOL v41;
  BOOL v42;
  _BOOL4 v43;
  unsigned int v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  _BOOL4 v49;
  BOOL v50;
  _BOOL4 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  __int128 v55;

  v4 = a2;
  v5 = (unsigned __int8 *)result;
  v7 = *(unsigned __int8 *)result;
  if (v7 == 43)
  {
    v25 = a2 - 1;
    if (a2 < 1)
      goto LABEL_145;
    if (a2 != 1)
    {
      v26 = a3 + 87;
      if (a3 <= 10)
        v26 = 97;
      v53 = v26;
      if (a3 <= 10)
        v27 = 65;
      else
        v27 = a3 + 55;
      if (a3 <= 10)
        v28 = a3 + 48;
      else
        v28 = 58;
      result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(a3, &v55);
      v12 = 0;
      v13 = 0;
      if (v5)
      {
        v29 = v5 + 1;
        v30 = v55;
        do
        {
          v44 = *v29;
          result = v44 - 48;
          if (v44 < 0x30 || v44 >= v28)
          {
            if (v44 < 0x41 || v44 >= v27)
            {
              if (v44 < 0x61 || v44 >= v53)
                goto LABEL_141;
              result = v44 - 87;
            }
            else
            {
              result = v44 - 55;
            }
          }
          result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(result, &v55);
          v45 = !is_mul_ok(v13, v30);
          v46 = !is_mul_ok(v12, *((unint64_t *)&v30 + 1));
          v47 = __CFADD__(v13 * v30, v12 * *((_QWORD *)&v30 + 1));
          v48 = (v30 * __PAIR128__(v13, v12)) >> 64;
          v49 = __CFADD__(v13 * v30 + v12 * *((_QWORD *)&v30 + 1), (v12 * (unsigned __int128)(unint64_t)v30) >> 64);
          v50 = !*((_QWORD *)&v30 + 1) || v13 == 0;
          if (!v50 || v45 || v46 || v47)
            goto LABEL_141;
          v42 = __CFADD__(v12 * v30, (_QWORD)v55);
          v12 = v12 * v30 + v55;
          v51 = v42;
          v13 = v48 + *((_QWORD *)&v55 + 1);
          if (__CFADD__(v48, *((_QWORD *)&v55 + 1)))
            goto LABEL_141;
          if (v13 == -1)
          {
            if (v51 || v49)
              goto LABEL_141;
            v13 = -1;
          }
          else if (v51)
          {
            if (v49)
              goto LABEL_141;
            ++v13;
          }
          else if (v49)
          {
            goto LABEL_141;
          }
          ++v29;
        }
        while (--v25);
      }
LABEL_142:
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      *(_BYTE *)(a4 + 16) = 0;
      return result;
    }
LABEL_143:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (v7 != 45)
  {
    if (a2)
    {
      v31 = a3 + 87;
      if (a3 <= 10)
        v31 = 97;
      v54 = v31;
      if (a3 <= 10)
        v32 = 65;
      else
        v32 = a3 + 55;
      if (a3 <= 10)
        v33 = a3 + 48;
      else
        v33 = 58;
      result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(a3, &v55);
      v12 = 0;
      v13 = 0;
      if (v5)
      {
        v34 = v55;
        while (1)
        {
          v35 = *v5;
          result = v35 - 48;
          if (v35 < 0x30 || v35 >= v33)
          {
            if (v35 < 0x41 || v35 >= v32)
            {
              if (v35 < 0x61 || v35 >= v54)
                break;
              result = v35 - 87;
            }
            else
            {
              result = v35 - 55;
            }
          }
          result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(result, &v55);
          v36 = !is_mul_ok(v13, v34);
          v37 = !is_mul_ok(v12, *((unint64_t *)&v34 + 1));
          v38 = __CFADD__(v13 * v34, v12 * *((_QWORD *)&v34 + 1));
          v39 = (v34 * __PAIR128__(v13, v12)) >> 64;
          v40 = __CFADD__(v13 * v34 + v12 * *((_QWORD *)&v34 + 1), (v12 * (unsigned __int128)(unint64_t)v34) >> 64);
          v41 = !*((_QWORD *)&v34 + 1) || v13 == 0;
          if (!v41 || v36 || v37 || v38)
            break;
          v42 = __CFADD__(v12 * v34, (_QWORD)v55);
          v12 = v12 * v34 + v55;
          v43 = v42;
          v13 = v39 + *((_QWORD *)&v55 + 1);
          if (__CFADD__(v39, *((_QWORD *)&v55 + 1)))
            break;
          if (v13 == -1)
          {
            if (v43 || v40)
              break;
            v13 = -1;
          }
          else if (v43)
          {
            if (v40)
              break;
            ++v13;
          }
          else if (v40)
          {
            break;
          }
          ++v5;
          if (!--v4)
            goto LABEL_142;
        }
LABEL_141:
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      goto LABEL_142;
    }
    goto LABEL_143;
  }
  v8 = a2 - 1;
  if (a2 >= 1)
  {
    if (a2 != 1)
    {
      v9 = a3 + 87;
      if (a3 <= 10)
        v9 = 97;
      v52 = v9;
      if (a3 <= 10)
        v10 = 65;
      else
        v10 = a3 + 55;
      if (a3 <= 10)
        v11 = a3 + 48;
      else
        v11 = 58;
      result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(a3, &v55);
      v12 = 0;
      v13 = 0;
      if (v5)
      {
        v14 = v5 + 1;
        v15 = v55;
        while (1)
        {
          v16 = *v14;
          result = v16 - 48;
          if (v16 < 0x30 || v16 >= v11)
          {
            if (v16 < 0x41 || v16 >= v10)
            {
              if (v16 < 0x61 || v16 >= v52)
                goto LABEL_141;
              result = v16 - 87;
            }
            else
            {
              result = v16 - 55;
            }
          }
          result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(result, &v55);
          v17 = !is_mul_ok(v13, v15);
          v18 = !is_mul_ok(v12, *((unint64_t *)&v15 + 1));
          v19 = __CFADD__(v13 * v15, v12 * *((_QWORD *)&v15 + 1));
          v20 = (v15 * __PAIR128__(v13, v12)) >> 64;
          v21 = __CFADD__(v13 * v15 + v12 * *((_QWORD *)&v15 + 1), (v12 * (unsigned __int128)(unint64_t)v15) >> 64);
          if (*((_QWORD *)&v15 + 1))
            v22 = v13 == 0;
          else
            v22 = 1;
          if (!v22 || v17 || v18 || v19)
            goto LABEL_141;
          v23 = v12 * v15;
          v13 = v20 - *((_QWORD *)&v55 + 1);
          v12 = v12 * v15 - v55;
          if (v23 < (unint64_t)v55)
            break;
          if (v20 < *((_QWORD *)&v55 + 1))
            goto LABEL_141;
          if (v13)
            goto LABEL_45;
          if (v21)
            goto LABEL_141;
          v13 = 0;
LABEL_46:
          ++v14;
          if (!--v8)
            goto LABEL_142;
        }
        if (v13)
          v24 = v20 < *((_QWORD *)&v55 + 1);
        else
          v24 = 1;
        if (v24)
          goto LABEL_141;
        --v13;
LABEL_45:
        if (v21)
          goto LABEL_141;
        goto LABEL_46;
      }
      goto LABEL_142;
    }
    goto LABEL_143;
  }
  __break(1u);
LABEL_145:
  __break(1u);
  return result;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  char v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  unsigned __int8 v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  _BOOL4 v50;
  unsigned int v51;
  char v52;
  unsigned __int8 v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  _BOOL4 v57;

  v3 = a2;
  v4 = result;
  v5 = *result;
  if (v5 != 43)
  {
    if (v5 != 45)
    {
      if (a2)
      {
        if (a3 <= 10)
          v36 = 97;
        else
          v36 = a3 + 87;
        if (a3 <= 10)
          v37 = 65;
        else
          v37 = a3 + 55;
        if (a3 <= 10)
          v38 = a3 + 48;
        else
          v38 = 58;
        specialized static FixedWidthInteger._truncatingInit<A>(_:)();
        if (v4)
        {
          v41 = v39;
          v42 = v40;
          v33 = 0;
          v43 = 0;
          while (1)
          {
            v44 = *v4;
            if (v44 < 0x30 || v44 >= v38)
            {
              if (v44 < 0x41 || v44 >= v37)
              {
                result = 0;
                if (v44 < 0x61 || v44 >= v36)
                  return result;
                v45 = -87;
              }
              else
              {
                v45 = -55;
              }
            }
            else
            {
              v45 = -48;
            }
            v46 = v44 + v45;
            v47 = _Int128.multipliedReportingOverflow(by:)(v41, v42, v33, v43);
            v33 = v47 + v46;
            v50 = __CFADD__(v47, v46);
            if (v48 == 0x7FFFFFFFFFFFFFFFLL)
            {
              if (((v50 | v49) & 1) != 0)
                return 0;
              v43 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v43 = v48;
              if (v50)
              {
                if ((v49 & 1) != 0)
                  return 0;
                v43 = v48 + 1;
              }
              else if ((v49 & 1) != 0)
              {
                return 0;
              }
            }
            ++v4;
            if (!--v3)
              return (unsigned __int8 *)v33;
          }
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v6 = a2 - 1;
      if (a2 != 1)
      {
        if (a3 <= 10)
          v7 = 97;
        else
          v7 = a3 + 87;
        if (a3 <= 10)
          v8 = 65;
        else
          v8 = a3 + 55;
        if (a3 <= 10)
          v9 = a3 + 48;
        else
          v9 = 58;
        specialized static FixedWidthInteger._truncatingInit<A>(_:)();
        if (v4)
        {
          v12 = v10;
          v13 = v11;
          v14 = 0;
          v15 = 0;
          v16 = v4 + 1;
          do
          {
            v17 = *v16;
            if (v17 < 0x30 || v17 >= v9)
            {
              if (v17 < 0x41 || v17 >= v8)
              {
                result = 0;
                if (v17 < 0x61 || v17 >= v7)
                  return result;
                v18 = -87;
              }
              else
              {
                v18 = -55;
              }
            }
            else
            {
              v18 = -48;
            }
            v19 = v17 + v18;
            v20 = _Int128.multipliedReportingOverflow(by:)(v12, v13, v14, v15);
            v23 = v20 >= v19;
            result = (unsigned __int8 *)(v20 - v19);
            v24 = !v23;
            if (v21 == 0x8000000000000000)
            {
              if (((v22 | v24) & 1) != 0)
                return 0;
            }
            else if ((v22 & 1) != 0)
            {
              return 0;
            }
            ++v16;
            v14 = (unint64_t)result;
            v15 = v21 - v24;
            --v6;
          }
          while (v6);
          return result;
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
LABEL_105:
    __break(1u);
    return result;
  }
  if (a2 < 1)
    goto LABEL_105;
  v25 = a2 - 1;
  if (a2 == 1)
    return 0;
  if (a3 <= 10)
    v26 = 97;
  else
    v26 = a3 + 87;
  if (a3 <= 10)
    v27 = 65;
  else
    v27 = a3 + 55;
  if (a3 <= 10)
    v28 = a3 + 48;
  else
    v28 = 58;
  specialized static FixedWidthInteger._truncatingInit<A>(_:)();
  if (!v4)
    return 0;
  v31 = v29;
  v32 = v30;
  v33 = 0;
  v34 = 0;
  v35 = v4 + 1;
  do
  {
    v51 = *v35;
    if (v51 < 0x30 || v51 >= v28)
    {
      if (v51 < 0x41 || v51 >= v27)
      {
        result = 0;
        if (v51 < 0x61 || v51 >= v26)
          return result;
        v52 = -87;
      }
      else
      {
        v52 = -55;
      }
    }
    else
    {
      v52 = -48;
    }
    v53 = v51 + v52;
    v54 = _Int128.multipliedReportingOverflow(by:)(v31, v32, v33, v34);
    v33 = v54 + v53;
    v57 = __CFADD__(v54, v53);
    if (v55 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (((v57 | v56) & 1) != 0)
        return 0;
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v34 = v55;
      if (v57)
      {
        if ((v56 & 1) != 0)
          return 0;
        v34 = v55 + 1;
      }
      else if ((v56 & 1) != 0)
      {
        return 0;
      }
    }
    ++v35;
    --v25;
  }
  while (v25);
  return (unsigned __int8 *)v33;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x24BD002BC](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x24BD002BCLL);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24BD002BC]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24BD002E0](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t specialized static _Int128.&<< infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  if ((a3 & 0x7F) != 0)
    v3 = a1 << a3;
  else
    v3 = a1;
  if ((a3 & 0x7Fu) <= 0x3FuLL)
    return v3;
  else
    return 0;
}

uint64_t specialized static _Int128.&>> infix(_:_:)(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  v3 = (a1 >> a3) | (a2 << -a3);
  if ((a3 & 0x7F) == 0)
    v3 = a1;
  if ((a3 & 0x7Fu) <= 0x3FuLL)
    return v3;
  else
    return a2 >> a3;
}

uint64_t specialized _Int128.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1, a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  result = _Int128.init<A>(exactly:)(v6, a2, a3);
  if ((v9 & 1) != 0)
    __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  if (result > 2 || a3 > 2)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = a3 - result;
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= a2)
      goto LABEL_10;
    return 0;
  }
  if (v3 <= 0 && v3 > a2)
    return 0;
LABEL_10:
  v4 = __OFADD__(result, a2);
  result += a2;
  if (v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (result > 2)
LABEL_15:
    __break(1u);
  return result;
}

unint64_t *specialized static _UInt128.*= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;

  v2 = *a2;
  v3 = a2[1];
  v4 = *result;
  v5 = result[1];
  v6 = !is_mul_ok(v5, *a2);
  v7 = v5 * *a2;
  v8 = !is_mul_ok(*result, v3);
  v9 = __CFADD__(v7, *result * v3);
  v10 = v7 + *result * v3;
  v11 = v9;
  v12 = (v4 * (unsigned __int128)v2) >> 64;
  v9 = __CFADD__(v10, v12);
  v13 = v10 + v12;
  v14 = v9;
  if (v3)
    v15 = v5 == 0;
  else
    v15 = 1;
  if (!v15 || v6 || v8 || (v11 & 1) != 0 || (v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *result = v4 * v2;
    result[1] = v13;
  }
  return result;
}

uint64_t *specialized static _UInt128.&<<= infix(_:_:)(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *result;
  v3 = *a2 & 0x7FLL;
  v4 = (result[1] << *a2) | ((unint64_t)*result >> -(char)*a2);
  if (v3)
    v2 = *result << *a2;
  else
    v4 = result[1];
  if (v3 > 0x3F)
  {
    v4 = *result << *a2;
    v2 = 0;
  }
  *result = v2;
  result[1] = v4;
  return result;
}

uint64_t *specialized static _UInt128.&>>= infix(_:_:)(uint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = result[1];
  v3 = *a2 & 0x7FLL;
  v4 = v2 >> *a2;
  v5 = (v2 << -(char)*a2) | ((unint64_t)*result >> *a2);
  if (v3)
    v2 >>= *a2;
  else
    v5 = *result;
  if (v3 <= 0x3F)
    v6 = v2;
  else
    v6 = 0;
  if (v3 > 0x3F)
    v5 = v4;
  *result = v5;
  result[1] = v6;
  return result;
}

unint64_t *specialized static _UInt128./= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    result = (unint64_t *)specialized _wideDivide22<A>(_:by:)((uint64_t *)&v5, &v4, &v3, result[1], *result, a2[1], *a2);
    *v2 = v5;
    v2[1] = (unint64_t)result;
  }
  return result;
}

unint64_t *specialized static _UInt128.%= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    result = (unint64_t *)specialized _wideDivide22<A>(_:by:)(&v6, &v5, &v4, result[1], *result, a2[1], *a2);
    v3 = v5;
    *v2 = v4;
    v2[1] = v3;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _Int128 and conformance _Int128()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128, &type metadata for _Int128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE4040], MEMORY[0x24BEE4008]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

uint64_t *specialized static _Int128.&<<= infix(_:_:)(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  v3 = result[1];
  if ((a2 & 0x7F) != 0)
  {
    v3 = (v3 << a2) | ((unint64_t)*result >> -a2);
    v2 = *result << a2;
  }
  if ((a2 & 0x7Fu) > 0x3FuLL)
  {
    v3 = *result << a2;
    v2 = 0;
  }
  *result = v2;
  result[1] = v3;
  return result;
}

uint64_t *specialized static _Int128.&>>= infix(_:_:)(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  v3 = result[1];
  v4 = v3 >> 63;
  v5 = v3 >> a2;
  v6 = (v3 << -a2) | ((unint64_t)*result >> a2);
  if ((a2 & 0x7F) != 0)
  {
    v3 >>= a2;
    v2 = v6;
  }
  if ((a2 & 0x7Fu) > 0x3FuLL)
  {
    v3 = v4;
    v2 = v5;
  }
  *result = v2;
  result[1] = v3;
  return result;
}

unint64_t *specialized static _Int128./= infix(_:_:)(unint64_t *result, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v7;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  if (a3 == -1)
  {
    if (a2 == -1 && v4 == 0x8000000000000000 && v5 == 0)
      goto LABEL_11;
LABEL_10:
    result = (unint64_t *)_Int128.quotientAndRemainder(dividingBy:)(a2, a3, v5, v4);
    *v3 = result;
    v3[1] = v7;
    return result;
  }
  if (a3 || a2)
    goto LABEL_10;
LABEL_11:
  __break(1u);
  return result;
}

unint64_t *specialized static _Int128.%= infix(_:_:)(unint64_t *result, unint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  if (a3 == -1)
  {
    if (a2 == -1 && v4 == 0x8000000000000000 && v5 == 0)
      goto LABEL_11;
LABEL_10:
    result = (unint64_t *)_Int128.quotientAndRemainder(dividingBy:)(a2, a3, v5, v4);
    *v3 = v7;
    v3[1] = v8;
    return result;
  }
  if (a3 || a2)
    goto LABEL_10;
LABEL_11:
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in _UInt128()
{
  return MEMORY[0x24BEE4058];
}

unint64_t lazy protocol witness table accessor for type _UInt128.Words and conformance _UInt128.Words()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128.Words, &type metadata for _UInt128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128.Words, &type metadata for _UInt128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128.Words, &type metadata for _UInt128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _UInt128.Words, &type metadata for _UInt128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_UInt128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_UInt128.Words>, (uint64_t (*)(void))lazy protocol witness table accessor for type _UInt128.Words and conformance _UInt128.Words, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BA8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_UInt128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_UInt128.Words>, (uint64_t (*)(void))lazy protocol witness table accessor for type _UInt128.Words and conformance _UInt128.Words, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in _UInt128.Words()
{
  return MEMORY[0x24BEE1780];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD8]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x24BEE17A8];
    v7[1] = v6;
    result = MEMORY[0x24BD00BD4](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<_UInt128.Words> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<_UInt128.Words>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<_UInt128.Words> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<_UInt128.Words>, MEMORY[0x24BEE2C18]);
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in _UInt128()
{
  return MEMORY[0x24BEE17C0];
}

unint64_t lazy protocol witness table accessor for type _Int128.Words and conformance _Int128.Words()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128.Words, &type metadata for _Int128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128.Words, &type metadata for _Int128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128.Words, &type metadata for _Int128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for _Int128.Words, &type metadata for _Int128.Words);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _Int128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_Int128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_Int128.Words>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Int128.Words and conformance _Int128.Words, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _Int128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_Int128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_Int128.Words>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Int128.Words and conformance _Int128.Words, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x24BD00BD4](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _Int128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<_Int128.Words> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<_Int128.Words>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _Int128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<_Int128.Words> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<_Int128.Words>, MEMORY[0x24BEE2C18]);
}

uint64_t lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24BD00BD4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

int8x16_t sub_249BC4740@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  int8x16_t result;

  result = vextq_s8(*a1, *a1, 8uLL);
  *a2 = result;
  return result;
}

int8x16_t sub_249BC4750(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result;

  result = vextq_s8(*a1, *a1, 8uLL);
  *a2 = result;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for _UInt128()
{
  return &type metadata for _UInt128;
}

ValueMetadata *type metadata accessor for _UInt128.Words()
{
  return &type metadata for _UInt128.Words;
}

ValueMetadata *type metadata accessor for _Int128()
{
  return &type metadata for _Int128;
}

uint64_t getEnumTagSinglePayload for _Int128.Words(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _Int128.Words(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _Int128.Words()
{
  return &type metadata for _Int128.Words;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  int64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result || v6 < 0 || (v7 = a5 >> 1, v6 >= result))
  {
    v7 = a4 + result;
    if (__OFADD__(a4, result))
      goto LABEL_18;
  }
  if (v7 < a4)
    goto LABEL_14;
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0)
      return a2;
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  int64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      v7 = a5 >> 1;
      if (v6 < result)
      {
LABEL_8:
        if (v7 >= a4)
        {
          if (v5 >= a4)
            return a2;
          goto LABEL_15;
        }
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
  }
  v7 = a4 + result;
  if (!__OFADD__(a4, result))
  {
    if (v5 >= v7)
      goto LABEL_8;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t PINEPrepareState.outputShare.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareState.wraparoundJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareState.verificationJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareState.aggregatorID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t static PINEPrepareState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 24);
  if ((static OutputShare.== infix(_:_:)() & 1) != 0 && specialized static Array<A>.== infix(_:_:)(v2, v5))
    return specialized static Array<A>.== infix(_:_:)(v3, v6) & (v4 == v7);
  else
    return 0;
}

_QWORD *PINEPrepareState.init(outputShare:wraparoundJointRandSeed:verificationJointRandSeed:aggregatorID:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = *result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PINEPrepareState<A, B>(uint64_t a1, uint64_t a2)
{
  return static PINEPrepareState.== infix(_:_:)(a1, a2);
}

uint64_t PINEPrepareState.DecodableParameter.aggregatorID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PINEPrepareState.DecodableParameter.jointRandBlindLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PINEPrepareState.DecodableParameter.outputShareCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PINEPrepareState.DecodableParameter.encodedLength.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 64))(*(_QWORD *)(a1 + 16));
  v5 = v3 * result;
  if ((unsigned __int128)(v3 * (__int128)result) >> 64 != (v3 * result) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  result = v5 + v2;
  if (__OFADD__(v5, v2))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t PINEPrepareState.DecodableParameter.init(aggregatorID:outputShareCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    *a5 = a1;
    a5[1] = 2 * result;
    a5[2] = a2;
  }
  return result;
}

uint64_t PINEPrepareState.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  if (*(_BYTE *)(v8 + 24) != 1)
  {
    dispatch thunk of Collection.count.getter();
    type metadata accessor for PINEPrepareState.DecodableParameter();
  }
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v9 = 0;
  v9[1] = 0;
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a5);
}

void type metadata accessor for PINEPrepareState.DecodableParameter()
{
  JUMPOUT(0x24BD00B80);
}

void type metadata accessor for PINEPrepareState()
{
  JUMPOUT(0x24BD00B80);
}

unint64_t lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<UInt8>);
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>);
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPrepareState<A, B>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  __int128 v8;
  uint64_t v9;
  char v10;

  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_BYTE *)a2 + 24);
  v8 = *a2;
  v9 = v5;
  v10 = v6;
  return PINEPrepareState.init<A>(from:parameter:)(a1, (uint64_t)&v8, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a3);
}

uint64_t PINEPrepareState.encodedLength.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = type metadata accessor for OutputShare(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4);
  result = OutputShare.encodedLength.getter(v7);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = __OFADD__(result, v9);
  v11 = result + v9;
  if (v10)
  {
    __break(1u);
    goto LABEL_5;
  }
  v12 = *(_QWORD *)(v6 + 16);
  result = v11 + v12;
  if (__OFADD__(v11, v12))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t PINEPrepareState.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for OutputShare(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a4);
  OutputShare.encode<A>(into:)(a1, v7, a3, a4);
  Seed.encode<A>(into:)();
  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPrepareState<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINEPrepareState.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, (uint64_t (*)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, (uint64_t (*)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt>);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 25;
  v6[2] = 2;
  v6[3] = 2 * (v8 >> 3);
  result = a3(v10, v6 + 4, 2, a1, a2);
  if (result == 2)
    return (uint64_t)v6;
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int64_t v5;
  _QWORD *v8;
  size_t v9;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_9:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
        goto LABEL_5;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * v9 - 64;
      if (v4 != a3)
      {
LABEL_5:
        memcpy(v8 + 4, (const void *)(a2 + a3), v5);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        memcpy(v8 + 4, (const void *)(a2 + 8 * a3), 8 * v5);
        return;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v10 = v9 - 32;
      if (v9 < 32)
        v10 = v9 - 25;
      v8[2] = v5;
      v8[3] = 2 * (v10 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t type metadata instantiation function for PINEPrepareState()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for PINEPrepareState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for PINEPrepareState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PINEPrepareState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PINEPrepareState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PINEPrepareState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEPrepareState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEPrepareState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PINEPrepareState.DecodableParameter(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PINEPrepareState.DecodableParameter(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

int64_t specialized _copyCollectionToContiguousArray<A>(_:)(int64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (a3)
    v4 = a4 - a3;
  else
    v4 = 0;
  if (result < 0 || (v5 = result, v4 < result))
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a2 < 0 || v4 < a2)
    goto LABEL_24;
  v7 = a2 - result;
  if (a2 == result)
    return MEMORY[0x24BEE4AF8];
  if (v7 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v8 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v8);
    v8[2] = v7;
    v8[3] = 2 * result - 64;
  }
  v14[0] = v5;
  v14[1] = a2;
  v15 = a3;
  v16 = a4;
  MEMORY[0x24BDAC7A8](result, a2);
  if (a3)
    v11 = a3;
  else
    v11 = 0;
  result = (int64_t)specialized closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:)(v11, v14, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, _QWORD *))partial apply for specialized closure #1 in Slice._copyContents(initializing:), &v17);
  v12 = v14[0] + v18;
  if (__OFADD__(v14[0], v18))
    goto LABEL_25;
  v13 = v16 - v15;
  if (!v15)
    v13 = 0;
  if (v12 < 0 || v13 < v12)
    goto LABEL_26;
  if (v18 == v7)
    return (int64_t)v8;
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a4 - a3;
  if (!a3)
    v4 = 0;
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

char *specialized closure #1 in Slice._copyContents(initializing:)(char *__src, int64_t a2, void *__dst, int64_t a4)
{
  char *v4;
  size_t v5;

  v4 = __src;
  if (a2 && a4)
  {
    if (a2 >= a4)
      v5 = a4;
    else
      v5 = a2;
    memcpy(__dst, __src, v5);
    v4 += v5;
  }
  return v4;
}

char *partial apply for specialized closure #1 in Slice._copyContents(initializing:)@<X0>(char *a1@<X0>, int64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *result;
  char *v7;
  char *v8;

  result = specialized closure #1 in Slice._copyContents(initializing:)(a1, a2, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }
  return result;
}

_QWORD *specialized closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *(*a3)(__int128 *__return_ptr, uint64_t, _QWORD *)@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;

  v19 = a4;
  v7 = *a2;
  v8 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, *a2, v10, v9);
  result = (_QWORD *)specialized RandomAccessCollection<>.distance(from:to:)(v7, v8, v10, v9);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a1)
    v14 = a1 + v11;
  else
    v14 = 0;
  result = a3(&v17, v14, v13);
  if (!v4)
  {
    v15 = v18;
    v16 = v19;
    *v19 = v17;
    *((_QWORD *)v16 + 2) = v15;
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:) in conformance Seed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return VDAFDecodable.init<A>(from:)(a1, a4, a2, a5, a3);
}

uint64_t VDAFDecodable.init<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (char *)&v20 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12, v16);
  v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v14, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24))(v18, v14, a3, v20, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a3);
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Seed()
{
  uint64_t v0;
  uint64_t v1;
  char *v3;

  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)v0 + 16), 0, MEMORY[0x24BEE4AF8]);
  v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
  return v3;
}

char *VDAFEncodable.encodedBytes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(char **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v9;

  v4 = (*(uint64_t (**)(void))(a2 + 16))();
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v5 = *(void (**)(char **, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 24);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v7 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BEE12E8]);
  v5(&v9, v6, v7, a1, a2);
  return v9;
}

uint64_t Array<A>.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v68 = a6;
  v70 = a1;
  v71 = a4;
  v72 = *(_QWORD *)(a4 - 8);
  v73 = a2;
  MEMORY[0x24BDAC7A8](a1, a2);
  v65 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v7;
  v69 = v8;
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v60 - v14;
  v16 = swift_getTupleTypeMetadata3();
  v18 = MEMORY[0x24BDAC7A8](v16, v17);
  v20 = (char *)&v60 - v19;
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v18, v22);
  v24 = (char *)&v60 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v73, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 48))(v15, 1, TupleTypeMetadata3) == 1)
  {
    v25 = *(uint64_t **)(v12 + 8);
    ((void (*)(char *, uint64_t))v25)(v15, v11);
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v26 = 0;
    v26[1] = 0;
    swift_willThrow();
    ((void (*)(uint64_t, uint64_t))v25)(v73, v11);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
    return (uint64_t)v25;
  }
  v61 = v12;
  v62 = v21;
  v27 = *(_QWORD *)&v15[*(int *)(TupleTypeMetadata3 + 48)];
  v63 = v11;
  v64 = v27;
  v28 = *(_QWORD *)&v15[*(int *)(TupleTypeMetadata3 + 64)];
  v29 = *(int *)(v16 + 48);
  v30 = *(int *)(v16 + 64);
  v31 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v31(v20, v15, v9);
  *(_QWORD *)&v20[v29] = v64;
  *(_QWORD *)&v20[v30] = v28;
  v32 = *(_QWORD *)&v20[*(int *)(v16 + 48)];
  v33 = *(_QWORD *)&v20[*(int *)(v16 + 64)];
  v64 = v9;
  result = ((uint64_t (*)(char *, char *, uint64_t))v31)(v24, v20, v9);
  if ((v33 | v32) < 0)
  {
    __break(1u);
  }
  else if ((unsigned __int128)(v32 * (__int128)v33) >> 64 == (v32 * v33) >> 63)
  {
    v35 = v68;
    v37 = v70;
    v36 = v71;
    if (v32 * v33 == dispatch thunk of Collection.count.getter())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v65, v37, v36);
      v76 = ArraySlice.init<A>(_:)();
      v77 = v38;
      v78 = v39;
      v79 = v40;
      v74 = 0;
      v75 = v32;
      MEMORY[0x24BDAC7A8](v76, v38);
      v25 = &v60 - 10;
      v41 = v69;
      *(&v60 - 8) = v69;
      *(&v60 - 7) = v36;
      *(&v60 - 6) = v66;
      *(&v60 - 5) = v35;
      *(&v60 - 4) = (uint64_t)&v76;
      *(&v60 - 3) = v33;
      v42 = v41;
      *(&v60 - 2) = (uint64_t)v24;
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v45 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
      v46 = v67;
      v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t)(&v60 - 10), v43, v42, v44, v45, MEMORY[0x24BEE3F20], (uint64_t)&v80);
      if (!v46)
      {
        v74 = v47;
        v59 = type metadata accessor for Array();
        MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v59);
        v25 = (uint64_t *)Array.init<A>(_:)();
      }
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v73, v63);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v37, v36);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v24, v64);
      swift_unknownObjectRelease();
    }
    else
    {
      v76 = 0;
      v77 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      type metadata accessor for Array();
      v48 = _typeName(_:qualified:)();
      v50 = v49;
      swift_bridgeObjectRelease();
      v76 = v48;
      v77 = v50;
      v51._object = (void *)0x8000000249C302A0;
      v51._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v51);
      v74 = v32;
      v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = 2107936;
      v53._object = (void *)0xE300000000000000;
      String.append(_:)(v53);
      v74 = v33;
      v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55._countAndFlagsBits = 0x203A746F67202CLL;
      v55._object = (void *)0xE700000000000000;
      String.append(_:)(v55);
      v74 = dispatch thunk of Collection.count.getter();
      v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v25 = (uint64_t *)v76;
      v57 = v77;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *v58 = v25;
      v58[1] = (uint64_t *)v57;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v73, v63);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v37, v36);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v24, v64);
    }
    return (uint64_t)v25;
  }
  __break(1u);
  return result;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance UInt32()
{
  int *v0;
  int v1;
  char *v3;

  v1 = *v0;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0, MEMORY[0x24BEE4AF8]);
  specialized VDAFCodableFixedWidthInteger.encode<A>(into:)((uint64_t *)&v3, v1);
  return v3;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance UInt64()
{
  unint64_t *v0;
  unint64_t v1;
  char *v3;

  v1 = *v0;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x24BEE4AF8]);
  specialized VDAFCodableFixedWidthInteger.encode<A>(into:)((uint64_t *)&v3, v1);
  return v3;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance _UInt128()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  char *v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 16, 0, MEMORY[0x24BEE4AF8]);
  specialized VDAFCodableFixedWidthInteger.encode<A>(into:)((uint64_t *)&v4, v1, v2);
  return v4;
}

uint64_t Array<A>.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  Swift::Bool IsNativeType;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a6;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](a1, a2);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  if (!MEMORY[0x24BD00424](a2, a3))
    return swift_bridgeObjectRelease();
  v20 = v12;
  v14 = 0;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24);
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v13, a2+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v14, a3);
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v20 != 8)
      break;
    v22 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 16))(v13, &v22, a3);
    swift_unknownObjectRelease();
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_10:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_5:
    v15(a1, a4, v21, a3, a5);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a3);
    ++v14;
    if (v17 == MEMORY[0x24BD00424](a2, a3))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VDAFCodableError()
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)();
}

uint64_t VDAFEncodable.encodedData.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD, unint64_t, uint64_t, uint64_t);
  unint64_t v7;
  _QWORD v9[2];

  v4 = (*(uint64_t (**)(void))(a2 + 16))();
  v9[0] = specialized Data.init(capacity:)(v4);
  v9[1] = v5;
  v6 = *(void (**)(_QWORD *, _QWORD, unint64_t, uint64_t, uint64_t))(a2 + 24);
  v7 = lazy protocol witness table accessor for type Data and conformance Data();
  v6(v9, MEMORY[0x24BDCDDE8], v7, a1, a2);
  return v9[0];
}

uint64_t closure #1 in Array<A>.init<A>(from:parameter:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD *, char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];

  v35 = a5;
  v36 = a3;
  v37 = a4;
  v38 = a6;
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  MEMORY[0x24BDAC7A8](v9, v10);
  v32 = (char *)&v31 - v11;
  v12 = *a1;
  v13 = a1[1];
  v15 = a1[2];
  v14 = a1[3];
  v31 = specialized Collection.prefix(_:)(a2, *a1, v13, v15, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  *a1 = specialized Collection.dropFirst(_:)(a2, v12, v13, v15, v14);
  a1[1] = v22;
  a1[2] = v23;
  a1[3] = v24;
  v39[0] = v31;
  v39[1] = v17;
  v39[2] = v19;
  v39[3] = v21;
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v32, v36, v34);
  v26 = *(uint64_t (**)(_QWORD *, char *, uint64_t, uint64_t))(v35 + 24);
  swift_unknownObjectRetain();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  v28 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>((unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, MEMORY[0x24BEE2188]);
  v29 = v39[5];
  result = v26(v39, v25, v27, v28);
  if (v29)
    *a7 = v29;
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t result;

  result = Array<A>.init<A>(from:parameter:)(a1, a2, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a6 - 8), a4);
  if (!v7)
    *a7 = result;
  return result;
}

uint64_t Array<A>.encodedLength.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)v16 - v9;
  v16[1] = a1;
  v11 = type metadata accessor for Array();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v11);
  Collection.first.getter();
  v12 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, a2) == 1)
  {
    v13 = 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    v7 = v12;
    v6 = a2;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v14 = MEMORY[0x24BD00400](a1, a2);
  result = v13 * v14;
  if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63)
    __break(1u);
  return result;
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Array<A>.encodedLength.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return Array<A>.encode<A>(into:)(a1, *v5, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a5 - 8), a3);
}

uint64_t VoidCodable.encodedLength.getter()
{
  return 0;
}

uint64_t VoidCodable.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t static VoidCodable.== infix(_:_:)()
{
  return 1;
}

Swift::Int VoidCodable.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance VoidCodable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VoidCodable.init<A>(from:parameter:)(a1, a2, a3);
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance VoidCodable()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x24BEE4AF8]);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance VoidCodable()
{
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoidCodable()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoidCodable()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Field64()
{
  uint64_t *v0;

  return specialized VDAFEncodable.encodedBytes.getter(*v0);
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Field128()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[2];
  char *v5;

  v1 = *v0;
  v2 = v0[1];
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 16, 0, MEMORY[0x24BEE4AF8]);
  specialized FieldElement.integerValue.getter(v1, v2, v4);
  specialized VDAFCodableFixedWidthInteger.encode<A>(into:)((uint64_t *)&v5, v4[0], v4[1]);
  return v5;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Prio3PrepareMessage()
{
  uint64_t *v0;

  return specialized VDAFEncodable.encodedBytes.getter(*v0);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Seed>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t partial apply for closure #1 in Array<A>.init<A>(from:parameter:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Array<A>.init<A>(from:parameter:)(*(_QWORD **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2, a1);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field64>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Polynomial<Field64>);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Field64]>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Field64]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PINEInputShare<Field64, XofHmacSha256Aes128>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PINEInputShare<Field64, XofHmacSha256Aes128>);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BDCDE50], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for VDAFCodableError(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  result = lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type VoidCodable and conformance VoidCodable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable;
  if (!lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VoidCodable, &type metadata for VoidCodable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable;
  if (!lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for VoidCodable, &type metadata for VoidCodable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for VDAFCodableError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for VDAFCodableError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for VDAFCodableError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for VDAFCodableError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VDAFCodableError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VDAFCodableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for VDAFCodableError(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for VDAFCodableError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for VDAFCodableError()
{
  return &type metadata for VDAFCodableError;
}

uint64_t dispatch thunk of VDAFDecodable.init<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of VDAFDecodable.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of VDAFEncodable.encodedBytes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VDAFEncodable.encodedLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VDAFEncodable.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

ValueMetadata *type metadata accessor for VoidCodable()
{
  return &type metadata for VoidCodable;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  AggregateShare.share.modify(v0);
}

void static WraparoundJointRandomness.partUsage.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static WraparoundJointRandomness.seedUsage.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void static WraparoundJointRandomness.randomnessUsage.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t WraparoundJointRandomness.parts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WraparoundJointRandomness.seed.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (v0[3])
  {
    v1 = v0[3];
  }
  else
  {
    v2 = v0;
    v3 = *v0;
    v4 = v2[2];
    v5 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for WraparoundJointRandomness<A, B>, v3);
    v1 = static JointRandomness.jointRandSeed(parts:)(v4, v3, v5);
    v2[3] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WraparoundJointRandomness.seed.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*WraparoundJointRandomness.seed.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = WraparoundJointRandomness.seed.getter();
  return VerificationJointRandomness.seed.modify;
}

uint64_t WraparoundJointRandomness.xof.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 32))
  {
    v1 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v1 = closure #1 in WraparoundJointRandomness.xof.getter(v0);
    *(_QWORD *)(v0 + 32) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t WraparoundJointRandomness.xof.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in WraparoundJointRandomness.xof.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  char v9;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = WraparoundJointRandomness.seed.getter();
  v9 = 7;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 240))(&v9, v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v4, v5, MEMORY[0x24BEE4AF8], AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t (*WraparoundJointRandomness.xof.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = WraparoundJointRandomness.xof.getter();
  return VerificationJointRandomness.xof.modify;
}

uint64_t WraparoundJointRandomness.bitsLeft.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t WraparoundJointRandomness.bitsLeft.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*WraparoundJointRandomness.bitsLeft.modify())()
{
  swift_beginAccess();
  return WraparoundJointRandomness.bitsLeft.modify;
}

uint64_t WraparoundJointRandomness.byte.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t WraparoundJointRandomness.byte.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 48) = a1;
  return result;
}

uint64_t (*WraparoundJointRandomness.byte.modify())()
{
  swift_beginAccess();
  return WraparoundJointRandomness.byte.modify;
}

uint64_t WraparoundJointRandomness.__allocating_init(parts:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t WraparoundJointRandomness.init(parts:)(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = 0;
  return v1;
}

uint64_t WraparoundJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v17 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for WraparoundJointRandomness<A, B>, v8);
  v18 = static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a1, a2, a3, a4, a5, a6, a7, a8, v8, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  result = swift_allocObject();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 16) = v18;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t WraparoundJointRandomness.next()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = *v0;
  swift_beginAccess();
  v3 = v0[5];
  if (!v3)
  {
    WraparoundJointRandomness.xof.getter();
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    v6 = swift_checkMetadataState();
    LOBYTE(AssociatedConformanceWitness) = v5(v6, AssociatedConformanceWitness);
    swift_unknownObjectRelease();
    swift_beginAccess();
    *((_BYTE *)v0 + 48) = AssociatedConformanceWitness;
    v3 = 8;
    v0[5] = 8;
  }
  v7 = v3 - 2;
  if (__OFSUB__(v3, 2))
  {
    __break(1u);
LABEL_16:
    if (v7 <= 0xFFFFFFFFFFFFFFF8)
      goto LABEL_5;
    v10 = (_DWORD)v3 << -(char)v7;
    goto LABEL_10;
  }
  v1[5] = v7;
  swift_beginAccess();
  if (v7 - 9 < 0xFFFFFFFFFFFFFFEFLL)
  {
LABEL_5:
    v8 = *(_QWORD *)(v2 + 88);
    getContiguousArrayStorageType<A>(for:)(v8, v8);
    swift_allocObject();
    v9 = static Array._adoptStorage(_:count:)();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 104) + 80))(v8, *(_QWORD *)(v2 + 104));
    goto LABEL_12;
  }
  LODWORD(v3) = *((unsigned __int8 *)v1 + 48);
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (v7 >= 8)
    goto LABEL_5;
  v10 = v3 >> v7;
LABEL_10:
  v11 = v10 & 3;
  if ((v11 - 1) >= 2)
  {
    if (!v11)
      goto LABEL_5;
    v14 = *(_QWORD *)(v2 + 88);
    getContiguousArrayStorageType<A>(for:)(v14, v14);
    swift_allocObject();
    v9 = static Array._adoptStorage(_:count:)();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 104) + 72))(v14, *(_QWORD *)(v2 + 104));
  }
  else
  {
    getContiguousArrayStorageType<A>(for:)(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 88));
    swift_allocObject();
    v9 = static Array._adoptStorage(_:count:)();
    dispatch thunk of IteratorProtocol.next()();
  }
LABEL_12:
  v12 = type metadata accessor for Array();
  AggregateShare.share.modify(v12);
  return v9;
}

uint64_t WraparoundJointRandomness.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t WraparoundJointRandomness.__deallocating_deinit()
{
  WraparoundJointRandomness.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for static JointRandomness.partUsage.getter in conformance WraparoundJointRandomness<A, B>(_BYTE *a1@<X8>)
{
  static WraparoundJointRandomness.partUsage.getter(a1);
}

void protocol witness for static JointRandomness.seedUsage.getter in conformance WraparoundJointRandomness<A, B>(_BYTE *a1@<X8>)
{
  static WraparoundJointRandomness.seedUsage.getter(a1);
}

void protocol witness for static JointRandomness.randomnessUsage.getter in conformance WraparoundJointRandomness<A, B>(_BYTE *a1@<X8>)
{
  static WraparoundJointRandomness.randomnessUsage.getter(a1);
}

uint64_t protocol witness for JointRandomness.seed.getter in conformance WraparoundJointRandomness<A, B>()
{
  return WraparoundJointRandomness.seed.getter();
}

uint64_t protocol witness for JointRandomness.xof.getter in conformance WraparoundJointRandomness<A, B>()
{
  return WraparoundJointRandomness.xof.getter();
}

uint64_t protocol witness for JointRandomness.next() in conformance WraparoundJointRandomness<A, B>()
{
  return WraparoundJointRandomness.next()();
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  else
    return type metadata accessor for _ContiguousArrayStorage();
}

uint64_t sub_249BC812C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WraparoundJointRandomness.seed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_249BC8154(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4BD0], WraparoundJointRandomness.seed.setter);
}

uint64_t sub_249BC8168()
{
  return 32;
}

__n128 sub_249BC8174(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_249BC8180@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WraparoundJointRandomness.xof.getter();
  *a1 = result;
  return result;
}

uint64_t sub_249BC81A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4F80], WraparoundJointRandomness.xof.setter);
}

uint64_t sub_249BC81BC()
{
  return 32;
}

__n128 sub_249BC81C8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata completion function for WraparoundJointRandomness()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for WraparoundJointRandomness()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t method lookup function for WraparoundJointRandomness()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WraparoundJointRandomness.__allocating_init(parts:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

void *one-time initialization function for cache()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static BitReversal.cache = result;
  return result;
}

uint64_t one-time initialization function for lock()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for Lock();
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(v0 + 16) = result;
  static BitReversal.lock = (_UNKNOWN *)v0;
  return result;
}

uint64_t *closure #2 in static BitReversal.indicesFor(_:)(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v3 = *result;
  *(_QWORD *)(*result + 8) = a2;
  if (a3 >= 0)
    v4 = a3;
  else
    v4 = a3 + 1;
  if (a3 < 2)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(v3 + 24);
    v7 = v5 - 1;
    for (i = 0xC000000000000001; i; ++i)
    {
      v9 = *(uint64_t *)(v3 + 8 * i) >> 1;
      *(v6 - 1) = v9;
      v10 = __OFADD__(v9, a2);
      v11 = v9 + a2;
      if (v10)
        goto LABEL_12;
      *v6 = v11;
      v6 += 2;
      if (!--v7)
        return result;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t BitReversal.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t BitReversal.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t BitReversal.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t BitReversal.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        if (v8 >= v13)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v3 = v33;
            goto LABEL_38;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v33;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v23 = v9[v8];
        if (!v23)
        {
          v24 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_31;
          v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              v8 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v8 >= v13)
                goto LABEL_31;
              v23 = v9[v8];
              ++v24;
              if (v23)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v25 = 8 * v21;
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v25);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v25);
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v17 == v29;
          if (v17 == v29)
            v17 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(_QWORD *)(v16[6] + v18) = a2;
    *(_QWORD *)(v16[7] + v18) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    if (!v19)
      break;
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[4];
  v4 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void specialized static BitReversal.indicesFor(_:)(uint64_t a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  char isUniquelyReferenced_nonNull_native;
  void *v11;
  uint64_t v12[3];

  if (a1 != 1)
  {
    if (one-time initialization token for lock != -1)
      swift_once();
    v2 = (os_unfair_lock_s *)(*((_QWORD *)static BitReversal.lock + 2) + 16);
    os_unfair_lock_lock(v2);
    if (one-time initialization token for cache != -1)
      swift_once();
    swift_beginAccess();
    v3 = static BitReversal.cache;
    if (*((_QWORD *)static BitReversal.cache + 2)
      && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
    {
      v6 = *(_QWORD *)(v3[7] + 8 * v4);
      swift_bridgeObjectRetain();
    }
    else
    {
      v6 = 0;
    }
    swift_endAccess();
    os_unfair_lock_unlock(v2);
    if (!v6)
    {
      if (a1 < 0)
      {
        __break(1u);
      }
      else
      {
        if (a1)
        {
          v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v7 + 16) = a1;
          bzero((void *)(v7 + 32), 8 * a1);
          v8 = a1;
        }
        else
        {
          v7 = MEMORY[0x24BEE4AF8];
          v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        }
        v12[0] = v7 + 32;
        v12[1] = v8;
        closure #2 in static BitReversal.indicesFor(_:)(v12, a1 >> 1, a1);
        if ((unint64_t)a1 <= 0x400)
        {
          v9 = (os_unfair_lock_s *)(*((_QWORD *)static BitReversal.lock + 2) + 16);
          os_unfair_lock_lock(v9);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v11 = static BitReversal.cache;
          static BitReversal.cache = (_UNKNOWN *)0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a1, isUniquelyReferenced_nonNull_native);
          static BitReversal.cache = v11;
          swift_bridgeObjectRelease();
          swift_endAccess();
          os_unfair_lock_unlock(v9);
        }
      }
    }
  }
}

uint64_t type metadata accessor for BitReversal()
{
  return objc_opt_self();
}

uint64_t method lookup function for BitReversal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BitReversal.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t static Share.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) == 0)
      return static Array<A>.== infix(_:_:)();
    return 0;
  }
  if ((a4 & 1) == 0)
    return 0;
  return specialized static Array<A>.== infix(_:_:)(a1, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Share<A>(uint64_t a1, uint64_t a2)
{
  return static Share.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t ShareDecodableParameter.encodedLength.getter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  if ((a2 & 1) != 0)
    return a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  v6 = (unsigned __int128)(result * (__int128)a1) >> 64;
  a1 *= result;
  if (v6 == a1 >> 63)
    return a1;
  __break(1u);
  return result;
}

uint64_t static ShareDecodableParameter.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4)
{
  return (((a4 & 1) == 0) ^ a2) & (a1 == a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShareDecodableParameter<A>(uint64_t a1, uint64_t a2)
{
  return static ShareDecodableParameter.== infix(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t Share.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  _QWORD *v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v11 = a1;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v17)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v25 = 0;
    v25[1] = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, a5);
    return v11;
  }
  v49 = v14;
  v50 = v12;
  v18 = v13;
  v51 = v11;
  v52 = a5;
  v19 = dispatch thunk of Collection.count.getter();
  v20 = v19;
  if ((a3 & 1) != 0)
  {
    if (v19 == v18)
    {
      v27 = v51;
      v26 = v52;
      v11 = specialized Seed.init<A>(from:parameter:)(v51);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v27, v26);
    }
    else
    {
      v53 = 0;
      v54 = 0xE000000000000000;
      v28 = v18;
      _StringGuts.grow(_:)(51);
      v29._object = (void *)0x8000000249C302F0;
      v29._countAndFlagsBits = 0xD000000000000022;
      String.append(_:)(v29);
      v31 = v51;
      v30 = v52;
      v55 = dispatch thunk of Collection.count.getter();
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 0x65707865203D2120;
      v33._object = (void *)0xED00003D64657463;
      String.append(_:)(v33);
      v55 = v28;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35 = v53;
      v11 = v54;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *v36 = v35;
      v36[1] = v11;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v31, v30);
    }
    return v11;
  }
  v48 = *(uint64_t (**)(uint64_t))(v49 + 64);
  result = v48(a4);
  if ((unsigned __int128)(v18 * (__int128)result) >> 64 == (v18 * result) >> 63)
  {
    if (v20 == v18 * result)
    {
      v22 = v50;
      v23 = v51;
      v24 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v16, v51, v52);
      v11 = Array<A>.init<A>(from:)((uint64_t)v16, a4, v24, v49, a7);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    }
    else
    {
      v53 = 0;
      v54 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v37._object = (void *)0x8000000249C30320;
      v37._countAndFlagsBits = 0xD000000000000022;
      String.append(_:)(v37);
      v39 = v51;
      v38 = v52;
      v55 = dispatch thunk of Collection.count.getter();
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 2107936;
      v41._object = (void *)0xE300000000000000;
      String.append(_:)(v41);
      v55 = ((uint64_t (*)(uint64_t, uint64_t))v48)(a4, v49);
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = 0x65707865203D2120;
      v43._object = (void *)0xED00003D64657463;
      String.append(_:)(v43);
      v55 = v18;
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45 = v53;
      v11 = v54;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *v46 = v45;
      v46[1] = v11;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v39, v38);
    }
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Share<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v9;

  result = Share.init<A>(from:parameter:)(a1, *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
  if (!v6)
  {
    *(_QWORD *)a6 = result;
    *(_BYTE *)(a6 + 8) = v9 & 1;
  }
  return result;
}

uint64_t Share.encodedLength.getter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 1) != 0)
    return *(_QWORD *)(a1 + 16);
  else
    return Array<A>.encodedLength.getter(a1, a3, *(_QWORD *)(a4 + 40));
}

uint64_t Share.encode<A>(into:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a3 & 1) != 0)
    return Seed.encode<A>(into:)();
  else
    return Array<A>.encode<A>(into:)(a1, a2, a4, a5, *(_QWORD *)(a6 + 40), a7);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance Share<A>(uint64_t a1)
{
  uint64_t v1;

  return Share.encodedLength.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Share<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return Share.encode<A>(into:)(a1, *(_QWORD *)v4, *(_BYTE *)(v4 + 8), *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
}

uint64_t type metadata instantiation function for Share()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for Share(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Share()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for Share(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for Share(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for Share(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Share);
}

uint64_t getEnumTagSinglePayload for Share(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Share(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ShareDecodableParameter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for ShareDecodableParameter(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for ShareDecodableParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShareDecodableParameter);
}

uint64_t static OutputShare.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

uint64_t OutputShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v17);
  v18 = Array<A>.init<A>(from:)((uint64_t)v16, a3, a4, a5, a6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
  if (!v7)
    *a7 = v18;
  return result;
}

uint64_t OutputShare.encodedLength.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BD00400](v3, v4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(v4);
  result = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    __break(1u);
  return result;
}

uint64_t OutputShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return Array<A>.encode<A>(into:)(a1, *v4, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40), a4);
}

uint64_t OutputShare.share.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OutputShare.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OutputShare<A>()
{
  return static OutputShare.== infix(_:_:)();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance OutputShare<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return OutputShare.init<A>(from:parameter:)(a1, a2, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4, a6);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance OutputShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OutputShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for OutputShare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OutputShare);
}

uint64_t PINEInputShare.measurementShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEInputShare.proofShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEInputShare.wraparoundJointRandBlind.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEInputShare.verificationJointRandBlind.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static PINEInputShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  return (static Share.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8)) & 1) != 0
      && (static Share.== infix(_:_:)(v2, v3, v6, v7) & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v5, v9)
      && specialized static Array<A>.== infix(_:_:)(v4, v8);
}

uint64_t PINEInputShare.init(measurementShare:proofShare:wraparoundJointRandBlind:verificationJointRandBlind:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_BYTE *)(a7 + 8) = a2 & 1;
  *(_QWORD *)(a7 + 16) = a3;
  *(_BYTE *)(a7 + 24) = a4 & 1;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PINEInputShare<A, B>(uint64_t a1, uint64_t a2)
{
  return static PINEInputShare.== infix(_:_:)(a1, a2);
}

uint64_t PINEInputShare.DecodableParameter.measurement.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PINEInputShare.DecodableParameter.proof.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PINEInputShare.DecodableParameter.encodedLength.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = a1[2];
  v8 = a1[4];
  v9 = ShareDecodableParameter.encodedLength.getter(v3, v4, v7, v8);
  result = ShareDecodableParameter.encodedLength.getter(v5, v6, v7, v8);
  v11 = v9 + result;
  if (__OFADD__(v9, result))
  {
    __break(1u);
    goto LABEL_6;
  }
  result = (*(uint64_t (**)(void))(a1[5] + 8))();
  if (result + 0x4000000000000000 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v12 = __OFADD__(v11, 2 * result);
  result = v11 + 2 * result;
  if (v12)
LABEL_7:
    __break(1u);
  return result;
}

void PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)()
{
  type metadata accessor for PINE();
}

uint64_t sub_249BC98B8(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;

  MEMORY[0x24BD00BD4](&protocol conformance descriptor for PINE<A, B, C>, a1);
  v7 = VDAFProtocol.isLeaderAggregatorID(_:)(v2);
  if (v8)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  v10 = v3;
  v11 = v4;
  v12 = v1;
  *(_DWORD *)(v5 - 68) = v7;
  if (v7)
    PINE.measurementShareLength.getter();
  v13 = v11;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  v15 = v10;
  v16 = v14(v10, v11);
  *(_BYTE *)(v5 - 72) = 1;
  v17 = v14(v15, v13);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v12, a1);
  v18 = *(_DWORD *)(v5 - 68);
  v19 = *(_BYTE *)(v5 - 72);
  *(_QWORD *)v20 = v16;
  *(_BYTE *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 16) = v17;
  *(_BYTE *)(v20 + 24) = (v18 & 1) == 0;
  return result;
}

uint64_t PINEInputShare.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  if (*(unsigned __int8 *)(v8 + 8) != 255)
  {
    dispatch thunk of Collection.count.getter();
    type metadata accessor for PINEInputShare.DecodableParameter();
  }
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v9 = 0;
  v9[1] = 0;
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a5);
}

void type metadata accessor for PINEInputShare.DecodableParameter()
{
  JUMPOUT(0x24BD00B80);
}

void type metadata accessor for PINEInputShare()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEInputShare<A, B>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  __int128 v8;
  uint64_t v9;
  char v10;

  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_BYTE *)a2 + 24);
  v8 = *a2;
  v9 = v5;
  v10 = v6;
  return PINEInputShare.init<A>(from:parameter:)(a1, (uint64_t)&v8, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a3);
}

uint64_t PINEInputShare.encodedLength.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = Share.encodedLength.getter(v2, v3, v8, v9);
  result = Share.encodedLength.getter(v4, v5, v8, v9);
  v12 = v10 + result;
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v7 + 16);
  v14 = __OFADD__(v12, v13);
  v15 = v12 + v13;
  if (v14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v6 + 16);
  result = v15 + v16;
  if (__OFADD__(v15, v16))
LABEL_7:
    __break(1u);
  return result;
}

uint64_t PINEInputShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_BYTE *)(v4 + 24);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 32);
  Share.encode<A>(into:)(a1, *(_QWORD *)v4, *(_BYTE *)(v4 + 8), v10, a3, v11, a4);
  Share.encode<A>(into:)(a1, v8, v9, v10, a3, v11, a4);
  Seed.encode<A>(into:)();
  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEInputShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINEInputShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t destroy for PINEInputShare()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PINEInputShare(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PINEInputShare(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PINEInputShare(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEInputShare(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEInputShare(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata instantiation function for PINEInputShare.DecodableParameter()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for PINEInputShare.DecodableParameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEInputShare.DecodableParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t Usage.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

VDAF::Usage_optional __swiftcall Usage.init(rawValue:)(Swift::UInt16 rawValue)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = (unsigned __int16)(rawValue - 1);
  if (v2 >= 0xA)
    LOBYTE(v2) = 10;
  *v1 = v2;
  return (VDAF::Usage_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Usage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Usage()
{
  unsigned __int8 *v0;
  __int16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Usage()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Usage()
{
  unsigned __int8 *v0;
  __int16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

VDAF::Usage_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Usage(Swift::UInt16 *a1)
{
  return Usage.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Usage(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t static VDAFProtocol.measurementShareXOF(seed:aggregatorID:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  char v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = 0;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 240))(&v14, a3, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_249C29130;
  *(_BYTE *)(v10 + 32) = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v9, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static VDAFProtocol.proofShareXOF(seed:aggregatorID:numOfProofs:)(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  char v14;

  v14 = 1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 240))(&v14, a4, a5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_249C2A640;
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (a3 <= 0xFF)
  {
    v10 = result;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_BYTE *)(v10 + 32) = a3;
    *(_BYTE *)(v10 + 33) = a2;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v13 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v8, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t static VDAFProtocol.proveRandXOF(seed:numOfProofs:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  char v12;

  v12 = 3;
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 240))(&v12, a3, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_249C29130;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (a2 <= 0xFF)
  {
    v8 = result;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_BYTE *)(v8 + 32) = a2;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v11 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v6, v8, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t static VDAFProtocol.queryRandXOF(seed:numOfProofs:nonce:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  char v14;

  v14 = 4;
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 240))(&v14, a4, a5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_249C29130;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (a2 <= 0xFF)
  {
    v9 = result;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(_BYTE *)(v9 + 32) = a2;
    v11 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v11);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v13 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v7, v9, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v9 = a1;
  if ((a2 & 1) != 0)
  {
    v18 = static VDAFProtocol.measurementShareXOF(seed:aggregatorID:)(a1, a3, a5, a7);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v19 = static FieldElement.randomVector<A>(count:using:)(a4, v18, a6);
    swift_unknownObjectRelease();
    return v19;
  }
  else
  {
    v10 = swift_bridgeObjectRetain();
    if (MEMORY[0x24BD00400](v10, a6) != a4)
    {
      _StringGuts.grow(_:)(57);
      v11._object = (void *)0x8000000249C30350;
      v11._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v11);
      v12._countAndFlagsBits = 0xD00000000000002DLL;
      v12._object = (void *)0x8000000249C30370;
      String.append(_:)(v12);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 0x3D746F67202CLL;
      v14._object = (void *)0xE600000000000000;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v9 = 0;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0xE000000000000000;
      *(_BYTE *)(v16 + 16) = 1;
      swift_willThrow();
    }
    return v9;
  }
}

uint64_t static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:numOfProofs:count:)(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;

  if ((a2 & 1) != 0)
  {
    v13 = static VDAFProtocol.proofShareXOF(seed:aggregatorID:numOfProofs:)(a1, a3, a4, a6, a8);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    static FieldElement.randomVector<A>(count:using:)(a5, v13, a7);
    v14 = type metadata accessor for Array();
    MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v14);
    v12 = ArraySlice.init<A>(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v10 = swift_bridgeObjectRetain();
    if (MEMORY[0x24BD00400](v10, a7) == a5)
    {
      v11 = type metadata accessor for Array();
      MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v11);
      return ArraySlice.init<A>(_:)();
    }
    else
    {
      _StringGuts.grow(_:)(51);
      v15._object = (void *)0x8000000249C30350;
      v15._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v15);
      v16._countAndFlagsBits = 0xD000000000000027;
      v16._object = (void *)0x8000000249C303A0;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 0x3D746F67202CLL;
      v18._object = (void *)0xE600000000000000;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v12 = 0;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0xE000000000000000;
      *(_BYTE *)(v20 + 16) = 1;
      swift_willThrow();
    }
  }
  return v12;
}

uint64_t static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[12];

  v15 = swift_bridgeObjectRetain();
  v16 = static VDAFProtocol.queryRandXOF(seed:numOfProofs:nonce:)(v15, a2, a3, a5, a7);
  result = swift_bridgeObjectRelease();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v24[10] = 0;
    v24[11] = a2;
    MEMORY[0x24BDAC7A8](result, v18);
    v24[2] = a5;
    v24[3] = a6;
    v24[4] = a7;
    v24[5] = a8;
    v24[6] = a4;
    v24[7] = v16;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    v20 = type metadata accessor for Array();
    v21 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:), (uint64_t)v24, v19, v20, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
    swift_unknownObjectRelease();
    return v23;
  }
  return result;
}

uint64_t closure #1 in static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = static FieldElement.randomVector<A>(count:using:)(a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t partial apply for closure #1 in static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(v1[6], v1[7], v1[3], a1);
}

uint64_t static VDAFProtocol.splitShare<A, B>(_:into:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v38 = a3;
  v39 = a4;
  result = MEMORY[0x24BDAC7A8](a1, a2);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v18 < 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v36 = v17;
  v37 = v15;
  if (v14 != 1)
  {
    v19 = 0;
    v20 = a10;
    v35 = v14 - 1;
    v41 = a7;
    v42 = a10;
    v44 = a1;
    while (v19 != v18)
    {
      v22 = v38(v19);
      v23 = swift_bridgeObjectRetain();
      v24 = MEMORY[0x24BD00400](v23, a6);
      result = swift_bridgeObjectRelease();
      if (v24 < 0)
        goto LABEL_14;
      v25 = v24;
      v40 = v19;
      v26 = v20;
      v27 = v22;
      v28 = a9;
      v29 = (uint64_t)v36;
      v30 = v37;
      if (v25)
      {
        v31 = 0;
        v43 = v25;
        do
        {
          v32 = v27;
          static FieldElement.randomElement<A>(using:)(v27, a6, a7, v28, v26, v29);
          v33 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          Array._checkSubscript_mutating(_:)(v31);
          _swift_isClassOrObjCExistentialType();
          dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
          v34 = v33;
          a7 = v41;
          AggregateShare.share.modify(v34);
          v26 = v42;
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, a6);
          v27 = v32;
          ++v31;
        }
        while (v43 != v31);
      }
      v19 = v40 + 1;
      result = swift_unknownObjectRelease();
      v18 = v35;
      v20 = v26;
      a9 = v28;
      if (v19 == v35)
        return result;
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Usage and conformance Usage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Usage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Usage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_249BCB6D8 + 4 * byte_249C2A655[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_249BCB70C + 4 * byte_249C2A650[v4]))();
}

uint64_t sub_249BCB70C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249BCB714(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249BCB71CLL);
  return result;
}

uint64_t sub_249BCB728(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249BCB730);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_249BCB734(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249BCB73C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Usage()
{
  return &type metadata for Usage;
}

uint64_t specialized static VDAFProtocol.splitShare<A, B>(_:into:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  char *v74;
  Swift::String v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char **v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  unsigned __int8 v97;
  uint64_t v98;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  v91 = *(_QWORD *)(v7 - 8);
  v92 = v7;
  MEMORY[0x24BDAC7A8](v7, v8);
  v90 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  v88 = *(_QWORD *)(v10 - 8);
  v89 = v10;
  result = MEMORY[0x24BDAC7A8](v10, v11);
  v87 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(a2, 1))
    goto LABEL_62;
  if (a2 - 1 < 0)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
  }
  else
  {
    if (a2 == 1)
      return result;
    v85 = a2 - 1;
    v3 = *(char **)a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_5;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
LABEL_5:
  v14 = 0;
  *(_QWORD *)a1 = v3;
  v15 = a3 + 32;
  v16 = *(_QWORD *)(a3 + 16);
  v84 = xmmword_249C29130;
  v83 = MEMORY[0x24BEE4AE0] + 8;
  v93 = 0x8000000249C303D0;
  v17 = v85;
  v76 = a3;
  v81 = (char **)a1;
  v80 = a3 + 32;
  v79 = v16;
  do
  {
    if (v14 == v17)
      goto LABEL_64;
    if (v14 == 255)
      goto LABEL_65;
    if (v14 == v16)
      goto LABEL_66;
    v18 = v14 + 1;
    v19 = *(_QWORD *)(v15 + 8 * v14);
    swift_bridgeObjectRetain();
    v20 = specialized static VDAFProtocol.domainSeparationTag(usage:)(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v84;
    v82 = v18;
    *(_BYTE *)(inited + 32) = v18;
    if (*(_QWORD *)(v19 + 16) != 32)
      goto LABEL_67;
    v22 = inited;
    type metadata accessor for XofHmacSha256Aes128(0);
    a1 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v19, v20, v22);
    v95 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    if (*(_QWORD *)(v23 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
      goto LABEL_68;
    v24 = v23;
    v25 = v23 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
    swift_beginAccess();
    v27 = v90;
    v26 = v91;
    v28 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v25, v92);
    v86 = v3;
    v29 = v87;
    HMAC.finalize()();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
    v30 = v89;
    a1 = (uint64_t)v29;
    a3 = 0;
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
    v31 = v29;
    v3 = v86;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v31, v30);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = (char *)*((_QWORD *)v3 + 2);
    if (!v32)
      goto LABEL_55;
    v33 = 0;
    *v81 = v3;
    v34 = v24;
    v35 = v95;
    v94 = v24;
    v77 = v32;
    while (2)
    {
      v86 = v33;
      v78 = v33 + 1;
      a3 = 0;
      while (1)
      {
        v98 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
        v3 = 0;
        v36 = v98;
        do
        {
          a1 = *(_QWORD *)(v34 + v35);
          if (!a1)
            goto LABEL_59;
          v37 = *(char **)(a1 + 16);
          if (*((_QWORD *)v37 + 2))
          {
            swift_retain();
          }
          else
          {
            v38 = a1 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
            v39 = a1 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
            swift_beginAccess();
            swift_retain();
            v40 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
            v40[2] = 16;
            v40[5] = 0;
            v40[4] = 0;
            v41 = *(_QWORD *)v39;
            v43 = *(unsigned int *)(v39 + 8);
            v42 = *(unsigned int *)(v39 + 12);
            specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(v40 + 4), (uint64_t)(v40 + 6), v38, *(_QWORD *)v39, v43 | (v42 << 32));
            v44 = bswap32(v42);
            *(_DWORD *)(v39 + 12) = bswap32(v44 + 1);
            if (v44 == -1)
            {
              v45 = bswap32(v43);
              *(_DWORD *)(v39 + 8) = bswap32(v45 + 1);
              if (v45 == -1)
                *(_QWORD *)v39 = bswap64(bswap64(v41) + 1);
            }
            swift_endAccess();
            v46 = v40[2];
            if (v46 >= 2)
            {
              v52 = 0;
              v53 = v46 >> 1;
              v54 = v46 + 31;
              do
              {
                if (v52 != v54 - 32)
                {
                  v55 = v40[2];
                  if (v52 >= v55)
                  {
                    __break(1u);
LABEL_58:
                    __break(1u);
LABEL_59:
                    __break(1u);
LABEL_60:
                    __break(1u);
LABEL_61:
                    __break(1u);
LABEL_62:
                    __break(1u);
                    goto LABEL_63;
                  }
                  if (v54 - 32 >= v55)
                    goto LABEL_58;
                  v56 = *((_BYTE *)v40 + v52 + 32);
                  v57 = *((_BYTE *)v40 + v54);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
                  *((_BYTE *)v40 + v52 + 32) = v57;
                  *((_BYTE *)v40 + v54) = v56;
                }
                ++v52;
                --v54;
              }
              while (v53 != v52);
            }
            *(_QWORD *)(a1 + 16) = v40;
            swift_bridgeObjectRelease();
            v37 = *(char **)(a1 + 16);
            v34 = v94;
            v35 = v95;
            if (!*((_QWORD *)v37 + 2))
              goto LABEL_60;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v47 = *((_QWORD *)v37 + 2);
            if (!v47)
              goto LABEL_61;
          }
          else
          {
            v37 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v37);
            v47 = *((_QWORD *)v37 + 2);
            if (!v47)
              goto LABEL_61;
          }
          v48 = v47 - 1;
          v49 = v37[v48 + 32];
          *((_QWORD *)v37 + 2) = v48;
          *(_QWORD *)(a1 + 16) = v37;
          swift_release();
          v98 = v36;
          v51 = *(_QWORD *)(v36 + 16);
          v50 = *(_QWORD *)(v36 + 24);
          if (v51 >= v50 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1);
            v36 = v98;
          }
          ++v3;
          *(_QWORD *)(v36 + 16) = v51 + 1;
          *(_BYTE *)(v36 + v51 + 32) = v49;
        }
        while (v3 != (char *)8);
        if (v51 != 7)
        {
          *(_QWORD *)&v96 = 0;
          *((_QWORD *)&v96 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v96 = 0xD000000000000019;
          *((_QWORD *)&v96 + 1) = v93;
          v98 = 8;
          v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v60);
          swift_bridgeObjectRelease();
          v61._countAndFlagsBits = 0x203A746F67202CLL;
          v61._object = (void *)0xE700000000000000;
          String.append(_:)(v61);
          v98 = v51 + 1;
          v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v62);
          swift_bridgeObjectRelease();
          v63 = v96;
          lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
          v59 = swift_allocError();
          *(_OWORD *)v64 = v63;
          *(_BYTE *)(v64 + 16) = 0;
          goto LABEL_44;
        }
        v59 = 0;
        v58 = swift_retain();
        v65 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(v58);
        swift_release();
        if (v65 < 0xFFFFFFFF00000001)
          break;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v59 = swift_allocError();
        *(_QWORD *)v66 = 0;
        *(_QWORD *)(v66 + 8) = 0;
        *(_BYTE *)(v66 + 16) = 5;
LABEL_44:
        swift_willThrow();
        a3 = 0;
        swift_release();
        v98 = v59;
        MEMORY[0x24BD00B44](v59);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast())
          goto LABEL_74;
        v68 = *((_QWORD *)&v96 + 1);
        v67 = v96;
        v69 = v97;
        if (v97 != 5 || v96 != 0)
          goto LABEL_73;
        MEMORY[0x24BD00B38](v59);
        MEMORY[0x24BD00B38](v98);
      }
      specialized FieldElement.init(_:)(v65, (unint64_t *)&v96);
      swift_release();
      a1 = (uint64_t)v81;
      v3 = *v81;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
      if ((unint64_t)v86 >= *((_QWORD *)v3 + 2))
      {
        __break(1u);
        goto LABEL_71;
      }
      v70 = *(_QWORD *)&v3[8 * (_QWORD)v86 + 32];
      v71 = v70 - v96;
      if (v70 < (unint64_t)v96)
      {
        v72 = 0xFFFFFFFF00000001 - v96;
        if ((unint64_t)v96 <= 0xFFFFFFFF00000001)
        {
          v73 = __CFADD__(v70, v72);
          v71 = v70 + v72;
          if (!v73)
            goto LABEL_54;
LABEL_72:
          __break(1u);
          v67 = swift_unexpectedError();
          __break(1u);
LABEL_73:
          outlined consume of VDAFError(v67, v68, v69);
LABEL_74:
          MEMORY[0x24BD00B38](v98);
          *(_QWORD *)&v96 = 0;
          *((_QWORD *)&v96 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(20);
          v75._object = (void *)0x8000000249C30420;
          v75._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v75);
          v98 = v59;
          _print_unlocked<A, B>(_:_:)();
          swift_bridgeObjectRelease();
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
LABEL_54:
      v74 = v77;
      *(_QWORD *)&v3[8 * (_QWORD)v86 + 32] = v71;
      *(_QWORD *)a1 = v3;
      v33 = v78;
      if (v78 != v74)
        continue;
      break;
    }
LABEL_55:
    result = swift_release();
    v14 = v82;
    v17 = v85;
    v15 = v80;
    v16 = v79;
  }
  while (v82 != v85);
  return result;
}

uint64_t partial apply for closure #1 in XofHmacSha256Aes128.finalize()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in XofHmacSha256Aes128.finalize()(a1, a2, v2);
}

unint64_t lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError;
  if (!lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for FieldElementError, &type metadata for FieldElementError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError;
  if (!lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for FieldElementError, &type metadata for FieldElementError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError);
  }
  return result;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (char *)v7;
  v19 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v15 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v17 = v11;
      result = (char *)((char *(*)(uint64_t *__return_ptr, uint64_t *))v16)(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (char *)v7;
      }
      v6 = 0;
      v12 = v18;
      v19 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_BYTE *)(v7 + v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v15 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (char *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD *(*v19)(__int128 *__return_ptr, uint64_t *);
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v19 = (_QWORD *(*)(__int128 *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v23 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v23;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v11 = a3;
    while (a4 != v11)
    {
      v20 = v11;
      result = v19(&v21, &v20);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v21;
      v13 = v22;
      v23 = v7;
      v15 = *(_QWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        v17 = v22;
        v18 = v21;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1);
        v13 = v17;
        v12 = v18;
        v7 = v23;
      }
      *(_QWORD *)(v7 + 16) = v15 + 1;
      v16 = v7 + 32 * v15;
      *(_OWORD *)(v16 + 32) = v12;
      *(_OWORD *)(v16 + 48) = v13;
      if (a4 < a3)
        goto LABEL_19;
      if (v10 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AISg14jointRandBlindts5NeverOTg5(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *(*v19)(__int128 *__return_ptr, uint64_t *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v19 = (_QWORD *(*)(__int128 *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v23 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v23;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v18 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v20 = v11;
      result = v19(&v21, &v20);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v21;
      v13 = v22;
      v23 = v7;
      v15 = *(_QWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        v17 = v21;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1);
        v12 = v17;
        v7 = v23;
      }
      *(_QWORD *)(v7 + 16) = v15 + 1;
      v16 = v7 + 24 * v15;
      *(_OWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 48) = v13;
      if (a4 < a3)
        goto LABEL_19;
      if (v18 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64VsAE_pTg5(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (char *)v7;
  v20 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v20;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v15 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v18 = v11;
      result = (char *)((char *(*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))v16)(&v19, &v18, &v17);
      if (v6)
      {
        swift_release();
        return (char *)v7;
      }
      v6 = 0;
      v12 = v19;
      v20 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        v7 = v20;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_QWORD *)(v7 + 8 * v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v15 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (char *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t Array<A>.elementwiseAdd(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.elementwiseAdd(_:)(a1, a2, a3, (void (*)(unint64_t, char *, uint64_t, _QWORD))MEMORY[0x24BEE2F78]);
}

uint64_t static FieldElement.randomVector<A>(count:using:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[12];

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v13[10] = 0;
    v13[11] = result;
    MEMORY[0x24BDAC7A8](result, a2);
    v13[2] = v5;
    v13[3] = v6;
    v13[4] = v7;
    v13[5] = v8;
    v13[6] = v3;
    v13[7] = v9;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    v11 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FieldElement.randomVector<A>(count:using:), (uint64_t)v13, v10, a3, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  }
  return result;
}

uint64_t static FieldElement.randomElement<A>(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v26 = a3;
  v27 = a5;
  v24 = a6;
  v25 = a1;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v12 = (char *)&v24 - v11;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  v14 = swift_checkMetadataState();
  v15 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  result = v13(a2, a4);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result, v17);
    v18 = v26;
    *(&v24 - 6) = a2;
    *(&v24 - 5) = v18;
    v19 = v27;
    *(&v24 - 4) = a4;
    *(&v24 - 3) = v19;
    v23 = v25;
    v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5((char *)partial apply for closure #1 in static FieldElement.randomElement<A>(using:), (uint64_t)(&v24 - 8), 0, v20);
    v15(v14, AssociatedConformanceWitness);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v22 = lazy protocol witness table accessor for type [UInt8] and conformance [A]();
    return FieldElement.init<A>(bytes:mask:)((uint64_t)&v28, v12, a2, v21, a4, v22, v24);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FieldElementError(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t FieldElement.integerValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)&v12 - v8;
  v10 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(a2 + 88))(a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 96))(v9, v10, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

unint64_t specialized FieldElement.init(_:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  *a2 = 0;
  if (result >= 0xFFFFFFFF00000002)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x8000000249C30670;
    v9._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (result == 0xFFFFFFFF00000001)
    {
      v2 = 0;
    }
    else
    {
      v3 = (result * (unsigned __int128)0xFFFFFFFE00000001) >> 64;
      v4 = (0xFFFFFFFF * result * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      LODWORD(v2) = __CFADD__(0x1FFFFFFFFLL * result, 0xFFFFFFFE00000001 * result);
      v5 = v4 + v3;
      if (__CFADD__(v4, v3))
      {
        v6 = v5 + v2;
        goto LABEL_10;
      }
      while (v5 == -1)
      {
        if ((v2 & 1) == 0)
        {
          v2 = 4294967294;
          goto LABEL_20;
        }
        v6 = 0;
LABEL_10:
        v5 = 0xFFFFFFFFLL;
        v7 = __CFADD__(v6, 0xFFFFFFFFLL);
        v2 = v6 + 0xFFFFFFFFLL;
        if (!v7)
          goto LABEL_20;
        __break(1u);
      }
      v2 = v5 + v2;
      if (v2 >= 0xFFFFFFFF00000001)
        v2 += 0xFFFFFFFFLL;
    }
LABEL_20:
    *a2 = v2;
  }
  return result;
}

unint64_t specialized FieldElement.init(_:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL4 v4;
  _BOOL4 v5;
  __int128 v6;
  __int128 v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  _BOOL4 v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36[2];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;

  v4 = result > 1;
  if (a2 != -28)
    v4 = a2 > 0xFFFFFFFFFFFFFFE4;
  *a3 = 0;
  a3[1] = 0;
  if (!v4)
  {
    v5 = result == 0;
    if (a2 != -28)
      v5 = a2 < 0xFFFFFFFFFFFFFFE4;
    if (!v5)
    {
      v11 = 0;
      v12 = 0;
LABEL_71:
      *a3 = v11;
      a3[1] = v12;
      return result;
    }
    v41 = result;
    v42 = a2;
    v40 = xmmword_249C2A730;
    _UInt128.multipliedFullWidth(by:)(&v37, &v43, (unint64_t *)&v40);
    v6 = v37;
    v7 = v43;
    v43 = xmmword_249C2A740;
    v41 = -(uint64_t)v7;
    v42 = 0;
    _UInt128.multipliedFullWidth(by:)(&v37, &v38, (unint64_t *)&v41);
    v8 = __CFADD__(v38, (_QWORD)v7);
    v9 = v39 + *((_QWORD *)&v7 + 1);
    v10 = __CFADD__(v39, *((_QWORD *)&v7 + 1)) || v9 == -1 && v8;
    v13 = v9 + v8;
    v14 = v6 + v37;
    v15 = __CFADD__((_QWORD)v6, (_QWORD)v37);
    v16 = *((_QWORD *)&v6 + 1) + *((_QWORD *)&v37 + 1);
    if (__CFADD__(*((_QWORD *)&v6 + 1), *((_QWORD *)&v37 + 1)))
    {
      if (!v15)
      {
        if (!v10)
          goto LABEL_24;
LABEL_31:
        v17 = 1;
LABEL_32:
        v18 = v14 + v17;
        if (__CFADD__(v14, v17))
          v19 = v16 + 1;
        else
          v19 = v16;
        v40 = xmmword_249C2A740;
        v36[0] = -v13;
        v36[1] = 0;
        result = (unint64_t)_UInt128.multipliedFullWidth(by:)(&v43, &v41, v36);
        v20 = *((_QWORD *)&v43 + 1);
        v21 = __CFADD__(v41, v13);
        v22 = v42 + v18;
        v23 = __CFADD__(v42, v18) || v22 == -1 && v21;
        v11 = v22 + v21;
        v12 = v19 + v43;
        v24 = __CFADD__(v19, (_QWORD)v43);
        if (*((_QWORD *)&v43 + 1) == -1)
        {
          if (!v24)
          {
            if (!v23)
              goto LABEL_68;
            v20 = -1;
            goto LABEL_56;
          }
        }
        else if (!v24)
        {
          if ((v23 & 1) == 0)
            goto LABEL_62;
          goto LABEL_56;
        }
        v20 = *((_QWORD *)&v43 + 1) + 1;
        if ((v23 & 1) == 0)
        {
          v25 = 0;
LABEL_57:
          v26 = __CFADD__(v12, v25);
          v12 += v25;
          v27 = v26;
          if (v20 == -1)
          {
            if ((v27 & 1) != 0)
              goto LABEL_65;
            goto LABEL_68;
          }
          if ((v27 & 1) != 0)
            goto LABEL_68;
LABEL_62:
          if (!v20)
          {
LABEL_65:
            v28 = v11 == 0;
            if (v12 != -28)
              v28 = v12 < 0xFFFFFFFFFFFFFFE4;
            if (v28)
              goto LABEL_71;
          }
LABEL_68:
          v26 = v11-- != 0;
          v29 = 28;
          if (!v26)
            v29 = 27;
          v12 += v29;
          goto LABEL_71;
        }
LABEL_56:
        v25 = 1;
        goto LABEL_57;
      }
    }
    else if (v16 == -1)
    {
      if (!v15)
      {
        v16 = -1;
        if ((v10 & 1) != 0)
          goto LABEL_31;
        goto LABEL_24;
      }
    }
    else if (!v15)
    {
      if ((v10 & 1) != 0)
        goto LABEL_31;
LABEL_24:
      v17 = 0;
      goto LABEL_32;
    }
    ++v16;
    if ((v10 & 1) == 0)
      goto LABEL_24;
    goto LABEL_31;
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v30._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 30768;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._object = (void *)0x8000000249C30670;
  v32._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v32);
  v33._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 30768;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 41;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t FieldElement.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v11 = (char *)&v13 - v10;
  (*(void (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  swift_checkMetadataState();
  (*(void (**)(uint64_t))(AssociatedConformanceWitness + 88))(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 96))(v11, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, AssociatedTypeWitness);
}

uint64_t FieldElement.init(other:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 96))(v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t FieldElement.init<A>(floatValue:fractionalBitCount:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return FieldElement.init<A>(floatValue:fractionalBitCount:)(a1, a2, a5, a3, a6, a4, a7);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  unint64_t v75;
  const char *v76;
  uint64_t result;
  char *v78;
  uint64_t v79;
  char v80;
  char *v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char v88;
  uint64_t v89;
  char v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t AssociatedConformanceWitness;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  char *v109;
  char v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  void (*v139)(char *, uint64_t);
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  Swift::String v153;
  char *v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  uint64_t v157;
  Swift::String v158;
  Swift::String v159;
  Swift::String v160;
  Swift::String v161;
  Swift::String v162;
  Swift::String v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  Swift::String v167;
  uint64_t v168;
  Swift::String v169;
  Swift::String v170;
  int64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(char *, uint64_t);
  void (*v176)(char *, uint64_t);
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t AssociatedTypeWitness;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  void (*v219)(char *, uint64_t);
  char *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;

  v219 = a2;
  v192 = a7;
  v11 = *(_QWORD *)(a6 + 16);
  v202 = *(_QWORD *)(v11 + 16);
  v203 = a6;
  v199 = *(_QWORD *)(v202 + 8);
  v191 = *(_QWORD *)(v199 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v189 = (char *)&v176 - v13;
  swift_getAssociatedTypeWitness();
  v207 = a3;
  v208 = a5;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v211 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v212 = *(_QWORD *)(v211 + 8);
  v186 = *(_QWORD *)(v212 + 24);
  v201 = *(_QWORD *)(v186 + 16);
  v200 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v200, v14);
  v198 = (char *)&v176 - v15;
  v196 = type metadata accessor for FloatingPointRoundingRule();
  v195 = *(_QWORD *)(v196 - 8);
  MEMORY[0x24BDAC7A8](v196, v16);
  v194 = (char *)&v176 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = swift_checkMetadataState();
  v204 = *(_QWORD *)(v217 - 8);
  v19 = MEMORY[0x24BDAC7A8](v217, v18);
  v188 = (char *)&v176 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v197 = (char *)&v176 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v206 = (char *)&v176 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v210 = (char *)&v176 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v214 = (char *)&v176 - v32;
  v33 = *(_QWORD *)(a4 - 8);
  v35 = MEMORY[0x24BDAC7A8](v31, v34);
  v193 = (char *)&v176 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v205 = (char *)&v176 - v39;
  MEMORY[0x24BDAC7A8](v38, v40);
  v209 = (char *)&v176 - v41;
  swift_getAssociatedTypeWitness();
  v213 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v184 = *(_QWORD *)(*(_QWORD *)(v213 + 24) + 16);
  v183 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v183, v42);
  v44 = (char *)&v176 - v43;
  v215 = swift_checkMetadataState();
  v218 = *(char **)(v215 - 8);
  v46 = MEMORY[0x24BDAC7A8](v215, v45);
  v185 = (char *)&v176 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x24BDAC7A8](v46, v48);
  v187 = (char *)&v176 - v50;
  v52 = MEMORY[0x24BDAC7A8](v49, v51);
  v216 = (char *)&v176 - v53;
  v55 = MEMORY[0x24BDAC7A8](v52, v54);
  v57 = (char *)&v176 - v56;
  v59 = MEMORY[0x24BDAC7A8](v55, v58);
  v61 = (char *)&v176 - v60;
  v63 = MEMORY[0x24BDAC7A8](v59, v62);
  v65 = (char *)&v176 - v64;
  v67 = MEMORY[0x24BDAC7A8](v63, v66);
  v69 = (char *)&v176 - v68;
  MEMORY[0x24BDAC7A8](v67, v70);
  v220 = (char *)&v176 - v71;
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0)
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v72 = 0xD000000000000011;
    *(_QWORD *)(v72 + 8) = 0x8000000249C30550;
    *(_BYTE *)(v72 + 16) = 4;
    swift_willThrow();
    v73 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    return v73(a1, a4);
  }
  v182 = v33;
  if ((dispatch thunk of FloatingPoint.isInfinite.getter() & 1) != 0)
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    v75 = 0xD000000000000018;
    v76 = "floatValue is isInfinite";
LABEL_7:
    *(_QWORD *)v74 = v75;
    *(_QWORD *)(v74 + 8) = (unint64_t)(v76 - 32) | 0x8000000000000000;
    *(_BYTE *)(v74 + 16) = 4;
    swift_willThrow();
    v73 = *(uint64_t (**)(uint64_t, uint64_t))(v182 + 8);
    return v73(a1, a4);
  }
  if ((dispatch thunk of FloatingPoint.isSubnormal.getter() & 1) != 0)
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    v75 = 0xD000000000000017;
    v76 = "floatValue is subnormal";
    goto LABEL_7;
  }
  v179 = v57;
  v177 = v61;
  v78 = v220;
  v181 = a1;
  v180 = a4;
  dispatch thunk of FloatingPoint.exponent.getter();
  v79 = v215;
  v80 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v81 = v218;
  v82 = v78;
  v83 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v218 + 2);
  v83(v69, v82, v79);
  v178 = v11;
  if ((v80 & 1) == 0)
  {
    v87 = (void (*)(char *, uint64_t))*((_QWORD *)v81 + 1);
    v87(v69, v79);
    v86 = v217;
    goto LABEL_29;
  }
  v84 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v176 = (void (*)(char *, uint64_t))*((_QWORD *)v81 + 1);
  v176(v69, v79);
  if (v84 <= 64)
  {
    v86 = v217;
    v81 = v218;
    v87 = v176;
    goto LABEL_29;
  }
  v81 = v65;
  v83(v65, v220, v79);
  v221 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v88 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v89 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v88 & 1) == 0)
    {
      v86 = v217;
      if (v89 >= 64)
      {
        v102 = v65;
        v79 = v215;
        v87 = v176;
        v176(v102, v215);
        v81 = v218;
        goto LABEL_29;
      }
      v79 = v215;
      goto LABEL_25;
    }
    if (v89 <= 64)
      goto LABEL_27;
    lazy protocol witness table accessor for type Int and conformance Int();
    v44 = v177;
    v79 = v215;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v90 = dispatch thunk of static Comparable.< infix(_:_:)();
    v87 = v176;
    v176(v44, v79);
    v87(v81, v79);
    v86 = v217;
LABEL_20:
    v81 = v218;
    if ((v90 & 1) != 0)
      goto LABEL_26;
    goto LABEL_29;
  }
  v85 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v86 = v217;
  if (v85 >= 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v91 = v177;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v90 = dispatch thunk of static Comparable.< infix(_:_:)();
    v92 = v91;
    v87 = v176;
    v176(v92, v79);
    v87(v81, v79);
    goto LABEL_20;
  }
LABEL_25:
  v93 = dispatch thunk of BinaryInteger._lowWord.getter();
  v94 = v65;
  v87 = v176;
  v176(v94, v79);
  v81 = v218;
  if (v93 < v221)
  {
LABEL_26:
    do
    {
      __break(1u);
LABEL_27:
      v95 = v184;
      v79 = v215;
      v96 = v183;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v96, AssociatedConformanceWitness);
      v98 = v81;
      v99 = v177;
      MEMORY[0x24BD00904](v44, v79, v95);
      LOBYTE(v95) = dispatch thunk of static Comparable.< infix(_:_:)();
      v87 = v176;
      v176(v99, v79);
      v81 = v218;
      v100 = v185;
      (*((void (**)(char *, char *, uint64_t))v218 + 4))(v185, v98, v79);
      if ((v95 & 1) != 0)
        goto LABEL_53;
      v44 = (char *)v221;
      v101 = dispatch thunk of BinaryInteger._lowWord.getter();
      v87(v100, v79);
      v86 = v217;
    }
    while (v101 < (uint64_t)v44);
  }
LABEL_29:
  v103 = v220;
  v104 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v105 = v179;
  v83(v179, v103, v79);
  if (v104 < 65)
  {
    v113 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v87(v105, v79);
    if (v113 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_42;
  }
  else
  {
    v87(v105, v79);
  }
  v83(v216, v220, v79);
  v221 = 0x7FFFFFFFFFFFFFFFLL;
  v106 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v107 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v106 & 1) == 0)
  {
    if (v107 > 63)
      goto LABEL_40;
LABEL_38:
    v114 = v216;
    v115 = dispatch thunk of BinaryInteger._lowWord.getter();
    v87(v114, v79);
    if (v221 < v115)
      goto LABEL_39;
    goto LABEL_42;
  }
  if (v107 <= 64)
    goto LABEL_38;
  lazy protocol witness table accessor for type Int and conformance Int();
  v108 = v87;
  v109 = v177;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v81 = v216;
  v110 = dispatch thunk of static Comparable.< infix(_:_:)();
  v111 = v109;
  v87 = v108;
  v108(v111, v79);
  v112 = v81;
  while (1)
  {
    v108(v112, v79);
    if ((v110 & 1) == 0)
      break;
LABEL_39:
    __break(1u);
LABEL_40:
    v223 = 0x7FFFFFFFFFFFFFFFLL;
    v108 = v87;
    v116 = v177;
    (*((void (**)(char *, char *, uint64_t))v81 + 4))(v177, v216, v79);
    lazy protocol witness table accessor for type Int and conformance Int();
    v81 = v187;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v110 = dispatch thunk of static Comparable.< infix(_:_:)();
    v108(v81, v79);
    v112 = v116;
    v87 = v108;
  }
LABEL_42:
  v100 = v220;
  v117 = dispatch thunk of BinaryInteger._lowWord.getter();
  v87(v100, v79);
  v118 = __OFADD__(v117, v219);
  v119 = (uint64_t)v219 + v117;
  if (v118)
  {
    __break(1u);
LABEL_53:
    result = ((uint64_t (*)(char *, uint64_t))v87)(v100, v79);
    __break(1u);
    return result;
  }
  if (v119 >= dispatch thunk of static FixedWidthInteger.bitWidth.getter())
  {
    v221 = 0;
    v222 = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v153._countAndFlagsBits = 0xD00000000000001FLL;
    v153._object = (void *)0x8000000249C30480;
    String.append(_:)(v153);
    v154 = v177;
    v155 = v87;
    v156 = v181;
    dispatch thunk of FloatingPoint.exponent.getter();
    v157 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v155(v154, v79);
    v223 = v157;
    v158._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v158);
    swift_bridgeObjectRelease();
    v159._object = (void *)0x8000000249C304A0;
    v159._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v159);
    v223 = (uint64_t)v219;
    v160._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    v161._countAndFlagsBits = 0xD000000000000016;
    v161._object = (void *)0x8000000249C304C0;
    String.append(_:)(v161);
    v223 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
    v162._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v162);
    swift_bridgeObjectRelease();
    v163._countAndFlagsBits = 46;
    v163._object = (void *)0xE100000000000000;
    String.append(_:)(v163);
    v164 = v221;
    v165 = v222;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v166 = v164;
    *(_QWORD *)(v166 + 8) = v165;
    *(_BYTE *)(v166 + 16) = 4;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v182 + 8))(v156, v180);
  }
  else
  {
    v221 = 1;
    v120 = lazy protocol witness table accessor for type Int and conformance Int();
    v121 = v210;
    MEMORY[0x24BD00694](&v221, MEMORY[0x24BEE1768], v120, v86, v212);
    v221 = (int64_t)v219;
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    v219 = *(void (**)(char *, uint64_t))(v204 + 8);
    v219(v121, v86);
    v122 = v205;
    v123 = v180;
    v124 = v178;
    dispatch thunk of FloatingPoint.init<A>(_:)();
    dispatch thunk of static Numeric.* infix(_:_:)();
    v220 = *(char **)(v182 + 8);
    ((void (*)(char *, uint64_t))v220)(v122, v123);
    v125 = v195;
    v126 = v194;
    v127 = v196;
    (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v194, *MEMORY[0x24BEE38E8], v196);
    v128 = v193;
    dispatch thunk of FloatingPoint.rounded(_:)();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v127);
    v218 = *(char **)(*(_QWORD *)(v124 + 24) + 8);
    abs<A>(_:)();
    v129 = v128;
    v130 = v217;
    ((void (*)(char *, uint64_t))v220)(v129, v123);
    v131 = v206;
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    v132 = v210;
    static FieldElement.modulus.getter();
    v133 = v201;
    v134 = v200;
    v135 = swift_getAssociatedConformanceWitness();
    v136 = v198;
    MEMORY[0x24BD00928](&unk_249C2A750, 768, v134, v135);
    v137 = v197;
    v138 = v136;
    v139 = v219;
    MEMORY[0x24BD00904](v138, v130, v133);
    v140 = v214;
    dispatch thunk of static BinaryInteger./ infix(_:_:)();
    v141 = v137;
    v142 = v131;
    v139(v141, v130);
    v139(v132, v130);
    v143 = v140;
    LOBYTE(v140) = dispatch thunk of static Comparable.<= infix(_:_:)();
    v139(v143, v130);
    if ((v140 & 1) != 0)
    {
      v144 = v191;
      v145 = AssociatedTypeWitness;
      v146 = swift_getAssociatedConformanceWitness();
      v147 = v189;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v145, v146);
      v148 = v205;
      MEMORY[0x24BD00904](v147, v123, v144);
      LOBYTE(v144) = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, uint64_t))v220)(v148, v123);
      if ((v144 & 1) != 0)
      {
        v149 = v214;
        v150 = v207;
        v151 = v208;
        static FieldElement.modulus.getter();
        v152 = v188;
        v142 = v206;
        dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
        v219(v149, v130);
      }
      else
      {
        v152 = v188;
        v142 = v206;
        (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v188, v206, v130);
        v150 = v207;
        v151 = v208;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v151 + 128))(v152, v150, v151);
      v174 = v181;
    }
    else
    {
      v221 = 0;
      v222 = 0xE000000000000000;
      _StringGuts.grow(_:)(49);
      v167._countAndFlagsBits = 0x6C615674616F6C66;
      v167._object = (void *)0xEB000000003D6575;
      String.append(_:)(v167);
      v168 = v181;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v169._countAndFlagsBits = 0xD000000000000020;
      v169._object = (void *)0x8000000249C304E0;
      String.append(_:)(v169);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v170._countAndFlagsBits = 11817;
      v170._object = (void *)0xE200000000000000;
      String.append(_:)(v170);
      v171 = v221;
      v172 = v222;
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(_QWORD *)v173 = v171;
      *(_QWORD *)(v173 + 8) = v172;
      *(_BYTE *)(v173 + 16) = 4;
      swift_willThrow();
      v174 = v168;
    }
    v175 = (uint64_t (*)(char *, uint64_t))v220;
    ((void (*)(uint64_t, uint64_t))v220)(v174, v123);
    v219(v142, v130);
    return v175(v209, v123);
  }
}

uint64_t FieldElement.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  _QWORD v26[2];
  uint64_t v27;

  v26[1] = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v10, v13);
  v16 = (char *)v26 - v15;
  MEMORY[0x24BDAC7A8](v14, v17);
  v19 = (char *)v26 - v18;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v27 = a1;
    v20 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
    v21 = lazy protocol witness table accessor for type Int and conformance Int();
    MEMORY[0x24BD00694](&v27, MEMORY[0x24BEE1768], v21, AssociatedTypeWitness, v20);
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v16, v19, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 128))(v16, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v19, AssociatedTypeWitness);
  }
  result = static FieldElement.modulus.getter();
  if (!__OFSUB__(0, a1))
  {
    v27 = -a1;
    v23 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
    v24 = lazy protocol witness table accessor for type Int and conformance Int();
    MEMORY[0x24BD00694](&v27, MEMORY[0x24BEE1768], v24, AssociatedTypeWitness, v23);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    v25(v12, AssociatedTypeWitness);
    v25(v16, AssociatedTypeWitness);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t static FieldElement.modulus.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t FieldElement.init<A>(bytes:mask:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t AssociatedTypeWitness;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;

  v55 = a7;
  v61 = a2;
  v63 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v56 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v17);
  v59 = (char *)&v53 - v18;
  v57 = a6;
  v65 = a1;
  v62 = a4;
  v19 = dispatch thunk of Collection.count.getter();
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  if (v19 == v20(a3, a5))
  {
    v54 = v16;
    v22 = v62;
    v21 = v63;
    v23 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v56, v65, v62);
    v24 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v26 = v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 16))(v23, v22, v57, v24);
    v27 = v22;
    v28 = v65;
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v28, v27);
    }
    else
    {
      v42 = v61;
      v43 = AssociatedTypeWitness;
      dispatch thunk of static FloatingPoint./= infix(_:_:)();
      v44 = v54;
      static FieldElement.modulus.getter();
      v45 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v46 = v60;
      v47 = *(void (**)(char *, uint64_t))(v60 + 8);
      v47(v44, v43);
      if ((v45 & 1) != 0)
      {
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v48 = 0;
        *(_QWORD *)(v48 + 8) = 0;
        *(_BYTE *)(v48 + 16) = 5;
        swift_willThrow();
        v49 = AssociatedTypeWitness;
        v47(v42, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v62);
        v50 = v59;
      }
      else
      {
        v51 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
        v52 = v59;
        v49 = AssociatedTypeWitness;
        v51(v44, v59, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t, uint64_t))(a5 + 128))(v44, a3, a5);
        v47(v42, v49);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v62);
        v50 = v52;
      }
      return ((uint64_t (*)(char *, uint64_t))v47)(v50, v49);
    }
  }
  else
  {
    v66 = 0;
    v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v30 = _typeName(_:qualified:)();
    v32 = v31;
    swift_bridgeObjectRelease();
    v66 = v30;
    v67 = v32;
    v33._object = (void *)0x8000000249C30570;
    v33._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v33);
    v68 = v20(a3, a5);
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = v65;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0x203A746F67202CLL;
    v36._object = (void *)0xE700000000000000;
    String.append(_:)(v36);
    v37 = v62;
    v68 = dispatch thunk of Collection.count.getter();
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v66;
    v40 = v67;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v41 = v39;
    *(_QWORD *)(v41 + 8) = v40;
    *(_BYTE *)(v41 + 16) = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v35, v37);
  }
}

uint64_t FieldElement.init(inputVector:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  void (*v72)(char *, uint64_t);
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void (*v79)(uint64_t, uint64_t);
  _QWORD v80[4];
  void (*v81)(char *, uint64_t, uint64_t);
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  void (*v100)(char *, char *, uint64_t, uint64_t);
  char *v101;
  char *v102;
  _QWORD *v103;
  uint64_t AssociatedConformanceWitness;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;

  v96 = a3;
  v97 = a2;
  v106 = a1;
  v80[1] = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v100 = (void (*)(char *, char *, uint64_t, uint64_t))AssociatedTypeWitness;
  v11 = swift_getAssociatedTypeWitness();
  v92 = *(_QWORD *)(v11 - 8);
  v93 = v11;
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v91 = (char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v107 = (char *)v80 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v21 = (char *)v80 - v20;
  v22 = *(_QWORD **)(a5 - 8);
  v24 = MEMORY[0x24BDAC7A8](v19, v23);
  v26 = (char *)v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v24, v27);
  v30 = (char *)v80 - v29;
  v32 = MEMORY[0x24BDAC7A8](v28, v31);
  v34 = (char *)v80 - v33;
  v36 = MEMORY[0x24BDAC7A8](v32, v35);
  v94 = (uint64_t)v80 - v37;
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v95 = (char *)v80 - v40;
  MEMORY[0x24BDAC7A8](v39, v41);
  v43 = (char *)v80 - v42;
  v105 = a4;
  v44 = ArraySlice.count.getter();
  v108 = a6;
  v45 = v101;
  static FieldElement.assertValidBitLength(_:)(v44, a5, a6);
  v80[3] = v45;
  if (v45)
    return swift_unknownObjectRelease();
  v88 = v30;
  v89 = v26;
  v102 = v21;
  v103 = v22;
  v90 = v34;
  v47 = v108;
  (*(void (**)(uint64_t, uint64_t))(v108 + 72))(a5, v108);
  v87 = *(_QWORD *)(v47 + 8);
  dispatch thunk of IteratorProtocol.next()();
  v48 = v94;
  FieldElement.init(_:)(2, a5, v47, v94);
  swift_unknownObjectRetain();
  v49 = v96;
  v50 = ArraySlice.startIndex.getter();
  v51 = v50 == ArraySlice.endIndex.getter();
  v52 = v95;
  v53 = v43;
  v54 = a5;
  if (v51)
  {
    swift_unknownObjectRelease();
    v55 = v103;
    v56 = (void (*)(char *, char *, uint64_t))v103[2];
LABEL_10:
    v78 = v90;
    v56(v90, v52, v54);
    (*(void (**)(char *, uint64_t))(v108 + 136))(v78, v54);
    swift_unknownObjectRelease();
    v79 = (void (*)(uint64_t, uint64_t))v55[1];
    v79(v48, v54);
    v79((uint64_t)v52, v54);
    return ((uint64_t (*)(char *, uint64_t))v79)(v53, v54);
  }
  else
  {
    v101 = v43;
    v57 = v108;
    v84 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 136);
    v83 = swift_checkMetadataState();
    v100 = *(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    v86 = v105 >> 1;
    v58 = v50;
    v82 = *(void (**)(uint64_t, uint64_t))(v57 + 88);
    v99 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 96);
    v59 = v97;
    v60 = v90;
    v85 = v50;
    while (1)
    {
      result = ArraySlice._hoistableIsNativeTypeChecked()();
      if (v58 < v49 || v86 <= v50)
        break;
      v98 = v50 + 1;
      v61 = v59 + v103[9] * v50;
      v62 = (void (*)(char *, uint64_t, uint64_t))v103[2];
      v62(v60, v61, v54);
      v63 = v89;
      v81 = v62;
      v62(v89, (uint64_t)v60, v54);
      v64 = v88;
      v65 = v108;
      v84(v63, v54, v108);
      v66 = v82;
      v82(v54, v65);
      v67 = v91;
      v66(v54, v65);
      v68 = v102;
      v69 = v83;
      v100(v107, v67, v83, AssociatedConformanceWitness);
      v70 = v93;
      v71 = *(void (**)(char *, uint64_t))(v92 + 8);
      v71(v67, v93);
      v71(v107, v70);
      v99(v68, v54, v108);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v72 = (void (*)(char *, uint64_t))v103[1];
      v72(v64, v54);
      v66(v54, v108);
      v66(v54, v108);
      v73 = v102;
      v100(v107, v67, v69, AssociatedConformanceWitness);
      v74 = v67;
      v75 = v107;
      v71(v74, v70);
      v76 = v70;
      v60 = v90;
      v71(v75, v76);
      v49 = v96;
      v58 = v85;
      v99(v73, v54, v108);
      v72(v60, v54);
      v59 = v97;
      v77 = ArraySlice.endIndex.getter();
      v50 = v98;
      if (v98 == v77)
      {
        swift_unknownObjectRelease();
        v55 = v103;
        v48 = v94;
        v52 = v95;
        v53 = v101;
        v56 = (void (*)(char *, char *, uint64_t))v81;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t static FieldElement.assertValidBitLength(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(void);
  uint64_t result;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  char v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v37 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v7, v10);
  v13 = (char *)&v33 - v12;
  MEMORY[0x24BDAC7A8](v11, v14);
  v16 = (char *)&v33 - v15;
  v17 = *(uint64_t (**)(void))(a3 + 64);
  v35 = a3;
  v36 = a2;
  result = ((uint64_t (*)(uint64_t, uint64_t))v17)(a2, a3);
  if ((unint64_t)(result - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    return result;
  }
  if (v37 >= 8 * result)
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v38 = 0xD000000000000011;
    v39 = 0x8000000249C30590;
    v40 = v37;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0xD000000000000015;
    v28._object = (void *)0x8000000249C305B0;
    String.append(_:)(v28);
    v40 = v17();
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v16;
    static FieldElement.modulus.getter();
    v38 = 1;
    v20 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
    v21 = lazy protocol witness table accessor for type Int and conformance Int();
    MEMORY[0x24BD00694](&v38, MEMORY[0x24BEE1768], v21, AssociatedTypeWitness, v20);
    v38 = v37;
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    v22 = *(void (**)(char *, uint64_t))(v34 + 8);
    v22(v9, AssociatedTypeWitness);
    v34 = v20;
    v23 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v22(v13, AssociatedTypeWitness);
    result = ((uint64_t (*)(char *, uint64_t))v22)(v19, AssociatedTypeWitness);
    if ((v23 & 1) == 0)
      return result;
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v24._object = (void *)0x8000000249C30590;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    v40 = v37;
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD000000000000013;
    v26._object = (void *)0x8000000249C305D0;
    String.append(_:)(v26);
    static FieldElement.modulus.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v22(v19, AssociatedTypeWitness);
  }
  v31 = v38;
  v30 = v39;
  lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
  swift_allocError();
  *(_QWORD *)v32 = v31;
  *(_QWORD *)(v32 + 8) = v30;
  *(_BYTE *)(v32 + 16) = 3;
  return swift_willThrow();
}

uint64_t static FieldElement.* infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (char *)&v28 - v14;
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v19 = (char *)&v28 - v18;
  MEMORY[0x24BDAC7A8](v17, v20);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 136))(v22, a3, a4);
  v24 = swift_checkMetadataState();
  v25 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v25(a3, a4);
  v25(a3, a4);
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 80))(v15, v11, v24);
  v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v11, AssociatedTypeWitness);
  v26(v15, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v19, a3, a4);
}

uint64_t static FieldElement.*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v22 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v22 - v16;
  v18 = swift_checkMetadataState();
  v19 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v19(a3, a4);
  v19(a3, a4);
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 80))(v14, v10, v18);
  v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v10, AssociatedTypeWitness);
  v20(v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v17, a3, a4);
}

uint64_t FieldElement.init(inputVector:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for Array();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v6);
  v7 = ArraySlice.init<A>(_:)();
  return FieldElement.init(inputVector:)(v7, v8, v9, v10, a1, a2, a3);
}

uint64_t static FieldElement.encode(_:into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v46 = a1;
  v47 = a3;
  v51 = a2;
  MEMORY[0x24BDAC7A8](a1, a2);
  v45[2] = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v52 = a5;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v11, v14);
  v17 = (char *)v45 - v16;
  MEMORY[0x24BDAC7A8](v15, v18);
  v20 = (char *)v45 - v19;
  v21 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v22 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v23 = v47;
  if (v22 >= v47)
  {
    v45[0] = a4;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v20, v46, AssociatedTypeWitness);
    v53 = 1;
    v31 = *(_QWORD *)(v21 + 8);
    v49 = lazy protocol witness table accessor for type Int and conformance Int();
    v32 = v31;
    result = MEMORY[0x24BD00694](&v53, MEMORY[0x24BEE1768]);
    if (v23 < 0)
    {
      __break(1u);
    }
    else
    {
      v50 = v9;
      v33 = v17;
      v34 = v45[0];
      if (v23)
      {
        v48 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 128);
        v35 = v47;
        do
        {
          MEMORY[0x24BD005F8](v20, v33, AssociatedTypeWitness, v32);
          v48(v13, v34, v52);
          type metadata accessor for Array();
          Array.append(_:)();
          v53 = 1;
          dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
          v36 = v50;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v20, AssociatedTypeWitness);
          (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v20, v13, AssociatedTypeWitness);
          --v35;
        }
        while (v35);
      }
      dispatch thunk of IteratorProtocol.next()();
      v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v38 = *(void (**)(char *, uint64_t))(v50 + 8);
      v38(v13, AssociatedTypeWitness);
      if ((v37 & 1) == 0)
      {
        v53 = 0;
        v54 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        v39._countAndFlagsBits = 0xD000000000000014;
        v39._object = (void *)0x8000000249C305F0;
        String.append(_:)(v39);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v40._countAndFlagsBits = 0x6962206874697720;
        v40._object = (void *)0xEF3D687464695774;
        String.append(_:)(v40);
        v55 = v47;
        v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        v42 = v53;
        v43 = v54;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v44 = v42;
        *(_QWORD *)(v44 + 8) = v43;
        *(_BYTE *)(v44 + 16) = 1;
        swift_willThrow();
      }
      v38(v33, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v38)(v20, AssociatedTypeWitness);
    }
  }
  else
  {
    v53 = 0;
    v54 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v53 = 0xD000000000000012;
    v54 = 0x8000000249C30610;
    v55 = v23;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 2113056;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    v55 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27 = v53;
    v28 = v54;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v29 = v27;
    *(_QWORD *)(v29 + 8) = v28;
    *(_BYTE *)(v29 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

uint64_t static FieldElement.integerToBitVector(input:bitWidth:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v11;

  v11 = Array.init()();
  type metadata accessor for Array();
  Array.reserveCapacity(_:)(a2);
  static FieldElement.encode(_:into:with:)(a1, (uint64_t)&v11, a2, a3, a4);
  v9 = v11;
  if (v4)
    swift_bridgeObjectRelease();
  return v9;
}

uint64_t static FieldElement.integersToElements(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Array();
  v5 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v4);
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FieldElement.integersToElements(_:), (uint64_t)v8, v4, a2, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
}

uint64_t closure #1 in static FieldElement.integersToElements(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)v12 - v8, a1);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 128))(v9, a2, a3);
}

uint64_t static FieldElement.elementsToIntegers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v3 = type metadata accessor for Array();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v3);
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FieldElement.elementsToIntegers(_:), (uint64_t)v8, v3, AssociatedTypeWitness, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
}

uint64_t FieldElement.encodedLength.getter(uint64_t a1, uint64_t a2)
{
  swift_getDynamicType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
}

uint64_t FieldElement.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v13);
  v16 = (char *)&v22 - v15;
  v17 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v14, v18);
  v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, a3);
  default argument 1 of FieldElement.init<A>(bytes:mask:)();
  FieldElement.init<A>(bytes:mask:)((uint64_t)v20, v16, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
}

uint64_t FieldElement.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;

  v15 = a3;
  v16 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 112))(a2, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 24) + 24))(a1, v15, v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t static FieldElement.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v22 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v22 - v16;
  v18 = swift_checkMetadataState();
  v19 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v19(a3, a4);
  v19(a3, a4);
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 64))(v14, v10, v18);
  v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v10, AssociatedTypeWitness);
  v20(v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v17, a3, a4);
}

uint64_t static FieldElement.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FieldElement.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE2F78], a5);
}

uint64_t static FieldElement.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v22 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v22 - v16;
  v18 = swift_checkMetadataState();
  v19 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v19(a3, a4);
  v19(a3, a4);
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 72))(v14, v10, v18);
  v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v10, AssociatedTypeWitness);
  v20(v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v17, a3, a4);
}

uint64_t static FieldElement.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FieldElement.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE2F80], a5);
}

uint64_t static FieldElement.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1, a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 136))(v12, a3, a4);
  return a5(a6, a2, a3, *(_QWORD *)(a4 + 8));
}

uint64_t static FieldElement.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t (*v21)(char *, uint64_t);
  uint64_t result;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v27(v18, v31, a3);
  v29 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v29(a3, a4);
  static FieldElement.modulus.getter();
  v26 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v19 = dispatch thunk of static Comparable.< infix(_:_:)();
  v20 = *(void (**)(char *, uint64_t))(v28 + 8);
  v20(v10, AssociatedTypeWitness);
  v20(v14, AssociatedTypeWitness);
  v21 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  result = v21(v18, a3);
  if ((v19 & 1) != 0)
  {
    v27(v18, v30, a3);
    v29(a3, a4);
    static FieldElement.modulus.getter();
    v23 = dispatch thunk of static Comparable.< infix(_:_:)();
    v20(v10, AssociatedTypeWitness);
    v20(v14, AssociatedTypeWitness);
    result = v21(v18, a3);
    if ((v23 & 1) != 0)
    {
      v24 = v29;
      v29(a3, a4);
      v24(a3, a4);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      v20(v10, AssociatedTypeWitness);
      v20(v14, AssociatedTypeWitness);
      return v25 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static FieldElement./= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  v32 = a1;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (char *)&v29 - v14;
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v19 = (char *)&v29 - v18;
  MEMORY[0x24BDAC7A8](v17, v20);
  v22 = (char *)&v29 - v21;
  v23 = swift_checkMetadataState();
  v24 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v24(a3, a4);
  v24(a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 112))(v11, v23, AssociatedConformanceWitness);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v26 = v11;
  v27 = v30;
  v25(v26, v30);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(v19, v15, v23, AssociatedConformanceWitness);
  v25(v15, v27);
  v25(v19, v27);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v22, a3, a4);
}

uint64_t static FieldElement./ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a2;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v41 = AssociatedTypeWitness;
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v11);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v12, v15);
  v18 = (char *)v38 - v17;
  v20 = MEMORY[0x24BDAC7A8](v16, v19);
  v22 = (char *)v38 - v21;
  v24 = MEMORY[0x24BDAC7A8](v20, v23);
  v39 = (char *)v38 - v25;
  MEMORY[0x24BDAC7A8](v24, v26);
  v28 = (char *)v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, a1, a3);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 136);
  v38[1] = a5;
  v30(v28, a3, a4);
  v31 = swift_checkMetadataState();
  v32 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v32(a3, a4);
  v32(a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 112))(v14, v31, AssociatedConformanceWitness);
  v33 = *(void (**)(char *, uint64_t))(v40 + 8);
  v34 = v14;
  v35 = v41;
  v33(v34, v41);
  v36 = v39;
  (*(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(v22, v18, v31, AssociatedConformanceWitness);
  v33(v18, v35);
  v33(v22, v35);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v36, a3, a4);
}

uint64_t static FieldElement.root(n:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v23 = a4;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v11 = (char *)&v23 - v10;
  v12 = swift_checkMetadataState();
  v13 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  v13(v12, AssociatedConformanceWitness);
  v14 = MEMORY[0x24BD00400]();
  swift_bridgeObjectRelease();
  if (v14 <= a1)
  {
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v24 = a1;
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v18 = v17;
    swift_bridgeObjectRelease();
    v25 = v16;
    v26 = v18;
    v19._countAndFlagsBits = 2112544;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    v13(v12, AssociatedConformanceWitness);
    v20 = MEMORY[0x24BD00400]();
    swift_bridgeObjectRelease();
    v24 = v20;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000249C30630;
    v22._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v22);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
    v13(v12, AssociatedConformanceWitness);
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 96))(v11, a2, a3);
  }
  return result;
}

uint64_t FieldElement.pow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = AssociatedTypeWitness;
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (char *)&v22 - v14;
  MEMORY[0x24BDAC7A8](v13, v16);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v3, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 136))(v18, a2, a3);
  v20 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 104))(v11, v25, v20, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v24);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 96))(v15, a2, a3);
}

uint64_t FieldElement.inv()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = AssociatedTypeWitness;
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v21 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v2, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 136))(v17, a1, a2);
  v19 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(a2 + 88))(a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 112))(v10, v19, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 96))(v14, a1, a2);
}

uint64_t specialized FieldElement.description.getter(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  __int128 v13;
  __int128 v14;

  specialized FieldElement.integerValue.getter(a1, a2, &v14);
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v4._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  *(_QWORD *)&v13 = 30768;
  *((_QWORD *)&v13 + 1) = 0xE200000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v14 = v13;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 7876648;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = v14;
  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v7 = String.init<A>(_:radix:uppercase:)();
  v9 = v8;
  v14 = v6;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized FieldElement.description.getter(uint64_t a1)
{
  Swift::String v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  specialized FieldElement.integerValue.getter(a1);
  v8 = dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 7876648;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  v2 = String.init<A>(_:radix:uppercase:)();
  v4 = v3;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t FieldElement.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v21;
  uint64_t v22;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v6);
  v8 = (char *)&v21 - v7;
  (*(void (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
  swift_getAssociatedConformanceWitness();
  v9 = dispatch thunk of CustomStringConvertible.description.getter();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  v21 = v9;
  v22 = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 7876648;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v14 = v21;
  v13 = v22;
  (*(void (**)(uint64_t, uint64_t))(a2 + 88))(a1, a2);
  v15 = String.init<A>(_:radix:uppercase:)();
  v17 = v16;
  v21 = v14;
  v22 = v13;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t static Array<A>.elementwiseAdding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.elementwiseAdding(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))Array<A>.elementwiseAdd(_:));
}

uint64_t Array<A>.elementwiseSubtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.elementwiseAdd(_:)(a1, a2, a3, (void (*)(unint64_t, char *, uint64_t, _QWORD))MEMORY[0x24BEE2F80]);
}

uint64_t Array<A>.elementwiseAdd(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, char *, uint64_t, _QWORD))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  char isClassOrObjCExistentialType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(unint64_t, char *, uint64_t, _QWORD);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v41 = a4;
  v5 = v4;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v4;
  v14 = swift_bridgeObjectRetain();
  v15 = MEMORY[0x24BD00400](v14, v9);
  v40 = v13;
  swift_bridgeObjectRelease();
  v16 = MEMORY[0x24BD00400](a1, v9);
  if (v15 == v16)
  {
    v17 = swift_bridgeObjectRetain();
    v18 = MEMORY[0x24BD00400](v17, v9);
    result = swift_bridgeObjectRelease();
    if (v18 < 0)
    {
      __break(1u);
    }
    else
    {
      v39 = a3;
      v40 = a2;
      if (v18)
      {
        v20 = 0;
        do
        {
          v21 = v20 + 1;
          Array.subscript.getter();
          Array._makeMutableAndUnique()();
          v22 = *v5;
          Array._checkSubscript_mutating(_:)(v20);
          isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          v24 = v22 & 0xFFFFFFFFFFFFFF8;
          if ((isClassOrObjCExistentialType & 1) == 0)
            v24 = v22;
          v41(v24+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v20, v12, v9, *(_QWORD *)(v39 + 8));
          result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          ++v20;
        }
        while (v18 != v21);
      }
    }
  }
  else
  {
    v25 = v16;
    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v26 = _typeName(_:qualified:)();
    v28 = v27;
    swift_bridgeObjectRelease();
    v42 = v26;
    v43 = v28;
    v29._object = (void *)0x8000000249C30460;
    v29._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30 = swift_bridgeObjectRetain();
    v31 = MEMORY[0x24BD00400](v30, v9);
    swift_bridgeObjectRelease();
    v44 = v31;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v44 = v25;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35 = v42;
    v36 = v43;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v37 = v35;
    *(_QWORD *)(v37 + 8) = v36;
    *(_BYTE *)(v37 + 16) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t static Array<A>.elementwiseSubtracting(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.elementwiseAdding(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))Array<A>.elementwiseSubtract(_:));
}

uint64_t static Array<A>.elementwiseAdding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;

  v7 = v5;
  v10 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  a5(a2, v10, a4);
  if (v7)
    swift_bridgeObjectRelease();
  return a1;
}

uint64_t BinaryFloatingPoint.init<A>(fieldElement:fractionalBitCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t AssociatedConformanceWitness;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  v62 = a5;
  v64 = a4;
  v65 = a1;
  v61 = a7;
  v55 = a3;
  v57 = *(_QWORD *)(a3 - 8);
  v58 = a2;
  v8 = MEMORY[0x24BDAC7A8](a1, a2);
  v59 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v56 = (char *)&v49 - v12;
  MEMORY[0x24BDAC7A8](v11, v13);
  v60 = (char *)&v49 - v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v50 = *(_QWORD *)(v53 + 24);
  v63 = *(char **)(v50 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v16);
  v54 = (char *)&v49 - v17;
  v18 = swift_checkMetadataState();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v21, v24);
  v27 = (char *)&v49 - v26;
  v29 = MEMORY[0x24BDAC7A8](v25, v28);
  v52 = (char *)&v49 - v30;
  MEMORY[0x24BDAC7A8](v29, v31);
  v33 = (char *)&v49 - v32;
  (*(void (**)(uint64_t, uint64_t))(a6 + 112))(v64, a6);
  v51 = a6;
  static FieldElement.modulus.getter();
  v34 = v63;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v36 = v54;
  MEMORY[0x24BD00928](&unk_249C2A750, 768, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x24BD00904](v36, v18, v34);
  v37 = v52;
  dispatch thunk of static BinaryInteger./ infix(_:_:)();
  v38 = *(void (**)(char *, uint64_t))(v19 + 8);
  v38(v23, v18);
  v38(v27, v18);
  v63 = v33;
  v39 = dispatch thunk of static Comparable.> infix(_:_:)();
  v38(v37, v18);
  v54 = (char *)v38;
  if ((v39 & 1) != 0)
  {
    v40 = v64;
    static FieldElement.modulus.getter();
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v38(v27, v18);
    v41 = *(_QWORD *)(v62 + 16);
    v42 = v56;
    v43 = v55;
    dispatch thunk of FloatingPoint.init<A>(_:)();
    v44 = v60;
    MEMORY[0x24BD00724](v42, v43, *(_QWORD *)(v41 + 16));
    v45 = v57;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v42, v43);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v37, v63, v18);
    v44 = v60;
    v43 = v55;
    dispatch thunk of FloatingPoint.init<A>(_:)();
    v40 = v64;
    v42 = v56;
    v45 = v57;
  }
  v46 = v59;
  dispatch thunk of FloatingPoint.init(_:)();
  dispatch thunk of static FloatingPoint./= infix(_:_:)();
  v47 = *(void (**)(char *, uint64_t))(v45 + 8);
  v47(v46, v43);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v44, v43);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v65, v40);
  v47(v44, v43);
  return ((uint64_t (*)(char *, uint64_t))v54)(v63, v18);
}

uint64_t static Field64.encodedLength.getter()
{
  return 8;
}

void one-time initialization function for one()
{
  static Field64.one = 0xFFFFFFFFLL;
}

_QWORD *static Field64.one.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Field64.one.getter(&one-time initialization token for one, &static Field64.one, a1);
}

void one-time initialization function for negativeOne()
{
  static Field64.negativeOne = 0xFFFFFFFE00000002;
}

_QWORD *static Field64.negativeOne.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Field64.one.getter(&one-time initialization token for negativeOne, &static Field64.negativeOne, a1);
}

_QWORD *static Field64.one.getter@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

void Field64.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Field64.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Field64.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Field64.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Field64.value.modify())()
{
  return AggregateShare.share.modify;
}

void Field64.hash(into:)()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Field64.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static FieldElement.one.getter in conformance Field64@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field64(&one-time initialization token for one, &static Field64.one, a1);
}

uint64_t protocol witness for static FieldElement.negativeOne.getter in conformance Field64@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field64(&one-time initialization token for negativeOne, &static Field64.negativeOne, a1);
}

uint64_t protocol witness for static FieldElement.one.getter in conformance Field64@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t result;

  if (*a1 != -1)
    result = swift_once();
  *a3 = *a2;
  return result;
}

void protocol witness for FieldElement.value.getter in conformance Field64(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for FieldElement.value.setter in conformance Field64(_QWORD *result)
{
  _QWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*protocol witness for FieldElement.value.modify in conformance Field64())()
{
  return AggregateShare.share.modify;
}

unint64_t protocol witness for FieldElement.integerValue.getter in conformance Field64@<X0>(unint64_t *a1@<X8>)
{
  uint64_t *v1;
  unint64_t result;

  result = specialized FieldElement.integerValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t protocol witness for FieldElement.init(_:) in conformance Field64@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return specialized FieldElement.init(_:)(*a1, a2);
}

_QWORD *protocol witness for FieldElement.init(other:) in conformance Field64@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Field64@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *result;
  v4 = *a2;
  if (!*a2)
    goto LABEL_8;
  v5 = v4 <= 0xFFFFFFFF00000001;
  v6 = 0xFFFFFFFF00000001 - v4;
  if (!v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v6)
  {
    *a3 = v3 - v6;
    return result;
  }
  v5 = v6 <= 0xFFFFFFFF00000001;
  v7 = 0xFFFFFFFF00000001 - v6;
  if (!v5)
    goto LABEL_10;
  v5 = __CFADD__(v3, v7);
  v3 += v7;
  if (!v5)
  {
LABEL_8:
    *a3 = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Field64(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *a2;
  v3 = *result;
  if (!*a2)
    goto LABEL_8;
  v4 = v2 <= 0xFFFFFFFF00000001;
  v5 = 0xFFFFFFFF00000001 - v2;
  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v5)
  {
    *result = v3 - v5;
    return result;
  }
  v4 = v5 <= 0xFFFFFFFF00000001;
  v6 = 0xFFFFFFFF00000001 - v5;
  if (!v4)
    goto LABEL_10;
  v4 = __CFADD__(v3, v6);
  v3 += v6;
  if (!v4)
  {
LABEL_8:
    *result = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Field64@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  v3 = *result;
  v4 = *a2;
  v5 = *result - *a2;
  if (*result >= *a2)
    goto LABEL_4;
  v6 = 0xFFFFFFFF00000001 - v4;
  if (v4 > 0xFFFFFFFF00000001)
  {
    __break(1u);
  }
  else
  {
    v7 = __CFADD__(v3, v6);
    v5 = v3 + v6;
    if (!v7)
    {
LABEL_4:
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Field64(uint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *a2;
  v3 = *result;
  v4 = *result - *a2;
  if (*result >= *a2)
    goto LABEL_4;
  v5 = 0xFFFFFFFF00000001 - v2;
  if (v2 > 0xFFFFFFFF00000001)
  {
    __break(1u);
  }
  else
  {
    v6 = __CFADD__(v3, v5);
    v4 = v3 + v5;
    if (!v6)
    {
LABEL_4:
      *result = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Field64()
{
  uint64_t *v0;

  return specialized FieldElement.description.getter(*v0);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Field64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;

  v10 = lazy protocol witness table accessor for type Field64 and conformance Field64();
  return FieldElement.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Field64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type Field64 and conformance Field64();
  return FieldElement.encode<A>(into:)(a1, a4, a2, v8, a3);
}

_QWORD *protocol witness for static Equatable.== infix(_:_:) in conformance Field64(_QWORD *result, unint64_t *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (*result <= 0xFFFFFFFF00000000 && v2 <= 0xFFFFFFFF00000000)
    return (_QWORD *)(*result == v2);
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Field64()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Field64()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Field64()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static Field128.encodedLength.getter()
{
  return 16;
}

unint64_t one-time initialization function for one()
{
  return specialized FieldElement.init(_:)(1uLL, 0, static Field128.one);
}

double static Field128.one.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static Field128.one.getter(&one-time initialization token for one, (__n128 *)static Field128.one, a1).n128_u64[0];
  return result;
}

unint64_t one-time initialization function for negativeOne()
{
  return specialized FieldElement.init(_:)(0, 0xFFFFFFFFFFFFFFE4, static Field128.negativeOne);
}

double static Field128.negativeOne.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static Field128.one.getter(&one-time initialization token for negativeOne, (__n128 *)static Field128.negativeOne, a1).n128_u64[0];
  return result;
}

__n128 static Field128.one.getter@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  *a3 = *a2;
  return result;
}

void Field128.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void static Field128.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

__n128 Field128.value.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 Field128.value.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*Field128.value.modify())()
{
  return AggregateShare.share.modify;
}

void Field128.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int Field128.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double protocol witness for static FieldElement.one.getter in conformance Field128@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for static FieldElement.one.getter in conformance Field128(&one-time initialization token for one, (__n128 *)static Field128.one, a1).n128_u64[0];
  return result;
}

double protocol witness for static FieldElement.negativeOne.getter in conformance Field128@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for static FieldElement.one.getter in conformance Field128(&one-time initialization token for negativeOne, (__n128 *)static Field128.negativeOne, a1).n128_u64[0];
  return result;
}

__n128 protocol witness for static FieldElement.one.getter in conformance Field128@<Q0>(_QWORD *a1@<X2>, __n128 *a2@<X3>, __n128 *a3@<X8>)
{
  __n128 result;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  *a3 = *a2;
  return result;
}

__n128 protocol witness for FieldElement.value.setter in conformance Field128(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

_OWORD *protocol witness for FieldElement.integerValue.getter in conformance Field128@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return specialized FieldElement.integerValue.getter(*v1, v1[1], a1);
}

unint64_t protocol witness for FieldElement.init(_:) in conformance Field128@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized FieldElement.init(_:)(*a1, a1[1], a2);
}

unint64_t *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Field128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;

  v3 = *result;
  v4 = result[1];
  v5 = *a2;
  v6 = a2[1];
  if (*(_OWORD *)a2 == 0)
    goto LABEL_2;
  v15 = v5 <= 1;
  v7 = 1 - v5;
  v8 = !v15;
  v9 = -28 - v6;
  if (v6 > 0xFFFFFFFFFFFFFFE4)
    goto LABEL_49;
  v10 = v9 - v8;
  if (v9)
  {
    if (v4 == v10)
      goto LABEL_9;
    goto LABEL_24;
  }
  if ((v8 & 1) == 0)
  {
    if (!v4)
    {
LABEL_9:
      if (v3 >= v7)
      {
LABEL_10:
        v15 = v3 >= v7;
        v3 -= v7;
        v11 = !v15;
        v15 = v4 >= v10;
        v4 -= v10;
        v12 = !v15;
        if ((v11 & 1) != 0)
        {
          if (v4)
            v12 = v12;
          else
            v12 = 1;
          if ((v12 & 1) == 0)
          {
            *a3 = v3;
            a3[1] = v4 - 1;
            return result;
          }
        }
        else if ((v12 & 1) == 0)
        {
LABEL_2:
          *a3 = v3;
          a3[1] = v4;
          return result;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_25:
      v15 = v7 <= 1;
      v12 = 1 - v7;
      v13 = !v15;
      v15 = v10 <= 0xFFFFFFFFFFFFFFE4;
      v10 = -28 - v10;
      v11 = !v15;
      if ((v13 & 1) != 0)
      {
        if (!v10)
          v11 = 1;
        if ((v11 & 1) != 0)
          goto LABEL_50;
        --v10;
LABEL_39:
        v15 = __CFADD__(v4, v10);
        v14 = v4 + v10;
        if (!v15)
        {
          v15 = __CFADD__(v3, v12);
          v3 += v12;
          v16 = v15;
          v4 = v15 ? v14 + 1 : v14;
          if (v14 != -1 || !v16)
            goto LABEL_2;
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_38:
      if ((v11 & 1) != 0)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      goto LABEL_39;
    }
LABEL_24:
    if (v4 >= v10)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_51:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Field128(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;

  v2 = *a2;
  v3 = a2[1];
  v4 = *result;
  v5 = result[1];
  if (*(_OWORD *)a2 == 0)
    goto LABEL_2;
  v14 = v2 <= 1;
  v6 = 1 - v2;
  v7 = !v14;
  v8 = -28 - v3;
  if (v3 > 0xFFFFFFFFFFFFFFE4)
    goto LABEL_49;
  v9 = v8 - v7;
  if (v8)
  {
    if (v5 == v9)
      goto LABEL_9;
    goto LABEL_24;
  }
  if ((v7 & 1) == 0)
  {
    if (!v5)
    {
LABEL_9:
      if (v4 >= v6)
      {
LABEL_10:
        v14 = v4 >= v6;
        v4 -= v6;
        v10 = !v14;
        v14 = v5 >= v9;
        v5 -= v9;
        v11 = !v14;
        if ((v10 & 1) != 0)
        {
          if (v5)
            v11 = v11;
          else
            v11 = 1;
          if ((v11 & 1) == 0)
          {
            *result = v4;
            result[1] = v5 - 1;
            return result;
          }
        }
        else if ((v11 & 1) == 0)
        {
LABEL_2:
          *result = v4;
          result[1] = v5;
          return result;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_25:
      v14 = v6 <= 1;
      v11 = 1 - v6;
      v12 = !v14;
      v14 = v9 <= 0xFFFFFFFFFFFFFFE4;
      v9 = -28 - v9;
      v10 = !v14;
      if ((v12 & 1) != 0)
      {
        if (!v9)
          v10 = 1;
        if ((v10 & 1) != 0)
          goto LABEL_50;
        --v9;
LABEL_39:
        v14 = __CFADD__(v5, v9);
        v13 = v5 + v9;
        if (!v14)
        {
          v14 = __CFADD__(v4, v11);
          v4 += v11;
          v15 = v14;
          v5 = v14 ? v13 + 1 : v13;
          if (v13 != -1 || !v15)
            goto LABEL_2;
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_38:
      if ((v10 & 1) != 0)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      goto LABEL_39;
    }
LABEL_24:
    if (v5 >= v9)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_51:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Field128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;

  v3 = *result;
  v4 = result[1];
  v5 = *a2;
  v6 = a2[1];
  v7 = *result < *a2;
  if (v4 != v6)
    v7 = v4 < v6;
  if (!v7)
  {
    v17 = v3 >= v5;
    v12 = v3 - v5;
    v13 = !v17;
    v17 = v4 >= v6;
    v14 = v4 - v6;
    v15 = !v17;
    if ((v13 & 1) != 0)
    {
      if (!v14)
        LOBYTE(v15) = 1;
      if ((v15 & 1) == 0)
      {
        *a3 = v12;
        a3[1] = v14 - 1;
        return result;
      }
    }
    else if (!v15)
    {
LABEL_36:
      *a3 = v12;
      a3[1] = v14;
      return result;
    }
    __break(1u);
    goto LABEL_39;
  }
  v17 = v5 <= 1;
  v8 = 1 - v5;
  v9 = !v17;
  v17 = v6 <= 0xFFFFFFFFFFFFFFE4;
  v10 = -28 - v6;
  v11 = !v17;
  if ((v9 & 1) == 0)
  {
    if ((v11 & 1) == 0)
      goto LABEL_27;
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v10)
    v11 = 1;
  if ((v11 & 1) != 0)
    goto LABEL_39;
  --v10;
LABEL_27:
  v17 = __CFADD__(v4, v10);
  v16 = v4 + v10;
  if (!v17)
  {
    v17 = __CFADD__(v3, v8);
    v12 = v3 + v8;
    v18 = v17;
    v14 = v17 ? v16 + 1 : v16;
    if (v16 != -1 || !v18)
      goto LABEL_36;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Field128(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  char v12;
  int v13;
  int v14;

  v2 = *a2;
  v3 = a2[1];
  v4 = *result;
  v5 = result[1];
  v6 = *result < *a2;
  if (v5 != v3)
    v6 = v5 < v3;
  if (!v6)
  {
    v7 = v4 >= v2;
    v4 -= v2;
    v12 = !v7;
    v7 = v5 >= v3;
    v5 -= v3;
    v13 = !v7;
    if ((v12 & 1) != 0)
    {
      if (!v5)
        LOBYTE(v13) = 1;
      if ((v13 & 1) == 0)
      {
        *result = v4;
        result[1] = v5 - 1;
        return result;
      }
    }
    else if (!v13)
    {
      goto LABEL_32;
    }
    __break(1u);
    goto LABEL_35;
  }
  v7 = v2 <= 1;
  v8 = 1 - v2;
  v9 = !v7;
  v7 = v3 <= 0xFFFFFFFFFFFFFFE4;
  v10 = -28 - v3;
  v11 = !v7;
  if ((v9 & 1) == 0)
  {
    if ((v11 & 1) == 0)
      goto LABEL_27;
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!v10)
    v11 = 1;
  if ((v11 & 1) != 0)
    goto LABEL_35;
  --v10;
LABEL_27:
  v7 = __CFADD__(v4, v8);
  v4 += v8;
  v14 = v7;
  v7 = __CFADD__(v5, v10);
  v5 += v10;
  if (v7)
    goto LABEL_38;
  if (!v14)
  {
LABEL_32:
    *result = v4;
    result[1] = v5;
    return result;
  }
LABEL_36:
  v7 = __CFADD__(v5++, 1);
  if (!v7)
    goto LABEL_32;
LABEL_38:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Field128()
{
  uint64_t *v0;

  return specialized FieldElement.description.getter(*v0, v0[1]);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Field128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;

  v10 = lazy protocol witness table accessor for type Field128 and conformance Field128();
  return FieldElement.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Field128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type Field128 and conformance Field128();
  return FieldElement.encode<A>(into:)(a1, a4, a2, v8, a3);
}

_QWORD *protocol witness for static Equatable.== infix(_:_:) in conformance Field128(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  BOOL v5;

  v2 = result[1];
  v3 = v2 > 0xFFFFFFFFFFFFFFE3;
  if (v2 == -28)
    v3 = *result != 0;
  if (v3)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  v4 = a2[1];
  v5 = v4 > 0xFFFFFFFFFFFFFFE3;
  if (v4 == -28)
    v5 = *a2 != 0;
  if (v5)
    goto LABEL_14;
  return (_QWORD *)(v2 == v4 && *result == *a2);
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  char isClassOrObjCExistentialType;
  uint64_t v5;

  v2 = v1;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v5 = v2 & 0xFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v5 = v2;
  if (*(_QWORD *)(v5 + 16) <= (unint64_t)a1)
    goto LABEL_7;
}

uint64_t partial apply for closure #1 in static FieldElement.randomVector<A>(count:using:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return static FieldElement.randomElement<A>(using:)(v1[7], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in static FieldElement.randomElement<A>(using:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v1 + 40) + 32))(*(_QWORD *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result < a4 || (uint64_t)(a5 >> 1) <= result)
    __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static FieldElement.integersToElements(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static FieldElement.integersToElements(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in static FieldElement.elementsToIntegers(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 112))(*(_QWORD *)(v0 + 16));
}

unint64_t instantiation function for generic protocol witness table for FieldElementError(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
  result = lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64;
  if (!lazy protocol witness table cache variable for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MontgomeryFiniteField64, &type metadata for MontgomeryFiniteField64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Field64(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Field64(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Field64 and conformance Field64, (uint64_t (*)(void))lazy protocol witness table accessor for type Field64 and conformance Field64, (uint64_t (*)(void))lazy protocol witness table accessor for type Field64 and conformance Field64);
}

unint64_t lazy protocol witness table accessor for type Field64 and conformance Field64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field64, &type metadata for Field64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field64, &type metadata for Field64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field64, &type metadata for Field64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field64, &type metadata for Field64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field64, &type metadata for Field64);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128;
  if (!lazy protocol witness table cache variable for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MontgomeryFiniteField128, &type metadata for MontgomeryFiniteField128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Field128(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Field64(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Field128 and conformance Field128, (uint64_t (*)(void))lazy protocol witness table accessor for type Field128 and conformance Field128, (uint64_t (*)(void))lazy protocol witness table accessor for type Field128 and conformance Field128);
}

uint64_t instantiation function for generic protocol witness table for Field64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Field128 and conformance Field128()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field128, &type metadata for Field128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field128, &type metadata for Field128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field128, &type metadata for Field128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field128, &type metadata for Field128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Field128, &type metadata for Field128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FieldElementError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FieldElementError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for FieldElementError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for FieldElementError(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FieldElementError()
{
  return &type metadata for FieldElementError;
}

uint64_t dispatch thunk of static FieldElement.encodedLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of static FieldElement.one.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of static FieldElement.negativeOne.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of FieldElement.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of FieldElement.value.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of FieldElement.value.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of FieldElement.integerValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of FieldElement.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of FieldElement.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of FieldElement.init(other:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of FieldElement.init<A>(floatValue:fractionalBitCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

ValueMetadata *type metadata accessor for Field64()
{
  return &type metadata for Field64;
}

ValueMetadata *type metadata accessor for Field128()
{
  return &type metadata for Field128;
}

uint64_t static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v10 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  if (v10 == result)
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = v12(a1, a2, a3, a4, a5);
    (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *ExtendableOutputFunction.nextVector(count:)(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result, a2);
    v6[2] = v3;
    v6[3] = v4;
    v6[4] = v2;
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5((char *)partial apply for closure #1 in ExtendableOutputFunction.nextVector(count:), (uint64_t)v6, 0, v5);
  }
  return result;
}

uint64_t static ExtendableOutputFunction.deriveSeed(seed:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, a2, a3, a4, a5);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  v9 = specialized Seed.init<A>(length:using:)(v8, v7, a4, a5);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t partial apply for closure #1 in ExtendableOutputFunction.nextVector(count:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v1 + 24) + 32))(*(_QWORD *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t protocol witness for ExtendableOutputFunction.nextVector(count:) in conformance XofHmacSha256Aes128(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    swift_retain();
    v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5060_s4VDAF24ExtendableOutputFunctionPAAE10nextVector5countSays5D44VGSi_tFAGSiXEfU_AA19XofHmacSha256Aes128C_TG54VDAF0rstU0CTf1cn_nTf4ng_n(0, v2, v1);
    swift_release();
    return v3;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5060_s4VDAF24ExtendableOutputFunctionPAAE10nextVector5countSays5D44VGSi_tFAGSiXEfU_AA19XofHmacSha256Aes128C_TG54VDAF0rstU0CTf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = result;
  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v6 = a2;
  v32 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v26 = v6;
    v7 = 0;
    v4 = v32;
    if (v6 <= v31)
      v8 = v31;
    else
      v8 = v6;
    v29 = v8 - v31;
    v30 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    v27 = a3;
    v28 = v3;
    while (1)
    {
      if (v7 == v3)
        goto LABEL_35;
      v9 = *(_QWORD *)(a3 + v30);
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 16);
      if (*(_QWORD *)(v10 + 16))
      {
        swift_retain();
      }
      else
      {
        v11 = v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
        v12 = v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
        swift_beginAccess();
        swift_retain();
        v13 = specialized static SeedStreamAES128CTR.fillBuffer(key:nonce:)(v11, v12);
        result = swift_endAccess();
        v14 = v13[2];
        if (v14 >= 2)
        {
          v20 = 0;
          v21 = v14 >> 1;
          v22 = v14 + 31;
          do
          {
            if (v20 != v22 - 32)
            {
              v23 = v13[2];
              if (v20 >= v23)
              {
                __break(1u);
LABEL_34:
                __break(1u);
LABEL_35:
                __break(1u);
                goto LABEL_36;
              }
              if (v22 - 32 >= v23)
                goto LABEL_34;
              v24 = *((_BYTE *)v13 + v20 + 32);
              v25 = *((_BYTE *)v13 + v22);
              result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
                v13 = (_QWORD *)result;
              }
              *((_BYTE *)v13 + v20 + 32) = v25;
              *((_BYTE *)v13 + v22) = v24;
            }
            ++v20;
            --v22;
          }
          while (v21 != v20);
        }
        *(_QWORD *)(v9 + 16) = v13;
        result = swift_bridgeObjectRelease();
        v10 = *(_QWORD *)(v9 + 16);
        v6 = v26;
        a3 = v27;
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_37;
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v15 = *(_QWORD *)(v10 + 16);
        if (!v15)
          goto LABEL_39;
      }
      else
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        v10 = result;
        v15 = *(_QWORD *)(result + 16);
        if (!v15)
          goto LABEL_39;
      }
      v16 = v15 - 1;
      v17 = *(_BYTE *)(v10 + v16 + 32);
      *(_QWORD *)(v10 + 16) = v16;
      *(_QWORD *)(v9 + 16) = v10;
      result = swift_release();
      v19 = *(_QWORD *)(v32 + 16);
      v18 = *(_QWORD *)(v32 + 24);
      if (v19 >= v18 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1);
      *(_QWORD *)(v32 + 16) = v19 + 1;
      *(_BYTE *)(v32 + v19 + 32) = v17;
      if (v6 < v31)
        goto LABEL_38;
      if (v7 == v29)
        goto LABEL_40;
      ++v7;
      v3 = v28;
      if (v7 == v28)
        return v4;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of static ExtendableOutputFunction.seedSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.update(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.finalize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.nextVector(count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.init(seedBytes:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

void Lock.withLock<A>(_:)(void (*a1)(void))
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  a1();
  os_unfair_lock_unlock(v3);
}

uint64_t Lock.init()()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

Swift::Void __swiftcall Lock.lock()()
{
  uint64_t v0;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v0 + 16) + 16));
}

Swift::Void __swiftcall Lock.unlock()()
{
  uint64_t v0;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v0 + 16) + 16));
}

uint64_t Lock.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self();
}

uint64_t method lookup function for Lock()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Lock.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t Prio3PrepareMessage.jointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3PrepareMessage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3 && specialized static Array<A>.== infix(_:_:)(v2, v3))
      return 1;
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t Prio3PrepareMessage.init(jointRandSeed:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3PrepareMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3 && specialized static Array<A>.== infix(_:_:)(v2, v3))
      return 1;
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t Prio3PrepareMessage.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  if ((dispatch thunk of Collection.isEmpty.getter() & 1) != 0)
    v6 = 0;
  else
    v6 = specialized Seed.init<A>(from:parameter:)(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PrepareMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return Prio3PrepareMessage.init<A>(from:parameter:)(a1, a2, a3);
}

uint64_t Prio3PrepareMessage.encodedLength.getter()
{
  uint64_t v0;

  if (*(_QWORD *)v0)
    return *(_QWORD *)(*(_QWORD *)v0 + 16);
  else
    return 0;
}

uint64_t Prio3PrepareMessage.encode<A>(into:)()
{
  _QWORD *v0;
  uint64_t result;

  if (*v0)
    return Seed.encode<A>(into:)();
  return result;
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance Prio3PrepareMessage()
{
  uint64_t v0;

  if (*(_QWORD *)v0)
    return *(_QWORD *)(*(_QWORD *)v0 + 16);
  else
    return 0;
}

_QWORD *initializeBufferWithCopyOfBuffer for Prio3PrepareMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Prio3PrepareMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for Prio3PrepareMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3PrepareMessage(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3PrepareMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Prio3PrepareMessage()
{
  return &type metadata for Prio3PrepareMessage;
}

uint64_t Prio3PrepareState.measurementShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3PrepareState.jointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3PrepareState.aggregatorID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Prio3PrepareState.verifierLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

BOOL static Prio3PrepareState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v12 = *(unsigned __int8 *)(a2 + 24);
  v13 = *(unsigned __int8 *)(a1 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((static Share.== infix(_:_:)(v2, v3, v5, v6) & 1) == 0)
    return 0;
  if (v4)
  {
    if (v7)
    {
      v8 = specialized static Array<A>.== infix(_:_:)(v4, v7);
      result = 0;
      if (!v8)
        return result;
      goto LABEL_8;
    }
    return 0;
  }
  result = 0;
  if (v7)
    return result;
LABEL_8:
  if (v13 == v12)
    return v11 == v10;
  return result;
}

uint64_t Prio3PrepareState.init(measurementShare:jointRandSeed:aggregatorID:verifierLength:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_BYTE *)(a6 + 8) = a2 & 1;
  *(_QWORD *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = a5;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Prio3PrepareState<A, B>(uint64_t a1, uint64_t a2)
{
  return static Prio3PrepareState.== infix(_:_:)(a1, a2);
}

uint64_t Prio3PrepareStateDecodableParameter.measurement.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Prio3PrepareStateDecodableParameter.jointRandSeedSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Prio3PrepareStateDecodableParameter.aggregatorID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Prio3PrepareStateDecodableParameter.encodedLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  BOOL v7;
  uint64_t result;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = ShareDecodableParameter.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  v7 = __OFADD__(v6, v3);
  result = v6 + v3;
  if (v7)
    __break(1u);
  return result;
}

void Prio3PrepareStateDecodableParameter.init(prio3:aggregatorID:)()
{
  type metadata accessor for Prio3();
}

uint64_t sub_249BD47DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t result;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, a1);
  v8 = VDAFProtocol.isLeaderAggregatorID(_:)(v5);
  if (v9)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  v11 = v8;
  v16 = v4;
  if (v8)
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v4, v3);
  else
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v1, v6);
  v13 = v12;
  if (Prio3.isJointRandRequired.getter(a1))
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v1, v6);
  else
    v14 = 0;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v16, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  *(_QWORD *)v17 = v13;
  *(_BYTE *)(v17 + 8) = !v11;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = v5;
  *(_QWORD *)(v17 + 32) = v15;
  return result;
}

uint64_t Prio3PrepareState.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  if (*(unsigned __int8 *)(v8 + 8) != 255)
  {
    dispatch thunk of Collection.count.getter();
    type metadata accessor for Prio3PrepareStateDecodableParameter();
  }
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v9 = 0;
  v9[1] = 0;
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a5);
}

void type metadata accessor for Prio3PrepareStateDecodableParameter()
{
  JUMPOUT(0x24BD00B80);
}

void type metadata accessor for Prio3PrepareState()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PrepareState<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v9 = v5;
  return Prio3PrepareState.init<A>(from:parameter:)(a1, (uint64_t)v8, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a3);
}

uint64_t Prio3PrepareState.encodedLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v7;
  BOOL v8;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = Share.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v3)
  {
    v7 = *(_QWORD *)(v3 + 16);
    v8 = __OFADD__(result, v7);
    result += v7;
    if (v8)
      __break(1u);
  }
  return result;
}

uint64_t Prio3PrepareState.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;

  v8 = *(_QWORD *)v4;
  v9 = *(_BYTE *)(v4 + 8);
  v10 = *(_QWORD *)(v4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = Share.encode<A>(into:)(a1, v8, v9, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
  if (v10)
    return Seed.encode<A>(into:)();
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3PrepareState<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3PrepareState.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t destroy for Prio3PrepareState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Prio3PrepareState(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Prio3PrepareState(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Prio3PrepareState(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3PrepareState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3PrepareState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Prio3PrepareStateDecodableParameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3PrepareStateDecodableParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t static AES.CTR.encryptInPlace(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  return specialized static AES.CTR.encryptInPlace(_:using:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t AES.CTR.Nonce.withUnsafeMutableBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UInt32, UInt32));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawBufferPointer) -> (@out A, @error @owned Error), (uint64_t)v8, v5, v6, a3, MEMORY[0x24BEE3F20], (uint64_t)&v9);
}

Swift::Void __swiftcall AES.CTR.Nonce.incrementCounter()()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;

  v1 = bswap32(*(_DWORD *)(v0 + 12));
  *(_DWORD *)(v0 + 12) = bswap32(v1 + 1);
  if (v1 == -1)
  {
    v2 = bswap32(*(_DWORD *)(v0 + 8));
    *(_DWORD *)(v0 + 8) = bswap32(v2 + 1);
    if (v2 == -1)
      *(_QWORD *)v0 = bswap64(bswap64(*(_QWORD *)v0) + 1);
  }
}

uint64_t static AES.CTR.encrypt<A>(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return static AES.CTR.encrypt<A>(_:using:nonce:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  int v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;

  v5 = a4;
  v8 = HIDWORD(a4);
  MEMORY[0x24BDAC7A8](a1, a1);
  (*(void (**)(_BYTE *))(v10 + 16))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v18 = Data.init<A>(_:)();
  v19 = v11;
  v14 = a2;
  v15 = a3;
  v16 = v5;
  v17 = v8;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
  result = v18;
  if (v4)
    return outlined consume of Data._Representation(v18, v19);
  return result;
}

uint64_t static AES.CTR.decryptInPlace(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  return specialized static AES.CTR.encryptInPlace(_:using:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t static AES.CTR.decrypt<A>(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return static AES.CTR.encrypt<A>(_:using:nonce:)(a1, a2, a3, a4);
}

uint64_t AES.CTR.Nonce.init()()
{
  uint64_t v0;
  uint64_t v2;

  v2 = 0;
  MEMORY[0x24BD00C64](&v2, 8);
  v0 = v2;
  v2 = 0;
  MEMORY[0x24BD00C64](&v2, 8);
  v2 = 0;
  MEMORY[0x24BD00C64](&v2, 8);
  return v0;
}

uint64_t AES.CTR.Nonce.init<A>(nonceBytes:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, a1, a2);
  if (v7 == 12)
  {
    v8 = *(void (**)(char *, uint64_t))(v4 + 8);
    v8(v6, a2);
LABEL_4:
    v13 = 0;
    v14 = 0;
    UnsafeMutableRawBufferPointer.copyBytes<A>(from:)();
    v8(a1, a2);
    return v13;
  }
  v9 = dispatch thunk of Collection.count.getter();
  v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  v8(v6, a2);
  if (v9 == 16)
    goto LABEL_4;
  lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError();
  swift_allocError();
  *v11 = 0;
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v8)(a1, a2);
}

BOOL static AESCTRError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AESCTRError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int AESCTRError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AESCTRError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AESCTRError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AESCTRError()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AESCTRError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X12 }
}

uint64_t sub_249BD5960@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Data.InlineSlice.ensureUniqueReference()();
  v3 = *v1;
  v4 = v1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v6 = v5;
  v7 = __DataStorage._offset.getter();
  v8 = v3 - v7;
  if (__OFSUB__(v3, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v4 - v3;
  v10 = __DataStorage._length.getter();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  a1(v6 + v8, v6 + v8 + v11);
}

uint64_t specialized static AES.CTR.encryptInPlace(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int8x8_t *v36;
  int8x8_t *v37;
  unint64_t v38;
  int8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  _QWORD v51[3];

  v51[2] = *MEMORY[0x24BDAC8D0];
  result = SymmetricKey.bitCount.getter();
  if (result == 128)
  {
LABEL_2:
    if (a1 && a2 - a1 >= 1)
    {
      v11 = HIDWORD(a5);
      lazy protocol witness table accessor for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer();
      v12 = a2 - a1;
      v13 = a5;
      v43 = a1;
      v14 = 0;
      v15 = 0;
      v16 = a2 - a1;
      v17 = a1;
      v18 = a4;
      do
      {
        v46 = v16 - 16;
        v47 = v14;
        if (v16 >= 16)
          v26 = 16;
        else
          v26 = v16;
        v27 = v18;
        v48 = v18;
        if (v12 - 16 * v14 >= 16)
          v28 = 16;
        else
          v28 = v12 - 16 * v14;
        v29 = v13;
        v49 = v13;
        v50 = v11;
        v30 = v11;
        v45 = v15 + 16;
        v31 = __OFADD__(v15, 16);
        v44 = v31;
        v51[0] = &v48;
        v51[1] = v51;
        v32 = v12;
        result = static AES.permute<A>(_:key:)();
        if (v5)
          return result;
        v33 = v32 - v15;
        if (v32 - v15 >= 16)
          v33 = 16;
        if (v33 < 0)
          goto LABEL_51;
        v12 = v32;
        v18 = v27;
        if (v33)
        {
          v34 = v51[0];
          if (v28 < 8 || v43 + v15 < v51[0] + v28 && v43 + v15 + v28 > v51[0])
          {
            v35 = 0;
            do
            {
LABEL_34:
              *(_BYTE *)(v17 + v35) ^= *(_BYTE *)(v34 + v35);
              ++v35;
            }
            while (v26 != v35);
            goto LABEL_5;
          }
          if (v28 >= 0x10)
          {
            v35 = v28 & 0xFFFFFFFFFFFFFFF0;
            *(int8x16_t *)(v43 + v15) = veorq_s8(*(int8x16_t *)(v43 + v15), *(int8x16_t *)v51[0]);
            if (v28 == (v28 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_5;
            if ((v28 & 8) == 0)
              goto LABEL_34;
          }
          else
          {
            v35 = 0;
          }
          v36 = (int8x8_t *)(v17 + v35);
          v37 = (int8x8_t *)(v34 + v35);
          v38 = v35 - (v26 & 0xFFFFFFFFFFFFFFF8);
          v35 = v28 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v39 = *v37++;
            *v36 = veor_s8(*v36, v39);
            ++v36;
            v38 += 8;
          }
          while (v38);
          if (v28 != v35)
            goto LABEL_34;
        }
LABEL_5:
        v19 = bswap32(v30);
        v20 = __CFADD__(v19, 1);
        v21 = v19 + 1;
        v22 = v20;
        LODWORD(v11) = bswap32(v21);
        v23 = bswap32(v29);
        v20 = __CFADD__(v23, 1);
        v24 = bswap32(v23 + 1);
        v25 = bswap64(bswap64(v27) + 1);
        if (!v20)
          v25 = v27;
        if ((v22 & 1) != 0)
          v13 = v24;
        else
          v13 = v29;
        if ((v22 & 1) != 0)
          v18 = v25;
        v15 += 16;
        v14 = v47 + 1;
        v17 += 16;
        v16 = v46;
      }
      while (((v45 < v12) & ~v44) != 0);
    }
  }
  else
  {
    v40 = 5;
    do
    {
      v41 = v40 - 3;
      if (__OFADD__(v40 - 4, 1))
      {
        __break(1u);
LABEL_51:
        __break(1u);
      }
      if (outlined read-only object #0 of static AES.CTR.encryptInPlace(_:using:nonce:)[v40] == result)
        goto LABEL_2;
      ++v40;
    }
    while (v41 != 3);
    lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError();
    swift_allocError();
    *v42 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawBufferPointer) -> (@out A, @error @owned Error)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v3 + 24))();
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t partial apply for closure #1 in static AES.CTR.encrypt<A>(_:using:nonce:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized static AES.CTR.encryptInPlace(_:using:nonce:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError;
  if (!lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for AESCTRError, &type metadata for AESCTRError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError;
  if (!lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for AESCTRError, &type metadata for AESCTRError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError);
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.CTR()
{
  return &type metadata for AES.CTR;
}

ValueMetadata *type metadata accessor for AES.CTR.Nonce()
{
  return &type metadata for AES.CTR.Nonce;
}

uint64_t getEnumTagSinglePayload for AESCTRError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AESCTRError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249BD6114 + 4 * byte_249C2AC45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249BD6148 + 4 * byte_249C2AC40[v4]))();
}

uint64_t sub_249BD6148(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249BD6150(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249BD6158);
  return result;
}

uint64_t sub_249BD6164(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249BD616CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249BD6170(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249BD6178(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AESCTRError(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AESCTRError()
{
  return &type metadata for AESCTRError;
}

unint64_t lazy protocol witness table accessor for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE1F40], MEMORY[0x24BEE1F38]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer);
  }
  return result;
}

char *specialized VDAFEncodable.encodedBytes.getter(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  char *v4;

  if (!a1)
    return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16), 0, MEMORY[0x24BEE4AF8]);
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16) <= *(_QWORD *)(a1 + 16))
    v1 = *(_QWORD *)(a1 + 16);
  else
    v1 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x24BEE4AF8]);
  v2 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v2);
  return v4;
}

{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x24BEE4AF8]);
  v3 = v2;
  v4 = (0xFFFFFFFEFFFFFFFFLL * a1 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  if (__CFADD__(-a1, a1))
  {
    if (v4 > 0xFFFFFFFEFFFFFFFFLL)
      v4 = 0;
    else
      ++v4;
  }
  v6 = *((_QWORD *)v2 + 2);
  v5 = *((_QWORD *)v2 + 3);
  v7 = v5 >> 1;
  v8 = v6 + 1;
  if (v5 >> 1 <= v6)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v2);
    v5 = *((_QWORD *)v3 + 3);
    v7 = v5 >> 1;
  }
  *((_QWORD *)v3 + 2) = v8;
  v3[v6 + 32] = v4;
  v9 = v6 + 2;
  if (v7 < (uint64_t)(v6 + 2))
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 2, 1, v3);
    v5 = *((_QWORD *)v3 + 3);
    v7 = v5 >> 1;
  }
  *((_QWORD *)v3 + 2) = v9;
  v3[v8 + 32] = BYTE1(v4);
  v10 = v6 + 3;
  if (v7 < (uint64_t)(v6 + 3))
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 3, 1, v3);
    v5 = *((_QWORD *)v3 + 3);
    v7 = v5 >> 1;
  }
  *((_QWORD *)v3 + 2) = v10;
  v3[v9 + 32] = BYTE2(v4);
  v11 = v6 + 4;
  if (v7 < (uint64_t)(v6 + 4))
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 4, 1, v3);
    v5 = *((_QWORD *)v3 + 3);
    v7 = v5 >> 1;
  }
  *((_QWORD *)v3 + 2) = v11;
  v3[v10 + 32] = BYTE3(v4);
  v12 = v6 + 5;
  if (v7 < (uint64_t)(v6 + 5))
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 5, 1, v3);
    v5 = *((_QWORD *)v3 + 3);
    v7 = v5 >> 1;
  }
  *((_QWORD *)v3 + 2) = v12;
  v3[v11 + 32] = BYTE4(v4);
  v13 = v6 + 6;
  if (v7 < (uint64_t)(v6 + 6))
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 6, 1, v3);
    v5 = *((_QWORD *)v3 + 3);
    v7 = v5 >> 1;
  }
  *((_QWORD *)v3 + 2) = v13;
  v3[v12 + 32] = BYTE5(v4);
  v14 = v6 + 7;
  if (v7 < (uint64_t)(v6 + 7))
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 7, 1, v3);
    v5 = *((_QWORD *)v3 + 3);
    v7 = v5 >> 1;
  }
  *((_QWORD *)v3 + 2) = v14;
  v3[v13 + 32] = BYTE6(v4);
  if (v7 < (uint64_t)(v6 + 8))
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 8, 1, v3);
  *((_QWORD *)v3 + 2) = v6 + 8;
  v3[v14 + 32] = HIBYTE(v4);
  return v3;
}

char *specialized VDAFEncodable.encodedBytes.getter(char *result)
{
  unint64_t v1;
  char *v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = *((_QWORD *)result + 2);
  if (v1 >> 60)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8 * v1, 0, MEMORY[0x24BEE4AF8]);
    if (v1)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v1; ++i)
      {
        v5 = *(_QWORD *)&v2[8 * i + 32];
        v6 = (0xFFFFFFFEFFFFFFFFLL * v5 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        if (__CFADD__(-v5, v5))
        {
          if (v6 > 0xFFFFFFFEFFFFFFFFLL)
            v6 = 0;
          else
            ++v6;
        }
        v8 = *((_QWORD *)v3 + 2);
        v7 = *((_QWORD *)v3 + 3);
        v9 = v7 >> 1;
        v10 = v8 + 1;
        if (v7 >> 1 <= v8)
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v3);
          v7 = *((_QWORD *)v3 + 3);
          v9 = v7 >> 1;
        }
        *((_QWORD *)v3 + 2) = v10;
        v3[v8 + 32] = v6;
        v11 = v8 + 2;
        if (v9 < (uint64_t)(v8 + 2))
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 2, 1, v3);
          v7 = *((_QWORD *)v3 + 3);
          v9 = v7 >> 1;
        }
        *((_QWORD *)v3 + 2) = v11;
        v3[v10 + 32] = BYTE1(v6);
        v12 = v8 + 3;
        if (v9 < (uint64_t)(v8 + 3))
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 3, 1, v3);
          v7 = *((_QWORD *)v3 + 3);
          v9 = v7 >> 1;
        }
        *((_QWORD *)v3 + 2) = v12;
        v3[v11 + 32] = BYTE2(v6);
        v13 = v8 + 4;
        if (v9 < (uint64_t)(v8 + 4))
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 4, 1, v3);
          v7 = *((_QWORD *)v3 + 3);
          v9 = v7 >> 1;
        }
        *((_QWORD *)v3 + 2) = v13;
        v3[v12 + 32] = BYTE3(v6);
        v14 = v8 + 5;
        if (v9 < (uint64_t)(v8 + 5))
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 5, 1, v3);
          v7 = *((_QWORD *)v3 + 3);
          v9 = v7 >> 1;
        }
        *((_QWORD *)v3 + 2) = v14;
        v3[v13 + 32] = BYTE4(v6);
        v15 = v8 + 6;
        if (v9 < (uint64_t)(v8 + 6))
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 6, 1, v3);
          v7 = *((_QWORD *)v3 + 3);
          v9 = v7 >> 1;
        }
        *((_QWORD *)v3 + 2) = v15;
        v3[v14 + 32] = BYTE5(v6);
        v16 = v8 + 7;
        if (v9 < (uint64_t)(v8 + 7))
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 7, 1, v3);
          v7 = *((_QWORD *)v3 + 3);
          v9 = v7 >> 1;
        }
        *((_QWORD *)v3 + 2) = v16;
        v3[v15 + 32] = BYTE6(v6);
        if (v9 < (uint64_t)(v8 + 8))
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 8, 1, v3);
        *((_QWORD *)v3 + 2) = v8 + 8;
        v3[v16 + 32] = HIBYTE(v6);
      }
      swift_bridgeObjectRelease();
    }
    return v3;
  }
  return result;
}

uint64_t specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  _QWORD v13[2];

  v6 = *a1;
  v7 = 16;
  do
  {
    result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(255, v13);
    if (v13[1])
      v9 = 1;
    else
      v9 = v13[0] >= (unint64_t)a2;
    if (!v9)
    {
      __break(1u);
      return result;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
      v6 = result;
    }
    v11 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    if (v11 >= v10 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, (char *)v6);
      v6 = result;
    }
    *(_QWORD *)(v6 + 16) = v11 + 1;
    *(_BYTE *)(v6 + v11 + 32) = a2;
    *((_QWORD *)&v12 + 1) = a3;
    *(_QWORD *)&v12 = a2;
    a2 = v12 >> 8;
    a3 >>= 8;
    --v7;
  }
  while (v7);
  *a1 = v6;
  return result;
}

void specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_249BD6910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  a14 = v17;
  a15 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UInt8>, MEMORY[0x24BDD06A0]);
  LOBYTE(a11) = v15;
  __swift_project_boxed_opaque_existential_1(&a11, v17);
  Data._Representation.replaceSubrange(_:with:count:)();
  v18 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))((char *)sub_249BD69B4 + 4 * byte_249C2AD14[*(_QWORD *)(v16 + 8) >> 62]))(v18);
}

uint64_t sub_249BD69B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a14 = v17;
  a15 = v18;
  LOBYTE(a11) = HIBYTE(v15);
  __swift_project_boxed_opaque_existential_1(&a11, v17);
  Data._Representation.replaceSubrange(_:with:count:)();
  v19 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))((char *)sub_249BD6A28 + 4 * byte_249C2AD18[*(_QWORD *)(v16 + 8) >> 62]))(v19);
}

uint64_t sub_249BD6A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a14 = v17;
  a15 = v18;
  LOBYTE(a11) = BYTE2(v15);
  __swift_project_boxed_opaque_existential_1(&a11, v17);
  Data._Representation.replaceSubrange(_:with:count:)();
  v19 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))((char *)sub_249BD6A9C + 4 * byte_249C2AD1C[*(_QWORD *)(v16 + 8) >> 62]))(v19);
}

uint64_t sub_249BD6A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a14 = v17;
  a15 = v18;
  LOBYTE(a11) = HIBYTE(v15);
  __swift_project_boxed_opaque_existential_1(&a11, v17);
  Data._Representation.replaceSubrange(_:with:count:)();
  v19 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))((char *)sub_249BD6B10 + 4 * byte_249C2AD20[*(_QWORD *)(v16 + 8) >> 62]))(v19);
}

uint64_t sub_249BD6B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a14 = v17;
  a15 = v18;
  LOBYTE(a11) = BYTE4(v15);
  __swift_project_boxed_opaque_existential_1(&a11, v17);
  Data._Representation.replaceSubrange(_:with:count:)();
  v19 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))((char *)sub_249BD6B84 + 4 * byte_249C2AD24[*(_QWORD *)(v16 + 8) >> 62]))(v19);
}

uint64_t sub_249BD6B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a14 = v17;
  a15 = v18;
  LOBYTE(a11) = BYTE5(v15);
  __swift_project_boxed_opaque_existential_1(&a11, v17);
  Data._Representation.replaceSubrange(_:with:count:)();
  v19 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))((char *)sub_249BD6BF8 + 4 * byte_249C2AD28[*(_QWORD *)(v16 + 8) >> 62]))(v19);
}

uint64_t sub_249BD6BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a14 = v17;
  a15 = v18;
  LOBYTE(a11) = BYTE6(v15);
  __swift_project_boxed_opaque_existential_1(&a11, v17);
  Data._Representation.replaceSubrange(_:with:count:)();
  v19 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))((char *)sub_249BD6C6C + 4 * byte_249C2AD2C[*(_QWORD *)(v16 + 8) >> 62]))(v19);
}

uint64_t sub_249BD6C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  v5 = v1;
  v6 = v2;
  LOBYTE(v4[0]) = HIBYTE(v0);
  __swift_project_boxed_opaque_existential_1(v4, v1);
  Data._Representation.replaceSubrange(_:with:count:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
    v4 = result;
  }
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v8 = v6 >> 1;
  v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v9;
  *(_BYTE *)(v4 + v7 + 32) = a2;
  v10 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 2, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v10;
  *(_BYTE *)(v4 + v9 + 32) = BYTE1(a2);
  v11 = v7 + 3;
  if (v8 < (uint64_t)(v7 + 3))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 3, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v11;
  *(_BYTE *)(v4 + v10 + 32) = BYTE2(a2);
  if (v8 < (uint64_t)(v7 + 4))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 4, 1, (char *)v4);
    v4 = result;
  }
  *(_QWORD *)(v4 + 16) = v7 + 4;
  *(_BYTE *)(v4 + v11 + 32) = HIBYTE(a2);
  *a1 = v4;
  return result;
}

uint64_t specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v4 = *a1;
  v5 = 8;
  do
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
      v4 = result;
    }
    v8 = *(_QWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    if (v8 >= v7 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, (char *)v4);
      v4 = result;
    }
    *(_QWORD *)(v4 + 16) = v8 + 1;
    *(_BYTE *)(v4 + v8 + 32) = a2;
    a2 >>= 8;
    --v5;
  }
  while (v5);
  *a1 = v4;
  return result;
}

char *specialized Array<A>.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[7];
  _QWORD v32[5];
  char v33;

  if ((a8 & 1) != 0)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v19 = 0;
    v19[1] = 0;
    goto LABEL_10;
  }
  v33 = a5 & 1;
  if ((a7 | a6) < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v15 = a6 * a7;
  if ((unsigned __int128)(a6 * (__int128)a7) >> 64 != (a6 * a7) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = a4;
  v10 = a3;
  v16 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v15 == v16)
  {
    v11 = a2;
    if ((a4 & 1) == 0)
    {
LABEL_7:
      specialized _copyCollectionToContiguousArray<A>(_:)(a1, v11, v10, v9);
LABEL_17:
      v30 = (2 * *(_QWORD *)(v17 + 16)) | 1;
      v32[0] = v17;
      v32[1] = v17 + 32;
      v32[2] = 0;
      v32[3] = v30;
      MEMORY[0x24BDAC7A8](v17, v18);
      v31[2] = v32;
      v31[3] = a7;
      v31[4] = &v33;
      v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64VsAE_pTg5((char *)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t)v31, 0, a6);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v8;
    }
    v27 = type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v31[6] = v27;
    v28 = swift_dynamicCastClass();
    if (!v28)
    {
      swift_unknownObjectRelease();
      v28 = MEMORY[0x24BEE4AF8];
    }
    v29 = *(_QWORD *)(v28 + 16);
    swift_release();
    if (v29 == v15)
    {
      v17 = swift_dynamicCastClass();
      if (!v17)
      {
        swift_unknownObjectRelease();
        v17 = MEMORY[0x24BEE4AF8];
      }
      goto LABEL_17;
    }
LABEL_21:
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 2107936;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x203A746F67202CLL;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  v32[4] = v16;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v8 = (char *)0xD000000000000020;
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v25 = 0xD000000000000020;
  v25[1] = 0x8000000249C306D0;
LABEL_10:
  swift_willThrow();
  swift_unknownObjectRelease();
  return v8;
}

size_t specialized Array<A>.init<A>(from:parameter:)(size_t result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char *v6;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];
  _QWORD v22[5];
  char v23;

  if ((a6 & 1) != 0)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v11 = 0;
    v11[1] = 0;
    goto LABEL_11;
  }
  v23 = a3 & 1;
  if ((a5 | a4) < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a4 * a5;
    if ((unsigned __int128)(a4 * (__int128)a5) >> 64 == (a4 * a5) >> 63)
    {
      if (result)
      {
        v10 = a2 - result;
        if (v9 == a2 - result)
          goto LABEL_13;
      }
      else
      {
        if (!v9)
        {
LABEL_13:
          v18 = specialized _copyCollectionToContiguousArray<A>(_:)(result, a2);
          v19 = *(_QWORD *)(v18 + 16);
          v22[0] = v18;
          v22[1] = v18 + 32;
          v22[2] = 0;
          v22[3] = (2 * v19) | 1;
          MEMORY[0x24BDAC7A8](v18, v20);
          v21[2] = v22;
          v21[3] = a5;
          v21[4] = &v23;
          v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64VsAE_pTg5((char *)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t)v21, 0, a4);
          swift_unknownObjectRelease();
          return (size_t)v6;
        }
        v10 = 0;
      }
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 2107936;
      v13._object = (void *)0xE300000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 0x203A746F67202CLL;
      v15._object = (void *)0xE700000000000000;
      String.append(_:)(v15);
      v22[4] = v10;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v6 = (char *)0xD000000000000020;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *v17 = 0xD000000000000020;
      v17[1] = 0x8000000249C306D0;
LABEL_11:
      swift_willThrow();
      return (size_t)v6;
    }
  }
  __break(1u);
  return result;
}

char *specialized Array<A>.init<A>(from:)(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else if ((v4 & 7) != 0)
  {
    _StringGuts.grow(_:)(69);
    v5._countAndFlagsBits = 0x69463C7961727241;
    v5._object = (void *)0xEE003E3436646C65;
    String.append(_:)(v5);
    v6._object = (void *)0x8000000249C30120;
    v6._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v6);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0xD00000000000002ELL;
    v8._object = (void *)0x8000000249C30140;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0xE000000000000000;
    *(_BYTE *)(v11 + 16) = 0;
    swift_willThrow();
    return (char *)swift_unknownObjectRelease();
  }
  else
  {
    v12 = v4 + 7;
    if (v4 >= 0)
      v12 = (a4 >> 1) - a3;
    return specialized Array<A>.init<A>(from:parameter:)((uint64_t)result, a2, a3, a4, 1, v12 >> 3, 8, 0);
  }
  return result;
}

size_t specialized Array<A>.init<A>(from:)(size_t a1, unint64_t a2)
{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v2 = a2 - a1;
    if (((a2 - a1) & 7) != 0)
    {
      _StringGuts.grow(_:)(69);
      v3._countAndFlagsBits = 0x69463C7961727241;
      v3._object = (void *)0xEE003E3436646C65;
      String.append(_:)(v3);
      v4._object = (void *)0x8000000249C30120;
      v4._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v4);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 0xD00000000000002ELL;
      v6._object = (void *)0x8000000249C30140;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 41;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0xE000000000000000;
      *(_BYTE *)(v9 + 16) = 0;
      return swift_willThrow();
    }
    v12 = v2 + 7;
    if (v2 >= 0)
      v12 = a2 - a1;
    v11 = v12 >> 3;
  }
  else
  {
    v11 = 0;
  }
  return specialized Array<A>.init<A>(from:parameter:)(a1, a2, 1, v11, 8, 0);
}

uint64_t specialized VDAFEncodable.encodedData.getter(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  result = specialized Prio3PublicShare.encodedLength.getter(a1);
  if (result)
  {
    v3 = result;
    if (result <= 14)
    {
      result = 0;
      v12 = 0;
      v13 = 0;
      if (!a1)
        return result;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      v4 = __DataStorage.init(capacity:)();
      if (v3 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        v12 = result;
        v13 = v4 | 0x8000000000000000;
        if (!a1)
          return result;
      }
      else
      {
        result = 0;
        v12 = 0;
        v13 = v4 | 0x4000000000000000;
        if (!a1)
          return result;
      }
    }
  }
  else
  {
    v12 = 0;
    v13 = 0xC000000000000000;
    if (!a1)
      return result;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a1 + 8 * v7++ + 32);
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v11 = v6;
      v9[0] = v8;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      swift_bridgeObjectRelease();
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t specialized FullyLinearProof.proofLength.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 48);
  specialized Gadget.wirePolynomialLength.getter();
  v3 = specialized Gadget.gadgetPolynomialLength.getter();
  v11 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  v5 = __OFADD__(v2, v3);
  v6 = v2 + v3;
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v11;
  v1 = *(_QWORD *)(v11 + 16);
  v4 = *(_QWORD *)(v11 + 24);
  v3 = v1 + 1;
  if (v1 >= v4 >> 1)
  {
LABEL_9:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v3, 1);
    v7 = v11;
  }
  v4 = 0;
  v8 = 0;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 8 * v1 + 32) = v6;
  do
  {
    v9 = *(_QWORD *)(v7 + 8 * v4 + 32);
    v5 = __OFADD__(v8, v9);
    v8 += v9;
    if (v5)
    {
      __break(1u);
      goto LABEL_8;
    }
    ++v4;
  }
  while (v3 != v4);
  swift_release();
  return v8;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 8);
  specialized Gadget.wirePolynomialLength.getter();
  v3 = specialized Gadget.gadgetPolynomialLength.getter();
  v11 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  v5 = __OFADD__(v2, v3);
  v6 = v2 + v3;
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v11;
  v1 = *(_QWORD *)(v11 + 16);
  v4 = *(_QWORD *)(v11 + 24);
  v3 = v1 + 1;
  if (v1 >= v4 >> 1)
  {
LABEL_9:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v3, 1);
    v7 = v11;
  }
  v4 = 0;
  v8 = 0;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 8 * v1 + 32) = v6;
  do
  {
    v9 = *(_QWORD *)(v7 + 8 * v4 + 32);
    v5 = __OFADD__(v8, v9);
    v8 += v9;
    if (v5)
    {
      __break(1u);
      goto LABEL_8;
    }
    ++v4;
  }
  while (v3 != v4);
  swift_release();
  return v8;
}

unint64_t specialized FieldElement.integerValue.getter(uint64_t a1)
{
  uint64_t v2;
  unint64_t result;

  v2 = -a1;
  result = (0xFFFFFFFEFFFFFFFFLL * a1 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  if (__CFADD__(v2, a1))
  {
    if (result > 0xFFFFFFFEFFFFFFFFLL)
      return 0;
    else
      ++result;
  }
  return result;
}

_OWORD *specialized FieldElement.integerValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  _BOOL4 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *result;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  _BOOL8 v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  char v28;
  _BOOL4 v29;
  uint64_t v30;
  unint64_t v31[2];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;

  v36 = a1;
  v37 = a2;
  v35 = xmmword_249C291E0;
  _UInt128.multipliedFullWidth(by:)(&v32, &v38, (unint64_t *)&v35);
  v4 = v32;
  v5 = v38;
  v38 = xmmword_249C2A740;
  v36 = -(uint64_t)v5;
  v37 = 0;
  _UInt128.multipliedFullWidth(by:)(&v32, &v33, (unint64_t *)&v36);
  v6 = __CFADD__(v33, (_QWORD)v5);
  v7 = v34 + *((_QWORD *)&v5 + 1);
  if (__CFADD__(v34, *((_QWORD *)&v5 + 1)))
    v8 = 1;
  else
    v8 = v7 == -1 && v6;
  v9 = v7 + v6;
  v10 = v4 + v32;
  v11 = __CFADD__((_QWORD)v4, (_QWORD)v32);
  v12 = *((_QWORD *)&v4 + 1) + *((_QWORD *)&v32 + 1);
  if (__CFADD__(*((_QWORD *)&v4 + 1), *((_QWORD *)&v32 + 1)))
  {
    if (v11)
      goto LABEL_20;
  }
  else
  {
    if (v12 == -1)
    {
      v12 = v11 - 1;
      if ((v8 & 1) == 0)
        goto LABEL_21;
      goto LABEL_17;
    }
    if (v11)
    {
LABEL_20:
      ++v12;
      if ((v8 & 1) == 0)
        goto LABEL_21;
LABEL_17:
      v13 = 1;
      goto LABEL_22;
    }
  }
  if ((v8 & 1) != 0)
    goto LABEL_17;
LABEL_21:
  v13 = 0;
LABEL_22:
  v14 = v10 + v13;
  if (__CFADD__(v10, v13))
    v15 = v12 + 1;
  else
    v15 = v12;
  v35 = xmmword_249C2A740;
  v31[0] = -v9;
  v31[1] = 0;
  result = _UInt128.multipliedFullWidth(by:)(&v38, &v36, v31);
  v17 = *((_QWORD *)&v38 + 1);
  v18 = __CFADD__(v36, v9);
  v19 = v37 + v14;
  if (__CFADD__(v37, v14))
  {
    v20 = v19 + v18;
    v21 = v15 + v38;
    v22 = __CFADD__(v15, (_QWORD)v38);
    if (*((_QWORD *)&v38 + 1) == -1)
    {
      if (!v22)
      {
        v26 = __CFADD__(v21, 1);
        v27 = v21 + 1;
        if (v26)
          goto LABEL_68;
LABEL_71:
        v26 = v20-- != 0;
        v30 = 28;
        if (!v26)
          v30 = 27;
        v27 += v30;
        goto LABEL_74;
      }
      v17 = 0;
    }
    else if (v22)
    {
      v17 = *((_QWORD *)&v38 + 1) + 1;
      goto LABEL_51;
    }
LABEL_53:
    v26 = __CFADD__(v21, 1);
    v27 = v21 + 1;
    v28 = v26;
    goto LABEL_61;
  }
  v23 = v19 == -1 && v18;
  v20 = v19 + v18;
  v21 = v15 + v38;
  v24 = __CFADD__(v15, (_QWORD)v38);
  if (*((_QWORD *)&v38 + 1) == -1)
  {
    v17 = v24 - 1;
    if (v23)
      goto LABEL_51;
  }
  else
  {
    if (v24)
    {
      v17 = *((_QWORD *)&v38 + 1) + 1;
      if (!v23)
        goto LABEL_56;
LABEL_51:
      v25 = 1;
      goto LABEL_57;
    }
    if (v23)
      goto LABEL_53;
  }
LABEL_56:
  v25 = 0;
LABEL_57:
  v26 = __CFADD__(v21, v25);
  v27 = v21 + v25;
  v28 = v26;
  if (v17 == -1)
  {
    if ((v28 & 1) != 0)
      goto LABEL_68;
    goto LABEL_71;
  }
LABEL_61:
  if ((v28 & 1) != 0 || v17)
    goto LABEL_71;
LABEL_68:
  v29 = v20 == 0;
  if (v27 != -28)
    v29 = v27 < 0xFFFFFFFFFFFFFFE4;
  if (!v29)
    goto LABEL_71;
LABEL_74:
  *a3 = v20;
  a3[1] = v27;
  return result;
}

void specialized FieldElement.init<A>(bytes:mask:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;

  if (!__OFSUB__(a3 >> 1, a2))
  {
    if ((a3 >> 1) - a2 == 8)
    {
      v8 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(a1, a2, a3);
      if (v5)
      {
LABEL_8:
        swift_unknownObjectRelease();
        return;
      }
      v9 = v8 & a4;
      if (v9 < 0xFFFFFFFF00000001)
      {
        specialized FieldElement.init(_:)(v9, a5);
        goto LABEL_8;
      }
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 5;
    }
    else
    {
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 0x203A746F67202CLL;
      v11._object = (void *)0xE700000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(_QWORD *)v13 = 0xD000000000000019;
      *(_QWORD *)(v13 + 8) = 0x8000000249C303D0;
      *(_BYTE *)(v13 + 16) = 0;
    }
    swift_willThrow();
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t specialized static FieldElement.elementsToIntegers(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      v6 = (0xFFFFFFFEFFFFFFFFLL * v5 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      if (__CFADD__(-v5, v5))
      {
        if (v6 > 0xFFFFFFFEFFFFFFFFLL)
          v6 = 0;
        else
          ++v6;
      }
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized FieldElement.encode<A>(into:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = (0xFFFFFFFEFFFFFFFFLL * a2 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  if (__CFADD__(-a2, a2))
  {
    if (v3 > 0xFFFFFFFEFFFFFFFFLL)
      v3 = 0;
    else
      ++v3;
  }
  v4 = *a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
    v4 = result;
  }
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v8 = v6 >> 1;
  v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v9;
  *(_BYTE *)(v4 + v7 + 32) = v3;
  v10 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 2, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v10;
  *(_BYTE *)(v4 + v9 + 32) = BYTE1(v3);
  v11 = v7 + 3;
  if (v8 < (uint64_t)(v7 + 3))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 3, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v11;
  *(_BYTE *)(v4 + v10 + 32) = BYTE2(v3);
  v12 = v7 + 4;
  if (v8 < (uint64_t)(v7 + 4))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 4, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v12;
  *(_BYTE *)(v4 + v11 + 32) = BYTE3(v3);
  v13 = v7 + 5;
  if (v8 < (uint64_t)(v7 + 5))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 5, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v13;
  *(_BYTE *)(v4 + v12 + 32) = BYTE4(v3);
  v14 = v7 + 6;
  if (v8 < (uint64_t)(v7 + 6))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 6, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v14;
  *(_BYTE *)(v4 + v13 + 32) = BYTE5(v3);
  v15 = v7 + 7;
  if (v8 < (uint64_t)(v7 + 7))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 7, 1, (char *)v4);
    v4 = result;
    v6 = *(_QWORD *)(result + 24);
    v8 = v6 >> 1;
  }
  *(_QWORD *)(v4 + 16) = v15;
  *(_BYTE *)(v4 + v14 + 32) = BYTE6(v3);
  if (v8 < (uint64_t)(v7 + 8))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 8, 1, (char *)v4);
    v4 = result;
  }
  *(_QWORD *)(v4 + 16) = v7 + 8;
  *(_BYTE *)(v4 + v15 + 32) = HIBYTE(v3);
  *a1 = v4;
  return result;
}

uint64_t specialized Prio3PrepareState.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char *v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t result;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;

  outlined init with take of Share<Field64>(a3, (uint64_t)&v64, &demangling cache variable for type metadata for Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?);
  if (v65 == 255)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v9 = 0;
    v9[1] = 0;
    return swift_willThrow();
  }
  v10 = v64;
  v11 = v66;
  v12 = v68;
  if (a1)
    v13 = a2 - a1;
  else
    v13 = 0;
  v14 = v64;
  if ((v65 & 1) == 0)
  {
    if ((unint64_t)(v64 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v14 = 8 * v64;
  }
  v15 = __OFADD__(v14, v66);
  v16 = v14 + v66;
  if (v15)
  {
    __break(1u);
    goto LABEL_39;
  }
  v5 = (char *)(v65 & 1);
  if (v13 != v16)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v5)
    {
      if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      v10 *= 8;
    }
    if (!__OFADD__(v10, v11))
    {
      v69 = v10 + v11;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x203A746F67202CLL;
      v39._object = (void *)0xE700000000000000;
      String.append(_:)(v39);
      v69 = v13;
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *v41 = 0xD000000000000061;
      v41[1] = 0x8000000249C307E0;
      return swift_willThrow();
    }
    goto LABEL_40;
  }
  v63 = v4;
  v61 = v66;
  v17 = v67;
  v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v19 = v17;
  a2 = v18;
  v20 = v10;
  v62 = v5;
  if (!v5)
  {
    if ((unint64_t)(v10 - 0x1000000000000000) >> 61 == 7)
    {
      v20 = 8 * v10;
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_14:
  v57 = v12;
  v58 = a4;
  v60 = v19;
  v21 = (2 * *(_QWORD *)(v18 + 16)) | 1;
  v22 = (char *)specialized Collection.prefix(_:)(v20, v18, v18 + 32, 0, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = specialized Collection.dropFirst(_:)(v20, a2, a2 + 32, 0, v21);
  v59 = v30;
  v32 = v31;
  v34 = v33;
  swift_retain();
  v35 = specialized Share.init<A>(from:parameter:)(v22, v24, v26, v28, v10, (char)v62);
  if (v4)
    return swift_unknownObjectRelease();
  v42 = v35;
  LOBYTE(v5) = v36;
  a2 = v29;
  if (v61 <= 0)
  {
    result = swift_unknownObjectRelease();
    v50 = 0;
    v51 = v60;
    goto LABEL_35;
  }
  v62 = v35;
  v43 = v34;
  v44 = specialized Collection.prefix(_:)(v61, v29, v59, v32, v34);
  v56 = v45;
  v63 = v46;
  v48 = v47;
  specialized Collection.dropFirst(_:)(v61, v29, v59, v32, v43);
  if ((v48 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v52 = swift_dynamicCastClass();
    a2 = v44;
    if (!v52)
    {
      swift_unknownObjectRelease();
      v52 = MEMORY[0x24BEE4AF8];
    }
    v53 = *(_QWORD *)(v52 + 16);
    swift_release();
    v61 = v48;
    v42 = v62;
    v15 = __OFSUB__(v48 >> 1, v63);
    v54 = (v48 >> 1) - v63;
    v51 = v60;
    if (v15)
      goto LABEL_45;
    if (v53 != v54)
      goto LABEL_46;
    v55 = swift_dynamicCastClass();
    if (v55)
    {
      v50 = v55;
    }
    else
    {
      swift_unknownObjectRelease();
      v50 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_34;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    a2 = v44;
    specialized _copyCollectionToContiguousArray<A>(_:)(v44, v56, v63, v48);
    v50 = v49;
    v51 = v60;
    v42 = v62;
LABEL_34:
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
LABEL_35:
    if ((v51 & 0x8000000000000000) != 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v51 <= 0xFF)
      break;
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    v44 = a2;
    swift_unknownObjectRelease();
    v48 = v61;
  }
  *(_QWORD *)v58 = v42;
  *(_BYTE *)(v58 + 8) = v5 & 1;
  *(_QWORD *)(v58 + 16) = v50;
  *(_BYTE *)(v58 + 24) = v51;
  *(_QWORD *)(v58 + 32) = v57;
  return result;
}

uint64_t specialized Prio3PrepareState.encodedLength.getter()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[16];
  uint64_t v6;
  char v7;
  uint64_t v8;

  outlined init with take of Share<Field64>(v0, (uint64_t)v5, &demangling cache variable for type metadata for Share<Field64>);
  result = outlined init with take of Share<Field64>((uint64_t)v5, (uint64_t)&v6, &demangling cache variable for type metadata for Share<Field64>);
  v2 = *(_QWORD *)(v6 + 16);
  if ((v7 & 1) == 0 && v2)
  {
    if (v2 >> 60)
    {
LABEL_10:
      __break(1u);
      return result;
    }
    v2 *= 8;
  }
  outlined init with take of Share<Field64>(v0 + 16, (uint64_t)&v4, &demangling cache variable for type metadata for Seed?);
  outlined init with take of Share<Field64>((uint64_t)&v4, (uint64_t)&v8, &demangling cache variable for type metadata for Seed?);
  v3 = v8;
  if (v8)
    v3 = *(_QWORD *)(v8 + 16);
  result = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized Prio3PrepareState.encode<A>(into:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = *v2;
  if ((v2[1] & 1) != 0)
  {
    v5 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v5);
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v6; ++i)
      {
        v8 = *(_QWORD *)(v4 + 8 * i + 32);
        specialized FieldElement.encode<A>(into:)(a1, v8);
      }
      swift_bridgeObjectRelease();
    }
  }
  outlined init with take of Share<Field64>((uint64_t)(v2 + 2), (uint64_t)&v11, &demangling cache variable for type metadata for Seed?);
  outlined init with take of Share<Field64>((uint64_t)&v11, (uint64_t)&v12, &demangling cache variable for type metadata for Seed?);
  result = v12;
  if (v12)
  {
    v10 = swift_bridgeObjectRetain();
    return specialized Array.append<A>(contentsOf:)(v10);
  }
  return result;
}

uint64_t Prio3<>.chunkLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t Prio3<>.init(numOfAggregators:numOfProofs:bitWidth:measurementLength:chunkLength:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[7];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a5 < 1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = result;
  result = specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a3, a4);
  if (v6)
    return result;
  v13 = result + a5;
  if (__OFADD__(result, a5))
    goto LABEL_10;
  v14 = __OFSUB__(v13, 1);
  v15 = v13 - 1;
  if (v14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a5 + 0x4000000000000000 < 0)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  *(_QWORD *)&v23 = result;
  *((_QWORD *)&v23 + 1) = a4;
  v24 = 1;
  v25 = a5;
  v26 = v15 / a5;
  v27 = a3;
  v28 = 2 * a5;
  v29 = vdupq_n_s64(2uLL);
  v30 = 2;
  v31 = v15 / a5;
  v32 = a5;
  result = (uint64_t)specialized Prio3.init(flp:numOfAggregators:numOfProofs:)(&v23, v11, a2, (uint64_t)v22);
  v16 = v22[1];
  v17 = v22[2];
  v18 = v22[3];
  v19 = v22[4];
  v20 = v22[5];
  v21 = v22[6];
  *a6 = v22[0];
  a6[1] = v16;
  a6[2] = v17;
  a6[3] = v18;
  a6[4] = v19;
  a6[5] = v20;
  a6[6] = v21;
  return result;
}

__int128 *specialized Prio3.init(flp:numOfAggregators:numOfProofs:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;

  if ((unint64_t)(a2 - 2) >= 0xFE)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v15 = 0xD000000000000032;
    v16 = 0x8000000249C30C10;
    _print_unlocked<A, B>(_:_:)();
    v4._countAndFlagsBits = 3943982;
    v4._object = (void *)0xE300000000000000;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 0x20746F67202CLL;
    v6._object = (void *)0xE600000000000000;
    String.append(_:)(v6);
    goto LABEL_5;
  }
  if ((unint64_t)(a3 - 256) < 0xFFFFFFFFFFFFFF02)
  {
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v15 = 0xD00000000000003CLL;
    v16 = 0x8000000249C30C50;
LABEL_5:
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v8 = v15;
    *(_QWORD *)(v8 + 8) = v16;
    *(_BYTE *)(v8 + 16) = 1;
    return (__int128 *)swift_willThrow();
  }
  v9 = *result;
  v10 = result[1];
  v11 = result[2];
  v12 = result[3];
  v13 = result[4];
  v14 = result[5];
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(_OWORD *)(a4 + 16) = v9;
  *(_OWORD *)(a4 + 32) = v10;
  *(_OWORD *)(a4 + 48) = v11;
  *(_OWORD *)(a4 + 64) = v12;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v14;
  return result;
}

double Prio3<>.init(numOfAggregators:numOfProofs:bitWidth:measurementLength:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23[6];

  specialized SumVectorType.init(bitWidth:measurementLength:)(a3, a4, (uint64_t)&v16);
  if (!v5)
  {
    v23[2] = v18;
    v23[3] = v19;
    v23[4] = v20;
    v23[5] = v21;
    v23[0] = v16;
    v23[1] = v17;
    specialized Prio3.init(flp:numOfAggregators:numOfProofs:)(v23, a1, a2, (uint64_t)&v16);
    result = *(double *)&v16;
    v10 = v17;
    v11 = v18;
    v12 = v19;
    v13 = v20;
    v14 = v21;
    v15 = v22;
    *a5 = v16;
    a5[1] = v10;
    a5[2] = v11;
    a5[3] = v12;
    a5[4] = v13;
    a5[5] = v14;
    a5[6] = v15;
  }
  return result;
}

uint64_t specialized SumVectorType.init(bitWidth:measurementLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  float v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  result = specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a1, a2);
  if (!v3)
  {
    v8 = sqrtf((float)result);
    if ((~LODWORD(v8) & 0x7F800000) != 0)
    {
      if (v8 > -9.2234e18)
      {
        if (v8 < 9.2234e18)
        {
          if ((uint64_t)v8 <= 1)
            v9 = 1;
          else
            v9 = (uint64_t)v8;
          result = specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a1, a2);
          v10 = result + v9;
          if (!__OFADD__(result, v9))
          {
            v11 = __OFSUB__(v10, 1);
            v12 = v10 - 1;
            if (!v11)
            {
              if (v9 + 0x4000000000000000 >= 0)
              {
                v13 = v12 / v9;
                *(_QWORD *)a3 = result;
                *(_QWORD *)(a3 + 8) = a2;
                *(_QWORD *)(a3 + 16) = 1;
                *(_QWORD *)(a3 + 24) = v9;
                *(_QWORD *)(a3 + 32) = v13;
                *(_QWORD *)(a3 + 40) = a1;
                *(_QWORD *)(a3 + 48) = 2 * v9;
                *(int64x2_t *)(a3 + 56) = vdupq_n_s64(2uLL);
                *(_QWORD *)(a3 + 72) = 2;
                *(_QWORD *)(a3 + 80) = v13;
                *(_QWORD *)(a3 + 88) = v9;
                return result;
              }
LABEL_18:
              __break(1u);
              return result;
            }
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t Prio3<>.shardAndEncode(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  uint64_t v7;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[8];
  _BYTE v52[16];
  _BYTE v53[16];
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v14 = v6[5];
  v48 = v6[4];
  v49 = v14;
  v50 = v6[6];
  v15 = v6[1];
  v44 = *v6;
  v45 = v15;
  v16 = v6[3];
  v46 = v6[2];
  v47 = v16;
  outlined copy of Data._Representation(a3, a4);
  specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  v18 = v17;
  outlined consume of Data._Representation(a3, a4);
  v19 = specialized Prio3.shard<A>(_:nonce:seedBytes:)((uint64_t)&v39, a1, a2, v18, a5, a6);
  swift_release();
  if (v7)
    return a6;
  a6 = specialized VDAFEncodable.encodedData.getter(v39);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    return a6;
  }
  v40 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v21 = v40;
  v22 = 32;
  while (1)
  {
    v23 = *(_OWORD *)(v19 + v22);
    v24 = *(_OWORD *)(v19 + v22 + 16);
    v43 = *(_QWORD *)(v19 + v22 + 32);
    v41 = v23;
    v42 = v24;
    outlined init with take of Share<Field64>((uint64_t)&v41, (uint64_t)v53, &demangling cache variable for type metadata for Share<Field64>);
    result = outlined init with take of Share<Field64>((uint64_t)v53, (uint64_t)&v54, &demangling cache variable for type metadata for Share<Field64>);
    v26 = *(_QWORD *)(v54 + 16);
    if ((v55 & 1) == 0 && v26)
    {
      if (v26 >> 60)
        goto LABEL_30;
      v26 *= 8;
    }
    outlined init with take of Share<Field64>((uint64_t)&v42, (uint64_t)v52, &demangling cache variable for type metadata for Share<Field64>);
    result = outlined init with take of Share<Field64>((uint64_t)v52, (uint64_t)&v56, &demangling cache variable for type metadata for Share<Field64>);
    v27 = *(_QWORD *)(v56 + 16);
    if ((v57 & 1) == 0 && v27)
    {
      if (v27 >> 60)
        goto LABEL_31;
      v27 *= 8;
    }
    result = outlined init with take of Share<Field64>((uint64_t)&v43, (uint64_t)v51, &demangling cache variable for type metadata for Seed?);
    v28 = __OFADD__(v26, v27);
    v29 = v26 + v27;
    if (v28)
      break;
    result = outlined init with take of Share<Field64>((uint64_t)v51, (uint64_t)&v58, &demangling cache variable for type metadata for Seed?);
    v30 = v58;
    if (v58)
      v30 = *(_QWORD *)(v58 + 16);
    v28 = __OFADD__(v29, v30);
    v31 = v29 + v30;
    if (v28)
      goto LABEL_29;
    if (v31)
    {
      if (v31 <= 14)
      {
        outlined retain of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)&v41);
        v33 = 0;
        v34 = 0;
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        outlined retain of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)&v41);
        v32 = __DataStorage.init(capacity:)();
        if ((unint64_t)v31 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          v33 = swift_allocObject();
          v34 = v32 | 0x8000000000000000;
          *(_QWORD *)(v33 + 16) = 0;
          *(_QWORD *)(v33 + 24) = 0;
        }
        else
        {
          v33 = 0;
          v34 = v32 | 0x4000000000000000;
        }
      }
    }
    else
    {
      outlined retain of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)&v41);
      v33 = 0;
      v34 = 0xC000000000000000;
    }
    *(_QWORD *)&v39 = v33;
    *((_QWORD *)&v39 + 1) = v34;
    specialized Prio3InputShare.encode<A>(into:)((uint64_t)&v39);
    outlined release of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)&v41);
    v35 = v39;
    v40 = v21;
    v37 = *(_QWORD *)(v21 + 16);
    v36 = *(_QWORD *)(v21 + 24);
    if (v37 >= v36 >> 1)
    {
      v38 = v39;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1);
      v35 = v38;
      v21 = v40;
    }
    *(_QWORD *)(v21 + 16) = v37 + 1;
    *(_OWORD *)(v21 + 16 * v37 + 32) = v35;
    v22 += 40;
    if (!--v20)
      goto LABEL_26;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t specialized Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;

  if (*(_QWORD *)(a4 + 16) == 16)
    __asm { BR              X10 }
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3D746F67202CLL;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_QWORD *)v9 = 0xD000000000000030;
  *(_QWORD *)(v9 + 8) = 0x8000000249C30B10;
  *(_BYTE *)(v9 + 16) = 1;
  swift_willThrow();
  return 0xD000000000000030;
}

uint64_t Prio3<>.shardAndEncodeIntoBytes(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  char *v45;
  int64_t v46;
  char v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t j;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;

  outlined copy of Data._Representation(a3, a4);
  specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  v14 = v13;
  outlined consume of Data._Representation(a3, a4);
  v15 = specialized Prio3.shard<A>(_:nonce:seedBytes:)((uint64_t)&v100, a1, a2, v14, a5, a6);
  result = swift_release();
  if (v6)
    return result;
  v17 = v100;
  v18 = specialized Prio3PublicShare.encodedLength.getter(v100);
  v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 & ~(v18 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (!v17 || (v19 = *(_QWORD *)(v17 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v15 + 16);
    if (!v31)
      goto LABEL_121;
    goto LABEL_23;
  }
  v20 = v15;
  result = swift_bridgeObjectRetain();
  for (i = 0; i != v19; ++i)
  {
    v22 = *(_QWORD *)(v17 + 8 * i + 32);
    v23 = *(_QWORD *)(v22 + 16);
    v24 = *((_QWORD *)v98 + 2);
    v25 = v24 + v23;
    if (__OFADD__(v24, v23))
      goto LABEL_125;
    v26 = *((_QWORD *)v98 + 3);
    swift_bridgeObjectRetain();
    if (v25 > (uint64_t)(v26 >> 1))
    {
      if (v24 <= v25)
        v30 = v24 + v23;
      else
        v30 = v24;
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, v30, 1, v98);
      v24 = *(_QWORD *)(result + 16);
      v98 = (char *)result;
      if (!*(_QWORD *)(v22 + 16))
      {
LABEL_5:
        if (v23)
          goto LABEL_126;
        goto LABEL_6;
      }
    }
    else
    {
      result = (uint64_t)v98;
      if (!v23)
        goto LABEL_5;
    }
    if ((*(_QWORD *)(result + 24) >> 1) - v24 < v23)
      goto LABEL_131;
    result = (uint64_t)memcpy((void *)(result + v24 + 32), (const void *)(v22 + 32), v23);
    if (v23)
    {
      v27 = *((_QWORD *)v98 + 2);
      v28 = __OFADD__(v27, v23);
      v29 = v27 + v23;
      if (v28)
        goto LABEL_136;
      *((_QWORD *)v98 + 2) = v29;
    }
LABEL_6:
    result = swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();
  v15 = v20;
  v31 = *(_QWORD *)(v20 + 16);
  if (!v31)
  {
LABEL_121:
    swift_bridgeObjectRelease();
    return (uint64_t)v98;
  }
LABEL_23:
  v100 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
  v32 = 0;
  v33 = v100;
  v93 = v31;
  v94 = v15 + 32;
  while (2)
  {
    v97 = v33;
    v34 = v94 + 40 * v32;
    v35 = *(_QWORD *)v34;
    v36 = *(_BYTE *)(v34 + 8);
    v37 = *(_QWORD *)(v34 + 16);
    v38 = *(_BYTE *)(v34 + 24);
    v39 = *(_QWORD *)(v34 + 32);
    v40 = *(_QWORD *)(*(_QWORD *)v34 + 16);
    if ((v36 & 1) == 0 && v40)
    {
      if (v40 >> 60)
        goto LABEL_132;
      v40 *= 8;
    }
    v41 = *(_QWORD *)(v37 + 16);
    if ((v38 & 1) == 0 && v41)
    {
      if (v41 >> 60)
        goto LABEL_133;
      v41 *= 8;
    }
    v28 = __OFADD__(v40, v41);
    v42 = v40 + v41;
    if (!v28)
    {
      if (v39)
      {
        v43 = *(_QWORD *)(v39 + 16);
        v28 = __OFADD__(v42, v43);
        v42 += v43;
        if (v28)
          goto LABEL_124;
      }
      v96 = v32;
      v44 = v42 & ~(v42 >> 63);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v95 = v39;
      swift_bridgeObjectRetain_n();
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0, MEMORY[0x24BEE4AF8]);
      v45 = (char *)result;
      v99 = (char *)result;
      v46 = *(_QWORD *)(v35 + 16);
      if ((v36 & 1) != 0)
      {
        v47 = v38;
        v48 = *(_QWORD *)(result + 16);
        v49 = v48 + v46;
        if (__OFADD__(v48, v46))
          goto LABEL_127;
        v50 = *(_QWORD *)(result + 24) >> 1;
        result = swift_bridgeObjectRetain();
        if (v50 < v49)
        {
          if (v48 <= v49)
            v73 = v48 + v46;
          else
            v73 = v48;
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, v73, 1, v45);
          v45 = (char *)result;
          v48 = *(_QWORD *)(result + 16);
          v50 = *(_QWORD *)(result + 24) >> 1;
          v51 = v47;
          if (*(_QWORD *)(v35 + 16))
            goto LABEL_41;
        }
        else
        {
          v51 = v47;
          if (v46)
          {
LABEL_41:
            if (v50 - v48 < v46)
              goto LABEL_134;
            result = (uint64_t)memcpy(&v45[v48 + 32], (const void *)(v35 + 32), v46);
            if (v46)
            {
              v52 = *((_QWORD *)v45 + 2);
              v28 = __OFADD__(v52, v46);
              v53 = v52 + v46;
              if (v28)
                goto LABEL_137;
              *((_QWORD *)v45 + 2) = v53;
            }
            goto LABEL_83;
          }
        }
        if (v46)
          goto LABEL_129;
LABEL_83:
        result = swift_bridgeObjectRelease();
        v99 = v45;
        v67 = *(_QWORD *)(v37 + 16);
        if ((v51 & 1) == 0)
        {
LABEL_84:
          if (v67)
          {
            swift_bridgeObjectRetain();
            for (j = 0; j != v67; ++j)
            {
              v75 = *(_QWORD *)(v37 + 8 * j + 32);
              v76 = (0xFFFFFFFEFFFFFFFFLL * v75 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
              if (__CFADD__(-v75, v75))
              {
                if (v76 > 0xFFFFFFFEFFFFFFFFLL)
                  v76 = 0;
                else
                  ++v76;
              }
              v78 = *((_QWORD *)v45 + 2);
              v77 = *((_QWORD *)v45 + 3);
              v79 = v77 >> 1;
              v80 = v78 + 1;
              if (v77 >> 1 <= v78)
              {
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 1, 1, v45);
                v77 = *((_QWORD *)v45 + 3);
                v79 = v77 >> 1;
              }
              *((_QWORD *)v45 + 2) = v80;
              v45[v78 + 32] = v76;
              v81 = v78 + 2;
              if (v79 < (uint64_t)(v78 + 2))
              {
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 2, 1, v45);
                v77 = *((_QWORD *)v45 + 3);
                v79 = v77 >> 1;
              }
              *((_QWORD *)v45 + 2) = v81;
              v45[v80 + 32] = BYTE1(v76);
              v82 = v78 + 3;
              if (v79 < (uint64_t)(v78 + 3))
              {
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 3, 1, v45);
                v77 = *((_QWORD *)v45 + 3);
                v79 = v77 >> 1;
              }
              *((_QWORD *)v45 + 2) = v82;
              v45[v81 + 32] = BYTE2(v76);
              v83 = v78 + 4;
              if (v79 < (uint64_t)(v78 + 4))
              {
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 4, 1, v45);
                v77 = *((_QWORD *)v45 + 3);
                v79 = v77 >> 1;
              }
              *((_QWORD *)v45 + 2) = v83;
              v45[v82 + 32] = BYTE3(v76);
              v84 = v78 + 5;
              if (v79 < (uint64_t)(v78 + 5))
              {
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 5, 1, v45);
                v77 = *((_QWORD *)v45 + 3);
                v79 = v77 >> 1;
              }
              *((_QWORD *)v45 + 2) = v84;
              v45[v83 + 32] = BYTE4(v76);
              v85 = v78 + 6;
              if (v79 < (uint64_t)(v78 + 6))
              {
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 6, 1, v45);
                v77 = *((_QWORD *)v45 + 3);
                v79 = v77 >> 1;
              }
              *((_QWORD *)v45 + 2) = v85;
              v45[v84 + 32] = BYTE5(v76);
              v86 = v78 + 7;
              if (v79 < (uint64_t)(v78 + 7))
              {
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 7, 1, v45);
                v77 = *((_QWORD *)v45 + 3);
                v79 = v77 >> 1;
              }
              *((_QWORD *)v45 + 2) = v86;
              v45[v85 + 32] = BYTE6(v76);
              if (v79 < (uint64_t)(v78 + 8))
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 8, 1, v45);
              *((_QWORD *)v45 + 2) = v78 + 8;
              v45[v86 + 32] = HIBYTE(v76);
            }
            goto LABEL_114;
          }
LABEL_115:
          if (v95)
          {
            v88 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v88);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            result = swift_bridgeObjectRelease_n();
            v45 = v99;
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            result = swift_bridgeObjectRelease_n();
          }
          v89 = v96;
          v33 = v97;
          v100 = v97;
          v91 = *(_QWORD *)(v97 + 16);
          v90 = *(_QWORD *)(v97 + 24);
          if (v91 >= v90 >> 1)
          {
            result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v90 > 1), v91 + 1, 1);
            v89 = v96;
            v33 = v100;
          }
          v32 = v89 + 1;
          *(_QWORD *)(v33 + 16) = v91 + 1;
          *(_QWORD *)(v33 + 8 * v91 + 32) = v45;
          if (v32 == v93)
            goto LABEL_121;
          continue;
        }
      }
      else
      {
        if (v46)
        {
          v92 = v38;
          swift_bridgeObjectRetain();
          for (k = 0; k != v46; ++k)
          {
            v55 = *(_QWORD *)(v35 + 8 * k + 32);
            v56 = (0xFFFFFFFEFFFFFFFFLL * v55 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
            if (__CFADD__(-v55, v55))
            {
              if (v56 > 0xFFFFFFFEFFFFFFFFLL)
                v56 = 0;
              else
                ++v56;
            }
            v58 = *((_QWORD *)v45 + 2);
            v57 = *((_QWORD *)v45 + 3);
            v59 = v57 >> 1;
            v60 = v58 + 1;
            if (v57 >> 1 <= v58)
            {
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v45);
              v57 = *((_QWORD *)v45 + 3);
              v59 = v57 >> 1;
            }
            *((_QWORD *)v45 + 2) = v60;
            v45[v58 + 32] = v56;
            v61 = v58 + 2;
            if (v59 < (uint64_t)(v58 + 2))
            {
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 2, 1, v45);
              v57 = *((_QWORD *)v45 + 3);
              v59 = v57 >> 1;
            }
            *((_QWORD *)v45 + 2) = v61;
            v45[v60 + 32] = BYTE1(v56);
            v62 = v58 + 3;
            if (v59 < (uint64_t)(v58 + 3))
            {
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 3, 1, v45);
              v57 = *((_QWORD *)v45 + 3);
              v59 = v57 >> 1;
            }
            *((_QWORD *)v45 + 2) = v62;
            v45[v61 + 32] = BYTE2(v56);
            v63 = v58 + 4;
            if (v59 < (uint64_t)(v58 + 4))
            {
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 4, 1, v45);
              v57 = *((_QWORD *)v45 + 3);
              v59 = v57 >> 1;
            }
            *((_QWORD *)v45 + 2) = v63;
            v45[v62 + 32] = BYTE3(v56);
            v64 = v58 + 5;
            if (v59 < (uint64_t)(v58 + 5))
            {
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 5, 1, v45);
              v57 = *((_QWORD *)v45 + 3);
              v59 = v57 >> 1;
            }
            *((_QWORD *)v45 + 2) = v64;
            v45[v63 + 32] = BYTE4(v56);
            v65 = v58 + 6;
            if (v59 < (uint64_t)(v58 + 6))
            {
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 6, 1, v45);
              v57 = *((_QWORD *)v45 + 3);
              v59 = v57 >> 1;
            }
            *((_QWORD *)v45 + 2) = v65;
            v45[v64 + 32] = BYTE5(v56);
            v66 = v58 + 7;
            if (v59 < (uint64_t)(v58 + 7))
            {
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 7, 1, v45);
              v57 = *((_QWORD *)v45 + 3);
              v59 = v57 >> 1;
            }
            *((_QWORD *)v45 + 2) = v66;
            v45[v65 + 32] = BYTE6(v56);
            if (v59 < (uint64_t)(v58 + 8))
              v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 8, 1, v45);
            *((_QWORD *)v45 + 2) = v58 + 8;
            v45[v66 + 32] = HIBYTE(v56);
          }
          result = swift_bridgeObjectRelease();
          v99 = v45;
          v38 = v92;
        }
        v67 = *(_QWORD *)(v37 + 16);
        if ((v38 & 1) == 0)
          goto LABEL_84;
      }
      v68 = *((_QWORD *)v45 + 2);
      v69 = v68 + v67;
      if (__OFADD__(v68, v67))
        goto LABEL_128;
      v70 = *((_QWORD *)v45 + 3) >> 1;
      result = swift_bridgeObjectRetain();
      if (v70 < v69)
      {
        if (v68 <= v69)
          v87 = v68 + v67;
        else
          v87 = v68;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, v87, 1, v45);
        v45 = (char *)result;
        v68 = *(_QWORD *)(result + 16);
        v70 = *(_QWORD *)(result + 24) >> 1;
        if (*(_QWORD *)(v37 + 16))
          goto LABEL_74;
      }
      else if (v67)
      {
LABEL_74:
        if (v70 - v68 < v67)
          goto LABEL_135;
        result = (uint64_t)memcpy(&v45[v68 + 32], (const void *)(v37 + 32), v67);
        if (v67)
        {
          v71 = *((_QWORD *)v45 + 2);
          v28 = __OFADD__(v71, v67);
          v72 = v71 + v67;
          if (v28)
            goto LABEL_138;
          *((_QWORD *)v45 + 2) = v72;
        }
LABEL_114:
        swift_bridgeObjectRelease();
        v99 = v45;
        goto LABEL_115;
      }
      if (v67)
        goto LABEL_130;
      goto LABEL_114;
    }
    break;
  }
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
  return result;
}

uint64_t Prio3<>.prepareInitAndEncodeIntoBytes(verifyKey:aggregatorID:nonce:encodedPublicShare:encodedInputShare:)(uint64_t a1, unint64_t a2, int64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, size_t a8, uint64_t a9)
{
  __int128 *v9;
  uint64_t v10;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t result;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  char *v48[2];
  _OWORD v49[2];
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[80];
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  size_t v70;

  v70 = a8;
  v17 = v9[5];
  *(_OWORD *)&v57[32] = v9[4];
  *(_OWORD *)&v57[48] = v17;
  *(_OWORD *)&v57[64] = v9[6];
  v18 = v9[1];
  v55 = *v9;
  v56 = v18;
  v19 = v9[3];
  *(_OWORD *)v57 = v9[2];
  *(_OWORD *)&v57[16] = v19;
  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v21 = v20;
  outlined consume of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a4, a5);
  specialized _copyCollectionToContiguousArray<A>(_:)(a4, a5);
  v23 = v22;
  outlined consume of Data._Representation(a4, a5);
  v66 = *(_OWORD *)&v57[24];
  v67 = *(_OWORD *)&v57[40];
  v68 = *(_OWORD *)&v57[56];
  v24 = *(_QWORD *)v57;
  v65 = *(_OWORD *)&v57[8];
  v43 = v56;
  v63 = v56;
  v69 = *(_QWORD *)&v57[72];
  v64 = *(_QWORD *)v57;
  v25 = v55;
  result = specialized Prio3PublicShare.init<A>(from:parameter:)(a6, a7, *(_QWORD *)v57 > 0, v55, (size_t *)&v47);
  if (v10)
  {
    swift_release();
LABEL_13:
    swift_release();
    return v21;
  }
  v27 = v70;
  if (v25 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v28 = v47;
  if (a3 < 0 || v25 <= a3)
  {
    v31 = v21;
    v32 = dispatch thunk of CustomStringConvertible.description.getter();
    v34 = v33;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v35 = v32;
    *(_QWORD *)(v35 + 8) = v34;
    v21 = v31;
    *(_BYTE *)(v35 + 16) = 0;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!a3)
  {
    result = specialized FullyLinearProof.proofLength.getter();
    v29 = result * *((_QWORD *)&v55 + 1);
    if ((unsigned __int128)(result * (__int128)*((uint64_t *)&v55 + 1)) >> 64 == (result * *((_QWORD *)&v55 + 1)) >> 63)
    {
      v30 = v43;
      goto LABEL_11;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v29 = 32;
  v30 = 32;
LABEL_11:
  v58 = v30;
  v59 = a3 != 0;
  v60 = v29;
  v61 = v59;
  v62 = 32 * (v24 > 0);
  specialized Prio3InputShare.init<A>(from:parameter:)(v27, a9, (uint64_t)&v58, (uint64_t)v45);
  v53[0] = v45[0];
  v53[1] = v45[1];
  v54 = v46;
  specialized Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)((uint64_t)v49, v48, v21, a3, v23, v28, (uint64_t)v53);
  swift_release();
  swift_release();
  outlined release of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)v53);
  swift_bridgeObjectRelease();
  v51[0] = v49[0];
  v51[1] = v49[1];
  v52 = v50;
  v37 = v48[0];
  v36 = v48[1];
  v38 = specialized Prio3PrepareState.encodedLength.getter();
  *(_QWORD *)&v49[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 & ~(v38 >> 63), 0, MEMORY[0x24BEE4AF8]);
  specialized Prio3PrepareState.encode<A>(into:)((uint64_t *)v49);
  result = outlined release of Prio3PrepareState<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)v51);
  v21 = *(_QWORD *)&v49[0];
  v39 = *((_QWORD *)v37 + 2);
  if (!v39)
  {
    v40 = 0;
    if (!v36)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!(v39 >> 60))
  {
    v39 *= 8;
    if (!v36)
    {
      v40 = 0;
      goto LABEL_22;
    }
LABEL_21:
    v40 = *((_QWORD *)v36 + 2);
LABEL_22:
    v41 = __OFADD__(v39, v40);
    v42 = v39 + v40;
    if (!v41)
    {
      *(_QWORD *)&v49[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42 & ~(v42 >> 63), 0, MEMORY[0x24BEE4AF8]);
      specialized Prio3PrepareShare.encode<A>(into:)((uint64_t)v49, (uint64_t)v37, (uint64_t)v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v21;
    }
    goto LABEL_26;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, char **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  int64_t v9;
  char *v10;
  uint64_t *v12;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  Swift::String v103;
  int64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  char **v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  char v117;
  int64_t v118;
  unint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __int128 v126;
  unsigned __int8 v127;
  uint64_t v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char *v139;

  v10 = *(char **)(a3 + 16);
  if (v10 != (char *)32)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v126 = 0xD000000000000035;
    *((_QWORD *)&v126 + 1) = 0x8000000249C308D0;
LABEL_12:
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0x3D746F67202CLL;
    v29._object = (void *)0xE600000000000000;
    String.append(_:)(v29);
    v139 = v10;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31 = *((_QWORD *)&v126 + 1);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v32 = v126;
    *(_QWORD *)(v32 + 8) = v31;
    *(_BYTE *)(v32 + 16) = 1;
    return swift_willThrow();
  }
  v10 = *(char **)(a5 + 16);
  if (v10 != (char *)16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v126 = 0xD000000000000031;
    *((_QWORD *)&v126 + 1) = 0x8000000249C30910;
    goto LABEL_12;
  }
  v12 = v7;
  if (*v7 < 0)
  {
    __break(1u);
    goto LABEL_86;
  }
  if ((a4 & 0x8000000000000000) != 0 || *v7 <= (uint64_t)a4)
  {
    *(_QWORD *)&v126 = a4;
    v33 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = v34;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v36 = v33;
    *(_QWORD *)(v36 + 8) = v35;
    *(_BYTE *)(v36 + 16) = 0;
    return swift_willThrow();
  }
  v121 = *v7;
  if (a4 > 0xFF)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  v17 = *(_QWORD *)a7;
  v18 = *(_BYTE *)(a7 + 8);
  v19 = *((_OWORD *)v12 + 4);
  v132 = *((_OWORD *)v12 + 3);
  v133 = v19;
  v20 = *((_OWORD *)v12 + 6);
  v134 = *((_OWORD *)v12 + 5);
  v135 = v20;
  v21 = *((_OWORD *)v12 + 2);
  v130 = *((_OWORD *)v12 + 1);
  v131 = v21;
  result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v17, v18, a4, v130);
  if (v8)
    return result;
  v118 = a4;
  v119 = result;
  v117 = v18;
  v113 = a2;
  v114 = v17;
  v24 = *(_QWORD *)(a7 + 16);
  v9 = *(unsigned __int8 *)(a7 + 24);
  v25 = v12[1];
  v26 = specialized FullyLinearProof.proofLength.getter();
  if ((unsigned __int128)(v26 * (__int128)v25) >> 64 != (v26 * v25) >> 63)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v27 = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:numOfProofs:count:)(v24, v9, v118, v25, v26 * v25);
  v38 = v37;
  v110 = v40;
  v111 = v39;
  v112 = v25;
  v115 = v27;
  v41 = (unint64_t)specialized Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(v118, a5, v119, a6, a7);
  v108 = v38;
  v136 = v133;
  v137 = v134;
  v138 = v135;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  v9 = v25;
  v109 = specialized static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(a3, v25, a5, 1);
  v42 = specialized FullyLinearProof.verifierLength.getter();
  if ((unsigned __int128)(v9 * (__int128)v42) >> 64 != (v9 * v42) >> 63)
  {
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v25 * v42) & ~((v25 * v42) >> 63), 0, MEMORY[0x24BEE4AF8]);
  LOBYTE(v43) = v117;
  if (v25 < 0)
    goto LABEL_90;
  if (!v25)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
  v44 = 0;
  v106 = v41;
  v45 = v115;
  while (1)
  {
    if (v44 == v9)
      goto LABEL_88;
    v107 = v44;
    v116 = v45;
    if (!v41)
      goto LABEL_67;
    v46 = *(_QWORD *)(v41 + 40);
    swift_retain();
    v47 = specialized VerificationJointRandomness.xof.getter();
    if (v46 < 0)
      goto LABEL_91;
    v48 = v47;
    if (v46)
      break;
    swift_release();
    swift_release();
LABEL_67:
    v125 = MEMORY[0x24BEE4AF8];
LABEL_68:
    v86 = specialized FullyLinearProof.proofLength.getter();
    v9 = v116;
    v87 = specialized Collection.prefix(_:)(v86, v116, v111, v108, v110);
    v89 = v88;
    v91 = v90;
    v93 = v92;
    v124 = specialized Collection.dropFirst(_:)(v86, v116, v111, v108, v110);
    v110 = v96;
    v111 = v95;
    if (v107 >= *(_QWORD *)(v109 + 16))
      goto LABEL_92;
    v43 = v94;
    v97 = *(_QWORD *)(v109 + 32 + 8 * v107);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v139, v119, v87, v89, v91, v93, v97, v125, v121);
    v108 = v43;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = v124;
    v9 = v112;
    LOBYTE(v43) = v117;
    v41 = v106;
    v44 = v107 + 1;
    if (v107 + 1 == v112)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_72:
      v9 = v114;
      if (!v41)
        goto LABEL_76;
      swift_bridgeObjectRetain();
      swift_retain();
      v98 = v41;
      v41 = specialized VerificationJointRandomness.seed.getter();
      swift_release();
      goto LABEL_77;
    }
  }
  v129 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46, 0);
  v49 = 0;
  v122 = v48;
  v123 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  v104 = v46;
LABEL_25:
  if (v49 == v46)
    goto LABEL_93;
  v105 = v49 + 1;
  v50 = v123;
  while (2)
  {
    v128 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
    v51 = 0;
    v52 = v128;
LABEL_28:
    v53 = *(_QWORD *)(v48 + v50);
    if (!v53)
    {
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v54 = *(char **)(v53 + 16);
    if (*((_QWORD *)v54 + 2))
    {
      swift_retain();
      goto LABEL_36;
    }
    v55 = v53 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
    v56 = v53 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
    swift_beginAccess();
    swift_retain();
    v57 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v57[2] = 16;
    v57[5] = 0;
    v57[4] = 0;
    v58 = *(_QWORD *)v56;
    v43 = *(unsigned int *)(v56 + 8);
    v59 = *(unsigned int *)(v56 + 12);
    specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(v57 + 4), (uint64_t)(v57 + 6), v55, *(_QWORD *)v56, v43 | (v59 << 32));
    v60 = bswap32(v59);
    *(_DWORD *)(v56 + 12) = bswap32(v60 + 1);
    if (v60 == -1)
    {
      v61 = bswap32(v43);
      *(_DWORD *)(v56 + 8) = bswap32(v61 + 1);
      if (v61 == -1)
        *(_QWORD *)v56 = bswap64(bswap64(v58) + 1);
    }
    swift_endAccess();
    v62 = v57[2];
    if (v62 < 2)
    {
LABEL_35:
      *(_QWORD *)(v53 + 16) = v57;
      swift_bridgeObjectRelease();
      v54 = *(char **)(v53 + 16);
      v48 = v122;
      v50 = v123;
      if (!*((_QWORD *)v54 + 2))
        goto LABEL_83;
LABEL_36:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v63 = *((_QWORD *)v54 + 2);
        if (!v63)
          goto LABEL_84;
      }
      else
      {
        v54 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v54);
        v63 = *((_QWORD *)v54 + 2);
        if (!v63)
          goto LABEL_84;
      }
      v64 = v63 - 1;
      v65 = v54[v64 + 32];
      *((_QWORD *)v54 + 2) = v64;
      *(_QWORD *)(v53 + 16) = v54;
      swift_release();
      v128 = v52;
      v67 = *(_QWORD *)(v52 + 16);
      v66 = *(_QWORD *)(v52 + 24);
      if (v67 >= v66 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1);
        v52 = v128;
      }
      ++v51;
      *(_QWORD *)(v52 + 16) = v67 + 1;
      *(_BYTE *)(v52 + v67 + 32) = v65;
      if (v51 == 8)
      {
        if (v67 != 7)
        {
          *(_QWORD *)&v126 = 0;
          *((_QWORD *)&v126 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v126 = 0xD000000000000019;
          *((_QWORD *)&v126 + 1) = 0x8000000249C303D0;
          v128 = 8;
          v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v72);
          swift_bridgeObjectRelease();
          v73._countAndFlagsBits = 0x203A746F67202CLL;
          v73._object = (void *)0xE700000000000000;
          String.append(_:)(v73);
          v128 = v67 + 1;
          v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v74);
          swift_bridgeObjectRelease();
          v75 = v126;
          lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
          v76 = swift_allocError();
          *(_OWORD *)v77 = v75;
          *(_BYTE *)(v77 + 16) = 0;
          goto LABEL_56;
        }
        v71 = swift_retain();
        v78 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(v71);
        swift_release();
        if (v78 >= 0xFFFFFFFF00000001)
        {
          lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
          v76 = swift_allocError();
          *(_QWORD *)v79 = 0;
          *(_QWORD *)(v79 + 8) = 0;
          *(_BYTE *)(v79 + 16) = 5;
LABEL_56:
          swift_willThrow();
          swift_release();
          v128 = v76;
          v9 = v76;
          MEMORY[0x24BD00B44](v76);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          if (!swift_dynamicCast())
            goto LABEL_96;
          v81 = *((_QWORD *)&v126 + 1);
          v80 = v126;
          v82 = v127;
          v50 = v123;
          if (v127 != 5 || v126 != 0)
            goto LABEL_95;
          MEMORY[0x24BD00B38](v76, *((_QWORD *)&v126 + 1));
          MEMORY[0x24BD00B38](v128);
          continue;
        }
        specialized FieldElement.init(_:)(v78, (unint64_t *)&v126);
        swift_release();
        v9 = v126;
        v83 = v129;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v83 + 16) + 1, 1);
          v83 = v129;
        }
        v46 = v104;
        v85 = *(_QWORD *)(v83 + 16);
        v84 = *(_QWORD *)(v83 + 24);
        if (v85 >= v84 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v85 + 1, 1);
          v83 = v129;
        }
        *(_QWORD *)(v83 + 16) = v85 + 1;
        *(_QWORD *)(v83 + 8 * v85 + 32) = v9;
        v49 = v105;
        if (v105 == v104)
        {
          v125 = v83;
          swift_release();
          swift_release();
          goto LABEL_68;
        }
        goto LABEL_25;
      }
      goto LABEL_28;
    }
    break;
  }
  v41 = 0;
  v9 = v62 >> 1;
  v68 = v62 + 31;
  while (2)
  {
    if (v41 == v68 - 32)
    {
LABEL_44:
      ++v41;
      --v68;
      if (v9 == v41)
        goto LABEL_35;
      continue;
    }
    break;
  }
  v69 = v57[2];
  if (v41 < v69)
  {
    if (v68 - 32 >= v69)
      goto LABEL_75;
    LOBYTE(v43) = *((_BYTE *)v57 + v41 + 32);
    v70 = *((_BYTE *)v57 + v68);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v57 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v57);
    *((_BYTE *)v57 + v41 + 32) = v70;
    *((_BYTE *)v57 + v68) = v43;
    goto LABEL_44;
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  swift_bridgeObjectRetain();
  v98 = v41;
LABEL_77:
  v99 = specialized FullyLinearProof.verifierLength.getter();
  *(_QWORD *)a1 = v9;
  *(_BYTE *)(a1 + 8) = v43;
  *(_QWORD *)(a1 + 16) = v41;
  *(_BYTE *)(a1 + 24) = v118;
  *(_QWORD *)(a1 + 32) = v99;
  v100 = v139;
  if (v98)
  {
    v101 = *(_QWORD *)(v98 + 16);
    if (*(_QWORD *)(v101 + 16) > v118)
    {
      v102 = *(char **)(v101 + 8 * v118 + 32);
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      result = swift_release();
      goto LABEL_81;
    }
LABEL_94:
    __break(1u);
    v80 = swift_unexpectedError();
    __break(1u);
LABEL_95:
    outlined consume of VDAFError(v80, v81, v82);
LABEL_96:
    MEMORY[0x24BD00B38](v128);
    *(_QWORD *)&v126 = 0;
    *((_QWORD *)&v126 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v103._object = (void *)0x8000000249C30420;
    v103._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v103);
    v128 = v9;
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = swift_unknownObjectRelease();
    v102 = 0;
LABEL_81:
    *v113 = v100;
    v113[1] = v102;
  }
  return result;
}

void Prio3<>.encodedPrepareMessageFrom(_:)(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = v1[4];
  v4 = v1[6];
  v20 = v1[5];
  v21 = v4;
  v5 = v1[1];
  v15 = *v1;
  v16 = v5;
  v6 = v1[2];
  v18 = v1[3];
  v19 = v3;
  v17 = v6;
  specialized Prio3.prepareMessageFrom(_:parameter:)(a1, v13);
  if (!v2)
  {
    v7 = v13[0];
    if (v13[0])
    {
      v8 = *(_QWORD *)(v13[0] + 16);
      if (v8)
      {
        if (v8 <= 0xE)
        {
          v14 = 0uLL;
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          v9 = __DataStorage.init(capacity:)();
          v10 = v9;
          if (v8 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            v11 = swift_allocObject();
            *(_QWORD *)(v11 + 16) = 0;
            *(_QWORD *)(v11 + 24) = 0;
            *(_QWORD *)&v14 = v11;
            *((_QWORD *)&v14 + 1) = v10 | 0x8000000000000000;
          }
          else
          {
            *(_QWORD *)&v14 = 0;
            *((_QWORD *)&v14 + 1) = v9 | 0x4000000000000000;
          }
        }
      }
      else
      {
        v14 = xmmword_249C2AD40;
      }
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v13[3] = v12;
      v13[4] = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
      v13[0] = v7;
      __swift_project_boxed_opaque_existential_1(v13, v12);
      swift_bridgeObjectRetain();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void specialized Prio3.prepareMessageFrom(_:parameter:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *inited;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;

  v4 = v3;
  v5 = (_QWORD *)v2;
  v51 = *(_OWORD *)(v2 + 32);
  v8 = specialized FullyLinearProof.verifierLength.getter();
  v9 = *(_QWORD *)(v2 + 8);
  v10 = v8 * v9;
  if ((unsigned __int128)(v8 * (__int128)v9) >> 64 != (v8 * v9) >> 63)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (v10 < 0)
  {
LABEL_74:
    __break(1u);
    return;
  }
  v48 = a2;
  v50 = v9;
  if (v10)
  {
    i = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(i + 16) = v10;
    bzero((void *)(i + 32), 8 * v10);
  }
  else
  {
    i = MEMORY[0x24BEE4AF8];
  }
  v49 = v5;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v47 = v3;
    v10 = a1 + 32;
    v4 = i;
    v13 = i + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v12; ++i)
    {
      v14 = v10 + 16 * i;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v4 + 16);
      if (v16 != *(_QWORD *)(*(_QWORD *)v14 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = 540877088;
        v37._object = (void *)0xE400000000000000;
        String.append(_:)(v37);
        v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v39 = 0xD000000000000020;
        *(_QWORD *)(v39 + 8) = 0x8000000249C30700;
        *(_BYTE *)(v39 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      if (v16)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17 = 0;
        while (1)
        {
          v19 = *(_QWORD *)(v15 + 8 * v17 + 32);
          v18 = *(_QWORD *)(v13 + 8 * v17);
          if (v19)
          {
            v20 = v19 <= 0xFFFFFFFF00000001;
            v21 = 0xFFFFFFFF00000001 - v19;
            if (!v20)
            {
              __break(1u);
              goto LABEL_64;
            }
            if (v18 >= v21)
            {
              v18 -= v21;
            }
            else
            {
              v20 = v21 <= 0xFFFFFFFF00000001;
              v22 = 0xFFFFFFFF00000001 - v21;
              if (!v20)
              {
                __break(1u);
                __break(1u);
                goto LABEL_65;
              }
              v20 = __CFADD__(v18, v22);
              v18 += v22;
              if (v20)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(_QWORD *)(v13 + 8 * v17++) = v18;
          if (v16 == v17)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain();
    v24 = (char *)MEMORY[0x24BEE4AF8];
    v40 = 40;
    do
    {
      v10 = *(_QWORD *)(a1 + v40);
      if (v10)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
        v42 = *((_QWORD *)v24 + 2);
        v41 = *((_QWORD *)v24 + 3);
        if (v42 >= v41 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v24);
        *((_QWORD *)v24 + 2) = v42 + 1;
        *(_QWORD *)&v24[8 * v42 + 32] = v10;
      }
      v40 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    i = v4;
    v4 = v47;
    v25 = v50;
    if (v50 < 0)
      goto LABEL_57;
    goto LABEL_25;
  }
LABEL_24:
  v23 = *(_QWORD *)(i + 16);
  v24 = (char *)MEMORY[0x24BEE4AF8];
  v25 = v50;
  if ((v50 & 0x8000000000000000) == 0)
  {
LABEL_25:
    if (!v25)
    {
LABEL_44:
      v10 = *((_QWORD *)v24 + 2);
      if ((uint64_t)v51 >= 1)
      {
        if (v10 == *v49)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>);
          inited = (_QWORD *)swift_initStackObject();
          inited[4] = 0;
          inited[5] = v51;
          inited[6] = v50;
          inited[2] = v24;
          inited[3] = 0;
          v35 = specialized VerificationJointRandomness.seed.getter();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          *v48 = v35;
          return;
        }
        swift_bridgeObjectRelease();
        _StringGuts.grow(_:)(42);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        v44 = 0xD000000000000038;
        v45 = "VDAF/Prio3.swift: missing jointRandPart in prepare share";
        goto LABEL_63;
      }
      goto LABEL_58;
    }
    v26 = 0;
    while (1)
    {
      v27 = specialized FullyLinearProof.verifierLength.getter();
      if (v27 < 0)
        break;
      v28 = v23 - v26;
      if (!v27 || v28 < 0 || (v29 = v23, v28 >= v27))
      {
        v29 = v26 + v27;
        if (__OFADD__(v26, v27))
          goto LABEL_71;
      }
      if (v29 < v26)
        goto LABEL_66;
      if (v23 < v26)
        goto LABEL_67;
      if (v23 < v29)
        goto LABEL_68;
      if (!v27 || v28 < 0 || (v30 = v23, v28 >= v27))
      {
        v30 = v26 + v27;
        if (__OFADD__(v26, v27))
          goto LABEL_72;
      }
      if (v23 < v30)
        goto LABEL_69;
      if (v30 < v26)
        goto LABEL_70;
      v31 = (2 * v29) | 1;
      v32 = swift_unknownObjectRetain();
      specialized FullyLinearProof.decide<A>(verifier:)(v32, i + 32, v26, v31);
      if (v4)
      {
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        return;
      }
      if ((v33 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
        swift_allocError();
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        *(_BYTE *)(v46 + 16) = 4;
        swift_willThrow();
        swift_unknownObjectRelease_n();
        return;
      }
      swift_unknownObjectRelease();
      v26 = v30;
      if (!--v25)
        goto LABEL_44;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  swift_bridgeObjectRelease();
  if (v10)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    v44 = 0xD00000000000003BLL;
    v45 = "VDAF/Prio3.swift: unexpected jointRandPart in prepare share";
LABEL_63:
    *(_QWORD *)v43 = v44;
    *(_QWORD *)(v43 + 8) = (unint64_t)(v45 - 32) | 0x8000000000000000;
    *(_BYTE *)(v43 + 16) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    return;
  }
LABEL_64:
  swift_unknownObjectRelease();
  *v48 = 0;
}

uint64_t Prio3<>.prepareNextAndEncodeIntoBytes(aggregatorID:encodedState:encodedMessage:)(uint64_t result, size_t a2, unint64_t a3, size_t a4, unint64_t a5)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  size_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[80];
  _QWORD v40[5];
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;

  v8 = v5[4];
  v9 = v5[5];
  v10 = v5[2];
  *(_OWORD *)&v39[16] = v5[3];
  *(_OWORD *)&v39[32] = v8;
  v11 = v5[6];
  *(_OWORD *)&v39[48] = v9;
  *(_OWORD *)&v39[64] = v11;
  v12 = v5[1];
  v37 = *v5;
  v38 = v12;
  *(_OWORD *)v39 = v10;
  if ((v37 & 0x8000000000000000) == 0)
  {
    if (result < 0 || (uint64_t)v37 <= result)
    {
      v34 = result;
      v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v25 = v24;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(_QWORD *)v26 = v23;
      *(_QWORD *)(v26 + 8) = v25;
      *(_BYTE *)(v26 + 16) = 0;
    }
    else
    {
      v48 = a5;
      if (result)
        v7 = 32;
      else
        v7 = v38;
      v41 = v38;
      v44 = *(_OWORD *)&v39[24];
      v45 = *(_OWORD *)&v39[40];
      v46 = *(_OWORD *)&v39[56];
      v43 = *(_OWORD *)&v39[8];
      v47 = *(_QWORD *)&v39[72];
      v42 = *(_QWORD *)v39;
      v40[0] = v7;
      v40[1] = result != 0;
      v40[2] = 32 * (*(_QWORD *)v39 > 0);
      v40[3] = result;
      v40[4] = specialized FullyLinearProof.verifierLength.getter();
      specialized Prio3PrepareState.init<A>(from:parameter:)(a2, a3, (uint64_t)v40, (uint64_t)&v28);
      if (v6)
        return v7;
      v16 = 0;
      v35[0] = v28;
      v35[1] = v29;
      v36 = v30;
      if (a4 && v48 != a4)
        v16 = specialized _copyCollectionToContiguousArray<A>(_:)(a4, v48);
      specialized Prio3.prepareNext(state:message:)((uint64_t)v35, v16, (uint64_t)&v28);
      swift_bridgeObjectRelease();
      outlined release of Prio3PrepareState<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)v35);
      v17 = v28;
      v18 = v29;
      v19 = v30;
      v20 = v31;
      v21 = v32;
      if (v33 == 1)
      {
        v22 = (char *)swift_bridgeObjectRetain();
        v7 = (uint64_t)specialized VDAFEncodable.encodedBytes.getter(v22);
        outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, v20, v21, 1);
        outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, v20, v21, 1);
        return v7;
      }
      outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30, v31, v32, 0);
      lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
      swift_allocError();
      *(_QWORD *)v27 = 0xD000000000000018;
      *(_QWORD *)(v27 + 8) = 0x8000000249C306B0;
      *(_BYTE *)(v27 + 16) = 2;
    }
    swift_willThrow();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t specialized Prio3.prepareNext(state:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 16))
  {
    if (a2 && specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), a2))
      goto LABEL_4;
LABEL_7:
    _StringGuts.grow(_:)(68);
    v9._object = (void *)0x8000000249C30750;
    v9._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0xD00000000000002ELL;
    v10._object = (void *)0x8000000249C30770;
    String.append(_:)(v10);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Seed?);
    v11._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x8000000249C307A0;
    v12._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v12);
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0xE000000000000000;
    *(_BYTE *)(v14 + 16) = 1;
    return swift_willThrow();
  }
  if (a2)
    goto LABEL_7;
LABEL_4:
  result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_BYTE *)(a1 + 24), *(_QWORD *)(v3 + 16));
  if (!v4)
  {
    v8 = specialized SumVectorType.truncate(measurement:)(result);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v8;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_BYTE *)(a3 + 56) = 1;
  }
  return result;
}

size_t Prio3<>.outputShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

{
  uint64_t v3;
  size_t result;

  result = specialized Array<A>.init<A>(from:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

char *Prio3<>.encodedAggregateShare(_:)()
{
  char *v0;
  char *v1;

  v0 = (char *)swift_bridgeObjectRetain();
  v1 = specialized VDAFEncodable.encodedBytes.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

size_t Prio3<>.aggregateShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

char *Prio3<>.unshardAndEncodeIntoBytes(_:numOfMeasurements:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t i;
  int v16;
  char *v17;

  v3 = specialized Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1);
  if (v1)
    return v2;
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
  {
    result = (char *)swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v13)
      goto LABEL_9;
LABEL_17:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16), 0, (char *)v6);
    swift_bridgeObjectRelease();
    return v2;
  }
  v17 = (char *)MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  v8 = 0;
  v9 = (uint64_t)v17;
  do
  {
    v10 = *(_QWORD *)(v4 + 8 * v8 + 32);
    if (HIDWORD(v10))
    {
      __break(1u);
      goto LABEL_20;
    }
    v17 = (char *)v9;
    v12 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    if (v12 >= v11 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      v9 = (uint64_t)v17;
    }
    ++v8;
    *(_QWORD *)(v9 + 16) = v12 + 1;
    *(_DWORD *)(v9 + 4 * v12 + 32) = v10;
  }
  while (v5 != v8);
  result = (char *)swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    goto LABEL_17;
LABEL_9:
  if (!(v13 >> 61))
  {
    if (*(_QWORD *)(v6 + 16) <= (int64_t)(4 * v13))
      v14 = 4 * v13;
    else
      v14 = *(_QWORD *)(v6 + 16);
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0, (char *)v6);
    swift_bridgeObjectRetain();
    for (i = 0; i != v13; ++i)
    {
      v16 = *(_DWORD *)(v9 + 4 * i + 32);
      specialized VDAFCodableFixedWidthInteger.encode<A>(into:)((uint64_t *)&v17, v16);
    }
    swift_bridgeObjectRelease_n();
    return v17;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.verifierLength.getter()
{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 48);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  v4 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = v10;
  v1 = *(_QWORD *)(v10 + 16);
  v3 = *(_QWORD *)(v10 + 24);
  v2 = v1 + 1;
  if (v1 >= v3 >> 1)
  {
LABEL_10:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v2, 1);
    v5 = v10;
  }
  v3 = 0;
  v6 = 0;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 8 * v1 + 32) = v4;
  do
  {
    v7 = *(_QWORD *)(v5 + 8 * v3 + 32);
    v8 = __OFADD__(v6, v7);
    v6 += v7;
    if (v8)
    {
      __break(1u);
      goto LABEL_9;
    }
    ++v3;
  }
  while (v2 != v3);
  swift_release();
  result = v6 + 1;
  if (__OFADD__(v6, 1))
    __break(1u);
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 8);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  v4 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = v10;
  v1 = *(_QWORD *)(v10 + 16);
  v3 = *(_QWORD *)(v10 + 24);
  v2 = v1 + 1;
  if (v1 >= v3 >> 1)
  {
LABEL_10:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v2, 1);
    v5 = v10;
  }
  v3 = 0;
  v6 = 0;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 8 * v1 + 32) = v4;
  do
  {
    v7 = *(_QWORD *)(v5 + 8 * v3 + 32);
    v8 = __OFADD__(v6, v7);
    v6 += v7;
    if (v8)
    {
      __break(1u);
      goto LABEL_9;
    }
    ++v3;
  }
  while (v2 != v3);
  swift_release();
  result = v6 + 1;
  if (__OFADD__(v6, 1))
    __break(1u);
  return result;
}

uint64_t specialized Prio3InputShare.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  unint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t result;
  size_t v35;
  uint64_t v36;
  char *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  char v80;
  char *v81;
  char *v82;

  outlined init with take of Share<Field64>(a3, (uint64_t)&v77, &demangling cache variable for type metadata for Prio3InputShareDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?);
  if (v78 == 255)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v9 = 0;
    v9[1] = 0;
    return swift_willThrow();
  }
  v10 = v77;
  v11 = v79;
  v12 = v81;
  if (a1)
    v13 = a2 - a1;
  else
    v13 = 0;
  v14 = v77;
  if ((v78 & 1) == 0)
  {
    if ((unint64_t)(v77 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v14 = 8 * v77;
  }
  v15 = v79;
  v5 = v80 & 1;
  if ((v80 & 1) == 0)
  {
    if ((unint64_t)(v79 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v15 = 8 * v79;
  }
  v16 = __OFADD__(v14, v15);
  v17 = v14 + v15;
  if (v16)
  {
    __break(1u);
    goto LABEL_48;
  }
  v16 = __OFADD__(v17, v81);
  v18 = &v81[v17];
  if (v16)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v19 = v78 & 1;
  if ((char *)v13 != v18)
  {
    v35 = v13;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v19)
    {
      if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      v10 *= 8;
    }
    if (!(_DWORD)v5)
    {
      if ((unint64_t)(v11 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v11 *= 8;
    }
    v36 = v10 + v11;
    if (!__OFADD__(v10, v11))
    {
      v16 = __OFADD__(v36, v12);
      v37 = &v12[v36];
      if (!v16)
      {
        v82 = v37;
        v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        v39._countAndFlagsBits = 0x203A746F67202CLL;
        v39._object = (void *)0xE700000000000000;
        String.append(_:)(v39);
        v82 = (char *)v35;
        v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        *v41 = 0xD00000000000005FLL;
        v41[1] = 0x8000000249C30A40;
        return swift_willThrow();
      }
      goto LABEL_52;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v76 = v4;
  LODWORD(v72) = v80 & 1;
  v73 = v79;
  v20 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v5 = v10;
  v74 = v19;
  if (v19)
    goto LABEL_18;
  if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7)
    goto LABEL_53;
  v5 = 8 * v10;
LABEL_18:
  v68 = a4;
  v69 = (uint64_t)v12;
  v21 = (2 * *(_QWORD *)(v20 + 16)) | 1;
  v22 = (char *)specialized Collection.prefix(_:)(v5, v20, v20 + 32, 0, v21);
  v24 = v23;
  v12 = v25;
  v27 = v26;
  a2 = specialized Collection.dropFirst(_:)(v5, v20, v20 + 32, 0, v21);
  v70 = v28;
  v5 = v29;
  v31 = v30;
  swift_retain();
  v32 = specialized Share.init<A>(from:parameter:)(v22, v24, (uint64_t)v12, v27, v10, v74);
  if (v4)
    return swift_unknownObjectRelease();
  v76 = v32;
  v42 = v73;
  if (!(_DWORD)v72)
  {
    if ((unint64_t)(v73 - 0x1000000000000000) >> 61 == 7)
    {
      v42 = 8 * v73;
      goto LABEL_33;
    }
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
LABEL_33:
  v67 = v33;
  v43 = (char *)specialized Collection.prefix(_:)(v42, a2, v70, v5, v31);
  v45 = v44;
  v47 = v46;
  v75 = v48;
  v49 = specialized Collection.dropFirst(_:)(v42, a2, v70, v5, v31);
  v71 = v50;
  v52 = v51;
  v54 = v53;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v12 = specialized Share.init<A>(from:parameter:)(v43, v45, v47, v75, v73, v72);
  v56 = v55;
  if (v69 > 0)
  {
    v74 = v55;
    v57 = v49;
    a2 = specialized Collection.prefix(_:)(v69, v49, v71, v52, v54);
    v73 = v58;
    v60 = v59;
    v62 = v61;
    specialized Collection.dropFirst(_:)(v69, v57, v71, v52, v54);
    v5 = v62;
    if ((v62 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
LABEL_36:
      specialized _copyCollectionToContiguousArray<A>(_:)(a2, v73, v60, v5);
      goto LABEL_43;
    }
    v72 = v60;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v65 = swift_dynamicCastClass();
    if (!v65)
    {
      swift_unknownObjectRelease();
      v65 = MEMORY[0x24BEE4AF8];
    }
    v66 = *(_QWORD *)(v65 + 16);
    swift_release();
    if (!__OFSUB__(v62 >> 1, v60))
    {
      if (v66 == (v62 >> 1) - v60)
      {
        v63 = swift_dynamicCastClass();
        if (!v63)
        {
          swift_unknownObjectRelease();
          v64 = MEMORY[0x24BEE4AF8];
          goto LABEL_44;
        }
LABEL_43:
        v64 = v63;
LABEL_44:
        v56 = v74;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_45;
      }
      goto LABEL_58;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    swift_unknownObjectRelease();
    v60 = v72;
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  v64 = 0;
LABEL_45:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v68 = v76;
  *(_BYTE *)(v68 + 8) = v67 & 1;
  *(_QWORD *)(v68 + 16) = v12;
  *(_BYTE *)(v68 + 24) = v56 & 1;
  *(_QWORD *)(v68 + 32) = v64;
  return result;
}

uint64_t specialized Prio3InputShare.encode<A>(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t j;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;

  v2 = v1;
  v4 = *v2;
  if ((v2[1] & 1) != 0)
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v16 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    v14[0] = v4;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
LABEL_3:
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v10 = *(_QWORD *)(v4 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v10; ++i)
      specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(a1);
    goto LABEL_3;
  }
LABEL_4:
  v5 = v2[2];
  if ((v2[3] & 1) != 0)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v15 = v6;
    v16 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    v14[0] = v5;
    __swift_project_boxed_opaque_existential_1(v14, v6);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
LABEL_6:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(v5 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    for (j = 0; j != v12; ++j)
      specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(a1);
    goto LABEL_6;
  }
LABEL_7:
  outlined init with take of Share<Field64>((uint64_t)(v2 + 4), (uint64_t)v17, &demangling cache variable for type metadata for Seed?);
  result = outlined init with take of Share<Field64>((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for Seed?);
  v8 = v18;
  if (v18)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v15 = v9;
    v16 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    v14[0] = v8;
    __swift_project_boxed_opaque_existential_1(v14, v9);
    outlined retain of Seed?((uint64_t)v17);
    swift_bridgeObjectRetain();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return outlined release of Seed?((uint64_t)v17);
  }
  return result;
}

uint64_t specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (result >= 1 && a2 >= 1)
  {
    v2 = result * a2;
    if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
    {
      if ((unint64_t)result <= 0x3F)
        return v2;
      v10 = 0;
      v11 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v5._countAndFlagsBits = 0xD000000000000021;
      v5._object = (void *)0x8000000249C30C90;
      String.append(_:)(v5);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 0x74694278616D202CLL;
      v7._object = (void *)0xEE003D6874646957;
      String.append(_:)(v7);
    }
    else
    {
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v10 = 0xD000000000000013;
      v11 = 0x8000000249C30CC0;
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0xD000000000000014;
      v4._object = (void *)0x8000000249C30CE0;
      String.append(_:)(v4);
    }
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v9 = v10;
    *(_QWORD *)(v9 + 8) = v11;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow();
    return v2;
  }
  __break(1u);
  return result;
}

char *specialized SumVectorType.encode(measurement:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  char *v40;

  v3 = a2;
  v4 = a1;
  v5 = v2[1];
  if (!a1)
  {
    if (!v5)
      goto LABEL_6;
LABEL_5:
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 540877088;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000020;
    *(_QWORD *)(v10 + 8) = 0x8000000249C30BC0;
    *(_BYTE *)(v10 + 16) = 2;
    return (char *)swift_willThrow();
  }
  if (a2 - a1 != v5)
    goto LABEL_5;
LABEL_6:
  v12 = v2[5];
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *v2 & ~(*v2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v40 = result;
  v13 = 1 << v12;
  if ((unint64_t)v12 >= 0x40)
    v13 = 0;
  if ((unint64_t)v12 > 0x40)
    v13 = 0;
  v37 = v12;
  v38 = v13;
  v36 = v3;
  if (v4)
  {
    if (v3)
      goto LABEL_15;
LABEL_18:
    while (1)
    {
      v15 = *v4;
      v14 = v4 + 1;
      v16 = v15;
      if (v38 < v15)
        break;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0, MEMORY[0x24BEE4AF8]);
      v17 = result;
      if (v12 >= 65)
      {
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 2113056;
        v28._object = (void *)0xE300000000000000;
        String.append(_:)(v28);
        v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30 = 0x8000000249C30610;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v31 = 0xD000000000000012;
        v32 = 2;
        goto LABEL_39;
      }
      if (v12 < 0)
      {
        __break(1u);
        return result;
      }
      v39 = v14;
      if (v12)
      {
        v18 = v16;
        do
        {
          v19 = ((uint64_t)(v18 << 63) >> 63) & 0xFFFFFFFE00000001;
          v20 = ((unint64_t)-(uint64_t)(v19 | (v19 << 32)) * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
          if (__CFADD__(-(uint64_t)v19, v19))
          {
            if (v20 > 0xFFFFFFFEFFFFFFFFLL)
              v20 = 0;
            else
              ++v20;
          }
          v22 = *((_QWORD *)v17 + 2);
          v21 = *((_QWORD *)v17 + 3);
          if (v22 >= v21 >> 1)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v17);
          *((_QWORD *)v17 + 2) = v22 + 1;
          *(_QWORD *)&v17[8 * v22 + 32] = v20;
          v18 >>= 1;
          --v12;
        }
        while (v12);
      }
      else
      {
        v18 = v16;
      }
      if (v18)
      {
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 0x6962206874697720;
        v34._object = (void *)0xEF3D687464695774;
        String.append(_:)(v34);
        v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        v30 = 0x8000000249C305F0;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v31 = 0xD000000000000014;
        v32 = 1;
LABEL_39:
        *(_QWORD *)(v31 + 8) = v30;
        *(_BYTE *)(v31 + 16) = v32;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return (char *)swift_bridgeObjectRelease();
      }
      specialized Array.append<A>(contentsOf:)((uint64_t)v17);
      v3 = v36;
      v12 = v37;
      v4 = v39;
      if (v36)
      {
LABEL_15:
        if (v4 == v3)
          return v40;
      }
    }
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0x646957746962202CLL;
    v24._object = (void *)0xEB000000003D6874;
    String.append(_:)(v24);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v26 = 0xD000000000000016;
    *(_QWORD *)(v26 + 8) = 0x8000000249C30BF0;
    *(_BYTE *)(v26 + 16) = 1;
    swift_willThrow();
    return (char *)swift_bridgeObjectRelease();
  }
  if (v3)
  {
    v4 = 0;
    goto LABEL_18;
  }
  return result;
}

uint64_t specialized SumVectorType.truncate(measurement:)(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22[4];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *v1;
  if (v3 != *v1)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v22[3] = v4;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v8 = 0x8000000249C307C0;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v12 = 0xD00000000000001BLL;
    *(_QWORD *)(v12 + 8) = 0x8000000249C307C0;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow();
    return v8;
  }
  v5 = v2;
  v7 = v1[5];
  if (v7 == 1)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[1] & ~((uint64_t)v1[1] >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v7)
  {
    v8 = result;
    if (v7 < 1 || !v3)
      return v8;
    v14 = 0;
    v15 = 1;
    while (1)
    {
      v16 = v14 + v7;
      v17 = __OFADD__(v14, v7) ? ((v14 + v7) >> 63) ^ 0x8000000000000000 : v14 + v7;
      if (__OFADD__(v14, v7))
        break;
      if (v16 < v14)
        goto LABEL_25;
      if (!v15)
        goto LABEL_26;
      if (v14 < 0)
        goto LABEL_27;
      if (v3 < v16)
        goto LABEL_28;
      v18 = (2 * v16) | 1;
      swift_bridgeObjectRetain();
      result = specialized FieldElement.init(inputVector:)(a1 + 32, v14, v18, v22);
      if (v5)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
      v19 = v22[0];
      v21 = *(_QWORD *)(v8 + 16);
      v20 = *(_QWORD *)(v8 + 24);
      if (v21 >= v20 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, (char *)v8);
        v8 = result;
      }
      *(_QWORD *)(v8 + 16) = v21 + 1;
      *(_QWORD *)(v8 + 8 * v21 + 32) = v19;
      v15 = v3 >= v17;
      v14 = v17;
      if (v17 >= v3)
        return v8;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Prio3PublicShare.init<A>(from:parameter:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W2>, int64_t a4@<X3>, size_t *a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  _QWORD v17[5];

  if ((a3 & 1) == 0)
  {
    *a5 = 0;
    return result;
  }
  if ((unint64_t)(a4 - 0x400000000000000) >> 59 != 31)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = 32 * a4;
  if (!result)
  {
    if (!v7)
      goto LABEL_10;
    v8 = 0;
LABEL_9:
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 2107936;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0x203A746F67202CLL;
    v12._object = (void *)0xE700000000000000;
    String.append(_:)(v12);
    v17[4] = v8;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v14 = 0xD000000000000060;
    v14[1] = 0x8000000249C30AA0;
    return swift_willThrow();
  }
  v8 = a2 - result;
  if (v7 != a2 - result)
    goto LABEL_9;
LABEL_10:
  result = specialized _copyCollectionToContiguousArray<A>(_:)(result, a2);
  v15 = (2 * *(_QWORD *)(result + 16)) | 1;
  v17[0] = result;
  v17[1] = result + 32;
  v17[2] = 0;
  v17[3] = v15;
  if ((a4 & 0x8000000000000000) == 0)
  {
    v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg50118_s4VDAF16Prio3PublicShareV4from9parameterACyxq_Gqd___Sb19isJointRandRequired_Si16numOfAggregatorstSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E8VSiXEfU_s10ArraySliceVys5UInt8VGSiTf1cn_n(0, a4, v17, 32);
    result = swift_unknownObjectRelease();
    *a5 = v16;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Prio3PublicShare.encodedLength.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;

  v1 = result;
  if (!result)
    return v1;
  v2 = *(_QWORD *)(result + 16);
  if (!v2)
  {
    v4 = (char *)MEMORY[0x24BEE4AF8];
    v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v8)
      goto LABEL_10;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 8 * v3 + 32) + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v7 = *((_QWORD *)v4 + 2);
    v6 = *((_QWORD *)v4 + 3);
    if (v7 >= v6 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    ++v3;
    *((_QWORD *)v4 + 2) = v7 + 1;
    *(_QWORD *)&v4[8 * v7 + 32] = v5;
  }
  while (v2 != v3);
  result = swift_bridgeObjectRelease();
  v8 = *((_QWORD *)v4 + 2);
  if (!v8)
  {
LABEL_15:
    v1 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v1;
  }
LABEL_10:
  v1 = 0;
  v9 = (uint64_t *)(v4 + 32);
  while (1)
  {
    v10 = *v9++;
    v11 = __OFADD__(v1, v10);
    v1 += v10;
    if (v11)
      break;
    if (!--v8)
      goto LABEL_16;
  }
  __break(1u);
  return result;
}

void specialized Prio3.splitSeedBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

_QWORD *sub_249BDEA30()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[18];

  v7 = *v1;
  v8 = *v1 - 1;
  if (__OFSUB__(*v1, 1))
  {
    __break(1u);
    goto LABEL_55;
  }
  if (*v1 + 0x3FFFFFFFFFFFFFFFLL < 0)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v9 = (2 * v8) | 1;
  if ((uint64_t)v1[4] <= 0)
    v7 = 0;
  v10 = __OFADD__(v9, v7);
  v11 = v9 + v7;
  if (v10)
    goto LABEL_56;
  if ((unint64_t)(v11 - 0x400000000000000) >> 59 != 31)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (BYTE6(v0) != 32 * v11)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  outlined copy of Data._Representation(v2, (unint64_t)v0);
  specialized _copyCollectionToContiguousArray<A>(_:)(v2, (uint64_t)v0);
  v13 = v12;
  v14 = outlined consume of Data._Representation(v2, (unint64_t)v0);
  v16 = (2 * *(_QWORD *)(v13 + 16)) | 1;
  *(_QWORD *)(v6 - 224) = v13;
  *(_QWORD *)(v6 - 216) = v13 + 32;
  *(_QWORD *)(v6 - 208) = 0;
  *(_QWORD *)(v6 - 200) = v16;
  if (v8 < 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  MEMORY[0x24BDAC7A8](v14, v15);
  v28[2] = v6 - 224;
  v28[3] = 32;
  v28[4] = v6 - 192;
  v17 = v8;
  v8 = 0;
  v0 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AISg14jointRandBlindts5NeverOTg5(partial apply for specialized closure #1 in Prio3.splitSeedBytes<A>(_:), (uint64_t)v28, 0, v17);
  if (*(uint64_t *)(v6 - 160) >= 1)
  {
    v18 = *(_QWORD *)(v6 - 208);
    v2 = *(_QWORD *)(v6 - 200);
    v19 = v2 >> 1;
    v20 = (v2 >> 1) - v18;
    if (__OFSUB__(v2 >> 1, v18))
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    v8 = *(_QWORD *)(v6 - 224);
    v3 = *(_QWORD *)(v6 - 216);
    v21 = v2 >> 1;
    if (v20 >= 0x20 && (v21 = v18 + 32, __OFADD__(v18, 32)))
    {
      __break(1u);
    }
    else
    {
      if (v21 < v18)
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v19 < v18)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      if (v19 < v21)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      if (v21 < 0)
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      if (v20 < 0x20)
      {
LABEL_21:
        if (v19 < v18)
        {
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
        *(_QWORD *)(v6 - 208) = v19;
        if ((v2 & 1) == 0)
        {
          swift_unknownObjectRetain();
LABEL_24:
          specialized _copyCollectionToContiguousArray<A>(_:)(v8, v3, v18, v2 & 1 | (2 * v21));
LABEL_32:
          swift_unknownObjectRelease();
          goto LABEL_33;
        }
        v4 = type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v22 = swift_dynamicCastClass();
        if (!v22)
        {
          swift_unknownObjectRelease();
          v22 = MEMORY[0x24BEE4AF8];
        }
        v5 = *(_QWORD *)(v22 + 16);
        swift_release();
        if (!__OFSUB__(v21, v18))
        {
          if (v5 == v21 - v18)
          {
            if (!swift_dynamicCastClass())
              swift_unknownObjectRelease();
            goto LABEL_32;
          }
          goto LABEL_81;
        }
LABEL_80:
        __break(1u);
LABEL_81:
        swift_unknownObjectRelease();
        goto LABEL_24;
      }
      if (!__OFADD__(v18, 32))
      {
        if (v19 < v18 + 32)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        v19 = v18 + 32;
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_80;
  }
LABEL_33:
  v2 = *(_QWORD *)(v6 - 208);
  v3 = *(_QWORD *)(v6 - 200);
  v23 = v3 >> 1;
  v24 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v8 = *(_QWORD *)(v6 - 224);
  v4 = *(_QWORD *)(v6 - 216);
  v5 = v3 >> 1;
  if (v24 >= 0x20)
  {
    v5 = v2 + 32;
    if (__OFADD__(v2, 32))
      goto LABEL_74;
  }
  if (v5 < (uint64_t)v2)
    goto LABEL_61;
  if (v23 < (uint64_t)v2)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v23 < v5)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v5 < 0)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v24 < 0x20)
    goto LABEL_44;
  if (__OFADD__(v2, 32))
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v23 < (uint64_t)(v2 + 32))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v23 = v2 + 32;
LABEL_44:
  if (v23 < (uint64_t)v2)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if ((v3 & 1) == 0)
  {
LABEL_46:
    specialized _copyCollectionToContiguousArray<A>(_:)(v8, v4, v2, v3 & 1 | (2 * v5));
    goto LABEL_53;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v25 = swift_dynamicCastClass();
  if (!v25)
  {
    swift_unknownObjectRelease();
    v25 = MEMORY[0x24BEE4AF8];
  }
  v26 = *(_QWORD *)(v25 + 16);
  swift_release();
  if (__OFSUB__(v5, v2))
    goto LABEL_76;
  if (v26 != v5 - v2)
  {
LABEL_77:
    swift_unknownObjectRelease();
    goto LABEL_46;
  }
  if (!swift_dynamicCastClass())
    swift_unknownObjectRelease();
LABEL_53:
  swift_unknownObjectRelease();
  return v0;
}

_QWORD *specialized Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;

  outlined init with take of Share<Field64>(a5 + 32, (uint64_t)v19, &demangling cache variable for type metadata for Seed?);
  v10 = *(_QWORD *)(v5 + 32);
  if (v10 < 1)
  {
    outlined init with take of Share<Field64>((uint64_t)v19, (uint64_t)&v21, &demangling cache variable for type metadata for Seed?);
    if (!(v21 | a4))
      return 0;
    _StringGuts.grow(_:)(103);
    v16._object = (void *)0x8000000249C30750;
    v16._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0xD000000000000065;
    v17._object = (void *)0x8000000249C30950;
    String.append(_:)(v17);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0xE000000000000000;
    goto LABEL_10;
  }
  outlined init with take of Share<Field64>((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for Seed?);
  v11 = v20;
  if (v20)
  {
    if (a4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>);
      v12 = (2 * *(_QWORD *)(a3 + 16)) | 1;
      v13 = *(_QWORD *)(v5 + 8);
      outlined retain of Seed?((uint64_t)v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return specialized VerificationJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:count:numOfProofs:)(a4, a3, a3 + 32, 0, v12, v11, a1, a2, v10, v13);
    }
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000038;
    *(_QWORD *)(v18 + 8) = 0x8000000249C30A00;
LABEL_10:
    *(_BYTE *)(v18 + 16) = 1;
    return (_QWORD *)swift_willThrow();
  }
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  swift_allocError();
  *(_QWORD *)v15 = 0xD000000000000037;
  *(_QWORD *)(v15 + 8) = 0x8000000249C309C0;
  *(_BYTE *)(v15 + 16) = 0;
  return (_QWORD *)swift_willThrow();
}

_QWORD *specialized Prio3.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderJointBlind:helperShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;

  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *v4 & ~(*v4 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v11 = v9[2];
  v10 = v9[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[5 * v11];
  v12[4] = a1;
  *((_BYTE *)v12 + 40) = 0;
  v12[6] = a2;
  *((_BYTE *)v12 + 56) = 0;
  v12[8] = a3;
  v13 = *(_QWORD *)(a4 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    v14 = 40 * v11 + 72;
    v15 = v11 + 2;
    v16 = (uint64_t *)(a4 + 48);
    do
    {
      v18 = *(v16 - 2);
      v17 = *(v16 - 1);
      v19 = *v16;
      v20 = v9[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v15 - 1 >= v20 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v15, 1, v9);
      v16 += 3;
      v9[2] = v15;
      v21 = (char *)v9 + v14;
      *(_QWORD *)v21 = v18;
      v21[8] = 1;
      *((_QWORD *)v21 + 2) = v17;
      v21[24] = 1;
      v14 += 40;
      ++v15;
      *((_QWORD *)v21 + 4) = v19;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  return v9;
}

unint64_t specialized closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0xFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4 = *(_QWORD *)(a2 + 8 * result + 32);
  v5 = *(_QWORD *)(a3 + 8);
  swift_bridgeObjectRetain();
  v6 = specialized static VDAFProtocol.domainSeparationTag(usage:)(1u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_249C2A640;
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 <= 0xFF)
  {
    *(_BYTE *)(result + 32) = v5;
    *(_BYTE *)(result + 33) = v3;
    v7 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v4, v6, result);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Prio3PrepareShare.encode<A>(into:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  v4 = (uint64_t *)result;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 8 * i + 32);
      specialized FieldElement.encode<A>(into:)(v4, v8);
    }
    result = swift_bridgeObjectRelease();
  }
  if (a3)
  {
    v9 = swift_bridgeObjectRetain();
    return specialized Array.append<A>(contentsOf:)(v9);
  }
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Data.Iterator();
  MEMORY[0x24BDAC7A8](v3, v4);
  __asm { BR              X10 }
}

_QWORD *sub_249BDF434()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    outlined copy of Data._Representation(v2, v0);
    v7 = Data._copyContents(initializing:)();
    outlined consume of Data._Representation(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x249BDF508);
    }
  }
  return v4;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined retain of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of Prio3PrepareState<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error;
  if (!lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3Error, &type metadata for Prio3Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error;
  if (!lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3Error, &type metadata for Prio3Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error);
  }
  return result;
}

void specialized closure #1 in Array<A>.init<A>(from:parameter:)(_QWORD *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  specialized Collection.prefix(_:)(a2, *a1, v7, v8, v9);
  v11 = v10;
  v13 = v12;
  v20 = v14;
  *a1 = specialized Collection.dropFirst(_:)(a2, v6, v7, v8, v9);
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  swift_unknownObjectRetain();
  specialized FieldElement.init<A>(bytes:mask:)(v11, v13, v20, -1, &v22);
  if (v21)
    *a3 = v21;
  else
    *a4 = v22;
}

uint64_t specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD *v5;

  if (*(_QWORD *)(a1 + 16) == 8)
    return *(_QWORD *)(a1 + 32);
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3D746F67202CLL;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v5 = 0xD00000000000001DLL;
  v5[1] = 0x8000000249C300D0;
  return swift_willThrow();
}

uint64_t specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;

  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_24;
  if ((a3 >> 1) - a2 != 8)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0x3D746F67202CLL;
    v12._object = (void *)0xE600000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v14 = 0xD00000000000001DLL;
    v14[1] = 0x8000000249C300D0;
    return swift_willThrow();
  }
  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  result = 0;
  v7 = v3 + a2;
  while (a2 + v6 >= a2 && a2 + v6 < (uint64_t)(a3 >> 1))
  {
    if (v4 < -64 || v4 > 64)
      goto LABEL_15;
    v9 = *(unsigned __int8 *)(v7 + v6);
    if (v4 < 0)
    {
      if ((unint64_t)v4 <= 0xFFFFFFFFFFFFFFC0)
        goto LABEL_15;
      v10 = v9 >> (v5 & 0x38);
      goto LABEL_14;
    }
    if ((unint64_t)v4 < 0x40)
    {
      v10 = v9 << (v4 & 0x38);
LABEL_14:
      result |= v10;
    }
LABEL_15:
    if (v6 == 7)
      return result;
    ++v6;
    v5 -= 8;
    v4 += 8;
    if (__OFADD__(a2, v6))
      goto LABEL_23;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized SumVectorType.decode(data:numOfMeasurements:)(uint64_t a1)
{
  uint64_t v1;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(v1 + 8))
    return specialized static FieldElement.elementsToIntegers(_:)(a1);
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 540877088;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  swift_allocError();
  *(_QWORD *)v6 = 0xD000000000000016;
  *(_QWORD *)(v6 + 8) = 0x8000000249C30730;
  *(_BYTE *)(v6 + 16) = 2;
  return swift_willThrow();
}

uint64_t specialized Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_31;
  v22 = *(_OWORD *)(v1 + 16);
  if ((*((_QWORD *)&v22 + 1) & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
  }
  else
  {
    v4 = v2;
    v5 = result;
    if (*((_QWORD *)&v22 + 1))
    {
      v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&v22 + 1);
      bzero((void *)(v6 + 32), 8 * *((_QWORD *)&v22 + 1));
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    result = swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      v8 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_30;
      v9 = *(_QWORD *)(v5 + 32 + 8 * v7);
      v10 = *(_QWORD *)(v6 + 16);
      if (v10 != *(_QWORD *)(v9 + 16))
      {
LABEL_24:
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = 540877088;
        v18._object = (void *)0xE400000000000000;
        String.append(_:)(v18);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v20 = 0xD000000000000020;
        *(_QWORD *)(v20 + 8) = 0x8000000249C30700;
        *(_BYTE *)(v20 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_26:
        swift_bridgeObjectRelease();
        return v5;
      }
      if (v10)
      {
        result = swift_bridgeObjectRetain();
        v11 = 4;
        while (1)
        {
          v13 = *(_QWORD *)(v9 + 8 * v11);
          v12 = *(_QWORD *)(v6 + 8 * v11);
          if (v13)
          {
            v14 = v13 <= 0xFFFFFFFF00000001;
            v15 = 0xFFFFFFFF00000001 - v13;
            if (!v14)
            {
              __break(1u);
LABEL_29:
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            if (v12 >= v15)
            {
              v12 -= v15;
            }
            else
            {
              v14 = v15 <= 0xFFFFFFFF00000001;
              v16 = 0xFFFFFFFF00000001 - v15;
              if (!v14)
                goto LABEL_29;
              v14 = __CFADD__(v12, v16);
              v12 += v16;
              if (v14)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(_QWORD *)(v6 + 8 * v11++) = v12;
          if (v11 - v10 == 4)
          {
            result = swift_bridgeObjectRelease();
            break;
          }
        }
      }
      v7 = v8;
    }
    while (v8 != v3);
    swift_bridgeObjectRelease();
    v21 = specialized SumVectorType.decode(data:numOfMeasurements:)(v6);
    if (v4)
      goto LABEL_26;
    v5 = v21;
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError;
  if (!lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for FLPTypeError, &type metadata for FLPTypeError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError;
  if (!lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for FLPTypeError, &type metadata for FLPTypeError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError);
  }
  return result;
}

void partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:)(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  specialized closure #1 in Array<A>.init<A>(from:parameter:)(*(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

{
  partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:)(a1, a2);
}

uint64_t outlined retain of Seed?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with take of Share<Field64>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined release of Seed?(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t partial apply for specialized closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[7];

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD **)(v1 + 24);
  v4 = v3[5];
  v8[4] = v3[4];
  v8[5] = v4;
  v8[6] = v3[6];
  v5 = v3[1];
  v8[0] = *v3;
  v8[1] = v5;
  v6 = v3[3];
  v8[2] = v3[2];
  v8[3] = v6;
  return specialized closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(a1, v2, (uint64_t)v8);
}

uint64_t partial apply for specialized closure #1 in Prio3.splitSeedBytes<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[7];

  v4 = (_QWORD *)v1[2];
  v5 = v1[3];
  v6 = (_OWORD *)v1[4];
  v7 = v6[5];
  v13[4] = v6[4];
  v13[5] = v7;
  v13[6] = v6[6];
  v8 = v6[1];
  v13[0] = *v6;
  v13[1] = v8;
  v9 = v6[3];
  v13[2] = v6[2];
  v13[3] = v9;
  result = specialized closure #1 in Prio3.splitSeedBytes<A>(_:)(v4, v5, (uint64_t)v13);
  if (!v2)
  {
    *a1 = result;
    a1[1] = v11;
    a1[2] = v12;
  }
  return result;
}

uint64_t specialized closure #1 in Prio3.splitSeedBytes<A>(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;

  v6 = *a1;
  v5 = a1[1];
  v8 = a1[2];
  v7 = a1[3];
  v9 = specialized Collection.prefix(_:)(a2, *a1, v5, v8, v7);
  v55 = v10;
  v12 = v11;
  v14 = v13;
  *a1 = specialized Collection.dropFirst(_:)(a2, v6, v5, v8, v7);
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  if ((v14 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    specialized _copyCollectionToContiguousArray<A>(_:)(v9, v55, v12, v14);
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v20 = *(_QWORD *)(v19 + 16);
  swift_release();
  if (__OFSUB__(v14 >> 1, v12))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v20 != (v14 >> 1) - v12)
  {
LABEL_33:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_unknownObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
LABEL_10:
  v56 = v18;
  swift_unknownObjectRelease();
  v21 = *a1;
  v22 = a1[1];
  v23 = a1[2];
  v24 = a1[3];
  v25 = specialized Collection.prefix(_:)(a2, *a1, v22, v23, v24);
  v53 = v26;
  v28 = v27;
  v30 = v29;
  *a1 = specialized Collection.dropFirst(_:)(a2, v21, v22, v23, v24);
  a1[1] = v31;
  a1[2] = v32;
  a1[3] = v33;
  if ((v30 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_12:
    v34 = a3;
    specialized _copyCollectionToContiguousArray<A>(_:)(v25, v53, v28, v30);
    goto LABEL_19;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v35 = swift_dynamicCastClass();
  if (!v35)
  {
    swift_unknownObjectRelease();
    v35 = MEMORY[0x24BEE4AF8];
  }
  v36 = *(_QWORD *)(v35 + 16);
  swift_release();
  if (__OFSUB__(v30 >> 1, v28))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v36 != (v30 >> 1) - v28)
  {
LABEL_35:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  v34 = a3;
  if (!swift_dynamicCastClass())
    swift_unknownObjectRelease();
LABEL_19:
  swift_unknownObjectRelease();
  if (*(uint64_t *)(v34 + 32) <= 0)
    return v56;
  v37 = *a1;
  v38 = a1[1];
  v39 = a1[2];
  v40 = a1[3];
  v41 = specialized Collection.prefix(_:)(a2, *a1, v38, v39, v40);
  v54 = v42;
  v58 = v43;
  v45 = v44;
  *a1 = specialized Collection.dropFirst(_:)(a2, v37, v38, v39, v40);
  a1[1] = v46;
  a1[2] = v47;
  a1[3] = v48;
  if ((v45 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v50 = swift_dynamicCastClass();
    if (!v50)
    {
      swift_unknownObjectRelease();
      v50 = MEMORY[0x24BEE4AF8];
    }
    v51 = *(_QWORD *)(v50 + 16);
    swift_release();
    v49 = v58;
    if (__OFSUB__(v45 >> 1, v58))
    {
      __break(1u);
    }
    else if (v51 == (v45 >> 1) - v58)
    {
      if (!swift_dynamicCastClass())
        swift_unknownObjectRelease();
      goto LABEL_30;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    v49 = v58;
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v41, v54, v49, v45);
LABEL_30:
  swift_unknownObjectRelease();
  return v56;
}

uint64_t ParallelSum.arity.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ParallelSum.degree.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ParallelSum.inner.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t ParallelSum.count.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t ParallelSum.numOfCalls.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t ParallelSum.init(inner:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  if ((unsigned __int128)(a2 * (__int128)result) >> 64 == (a2 * result) >> 63)
  {
    *(_QWORD *)a5 = a2 * result;
    *((_QWORD *)a5 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
    v12 = type metadata accessor for ParallelSum(0, a3, a4, v11);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(&a5[*(int *)(v12 + 40)], a1, a3);
    *(_QWORD *)&a5[*(int *)(v12 + 44)] = a2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ParallelSum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParallelSum);
}

uint64_t ParallelSum.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t result;
  BOOL v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t TupleTypeMetadata2;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  char *v110;
  char *v111;
  char *v112;
  uint64_t AssociatedConformanceWitness;
  void (*v114)(char *, uint64_t);
  int64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;

  v120 = a2;
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v106 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v105 = (char *)&v88 - v13;
  v119 = a4;
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v15 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v16);
  v103 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v19);
  v102 = (char *)&v88 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v101 = type metadata accessor for Range();
  v100 = *(_QWORD *)(v101 - 8);
  v22 = MEMORY[0x24BDAC7A8](v101, v21);
  v99 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v24);
  v98 = (char *)&v88 - v25;
  v97 = swift_getAssociatedTypeWitness();
  v96 = *(_QWORD *)(v97 - 8);
  v27 = MEMORY[0x24BDAC7A8](v97, v26);
  v95 = (char *)&v88 - v28;
  v122 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v27, v29);
  v112 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Optional();
  v89 = *(_QWORD *)(v90 - 8);
  v32 = MEMORY[0x24BDAC7A8](v90, v31);
  v111 = (char *)&v88 - v33;
  v125 = v15;
  v34 = *(_QWORD *)(v15 - 8);
  v36 = MEMORY[0x24BDAC7A8](v32, v35);
  v116 = (char *)&v88 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v110 = (char *)&v88 - v40;
  MEMORY[0x24BDAC7A8](v39, v41);
  v124 = (char *)&v88 - v42;
  v43 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v107 = AssociatedTypeWitness;
  v108 = a5;
  v94 = v43;
  dispatch thunk of IteratorProtocol.next()();
  v118 = a1;
  v126 = a3;
  v123 = v14;
  v44 = dispatch thunk of Collection.count.getter();
  v45 = v121 + *(int *)(v120 + 40);
  v46 = *(void (**)(uint64_t, uint64_t))(v9 + 24);
  v120 = v10;
  v117 = v9;
  v109 = v46;
  result = ((uint64_t (*)(uint64_t, uint64_t))v46)(v10, v9);
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v48 = v44 >= 0;
  if (result > 0)
    v48 = v44 < 1;
  v121 = v34;
  if (!v48)
  {
    v49 = 0;
    v93 = v44;
    v92 = v45;
    v91 = result;
    while (1)
    {
      v50 = v49 + result;
      if (__OFADD__(v49, result))
        v50 = ((v49 + result) >> 63) ^ 0x8000000000000000;
      v115 = v50;
      v51 = v110;
      v52 = v118;
      v53 = v125;
      v54 = v126;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v55 = *(void (**)(char *, uint64_t))(v121 + 8);
      v55(v51, v53);
      v109(v120, v117);
      dispatch thunk of Collection.endIndex.getter();
      v56 = v111;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:limitedBy:)();
      v114 = v55;
      v55(v51, v53);
      v57 = v112;
      (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v112, v52, v54);
      v58 = v121;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v56, 1, v53) == 1)
      {
        v59 = v116;
        v60 = v126;
        dispatch thunk of Collection.endIndex.getter();
        (*(void (**)(char *, uint64_t))(v122 + 8))(v57, v60);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v56, v90);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v122 + 8))(v57, v126);
        v59 = v116;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v116, v56, v125);
      }
      v61 = v124;
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
        break;
      v62 = v59;
      v63 = TupleTypeMetadata2;
      v64 = v102;
      v65 = &v102[*(int *)(TupleTypeMetadata2 + 48)];
      v66 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v67 = v125;
      v66(v102, v61, v125);
      v66(v65, v62, v67);
      v68 = v103;
      v69 = v58;
      v70 = &v103[*(int *)(v63 + 48)];
      v66(v103, v64, v67);
      v66(v70, v65, v67);
      v71 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
      v72 = v99;
      v71(v99, v68, v67);
      v73 = v114;
      v114(v70, v67);
      v74 = &v68[*(int *)(v63 + 48)];
      v71(v68, v64, v67);
      v71(v74, v65, v67);
      v75 = v101;
      v71(&v72[*(int *)(v101 + 36)], v74, v67);
      v76 = v117;
      v73(v68, v67);
      v77 = v100;
      v78 = v98;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v98, v72, v75);
      v79 = v95;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v75);
      v80 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 64);
      v81 = v97;
      v82 = swift_getAssociatedConformanceWitness();
      v83 = v105;
      v80(v79, v81, v82, v120, v76);
      v84 = v107;
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v83, v84);
      v85 = v79;
      v86 = v124;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v85, v81);
      v73(v116, v67);
      v73(v86, v67);
      v49 = v115;
      v87 = v93 >= v115;
      result = v91;
      if (v91 > 0)
        v87 = v115 >= v93;
      if (v87)
        return result;
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t ParallelSum.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t result;
  BOOL v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _BOOL4 v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t TupleTypeMetadata2;
  char *v100;
  void (*v101)(uint64_t, uint64_t);
  char *v102;
  char *v103;
  uint64_t AssociatedConformanceWitness;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  int64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v112 = a1;
  v81 = a5;
  v109 = a4;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v9);
  v98 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v12);
  v97 = (char *)&v81 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v96 = type metadata accessor for Range();
  v95 = *(_QWORD *)(v96 - 8);
  v15 = MEMORY[0x24BDAC7A8](v96, v14);
  v94 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v17);
  v93 = (char *)&v81 - v18;
  v92 = swift_getAssociatedTypeWitness();
  v91 = *(_QWORD *)(v92 - 8);
  v20 = MEMORY[0x24BDAC7A8](v92, v19);
  v90 = (char *)&v81 - v21;
  v111 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v20, v22);
  v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Optional();
  v82 = *(_QWORD *)(v83 - 8);
  v26 = MEMORY[0x24BDAC7A8](v83, v25);
  v103 = (char *)&v81 - v27;
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = MEMORY[0x24BDAC7A8](v26, v29);
  v108 = (char *)&v81 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v30, v32);
  v102 = (char *)&v81 - v34;
  MEMORY[0x24BDAC7A8](v33, v35);
  v116 = (char *)&v81 - v36;
  v38 = *(_QWORD *)(a2 + 16);
  v37 = *(_QWORD *)(a2 + 24);
  v39 = swift_getAssociatedTypeWitness();
  v40 = swift_getAssociatedConformanceWitness();
  v89 = v39;
  v88 = v40;
  Polynomial.init()(v39, &v119);
  v115 = a3;
  v113 = v7;
  v41 = dispatch thunk of Collection.count.getter();
  v42 = v110 + *(int *)(a2 + 40);
  v43 = *(void (**)(uint64_t, uint64_t))(v37 + 24);
  v105 = v37;
  v101 = v43;
  result = ((uint64_t (*)(uint64_t, uint64_t))v43)(v38, v37);
  if (result)
  {
    v100 = v24;
    v45 = v41 >= 0;
    if (result > 0)
      v45 = v41 < 1;
    v110 = v28;
    v46 = v105;
    if (v45)
    {
LABEL_15:
      *v81 = v119;
      return result;
    }
    v47 = 0;
    v87 = v38;
    v86 = v41;
    v85 = v42;
    v84 = result;
    v114 = AssociatedTypeWitness;
    while (1)
    {
      v48 = v47 + result;
      if (__OFADD__(v47, result))
        v48 = ((v47 + result) >> 63) ^ 0x8000000000000000;
      v107 = v48;
      v49 = v102;
      v50 = v112;
      v51 = v115;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v52 = v46;
      v53 = *(void (**)(char *, uint64_t))(v110 + 8);
      v53(v49, v114);
      v101(v38, v52);
      dispatch thunk of Collection.endIndex.getter();
      v54 = v103;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:limitedBy:)();
      v106 = v53;
      v53(v49, v114);
      v55 = v100;
      v56 = v51;
      v57 = v114;
      (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v100, v50, v56);
      v58 = v110;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v54, 1, v57) == 1)
      {
        v59 = v108;
        v60 = v115;
        dispatch thunk of Collection.endIndex.getter();
        (*(void (**)(char *, uint64_t))(v111 + 8))(v55, v60);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v54, v83);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v111 + 8))(v55, v115);
        v59 = v108;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v108, v54, v57);
      }
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
        break;
      v61 = TupleTypeMetadata2;
      v62 = v97;
      v63 = &v97[*(int *)(TupleTypeMetadata2 + 48)];
      v64 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v64(v97, v116, v57);
      v64(v63, v59, v57);
      v65 = v98;
      v66 = v58;
      v67 = &v98[*(int *)(v61 + 48)];
      v64(v98, v62, v57);
      v64(v67, v63, v57);
      v68 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
      v69 = v94;
      v68(v94, v65, v57);
      v70 = v106;
      v106(v67, v57);
      v71 = &v65[*(int *)(v61 + 48)];
      v68(v65, v62, v57);
      v68(v71, v63, v57);
      v72 = v96;
      v68(&v69[*(int *)(v96 + 36)], v71, v57);
      v70(v65, v57);
      v73 = v95;
      v74 = v93;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v93, v69, v72);
      v75 = v90;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v72);
      v46 = v105;
      v76 = *(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 72);
      v77 = v92;
      v78 = swift_getAssociatedConformanceWitness();
      v38 = v87;
      v76(&v118, v75, v77, v78, v87, v46);
      v117 = v118;
      static Polynomial.+= infix(_:_:)(&v119, &v117, v89, v88);
      swift_bridgeObjectRelease();
      v79 = v116;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v75, v77);
      v70(v108, v57);
      v70(v79, v57);
      v47 = v107;
      v80 = v86 >= v107;
      result = v84;
      if (v84 > 0)
        v80 = v107 >= v86;
      if (v80)
        goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ParallelSum.chunkEvaluateSum(_:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _QWORD v39[2];
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  void (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a1;
  v48 = a6;
  v49 = a7;
  v52 = a4;
  v53 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v15);
  v44 = (uint64_t)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (char *)v39 - v19;
  v43 = *a5;
  v21 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v47 = a9;
  dispatch thunk of IteratorProtocol.next()();
  v42 = v21;
  dispatch thunk of IteratorProtocol.next()();
  v22 = v55;
  v23 = specialized Array.init(repeating:count:)((uint64_t)v20, *v55, AssociatedTypeWitness);
  v46 = *(void (**)(char *, uint64_t))(v14 + 8);
  v46(v20, AssociatedTypeWitness);
  v58 = v23;
  v24 = ArraySlice.startIndex.getter();
  v50 = a2;
  result = ArraySlice.endIndex.getter();
  v45 = a8;
  v51 = *(int *)(a8 + 44);
  v26 = *(uint64_t *)((char *)v22 + v51);
  if (v26)
  {
    v27 = result >= v24;
    if (v26 > 0)
      v27 = v24 >= result;
    if (v27)
      return swift_bridgeObjectRelease();
    v28 = v39[1];
    v40 = *(uint64_t *)((char *)v22 + v51);
    v41 = result;
    while (1)
    {
      v29 = __OFADD__(v24, v26) ? ((v24 + v26) >> 63) ^ 0x8000000000000000 : v24 + v26;
      v30 = *(uint64_t *)((char *)v55 + v51);
      v31 = v24 + v30;
      if (__OFADD__(v24, v30))
        break;
      result = ArraySlice.endIndex.getter();
      if (result >= v31)
        v32 = v31;
      else
        v32 = result;
      if (v32 < v24)
        goto LABEL_21;
      ArraySlice.subscript.getter();
      v48();
      if (v28)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(uint64_t, uint64_t))v46)(v47, AssociatedTypeWitness);
      }
      swift_unknownObjectRelease();
      v56 = v43;
      v57 = v58;
      v33 = type metadata accessor for Array();
      swift_bridgeObjectRetain();
      v34 = v45;
      v35 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for ParallelSum<A>, v45);
      v36 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v33);
      v37 = v44;
      Gadget.evaluate<A>(at:for:)((uint64_t)&v57, &v56, v34, v33, v35, v36, v44);
      swift_bridgeObjectRelease();
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v46((char *)v37, AssociatedTypeWitness);
      v26 = v40;
      result = v41;
      v38 = v41 >= v29;
      if (v40 > 0)
        v38 = v29 >= v41;
      v24 = v29;
      if (v38)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Gadget.degree.getter in conformance ParallelSum<A>()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance ParallelSum<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ParallelSum.evaluate<A>(at:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance ParallelSum<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return ParallelSum.evaluate<A>(at:)(a1, a4, a2, a3, a5);
}

uint64_t associated type witness table accessor for Gadget.F : FieldElement in ParallelSum<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata instantiation function for ParallelSum()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ParallelSum()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ParallelSum(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v10 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v10 + v5 + 8) & ~v5;
    v13 = ((unint64_t)v11 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v12, v13);
    *(_QWORD *)((v6 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + v13) & 0xFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t destroy for ParallelSum(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for ParallelSum(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for ParallelSum(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for ParallelSum(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ParallelSum(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParallelSum(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v7 = 2;
  else
    v7 = a2 - v5 + 1;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_249BE1D28 + 4 * byte_249C2AD50[v9]))();
}

void storeEnumTagSinglePayload for ParallelSum(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v12 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v8 + 16) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v8 + 16) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v13 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_249BE1E94()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_249BE1E9C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x249BE1EA4);
}

void sub_249BE1ED0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_249BE1ED8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_249BE1EE0@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a1)
    JUMPOUT(0x249BE1EE8);
  return (*(uint64_t (**)(unint64_t))(v3 + 56))((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + v4 + 8) & a2);
}

uint64_t static JointRandomness.jointRandSeed(parts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t result;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  BOOL v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = swift_getAssociatedConformanceWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(AssociatedTypeWitness, v8);
  if (result < 0)
    goto LABEL_32;
  v10 = result;
  if (result)
  {
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v11 + 16) = v10;
    bzero((void *)(v11 + 32), v10);
  }
  else
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = swift_checkMetadataState();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 48))(&v32, a2, a3);
  v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))(&v32, v12, AssociatedConformanceWitness);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    v17 = MEMORY[0x24BEE4AF8];
LABEL_27:
    v28 = static ExtendableOutputFunction.deriveSeed(seed:domainSeparationTag:binder:)(v11, v14, v17, AssociatedTypeWitness, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v28;
  }
  v29 = v13;
  v30 = v11;
  v31 = v8;
  swift_bridgeObjectRetain();
  v16 = 0;
  v17 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v18 = *(_QWORD *)(a1 + 8 * v16 + 32);
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = v20 + v19;
    v22 = __OFADD__(v20, v19);
    result = swift_bridgeObjectRetain();
    if (v22)
      break;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v21 <= *(_QWORD *)(v17 + 24) >> 1)
    {
      if (*(_QWORD *)(v18 + 16))
        goto LABEL_21;
    }
    else
    {
      if (v20 <= v21)
        v23 = v20 + v19;
      else
        v23 = v20;
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v23, 1, (char *)v17);
      v17 = result;
      if (*(_QWORD *)(v18 + 16))
      {
LABEL_21:
        v24 = *(_QWORD *)(v17 + 16);
        if ((*(_QWORD *)(v17 + 24) >> 1) - v24 < v19)
          goto LABEL_30;
        result = (uint64_t)memcpy((void *)(v17 + v24 + 32), (const void *)(v18 + 32), v19);
        if (v19)
        {
          v25 = *(_QWORD *)(v17 + 16);
          v26 = __OFADD__(v25, v19);
          v27 = v25 + v19;
          if (v26)
            goto LABEL_31;
          *(_QWORD *)(v17 + 16) = v27;
        }
        goto LABEL_8;
      }
    }
    if (v19)
      goto LABEL_29;
LABEL_8:
    ++v16;
    swift_bridgeObjectRelease();
    if (v15 == v16)
    {
      swift_bridgeObjectRelease();
      v11 = v30;
      v8 = v31;
      v14 = v29;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  if ((a7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = a7;
    if (a7 <= 0xFF)
    {
      v11 = a1;
      swift_bridgeObjectRetain();
      v12 = static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(a2, a3, a4, a5, a6, v10, a8, a9, a10);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_8:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  v11 = result;
LABEL_4:
  if (*(_QWORD *)(v11 + 16) <= v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v11 + 8 * v10 + 32) = v12;
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

uint64_t static JointRandomness.jointRandPartXOF(blind:aggregatorID:nonce:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = swift_checkMetadataState();
  v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 40);
  swift_bridgeObjectRetain();
  v12(&v19, a4, a5);
  v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))(&v19, v11, AssociatedConformanceWitness);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_249C29130;
  *(_BYTE *)(v14 + 32) = a2;
  v18 = v14;
  v15 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v15);
  v16 = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 48))(a1, v13, v18, AssociatedTypeWitness, v16);
}

uint64_t static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = a7;
  LODWORD(v38) = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v17);
  v19 = (char *)&v32 - v18;
  v37 = a8;
  v39 = static JointRandomness.jointRandPartXOF(blind:aggregatorID:nonce:)(a5, v38, v39, a8, a9);
  swift_unknownObjectRetain();
  v20 = ArraySlice.startIndex.getter();
  v38 = a4;
  if (v20 == ArraySlice.endIndex.getter())
  {
    swift_unknownObjectRelease();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
LABEL_7:
    v27 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    v28 = swift_checkMetadataState();
    v29 = v39;
    v27(v28, AssociatedConformanceWitness);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(v28, AssociatedConformanceWitness);
    v31 = specialized Seed.init<A>(length:using:)(v30, v29, v28, AssociatedConformanceWitness);
    swift_unknownObjectRelease();
    return v31;
  }
  else
  {
    v35 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v34 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v36 = swift_getAssociatedTypeWitness();
    v37 = swift_getAssociatedConformanceWitness();
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
    v22 = v38;
    while (1)
    {
      ArraySlice._hoistableIsNativeTypeChecked()();
      specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v20, a1, a2, a3, v22);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a2 + *(_QWORD *)(v16 + 72) * v20, AssociatedTypeWitness);
      v24 = v20 + 1;
      if (__OFADD__(v20, 1))
        break;
      v25 = v34(AssociatedTypeWitness, v35);
      v26 = swift_checkMetadataState();
      v33(v25, v26, v37);
      v22 = v38;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
      ++v20;
      if (v24 == ArraySlice.endIndex.getter())
      {
        swift_unknownObjectRelease();
        AssociatedConformanceWitness = v37;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  void *v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v20)(void *);
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(unint64_t, uint64_t);
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  Swift::Int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  void (*v69)(void);
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  Swift::Int v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;

  v76 = a4;
  v77 = a3;
  v52 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v14);
  v16 = (char *)&v51 - v15;
  v64 = a6;
  v17 = *(_QWORD *)(a6 + 16);
  v18 = (void *)swift_getAssociatedTypeWitness();
  v65 = a8;
  v66 = a7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = *(uint64_t (**)(void *))(AssociatedConformanceWitness + 216);
  v62 = AssociatedConformanceWitness;
  v63 = v18;
  if (v17 != v20(v18))
    goto LABEL_27;
  v18 = (void *)MEMORY[0x24BEE4AF8];
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5 & ~(a5 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v21 = result;
  a8 = *(_QWORD *)(result + 16);
  v22 = *(_QWORD *)(result + 24);
  v17 = a8 + 1;
  if (a8 >= v22 >> 1)
    goto LABEL_28;
  while (1)
  {
    *(_QWORD *)(v21 + 16) = v17;
    *(_QWORD *)(v21 + 8 * a8 + 32) = v18;
    v79 = (void *)a1;
    v24 = a5 - 1;
    if (__OFSUB__(a5, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v24 < 0)
      goto LABEL_30;
    v68 = (char *)v21;
    if (a5 == 1)
      break;
    v54 = v16;
    v18 = &protocol requirements base descriptor for VDAFProtocol;
    v17 = swift_getAssociatedTypeWitness();
    v25 = swift_getAssociatedConformanceWitness();
    v55 = *(void (**)(char *, uint64_t))(v25 + 24);
    v16 = (char *)swift_checkMetadataState();
    v53 = *(uint64_t (**)(unint64_t, uint64_t))(v25 + 8);
    v59 = v76 + 32;
    v57 = v77 + 32;
    v60 = *(_QWORD *)(v76 + 16);
    v58 = *(_QWORD *)(v77 + 16);
    swift_bridgeObjectRetain();
    a5 = 0;
    v22 = (unint64_t)&v80;
    v56 = v24;
    v74 = v25;
    while (a5 != v24)
    {
      if (a5 == 255)
        goto LABEL_23;
      v22 = v60;
      if (a5 == v60)
        goto LABEL_24;
      v17 = a5 + 1;
      a1 = *(_QWORD *)(v59 + 8 * a5);
      v26 = swift_bridgeObjectRetain();
      v18 = v63;
      a8 = static VDAFProtocol.measurementShareXOF(seed:aggregatorID:)(v26, a5 + 1, (uint64_t)v63, v62);
      swift_bridgeObjectRelease();
      v22 = v58;
      if (a5 == v58)
        goto LABEL_25;
      v27 = swift_bridgeObjectRetain();
      a1 = static JointRandomness.jointRandPartXOF(blind:aggregatorID:nonce:)(v27, a5 + 1, v64, v66, v65);
      swift_bridgeObjectRelease();
      v18 = v79;
      v28 = swift_bridgeObjectRetain();
      a5 = MEMORY[0x24BD00400](v28, AssociatedTypeWitness);
      swift_bridgeObjectRelease();
      if (a5 < 0)
        goto LABEL_26;
      v67 = v17;
      v29 = v61;
      v30 = (uint64_t)v54;
      v75 = a8;
      v76 = a1;
      if (a5)
      {
        v31 = swift_getAssociatedConformanceWitness();
        v32 = 0;
        v71 = *(_QWORD *)(v31 + 40);
        v72 = v31;
        v33 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
        v69 = *(void (**)(void))(v74 + 16);
        v70 = v33;
        v73 = a5;
        do
        {
          v77 = v32 + 1;
          static FieldElement.randomElement<A>(using:)(a8, AssociatedTypeWitness, (uint64_t)v16, v72, v74, v30);
          v34 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          Array._checkSubscript_mutating(_:)(v32);
          _swift_isClassOrObjCExistentialType();
          dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
          AggregateShare.share.modify(v34);
          v70(AssociatedTypeWitness, v71);
          v69();
          v35 = v73;
          a8 = v75;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, AssociatedTypeWitness);
          v32 = v77;
        }
        while (v35 != v77);
      }
      v36 = v76;
      v37 = v16;
      a8 = (unint64_t)v16;
      v38 = v74;
      v55(v37, v74);
      v39 = v53(a8, v38);
      swift_unknownObjectRetain();
      v18 = (void *)specialized Seed.init<A>(length:using:)(v39, v36, a8, v38);
      swift_unknownObjectRelease();
      v40 = v68;
      v42 = *((_QWORD *)v68 + 2);
      v41 = *((_QWORD *)v68 + 3);
      a1 = v42 + 1;
      if (v42 >= v41 >> 1)
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v68);
      v24 = v56;
      v17 = v67;
      *((_QWORD *)v40 + 2) = a1;
      v68 = v40;
      *(_QWORD *)&v40[8 * v42 + 32] = v18;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      a5 = v17;
      v16 = (char *)a8;
      if (v17 == v24)
      {
        a1 = (uint64_t)v79;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v17, 1, (char *)v21);
    v21 = result;
  }
  swift_bridgeObjectRetain();
LABEL_20:
  v78 = a1;
  v43 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v43);
  v44 = ArraySlice.init<A>(_:)();
  v48 = static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v44, v45, v46, v47, v52, 0, v64, v66, v65);
  result = swift_unknownObjectRelease();
  v49 = v68;
  if (*((_QWORD *)v68 + 2))
  {
    *((_QWORD *)v68 + 4) = v48;
    v50 = v49;
    swift_bridgeObjectRelease();
    return (uint64_t)v50;
  }
LABEL_31:
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t dispatch thunk of static JointRandomness.partUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static JointRandomness.seedUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static JointRandomness.randomnessUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of JointRandomness.parts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of JointRandomness.seed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of JointRandomness.xof.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of JointRandomness.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t Polynomial.init()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  getContiguousArrayStorageType<A>(for:)(a1, a1);
  swift_allocObject();
  v3 = static Array._adoptStorage(_:count:)();
  dispatch thunk of IteratorProtocol.next()();
  _finalizeUninitializedArray<A>(_:)();
  result = Polynomial.init(coefficients:)(v3, &v5);
  *a2 = v5;
  return result;
}

uint64_t static Polynomial.+= infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Polynomial.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))static Polynomial.+ infix(_:_:));
}

uint64_t convolveDirectly<A, B, C, D>(_:withKernel:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t result;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  char *v108;
  uint64_t v109;
  void (*v110)(char *, _QWORD);
  uint64_t v111;
  char *v112;
  void (*v113)(char *);
  char *v114;
  char *v115;
  void (*v116)(char *, uint64_t);
  char *v117;
  uint64_t v118;
  void (*v119)(char *, _QWORD);
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  void (*v124)(uint64_t, uint64_t);
  char *v125;
  char *v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  char *v129;
  void (*v130)(char *, uint64_t);
  char *v131;
  uint64_t v132;
  void (*v133)(char *, _QWORD);
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t, uint64_t);
  void (*v161)(uint64_t, uint64_t);
  void (*v162)(char *, char *);
  uint64_t v163;
  void (*v164)(char *, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t AssociatedConformanceWitness;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(char *, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char v188[8];

  v170 = a3;
  v176 = a2;
  v166 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v168 = a12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v135 = AssociatedTypeWitness;
  v151 = swift_getAssociatedTypeWitness();
  v150 = *(_QWORD *)(v151 - 8);
  v19 = MEMORY[0x24BDAC7A8](v151, v18);
  v149 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v148 = (char *)&v135 - v23;
  MEMORY[0x24BDAC7A8](v22, v24);
  v147 = (char *)&v135 - v25;
  v152 = a9;
  v172 = *(_QWORD *)(*(_QWORD *)(a9 + 8) + 8);
  v26 = a5;
  v146 = swift_getAssociatedTypeWitness();
  v145 = *(_QWORD *)(v146 - 8);
  v28 = MEMORY[0x24BDAC7A8](v146, v27);
  v144 = (char *)&v135 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28, v30);
  v143 = (char *)&v135 - v31;
  v153 = a8;
  v32 = *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8);
  v142 = swift_getAssociatedTypeWitness();
  v141 = *(_QWORD *)(v142 - 8);
  v34 = MEMORY[0x24BDAC7A8](v142, v33);
  v140 = (char *)&v135 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v34, v36);
  v139 = (char *)&v135 - v38;
  v177 = a7;
  v185 = *(_QWORD *)(a7 - 8);
  v40 = MEMORY[0x24BDAC7A8](v37, v39);
  v138 = (char *)&v135 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x24BDAC7A8](v40, v42);
  v137 = (char *)&v135 - v44;
  v46 = MEMORY[0x24BDAC7A8](v43, v45);
  v184 = (char *)&v135 - v47;
  MEMORY[0x24BDAC7A8](v46, v48);
  v187 = (char *)&v135 - v49;
  v178 = a10;
  v181 = *(_QWORD *)(a10 + 8);
  v180 = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(v180 - 8);
  v52 = MEMORY[0x24BDAC7A8](v180, v51);
  v155 = (char *)&v135 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = MEMORY[0x24BDAC7A8](v52, v54);
  v179 = (char *)&v135 - v56;
  v186 = a6;
  v57 = *(_QWORD *)(a6 - 8);
  v59 = MEMORY[0x24BDAC7A8](v55, v58);
  v154 = (char *)&v135 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = MEMORY[0x24BDAC7A8](v59, v61);
  v158 = (char *)&v135 - v63;
  v64 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v62, v65);
  v67 = (char *)&v135 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = a4;
  v156 = v32;
  v68 = dispatch thunk of Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v67, v176, v26);
  if ((v68 & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v67, v26);
  v174 = v50;
  v70 = dispatch thunk of Collection.isEmpty.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v67, v26);
  if ((v70 & 1) == 0)
  {
    v71 = dispatch thunk of Collection.count.getter();
    result = dispatch thunk of Collection.count.getter();
    v72 = v71 + result;
    if (__OFADD__(v71, result))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (__OFSUB__(v72, 1))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v182 = v72 - 1;
    v73 = v158;
    v74 = v170;
    v75 = v186;
    v175 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    v175(v158, v170, v186);
    v76 = dispatch thunk of Collection.count.getter();
    v171 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    result = v171(v73, v75);
    if (v76 < v182)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v182 < 0)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    v169 = v26;
    v173 = a11;
    v77 = v155;
    v78 = v154;
    v79 = v158;
    v80 = v175;
    v81 = v168;
    if (v182)
    {
      v82 = v74;
      v83 = 0;
      v84 = v186;
      do
      {
        v183 = v83 + 1;
        v80(v79, v82, v84);
        v80(v78, v82, v84);
        dispatch thunk of Collection.startIndex.getter();
        v85 = v78;
        v86 = v81;
        v87 = v82;
        v88 = v78;
        v89 = (void (*)(char *, uint64_t))v171;
        v171(v85, v84);
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        (*(void (**)(char *, uint64_t))(v174 + 8))(v77, v180);
        v89(v79, v84);
        v78 = v88;
        v82 = v87;
        v81 = v86;
        dispatch thunk of IteratorProtocol.next()();
        dispatch thunk of MutableCollection.subscript.setter();
        v80 = v175;
        v83 = v183;
      }
      while (v182 != v183);
    }
    result = dispatch thunk of Collection.count.getter();
    if (result < 0)
      goto LABEL_30;
    v90 = result;
    v91 = v180;
    if (result)
    {
      v92 = 0;
      v136 = result;
      while (v92 != v90)
      {
        result = dispatch thunk of Collection.count.getter();
        if (result < 0)
          goto LABEL_25;
        v93 = result;
        v94 = v170;
        if (result)
        {
          v95 = v168;
          v164 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 136);
          v163 = swift_checkMetadataState();
          v96 = 0;
          v162 = *(void (**)(char *, char *))(AssociatedConformanceWitness + 80);
          v161 = *(void (**)(uint64_t, uint64_t))(v95 + 88);
          v160 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 96);
          v165 = v93;
          v159 = v92;
          while (1)
          {
            v97 = v158;
            v98 = v186;
            v99 = v175;
            v175(v158, v94, v186);
            v100 = v154;
            v99(v154, v94, v98);
            v101 = v155;
            dispatch thunk of Collection.startIndex.getter();
            v102 = (void (*)(char *, uint64_t))v171;
            result = v171(v100, v98);
            if (__OFADD__(v92, v96))
              break;
            v103 = v97;
            v183 = v96 + 1;
            v104 = v186;
            dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            v182 = *(_QWORD *)(v174 + 8);
            ((void (*)(char *, uint64_t))v182)(v101, v91);
            v102(v103, v104);
            v105 = v140;
            dispatch thunk of Collection.startIndex.getter();
            v106 = v139;
            dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            v107 = *(void (**)(char *, uint64_t))(v141 + 8);
            v108 = v105;
            v109 = v142;
            v107(v108, v142);
            v110 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
            v111 = v177;
            v112 = v184;
            v113 = *(void (**)(char *))(v185 + 16);
            v113(v184);
            v110(v188, 0);
            v107(v106, v109);
            v114 = v144;
            dispatch thunk of Collection.startIndex.getter();
            v115 = v143;
            dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            v116 = *(void (**)(char *, uint64_t))(v145 + 8);
            v117 = v114;
            v118 = v146;
            v116(v117, v146);
            v119 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
            v120 = v137;
            v113(v137);
            v119(v188, 0);
            v116(v115, v118);
            v121 = v138;
            ((void (*)(char *, char *, uint64_t))v113)(v138, v112, v111);
            v122 = v168;
            v164(v121, v111, v168);
            v123 = v148;
            v124 = v161;
            v161(v111, v122);
            v125 = v149;
            v124(v111, v122);
            v126 = v147;
            v162(v123, v125);
            v127 = *(void (**)(char *, uint64_t))(v150 + 8);
            v128 = v151;
            v127(v125, v151);
            v129 = v179;
            v127(v123, v128);
            v160(v126, v111, v122);
            v130 = *(void (**)(char *, uint64_t))(v185 + 8);
            v131 = v187;
            v130(v120, v111);
            v130(v184, v111);
            v132 = v170;
            v133 = (void (*)(char *, _QWORD))dispatch thunk of MutableCollection.subscript.modify();
            v94 = v132;
            v92 = v159;
            dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
            v134 = v131;
            v91 = v180;
            v130(v134, v111);
            v133(v188, 0);
            result = ((uint64_t (*)(char *, uint64_t))v182)(v129, v91);
            v96 = v183;
            if (v165 == v183)
              goto LABEL_14;
          }
          __break(1u);
          break;
        }
LABEL_14:
        ++v92;
        v90 = v136;
        if (v92 == v136)
          return result;
      }
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, void (*a4)(char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t result;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  Swift::Int v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  void (*v97)(uint64_t, uint64_t);
  void (*v98)(char *, char *);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v95 = a3;
  v99 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v108 = a12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v87 = AssociatedTypeWitness;
  v104 = swift_getAssociatedTypeWitness();
  v93 = *(_QWORD *)(v104 - 8);
  v21 = MEMORY[0x24BDAC7A8](v104, v20);
  v92 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v21, v23);
  v91 = (char *)&v84 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v90 = (char *)&v84 - v28;
  v105 = *(_QWORD *)(a7 - 8);
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  v89 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30, v32);
  v96 = (void (*)(char *, uint64_t, uint64_t))((char *)&v84 - v33);
  v106 = a10;
  v107 = *(_QWORD *)(a10 + 8);
  v94 = a6;
  v34 = a5;
  v35 = swift_getAssociatedTypeWitness();
  v102 = *(_QWORD *)(v35 - 8);
  v103 = (void (*)(char *, uint64_t))v35;
  v37 = MEMORY[0x24BDAC7A8](v35, v36);
  v39 = (char *)&v84 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x24BDAC7A8](v37, v40);
  v86 = (char *)&v84 - v42;
  v43 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v41, v44);
  v46 = (char *)&v84 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = a8;
  v97 = a1;
  v98 = a4;
  v47 = dispatch thunk of Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v46, v99, v34);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v46, v34);
  v49 = a9;
  v50 = dispatch thunk of Collection.isEmpty.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v46, v34);
  if ((v50 & 1) == 0)
  {
    v51 = dispatch thunk of Collection.count.getter();
    result = dispatch thunk of Collection.count.getter();
    v52 = v51 + result;
    if (__OFADD__(v51, result))
    {
      __break(1u);
    }
    else
    {
      result = v52 - 1;
      if (!__OFSUB__(v52, 1))
      {
        v53 = specialized FixedWidthInteger.nextPowerOfTwo.getter(result);
        result = dispatch thunk of Collection.count.getter();
        if (result >= v53)
        {
          if ((v53 & 0x8000000000000000) == 0)
          {
            v100 = AssociatedConformanceWitness;
            v101 = a11;
            v109 = v53;
            if (v53)
            {
              v84 = a9;
              v85 = v34;
              v54 = 0;
              do
              {
                dispatch thunk of Collection.startIndex.getter();
                dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
                (*(void (**)(char *, _QWORD))(v102 + 8))(v39, v103);
                dispatch thunk of IteratorProtocol.next()();
                dispatch thunk of MutableCollection.subscript.setter();
                ++v54;
                v53 = v109;
              }
              while (v109 != v54);
              v34 = v85;
              v49 = v84;
            }
            v55 = (uint64_t)v96;
            dispatch thunk of IteratorProtocol.next()();
            v56 = specialized Array.init(repeating:count:)(v55, v53, a7);
            v57 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
            v57(v55, a7);
            v112 = v56;
            dispatch thunk of IteratorProtocol.next()();
            v58 = specialized Array.init(repeating:count:)(v55, v53, a7);
            v103 = (void (*)(char *, uint64_t))v57;
            v57(v55, a7);
            v111 = v58;
            v59 = type metadata accessor for Array();
            v60 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v59);
            v61 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v59);
            v62 = v108;
            discreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)v97, v53, (uint64_t)&v112, (uint64_t)v98, v59, a7, v88, v60, v61, v108);
            v88 = v61;
            v63 = v49;
            v64 = v59;
            discreteFourierTransform<A, B, C>(input:size:output:)(v99, v53, (uint64_t)&v111, v34, v59, a7, v63, v60, v61, v62);
            v65 = v92;
            v66 = v93;
            v67 = v91;
            v68 = v90;
            v69 = v89;
            if (v53)
            {
              v70 = swift_checkMetadataState();
              v71 = 0;
              v98 = *(void (**)(char *, char *))(v100 + 80);
              v99 = v70;
              v72 = *(void (**)(uint64_t, uint64_t))(v108 + 88);
              v96 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 96);
              v97 = v72;
              v102 = v64;
              do
              {
                v107 = v71 + 1;
                Array.subscript.getter();
                Array._makeMutableAndUnique()();
                Array._checkSubscript_mutating(_:)(v71);
                _swift_isClassOrObjCExistentialType();
                v73 = v108;
                v74 = v97;
                v97(a7, v108);
                v74(a7, v73);
                v98(v67, v65);
                v75 = *(void (**)(char *, uint64_t))(v66 + 8);
                v76 = v65;
                v77 = a7;
                v78 = v68;
                v79 = v65;
                v80 = v66;
                v81 = v104;
                v75(v76, v104);
                v82 = v81;
                v66 = v80;
                v65 = v79;
                v68 = v78;
                a7 = v77;
                v75(v67, v82);
                v83 = v73;
                v64 = v102;
                v96(v68, v77, v83);
                v103(v69, v77);
                AggregateShare.share.modify(v64);
                v71 = v107;
                v53 = v109;
              }
              while (v109 != v107);
            }
            v110 = v112;
            inverseDiscreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)&v110, v53, v95, v64, v94, a7, v88, v106, v101, v108);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
LABEL_20:
          __break(1u);
          return result;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

uint64_t evaluateUsingHorner<A, B, C>(_:atInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t (*v42)(char *, uint64_t);
  uint64_t result;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  void (*v56)(_OWORD *, _QWORD);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char isClassOrObjCExistentialType;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  BOOL v66;
  uint64_t i;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  void (*v77)(_OWORD *, _QWORD);
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t AssociatedTypeWitness;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  _OWORD v101[2];
  uint64_t v102;
  _OWORD v103[2];
  uint64_t v104;

  v95 = a8;
  v96 = a2;
  v94 = a6;
  v13 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v84 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v14);
  v89 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v92 = (char *)&v80 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v85 = (char *)&v80 - v22;
  v81 = *(_QWORD *)(a5 - 8);
  v24 = MEMORY[0x24BDAC7A8](v21, v23);
  v88 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v80 = (char *)&v80 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  *(_QWORD *)&v100 = (char *)&v80 - v31;
  v32 = *(_QWORD *)(a4 - 8);
  v34 = MEMORY[0x24BDAC7A8](v30, v33);
  v36 = (char *)&v80 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v34, v38);
  v40 = (char *)&v80 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v98 = a1;
  v41(v40, a1, a3);
  v97 = v13;
  LOBYTE(a1) = dispatch thunk of Collection.isEmpty.getter();
  v42 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
  v99 = a3;
  result = v42(v40, a3);
  if ((a1 & 1) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v36, v96, a4);
  v44 = dispatch thunk of Collection.isEmpty.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, a4);
  if ((v44 & 1) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = dispatch thunk of Collection.count.getter();
  v45 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  result = dispatch thunk of Collection.count.getter();
  v46 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v47 = v100;
  v87 = *(_QWORD *)(v95 + 8);
  result = dispatch thunk of IteratorProtocol.next()();
  v48 = v45 * v46;
  if ((unsigned __int128)(v45 * (__int128)v46) >> 64 != (v45 * v46) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!__OFADD__(v48, 1))
  {
    v91 = a7;
    v90 = a4;
    v49 = specialized Array.init(repeating:count:)(v47, v48 + 1, a5);
    v50 = v81;
    v86 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v86(v47, a5);
    v104 = v49;
    v51 = v92;
    dispatch thunk of Collection.startIndex.getter();
    v52 = v85;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    v53 = *(void (**)(char *, uint64_t))(v84 + 8);
    v54 = v51;
    v55 = AssociatedTypeWitness;
    v53(v54, AssociatedTypeWitness);
    v56 = (void (*)(_OWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v57 = v80;
    v84 = *(_QWORD *)(v50 + 16);
    ((void (*)(char *))v84)(v80);
    v56(v103, 0);
    v85 = (char *)v53;
    v53(v52, v55);
    v58 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    v59 = v104;
    Array._checkSubscript_mutating(_:)(0);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    v61 = v59 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0)
      v61 = v59;
    v83 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    (*(void (**)(unint64_t, char *, uint64_t))(v50 + 40))(v61 + v83, v57, a5);
    result = AggregateShare.share.modify(v58);
    v62 = __OFSUB__(v46, 1);
    v63 = v46 - 1;
    if (v62)
      goto LABEL_28;
    v64 = 0;
    LODWORD(v81) = 0;
    v82 = v45;
    v65 = v89;
    v66 = v63 == 0;
    if (v63 <= 0)
      goto LABEL_12;
LABEL_11:
    for (i = v63 - 1; ; i = 0)
    {
      *(_QWORD *)&v101[0] = v104;
      v102 = v64;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
      v69 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v58);
      lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>();
      MutableCollection.subscript.getter();
      v100 = v103[0];
      v101[0] = v103[0];
      v101[1] = v103[1];
      v70 = type metadata accessor for ArraySlice();
      v71 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v70);
      v72 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v58);
      convolveDirectly<A, B, C, D>(_:withKernel:result:)((uint64_t)v101, v96, (uint64_t)&v104, v70, v90, v58, a5, v71, v91, v69, v72, v95);
      result = swift_unknownObjectRelease();
      if (__OFADD__(v64, v45))
        break;
      v73 = v92;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v74 = AssociatedTypeWitness;
      *(_QWORD *)&v100 = i;
      v75 = v64;
      v76 = (void (*)(char *, uint64_t))v85;
      ((void (*)(char *, uint64_t))v85)(v73, AssociatedTypeWitness);
      v77 = (void (*)(_OWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v78 = v88;
      ((void (*)(char *))v84)(v88);
      v77(v103, 0);
      v76(v65, v74);
      Array._makeMutableAndUnique()();
      Array._checkSubscript_mutating(_:)(0);
      _swift_isClassOrObjCExistentialType();
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v79 = v78;
      v45 = v82;
      v86((uint64_t)v79, a5);
      AggregateShare.share.modify(v58);
      v64 = v75 + v45;
      v63 = v100;
      v66 = (_QWORD)v100 == 0;
      if ((uint64_t)v100 > 0)
        goto LABEL_11;
LABEL_12:
      v68 = !v66;
      if (((v68 | v81) & 1) != 0)
        return v104;
      LODWORD(v81) = 1;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t evaluateUsingHorner<A, B>(_:atInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  void (*v58)(_BYTE *, uint64_t);
  _BYTE *v59;
  _BYTE *v60;
  void (*v61)(_BYTE *, uint64_t);
  _BYTE *v62;
  uint64_t v63;
  void (*v64)(char *, _QWORD);
  _BYTE *v65;
  void (*v66)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v67;
  _BYTE *v68;
  void (*v69)(_BYTE *, uint64_t);
  _BYTE v70[12];
  int v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, _BYTE *, uint64_t);
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t AssociatedConformanceWitness;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(_BYTE *, uint64_t, uint64_t);
  void (*v95)(_BYTE *, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  char v99[36];

  v92 = a2;
  v93 = a5;
  v12 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v90 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v91 = AssociatedTypeWitness;
  v15 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v14);
  v89 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15, v17);
  v88 = &v70[-v18];
  v19 = swift_getAssociatedTypeWitness();
  v80 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v87 = v19;
  v20 = swift_getAssociatedTypeWitness();
  v84 = *(_QWORD *)(v20 - 8);
  v85 = v20;
  v22 = MEMORY[0x24BDAC7A8](v20, v21);
  v83 = &v70[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v82 = &v70[-v26];
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v81 = &v70[-v29];
  v30 = *(_QWORD *)(a4 - 8);
  v32 = MEMORY[0x24BDAC7A8](v28, v31);
  v79 = &v70[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v98 = &v70[-v36];
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v78 = &v70[-v39];
  MEMORY[0x24BDAC7A8](v38, v40);
  v77 = &v70[-v41];
  v42 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v42, v43);
  v45 = &v70[-v44];
  BidirectionalCollection.last.getter();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v45, 1, a4);
  if ((_DWORD)result != 1)
  {
    v76 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v30 + 32);
    v76((uint64_t)a7, v45, a4);
    result = dispatch thunk of Collection.count.getter();
    v47 = result - 2;
    if (!__OFSUB__(result, 2))
    {
      v72 = v12;
      v74 = a1;
      v71 = 0;
      v75 = a3;
      v73 = a7;
      v48 = v80;
      v49 = v78;
      while (1)
      {
        v97 = v47;
        if (v47 > 0)
        {
          v96 = v47 - 1;
        }
        else
        {
          if ((v47 != 0) | v71 & 1)
            return result;
          v96 = 0;
          v71 = 1;
        }
        v94 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 16);
        v50 = v98;
        v94(v98, (uint64_t)a7, a4);
        v95 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 136);
        v95(v50, a4, v48);
        v51 = swift_checkMetadataState();
        v52 = *(void (**)(uint64_t, uint64_t))(v48 + 88);
        v53 = v82;
        v52(a4, v48);
        v54 = v30;
        v55 = v83;
        v52(a4, v48);
        v56 = v81;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(AssociatedConformanceWitness + 80))(v53, v55, v51);
        v57 = v85;
        v58 = *(void (**)(_BYTE *, uint64_t))(v84 + 8);
        v58(v55, v85);
        v58(v53, v57);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 96))(v56, a4, v48);
        v59 = v89;
        dispatch thunk of Collection.startIndex.getter();
        v60 = v88;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        v61 = *(void (**)(_BYTE *, uint64_t))(v90 + 8);
        v62 = v59;
        v30 = v54;
        v63 = v91;
        v61(v62, v91);
        v64 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        v65 = v98;
        v66 = (void (*)(_BYTE *, _BYTE *, uint64_t))v94;
        ((void (*)(_BYTE *))v94)(v98);
        v64(v99, 0);
        v61(v60, v63);
        v67 = v79;
        v66(v79, v49, a4);
        v68 = v77;
        v95(v67, a4, v48);
        a7 = v73;
        dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
        v69 = *(void (**)(_BYTE *, uint64_t))(v30 + 8);
        v69(v65, a4);
        v69(v49, a4);
        v69(a7, a4);
        result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v76)(a7, v68, a4);
        v47 = v96;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t evaluateUsingDFT<A, B, C>(_:atInput:)(uint64_t a1, void (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t), uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t (*v71)(char *, uint64_t);
  uint64_t result;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD);
  uint64_t v89;
  char *v90;
  char *v91;
  Swift::Int v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, void (*)(_QWORD));
  void (*v96)(uint64_t *, _QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char isClassOrObjCExistentialType;
  uint64_t v103;
  unint64_t v104;
  void (*v105)(unint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void (*v115)(uint64_t *, _QWORD);
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  char *v125;
  Swift::Int v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t);
  void (*v131)(uint64_t *, _QWORD);
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  void (*v140)(uint64_t, uint64_t);
  char *v141;
  char *v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  Swift::Int v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t);
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, uint64_t);
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  void (*v179)(uint64_t *, _QWORD);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t, uint64_t);
  char *v190;
  void (*v191)(_QWORD);
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  Swift::Int v210;
  void (*v211)(char *, uint64_t);
  char *v212;
  void (*v213)(uint64_t, uint64_t);
  void (*v214)(char *, char *);
  void (*v215)(char *, uint64_t);
  char *v216;
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

  v214 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v220 = a8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v185 = AssociatedTypeWitness;
  v217 = swift_getAssociatedTypeWitness();
  v196 = *(_QWORD *)(v217 - 8);
  v17 = MEMORY[0x24BDAC7A8](v217, v16);
  v216 = (char *)&v180 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v203 = (char *)&v180 - v21;
  MEMORY[0x24BDAC7A8](v20, v22);
  v202 = (char *)&v180 - v23;
  v213 = a7;
  v24 = *(_QWORD *)(*((_QWORD *)a7 + 1) + 8);
  v191 = (void (*)(_QWORD))swift_getAssociatedTypeWitness();
  v207 = *((_QWORD *)v191 - 1);
  v26 = MEMORY[0x24BDAC7A8](v191, v25);
  v212 = (char *)&v180 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26, v28);
  v190 = (char *)&v180 - v30;
  v221 = a5;
  v208 = *(_QWORD *)(a5 - 8);
  v32 = MEMORY[0x24BDAC7A8](v29, v31);
  v184 = (char *)&v180 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v195 = (char *)&v180 - v36;
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v194 = (char *)&v180 - v39;
  v41 = MEMORY[0x24BDAC7A8](v38, v40);
  v193 = (char *)&v180 - v42;
  v44 = MEMORY[0x24BDAC7A8](v41, v43);
  v209 = (char *)&v180 - v45;
  v47 = MEMORY[0x24BDAC7A8](v44, v46);
  v223 = (uint64_t)&v180 - v48;
  MEMORY[0x24BDAC7A8](v47, v49);
  v222 = (char *)&v180 - v50;
  v197 = a6;
  v51 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  v200 = swift_getAssociatedTypeWitness();
  v210 = *(_QWORD *)(v200 - 8);
  v53 = MEMORY[0x24BDAC7A8](v200, v52);
  v192 = (char *)&v180 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = MEMORY[0x24BDAC7A8](v53, v55);
  v201 = (char *)&v180 - v57;
  v59 = MEMORY[0x24BDAC7A8](v56, v58);
  v199 = (char *)&v180 - v60;
  v61 = *(_QWORD *)(a4 - 8);
  v63 = MEMORY[0x24BDAC7A8](v59, v62);
  v65 = (char *)&v180 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v63, v67);
  v69 = (char *)&v180 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v205 = a1;
  v70(v69, a1, a3);
  v204 = v51;
  LOBYTE(a1) = dispatch thunk of Collection.isEmpty.getter();
  v71 = *(uint64_t (**)(char *, uint64_t))(v66 + 8);
  v206 = a3;
  result = v71(v69, a3);
  if ((a1 & 1) != 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  (*(void (**)(char *, void (*)(char *, char *), uint64_t))(v61 + 16))(v65, v214, a4);
  v73 = dispatch thunk of Collection.isEmpty.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v65, a4);
  if ((v73 & 1) != 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  result = dispatch thunk of Collection.count.getter();
  v74 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  result = dispatch thunk of Collection.count.getter();
  v75 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v76 = v74 * v75;
  if ((unsigned __int128)(v74 * (__int128)v75) >> 64 != (v74 * v75) >> 63)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  result = v76 + 1;
  if (__OFADD__(v76, 1))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v77 = specialized FixedWidthInteger.nextPowerOfTwo.getter(result);
  if (!v75)
  {
    getContiguousArrayStorageType<A>(for:)(v221, v221);
    v174 = v208;
    swift_allocObject();
    v175 = static Array._adoptStorage(_:count:)();
    v177 = v176;
    v178 = v199;
    dispatch thunk of Collection.startIndex.getter();
    v179 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    (*(void (**)(uint64_t))(v174 + 16))(v177);
    v179(&v225, 0);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v178, v200);
    _finalizeUninitializedArray<A>(_:)();
    return v175;
  }
  v78 = v77;
  v79 = v221;
  v80 = *(_QWORD *)(v220 + 8);
  v81 = (uint64_t)v222;
  dispatch thunk of IteratorProtocol.next()();
  v82 = specialized Array.init(repeating:count:)(v81, v78, v79);
  v83 = *(void (**)(uint64_t, uint64_t))(v208 + 8);
  v83(v81, v79);
  v227 = v82;
  v198 = v80;
  dispatch thunk of IteratorProtocol.next()();
  v188 = v78;
  v84 = v78;
  v85 = (uint64_t)v214;
  v86 = specialized Array.init(repeating:count:)(v81, v84, v79);
  v83(v81, v79);
  v226 = v86;
  result = dispatch thunk of Collection.count.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    v218 = v83;
    v183 = v74;
    v87 = v24;
    v88 = v191;
    v89 = v207;
    v90 = v212;
    v91 = v190;
    if (result)
    {
      v92 = 0;
      v211 = (void (*)(char *, uint64_t))result;
      v93 = v221;
      do
      {
        v215 = (void (*)(char *, uint64_t))(v92 + 1);
        dispatch thunk of Collection.startIndex.getter();
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        v94 = v89;
        v95 = *(void (**)(char *, void (*)(_QWORD)))(v89 + 8);
        v95(v90, v88);
        v96 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
        v97 = v87;
        v98 = a4;
        v99 = v208;
        (*(void (**)(uint64_t))(v208 + 16))(v223);
        v96(&v225, 0);
        v95(v91, v88);
        v89 = v94;
        v100 = type metadata accessor for Array();
        Array._makeMutableAndUnique()();
        v101 = v226;
        Array._checkSubscript_mutating(_:)(v92);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        v103 = v101 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0)
          v103 = v101;
        v104 = v103
             + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))
             + *(_QWORD *)(v99 + 72) * v92;
        v105 = *(void (**)(unint64_t, uint64_t, uint64_t))(v99 + 40);
        a4 = v98;
        v87 = v97;
        v90 = v212;
        v105(v104, v223, v93);
        v106 = v100;
        v85 = (uint64_t)v214;
        AggregateShare.share.modify(v106);
        v92 = (Swift::Int)v215;
      }
      while (v211 != v215);
    }
    v107 = v221;
    v108 = (uint64_t)v222;
    dispatch thunk of IteratorProtocol.next()();
    v109 = v188;
    v110 = specialized Array.init(repeating:count:)(v108, v188, v107);
    v218(v108, v107);
    v224 = v110;
    v111 = type metadata accessor for Array();
    v112 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v111);
    v181 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v111);
    v182 = v112;
    discreteFourierTransform<A, B, C>(input:size:output:)(v85, v109, (uint64_t)&v224, a4, v111, v107, (uint64_t)v213, v112, v181, v220);
    v113 = v224;
    swift_bridgeObjectRetain();
    v114 = v201;
    dispatch thunk of Collection.startIndex.getter();
    v115 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v116 = v208;
    v117 = v209;
    v191 = *(void (**)(_QWORD))(v208 + 16);
    v191(v209);
    v115(&v225, 0);
    v190 = *(char **)(v210 + 8);
    ((void (*)(char *, uint64_t))v190)(v114, v200);
    Array._makeMutableAndUnique()();
    v118 = v227;
    Array._checkSubscript_mutating(_:)(0);
    v119 = _swift_isClassOrObjCExistentialType();
    v120 = v118 & 0xFFFFFFFFFFFFFF8;
    if ((v119 & 1) == 0)
      v120 = v118;
    v201 = (char *)((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
    (*(void (**)(char *, char *, uint64_t))(v116 + 40))(&v201[v120], v117, v107);
    AggregateShare.share.modify(v111);
    result = dispatch thunk of Collection.count.getter();
    v186 = result;
    if (result < 1)
      goto LABEL_51;
    v187 = v113;
    v223 = v111;
    if (result != 1)
    {
      v121 = v220;
      v189 = *(void (**)(char *, uint64_t, uint64_t))(v220 + 136);
      result = swift_checkMetadataState();
      v122 = 1;
      v123 = v183;
      v124 = *(void (**)(uint64_t, uint64_t))(v121 + 88);
      v125 = *(char **)(v121 + 96);
      v214 = *(void (**)(char *, char *))(AssociatedConformanceWitness + 80);
      v215 = (void (*)(char *, uint64_t))result;
      v212 = v125;
      v213 = v124;
      while (v122 != v186)
      {
        if (v123 < 0)
          goto LABEL_40;
        v126 = 0;
        v185 = v122 + 1;
        v207 = v123;
        v210 = v122;
        while (1)
        {
          v127 = v192;
          dispatch thunk of Collection.startIndex.getter();
          v128 = v199;
          dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
          v129 = v200;
          v130 = (void (*)(char *, uint64_t))v190;
          ((void (*)(char *, uint64_t))v190)(v127, v200);
          v131 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
          v133 = v221;
          v132 = v222;
          v134 = (void (*)(char *, char *, uint64_t))v191;
          v191(v222);
          v131(&v225, 0);
          v130(v128, v129);
          v135 = v194;
          Array.subscript.getter();
          v136 = v195;
          v134(v195, v132, v133);
          v137 = v193;
          v138 = v220;
          v189(v136, v133, v220);
          v139 = v203;
          v140 = v213;
          v213(v133, v138);
          v141 = v216;
          v140(v133, v138);
          v142 = v202;
          v214(v139, v141);
          v143 = *(void (**)(char *, uint64_t))(v196 + 8);
          v144 = v217;
          v143(v141, v217);
          v211 = v143;
          v143(v139, v144);
          ((void (*)(char *, uint64_t, uint64_t))v212)(v142, v133, v138);
          v145 = (void (*)(char *, uint64_t))v218;
          v218((uint64_t)v135, v133);
          v145(v222, v133);
          v146 = v223;
          Array._makeMutableAndUnique()();
          Array._checkSubscript_mutating(_:)(v126);
          _swift_isClassOrObjCExistentialType();
          v147 = *(_QWORD *)(v208 + 72);
          dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
          v148 = v137;
          v149 = v207;
          v145(v148, v133);
          result = AggregateShare.share.modify(v146);
          if (v149 == v126)
            break;
          if (__OFADD__(v126++, 1))
          {
            __break(1u);
            goto LABEL_39;
          }
        }
        result = dispatch thunk of Collection.count.getter();
        if (__OFSUB__(result, 1))
          goto LABEL_41;
        if (v210 == result - 1)
          goto LABEL_36;
        v151 = v188;
        if (v188 < 0)
          goto LABEL_42;
        v152 = v203;
        v153 = v202;
        v154 = v184;
        if (v188)
        {
          v155 = 0;
          v156 = v201;
          do
          {
            v210 = v155 + 1;
            v157 = v221;
            Array.subscript.getter();
            Array._makeMutableAndUnique()();
            v158 = v224;
            Array._checkSubscript_mutating(_:)(v155);
            v159 = _swift_isClassOrObjCExistentialType();
            v160 = v158 & 0xFFFFFFFFFFFFFF8;
            if ((v159 & 1) == 0)
              v160 = v158;
            v209 = &v156[v160];
            v161 = v152;
            v162 = v220;
            v163 = v147;
            v164 = v213;
            v213(v157, v220);
            v165 = v154;
            v166 = v153;
            v167 = v216;
            v164(v157, v162);
            v147 = v163;
            v214(v161, v167);
            v168 = v167;
            v153 = v166;
            v154 = v165;
            v169 = v217;
            v170 = v211;
            v211(v168, v217);
            v170(v161, v169);
            v171 = (void (*)(char *, uint64_t))v218;
            v172 = v162;
            v152 = v161;
            ((void (*)(char *, uint64_t, uint64_t))v212)(v153, v157, v172);
            v171(v154, v157);
            AggregateShare.share.modify(v223);
            v151 = v188;
            v156 += v163;
            v155 = v210;
          }
          while (v188 != v210);
        }
        v225 = v224;
        result = inverseDiscreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)&v225, v151, (uint64_t)&v226, v223, v223, v221, v181, v182, v181, v220);
        if (__OFADD__(v207, v183))
          goto LABEL_43;
        v123 = v207 + v183;
        v122 = v185;
        if (v185 == v186)
          goto LABEL_36;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v173 = v227;
    swift_bridgeObjectRelease();
    return v173;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void Polynomial.length.getter()
{
  JUMPOUT(0x24BD00400);
}

uint64_t Polynomial.degree.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  _QWORD v18[2];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1, a2);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)v18 - v9;
  v11 = *v2;
  v18[1] = *v2;
  v12 = type metadata accessor for Array();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v12);
  result = Collection.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v14 = MEMORY[0x24BD00400](v11, v3);
  if (v14 >= 1)
  {
    while (1)
    {
      v15 = v14 - 1;
      Array.subscript.getter();
      dispatch thunk of IteratorProtocol.next()();
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v4 + 8);
      v17(v7, v3);
      v17(v10, v3);
      if ((v16 & 1) == 0)
        break;
      --v14;
      if ((unint64_t)(v15 + 1) <= 1)
      {
        v14 = 0;
        break;
      }
    }
  }
  result = v14 - 1;
  if (__OFSUB__(v14, 1))
    goto LABEL_9;
  return result;
}

uint64_t Polynomial.coefficients.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = MEMORY[0x24BD00400](*v1, *(_QWORD *)(a1 + 16));
  if ((result & 0x8000000000000000) == 0)
    return Array.subscript.getter();
  __break(1u);
  return result;
}

uint64_t Polynomial.init(coefficients:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for Array();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v4);
  result = Collection.isEmpty.getter();
  if ((result & 1) != 0)
    __break(1u);
  else
    *a2 = a1;
  return result;
}

uint64_t Polynomial.init(coefficient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  getContiguousArrayStorageType<A>(for:)(a2, a2);
  v6 = *(_QWORD *)(a2 - 8);
  swift_allocObject();
  v7 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  Polynomial.init(coefficients:)(v7, &v10);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v10;
  return result;
}

uint64_t Polynomial.init(coefficient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  getContiguousArrayStorageType<A>(for:)(AssociatedTypeWitness, AssociatedTypeWitness);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, a1, AssociatedTypeWitness);
  _finalizeUninitializedArray<A>(_:)();
  Polynomial.init(coefficients:)(v10, a2, a3, &v13);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
  *a4 = v13;
  return result;
}

uint64_t Polynomial.init(coefficients:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v15 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Array();
  v9 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v8);
  result = Collection.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = a1;
    MEMORY[0x24BDAC7A8](result, v11);
    v14[2] = a2;
    v14[3] = a3;
    v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Polynomial.init(coefficients:), (uint64_t)v14, v8, a2, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v12);
    result = swift_bridgeObjectRelease();
    *a4 = v13;
  }
  return result;
}

uint64_t closure #1 in Polynomial.init(coefficients:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)v12 - v8, a1);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 128))(v9, a2, a3);
}

uint64_t static Polynomial.interpolateUsingRootsOfUnity(values:length:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1, a2);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BD00400](v11, v14);
  if (result > a2)
  {
    __break(1u);
  }
  else
  {
    v21 = a1;
    v16 = type metadata accessor for Array();
    MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v16);
    result = Collection.isEmpty.getter();
    if ((result & 1) == 0)
    {
      dispatch thunk of IteratorProtocol.next()();
      v17 = specialized Array.init(repeating:count:)((uint64_t)v13, a2, a3);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
      v20 = a1;
      v21 = v17;
      v18 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v16);
      v19 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v16);
      inverseDiscreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)&v20, a2, (uint64_t)&v21, v16, v16, a3, v18, v19, v18, a4);
      return Polynomial.init(coefficients:)(v21, a5);
    }
  }
  __break(1u);
  return result;
}

uint64_t Polynomial.asConstant()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v17 - v8;
  v10 = *v2;
  swift_bridgeObjectRetain();
  v18 = v10;
  if ((Polynomial.degree.getter(a1, v11) & 0x8000000000000000) == 0)
  {
    v18 = v10;
    v13 = Polynomial.degree.getter(a1, v12);
    swift_bridgeObjectRelease();
    if (!v13)
      goto LABEL_5;
    __break(1u);
  }
  swift_bridgeObjectRelease();
LABEL_5:
  v18 = v10;
  v14 = type metadata accessor for Array();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v14);
  Collection.first.getter();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v9, v5);
  __break(1u);
  return result;
}

Swift::Bool __swiftcall Polynomial.isZero()()
{
  uint64_t v0;
  uint64_t v1;

  return (unint64_t)Polynomial.degree.getter(v0, v1) >> 63;
}

uint64_t Polynomial.evaluate(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = *v3;
  v12 = *v3;
  if (Polynomial.degree.getter(a2, a2) < 0)
    return dispatch thunk of IteratorProtocol.next()();
  v12 = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = type metadata accessor for Array();
  v10 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v9);
  return evaluateUsingHorner<A, B>(_:atInput:)((uint64_t)&v12, a1, v9, v8, v10, *(_QWORD *)(a2 + 24), a3);
}

uint64_t Polynomial.evaluate(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = (uint64_t *)MEMORY[0x24BDAC7A8](a1, a2);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v7;
  v11 = *v3;
  v22 = *v3;
  if (Polynomial.degree.getter(v12, v12) < 0)
    return Polynomial.init()(v6, a3);
  v22 = v10;
  if (Polynomial.degree.getter(a2, v13) < 0)
  {
    Array.subscript.getter();
    return Polynomial.init(coefficient:)((uint64_t)v9, v6, a3);
  }
  else
  {
    v22 = v10;
    if (Polynomial.degree.getter(a2, v14) >= 60)
    {
      v21 = v10;
      v22 = v11;
      v19 = type metadata accessor for Array();
      v20 = (void (*)(uint64_t, uint64_t))MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v19);
      v17 = evaluateUsingDFT<A, B, C>(_:atInput:)((uint64_t)&v22, (void (*)(char *, char *))&v21, v19, v19, v6, (uint64_t)v20, v20, *(_QWORD *)(a2 + 24));
    }
    else
    {
      v21 = v10;
      v22 = v11;
      v15 = type metadata accessor for Array();
      v16 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v15);
      v17 = evaluateUsingHorner<A, B, C>(_:atInput:)((uint64_t)&v22, (uint64_t)&v21, v15, v15, v6, v16, v16, *(_QWORD *)(a2 + 24));
    }
    return Polynomial.init(coefficients:)(v17, a3);
  }
}

uint64_t Polynomial.evaluateUsingRootsOfUnity(count:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v10 = *(_QWORD *)(v9 + 24);
  dispatch thunk of IteratorProtocol.next()();
  v11 = specialized Array.init(repeating:count:)((uint64_t)v7, a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = v8;
  v17 = v11;
  v12 = type metadata accessor for Array();
  v13 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v12);
  v14 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v12);
  discreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)&v16, a1, (uint64_t)&v17, v12, v12, v4, v13, v14, v13, v10);
  return v17;
}

uint64_t static Polynomial.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  Swift::Int v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char isClassOrObjCExistentialType;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  BOOL v59;
  Swift::Int v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  Swift::Int v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  Swift::Int v82;
  uint64_t v83;
  uint64_t v84;

  v79 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1, a2);
  v80 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v78 = (char *)&v71 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v77 = (char *)&v71 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  v76 = (char *)&v71 - v18;
  v20 = (uint64_t *)MEMORY[0x24BDAC7A8](v17, v19);
  v22 = (char *)&v71 - v21;
  v23 = *v20;
  v25 = *v24;
  v28 = type metadata accessor for Polynomial(0, v26, v27, v27);
  v83 = v23;
  v84 = v23;
  if (Polynomial.degree.getter(v28, v29) < 0 || (v84 = v25, Polynomial.degree.getter(v28, v30) < 0))
  {
    v70 = swift_bridgeObjectRetain();
    return Polynomial.init(coefficients:)(v70, a5);
  }
  v32 = a4;
  v33 = v83;
  v84 = v83;
  v34 = Polynomial.degree.getter(v28, v31);
  v84 = v25;
  v36 = Polynomial.degree.getter(v28, v35);
  if (v36 >= v34)
    v38 = v34;
  else
    v38 = v36;
  v84 = v33;
  v39 = Polynomial.degree.getter(v28, v37);
  v84 = v25;
  v41 = Polynomial.degree.getter(v28, v40);
  if (v41 <= v39)
    v42 = v39;
  else
    v42 = v41;
  v74 = *(_QWORD *)(v32 + 8);
  v75 = v32;
  result = dispatch thunk of IteratorProtocol.next()();
  v82 = v42;
  if (__OFADD__(v42, 1))
  {
    __break(1u);
  }
  else
  {
    v44 = specialized Array.init(repeating:count:)((uint64_t)v22, v42 + 1, a3);
    v73 = *(uint64_t (**)(char *, uint64_t))(v79 + 8);
    result = v73(v22, a3);
    v84 = v44;
    if ((v38 & 0x8000000000000000) == 0)
    {
      v45 = 0;
      v46 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 136);
      v71 = a5;
      v72 = v46;
      v81 = v25;
      while (1)
      {
        Array.subscript.getter();
        v47 = v77;
        Array.subscript.getter();
        v48 = v78;
        v49 = v79;
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, v22, a3);
        v50 = v76;
        v72(v48, a3, v75);
        dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
        v51 = (void (*)(char *, uint64_t))v73;
        v73(v47, a3);
        v52 = v22;
        v51(v22, a3);
        v53 = type metadata accessor for Array();
        Array._makeMutableAndUnique()();
        v54 = v84;
        Array._checkSubscript_mutating(_:)(v45);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        v56 = v54 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0)
          v56 = v54;
        v22 = (char *)((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
        v57 = *(_QWORD *)(v49 + 72);
        v58 = *(void (**)(char *, char *, uint64_t))(v49 + 40);
        v58(&v22[v56 + v57 * v45], v50, a3);
        result = AggregateShare.share.modify(v53);
        if (v38 == v45)
          break;
        v59 = __OFADD__(v45++, 1);
        v22 = v52;
        if (v59)
        {
          __break(1u);
          break;
        }
      }
      v59 = __OFADD__(v38, 1);
      v60 = v38 + 1;
      if (!v59)
      {
        LODWORD(v79) = 0;
        v61 = v22;
        v62 = v57;
        v63 = v58;
        v64 = v81;
        while (1)
        {
          if (v60 < v82)
          {
            v65 = v60 + 1;
          }
          else
          {
            if ((v60 != v82) | v79 & 1)
              return Polynomial.init(coefficients:)(v84, v71);
            LODWORD(v79) = 1;
            v65 = v82;
          }
          MEMORY[0x24BD00400](v83, a3);
          MEMORY[0x24BD00400](v64, a3);
          v66 = v80;
          Array.subscript.getter();
          Array._makeMutableAndUnique()();
          v67 = v84;
          Array._checkSubscript_mutating(_:)(v60);
          v68 = _swift_isClassOrObjCExistentialType();
          v69 = v67 & 0xFFFFFFFFFFFFFF8;
          if ((v68 & 1) == 0)
            v69 = v67;
          v63(&v61[v69 + v60 * v62], v66, a3);
          AggregateShare.share.modify(v53);
          v60 = v65;
        }
      }
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t static Polynomial.*= infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Polynomial.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))static Polynomial.* infix(_:_:));
}

uint64_t static Polynomial.+= infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a1;
  v8 = *a2;
  v9 = v6;
  a5(&v10, &v9, &v8);
  result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t static Polynomial.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63[2];

  v8 = *(_QWORD *)(a3 - 8);
  v9 = (uint64_t *)MEMORY[0x24BDAC7A8](a1, a2);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v9;
  v14 = *v13;
  v17 = type metadata accessor for Polynomial(0, v15, v16, v16);
  *(_QWORD *)&v61 = v12;
  if (Polynomial.degree.getter(v17, v18) < 0)
    return Polynomial.init()(a3, a5);
  *(_QWORD *)&v61 = v14;
  if (Polynomial.degree.getter(v17, v19) < 0)
    return Polynomial.init()(a3, a5);
  *(_QWORD *)&v61 = v12;
  v21 = Polynomial.degree.getter(v17, v20);
  *(_QWORD *)&v61 = v14;
  result = Polynomial.degree.getter(v17, v22);
  v25 = v21 + result;
  if (__OFADD__(v21, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  v26 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v53 = a5;
  *(_QWORD *)&v61 = v12;
  v27 = Polynomial.degree.getter(v17, v24);
  *(_QWORD *)&v61 = v14;
  v29 = Polynomial.degree.getter(v17, v28);
  if (v29 > v27)
    v27 = v29;
  dispatch thunk of IteratorProtocol.next()();
  if (v27 < 61)
  {
    v41 = specialized Array.init(repeating:count:)((uint64_t)v11, v26, a3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a3);
    v63[0] = v41;
    *(_QWORD *)&v61 = v12;
    swift_bridgeObjectRetain();
    v43 = Polynomial.degree.getter(v17, v42);
    *(_QWORD *)&v59 = v12;
    *(_QWORD *)&v57 = v43;
    v44 = type metadata accessor for Array();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
    v45 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v44);
    lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>();
    MutableCollection.subscript.getter();
    swift_bridgeObjectRelease();
    v52 = v61;
    v59 = v61;
    v60 = v62;
    *(_QWORD *)&v57 = v14;
    swift_bridgeObjectRetain();
    v47 = Polynomial.degree.getter(v17, v46);
    *(_QWORD *)&v54 = v14;
    v56 = v47;
    MutableCollection.subscript.getter();
    swift_bridgeObjectRelease();
    v51 = v57;
    v54 = v57;
    v55 = v58;
    v48 = type metadata accessor for ArraySlice();
    v49 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v48);
    v50 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v44);
    convolveDirectly<A, B, C, D>(_:withKernel:result:)((uint64_t)&v59, (uint64_t)&v54, (uint64_t)v63, v48, v48, v44, a3, v49, v49, v45, v50, a4);
  }
  else
  {
    v30 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v26);
    v31 = specialized Array.init(repeating:count:)((uint64_t)v11, v30, a3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a3);
    v63[0] = v31;
    *(_QWORD *)&v61 = v12;
    swift_bridgeObjectRetain();
    v33 = Polynomial.degree.getter(v17, v32);
    *(_QWORD *)&v59 = v12;
    *(_QWORD *)&v57 = v33;
    v34 = type metadata accessor for Array();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
    v35 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v34);
    lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>();
    MutableCollection.subscript.getter();
    swift_bridgeObjectRelease();
    v52 = v61;
    v59 = v61;
    v60 = v62;
    *(_QWORD *)&v57 = v14;
    swift_bridgeObjectRetain();
    v37 = Polynomial.degree.getter(v17, v36);
    *(_QWORD *)&v54 = v14;
    v56 = v37;
    MutableCollection.subscript.getter();
    swift_bridgeObjectRelease();
    v51 = v57;
    v54 = v57;
    v55 = v58;
    v38 = (void (*)(char *, char *))type metadata accessor for ArraySlice();
    v39 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v38);
    v40 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v34);
    convolveUsingDFT<A, B, C, D>(_:withKernel:result:)((void (*)(uint64_t, uint64_t))&v59, (uint64_t)&v54, (uint64_t)v63, v38, (uint64_t)v38, v34, a3, v39, v39, v35, v40, a4);
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return Polynomial.init(coefficients:)(v63[0], v53);
}

uint64_t static Polynomial.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  void (*v41)(uint64_t, _QWORD *);
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  void (*v47)(uint64_t, _QWORD *);
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char isClassOrObjCExistentialType;
  uint64_t v57;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, _QWORD *);
  void (*v63)(uint64_t, _QWORD *);
  void (*v64)(char *, char *);
  uint64_t v65;
  void (*v66)(char *, uint64_t, _QWORD *);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t AssociatedConformanceWitness;
  void (*v78)(char *, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v75 = AssociatedTypeWitness;
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v11);
  v73 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v72 = (char *)&v59 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v71 = (char *)&v59 - v19;
  v20 = *(_QWORD *)(a3 - 8);
  v22 = MEMORY[0x24BDAC7A8](v18, v21);
  v70 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v68 = (char *)&v59 - v26;
  MEMORY[0x24BDAC7A8](v25, v27);
  v29 = (char *)&v59 - v28;
  v30 = *a2;
  dispatch thunk of IteratorProtocol.next()();
  v76 = a1;
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v69 = v20;
  v78 = *(void (**)(char *, uint64_t))(v20 + 8);
  v79 = v29;
  v78(v29, a3);
  if ((a2 & 1) != 0)
    return Polynomial.init()(a3, a5);
  v32 = type metadata accessor for Polynomial(0, a3, (uint64_t)a4, v31);
  v81 = v30;
  if (Polynomial.degree.getter(v32, v33) < 0)
    return Polynomial.init()(a3, a5);
  v34 = (uint64_t)v79;
  dispatch thunk of IteratorProtocol.next()();
  v81 = v30;
  result = Polynomial.degree.getter(v32, v35);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v37 = specialized Array.init(repeating:count:)(v34, result + 1, a3);
  v78((char *)v34, a3);
  v80 = v30;
  v81 = v37;
  result = Polynomial.degree.getter(v32, v38);
  v67 = result;
  if (result < 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v60 = a5;
  v66 = (void (*)(char *, uint64_t, _QWORD *))a4[17];
  v39 = swift_checkMetadataState();
  v40 = 0;
  v64 = *(void (**)(char *, char *))(AssociatedConformanceWitness + 80);
  v65 = v39;
  v41 = (void (*)(uint64_t, _QWORD *))a4[11];
  v62 = (void (*)(char *, uint64_t, _QWORD *))a4[12];
  v63 = v41;
  v61 = v30;
  v42 = v79;
  v44 = v68;
  v43 = v69;
  v45 = v72;
  while (1)
  {
    Array.subscript.getter();
    v46 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v70, v76, a3);
    v66(v46, a3, a4);
    v47 = v63;
    v63(a3, a4);
    v48 = v73;
    v47(a3, a4);
    a5 = a4;
    v49 = v71;
    v64(v45, v48);
    v50 = *(void (**)(char *, uint64_t))(v74 + 8);
    v51 = v48;
    v52 = v75;
    v50(v51, v75);
    v50(v45, v52);
    v53 = v49;
    a4 = a5;
    v62(v53, a3, a5);
    v78(v42, a3);
    v54 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    v55 = v81;
    Array._checkSubscript_mutating(_:)(v40);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    v57 = v55 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0)
      v57 = v55;
    (*(void (**)(unint64_t, char *, uint64_t))(v43 + 40))(v57+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v40, v44, a3);
    AggregateShare.share.modify(v54);
    if (v67 == v40)
      break;
    if (__OFADD__(v40++, 1))
    {
      __break(1u);
      return Polynomial.init()(a3, a5);
    }
  }
  return Polynomial.init(coefficients:)(v81, v60);
}

uint64_t static Polynomial.*= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  static Polynomial.* infix(_:_:)(a2, &v7, a3, a4, &v6);
  result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

uint64_t static Polynomial.* infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;

  v6 = *a1;
  return static Polynomial.* infix(_:_:)(a2, &v6, a3, a4, a5);
}

uint64_t static Polynomial.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = *(_QWORD *)(a3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t *)MEMORY[0x24BDAC7A8](v4, v7);
  v10 = (char *)&v29 - v9;
  v11 = *v8;
  v13 = *v12;
  v31 = v14;
  v32 = v11;
  v16 = type metadata accessor for Polynomial(0, v15, v14, v14);
  v18 = Polynomial.degree.getter(v16, v17);
  v32 = v13;
  if (v18 == Polynomial.degree.getter(v16, v19))
  {
    v32 = v11;
    v21 = Polynomial.degree.getter(v16, v20);
    LOBYTE(v22) = 0;
    v23 = 0;
    do
    {
      if (v23 < v21)
      {
        v24 = v23 + 1;
      }
      else
      {
        v27 = (v23 != v21) | v22;
        v22 = 1;
        v24 = v21;
        if ((v27 & 1) != 0)
          return v22;
      }
      Array.subscript.getter();
      Array.subscript.getter();
      v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26 = *(void (**)(char *, uint64_t))(v30 + 8);
      v26(v6, a3);
      v26(v10, a3);
      v23 = v24;
    }
    while ((v25 & 1) != 0);
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Polynomial<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Polynomial.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t static Polynomial.rangeCheck(start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char v68;
  void (*v69)(char *, uint64_t);
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char v94;
  char *v95;
  char *v96;
  char *v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  void (*v136)(char *, char *, uint64_t);
  void (*v137)(char *, char *, uint64_t);
  char *v138;
  void (*v139)(uint64_t);
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t TupleTypeMetadata2;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t);
  void (*v164)(char *, uint64_t);
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[2];
  uint64_t v175;
  uint64_t v176;

  v168 = (char *)a2;
  v131 = a5;
  swift_getAssociatedTypeWitness();
  v161 = a4;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v159 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v9 = *(_QWORD *)(v159 + 32);
  v10 = swift_getAssociatedTypeWitness();
  v148 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v11);
  v147 = (char *)&v131 - v12;
  v146 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 24) + 16);
  v145 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v145, v13);
  v144 = (char *)&v131 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v15);
  v157 = (char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v18);
  v156 = (char *)&v131 - v19;
  v20 = *(_QWORD *)(v9 + 8);
  v21 = type metadata accessor for Range();
  v162 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21, v22);
  v155 = (char *)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v25);
  v154 = (char *)&v131 - v26;
  v149 = v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v169 = v9;
  v174[0] = v9;
  v174[1] = AssociatedConformanceWitness;
  v167 = AssociatedConformanceWitness;
  v28 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE1BD8], v21, v174);
  v171 = v21;
  v143 = v28;
  v134 = type metadata accessor for IndexingIterator();
  v133 = *(_QWORD *)(v134 - 8);
  v30 = MEMORY[0x24BDAC7A8](v134, v29);
  v132 = (char *)&v131 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v30, v32);
  v153 = (char *)&v131 - v34;
  v160 = a3;
  v142 = *(_QWORD *)(a3 - 8);
  v36 = MEMORY[0x24BDAC7A8](v33, v35);
  v141 = (char *)&v131 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v140 = (char *)&v131 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39, v41);
  v44 = (char *)&v131 - v43;
  v45 = *(void (**)(char *, char *, uint64_t))(AssociatedTypeWitness - 8);
  v47 = MEMORY[0x24BDAC7A8](v42, v46);
  v152 = (char *)&v131 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x24BDAC7A8](v47, v49);
  v166 = (char *)&v131 - v51;
  v53 = MEMORY[0x24BDAC7A8](v50, v52);
  v151 = (char *)&v131 - v54;
  v56 = MEMORY[0x24BDAC7A8](v53, v55);
  v165 = (char *)&v131 - v57;
  v59 = MEMORY[0x24BDAC7A8](v56, v58);
  v61 = (char *)&v131 - v60;
  MEMORY[0x24BDAC7A8](v59, v62);
  v64 = (char *)&v131 - v63;
  v65 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v45 + 2);
  v66 = a1;
  v65((char *)&v131 - v63, a1, AssociatedTypeWitness);
  v67 = (uint64_t)v168;
  ((void (*)(char *))v65)(v61);
  v68 = dispatch thunk of static Comparable.< infix(_:_:)();
  v137 = v45;
  v69 = (void (*)(char *, uint64_t))*((_QWORD *)v45 + 1);
  v69(v61, AssociatedTypeWitness);
  v170 = AssociatedTypeWitness;
  v164 = v69;
  result = ((uint64_t (*)(char *, uint64_t))v69)(v64, AssociatedTypeWitness);
  if ((v68 & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v71 = v160;
  v139 = *(void (**)(uint64_t))(v161 + 72);
  v139(v160);
  Polynomial.init(coefficient:)((uint64_t)v44, v71, &v173);
  v72 = v66;
  v73 = v67;
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v138 = v44;
    v150 = v20;
    v74 = TupleTypeMetadata2;
    v75 = v156;
    v76 = &v156[*(int *)(TupleTypeMetadata2 + 48)];
    v77 = v170;
    v65(v156, v72, v170);
    v65(v76, v73, v77);
    v78 = v157;
    v79 = &v157[*(int *)(v74 + 48)];
    v65(v157, (uint64_t)v75, v77);
    v163 = v65;
    v65(v79, (uint64_t)v76, v77);
    v80 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v137 + 4);
    v81 = v155;
    v80(v155, v78, v77);
    v82 = v164;
    v164(v79, v77);
    v83 = &v78[*(int *)(v74 + 48)];
    v84 = v75;
    v85 = v153;
    v80(v78, v84, v77);
    v80(v83, v76, v77);
    v86 = v171;
    v80(&v81[*(int *)(v171 + 36)], v83, v77);
    v82(v78, v77);
    v87 = v162;
    v88 = v154;
    v136 = *(void (**)(char *, char *, uint64_t))(v162 + 32);
    v136(v154, v81, v86);
    v89 = v132;
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v132, v88, v86);
    v90 = v165;
    Range<>.startIndex.getter();
    v135 = *(void (**)(char *, uint64_t))(v87 + 8);
    v135(v88, v86);
    v91 = v134;
    v92 = &v89[*(int *)(v134 + 36)];
    v137 = v80;
    v80(v92, v90, v77);
    (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v85, v89, v91);
    v168 = &v85[*(int *)(v91 + 36)];
    while (1)
    {
      Range<>.endIndex.getter();
      v93 = v170;
      v94 = dispatch thunk of static Equatable.== infix(_:_:)();
      v82(v90, v93);
      v95 = v152;
      v96 = v166;
      v97 = v151;
      if ((v94 & 1) != 0)
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v85, v134);
        *v131 = v173;
        return result;
      }
      v98 = (void (*)(char *, char *, uint64_t))v163;
      v163(v151, (uint64_t)v168, v170);
      Range<>.startIndex.getter();
      Range<>.endIndex.getter();
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
        break;
      v99 = TupleTypeMetadata2;
      v100 = v156;
      v101 = &v156[*(int *)(TupleTypeMetadata2 + 48)];
      v102 = v170;
      v103 = v98;
      v104 = v137;
      v137(v156, v96, v170);
      v104(v101, v95, v102);
      v105 = v157;
      v106 = v97;
      v107 = &v157[*(int *)(v99 + 48)];
      v103(v157, v100, v102);
      v103(v107, v101, v102);
      v108 = v155;
      v104(v155, v105, v102);
      v109 = v164;
      v164(v107, v102);
      v110 = &v105[*(int *)(v99 + 48)];
      v104(v105, v100, v102);
      v104(v110, v101, v102);
      v104(&v108[*(int *)(v171 + 36)], v110, v102);
      v109(v105, v102);
      v111 = (uint64_t)v154;
      v136(v154, v108, v171);
      v112 = (uint64_t)v168;
      specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)v168, v111);
      v135((char *)v111, v171);
      v113 = v146;
      v114 = v149;
      v115 = v145;
      v116 = swift_getAssociatedConformanceWitness();
      v117 = v144;
      MEMORY[0x24BD00928](&unk_249C28BC0, 512, v115, v116);
      v118 = v147;
      MEMORY[0x24BD00904](v117, v114, v113);
      v119 = v165;
      dispatch thunk of Strideable.advanced(by:)();
      v109((char *)v112, v102);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v118, v114);
      v120 = v119;
      v104((char *)v112, v119, v102);
      v104(v119, v106, v102);
      v121 = v160;
      getContiguousArrayStorageType<A>(for:)(v160, v160);
      v122 = v161;
      v123 = v142;
      swift_allocObject();
      v162 = static Array._adoptStorage(_:count:)();
      v124 = v166;
      v125 = v138;
      dispatch thunk of IteratorProtocol.next()();
      v163(v124, (uint64_t)v120, v102);
      v126 = v140;
      (*(void (**)(char *, uint64_t, uint64_t))(v122 + 128))(v124, v121, v122);
      v127 = v141;
      (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v141, v125, v121);
      (*(void (**)(char *, uint64_t, uint64_t))(v122 + 136))(v127, v121, v122);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      v128 = *(void (**)(char *, uint64_t))(v123 + 8);
      v128(v126, v121);
      v128(v125, v121);
      v85 = v153;
      ((void (*)(uint64_t, uint64_t))v139)(v121, v122);
      v129 = v162;
      _finalizeUninitializedArray<A>(_:)();
      Polynomial.init(coefficients:)(v129, &v172);
      v175 = v172;
      v176 = v173;
      static Polynomial.* infix(_:_:)((uint64_t)&v176, (uint64_t)&v175, v121, v122, &v173);
      swift_bridgeObjectRelease();
      v90 = v165;
      swift_bridgeObjectRelease();
      v130 = v102;
      v82 = v164;
      v164(v90, v130);
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE30C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in Polynomial.init(coefficients:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Polynomial.init(coefficients:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for Polynomial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Polynomial);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  uint64_t result;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for Range();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x24BDAC7A8](v5, v7);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v8, v12);
  v14 = (char *)&v18 - v13;
  v15 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, a2, v5);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v16 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  if ((v16 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

void PINE.measurementShareLength.getter()
{
  type metadata accessor for PINECircuit();
}

uint64_t sub_249BE88B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 96));
  result = v2 - v3;
  if (__OFSUB__(v2, v3))
    __break(1u);
  return result;
}

double static PINEDefaultParameter.alpha.getter()
{
  return 8.7;
}

uint64_t static PINEDefaultParameter.wraparoundCheckCount.getter()
{
  return 100;
}

uint64_t static PINEDefaultParameter.wraparoundCheckSuccessCount.getter()
{
  return 100;
}

uint64_t static PINE.numOfAggregatorRange.getter()
{
  return 2;
}

uint64_t PINE.numOfAggregators.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t static PINE.numOfRounds.getter()
{
  return 1;
}

uint64_t PINE.randomSizeForShard.getter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  if (__OFSUB__(*v1, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*v1 + 0x3FFFFFFFFFFFFFFFLL < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 + 0x4000000000000000 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = 2 * (*v1 - 1);
  v4 = __OFADD__(v3, 2 * v2);
  v5 = v3 + 2 * v2;
  if (v4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v6 = v5 | 1;
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 56) + 8))(*(_QWORD *)(result + 32));
  result = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
LABEL_11:
    __break(1u);
  return result;
}

uint64_t static PINE.version.getter()
{
  return 0;
}

uint64_t PINE.chunkLength.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 76) + 64);
}

void PINE.flp.getter()
{
  type metadata accessor for PINECircuit();
}

uint64_t sub_249BE89E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t PINE.numOfProofs.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 80));
}

BOOL static PINE.isRecommended(_:)(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xFF;
}

void PINE.init(flp:numOfAggregators:numOfProofs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if ((unint64_t)(a2 - 2) > 0xFD)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v8 = 0xD000000000000031;
    v9 = 0x8000000249C30D00;
    _print_unlocked<A, B>(_:_:)();
    v3._countAndFlagsBits = 3943982;
    v3._object = (void *)0xE300000000000000;
    String.append(_:)(v3);
    _print_unlocked<A, B>(_:_:)();
    v4._countAndFlagsBits = 0;
    v4._object = (void *)0xE000000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 0x20746F67202CLL;
    v5._object = (void *)0xE600000000000000;
    String.append(_:)(v5);
  }
  else
  {
    if ((unint64_t)(a3 - 1) < 0xFF)
      type metadata accessor for PINE();
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v8 = 0xD00000000000003BLL;
    v9 = 0x8000000249C30D40;
  }
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_QWORD *)v7 = v8;
  *(_QWORD *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 16) = 1;
  swift_willThrow();
  type metadata accessor for PINECircuit();
}

void sub_249BE8CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(a12, a1);
  JUMPOUT(0x249BE8CD8);
}

void type metadata accessor for PINE()
{
  JUMPOUT(0x24BD00B80);
}

void PINE.init(l2NormBound:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v1);
  type metadata accessor for PINECircuit();
}

uint64_t sub_249BE8DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[64];

  *(_QWORD *)(v10 - 248) = a1;
  *(_QWORD *)(v10 - 200) = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1, a2);
  *(_QWORD *)(v10 - 256) = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12, v14);
  v15 = v9;
  v16 = v9;
  v18 = &v22[-v17];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v5, v16, v3);
  *(_QWORD *)(v10 - 240) = v8;
  *(_QWORD *)(v10 - 224) = v7;
  v19 = *(_QWORD *)(v10 - 136);
  PINECircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(v5, *(_QWORD *)(v10 - 168), *(_QWORD *)(v10 - 160), *(_QWORD *)(v10 - 152), *(_DWORD *)(v10 - 180), *(_QWORD *)(v10 - 144), *(_QWORD *)(v10 - 176), *(_QWORD *)(v10 - 192), (uint64_t)v18, v11, v2, v7, v4, v8);
  if (!v19)
  {
    *(_QWORD *)(v10 - 152) = *(_QWORD *)(v10 + 64);
    *(_QWORD *)(v10 - 144) = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 - 136) = v3;
    v20 = *(_QWORD *)(v10 - 256);
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(v10 - 200) + 16))(v20, v18, *(_QWORD *)(v10 - 248));
    PINE.init(flp:numOfAggregators:numOfProofs:)(v20, *(_QWORD *)(v10 - 216), *(_QWORD *)(v10 - 208));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v15, v3);
}

void static PINE.identifier.getter(_BYTE *a1@<X8>)
{
  static PINECircuit.identifier.getter(a1);
}

uint64_t static PINE.nonceSize.getter()
{
  return 16;
}

char *static PINE.domainSeparationTag(usage:)(unsigned __int8 *a1)
{
  int v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  unsigned int v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0, MEMORY[0x24BEE4AF8]);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  v10 = v2;
  static PINECircuit.identifier.getter((_BYTE *)&v9 + 3);
  v8 = bswap32(dword_249C2AF14[SHIBYTE(v9)]);
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v9);
  specialized Array.append<A>(contentsOf:)(v5);
  LOWORD(v8) = __rev16(v1 + 1);
  v6 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v8 + 2);
  specialized Array.append<A>(contentsOf:)(v6);
  return v10;
}

void protocol witness for static VDAFProtocol.identifier.getter in conformance PINE<A, B, C>(_BYTE *a1@<X8>)
{
  static PINE.identifier.getter(a1);
}

char *protocol witness for static VDAFProtocol.domainSeparationTag(usage:) in conformance PINE<A, B, C>(unsigned __int8 *a1)
{
  return static PINE.domainSeparationTag(usage:)(a1);
}

uint64_t PINE.verifyKeyLength.getter(uint64_t *a1)
{
  return specialized PINE.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

void PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  __int128 v20;

  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(a9 + 32);
  v12 = *(_QWORD *)(a9 + 56);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  if (v10 != ((uint64_t (*)(uint64_t, uint64_t))v13)(v11, v12))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20 = 0xD000000000000034;
    *((_QWORD *)&v20 + 1) = 0x8000000249C30D80;
    v13(v11, v12);
LABEL_9:
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0x3D746F67202CLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)v18 = v20;
    *(_BYTE *)(v18 + 16) = 1;
    swift_willThrow();
    return;
  }
  if (*(_QWORD *)(a5 + 16) != 16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20 = 0xD000000000000030;
    *((_QWORD *)&v20 + 1) = 0x8000000249C30DC0;
    goto LABEL_9;
  }
  MEMORY[0x24BD00BD4](&protocol conformance descriptor for PINE<A, B, C>, a9);
  VDAFProtocol.assertValidAggregatorID(_:)(a4);
  if (!v14)
  {
    if ((a4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a4 <= 0xFF)
    {
      PINE.measurementShareLength.getter();
    }
    __break(1u);
    JUMPOUT(0x249BE9A10);
  }
}

void PINE.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x24BDAC7A8](a1, a2);
  type metadata accessor for PINEPrepareShare();
}

uint64_t PINE.prepareNext(state:message:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  unint64_t v8;
  const char *v9;
  Swift::String v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  if (specialized static Array<A>.== infix(_:_:)(a1[2], a2[1]))
  {
    if (specialized static Array<A>.== infix(_:_:)(v5, v6))
    {
      MEMORY[0x24BD00400](v4, *(_QWORD *)(a3 + 16));
      type metadata accessor for PINECircuit();
    }
    _StringGuts.grow(_:)(79);
    v10._countAndFlagsBits = 0x4E49502F46414456;
    v10._object = (void *)0xEF74666977732E45;
    String.append(_:)(v10);
    v8 = 0xD000000000000039;
    v9 = " mismatched wraparound joint randomness seed:\nin state: (";
  }
  else
  {
    _StringGuts.grow(_:)(81);
    v7._countAndFlagsBits = 0x4E49502F46414456;
    v7._object = (void *)0xEF74666977732E45;
    String.append(_:)(v7);
    v8 = 0xD00000000000003BLL;
    v9 = " mismatched verification joint randomness seed:\nin state: (";
  }
  v11 = (unint64_t)(v9 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000249C307A0;
  v13._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0xE000000000000000;
  *(_BYTE *)(v15 + 16) = 1;
  return swift_willThrow();
}

void PINE.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x24BDAC7A8](a1, a2);
  dispatch thunk of IteratorProtocol.next()();
  type metadata accessor for PINECircuit();
}

uint64_t sub_249BEA544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = PINECircuit.outputLength.getter();
  v9 = specialized Array.init(repeating:count:)(v0, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v4);
  AggregateShare.init(_:)(v9, (_QWORD *)(v7 - 128));
  *(_QWORD *)(v7 - 208) = v4;
  *(_QWORD *)(v7 - 200) = v1;
  v10 = *(_QWORD *)(v7 - 256);
  v11 = *(_QWORD *)(v7 - 248);
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v7 - 184) = v10;
  *(_QWORD *)(v7 - 176) = v6;
  *(_QWORD *)(v7 - 168) = v3;
  *(_QWORD *)(v7 - 160) = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v7 - 152) = v11;
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v7 - 264);
  type metadata accessor for AggregateShare(0, v4, v6, v12);
  return Sequence.reduce<A>(into:_:)();
}

uint64_t PINE.isValid(parameter:previousParameters:)()
{
  return specialized PINE.isValid(parameter:previousParameters:)() & 1;
}

void PINE.inputShare<A>(from:aggregatorID:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[12];

  v10[11] = a4;
  v10[3] = a1;
  v10[4] = a5;
  v10[5] = a3;
  v10[2] = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1, a2);
  MEMORY[0x24BDAC7A8](v5, v6);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)();
}

uint64_t sub_249BEA720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  if (!v1)
  {
    v6 = *(_QWORD *)(v4 - 120);
    v5 = *(_QWORD *)(v4 - 112);
    *(_QWORD *)(v4 - 160) = *(unsigned __int8 *)(v4 - 104);
    *(_QWORD *)(v4 - 152) = v5;
    v7 = *(_QWORD *)(v4 - 96);
    v8 = *(_BYTE *)(v4 - 88);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 144) + 16))(v2, *(_QWORD *)(v4 - 136), v6);
    v9 = *(_QWORD *)(v4 - 160);
    *(_QWORD *)(v4 - 112) = *(_QWORD *)(v4 - 152);
    *(_QWORD *)(v4 - 104) = v9;
    *(_QWORD *)(v4 - 96) = v7;
    *(_BYTE *)(v4 - 88) = v8;
    return PINEInputShare.init<A>(from:parameter:)(v2, v4 - 112, v3, v0, v6);
  }
  return result;
}

uint64_t PINE.publicShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1, a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  return PINEPublicShare.init<A>(from:parameter:)((uint64_t)v9, *v4, 0, *(_QWORD *)(a2 + 32), a3, *(_QWORD *)(a2 + 56), a4);
}

void PINE.prepareState<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x24BDAC7A8](a1, a2);
  type metadata accessor for PINECircuit();
}

uint64_t sub_249BEA8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = PINECircuit.outputLength.getter();
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v5 - 192);
  v10 = *(_QWORD *)(v5 - 160);
  result = PINEPrepareState.DecodableParameter.init(aggregatorID:outputShareCount:)(v4, v6, v7, v8, (_QWORD *)(v5 - 104));
  if (!v10)
  {
    *(_OWORD *)(v5 - 160) = *(_OWORD *)(v5 - 104);
    v12 = *(_QWORD *)(v5 - 88);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v3, *(_QWORD *)(v5 - 208), v1);
    *(_OWORD *)(v5 - 144) = *(_OWORD *)(v5 - 160);
    *(_QWORD *)(v5 - 128) = v12;
    *(_BYTE *)(v5 - 120) = 0;
    return PINEPrepareState.init<A>(from:parameter:)(v3, v5 - 144, v9, v7, v1);
  }
  return result;
}

void PINE.prepareShare<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1, a1);
  (*(void (**)(char *))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a3 + 64);
  v7 = *(_OWORD *)(a3 + 40);
  v9 = *(_OWORD *)(a3 + 16);
  v10 = v9;
  v8 = v7;
  v11 = v7;
  v12 = v6;
  type metadata accessor for PINECircuit();
}

uint64_t sub_249BEAA64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for PINECircuit<A, B>, a1);
  result = FullyLinearProof.verifierLength.getter(a1, v9);
  v11 = *(_QWORD *)(v6 + *(int *)(v4 + 80));
  if ((unsigned __int128)(result * (__int128)v11) >> 64 == (result * v11) >> 63)
    return PINEPrepareShare.init<A>(from:parameter:)(v5, result * v11, 0, *(_QWORD *)(v7 - 144), *(_QWORD *)(v4 + 32), v1, *(_QWORD *)(v7 - 160), *(_QWORD *)(v4 + 56), v3, v2);
  __break(1u);
  return result;
}

uint64_t PINE.prepareMessage<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1, a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  return PINEPrepareMessage.init<A>(from:parameter:)((uint64_t)v10, 1, *(_QWORD *)(a2 + 32), a3, *(_QWORD *)(a2 + 56), a4, a5);
}

uint64_t PINE.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))OutputShare.init<A>(from:parameter:));
}

uint64_t protocol witness for Aggregator.verifyKeyLength.getter in conformance PINE<A, B, C>(uint64_t *a1)
{
  return specialized PINE.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

void protocol witness for Aggregator.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void protocol witness for Aggregator.prepareMessageFrom(_:parameter:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2)
{
  PINE.prepareMessageFrom(_:parameter:)(a1, a2);
}

uint64_t protocol witness for Aggregator.prepareNext(state:message:) in conformance PINE<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return PINE.prepareNext(state:message:)(a1, a2, a3);
}

void protocol witness for Aggregator.aggregate<A>(_:parameter:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2)
{
  PINE.aggregate<A>(_:parameter:)(a1, a2);
}

uint64_t protocol witness for Aggregator.isValid(parameter:previousParameters:) in conformance PINE<A, B, C>()
{
  return specialized PINE.isValid(parameter:previousParameters:)() & 1;
}

void protocol witness for Aggregator.inputShare<A>(from:aggregatorID:) in conformance PINE<A, B, C>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  PINE.inputShare<A>(from:aggregatorID:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Aggregator.publicShare<A>(from:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.publicShare<A>(from:)(a1, a4, a2, a3);
}

void protocol witness for Aggregator.prepareState<A>(from:aggregatorID:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2)
{
  PINE.prepareState<A>(from:aggregatorID:)(a1, a2);
}

void protocol witness for Aggregator.prepareShare<A>(from:aggregatorID:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PINE.prepareShare<A>(from:aggregatorID:)(a1, a2, a5);
}

uint64_t protocol witness for Aggregator.prepareMessage<A>(from:aggregatorID:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return PINE.prepareMessage<A>(from:aggregatorID:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for Aggregator.outputShare<A>(from:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.outputShare<A>(from:)(a1, a4, a2, a3);
}

void PINE.unshard<A>(_:numOfMeasurements:parameter:)()
{
  specialized PINE.unshard<A>(_:numOfMeasurements:parameter:)();
}

uint64_t PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PINE.aggregateShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))AggregateShare.init<A>(from:parameter:));
}

uint64_t PINE.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1, a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  return a5(v10, 1, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 40), a4);
}

void protocol witness for Collector.unshard<A>(_:numOfMeasurements:parameter:) in conformance PINE<A, B, C>()
{
  specialized PINE.unshard<A>(_:numOfMeasurements:parameter:)();
}

uint64_t sub_249BEAE8C(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!v2)
    *v1 = result;
  return result;
}

uint64_t protocol witness for Collector.aggregateShare<A>(from:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.aggregateShare<A>(from:)(a1, a4, a2, a3);
}

uint64_t PINE.shard<A>(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  Swift::Int v42;
  uint64_t v44;
  uint64_t *v45;
  __int128 v46;

  if (*(_QWORD *)(a3 + 16) == 16)
  {
    v12 = dispatch thunk of Collection.count.getter();
    if (v12 == PINE.randomSizeForShard.getter(a5))
    {
      v44 = a5;
      v13 = PINE.splitSeedBytes<A>(_:)(a4, a5, a6, a7);
      v14 = v13[2];
      v15 = MEMORY[0x24BEE4AF8];
      v45 = v13;
      if (v14)
      {
        v16 = v13;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
        v17 = v16 + 4;
        v18 = v14;
        do
        {
          v19 = *v17;
          v21 = *(_QWORD *)(v15 + 16);
          v20 = *(_QWORD *)(v15 + 24);
          swift_bridgeObjectRetain();
          if (v21 >= v20 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
          *(_QWORD *)(v15 + 16) = v21 + 1;
          *(_QWORD *)(v15 + 8 * v21 + 32) = v19;
          v17 += 4;
          --v18;
        }
        while (v18);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
        v28 = v45 + 5;
        v29 = v14;
        do
        {
          v30 = *v28;
          v32 = *(_QWORD *)(v15 + 16);
          v31 = *(_QWORD *)(v15 + 24);
          swift_bridgeObjectRetain();
          if (v32 >= v31 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1);
          *(_QWORD *)(v15 + 16) = v32 + 1;
          *(_QWORD *)(v15 + 8 * v32 + 32) = v30;
          v28 += 4;
          --v29;
        }
        while (v29);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
        v33 = v45 + 6;
        v34 = v14;
        do
        {
          v35 = *v33;
          v37 = *(_QWORD *)(v15 + 16);
          v36 = *(_QWORD *)(v15 + 24);
          swift_bridgeObjectRetain();
          if (v37 >= v36 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1);
          *(_QWORD *)(v15 + 16) = v37 + 1;
          *(_QWORD *)(v15 + 8 * v37 + 32) = v35;
          v33 += 4;
          --v34;
        }
        while (v34);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
        v38 = v45 + 7;
        do
        {
          v39 = *v38;
          v41 = *(_QWORD *)(v15 + 16);
          v40 = *(_QWORD *)(v15 + 24);
          swift_bridgeObjectRetain();
          if (v41 >= v40 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1);
          *(_QWORD *)(v15 + 16) = v41 + 1;
          *(_QWORD *)(v15 + 8 * v41 + 32) = v39;
          v38 += 4;
          --v14;
        }
        while (v14);
      }
      Array.init()();
      v42 = *(_QWORD *)(v7 + *(int *)(v44 + 76));
      type metadata accessor for Array();
      Array.reserveCapacity(_:)(v42);
      type metadata accessor for PINECircuit();
    }
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46 = 0xD00000000000002ALL;
    *((_QWORD *)&v46 + 1) = 0x8000000249C30F20;
    PINE.randomSizeForShard.getter(a5);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x3D746F67202CLL;
    v25._object = (void *)0xE600000000000000;
    String.append(_:)(v25);
    dispatch thunk of Collection.count.getter();
  }
  else
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46 = 0xD00000000000002FLL;
    *((_QWORD *)&v46 + 1) = 0x8000000249C30EF0;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0x3D746F67202CLL;
    v23._object = (void *)0xE600000000000000;
    String.append(_:)(v23);
  }
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_OWORD *)v27 = v46;
  *(_BYTE *)(v27 + 16) = 1;
  swift_willThrow();
  return v46;
}

_QWORD *PINE.splitSeedBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t (*v68)(_QWORD *, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  MEMORY[0x24BDAC7A8](a1, a1);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  v16 = ArraySlice.init<A>(_:)();
  v70 = (char *)v16;
  v71 = v17;
  v72 = v18;
  v73 = v19;
  if (__OFSUB__(*v4, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (*v4 - 1 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  MEMORY[0x24BDAC7A8](v16, v17);
  *((_OWORD *)&v64 - 5) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD **)(a2 + 32);
  *(&v64 - 8) = (uint64_t)v4;
  *(&v64 - 7) = a3;
  *((_OWORD *)&v64 - 3) = *(_OWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  *(&v64 - 4) = v21;
  *(&v64 - 3) = a4;
  *(&v64 - 2) = v20;
  *(&v64 - 1) = (uint64_t)&v70;
  v67 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5(partial apply for closure #1 in PINE.splitSeedBytes<A>(_:), (uint64_t)(&v64 - 12), 0, v22);
  v68 = *(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8);
  v69 = v21;
  v23 = v68(v4, v21);
  v24 = v70;
  v25 = v71;
  v26 = v72;
  v27 = v73;
  v8 = specialized Collection.prefix(_:)(v23, v70, v71, v72, v73);
  v66 = v28;
  v9 = v29;
  a4 = v30;
  v14 = (char *)specialized Collection.dropFirst(_:)(v23, v24, v25, v26, v27);
  v5 = v31;
  v6 = v32;
  v7 = v33;
  v70 = v14;
  v71 = v31;
  v72 = v32;
  v73 = v33;
  if ((a4 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_5:
    specialized _copyCollectionToContiguousArray<A>(_:)(v8, v66, v9, a4);
    goto LABEL_12;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v35 = swift_dynamicCastClass();
  if (!v35)
  {
    swift_unknownObjectRelease();
    v35 = MEMORY[0x24BEE4AF8];
  }
  v36 = *(_QWORD *)(v35 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, v9))
    goto LABEL_33;
  if (v36 != (a4 >> 1) - v9)
  {
LABEL_34:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  v34 = swift_dynamicCastClass();
  if (!v34)
  {
    swift_unknownObjectRelease();
    v34 = MEMORY[0x24BEE4AF8];
  }
LABEL_12:
  v66 = v34;
  swift_unknownObjectRelease();
  v37 = v68(v4, v69);
  v38 = specialized Collection.prefix(_:)(v37, v14, v5, v6, v7);
  v65 = v39;
  v41 = v40;
  v43 = v42;
  v44 = specialized Collection.dropFirst(_:)(v37, v14, v5, v6, v7);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v70 = (char *)v44;
  v71 = v45;
  v72 = v47;
  v73 = v49;
  if ((v43 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_14:
    specialized _copyCollectionToContiguousArray<A>(_:)(v38, v65, v41, v43);
    goto LABEL_21;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v51 = swift_dynamicCastClass();
  if (!v51)
  {
    swift_unknownObjectRelease();
    v51 = MEMORY[0x24BEE4AF8];
  }
  v52 = *(_QWORD *)(v51 + 16);
  swift_release();
  if (__OFSUB__(v43 >> 1, v41))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v52 != (v43 >> 1) - v41)
  {
LABEL_36:
    swift_unknownObjectRelease();
    goto LABEL_14;
  }
  if (!swift_dynamicCastClass())
    swift_unknownObjectRelease();
LABEL_21:
  swift_unknownObjectRelease();
  v53 = v68(v4, v69);
  v54 = specialized Collection.prefix(_:)(v53, v44, v46, v48, v50);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  specialized Collection.dropFirst(_:)(v53, v44, v46, v48, v50);
  if ((v60 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_23:
    specialized _copyCollectionToContiguousArray<A>(_:)(v54, v56, v58, v60);
    goto LABEL_30;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v61 = swift_dynamicCastClass();
  if (!v61)
  {
    swift_unknownObjectRelease();
    v61 = MEMORY[0x24BEE4AF8];
  }
  v62 = *(_QWORD *)(v61 + 16);
  swift_release();
  if (__OFSUB__(v60 >> 1, v58))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v62 != (v60 >> 1) - v58)
  {
LABEL_38:
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  if (!swift_dynamicCastClass())
    swift_unknownObjectRelease();
LABEL_30:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v67;
}

void closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(uint64_t a1)
{
  unint64_t v1;

  v1 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1 <= 0xFF)
      type metadata accessor for PINE();
LABEL_7:
    __break(1u);
    JUMPOUT(0x249BEC0E4);
  }
  __break(1u);
  goto LABEL_7;
}

void PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)()
{
  type metadata accessor for PINEInputShare();
}

uint64_t protocol witness for Client.shard<A>(_:nonce:seedBytes:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  return PINE.shard<A>(_:nonce:seedBytes:)(a1, a2, a3, a4, a7, a5, a6);
}

uint64_t closure #1 in PINE.splitSeedBytes<A>(_:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X4>, uint64_t *a3@<X8>, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v82)(void);
  uint64_t v83;

  v82 = *(uint64_t (**)(void))(a4 + 8);
  v5 = ((uint64_t (*)(uint64_t))v82)(a2);
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v10 = specialized Collection.prefix(_:)(v5, *a1, v7, v8, v9);
  v79 = v11;
  v13 = v12;
  v15 = v14;
  *a1 = specialized Collection.dropFirst(_:)(v5, v6, v7, v8, v9);
  a1[1] = v16;
  a1[2] = v17;
  a1[3] = v18;
  if ((v15 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    specialized _copyCollectionToContiguousArray<A>(_:)(v10, v79, v13, v15);
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
  v21 = *(_QWORD *)(v20 + 16);
  swift_release();
  if (__OFSUB__(v15 >> 1, v13))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v21 != (v15 >> 1) - v13)
  {
LABEL_39:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
LABEL_10:
  v80 = v19;
  swift_unknownObjectRelease();
  v22 = v82();
  v23 = *a1;
  v24 = a1[1];
  v25 = a1[2];
  v26 = a1[3];
  v27 = specialized Collection.prefix(_:)(v22, *a1, v24, v25, v26);
  v77 = v28;
  v30 = v29;
  v32 = v31;
  *a1 = specialized Collection.dropFirst(_:)(v22, v23, v24, v25, v26);
  a1[1] = v33;
  a1[2] = v34;
  a1[3] = v35;
  if ((v32 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_12:
    specialized _copyCollectionToContiguousArray<A>(_:)(v27, v77, v30, v32);
    goto LABEL_19;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v37 = swift_dynamicCastClass();
  if (!v37)
  {
    swift_unknownObjectRelease();
    v37 = MEMORY[0x24BEE4AF8];
  }
  v38 = *(_QWORD *)(v37 + 16);
  swift_release();
  if (__OFSUB__(v32 >> 1, v30))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v38 != (v32 >> 1) - v30)
  {
LABEL_41:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  v36 = swift_dynamicCastClass();
  if (!v36)
  {
    swift_unknownObjectRelease();
    v36 = MEMORY[0x24BEE4AF8];
  }
LABEL_19:
  v78 = v36;
  swift_unknownObjectRelease();
  v39 = v82();
  v41 = *a1;
  v40 = a1[1];
  v42 = a1[2];
  v43 = a1[3];
  v44 = specialized Collection.prefix(_:)(v39, *a1, v40, v42, v43);
  v75 = v45;
  v47 = v46;
  v49 = v48;
  *a1 = specialized Collection.dropFirst(_:)(v39, v41, v40, v42, v43);
  a1[1] = v50;
  a1[2] = v51;
  a1[3] = v52;
  if ((v49 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_21:
    specialized _copyCollectionToContiguousArray<A>(_:)(v44, v75, v47, v49);
    goto LABEL_28;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v54 = swift_dynamicCastClass();
  if (!v54)
  {
    swift_unknownObjectRelease();
    v54 = MEMORY[0x24BEE4AF8];
  }
  v55 = *(_QWORD *)(v54 + 16);
  swift_release();
  if (__OFSUB__(v49 >> 1, v47))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v55 != (v49 >> 1) - v47)
  {
LABEL_43:
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  v53 = swift_dynamicCastClass();
  if (!v53)
  {
    swift_unknownObjectRelease();
    v53 = MEMORY[0x24BEE4AF8];
  }
LABEL_28:
  v76 = v53;
  swift_unknownObjectRelease();
  v56 = v82();
  v57 = *a1;
  v58 = a1[1];
  v59 = a1[2];
  v60 = a1[3];
  v61 = specialized Collection.prefix(_:)(v56, *a1, v58, v59, v60);
  v83 = v62;
  v64 = v63;
  v66 = v65;
  *a1 = specialized Collection.dropFirst(_:)(v56, v57, v58, v59, v60);
  a1[1] = v67;
  a1[2] = v68;
  a1[3] = v69;
  if ((v66 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_30:
    specialized _copyCollectionToContiguousArray<A>(_:)(v61, v83, v64, v66);
    v71 = v70;
    goto LABEL_37;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v72 = swift_dynamicCastClass();
  if (!v72)
  {
    swift_unknownObjectRelease();
    v72 = MEMORY[0x24BEE4AF8];
  }
  v73 = *(_QWORD *)(v72 + 16);
  swift_release();
  if (__OFSUB__(v66 >> 1, v64))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v73 != (v66 >> 1) - v64)
  {
LABEL_45:
    swift_unknownObjectRelease();
    goto LABEL_30;
  }
  v71 = swift_dynamicCastClass();
  if (!v71)
  {
    swift_unknownObjectRelease();
    v71 = MEMORY[0x24BEE4AF8];
  }
LABEL_37:
  result = swift_unknownObjectRelease();
  *a3 = v80;
  a3[1] = v78;
  a3[2] = v76;
  a3[3] = v71;
  return result;
}

uint64_t specialized PINE.verifyKeyLength.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a3, a6);
}

unint64_t lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2C68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in PINE.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = *a2;
  v5 = type metadata accessor for Array();
  return Array<A>.elementwiseAdd(_:)(v4, v5, v3);
}

uint64_t partial apply for closure #2 in PINE.prepareMessageFrom(_:parameter:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #3 in PINE.prepareMessageFrom(_:parameter:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #1 in PINE.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 48);
  v9 = *a2;
  v7 = type metadata accessor for AggregateShare(0, v5, v6, a4);
  return AggregateShare.accumulate(_:)((uint64_t)&v9, v7);
}

uint64_t specialized PINE.isValid(parameter:previousParameters:)()
{
  lazy protocol witness table accessor for type VoidCodable and conformance VoidCodable();
  return Set.isEmpty.getter();
}

uint64_t specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[16];

  v26[10] = a6;
  v26[3] = a2;
  v12 = a4[2];
  v26[5] = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1, a1);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v13, v16);
  v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void (**)(char *))(v15 + 16);
  v26[8] = v20;
  v19(v18);
  v26[6] = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
  v26[7] = a7;
  LOBYTE(a7) = dispatch thunk of Collection.isEmpty.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a5);
  if ((a7 & 1) == 0)
  {
    v22 = a4[5];
    dispatch thunk of IteratorProtocol.next()();
    v26[4] = a8;
    v23 = a4[3];
    v24 = a4[6];
    v25 = a4[8];
    v26[11] = v12;
    v26[12] = v23;
    v26[13] = v22;
    v26[14] = v24;
    v26[15] = v25;
    type metadata accessor for PINECircuit();
  }
  __break(1u);
  return result;
}

void specialized PINE.unshard<A>(_:numOfMeasurements:parameter:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v1);
  dispatch thunk of IteratorProtocol.next()();
  type metadata accessor for PINECircuit();
}

uint64_t sub_249BECD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v9 = PINECircuit.outputLength.getter();
  v10 = specialized Array.init(repeating:count:)(v5, v9, v0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v0);
  *(_QWORD *)(v8 - 72) = v10;
  v11 = v4[4];
  v12 = type metadata accessor for Array();
  v13 = v4[7];
  v14 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v12);
  v22 = v6;
  v15 = *(_QWORD *)(v8 - 152);
  v16 = v11;
  v17 = *(_QWORD *)(v8 - 144);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))default argument 3 of PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:))(v1, v2, v16, v17, v12, *(_QWORD *)(v8 - 168), v7, v13, v15, v14, v22);
  v18 = *(_QWORD *)(v8 - 128);
  specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(*(_QWORD *)(v8 - 136), v8 - 72, v19, v4, v17, v12, v15, v14);
  v20 = *(_QWORD *)(v8 - 72);
  if (v18)
    swift_bridgeObjectRelease();
  return v20;
}

void partial apply for closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(uint64_t a1)
{
  closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(a1);
}

void associated type witness table accessor for VDAFProtocol.AggregateShareType : Equatable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

void associated type witness table accessor for VDAFProtocol.AggregateShareType : AggregatableProtocol in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregateShareType : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for AggregateShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregateShareType : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for AggregateShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregationParameter : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for VoidCodable;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregationParameter : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for VoidCodable;
}

void associated type witness table accessor for VDAFProtocol.InputShare : Equatable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

void associated type witness table accessor for VDAFProtocol.InputShare : VDAFDecodable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.InputShare : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEInputShare<A, B>;
}

void associated type witness table accessor for VDAFProtocol.OutputShareType : Equatable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.OutputShareType : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for OutputShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.OutputShareType : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for OutputShare<A>;
}

void associated type witness table accessor for VDAFProtocol.PublicShare : Equatable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPublicShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPublicShare<A>;
}

uint64_t associated type witness table accessor for VDAFProtocol.XOF : ExtendableOutputFunction in PINE<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 56);
}

void associated type witness table accessor for Aggregator.PrepareMessage : Equatable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareMessage<A>;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareMessage<A>;
}

void associated type witness table accessor for Aggregator.PrepareShare : Equatable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareShare<A, B>;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareShare<A, B>;
}

void associated type witness table accessor for Aggregator.PrepareState : Equatable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

void associated type witness table accessor for Aggregator.PrepareState : VDAFDecodable in PINE<A, B, C>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareState : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareState<A, B>;
}

uint64_t instantiation function for generic protocol witness table for PINE<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for PINE<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for PINEDefaultParameter()
{
  return &type metadata for PINEDefaultParameter;
}

uint64_t type metadata instantiation function for PINE()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata completion function for PINE()
{
  type metadata accessor for PINECircuit();
}

_QWORD *initializeBufferWithCopyOfBuffer for PINE(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(unint64_t, unint64_t, uint64_t);
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v45;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 & 0x100000;
  v10 = v7 <= 7 && v9 == 0;
  if (v10
    && (v11 = v7 + 8,
        v12 = *(_QWORD *)(v5 + 64) + 7,
        v13 = ((v12
              + ((v7
                + 8
                + ((((((v12 + ((v7 + 104) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
            + 8,
        (v8 & (v7 + 8)) + v13 + 8 <= 0x18))
  {
    v14 = ~v7;
    *a1 = *a2;
    v45 = (_QWORD *)(v8 & ((unint64_t)a1 + 15));
    v15 = (_QWORD *)(v8 & ((unint64_t)a2 + 15));
    *v45 = *v15;
    v16 = (_OWORD *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
    v17 = (__int128 *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = *v17;
    v19 = v17[2];
    v16[1] = v17[1];
    v16[2] = v19;
    *v16 = v18;
    v20 = (_QWORD *)(((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v20;
    v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
    *v23 = *v22;
    v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v24;
    v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
    *v27 = *v26;
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
    *v29 = *v28;
    v30 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v31;
    v32 = ((unint64_t)v30 + v11) & v14;
    v33 = ((unint64_t)v31 + v11) & v14;
    v34 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    v34(v32, v33, v4);
    v35 = (_QWORD *)((v12 + v32) & 0xFFFFFFFFFFFFF8);
    v36 = (_QWORD *)((v12 + v33) & 0xFFFFFFFFFFFFF8);
    *v35 = *v36;
    v37 = (_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFF8);
    v38 = (_QWORD *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFF8);
    *v37 = *v38;
    v39 = (_QWORD *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
    v40 = (_QWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v39 = *v40;
    v41 = ((unint64_t)v39 + v11) & v14;
    v42 = ((unint64_t)v40 + v11) & v14;
    v34(v41, v42, v4);
    *(_QWORD *)((v12 + v41) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v42) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)((char *)v45 + v13) = *(_QWORD *)((char *)v15 + v13);
  }
  else
  {
    v43 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v43 + (v8 & (v7 + 16)));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for PINE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v7)(unint64_t, uint64_t);

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4
      + 8
      + ((((((((((((((((a1 + (v4 | 7) + 8) & ~(v4 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4;
  v7 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  v7(v5, v2);
  return ((uint64_t (*)(unint64_t, uint64_t))v7)((v4+ 8+ ((((((*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4, v2);
}

_QWORD *initializeWithCopy for PINE(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _OWORD *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (__int128 *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  v13 = v11[2];
  v10[1] = v11[1];
  v10[2] = v13;
  *v10 = v12;
  v14 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = ((unint64_t)v24 + v6 + 8) & ~v6;
  v27 = ((unint64_t)v25 + v6 + 8) & ~v6;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v28(v26, v27, v4);
  v29 = *(_QWORD *)(v5 + 64) + 7;
  v30 = (_QWORD *)((v29 + v26) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v29 + v27) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = ((unint64_t)v34 + v6 + 8) & ~v6;
  v37 = ((unint64_t)v35 + v6 + 8) & ~v6;
  v28(v36, v37, v4);
  *(_QWORD *)((v29 + v36) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v29 + v37) & 0xFFFFFFFFFFFFF8);
  v38 = ((v29
        + ((v6
          + 8
          + ((((((v29 + ((v6 + 104) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  *(_QWORD *)((char *)v8 + v38) = *(_QWORD *)((char *)v9 + v38);
  return a1;
}

_QWORD *assignWithCopy for PINE(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v10[1] = v11[1];
  v10[2] = v11[2];
  v10[3] = v11[3];
  v10[4] = v11[4];
  v10[5] = v11[5];
  v12 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + v6 + 8) & ~v6;
  v25 = ((unint64_t)v23 + v6 + 8) & ~v6;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v26(v24, v25, v4);
  v27 = *(_QWORD *)(v5 + 64) + 7;
  v28 = (_QWORD *)((v27 + v24) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((v27 + v25) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = ((unint64_t)v32 + v6 + 8) & ~v6;
  v35 = ((unint64_t)v33 + v6 + 8) & ~v6;
  v26(v34, v35, v4);
  *(_QWORD *)((v27 + v34) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v27 + v35) & 0xFFFFFFFFFFFFF8);
  v36 = ((v27
        + ((v6
          + 8
          + ((((((v27 + ((v6 + 104) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  *(_QWORD *)((char *)v8 + v36) = *(_QWORD *)((char *)v9 + v36);
  return a1;
}

_QWORD *initializeWithTake for PINE(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _OWORD *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (__int128 *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  v13 = v11[2];
  v10[1] = v11[1];
  v10[2] = v13;
  *v10 = v12;
  v14 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = ((unint64_t)v24 + v6 + 8) & ~v6;
  v27 = ((unint64_t)v25 + v6 + 8) & ~v6;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v28(v26, v27, v4);
  v29 = *(_QWORD *)(v5 + 64) + 7;
  v30 = (_QWORD *)((v29 + v26) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v29 + v27) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = ((unint64_t)v34 + v6 + 8) & ~v6;
  v37 = ((unint64_t)v35 + v6 + 8) & ~v6;
  v28(v36, v37, v4);
  *(_QWORD *)((v29 + v36) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v29 + v37) & 0xFFFFFFFFFFFFF8);
  v38 = ((v29
        + ((v6
          + 8
          + ((((((v29 + ((v6 + 104) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  *(_QWORD *)((char *)v8 + v38) = *(_QWORD *)((char *)v9 + v38);
  return a1;
}

_QWORD *assignWithTake for PINE(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v10[1] = v11[1];
  v10[2] = v11[2];
  v10[3] = v11[3];
  v10[4] = v11[4];
  v10[5] = v11[5];
  v12 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + v6 + 8) & ~v6;
  v25 = ((unint64_t)v23 + v6 + 8) & ~v6;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v26(v24, v25, v4);
  v27 = *(_QWORD *)(v5 + 64) + 7;
  v28 = (_QWORD *)((v27 + v24) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((v27 + v25) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = ((unint64_t)v32 + v6 + 8) & ~v6;
  v35 = ((unint64_t)v33 + v6 + 8) & ~v6;
  v26(v34, v35, v4);
  *(_QWORD *)((v27 + v34) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v27 + v35) & 0xFFFFFFFFFFFFF8);
  v36 = ((v27
        + ((v6
          + 8
          + ((((((v27 + ((v6 + 104) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  *(_QWORD *)((char *)v8 + v36) = *(_QWORD *)((char *)v9 + v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for PINE(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v6 | 7;
  v8 = v6 + 8;
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v8
                                                                    + ((((((((((((((((a1 + v7 + 8) & ~v7) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6);
    return 0;
  }
  if ((((v8 & ~v7)
       + ((*(_QWORD *)(v4 + 64)
         + 7
         + ((v8
           + ((((((*(_QWORD *)(v4 + 64) + 7 + ((v6 + 104) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
       + 16) & 0xFFFFFFF8) != 0)
    v9 = 2;
  else
    v9 = a2 - v5 + 1;
  if (v9 >= 0x10000)
    v10 = 4;
  else
    v10 = 2;
  if (v9 < 0x100)
    v10 = 1;
  if (v9 >= 2)
    v11 = v10;
  else
    v11 = 0;
  return ((uint64_t (*)(void))((char *)&loc_249BEDC30 + 4 * byte_249C2AE40[v11]))();
}

void storeEnumTagSinglePayload for PINE(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v12 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v9 = a3 - v7;
    if ((((_DWORD)v8 + 8) & ~(v8 | 7))
       + ((*(_DWORD *)(v6 + 64)
         + 7
         + (((_DWORD)v8
           + 8
           + ((((((*(_DWORD *)(v6 + 64) + 7 + (((_DWORD)v8 + 104) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)) & ~(_DWORD)v8)) & 0xFFFFFFF8) == -16)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X15 }
  }
  if ((((_DWORD)v8 + 8) & ~(v8 | 7))
     + ((*(_DWORD *)(v6 + 64)
       + 7
       + (((_DWORD)v8
         + 8
         + ((((((*(_DWORD *)(v6 + 64) + 7 + (((_DWORD)v8 + 104) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)) & ~(_DWORD)v8)) & 0xFFFFFFF8) != -16)
  {
    v13 = ~v7 + a2;
    bzero(a1, ((v8 + 8) & ~(v8 | 7))+ ((*(_QWORD *)(v6 + 64)+ 7+ ((v8+ 8+ ((((((*(_QWORD *)(v6 + 64) + 7 + ((v8 + 104) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_249BEDE0C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_249BEDE14(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x249BEDE1CLL);
}

void sub_249BEDE80()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_249BEDE88()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_249BEDE90@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!a1)
    JUMPOUT(0x249BEDE98);
  return (*(uint64_t (**)(unint64_t))(v3 + 56))((v4
                                                                + ((((((((((((((((v7 + v5 + 8) & v6) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 15) & 0xFFFFFFFFFFFFFFF8)) & a2);
}

uint64_t partial apply for closure #1 in PINE.splitSeedBytes<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PINE.splitSeedBytes<A>(_:)(*(_QWORD **)(v1 + 88), *(_QWORD *)(v1 + 32), a1, *(_QWORD *)(v1 + 64));
}

uint64_t partial apply for closure #1 in PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 56);
  v6 = *a2;
  return static AggregateShare.+= infix(_:_:)(a1, &v6, v3, v4);
}

uint64_t PINEPrepareMessage.init(wraparoundJointRandSeed:verificationJointRandSeed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t PINEPrepareMessage.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;

  v75 = a7;
  v9 = a4;
  v11 = a1;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v14 = (unint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v16;
  v77 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  v18 = v77(v16, v15);
  if (v18 + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = 2 * v18;
  v20 = dispatch thunk of Collection.count.getter();
  v76 = v12;
  if (v20 != v19)
  {
    v78 = 0;
    v79 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    type metadata accessor for PINEPrepareMessage(0, a3, a5, v38);
    v39 = _typeName(_:qualified:)();
    v41 = v40;
    swift_bridgeObjectRelease();
    v78 = v39;
    v79 = v41;
    v42._countAndFlagsBits = 0x6572697571657220;
    v42._object = (void *)0xEB00000000203A64;
    String.append(_:)(v42);
    v80 = v19;
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 0x203A746F67202CLL;
    v44._object = (void *)0xE700000000000000;
    String.append(_:)(v44);
    v80 = dispatch thunk of Collection.count.getter();
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46 = v78;
    v47 = v79;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v48 = v46;
    v48[1] = v47;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v11, v9);
  }
  v21 = *(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16);
  v72 = v11;
  v21(v14, v11, v9);
  v73 = v9;
  v22 = ArraySlice.init<A>(_:)();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = v77(a3, a5);
  v17 = specialized Collection.prefix(_:)(v29, v22, v24, v26, v28);
  v69 = v30;
  v74 = v31;
  v14 = v32;
  v11 = specialized Collection.dropFirst(_:)(v29, v22, v24, v26, v28);
  v70 = v34;
  v71 = v33;
  v9 = v35;
  if ((v14 & 1) == 0)
  {
    swift_unknownObjectRetain();
    a6 = v74;
LABEL_5:
    specialized _copyCollectionToContiguousArray<A>(_:)(v17, v69, a6, v14);
    v37 = v36;
    goto LABEL_13;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v50 = swift_dynamicCastClass();
  if (!v50)
  {
    swift_unknownObjectRelease();
    v50 = MEMORY[0x24BEE4AF8];
  }
  v51 = *(_QWORD *)(v50 + 16);
  swift_release();
  a6 = v74;
  if (__OFSUB__(v14 >> 1, v74))
    goto LABEL_25;
  if (v51 != (v14 >> 1) - v74)
  {
LABEL_26:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  v37 = swift_dynamicCastClass();
  if (!v37)
  {
    swift_unknownObjectRelease();
    v37 = MEMORY[0x24BEE4AF8];
  }
LABEL_13:
  swift_unknownObjectRelease();
  v52 = v77(a3, a5);
  v53 = v70;
  v54 = v71;
  v55 = specialized Collection.prefix(_:)(v52, v11, v71, v9, v70);
  v77 = v56;
  v58 = v57;
  v60 = v59;
  specialized Collection.dropFirst(_:)(v52, v11, v54, v9, v53);
  if ((v60 & 1) != 0)
  {
    v74 = v37;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v66 = swift_dynamicCastClass();
    v61 = v73;
    if (!v66)
    {
      swift_unknownObjectRelease();
      v66 = MEMORY[0x24BEE4AF8];
    }
    v67 = *(_QWORD *)(v66 + 16);
    swift_release();
    v62 = v72;
    if (__OFSUB__(v60 >> 1, v58))
    {
      __break(1u);
    }
    else if (v67 == (v60 >> 1) - v58)
    {
      v65 = swift_dynamicCastClass();
      v63 = v76;
      v37 = v74;
      if (!v65)
      {
        swift_unknownObjectRelease();
        v65 = MEMORY[0x24BEE4AF8];
      }
      goto LABEL_22;
    }
    swift_unknownObjectRelease();
    v63 = v76;
    v37 = v74;
  }
  else
  {
    swift_unknownObjectRetain();
    v62 = v72;
    v61 = v73;
    v63 = v76;
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v55, (uint64_t)v77, v58, v60);
  v65 = v64;
LABEL_22:
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v61);
  result = swift_unknownObjectRelease();
  v68 = v75;
  *v75 = v37;
  v68[1] = v65;
  return result;
}

uint64_t type metadata accessor for PINEPrepareMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PINEPrepareMessage);
}

uint64_t PINEPrepareMessage.wraparoundJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareMessage.verificationJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static PINEPrepareMessage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2) && specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPrepareMessage<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return PINEPrepareMessage.init<A>(from:parameter:)(a1, a2, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4, a6);
}

uint64_t PINEPrepareMessage.encodedLength.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(*v0 + 16);
  v2 = *(_QWORD *)(v0[1] + 16);
  result = v1 + v2;
  if (__OFADD__(v1, v2))
    __break(1u);
  return result;
}

uint64_t PINEPrepareMessage.encode<A>(into:)()
{
  Seed.encode<A>(into:)();
  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPrepareMessage<A>()
{
  return PINEPrepareMessage.encode<A>(into:)();
}

uint64_t destroy for PINEPrepareMessage()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for PINEPrepareMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PINEPrepareMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for PINEPrepareMessage(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEPrepareMessage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEPrepareMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void discreteFourierTransform<A, B, C>(input:size:output:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  uint64_t v75;
  void (*v76)(void);
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  void (*v91)(_BYTE *, uint64_t);
  _BYTE *v92;
  uint64_t v93;
  void (*v94)(char *, _QWORD);
  _BYTE *v95;
  uint64_t i;
  void (*v97)(_BYTE *, uint64_t);
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  _BYTE *v109;
  _BYTE *v110;
  void (*v111)(_BYTE *, uint64_t);
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE *v116;
  void (*v117)(_BYTE *, uint64_t, uint64_t);
  void (*v118)(_BYTE *, uint64_t);
  uint64_t v119;
  _BYTE *v120;
  void (*v121)(_BYTE *, uint64_t);
  uint64_t v122;
  void (*v123)(_BYTE *, uint64_t);
  void (*v124)(_BYTE *, uint64_t);
  uint64_t v125;
  void (*v126)(char *, _QWORD);
  void (*v127)(_BYTE *);
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  void (*v132)(char *, _QWORD);
  _BYTE *v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  void (*v138)(uint64_t, uint64_t);
  _BYTE *v139;
  _BYTE *v140;
  void (*v141)(_BYTE *, uint64_t);
  _BYTE *v142;
  uint64_t v143;
  void (*v144)(_BYTE *, uint64_t);
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  _BYTE *v149;
  _BYTE *v150;
  void (*v151)(_BYTE *, uint64_t);
  _BYTE *v152;
  uint64_t v153;
  _BYTE v154[4];
  int v155;
  int64_t v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  void (*v164)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  uint64_t AssociatedTypeWitness;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t AssociatedConformanceWitness;
  _BYTE *v178;
  uint64_t v179;
  void (*v180)(_BYTE *, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(_BYTE *, uint64_t);
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  uint64_t v189;
  void (*v190)(_BYTE *, uint64_t);
  _BYTE *v191;
  _BYTE *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  void (*v196)(_BYTE *, uint64_t);
  void (*v197)(_QWORD);
  _BYTE *v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  char v204[8];

  v203 = a3;
  v186 = a1;
  swift_getAssociatedTypeWitness();
  v182 = a10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v169 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v15);
  v168 = &v154[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v167 = &v154[-v20];
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v166 = &v154[-v23];
  v181 = a6;
  v189 = *(_QWORD *)(a6 - 8);
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v162 = &v154[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v161 = &v154[-v29];
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v188 = &v154[-v32];
  v34 = MEMORY[0x24BDAC7A8](v31, v33);
  v187 = &v154[-v35];
  v37 = MEMORY[0x24BDAC7A8](v34, v36);
  v159 = &v154[-v38];
  v40 = MEMORY[0x24BDAC7A8](v37, v39);
  v178 = &v154[-v41];
  MEMORY[0x24BDAC7A8](v40, v42);
  v192 = &v154[-v43];
  v183 = a7;
  v185 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(a7 + 8) + 8);
  v184 = a4;
  v176 = swift_getAssociatedTypeWitness();
  v175 = *(_QWORD *)(v176 - 8);
  v45 = MEMORY[0x24BDAC7A8](v176, v44);
  v174 = &v154[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = MEMORY[0x24BDAC7A8](v45, v47);
  v173 = &v154[-v49];
  v197 = *(void (**)(_QWORD))(a5 - 8);
  v51 = MEMORY[0x24BDAC7A8](v48, v50);
  v160 = &v154[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v54 = MEMORY[0x24BDAC7A8](v51, v53);
  v171 = &v154[-v55];
  MEMORY[0x24BDAC7A8](v54, v56);
  v201 = &v154[-v57];
  v193 = a8;
  v58 = *(_QWORD *)(a8 + 8);
  v195 = a5;
  v59 = swift_getAssociatedTypeWitness();
  v199 = *(_QWORD *)(v59 - 8);
  v61 = MEMORY[0x24BDAC7A8](v59, v60);
  v170 = &v154[-((v62 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v64 = MEMORY[0x24BDAC7A8](v61, v63);
  v198 = &v154[-v65];
  v67 = MEMORY[0x24BDAC7A8](v64, v66);
  v69 = &v154[-v68];
  MEMORY[0x24BDAC7A8](v67, v70);
  v73 = &v154[-v72];
  v74 = v71 - 1;
  if (__OFSUB__(v71, 1))
    goto LABEL_41;
  if (v71 < 1 || (v74 & v71) != 0)
    goto LABEL_42;
  v158 = v71;
  v75 = swift_checkMetadataState();
  v76 = *(void (**)(void))(AssociatedConformanceWitness + 48);
  v165 = v75;
  v76();
  v77 = MEMORY[0x24BD00400]();
  swift_bridgeObjectRelease();
  v78 = 1 << v77;
  if (v77 >= 0x40)
    v78 = 0;
  if (v77 > 0x40)
    v78 = 0;
  if (v78 <= v158)
    goto LABEL_43;
  if (dispatch thunk of Collection.count.getter() < v158)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v79 = v158;
  specialized static BitReversal.indicesFor(_:)(v158);
  v194 = v80;
  if (v74 >= *(_QWORD *)(v80 + 16))
  {
LABEL_45:
    __break(1u);
    return;
  }
  v191 = v69;
  v81 = 0;
  v200 = a9;
  v156 = __clz(__rbit64(v79));
  v180 = (void (*)(_BYTE *, uint64_t, uint64_t))*((_QWORD *)v197 + 2);
  v179 = v58;
  v202 = v59;
  v82 = v203;
  do
  {
    v83 = v201;
    v84 = v81;
    v85 = v195;
    v180(v201, v82, v195);
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    v196 = *(void (**)(_BYTE *, uint64_t))(v199 + 8);
    v196(v69, v59);
    v86 = v85;
    v87 = v84;
    v190 = (void (*)(_BYTE *, uint64_t))*((_QWORD *)v197 + 1);
    v190(v83, v86);
    v88 = *(_QWORD *)(v194 + 8 * v84 + 32);
    if (v88 >= dispatch thunk of Collection.count.getter())
    {
      v164 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v199 + 16);
      v164(v69, v73, v59);
      dispatch thunk of IteratorProtocol.next()();
      dispatch thunk of MutableCollection.subscript.setter();
    }
    else
    {
      v89 = v174;
      dispatch thunk of Collection.startIndex.getter();
      v90 = v173;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v91 = *(void (**)(_BYTE *, uint64_t))(v175 + 8);
      v92 = v89;
      v93 = v176;
      v91(v92, v176);
      v164 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v199 + 16);
      v164(v69, v73, v202);
      v94 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(_BYTE *))(v189 + 16))(v192);
      v94(v204, 0);
      dispatch thunk of MutableCollection.subscript.setter();
      v95 = v90;
      v59 = v202;
      v91(v95, v93);
    }
    v81 = v87 + 1;
    v196(v73, v59);
  }
  while (v158 != v81);
  swift_bridgeObjectRelease();
  v155 = 0;
  for (i = 1; ; i = v157)
  {
    if (i >= v156)
    {
      if ((i != v156) | v155 & 1)
        return;
      v155 = 1;
      v99 = v156;
    }
    else
    {
      v99 = i + 1;
    }
    v157 = v99;
    v100 = v182;
    v101 = v181;
    (*(void (**)(uint64_t, uint64_t))(v182 + 72))(v181, v182);
    static FieldElement.root(n:)(i, v101, v100, (uint64_t)v159);
    if ((unint64_t)i <= 0x3F)
    {
      if (i)
        break;
    }
LABEL_17:
    v97 = *(void (**)(_BYTE *, uint64_t))(v189 + 8);
    v98 = v181;
    v97(v159, v181);
    v97(v178, v98);
  }
  if (i == 63)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v176 = v158 / (1 << i);
  if (v176 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v102 = 0;
  v163 = 1 << i;
  v103 = (unint64_t)(1 << i) >> 1;
  v175 = *(_QWORD *)(AssociatedConformanceWitness + 80);
  v104 = *(_BYTE **)(v182 + 96);
  v174 = *(_BYTE **)(v182 + 88);
  v173 = v104;
  v194 = v103;
  while (1)
  {
    if (v102 == v103)
    {
      __break(1u);
      goto LABEL_39;
    }
    v114 = v171;
    v115 = v202;
    v116 = v170;
    v117 = v180;
    v118 = v196;
    if (v176)
      break;
LABEL_27:
    v183 = v102 + 1;
    v105 = v167;
    v106 = v181;
    v107 = v182;
    v108 = (void (*)(uint64_t, uint64_t))v174;
    ((void (*)(uint64_t, uint64_t))v174)(v181, v182);
    v109 = v168;
    v108(v106, v107);
    v110 = v166;
    ((void (*)(_BYTE *, _BYTE *))v175)(v105, v109);
    v111 = *(void (**)(_BYTE *, uint64_t))(v169 + 8);
    v112 = v109;
    v102 = v183;
    v113 = AssociatedTypeWitness;
    v111(v112, AssociatedTypeWitness);
    v111(v105, v113);
    ((void (*)(_BYTE *, uint64_t, uint64_t))v173)(v110, v106, v107);
    v103 = v194;
    if (v102 == v194)
      goto LABEL_17;
  }
  v119 = 0;
  v199 = *(_QWORD *)(v182 + 136);
  v183 = v102;
  while (1)
  {
    v117(v114, v203, v195);
    dispatch thunk of Collection.startIndex.getter();
    if ((unsigned __int128)(v163 * (__int128)v119) >> 64 != (v163 * v119) >> 63)
      break;
    if (__OFADD__(v163 * v119, v102))
      goto LABEL_36;
    v186 = v119 + 1;
    v120 = v114;
    v121 = v118;
    v122 = v195;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    v121(v116, v115);
    v123 = v190;
    v190(v120, v122);
    v124 = v123;
    v125 = v203;
    v126 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v127 = *(void (**)(_BYTE *))(v189 + 16);
    v128 = v181;
    v127(v192);
    v126(v204, 0);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v127)(v188, v178, v128);
    v117(v201, v125, v122);
    v129 = v160;
    v117(v160, v125, v122);
    v130 = v191;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    v124(v129, v122);
    v131 = v201;
    v132 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v133 = v161;
    v197 = (void (*)(_QWORD))v127;
    v127(v161);
    v132(v204, 0);
    v196(v130, v202);
    v124(v131, v122);
    v134 = v162;
    v135 = v188;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v127)(v162, v188, v128);
    v136 = v182;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v199)(v134, v128, v182);
    v137 = v167;
    v138 = (void (*)(uint64_t, uint64_t))v174;
    ((void (*)(uint64_t, uint64_t))v174)(v128, v136);
    v139 = v168;
    v138(v128, v136);
    v140 = v166;
    ((void (*)(_BYTE *, _BYTE *))v175)(v137, v139);
    v141 = *(void (**)(_BYTE *, uint64_t))(v169 + 8);
    v142 = v139;
    v143 = AssociatedTypeWitness;
    v141(v142, AssociatedTypeWitness);
    v141(v137, v143);
    ((void (*)(_BYTE *, uint64_t, uint64_t))v173)(v140, v128, v136);
    v144 = *(void (**)(_BYTE *, uint64_t))(v189 + 8);
    v185 = v144;
    v144(v133, v128);
    v144(v135, v128);
    v164(v191, v198, v202);
    v145 = v192;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v197)(v133, v192, v128);
    ((void (*)(_BYTE *, uint64_t, uint64_t))v199)(v133, v128, v136);
    v184 = *(_QWORD *)(v136 + 8);
    dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
    dispatch thunk of MutableCollection.subscript.setter();
    v146 = v201;
    v117 = v180;
    v180(v201, v203, v122);
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    v190(v146, v122);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v197)(v133, v145, v128);
    v147 = v133;
    v148 = v202;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v199)(v147, v128, v136);
    v149 = v187;
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v116 = v170;
    v115 = v148;
    v118 = v196;
    dispatch thunk of MutableCollection.subscript.setter();
    v150 = v149;
    v119 = v186;
    v151 = v185;
    v185(v150, v128);
    v152 = v145;
    v114 = v171;
    v153 = v128;
    v102 = v183;
    v151(v152, v153);
    v118(v198, v148);
    if (v176 == v119)
      goto LABEL_27;
  }
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedConformanceWitness;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v55 = a7;
  v56 = a8;
  v53 = a4;
  v54 = a5;
  v51 = a1;
  v52 = a3;
  v48 = a2;
  v50 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v44 = AssociatedTypeWitness;
  v14 = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14, v15);
  v47 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v21 = (char *)&v44 - v20;
  v45 = *(_QWORD *)(a6 - 8);
  v23 = MEMORY[0x24BDAC7A8](v19, v22);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v23, v26);
  v29 = (char *)&v44 - v28;
  MEMORY[0x24BDAC7A8](v27, v30);
  v32 = (char *)&v44 - v31;
  v57 = a2;
  v33 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v34 = lazy protocol witness table accessor for type Int and conformance Int();
  MEMORY[0x24BD00694](&v57, MEMORY[0x24BEE1768], v34, v14, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(a10 + 128))(v21, a6, a10);
  v35 = v45;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v25, v29, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(a10 + 136))(v25, a6, a10);
  v36 = swift_checkMetadataState();
  v37 = v47;
  (*(void (**)(uint64_t, uint64_t))(a10 + 88))(a6, a10);
  (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 112))(v37, v36);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(a10 + 96))(v21, a6, a10);
  v38 = *(void (**)(char *, uint64_t))(v35 + 8);
  v38(v29, a6);
  v39 = v52;
  v40 = v48;
  v41 = v54;
  v42 = v56;
  discreteFourierTransform<A, B, C>(input:size:output:)(v51, v48, v52, v53, v54, a6, v55, v56, v50, a10);
  inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(v40, (uint64_t)v32, v39, v41, a6, v42, a10);
  return ((uint64_t (*)(char *, uint64_t))v38)(v32, a6);
}

uint64_t inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t);
  char *v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  void (*v98)(char *, _QWORD);
  void (*v99)(char *);
  uint64_t v100;
  void (*v101)(char *, _QWORD);
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t);
  _QWORD v116[2];
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  char *v125;
  void (*v126)(char *, uint64_t, uint64_t);
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  void (*v132)(char *, uint64_t);
  void (*v133)(char *, char *, uint64_t);
  void (*v134)(char *, uint64_t, uint64_t);
  uint64_t v135;
  void (*v136)(char *, uint64_t, uint64_t);
  void (*v137)(char *, uint64_t);
  void (*v138)(char *, char *, uint64_t, uint64_t);
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t AssociatedConformanceWitness;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154[8];

  v144 = a2;
  v130 = a1;
  v135 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1, a2);
  v118 = (char *)v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v117 = (char *)v116 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v116[1] = (char *)v116 - v19;
  MEMORY[0x24BDAC7A8](v18, v20);
  v145 = (char *)v116 - v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v128 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v147 = (void (*)(char *, uint64_t))AssociatedTypeWitness;
  v146 = swift_getAssociatedTypeWitness();
  v151 = *(_QWORD *)(v146 - 8);
  v24 = MEMORY[0x24BDAC7A8](v146, v23);
  v127 = (char *)v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v150 = (char *)v116 - v28;
  MEMORY[0x24BDAC7A8](v27, v29);
  v142 = (char *)v116 - v30;
  v31 = *(_QWORD *)(a6 + 8);
  v152 = swift_getAssociatedTypeWitness();
  v123 = *(_QWORD *)(v152 - 8);
  v33 = MEMORY[0x24BDAC7A8](v152, v32);
  v148 = (char *)v116 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v33, v35);
  v141 = (char *)v116 - v37;
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v41 = (char *)v116 - v40;
  v42 = *(_QWORD *)(a4 - 8);
  v44 = MEMORY[0x24BDAC7A8](v39, v43);
  v46 = (char *)v116 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44, v47);
  v49 = (char *)v116 - v48;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v153 = a3;
  v51 = a3;
  v52 = v50;
  v50((char *)v116 - v48, v51, a4);
  v129 = v31;
  v53 = dispatch thunk of Collection.count.getter();
  v54 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  v149 = a4;
  result = v54(v49, a4);
  if (v53 < v130)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v125 = v46;
  v56 = v149;
  v126 = v52;
  v52(v49, v153, v149);
  v140 = v41;
  dispatch thunk of Collection.startIndex.getter();
  v54(v49, v56);
  v134 = (void (*)(char *, _QWORD))dispatch thunk of MutableCollection.subscript.modify();
  v139 = a6;
  v120 = v49;
  v57 = AssociatedConformanceWitness;
  v58 = swift_checkMetadataState();
  v59 = *(void (**)(uint64_t, uint64_t))(a7 + 88);
  v121 = v59;
  v60 = v150;
  v61 = v128;
  v59(v128, a7);
  v124 = (void (*)(char *, uint64_t))v54;
  v62 = v127;
  v59(v61, a7);
  v63 = v57;
  v138 = *(void (**)(char *, char *, uint64_t, uint64_t))(v57 + 80);
  v64 = v142;
  v122 = v58;
  v138(v60, v62, v58, v63);
  v65 = *(void (**)(char *, uint64_t))(v151 + 8);
  v137 = v65;
  v66 = v146;
  v65(v62, v146);
  v65(v60, v66);
  v136 = *(void (**)(char *, uint64_t, uint64_t))(a7 + 96);
  v136(v64, v61, a7);
  v134(v154, 0);
  v147 = *(void (**)(char *, uint64_t))(v123 + 8);
  v67 = v152;
  v147(v140, v152);
  v68 = v120;
  v69 = v153;
  v70 = v126;
  v126(v120, v153, v56);
  v71 = v125;
  v70(v125, v69, v56);
  v72 = v141;
  dispatch thunk of Collection.startIndex.getter();
  v73 = v71;
  v74 = v68;
  v75 = v124;
  v124(v73, v56);
  v116[0] = v130 / 2;
  dispatch thunk of Collection.index(_:offsetBy:)();
  v147(v72, v67);
  v75(v68, v56);
  v151 = dispatch thunk of MutableCollection.subscript.modify();
  v76 = v150;
  v77 = v128;
  v78 = v121;
  v121(v128, a7);
  v79 = v127;
  v78(v77, a7);
  v80 = v142;
  v81 = v76;
  ((void (*)(char *, char *))v138)(v76, v79);
  v82 = v146;
  v83 = v137;
  v137(v79, v146);
  v83(v81, v82);
  v84 = v77;
  v85 = (uint64_t (*)(char *, uint64_t))v147;
  v119 = a7;
  v136(v80, v84, a7);
  ((void (*)(char *, _QWORD))v151)(v154, 0);
  result = v85(v140, v152);
  v86 = v141;
  v87 = v126;
  if (v130 >= 2 && (v130 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    v134 = *(void (**)(char *, _QWORD))(v119 + 136);
    v151 = 1;
    while (1)
    {
      v88 = v74;
      v89 = v153;
      v90 = v74;
      v91 = v149;
      v87(v88, v153, v149);
      v92 = v87;
      v93 = v125;
      v92(v125, v89, v91);
      dispatch thunk of Collection.startIndex.getter();
      v94 = v124;
      v124(v93, v91);
      dispatch thunk of Collection.index(_:offsetBy:)();
      v147(v86, v152);
      v94(v90, v91);
      v92(v90, v89, v91);
      v92(v93, v89, v91);
      v95 = v148;
      dispatch thunk of Collection.startIndex.getter();
      result = ((uint64_t (*)(char *, uint64_t))v94)(v93, v91);
      if (__OFSUB__(v130, v151))
        break;
      ++v151;
      v96 = v149;
      dispatch thunk of Collection.index(_:offsetBy:)();
      v147(v95, v152);
      v94(v90, v96);
      v97 = v140;
      v98 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v99 = *(void (**)(char *))(v135 + 16);
      v100 = v128;
      v99(v145);
      v98(v154, 0);
      v133 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
      v133(v95, v97, v152);
      v101 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v102 = v117;
      v131 = (void (*)(char *, char *, uint64_t))v99;
      v99(v117);
      v101(v154, 0);
      v103 = v118;
      ((void (*)(char *, char *, uint64_t))v99)(v118, v102, v100);
      v104 = v119;
      ((void (*)(char *, uint64_t, uint64_t))v134)(v103, v100, v119);
      v105 = v121;
      v121(v100, v104);
      v106 = v127;
      v105(v100, v104);
      v107 = v142;
      v108 = v122;
      v138(v150, v106, v122, AssociatedConformanceWitness);
      v109 = v137;
      v137(v106, v146);
      v109(v150, v146);
      v136(v107, v100, v104);
      v132 = *(void (**)(char *, uint64_t))(v135 + 8);
      v132(v102, v100);
      dispatch thunk of MutableCollection.subscript.setter();
      v133(v148, v141, v152);
      v131(v102, v145, v100);
      v110 = v146;
      v111 = v150;
      ((void (*)(char *, uint64_t, uint64_t))v134)(v102, v100, v104);
      v105(v100, v104);
      v105(v100, v104);
      v112 = v142;
      v138(v111, v106, v108, AssociatedConformanceWitness);
      v113 = v137;
      v137(v106, v110);
      v113(v111, v110);
      v114 = v152;
      v136(v112, v100, v104);
      dispatch thunk of MutableCollection.subscript.setter();
      v132(v145, v100);
      v86 = v141;
      v115 = (uint64_t (*)(char *, uint64_t))v147;
      v147(v141, v114);
      result = v115(v140, v114);
      v87 = v126;
      v74 = v120;
      if (v116[0] == v151)
        return result;
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t Prio3InputShare.measurementShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3InputShare.proofShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3InputShare.jointRandBlind.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3InputShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((static Share.== infix(_:_:)(v2, v3, v5, v6) & 1) != 0
    && (static Share.== infix(_:_:)(v12, v11, v10, v9) & 1) != 0)
  {
    if (v4)
    {
      if (v7 && specialized static Array<A>.== infix(_:_:)(v4, v7))
        return 1;
    }
    else if (!v7)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t Prio3InputShare.init(measurementShare:proofShare:jointRandBlind:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_BYTE *)(a6 + 8) = a2 & 1;
  *(_QWORD *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 24) = a4 & 1;
  *(_QWORD *)(a6 + 32) = a5;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3InputShare<A, B>(uint64_t a1, uint64_t a2)
{
  return static Prio3InputShare.== infix(_:_:)(a1, a2);
}

uint64_t Prio3InputShareDecodableParameter.measurement.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Prio3InputShareDecodableParameter.proof.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Prio3InputShareDecodableParameter.jointRandBlindLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Prio3InputShareDecodableParameter.encodedLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = ShareDecodableParameter.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  result = ShareDecodableParameter.encodedLength.getter(v3, v4, AssociatedTypeWitness, AssociatedConformanceWitness);
  v10 = v8 + result;
  if (__OFADD__(v8, result))
  {
    __break(1u);
    goto LABEL_5;
  }
  result = v10 + v5;
  if (__OFADD__(v10, v5))
LABEL_5:
    __break(1u);
  return result;
}

void Prio3InputShareDecodableParameter.init(prio3:aggregatorID:)()
{
  type metadata accessor for Prio3();
}

uint64_t sub_249BF06C8(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t result;
  Swift::Bool v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, a1);
  v9 = VDAFProtocol.isLeaderAggregatorID(_:)(v2);
  if (v10)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
  v18 = v7;
  v12 = v9;
  if (!v9)
    goto LABEL_6;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v1, v6);
  v20 = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v1, v6);
  v14 = *(_QWORD *)(v3 + 8);
  v15 = v13 * v14;
  if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63)
  {
    __break(1u);
LABEL_6:
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    v19 = v16(v5, v4);
    v20 = 1;
    v15 = v16(v5, v4);
  }
  if (Prio3.isJointRandRequired.getter(a1))
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  else
    v17 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
  *(_QWORD *)v18 = v19;
  *(_BYTE *)(v18 + 8) = v20;
  *(_QWORD *)(v18 + 16) = v15;
  *(_BYTE *)(v18 + 24) = !v12;
  *(_QWORD *)(v18 + 32) = v17;
  return result;
}

uint64_t Prio3InputShare.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  if (*(unsigned __int8 *)(v8 + 8) != 255)
  {
    dispatch thunk of Collection.count.getter();
    type metadata accessor for Prio3InputShareDecodableParameter();
  }
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v9 = 0;
  v9[1] = 0;
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a5);
}

void type metadata accessor for Prio3InputShareDecodableParameter()
{
  JUMPOUT(0x24BD00B80);
}

void type metadata accessor for Prio3InputShare()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3InputShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v9 = v5;
  return Prio3InputShare.init<A>(from:parameter:)(a1, (uint64_t)v8, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a3);
}

uint64_t Prio3InputShare.encodedLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = Share.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  result = Share.encodedLength.getter(v3, v4, AssociatedTypeWitness, AssociatedConformanceWitness);
  v10 = v8 + result;
  if (__OFADD__(v8, result))
    goto LABEL_7;
  if (!v5)
  {
    result += v8;
    return result;
  }
  v11 = *(_QWORD *)(v5 + 16);
  result = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t Prio3InputShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  char v14;
  uint64_t v15;

  v8 = *(_QWORD *)v4;
  v9 = *(_BYTE *)(v4 + 8);
  v15 = *(_QWORD *)(v4 + 16);
  v14 = *(_BYTE *)(v4 + 24);
  v10 = *(_QWORD *)(v4 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Share.encode<A>(into:)(a1, v8, v9, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
  result = Share.encode<A>(into:)(a1, v15, v14, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
  if (v10)
    return Seed.encode<A>(into:)();
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3InputShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3InputShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t destroy for Prio3InputShare()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Prio3InputShare(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Prio3InputShare(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Prio3InputShare(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3InputShare(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3InputShare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t PINECircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  char v97;
  char *v98;
  char *v99;
  uint64_t v100;
  double v101;
  char *v102;
  Swift::String v103;
  char *v104;
  Swift::String v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  Swift::String v110;
  unint64_t v111;
  unint64_t v112;
  Swift::String v113;
  __int128 v114;
  uint64_t v115;
  Swift::String v117;
  char *v118;
  Swift::String v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char v124;
  uint64_t v125;
  char *v126;
  double v127;
  char v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t);
  double v133;
  Swift::String v134;
  char *v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  char *v141;
  char v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t);
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  double v158;
  uint64_t v159;
  char *v160;
  Swift::String v161;
  char *v162;
  Swift::String v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char *v169;
  char *v170;
  void (*v171)(char *, uint64_t);
  double v172;
  char v173;
  uint64_t v174;
  char *v175;
  double v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  BOOL v181;
  char *v182;
  char v183;
  char *v184;
  char *v185;
  uint64_t v186;
  double v187;
  char v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  void (*v197)(char *, uint64_t);
  char *v198;
  uint64_t v199;
  Swift::String v200;
  void (*v201)(uint64_t, uint64_t);
  char *v202;
  Swift::String v203;
  Swift::String v204;
  Swift::String v205;
  Swift::String v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(char *, char *, uint64_t);
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t AssociatedTypeWitness;
  char *v230;
  char *v231;
  char *AssociatedConformanceWitness;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  void (*v237)(char *, uint64_t);
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  void (*v242)(char *, uint64_t);
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;

  v214 = a7;
  v225 = a6;
  v215 = a5;
  v216 = a4;
  v249 = a3;
  v250 = a2;
  v251 = a1;
  v219 = a9;
  swift_getAssociatedTypeWitness();
  v247 = a12;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v240 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v244 = *(_QWORD *)(v240 + 8);
  v235 = *(_QWORD *)(v244 + 24);
  v234 = *(_QWORD *)(v235 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v16);
  v228 = (char *)&v209 - v18;
  v248 = a8;
  v19 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v17, v20);
  v22 = (char *)&v209 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = swift_checkMetadataState();
  v237 = *(void (**)(char *, uint64_t))(v246 - 8);
  v24 = MEMORY[0x24BDAC7A8](v246, v23);
  v220 = (char *)&v209 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v224 = (char *)&v209 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  v223 = (char *)&v209 - v31;
  v33 = MEMORY[0x24BDAC7A8](v30, v32);
  v222 = (char *)&v209 - v34;
  v36 = MEMORY[0x24BDAC7A8](v33, v35);
  v221 = (char *)&v209 - v37;
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v227 = (char *)&v209 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39, v41);
  v233 = (char *)&v209 - v43;
  v45 = MEMORY[0x24BDAC7A8](v42, v44);
  AssociatedConformanceWitness = (char *)&v209 - v46;
  v48 = MEMORY[0x24BDAC7A8](v45, v47);
  v226 = (char *)&v209 - v49;
  v51 = MEMORY[0x24BDAC7A8](v48, v50);
  v236 = (char *)&v209 - v52;
  v54 = MEMORY[0x24BDAC7A8](v51, v53);
  v231 = (char *)&v209 - v55;
  v57 = MEMORY[0x24BDAC7A8](v54, v56);
  v230 = (char *)&v209 - v58;
  v60 = MEMORY[0x24BDAC7A8](v57, v59);
  v238 = (char *)&v209 - v61;
  v63 = MEMORY[0x24BDAC7A8](v60, v62);
  v239 = (char *)&v209 - v64;
  v66 = MEMORY[0x24BDAC7A8](v63, v65);
  v241 = (uint64_t)&v209 - v67;
  MEMORY[0x24BDAC7A8](v66, v68);
  v245 = (char *)&v209 - v69;
  v218 = a13;
  v217 = a11;
  v70 = swift_getAssociatedTypeWitness();
  v71 = *(_QWORD *)(v70 - 8);
  v73 = MEMORY[0x24BDAC7A8](v70, v72);
  v75 = (char *)&v209 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v73, v76);
  v78 = (char *)&v209 - v77;
  v243 = a14;
  dispatch thunk of IteratorProtocol.next()();
  v79 = dispatch thunk of static Comparable.> infix(_:_:)();
  v80 = v78;
  v81 = *(void (**)(char *, uint64_t))(v71 + 8);
  v81(v80, v70);
  if ((v79 & 1) == 0)
  {
    *(_QWORD *)&v253 = 0;
    *((_QWORD *)&v253 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v103._countAndFlagsBits = 0x6F426D726F4E326CLL;
    v103._object = (void *)0xEC0000003D646E75;
    String.append(_:)(v103);
    v104 = v251;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v105._object = (void *)0x8000000249C30F50;
    v105._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v105);
    v106 = v253;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)v107 = v106;
    *(_BYTE *)(v107 + 16) = 1;
    swift_willThrow();
    v108 = v104;
    return ((uint64_t (*)(char *, uint64_t))v81)(v108, v70);
  }
  if (v250 > 0x7F)
  {
    v109 = v250;
    *(_QWORD *)&v253 = 0;
    *((_QWORD *)&v253 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v253 = 0xD000000000000013;
    *((_QWORD *)&v253 + 1) = 0x8000000249C30F70;
    v252 = v109;
    v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v110);
    swift_bridgeObjectRelease();
    v111 = 0xD000000000000014;
    v112 = 0x8000000249C30F90;
LABEL_14:
    String.append(_:)(*(Swift::String *)&v111);
    v114 = v253;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)v115 = v114;
    *(_BYTE *)(v115 + 16) = 1;
    swift_willThrow();
    goto LABEL_15;
  }
  v82 = v249;
  if (v249 < 1)
  {
    *(_QWORD *)&v253 = 0;
    *((_QWORD *)&v253 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v253 = 0xD000000000000012;
    *((_QWORD *)&v253 + 1) = 0x8000000249C30FB0;
    v252 = v82;
    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v113);
    swift_bridgeObjectRelease();
    v112 = 0x8000000249C30F50;
    v111 = 0xD000000000000011;
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v75, v251, v70);
  v84 = v247;
  v83 = v248;
  v85 = v242;
  (*(void (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v247 + 144))(v75, v250, v70, v243, v248, v247);
  if (v85)
  {
LABEL_15:
    v108 = v251;
    return ((uint64_t (*)(char *, uint64_t))v81)(v108, v70);
  }
  v213 = 0;
  (*(void (**)(uint64_t, uint64_t))(v84 + 112))(v83, v84);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v83);
  *(_QWORD *)&v253 = 1;
  v86 = lazy protocol witness table accessor for type Int and conformance Int();
  v87 = v239;
  v88 = v246;
  v89 = v244;
  MEMORY[0x24BD00694](&v253, MEMORY[0x24BEE1768], v86, v246, v244);
  v90 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  if (v90 >= 0)
    v91 = v90;
  else
    v91 = v90 + 1;
  *(_QWORD *)&v253 = v91 >> 1;
  v92 = v241;
  v211 = v86;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
  v93 = v237;
  v94 = (void (*)(char *, uint64_t))*((_QWORD *)v237 + 1);
  v95 = v87;
  v96 = v88;
  v94(v95, v88);
  v212 = *(_QWORD *)(*(_QWORD *)(v89 + 32) + 8);
  v97 = dispatch thunk of static Comparable.< infix(_:_:)();
  v94((char *)v92, v88);
  if ((v97 & 1) == 0)
  {
    *(_QWORD *)&v253 = 0;
    *((_QWORD *)&v253 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(74);
    v117._countAndFlagsBits = 0x6F426D726F4E326CLL;
    v117._object = (void *)0xEC0000003D646E75;
    String.append(_:)(v117);
    v118 = v251;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v119._countAndFlagsBits = 0xD00000000000003ALL;
    v119._object = (void *)0x8000000249C30FD0;
    String.append(_:)(v119);
    v120 = v245;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v121 = v253;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)v122 = v121;
    *(_BYTE *)(v122 + 16) = 1;
    swift_willThrow();
    v81(v118, v70);
    v123 = v120;
    return ((uint64_t (*)(char *, uint64_t))v94)(v123, v96);
  }
  v242 = v94;
  v98 = v245;
  dispatch thunk of static Numeric.* infix(_:_:)();
  v99 = v230;
  v210 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v93 + 2);
  v210(v230, v98, v88);
  v100 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v237 = v81;
  if (v100 < 65)
  {
    v124 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v125 = dispatch thunk of BinaryInteger._lowWord.getter();
    v242(v99, v88);
    if ((v124 & 1) != 0)
      v101 = (double)v125;
    else
      v101 = (double)(unint64_t)v125;
    v81 = v237;
    v102 = v245;
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v242(v99, v88);
    v101 = *(double *)&v253;
    v102 = v245;
  }
  v126 = v231;
  static FieldElement.modulus.getter();
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    v128 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v129 = dispatch thunk of BinaryInteger._lowWord.getter();
    v242(v126, v96);
    v127 = (double)v129;
    if ((v128 & 1) == 0)
      v127 = (double)(unint64_t)v129;
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v242(v126, v88);
    v127 = *(double *)&v253;
  }
  v130 = AssociatedConformanceWitness;
  if (v101 >= v127 / a10)
  {
    *(_QWORD *)&v253 = 0;
    *((_QWORD *)&v253 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v134._countAndFlagsBits = 0xD000000000000015;
    v134._object = (void *)0x8000000249C31010;
    String.append(_:)(v134);
    v135 = v251;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v136._countAndFlagsBits = 0x3D6168706C61202CLL;
    v136._object = (void *)0xE800000000000000;
    String.append(_:)(v136);
    Double.write<A>(to:)();
    v137._countAndFlagsBits = 0xD00000000000001BLL;
    v137._object = (void *)0x8000000249C31030;
    String.append(_:)(v137);
    v138 = v241;
    static FieldElement.modulus.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v94 = v242;
    v242((char *)v138, v96);
    v139 = v253;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)v140 = v139;
    *(_BYTE *)(v140 + 16) = 1;
    swift_willThrow();
    v81(v135, v70);
    v141 = v238;
LABEL_38:
    v94(v141, v96);
    v123 = v245;
    return ((uint64_t (*)(char *, uint64_t))v94)(v123, v96);
  }
  v210(AssociatedConformanceWitness, v102, v96);
  v131 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v132 = v242;
  if (v131 < 65)
  {
    v142 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v143 = dispatch thunk of BinaryInteger._lowWord.getter();
    v144 = v130;
    v145 = v143;
    v132(v144, v96);
    if ((v142 & 1) != 0)
      v133 = (double)v145;
    else
      v133 = (double)(unint64_t)v145;
    v81 = v237;
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v132(v130, v96);
    v133 = *(double *)&v253;
  }
  *(double *)&v253 = ceil(v133 * a10) + 1.0;
  v146 = lazy protocol witness table accessor for type Double and conformance Double();
  v147 = v226;
  v231 = (char *)v146;
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  FixedWidthInteger.nextPowerOfTwo.getter(v96, v240, (uint64_t)v236);
  v132(v147, v96);
  static FieldElement.modulus.getter();
  v148 = v234;
  v149 = AssociatedTypeWitness;
  AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
  v150 = v228;
  MEMORY[0x24BD00928](&unk_249C2A750, 768, v149, AssociatedConformanceWitness);
  v151 = v227;
  MEMORY[0x24BD00904](v150, v96, v148);
  v152 = (uint64_t)v233;
  v230 = *(char **)(v235 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v153 = (void (*)(uint64_t, uint64_t))v242;
  v242(v151, v246);
  v153(v152, v246);
  MEMORY[0x24BD00928](&unk_249C2B1A0, 768, v149, AssociatedConformanceWitness);
  MEMORY[0x24BD00904](v150, v246, v234);
  v154 = v241;
  v155 = v239;
  FixedWidthInteger.divideAndRoundUp(_:)(v152, v246, v240, v241);
  v153(v152, v246);
  v96 = v246;
  v153((uint64_t)v155, v246);
  v156 = v238;
  LOBYTE(v149) = dispatch thunk of static Comparable.< infix(_:_:)();
  v153(v154, v96);
  if ((v149 & 1) == 0)
  {
    *(_QWORD *)&v253 = 0;
    *((_QWORD *)&v253 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v161._countAndFlagsBits = 0x6F426D726F4E326CLL;
    v161._object = (void *)0xEC0000003D646E75;
    String.append(_:)(v161);
    v162 = v251;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v163._countAndFlagsBits = 0xD000000000000029;
    v163._object = (void *)0x8000000249C31050;
    String.append(_:)(v163);
    static FieldElement.modulus.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v164 = v154;
    v94 = v242;
    v242((char *)v164, v96);
    v165 = v253;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)v166 = v165;
    *(_BYTE *)(v166 + 16) = 1;
    swift_willThrow();
    v81(v162, v70);
    v94(v236, v96);
    v141 = v156;
    goto LABEL_38;
  }
  v157 = v221;
  static FieldElement.modulus.getter();
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    v167 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v168 = dispatch thunk of BinaryInteger._lowWord.getter();
    v242(v157, v96);
    v159 = (uint64_t)v236;
    v160 = v223;
    if ((v167 & 1) != 0)
      v158 = (double)v168;
    else
      v158 = (double)(unint64_t)v168;
    v81 = v237;
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v242(v157, v96);
    v158 = *(double *)&v253;
    v159 = (uint64_t)v236;
    v160 = v223;
  }
  v169 = v222;
  v210(v222, (char *)v159, v96);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    v173 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v174 = dispatch thunk of BinaryInteger._lowWord.getter();
    v175 = v169;
    v171 = v242;
    v242(v175, v96);
    if ((v173 & 1) != 0)
      v172 = (double)v174;
    else
      v172 = (double)(unint64_t)v174;
    v81 = v237;
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v170 = v169;
    v171 = v242;
    v242(v170, v96);
    v172 = *(double *)&v253;
  }
  v210(v160, v236, v96);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    v177 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v178 = dispatch thunk of BinaryInteger._lowWord.getter();
    v171(v160, v96);
    if ((v177 & 1) != 0)
      v176 = (double)v178;
    else
      v176 = (double)(unint64_t)v178;
    v81 = v237;
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v171(v160, v96);
    v176 = *(double *)&v253;
  }
  if (v176 >= v158 / 81.0 / v172)
    goto LABEL_72;
  static FieldElement.modulus.getter();
  v179 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v180 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v179 & 1) != 0)
    v181 = v180 <= 64;
  else
    v181 = v180 <= 63;
  v154 = v241;
  if (!v181)
  {
    *(_QWORD *)&v253 = 1000;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v182 = v224;
    v183 = dispatch thunk of static Comparable.< infix(_:_:)();
    v171((char *)v154, v96);
    v171(v182, v96);
    v184 = v220;
    if ((v183 & 1) == 0)
      goto LABEL_72;
LABEL_64:
    static FieldElement.modulus.getter();
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
    {
      v188 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v189 = dispatch thunk of BinaryInteger._lowWord.getter();
      v171(v184, v96);
      if ((v188 & 1) != 0)
        v187 = (double)v189;
      else
        v187 = (double)(unint64_t)v189;
      v81 = v237;
    }
    else
    {
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      static BinaryFloatingPoint<>._convert<A>(from:)();
      v171(v184, v96);
      v187 = *(double *)&v253;
    }
    if (v187 / 3.0 > (double)v225)
    {
      v244 = FixedWidthInteger.bitLength.getter();
      *(_QWORD *)(v219 + 96) = v244;
      v190 = v228;
      v191 = AssociatedTypeWitness;
      v192 = AssociatedConformanceWitness;
      MEMORY[0x24BD00928](&unk_249C2A750, 768, AssociatedTypeWitness, AssociatedConformanceWitness);
      v193 = v233;
      v194 = v234;
      MEMORY[0x24BD00904](v190, v96, v234);
      v195 = v239;
      dispatch thunk of static Numeric.* infix(_:_:)();
      v242(v193, v246);
      MEMORY[0x24BD00928](&unk_249C28BC0, 512, v191, v192);
      MEMORY[0x24BD00904](v190, v246, v194);
      v196 = v241;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v197 = v242;
      v242(v193, v246);
      v198 = v195;
      v199 = v246;
      v197(v198, v246);
      FixedWidthInteger.bitLength.getter();
      v197((char *)v196, v199);
      *(_QWORD *)&v253 = v248;
      *((_QWORD *)&v253 + 1) = v217;
      v254 = v247;
      v255 = v218;
      *(_QWORD *)&v256 = v243;
      type metadata accessor for PINECircuit();
    }
    goto LABEL_72;
  }
  v185 = v224;
  v186 = dispatch thunk of BinaryInteger._lowWord.getter();
  v171(v185, v96);
  v184 = v220;
  if (v186 > 1000)
    goto LABEL_64;
LABEL_72:
  *(_QWORD *)&v253 = 0;
  *((_QWORD *)&v253 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(94);
  v200._countAndFlagsBits = 0x426D726F4E326C28;
  v200._object = (void *)0xED00003D646E756FLL;
  String.append(_:)(v200);
  v201 = (void (*)(uint64_t, uint64_t))v171;
  v202 = v251;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v203._countAndFlagsBits = 0x3D6168706C61202CLL;
  v203._object = (void *)0xE800000000000000;
  String.append(_:)(v203);
  Double.write<A>(to:)();
  v204._countAndFlagsBits = 0xD000000000000017;
  v204._object = (void *)0x8000000249C31080;
  String.append(_:)(v204);
  v252 = v225;
  v205._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v205);
  swift_bridgeObjectRelease();
  v206._countAndFlagsBits = 0xD00000000000002ALL;
  v206._object = (void *)0x8000000249C310A0;
  String.append(_:)(v206);
  static FieldElement.modulus.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v201(v154, v96);
  v207 = v253;
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_OWORD *)v208 = v207;
  *(_BYTE *)(v208 + 16) = 1;
  swift_willThrow();
  v81(v202, v70);
  v201((uint64_t)v236, v96);
  v201((uint64_t)v238, v96);
  return ((uint64_t (*)(char *, uint64_t))v201)(v245, v96);
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

void type metadata accessor for PINECircuit()
{
  JUMPOUT(0x24BD00B80);
}

void static PINECircuit.identifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t PINECircuit.jointRandLength.getter()
{
  return 3;
}

uint64_t PINECircuit.truncate(measurement:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(v2 + 88);
  v4 = *(_QWORD *)(v2 + 72);
  if (__OFADD__(v3, v4))
  {
    __break(1u);
  }
  else if (MEMORY[0x24BD00400](result, *(_QWORD *)(a2 + 16)) == v3 + v4)
  {
    v5 = type metadata accessor for Array();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
    MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v5);
    lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>();
    MutableCollection.subscript.getter();
    v6 = type metadata accessor for ArraySlice();
    MEMORY[0x24BD00BD4](MEMORY[0x24BEE2180], v6);
    return Array.init<A>(_:)();
  }
  else
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v11 = 0xD00000000000001BLL;
    *((_QWORD *)&v11 + 1) = 0x8000000249C307C0;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 540877088;
    v8._object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)v10 = v11;
    *(_BYTE *)(v10 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

uint64_t PINECircuit.outputLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t PINECircuit.wraparoundDotProducts<A>(_:random:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(v6 + *(int *)(a6 + 96));
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v26 = 0;
    v27 = v7;
    v9 = MEMORY[0x24BDAC7A8](result, a2);
    v19[2] = *(_QWORD *)(v10 + 24);
    v20 = *(_OWORD *)(v10 + 40);
    v21 = v9;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    v16 = *(_QWORD *)(a6 + 16);
    v17 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:), (uint64_t)v19, v15, v16, MEMORY[0x24BEE4078], v17, MEMORY[0x24BEE40A8], v18);
  }
  return result;
}

uint64_t PINECircuit.decode<A>(data:numOfMeasurements:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(a1, a3, a4, a5, a6);
}

uint64_t PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  Swift::Int *v3;
  Swift::Int *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  Swift::Int *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(_QWORD, _QWORD);
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  void (*v84)(_QWORD, _QWORD);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  void (*v89)(char *, uint64_t);
  void (*v90)(uint64_t, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  Swift::String v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  Swift::String v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  void (*v116)(char *, uint64_t);
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unsigned int (*v127)(char *, uint64_t, void (*)(_QWORD, _QWORD));
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  Swift::Int *v135;
  uint64_t AssociatedConformanceWitness;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  Swift::Int *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;

  v4 = v3;
  v128 = a1;
  v7 = a3[4];
  v8 = a3[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v124 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v137 = AssociatedTypeWitness;
  v141 = swift_getAssociatedTypeWitness();
  v139 = *(_QWORD *)(v141 - 8);
  v11 = MEMORY[0x24BDAC7A8](v141, v10);
  v118 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v119 = (char *)&v117 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  v133 = (char *)&v117 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v138 = (char *)&v117 - v21;
  MEMORY[0x24BDAC7A8](v20, v22);
  v140 = (char *)&v117 - v23;
  v132 = a3[5];
  v24 = *(_QWORD *)(v132 + 8);
  v143 = a3;
  v25 = (_QWORD *)a3[3];
  v26 = swift_getAssociatedTypeWitness();
  v126 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26, v26);
  v134 = (char *)&v117 - v27;
  v149 = v28;
  v29 = type metadata accessor for Optional();
  v31 = MEMORY[0x24BDAC7A8](v29, v30);
  v142 = (char *)&v117 - v32;
  v121 = *(v25 - 1);
  MEMORY[0x24BDAC7A8](v31, v33);
  v122 = (char *)&v117 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = v24;
  v146 = (_QWORD *)swift_getAssociatedTypeWitness();
  v120 = *(v146 - 1);
  v36 = MEMORY[0x24BDAC7A8](v146, v35);
  v145 = (char *)&v117 - v37;
  v144 = *(_QWORD *)(v8 - 8);
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v41 = (char *)&v117 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x24BDAC7A8](v39, v42);
  v45 = (char *)&v117 - v44;
  v47 = MEMORY[0x24BDAC7A8](v43, v46);
  v49 = (char *)&v117 - v48;
  MEMORY[0x24BDAC7A8](v47, v50);
  v147 = (uint64_t)&v117 - v51;
  v52 = *v3;
  v53 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v52);
  v127 = (unsigned int (*)(char *, uint64_t, void (*)(_QWORD, _QWORD)))v25;
  v54 = dispatch thunk of Collection.count.getter();
  v55 = v4;
  v56 = v4[11];
  if (v54 != v56)
  {
    v150 = 0;
    v151 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v150 = 0xD00000000000001DLL;
    v151 = 0x8000000249C310D0;
    v152 = dispatch thunk of Collection.count.getter();
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 0x746365707865202CLL;
    v63._object = (void *)0xEB000000003D6465;
    String.append(_:)(v63);
    v152 = v56;
    v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65 = v150;
    v66 = v151;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v67 = v65;
    *(_QWORD *)(v67 + 8) = v66;
    *(_BYTE *)(v67 + 16) = 1;
    return swift_willThrow();
  }
  v129 = v53;
  v117 = v49;
  v130 = v41;
  v135 = v55;
  v132 = a2;
  v57 = v124;
  v131 = *(_QWORD *)(v124 + 8);
  dispatch thunk of IteratorProtocol.next()();
  (*(void (**)(char *, uint64_t, unsigned int (*)(char *, uint64_t, void (*)(_QWORD, _QWORD))))(v121 + 16))(v122, v128, v127);
  dispatch thunk of Sequence.makeIterator()();
  v58 = swift_getAssociatedConformanceWitness();
  v59 = v142;
  v128 = v58;
  dispatch thunk of IteratorProtocol.next()();
  v60 = v126;
  v127 = *(unsigned int (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v126 + 48);
  if (v127(v59, 1, (void (*)(_QWORD, _QWORD))v149) != 1)
  {
    v126 = *(_QWORD *)(v60 + 32);
    v61 = v135;
    v69 = v144;
    v70 = v117;
    v125 = v45;
    while (1)
    {
      v71 = v134;
      v72 = (void (*)(_QWORD, _QWORD))v149;
      ((void (*)(char *, char *, Swift::Int *))v126)(v134, v59, v149);
      v73 = v148;
      (*(void (**)(char *, Swift::Int, void (*)(_QWORD, _QWORD), _QWORD, uint64_t, uint64_t))(v57 + 144))(v71, v61[10], v72, v143[6], v8, v57);
      if (v73)
        break;
      v74 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      v74(v45, v70, v8);
      Array.append(_:)();
      v75 = v130;
      v74(v130, v70, v8);
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 136))(v75, v8, v57);
      v76 = swift_checkMetadataState();
      v148 = 0;
      v77 = *(void (**)(uint64_t, uint64_t))(v57 + 88);
      v78 = v138;
      v77(v8, v57);
      v79 = v57;
      v80 = v133;
      v77(v8, v79);
      v81 = v140;
      (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 80))(v78, v80, v76);
      v82 = *(void (**)(char *, uint64_t))(v139 + 8);
      v83 = v80;
      v57 = v79;
      v84 = (void (*)(_QWORD, _QWORD))v149;
      v45 = v125;
      v85 = v141;
      v82(v83, v141);
      v86 = v78;
      v59 = v142;
      v87 = v85;
      v61 = v135;
      v82(v86, v87);
      v88 = v81;
      v69 = v144;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 96))(v88, v8, v57);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v89 = *(void (**)(char *, uint64_t))(v69 + 8);
      v89(v45, v8);
      v89(v70, v8);
      dispatch thunk of IteratorProtocol.next()();
      if (v127(v59, 1, v84) == 1)
        goto LABEL_8;
    }
    (*(void (**)(char *, _QWORD *))(v120 + 8))(v145, v146);
    v113 = *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8);
    v114 = v147;
    return v113(v114, v8);
  }
  v61 = v135;
LABEL_8:
  (*(void (**)(char *, _QWORD *))(v120 + 8))(v145, v146);
  v90 = *(void (**)(uint64_t, uint64_t))(v57 + 112);
  v91 = v140;
  v90(v8, v57);
  v92 = (uint64_t)v138;
  v149 = (Swift::Int *)((char *)v61 + *((int *)v143 + 22));
  v146 = v90;
  v90(v8, v57);
  v93 = v141;
  v145 = *(char **)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v94 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v95 = (uint64_t)v91;
  v96 = v139;
  v97 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
  v97(v92, v93);
  v97(v95, v93);
  if ((v94 & 1) == 0)
  {
    v150 = 0;
    v151 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v106._countAndFlagsBits = 0x2064657261757173;
    v106._object = (void *)0xED00003D6D726F6ELL;
    String.append(_:)(v106);
    v108 = (void (*)(uint64_t, uint64_t))v146;
    v107 = v147;
    ((void (*)(uint64_t, uint64_t))v146)(v8, v57);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v97(v95, v93);
    v109._countAndFlagsBits = 0x6B63656863203E20;
    v109._object = (void *)0xEF3D646E756F6220;
    String.append(_:)(v109);
    v108(v8, v57);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v97(v95, v93);
    v110 = v150;
    v111 = v151;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v112 = v110;
    *(_QWORD *)(v112 + 8) = v111;
    *(_BYTE *)(v112 + 16) = 1;
    swift_willThrow();
    v113 = *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8);
    v114 = v107;
    return v113(v114, v8);
  }
  v146 = v97;
  dispatch thunk of IteratorProtocol.next()();
  static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v95, v92, v147, (uint64_t)v45, (uint64_t)v149, v8, v98, (_QWORD *)v57);
  v149 = *(Swift::Int **)(v144 + 8);
  ((void (*)(char *, uint64_t))v149)(v45, v8);
  v99 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 32);
  v100 = (uint64_t)v119;
  v99(v119, v95, v93);
  v101 = (uint64_t)v118;
  v99(v118, v92, v93);
  v102 = v135[12];
  v103 = v132;
  v104 = v148;
  static FieldElement.encode(_:into:with:)(v100, v132, v102, v8, v57);
  if (v104)
  {
    v105 = (void (*)(uint64_t, uint64_t))v146;
    ((void (*)(uint64_t, uint64_t))v146)(v101, v93);
    v105(v100, v93);
    return ((uint64_t (*)(uint64_t, uint64_t))v149)(v147, v8);
  }
  else
  {
    v115 = (uint64_t (*)(uint64_t, uint64_t))v149;
    static FieldElement.encode(_:into:with:)(v101, v103, v102, v8, v57);
    v116 = (void (*)(char *, uint64_t))v146;
    ((void (*)(uint64_t, uint64_t))v146)(v101, v93);
    v116(v119, v93);
    return v115(v147, v8);
  }
}

uint64_t PINECircuit.appendWraparoundCheck<A>(into:random:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Bool IsNativeType;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t AssociatedConformanceWitness;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  void (*v90)(uint64_t, uint64_t);
  int v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;

  v92 = a2;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *((_QWORD *)v8 + 4);
  v102 = v8;
  v10 = *((_QWORD *)v8 + 2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v99 = (_QWORD *)v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v84 = AssociatedTypeWitness;
  v97 = swift_getAssociatedTypeWitness();
  v86 = *(_QWORD *)(v97 - 8);
  v13 = MEMORY[0x24BDAC7A8](v97, v12);
  v85 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v95 = (uint64_t)&v74 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v21 = (char *)&v74 - v20;
  v98 = *(_QWORD *)(v10 - 8);
  v23 = MEMORY[0x24BDAC7A8](v19, v22);
  v94 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23, v25);
  v96 = (char *)&v74 - v27;
  v74 = v28;
  result = MEMORY[0x24BDAC7A8](v26, v29);
  v32 = (char *)&v74 - v31;
  v101 = v3;
  if ((*(_QWORD *)(v3 + 88) & 0x8000000000000000) != 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  v75 = Array.subscript.getter();
  v36 = PINECircuit.wraparoundDotProducts<A>(_:random:)(v75, v33, v34, v35, v92, (uint64_t)v102);
  v37 = swift_bridgeObjectRetain();
  if (MEMORY[0x24BD00424](v37, v10))
  {
    v82 = a1;
    v38 = 0;
    v39 = 0;
    v79 = v101 + v102[26];
    v78 = v102[23];
    v81 = v5;
    v80 = v7;
    v77 = v36;
    v93 = v21;
    v76 = v32;
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v98 + 16))(v32, v36+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(_QWORD *)(v98 + 72) * v38, v10);
        v41 = v99;
        v42 = v38 + 1;
        if (__OFADD__(v38, 1))
          goto LABEL_16;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        v41 = v99;
        if (v74 != 8)
          goto LABEL_25;
        v103 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v98 + 16))(v32, &v103, v10);
        swift_unknownObjectRelease();
        v42 = v38 + 1;
        if (__OFADD__(v38, 1))
        {
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      v87 = v42;
      v88 = v38;
      v92 = v39;
      v43 = v98;
      v44 = (uint64_t)v96;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v96, v32, v10);
      v45 = (uint64_t)v94;
      v46 = v101;
      v47 = v102;
      PINECircuit.wraparoundCheckLowerBound.getter((uint64_t)v102, v48);
      v49 = v95;
      v50 = v85;
      v91 = static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v95, v85, v44, v45, v79, v10, v51, v41);
      v90 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v90(v45, v10);
      v52 = v86;
      v53 = v50;
      v54 = v97;
      v89 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
      v89(v53, v97);
      v55 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 32);
      v56 = (uint64_t)v93;
      v57 = v80;
      v58 = v81;
      v55(v93, v49, v54);
      (*(void (**)(char *, uint64_t, int *))(v58 + 16))(v57, v46, v47);
      if ((v91 & 1) != 0)
      {
        v59 = *(_QWORD *)&v57[v102[25]];
        (*(void (**)(char *))(v58 + 8))(v57);
        v60 = v92;
        v61 = v92 < v59;
      }
      else
      {
        (*(void (**)(char *, int *))(v58 + 8))(v57, v102);
        v61 = 0;
        v60 = v92;
      }
      v62 = v100;
      v63 = (uint64_t)v99;
      static FieldElement.encode(_:into:with:)(v56, v82, *(_QWORD *)(v101 + v78), v10, (uint64_t)v99);
      v100 = v62;
      if (v62)
      {
        v36 = v77;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v89(v56, v97);
        v90((uint64_t)v96, v10);
        swift_bridgeObjectRelease();
        return v36;
      }
      v103 = v61;
      v64 = v97;
      v65 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
      v66 = lazy protocol witness table accessor for type Int and conformance Int();
      v67 = v10;
      v68 = v95;
      MEMORY[0x24BD00694](&v103, MEMORY[0x24BEE1768], v66, v64, v65);
      v69 = v68;
      v10 = v67;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 128))(v69, v67, v63);
      type metadata accessor for Array();
      Array.append(_:)();
      v89((uint64_t)v93, v64);
      result = ((uint64_t (*)(char *, uint64_t))v90)(v96, v67);
      v70 = __OFADD__(v60, v61);
      v39 = v60 + v61;
      if (v70)
        break;
      v36 = v77;
      v71 = MEMORY[0x24BD00424](v77, v67);
      v38 = v88 + 1;
      v32 = v76;
      if (v87 == v71)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  v39 = 0;
LABEL_19:
  if (v39 != *(_QWORD *)(v101 + v102[25]))
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    v72 = swift_allocError();
    *(_QWORD *)v73 = 0xD000000000000023;
    *(_QWORD *)(v73 + 8) = 0x8000000249C310F0;
    *(_BYTE *)(v73 + 16) = 4;
    v100 = v72;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return v36;
}

uint64_t PINECircuit.encodedMeasurementLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

__n128 PINECircuit.gadget.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t PINECircuit.gadgetParameters.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_249C29130;
  v4 = type metadata accessor for MultiplicationGadget(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v3);
  v5 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v4);
  v7 = type metadata accessor for ParallelSum(0, v4, v5, v6);
  v8 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for ParallelSum<A>, v7);
  Gadget.parameters.getter(v7, v8, (uint64_t *)(v2 + 32));
  return v2;
}

double PINECircuit.alpha.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t PINECircuit.chunkLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t PINECircuit.bitCheckLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t PINECircuit.fractionalBitCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t PINECircuit.measurementLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t PINECircuit.normBoundBitCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t PINECircuit.normCheckBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t PINECircuit.wraparoundBoundBitCount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 92));
}

uint64_t PINECircuit.wraparoundCheckCount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 96));
}

uint64_t PINECircuit.wraparoundCheckSuccessCount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 100));
}

uint64_t PINECircuit.wraparoundCheckUpperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 104));
}

uint64_t PINECircuit.wraparoundCheckLowerBound.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v4, v7);
  v10 = (char *)&v13 - v9;
  v11 = *(_QWORD *)(v8 + 32);
  (*(void (**)(uint64_t, uint64_t))(v11 + 72))(v2, v11);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 136))(v6, v2, v11);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t PINECircuit.encodedVectorAndNormCheckLength.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 108));
}

void PINECircuit.encode(measurement:)()
{
  specialized PINECircuit.encode(measurement:)();
}

uint64_t PINECircuit.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized PINECircuit.decode(data:numOfMeasurements:)(a1, a3);
}

uint64_t PINECircuit.evaluateGadget<A>(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = type metadata accessor for MultiplicationGadget(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a3);
  v10 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v9);
  v12 = type metadata accessor for ParallelSum(0, v9, v10, v11);
  return ParallelSum.evaluate<A>(at:)(a1, v12, a3, a4, a5);
}

uint64_t PINECircuit.evaluateGadget(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = *(_OWORD *)(v4 + 24);
  v18 = *(_OWORD *)(v4 + 8);
  v19 = v6;
  v20 = *(_OWORD *)(v4 + 40);
  v17 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = type metadata accessor for MultiplicationGadget(255, v7, v8, a3);
  v10 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v9);
  v12 = type metadata accessor for ParallelSum(0, v9, v10, v11);
  type metadata accessor for Polynomial(255, v7, v8, v13);
  v14 = type metadata accessor for Array();
  v15 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v14);
  return ParallelSum.evaluate<A>(at:)((uint64_t)&v17, v12, v14, v15, a4);
}

uint64_t PINECircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  Swift::String v115;
  Swift::String v116;
  uint64_t v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t result;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t, uint64_t);
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  void (*v152)(uint64_t, uint64_t);
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t);
  char *v158;
  void (*v159)(char *, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  void (*v166)(uint64_t, uint64_t);
  char *v167;
  void (*v168)(char *, uint64_t);
  char *v169;
  void (*v170)(char *, uint64_t);
  char *v171;
  char *v172;
  char *v173;
  void (*v174)(uint64_t, uint64_t);
  char *v175;
  void (*v176)(char *, uint64_t);
  char *v177;
  char *v178;
  char *v179;
  void (*v180)(char *, uint64_t);
  char *v181;
  char *v182;
  char *v183;
  void (*v184)(uint64_t, uint64_t);
  char *v185;
  void (*v186)(char *, uint64_t);
  char *v187;
  void (*v188)(char *, uint64_t);
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(char *, char *, uint64_t);
  char *v195;
  uint64_t v196;
  void (*v197)(uint64_t, uint64_t, uint64_t);
  char *v198;
  uint64_t v199;
  char *v200;
  void (*v201)(uint64_t, uint64_t);
  void (*v202)(char *, uint64_t, uint64_t);
  void (*v203)(char *, uint64_t, uint64_t);
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t);
  void (*v206)(char *, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, char *, uint64_t);
  void (*v211)(uint64_t, char *, uint64_t);
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  void (*v229)(char *, uint64_t);
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  _QWORD *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, char *, uint64_t);
  uint64_t v248;
  void (*v249)(uint64_t, uint64_t, uint64_t);
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(uint64_t, char *, uint64_t);

  v244 = a4;
  v228 = a3;
  v215 = a6;
  v9 = *(_QWORD *)(a5 + 32);
  v246 = a5;
  v10 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v240 = v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v237 = AssociatedConformanceWitness;
  v229 = (void (*)(char *, uint64_t))AssociatedTypeWitness;
  v13 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v223 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
  v221 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v221, v14);
  v220 = (char *)&v190 - v15;
  v233 = swift_checkMetadataState();
  v16 = *(_QWORD *)(v233 - 8);
  v18 = MEMORY[0x24BDAC7A8](v233, v17);
  v225 = (char *)&v190 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v236 = (char *)&v190 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21, v23);
  v232 = (char *)&v190 - v25;
  v239 = *(_QWORD **)(v10 - 8);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v214 = (char *)&v190 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  v218 = (char *)&v190 - v31;
  v33 = MEMORY[0x24BDAC7A8](v30, v32);
  v219 = (char *)&v190 - v34;
  v36 = MEMORY[0x24BDAC7A8](v33, v35);
  v222 = (char *)&v190 - v37;
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v217 = (uint64_t)&v190 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39, v41);
  v216 = (uint64_t)&v190 - v43;
  v45 = MEMORY[0x24BDAC7A8](v42, v44);
  v47 = (char *)&v190 - v46;
  v49 = MEMORY[0x24BDAC7A8](v45, v48);
  v224 = (char *)&v190 - v50;
  v52 = MEMORY[0x24BDAC7A8](v49, v51);
  v226 = (char *)&v190 - v53;
  v55 = MEMORY[0x24BDAC7A8](v52, v54);
  v227 = (char *)&v190 - v56;
  v58 = MEMORY[0x24BDAC7A8](v55, v57);
  v238 = (char *)&v190 - v59;
  v61 = MEMORY[0x24BDAC7A8](v58, v60);
  v242 = (char *)&v190 - v62;
  v64 = MEMORY[0x24BDAC7A8](v61, v63);
  v241 = (char *)&v190 - v65;
  v67 = MEMORY[0x24BDAC7A8](v64, v66);
  v69 = (char *)&v190 - v68;
  v71 = MEMORY[0x24BDAC7A8](v67, v70);
  v235 = (char *)&v190 - v72;
  v74 = MEMORY[0x24BDAC7A8](v71, v73);
  v234 = (char *)&v190 - v75;
  MEMORY[0x24BDAC7A8](v74, v76);
  v245 = (uint64_t)&v190 - v77;
  v230 = a1;
  v78 = MEMORY[0x24BD00400](a1, v10);
  v243 = (uint64_t)v6;
  v79 = *v6;
  if (v78 != *v6)
  {
    v114 = v78;
    v255 = 0;
    v256 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v255 = 0xD00000000000001BLL;
    v256 = 0x8000000249C307C0;
    v251 = v114;
    v115._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v115);
    swift_bridgeObjectRelease();
    v116._countAndFlagsBits = 540877088;
    v116._object = (void *)0xE400000000000000;
    String.append(_:)(v116);
    v251 = v79;
LABEL_8:
    v120._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v120);
LABEL_9:
    swift_bridgeObjectRelease();
    v121 = v255;
    v122 = v256;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v123 = v121;
    *(_QWORD *)(v123 + 8) = v122;
    *(_BYTE *)(v123 + 16) = 2;
    return swift_willThrow();
  }
  v80 = MEMORY[0x24BD00400](a2, v10);
  if (v80 != 3)
  {
    v117 = v80;
    v255 = 0;
    v256 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v255 = 0xD000000000000019;
    v256 = 0x8000000249C31120;
    v251 = v117;
    v118._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v118);
    swift_bridgeObjectRelease();
    v119._countAndFlagsBits = 540877088;
    v119._object = (void *)0xE400000000000000;
    String.append(_:)(v119);
    v251 = 3;
    goto LABEL_8;
  }
  v211 = a2;
  v213 = v69;
  v212 = v10;
  v82 = v240;
  v83 = type metadata accessor for GadgetEvaluation(0, v10, v240, v81);
  v84 = MEMORY[0x24BD00400](v244, v83);
  v85 = *(_QWORD *)(PINECircuit.gadgetParameters.getter(v246) + 16);
  swift_bridgeObjectRelease();
  if (v84 != v85)
  {
    v255 = 0;
    v256 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v255 = 0x2064696C61766E49;
    v256 = 0xEF203A746E756F63;
    v251 = v84;
    v125._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v125);
    swift_bridgeObjectRelease();
    v126._countAndFlagsBits = 540877088;
    v126._object = (void *)0xE400000000000000;
    String.append(_:)(v126);
    PINECircuit.gadgetParameters.getter(v246);
    v127._countAndFlagsBits = MEMORY[0x24BD00394]();
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v200 = v47;
  v255 = v228;
  v86 = lazy protocol witness table accessor for type Int and conformance Int();
  v87 = v232;
  v88 = v233;
  MEMORY[0x24BD00694](&v255, MEMORY[0x24BEE1768], v86, v233, v13);
  v89 = v234;
  v90 = v212;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 128))(v87, v212, v82);
  v228 = v83;
  v91 = v235;
  v205 = (void (*)(char *, char *, uint64_t))v239[2];
  v205(v235, v89, v90);
  v202 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 136);
  v202(v91, v90, v82);
  v92 = swift_checkMetadataState();
  v93 = v236;
  v201 = *(void (**)(uint64_t, uint64_t))(v82 + 88);
  v201(v90, v82);
  v94 = *(void (**)(char *, uint64_t))(v237 + 112);
  v204 = v92;
  v94(v93, v92);
  v206 = *(void (**)(char *, uint64_t))(v16 + 8);
  v206(v93, v88);
  v203 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 96);
  v203(v87, v90, v82);
  v229 = (void (*)(char *, uint64_t))v239[1];
  v229(v89, v90);
  Array.subscript.getter();
  Array.subscript.getter();
  Array.subscript.getter();
  v251 = v230;
  v95 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v95);
  v255 = ArraySlice.init<A>(_:)();
  v256 = v96;
  v257 = v97;
  v258 = v98;
  v99 = v246;
  v100 = v243;
  v101 = *(_QWORD *)(v243 + 88);
  v102 = type metadata accessor for ArraySlice();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v102);
  RandomAccessCollection<>.popFirst(_:)(v101, v102);
  v230 = v251;
  v209 = v252;
  v208 = v253;
  v207 = v254;
  RandomAccessCollection<>.popFirst(_:)(*(_QWORD *)(v100 + 72), v102);
  v210 = *(void (**)(uint64_t, char *, uint64_t))(v100 + *(int *)(v99 + 96));
  RandomAccessCollection<>.popFirst(_:)((uint64_t)v210, v102);
  v211 = v247;
  v199 = v248;
  v197 = v249;
  v103 = v251;
  v198 = v250;
  v104 = v252;
  v105 = v253;
  v106 = v254;
  swift_unknownObjectRetain();
  Array.subscript.getter();
  v107 = (unint64_t)v247;
  v259 = v247;
  v108 = v106;
  v109 = v245;
  v110 = v231;
  PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(v103, v104, v105, v108, (uint64_t)v213, v245, v99, (uint64_t)v238);
  if (v110)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    outlined consume of GadgetEvaluation<A><A, B>(v107);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v111 = v212;
    v112 = (void (*)(uint64_t, uint64_t))v229;
    v229(v242, v212);
    v112((uint64_t)v241, v111);
    v112((uint64_t)v213, v111);
    v113 = v109;
    return ((uint64_t (*)(uint64_t, uint64_t))v112)(v113, v111);
  }
  v128 = (uint64_t)v210;
  v196 = 0;
  outlined consume of GadgetEvaluation<A><A, B>(v107);
  swift_unknownObjectRelease();
  v129 = *(_QWORD *)(v100 + 96);
  RandomAccessCollection<>.popFirst(_:)(v129, v102);
  v130 = (uint64_t)v247;
  v131 = (void (*)(char *, char *, uint64_t))v248;
  v132 = (uint64_t)v249;
  v195 = v250;
  result = RandomAccessCollection<>.popFirst(_:)(v129, v102);
  v133 = *(_QWORD *)(v100 + *(int *)(v246 + 92));
  v134 = __OFADD__(v133, 1);
  v135 = v133 + 1;
  if (v134)
  {
    __break(1u);
    goto LABEL_18;
  }
  v193 = v132;
  v194 = v131;
  v231 = v130;
  result = v135 * v128;
  if ((unsigned __int128)(v135 * (__int128)v128) >> 64 != (v135 * v128) >> 63)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v136 = (uint64_t)v247;
  v137 = v248;
  v138 = (uint64_t)v249;
  v139 = (unint64_t)v250;
  RandomAccessCollection<>.popFirst(_:)(result, v102);
  v210 = v247;
  v192 = v248;
  v191 = (char *)v249;
  v190 = v250;
  Array.subscript.getter();
  v140 = (unint64_t)v247;
  v259 = v247;
  v141 = v196;
  PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)((uint64_t)v227, (uint64_t)v226, v230, v209, v208, v207, v231, v194, v193, (unint64_t)v195, v136, v137, v138, v139, v245, (unint64_t *)&v259, v246);
  if (v141)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    outlined consume of GadgetEvaluation<A><A, B>(v140);
    v111 = v212;
    v112 = (void (*)(uint64_t, uint64_t))v229;
    v229(v238, v212);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v112((uint64_t)v242, v111);
    v112((uint64_t)v241, v111);
    v112((uint64_t)v213, v111);
    v113 = v245;
    return ((uint64_t (*)(uint64_t, uint64_t))v112)(v113, v111);
  }
  v209 = v136;
  outlined consume of GadgetEvaluation<A><A, B>(v140);
  Array.subscript.getter();
  v142 = (unint64_t)v247;
  v259 = v247;
  v143 = v216;
  v144 = v217;
  PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(v216, v217, (uint64_t)v210, v192, v191, v190, v211, v199, v197, (uint64_t)v198, (uint64_t)v241, v245, (unint64_t *)&v259, v246);
  outlined consume of GadgetEvaluation<A><A, B>(v142);
  v145 = (void (*)(char *, uint64_t, uint64_t))v239[4];
  v146 = v212;
  v145(v224, v143, v212);
  v145(v200, v144, v146);
  v147 = v218;
  v205(v218, v227, v146);
  v148 = v219;
  v149 = v240;
  v202(v147, v146, v240);
  v150 = v236;
  v151 = v148;
  v152 = v201;
  v201(v146, v149);
  v153 = v225;
  v152(v146, v149);
  v246 = *(_QWORD *)(v237 + 80);
  v154 = (uint64_t)v232;
  ((void (*)(char *, char *))v246)(v150, v153);
  v155 = v153;
  v156 = v233;
  v157 = v206;
  v206(v155, v233);
  v157(v150, v156);
  v203((char *)v154, v146, v149);
  v158 = v218;
  v205(v218, v238, v146);
  v196 = 0;
  v159 = v202;
  v202(v158, v146, v149);
  v244 = *(_QWORD *)(v149 + 8);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v229(v151, v146);
  v160 = v223;
  v161 = v221;
  v243 = swift_getAssociatedConformanceWitness();
  v162 = v220;
  MEMORY[0x24BD00928](&unk_249C2A750, 768, v161, v243);
  MEMORY[0x24BD00904](v162, v156, v160);
  v163 = v218;
  FieldElement.pow(_:)(v154, v146, v149);
  v206((char *)v154, v156);
  v164 = v214;
  v205(v214, v226, v146);
  v159(v164, v146, v149);
  v165 = v236;
  v166 = v201;
  v201(v146, v149);
  v167 = v225;
  v166(v146, v149);
  ((void (*)(char *, char *))v246)(v165, v167);
  v168 = v206;
  v206(v167, v156);
  v168(v165, v156);
  v169 = v219;
  v203((char *)v154, v146, v149);
  v170 = v229;
  v229(v163, v146);
  v171 = v222;
  MEMORY[0x24BD0085C](v222, v169, v146, v244);
  v170(v169, v146);
  v170(v171, v146);
  v172 = v220;
  MEMORY[0x24BD00928](&unk_249C2B1A0, 768);
  MEMORY[0x24BD00904](v172, v156, v223);
  FieldElement.pow(_:)(v154, v146, v149);
  v206((char *)v154, v156);
  v205(v163, v224, v146);
  v202(v163, v146, v149);
  v173 = v236;
  v174 = v201;
  v201(v146, v149);
  v175 = v225;
  v174(v146, v149);
  ((void (*)(char *, char *))v246)(v173, v175);
  v176 = v206;
  v206(v175, v156);
  v176(v173, v156);
  v177 = v222;
  v203((char *)v154, v146, v149);
  v178 = v169;
  v179 = v169;
  v180 = v229;
  v229(v179, v146);
  v181 = v235;
  MEMORY[0x24BD0085C](v235, v177, v146, v244);
  v180(v177, v146);
  v180(v181, v146);
  v182 = v220;
  MEMORY[0x24BD00928](&unk_249C2B1A8, 1024);
  MEMORY[0x24BD00904](v182, v156, v223);
  FieldElement.pow(_:)(v154, v146, v149);
  v206((char *)v154, v156);
  v205(v178, v200, v146);
  v202(v178, v146, v149);
  v183 = v236;
  v184 = v201;
  v201(v146, v149);
  v185 = v225;
  v184(v146, v149);
  ((void (*)(char *, char *))v246)(v183, v185);
  v186 = v206;
  v206(v185, v156);
  v186(v183, v156);
  v187 = v235;
  v203((char *)v154, v146, v149);
  v188 = v229;
  v229(v177, v146);
  v189 = v234;
  MEMORY[0x24BD0085C](v234, v187, v146, v244);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v188(v187, v146);
  v188(v189, v146);
  v188(v200, v146);
  v188(v224, v146);
  v188(v226, v146);
  v188(v227, v146);
  v188(v238, v146);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v188(v242, v146);
  v188(v241, v146);
  v188(v213, v146);
  return ((uint64_t (*)(uint64_t, uint64_t))v188)(v245, v146);
}

uint64_t PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;

  v33 = a4;
  v32 = a3;
  v31 = a2;
  v29 = a1;
  v28 = a8;
  v12 = *(_QWORD *)(a7 + 16);
  v30 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v15;
  v18 = *(_QWORD *)(v17 + 32);
  (*(void (**)(uint64_t, uint64_t))(v18 + 72))(v12, v18);
  v19 = *(_OWORD *)(v8 + 24);
  v43 = *(_OWORD *)(v8 + 8);
  v44 = v19;
  v45 = *(_OWORD *)(v8 + 40);
  v46 = v16;
  v20 = *(_QWORD *)(a7 + 24);
  v35 = v12;
  v36 = v20;
  v37 = v18;
  v38 = *(_OWORD *)(a7 + 40);
  v39 = v14;
  v40 = a6;
  v41 = a5;
  v42 = v8;
  v22 = type metadata accessor for MultiplicationGadget(255, v12, v18, v21);
  v23 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v22);
  v25 = type metadata accessor for ParallelSum(0, v22, v23, v24);
  ParallelSum.chunkEvaluateSum(_:for:_:)(v29, v31, v32, v33, &v46, (void (*)(void))partial apply for closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:), (uint64_t)v34, v25, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v14, v12);
}

uint64_t PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, char *, uint64_t), uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, unint64_t *);
  char *v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  void (*v70)(uint64_t, unint64_t *);
  char *v71;
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t AssociatedConformanceWitness;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102[16];
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  unint64_t v111;

  v18 = v17;
  v94 = a8;
  v93 = a7;
  v99 = (char *)a5;
  v100 = a6;
  v97 = a3;
  v98 = a4;
  v92 = a2;
  v83 = a1;
  v96 = a16;
  v19 = *(_QWORD **)(a17 + 32);
  v20 = *(_QWORD *)(a17 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v88 = AssociatedTypeWitness;
  v90 = swift_getAssociatedTypeWitness();
  v89 = *(_QWORD *)(v90 - 8);
  v23 = MEMORY[0x24BDAC7A8](v90, v22);
  v87 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23, v25);
  v86 = (char *)&v78 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26, v28);
  v85 = (char *)&v78 - v30;
  v95 = *(_QWORD *)(v20 - 8);
  v32 = MEMORY[0x24BDAC7A8](v29, v31);
  v82 = (char *)&v78 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v84 = (char *)&v78 - v36;
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v40 = (char *)&v78 - v39;
  v42 = MEMORY[0x24BDAC7A8](v38, v41);
  v44 = (char *)&v78 - v43;
  v46 = MEMORY[0x24BDAC7A8](v42, v45);
  v48 = (char *)&v78 - v47;
  MEMORY[0x24BDAC7A8](v46, v49);
  v51 = (char *)&v78 - v50;
  v52 = *v96;
  v53 = *(_OWORD *)(v17 + 24);
  v108 = *(_OWORD *)(v17 + 8);
  v109 = v53;
  v110 = *(_OWORD *)(v17 + 40);
  v111 = v52;
  v54 = *(_QWORD *)(a17 + 24);
  v103 = v20;
  v104 = v54;
  v105 = v19;
  v106 = *(_OWORD *)(a17 + 40);
  v107 = v17;
  v96 = v19;
  v56 = type metadata accessor for MultiplicationGadget(255, v20, (uint64_t)v19, v55);
  v57 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v56);
  v59 = type metadata accessor for ParallelSum(0, v56, v57, v58);
  v60 = v101;
  result = ParallelSum.chunkEvaluateSum(_:for:_:)(v97, v98, (uint64_t)v99, v100, &v111, (void (*)(void))partial apply for closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:), (uint64_t)v102, v59, (uint64_t)v51);
  if (!v60)
  {
    v100 = v18;
    v101 = a17;
    v81 = v51;
    v62 = v95;
    v63 = swift_unknownObjectRetain();
    v64 = v96;
    FieldElement.init(inputVector:)(v63, (uint64_t)v94, a9, a10, v20, (uint64_t)v96, (uint64_t)v48);
    v65 = swift_unknownObjectRetain();
    FieldElement.init(inputVector:)(v65, a12, a13, a14, v20, (uint64_t)v64, (uint64_t)v44);
    v98 = a15;
    v94 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
    v94(v40, v48, v20);
    v66 = (void (*)(char *, uint64_t, unint64_t *))v64[17];
    v99 = v44;
    v66(v40, v20, v64);
    v97 = v64[1];
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v80 = v48;
    v67 = v84;
    v68 = (void (*)(char *, uint64_t, uint64_t))v94;
    v94(v84, v48, v20);
    v79 = v40;
    v66(v67, v20, v64);
    dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
    v69 = v82;
    v68(v82, v100 + *(int *)(v101 + 88), v20);
    v66(v69, v20, v64);
    v101 = swift_checkMetadataState();
    v70 = (void (*)(uint64_t, unint64_t *))v64[11];
    v71 = v86;
    v70(v20, v64);
    v72 = v87;
    v70(v20, v64);
    v73 = v85;
    (*(void (**)(char *, char *))(AssociatedConformanceWitness + 80))(v71, v72);
    v74 = *(void (**)(char *, uint64_t))(v89 + 8);
    v75 = v90;
    v74(v72, v90);
    v74(v71, v75);
    ((void (*)(char *, uint64_t, unint64_t *))v64[12])(v73, v20, v64);
    v76 = v79;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v77 = *(void (**)(char *, uint64_t))(v95 + 8);
    v77(v67, v20);
    v77(v76, v20);
    v77(v99, v20);
    v77(v80, v20);
    return ((uint64_t (*)(char *, uint64_t))v77)(v81, v20);
  }
  return result;
}

uint64_t PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char *a6, void (*a7)(uint64_t, char *, uint64_t), uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  void (*v66)(uint64_t, uint64_t, uint64_t);
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  char *v74;
  char *v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  char *v80;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t AssociatedConformanceWitness;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  void (*v100)(uint64_t, char *, uint64_t);
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char v108[16];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v101 = (char *)a8;
  v100 = a7;
  v105 = a6;
  v103 = a5;
  v96 = a4;
  v95 = a3;
  v93 = a2;
  v82 = a1;
  v99 = a9;
  v98 = a10;
  v107 = a12;
  v97 = a11;
  v15 = *(_QWORD *)(a14 + 32);
  v16 = *(_QWORD *)(a14 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v88 = AssociatedTypeWitness;
  v91 = swift_getAssociatedTypeWitness();
  v90 = *(_QWORD *)(v91 - 8);
  v19 = MEMORY[0x24BDAC7A8](v91, v18);
  v87 = (char *)v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v86 = (char *)v81 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v84 = (char *)v81 - v26;
  v106 = *(_QWORD *)(v16 - 8);
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v81[0] = (char *)v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v85 = (uint64_t)v81 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31, v33);
  v89 = (char *)v81 - v35;
  v37 = MEMORY[0x24BDAC7A8](v34, v36);
  v94 = (char *)v81 - v38;
  v40 = MEMORY[0x24BDAC7A8](v37, v39);
  v104 = (uint64_t)v81 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40, v42);
  v45 = (char *)v81 - v44;
  v47 = MEMORY[0x24BDAC7A8](v43, v46);
  v49 = (char *)v81 - v48;
  MEMORY[0x24BDAC7A8](v47, v50);
  v52 = (char *)v81 - v51;
  v53 = *a13;
  (*(void (**)(uint64_t, uint64_t))(v15 + 72))(v16, v15);
  v128 = 0;
  PINECircuit.wraparoundCheckLowerBound.getter(a14, v54);
  v81[1] = *(_QWORD *)(v15 + 8);
  dispatch thunk of IteratorProtocol.next()();
  v55 = *(_OWORD *)(v14 + 24);
  v125 = *(_OWORD *)(v14 + 8);
  v126 = v55;
  v127 = *(_OWORD *)(v14 + 40);
  v124 = v53;
  v56 = *(_QWORD *)(a14 + 24);
  v109 = v16;
  v110 = v56;
  v111 = v15;
  v83 = a14;
  v112 = *(_OWORD *)(a14 + 40);
  v113 = v95;
  v114 = v96;
  v115 = v103;
  v116 = v105;
  v117 = &v128;
  v118 = v14;
  v96 = v14;
  v103 = v49;
  v119 = v49;
  v120 = v107;
  v121 = v52;
  v122 = v45;
  v105 = v45;
  v123 = v97;
  v58 = type metadata accessor for MultiplicationGadget(255, v16, v15, v57);
  v59 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v58);
  v61 = type metadata accessor for ParallelSum(0, v58, v59, v60);
  v62 = v104;
  v63 = v102;
  ParallelSum.chunkEvaluateSum(_:for:_:)((uint64_t)v100, (uint64_t)v101, (uint64_t)v99, v98, &v124, (void (*)(void))partial apply for closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:), (uint64_t)v108, v61, v104);
  if (v63)
  {
    v64 = *(void (**)(char *, uint64_t))(v106 + 8);
    v64(v103, v16);
    v64(v105, v16);
    return ((uint64_t (*)(char *, uint64_t))v64)(v52, v16);
  }
  else
  {
    v101 = v52;
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16);
    v66(v82, v62, v16);
    v66((uint64_t)v94, (uint64_t)v105, v16);
    v67 = v66;
    v100 = (void (*)(uint64_t, char *, uint64_t))v66;
    v68 = v85;
    FieldElement.init(_:)(*(_QWORD *)(v96 + *(int *)(v83 + 100)), v16, v15, v85);
    v69 = v81[0];
    v67(v81[0], v68, v16);
    v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 136);
    v70 = v89;
    v99(v69, v16, v15);
    v71 = swift_checkMetadataState();
    v102 = 0;
    v72 = v71;
    v73 = *(void (**)(uint64_t, uint64_t))(v15 + 88);
    v74 = v86;
    v73(v16, v15);
    v75 = v87;
    v73(v16, v15);
    v76 = v84;
    (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 80))(v74, v75, v72);
    v77 = *(void (**)(char *, uint64_t))(v90 + 8);
    v78 = v91;
    v77(v75, v91);
    v77(v74, v78);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 96))(v76, v16, v15);
    v79 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
    v79(v68, v16);
    v80 = v94;
    v100(v68, v94, v16);
    v99(v68, v16, v15);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v79((uint64_t)v70, v16);
    v79((uint64_t)v80, v16);
    v79(v104, v16);
    v79((uint64_t)v103, v16);
    v79((uint64_t)v105, v16);
    return ((uint64_t (*)(char *, uint64_t))v79)(v101, v16);
  }
}

uint64_t protocol witness for FullyLinearProof.jointRandLength.getter in conformance PINECircuit<A, B>()
{
  return 3;
}

void protocol witness for FullyLinearProof.encode(measurement:) in conformance PINECircuit<A, B>()
{
  specialized PINECircuit.encode(measurement:)();
}

uint64_t protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance PINECircuit<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized PINECircuit.decode(data:numOfMeasurements:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t protocol witness for FullyLinearProof.truncate(measurement:) in conformance PINECircuit<A, B>(uint64_t a1, uint64_t a2)
{
  return PINECircuit.truncate(measurement:)(a1, a2);
}

uint64_t protocol witness for FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:) in conformance PINECircuit<A, B>@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return PINECircuit.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget<A>(_:at:) in conformance PINECircuit<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return PINECircuit.evaluateGadget<A>(_:at:)(a1, a4, a2, a3, a5);
}

uint64_t static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, _QWORD *);
  void (*v23)(uint64_t, _QWORD *);
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  void (*v30)(char *, uint64_t);
  void (*v31)(uint64_t, _QWORD *);
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  uint64_t v43;

  v35 = a4;
  v36 = a5;
  v34 = a3;
  v38 = a2;
  v43 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v39 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v39 - 8);
  v12 = MEMORY[0x24BDAC7A8](v39, v11);
  v37 = (char *)&v30 - v13;
  v14 = *(_QWORD *)(a6 - 8);
  v16 = MEMORY[0x24BDAC7A8](v12, v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v19);
  v21 = (char *)&v30 - v20;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v33(v18, a3, a6);
  v22 = (void (*)(char *, uint64_t, _QWORD *))a8[17];
  v22(v18, a6, a8);
  v32 = a8[1];
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v23 = (void (*)(uint64_t, _QWORD *))a8[14];
  v23(a6, a8);
  v30 = *(void (**)(char *, uint64_t))(v14 + 8);
  v31 = v23;
  v30(v21, a6);
  v24 = v36;
  v25 = v33;
  v33(v18, v36, a6);
  v22(v18, a6, a8);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v23(a6, a8);
  v26 = v30;
  v30(v21, a6);
  v25(v18, v24, a6);
  v22(v18, a6, a8);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v27 = v37;
  v31(a6, a8);
  v26(v21, a6);
  v28 = v39;
  swift_getAssociatedConformanceWitness();
  LOBYTE(v24) = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v28);
  return v24 & 1;
}

uint64_t closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v12 = *(_QWORD *)(*(_QWORD *)a6 + 88);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = v16;
  v28 = v17;
  v29 = v18;
  v30 = v19;
  dispatch thunk of IteratorProtocol.next()();
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a6;
  v20 = type metadata accessor for ArraySlice();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE2180], v20);
  Sequence.reduce<A>(_:_:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t partial apply for closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(a1, v1[5], v1[6], v1[7], v1[8], v1[9], v1[2], v1[3], v1[4]);
}

uint64_t closure #1 in closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t result;
  char v17;
  char v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v19[1] = a2;
  v20 = a1;
  v21 = a4;
  v4 = *a3;
  v5 = *(_QWORD *)(*a3 + 88);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1, a2);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v10);
  v12 = (char *)v19 - v11;
  WraparoundJointRandomness.next()();
  Array.subscript.getter();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v4 + 104);
  dispatch thunk of IteratorProtocol.next()();
  v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  if ((v14 & 1) != 0)
  {
    v15(v12, v5);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v21, v20, v5);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 72))(v5, v13);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v9, v5);
    if ((v17 & 1) != 0)
    {
      v15(v12, v5);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v20, v5);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 136))(v9, v5, v13);
      return dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 80))(v5, v13);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v15(v9, v5);
      if ((v18 & 1) != 0)
      {
        v15(v12, v5);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v20, v5);
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 136))(v9, v5, v13);
        return dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      }
      else
      {
        v22 = 0;
        v23 = 0xE000000000000000;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(void (*a1)(unint64_t, char *, uint64_t), unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(uint64_t, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  Swift::Int v72;
  char isClassOrObjCExistentialType;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(unint64_t, char *, uint64_t);
  char *v77;
  Swift::Int v78;
  char *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char *v83;
  void (*v84)(uint64_t, uint64_t);
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  Swift::Int v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  Swift::Int v122;
  void (*v123)(char *, char *, uint64_t);
  void (*v124)(char *, uint64_t);
  void (*v125)(char *, uint64_t);
  Swift::Int v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t, uint64_t);
  void (*v129)(uint64_t, uint64_t);
  void (*v130)(char *, char *);
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t);
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t AssociatedTypeWitness;
  char *v139;
  uint64_t AssociatedConformanceWitness;
  void (*v141)(unint64_t, char *, uint64_t);
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v116 = a8;
  v115 = a7;
  v139 = a6;
  v118 = a5;
  swift_getAssociatedTypeWitness();
  v119 = a12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v114 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v16);
  v137 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v136 = (char *)&v107 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20, v22);
  v135 = (char *)&v107 - v24;
  v117 = *(_QWORD *)(a10 - 8);
  v26 = MEMORY[0x24BDAC7A8](v23, v25);
  v109 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26, v28);
  v108 = (char *)&v107 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29, v31);
  v113 = (char *)&v107 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v112 = (char *)&v107 - v36;
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v134 = (char *)&v107 - v39;
  v41 = MEMORY[0x24BDAC7A8](v38, v40);
  v111 = (char *)&v107 - v42;
  MEMORY[0x24BDAC7A8](v41, v43);
  v45 = (char *)&v107 - v44;
  v141 = a1;
  v142 = a2;
  v143 = a3;
  v144 = a4;
  result = ArraySlice.count.getter();
  if (result < 0)
    goto LABEL_25;
  v47 = result;
  if (result)
  {
    v48 = v119;
    v132 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 136);
    v49 = swift_checkMetadataState();
    v50 = 0;
    v130 = *(void (**)(char *, char *))(AssociatedConformanceWitness + 80);
    v131 = v49;
    v51 = 1;
    v52 = *(void (**)(uint64_t, uint64_t))(v48 + 88);
    v128 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 96);
    v129 = v52;
    v133 = v45;
    v110 = v47;
    while (1)
    {
      v53 = ArraySlice.startIndex.getter();
      v54 = __OFADD__(v53, v50);
      result = v53 + v50;
      if (v54)
        break;
      result = ArraySlice.subscript.getter();
      if (v50 == 0x4000000000000000)
        goto LABEL_23;
      v127 = v50 + 1;
      v122 = v51 - 1;
      v55 = v117;
      v56 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
      v123 = v56;
      v56(v134, v139, a10);
      v57 = v112;
      v56(v112, v45, a10);
      v126 = v51;
      v58 = v111;
      v59 = v57;
      v60 = v119;
      v132(v59, a10, v119);
      v61 = v136;
      v62 = v129;
      v129(a10, v60);
      v63 = v137;
      v62(a10, v60);
      v64 = v135;
      v65 = v61;
      v130(v61, v63);
      v66 = *(void (**)(char *, uint64_t))(v114 + 8);
      v124 = v66;
      v67 = AssociatedTypeWitness;
      v66(v63, AssociatedTypeWitness);
      v66(v65, v67);
      v128(v64, a10, v60);
      v125 = *(void (**)(char *, uint64_t))(v55 + 8);
      v68 = v134;
      v125(v134, a10);
      v69 = type metadata accessor for Array();
      v70 = v118;
      Array._makeMutableAndUnique()();
      v71 = *v70;
      v72 = v122;
      Array._checkSubscript_mutating(_:)(v122);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v74 = v71 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v74 = v71;
      v121 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      v120 = *(_QWORD *)(v55 + 72);
      v75 = v74 + v121 + v120 * v72;
      v76 = *(void (**)(unint64_t, char *, uint64_t))(v55 + 40);
      v77 = v58;
      v78 = v126;
      v76(v75, v77, a10);
      AggregateShare.share.modify(v69);
      v123(v68, v133, a10);
      v79 = v113;
      v132(v68, a10, v60);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      Array._makeMutableAndUnique()();
      v80 = *v70;
      Array._checkSubscript_mutating(_:)(v78);
      v81 = _swift_isClassOrObjCExistentialType();
      v82 = v80 & 0xFFFFFFFFFFFFFF8;
      if ((v81 & 1) == 0)
        v82 = v80;
      v76(v82 + v121 + v120 * v78, v79, a10);
      AggregateShare.share.modify(v69);
      v83 = v136;
      v84 = v129;
      v129(a10, v60);
      v85 = v137;
      v84(a10, v60);
      v86 = v135;
      v130(v83, v85);
      v87 = v85;
      v88 = v133;
      v89 = AssociatedTypeWitness;
      v90 = v124;
      v124(v87, AssociatedTypeWitness);
      v90(v83, v89);
      v128(v86, a10, v60);
      v50 = v127;
      v45 = v88;
      v125(v88, a10);
      v51 = v78 + 2;
      if (v110 == v50)
        goto LABEL_11;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  result = ArraySlice.count.getter();
  v91 = *(_QWORD *)(a9 + 48);
  if (v91 < result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v91 != result)
  {
    v92 = v91 - result;
    if (v91 <= result)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    v93 = result + 0x4000000000000000;
    v94 = 2 * result;
    v95 = v118;
    while ((v93 & 0x8000000000000000) == 0)
    {
      v143 = *(_QWORD *)(v119 + 8);
      v96 = v108;
      v144 = v92;
      dispatch thunk of IteratorProtocol.next()();
      v97 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      v98 = *v95;
      Array._checkSubscript_mutating(_:)(v94);
      v99 = _swift_isClassOrObjCExistentialType();
      v100 = v98 & 0xFFFFFFFFFFFFFF8;
      if ((v99 & 1) == 0)
        v100 = v98;
      v101 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
      v102 = *(_QWORD *)(v117 + 72);
      v141 = *(void (**)(unint64_t, char *, uint64_t))(v117 + 40);
      v142 = v101;
      v141(v100 + v101 + v102 * v94, v96, a10);
      AggregateShare.share.modify(v97);
      v103 = v109;
      dispatch thunk of IteratorProtocol.next()();
      Array._makeMutableAndUnique()();
      v104 = *v95;
      Array._checkSubscript_mutating(_:)(v94 + 1);
      v105 = _swift_isClassOrObjCExistentialType();
      v106 = v104 & 0xFFFFFFFFFFFFFF8;
      if ((v105 & 1) == 0)
        v106 = v104;
      v141(v106 + v142 + v102 * (v94 + 1), v103, a10);
      result = AggregateShare.share.modify(v97);
      ++v93;
      v94 += 2;
      v92 = v144 - 1;
      if (v144 == 1)
        return result;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, char *, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char isClassOrObjCExistentialType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(unint64_t, char *, uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(unint64_t, char *, uint64_t);
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;

  v15 = *(_QWORD *)(a7 - 8);
  v66 = a5;
  v67 = v15;
  v16 = MEMORY[0x24BDAC7A8](a1, a2);
  v60 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v59 = (char *)&v57 - v20;
  MEMORY[0x24BDAC7A8](v19, v21);
  v23 = (char *)&v57 - v22;
  result = ArraySlice.count.getter();
  if (result < 0)
    goto LABEL_25;
  v58 = a6;
  if (result)
  {
    v25 = 0;
    v26 = 1;
    v64 = a3;
    v65 = a4;
    v62 = a1;
    v63 = a2;
    v69 = v23;
    v61 = result;
    while (1)
    {
      v27 = ArraySlice.startIndex.getter();
      v28 = __OFADD__(v27, v25);
      result = v27 + v25;
      if (v28)
        break;
      result = ArraySlice.subscript.getter();
      if (v25 == 0x4000000000000000)
        goto LABEL_23;
      ++v25;
      v29 = type metadata accessor for Array();
      v30 = v66;
      Array._makeMutableAndUnique()();
      v31 = *v30;
      Array._checkSubscript_mutating(_:)(v26 - 1);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v33 = v31 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v33 = v31;
      v34 = v67;
      v68 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
      v35 = *(_QWORD *)(v67 + 72);
      v36 = *(void (**)(unint64_t, char *, uint64_t))(v67 + 24);
      v36(v33 + v68 + v35 * (v26 - 1), v69, a7);
      AggregateShare.share.modify(v29);
      Array._makeMutableAndUnique()();
      v37 = *v30;
      Array._checkSubscript_mutating(_:)(v26);
      v38 = _swift_isClassOrObjCExistentialType();
      v39 = v37 & 0xFFFFFFFFFFFFFF8;
      if ((v38 & 1) == 0)
        v39 = v37;
      v36(v39 + v68 + v35 * v26, v69, a7);
      v40 = v69;
      AggregateShare.share.modify(v29);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v40, a7);
      v26 += 2;
      if (v61 == v25)
        goto LABEL_11;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  result = ArraySlice.count.getter();
  v41 = *(_QWORD *)(v58 + 48);
  if (v41 < result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v41 != result)
  {
    v42 = (char *)(v41 - result);
    if (v41 <= result)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    v63 = a9;
    v43 = result + 0x4000000000000000;
    v44 = 2 * result;
    v45 = v66;
    while ((v43 & 0x8000000000000000) == 0)
    {
      v68 = *(_QWORD *)(v63 + 8);
      v46 = v59;
      v69 = v42;
      dispatch thunk of IteratorProtocol.next()();
      v47 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      v48 = *v45;
      Array._checkSubscript_mutating(_:)(v44);
      v49 = _swift_isClassOrObjCExistentialType();
      v50 = v48 & 0xFFFFFFFFFFFFFF8;
      if ((v49 & 1) == 0)
        v50 = v48;
      v51 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
      v52 = *(_QWORD *)(v67 + 72);
      v64 = *(void (**)(unint64_t, char *, uint64_t))(v67 + 40);
      v65 = v51;
      v64(v50 + v51 + v52 * v44, v46, a7);
      AggregateShare.share.modify(v47);
      v53 = v60;
      dispatch thunk of IteratorProtocol.next()();
      Array._makeMutableAndUnique()();
      v54 = *v45;
      Array._checkSubscript_mutating(_:)(v44 + 1);
      v55 = _swift_isClassOrObjCExistentialType();
      v56 = v54 & 0xFFFFFFFFFFFFFF8;
      if ((v55 & 1) == 0)
        v56 = v54;
      v64(v56 + v65 + v52 * (v44 + 1), v53, a7);
      result = AggregateShare.share.modify(v47);
      ++v43;
      v44 += 2;
      v42 = v69 - 1;
      if (v69 == (char *)1)
        return result;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char isClassOrObjCExistentialType;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD v78[13];
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*AssociatedConformanceWitness)(unint64_t, char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v88 = a8;
  v87 = a7;
  v86 = a6;
  v89 = a5;
  v90 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v106 = a19;
  AssociatedConformanceWitness = (void (*)(unint64_t, char *, uint64_t))swift_getAssociatedConformanceWitness();
  v78[10] = AssociatedTypeWitness;
  v95 = swift_getAssociatedTypeWitness();
  v78[9] = *(_QWORD *)(v95 - 8);
  v25 = MEMORY[0x24BDAC7A8](v95, v24);
  v94 = (char *)v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v93 = (char *)v78 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v92 = (char *)v78 - v32;
  v100 = *(_QWORD *)(a17 - 8);
  v34 = MEMORY[0x24BDAC7A8](v31, v33);
  v81 = (char *)v78 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v34, v36);
  v80 = (char *)v78 - v38;
  v40 = MEMORY[0x24BDAC7A8](v37, v39);
  v78[8] = (char *)v78 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40, v42);
  v83 = (char *)v78 - v44;
  v46 = MEMORY[0x24BDAC7A8](v43, v45);
  v48 = MEMORY[0x24BDAC7A8](v46, v47);
  v85 = (char *)v78 - v49;
  v51 = MEMORY[0x24BDAC7A8](v48, v50);
  v97 = (char *)v78 - v52;
  v54 = MEMORY[0x24BDAC7A8](v51, v53);
  v84 = (char *)v78 - v55;
  v57 = MEMORY[0x24BDAC7A8](v54, v56);
  v91 = (char *)v78 - v58;
  MEMORY[0x24BDAC7A8](v57, v59);
  v78[11] = a1;
  v78[12] = a2;
  v60 = ArraySlice.count.getter();
  if (v60 < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v79 = a11;
  if (v60)
  {
    v78[4] = a16;
    v78[3] = a15;
    v82 = a14;
    v78[6] = a13;
    v78[5] = a12;
    v98 = a9;
    v101 = a17;
    v102 = a18;
    v103 = v106;
    v104 = a20;
    v105 = a21;
    type metadata accessor for PINECircuit();
  }
  result = ArraySlice.count.getter();
  v62 = *(_QWORD *)(v79 + 48);
  if (v62 < result)
    goto LABEL_17;
  if (v62 != result)
  {
    v63 = v62 - result;
    if (v62 > result)
    {
      v64 = result + 0x4000000000000000;
      v65 = 2 * result;
      v66 = v89;
      v67 = v81;
      while ((v64 & 0x8000000000000000) == 0)
      {
        v98 = *(_QWORD *)(v106 + 8);
        v68 = v80;
        v99 = v63;
        dispatch thunk of IteratorProtocol.next()();
        v69 = type metadata accessor for Array();
        Array._makeMutableAndUnique()();
        v70 = *v66;
        Array._checkSubscript_mutating(_:)(v65);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        v72 = v70 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0)
          v72 = v70;
        v73 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
        v74 = *(_QWORD *)(v100 + 72);
        AssociatedConformanceWitness = *(void (**)(unint64_t, char *, uint64_t))(v100 + 40);
        v97 = (char *)v73;
        AssociatedConformanceWitness(v72 + v73 + v74 * v65, v68, a17);
        AggregateShare.share.modify(v69);
        dispatch thunk of IteratorProtocol.next()();
        Array._makeMutableAndUnique()();
        v75 = *v66;
        Array._checkSubscript_mutating(_:)(v65 + 1);
        v76 = _swift_isClassOrObjCExistentialType();
        v77 = v75 & 0xFFFFFFFFFFFFFF8;
        if ((v76 & 1) == 0)
          v77 = v75;
        AssociatedConformanceWitness((unint64_t)&v97[v77 + v74 * (v65 + 1)], v67, a17);
        result = AggregateShare.share.modify(v69);
        ++v64;
        v65 += 2;
        v63 = v99 - 1;
        if (v99 == 1)
          return result;
      }
    }
LABEL_18:
    __break(1u);
    JUMPOUT(0x249BF8E60);
  }
  return result;
}

void specialized PINECircuit.encode(measurement:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v45[2] = a2;
  v10 = *(_QWORD *)(a3 + 16);
  MEMORY[0x24BDAC7A8](a1, a2);
  v55 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v53 = (uint64_t)v45 - v13;
  v51 = a5;
  v14 = *(_QWORD *)(a5 + 8);
  v46 = a4;
  v15 = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15, v16);
  v19 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v20);
  v22 = (char *)v45 - v21;
  v23 = MEMORY[0x24BD00400](a1, v10);
  v56 = v5;
  if (v23 != *(_QWORD *)(v5 + 88))
  {
    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v59 = 0xD000000000000016;
    v60 = 0x8000000249C30730;
    v61 = v23;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 540877088;
    v38._object = (void *)0xE400000000000000;
    String.append(_:)(v38);
    v61 = *(_QWORD *)(v56 + 88);
LABEL_10:
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v43 = v59;
    v42 = v60;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v44 = v43;
    *(_QWORD *)(v44 + 8) = v42;
    *(_BYTE *)(v44 + 16) = 2;
    return swift_willThrow();
  }
  v50 = v10;
  result = dispatch thunk of Collection.count.getter();
  if (result != v23)
  {
    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v59 = 0xD000000000000010;
    v60 = 0x8000000249C311B0;
    v61 = dispatch thunk of Collection.count.getter();
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 540877088;
    v40._object = (void *)0xE400000000000000;
    String.append(_:)(v40);
    v61 = v23;
    goto LABEL_10;
  }
  if (v23 < 0)
  {
    __break(1u);
  }
  else
  {
    v48 = a1;
    v49 = a3;
    if (v23)
    {
      result = v46;
      v25 = v15;
      v26 = v14;
      v27 = 0;
      v47 = v23;
      do
      {
        v58 = v27 + 1;
        v28 = v22;
        v29 = v25;
        v30 = result;
        dispatch thunk of Collection.startIndex.getter();
        dispatch thunk of Collection.index(_:offsetBy:)();
        v31 = v52;
        v57 = *(void (**)(char *, uint64_t))(v52 + 8);
        v57(v19, v25);
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v19, v28, v25);
        v32 = v26;
        v33 = v19;
        v34 = v55;
        v35 = v50;
        Array.subscript.getter();
        v36 = (uint64_t)v34;
        v19 = v33;
        v26 = v32;
        BinaryFloatingPoint.init<A>(fieldElement:fractionalBitCount:)(v36, *(_QWORD *)(v56 + 80), AssociatedTypeWitness, v35, *(_QWORD *)(v49 + 48), *(_QWORD *)(v49 + 32), v53);
        dispatch thunk of MutableCollection.subscript.setter();
        v25 = v29;
        v22 = v28;
        v57(v28, v25);
        result = v30;
        v27 = v58;
      }
      while (v47 != v58);
    }
  }
  return result;
}

uint64_t specialized PINECircuit.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v11 = (char *)&v23 - v10;
  v12 = MEMORY[0x24BD00400](a1, *(_QWORD *)(a2 + 16));
  if (v12 == *(_QWORD *)(v4 + 88))
  {
    dispatch thunk of IteratorProtocol.next()();
    v13 = specialized Array.init(repeating:count:)((uint64_t)v11, v12, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
    v25 = v13;
    v14 = type metadata accessor for Array();
    v15 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12B8], v14);
    specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(a1, (uint64_t)&v25, a2, v14, v15);
    result = v25;
    if (v3)
      return swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v25 = 0xD000000000000016;
    v26 = 0x8000000249C30730;
    v24 = v12;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 540877088;
    v18._object = (void *)0xE400000000000000;
    String.append(_:)(v18);
    v24 = *(_QWORD *)(v4 + 88);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20 = v25;
    v21 = v26;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v22 = v20;
    *(_QWORD *)(v22 + 8) = v21;
    *(_BYTE *)(v22 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

unint64_t outlined consume of GadgetEvaluation<A><A, B>(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_release();
  return result;
}

uint64_t partial apply for closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(void (*a1)(unint64_t, char *, uint64_t), unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  return closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, *(char **)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
}

uint64_t partial apply for closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, char *, uint64_t), unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;

  return closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, v5[7], v5[2], v5[3], v5[4]);
}

uint64_t partial apply for closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v5;

  return closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, v5[7], v5[8], v5[9], v5[10], v5[11], v5[12], v5[13], v5[14], v5[15], v5[16], v5[17], v5[2], v5[3], v5[4],
           v5[5],
           v5[6]);
}

uint64_t associated type witness table accessor for FullyLinearProof.F : FieldElement in PINECircuit<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t type metadata instantiation function for PINECircuit()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for PINECircuit()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PINECircuit(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = v6 + 8;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7
       + ((v6
         + 8
         + ((((((v7 + ((v6 + 104) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v12 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (__int128 *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    v15 = v13[2];
    v12[1] = v13[1];
    v12[2] = v15;
    *v12 = v14;
    v16 = (_QWORD *)(((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v23;
    v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8);
    *v24 = *v25;
    v26 = ~v6;
    v27 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = ((unint64_t)v27 + v6 + 8) & ~v6;
    v30 = ((unint64_t)v28 + v6 + 8) & ~v6;
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v31(v29, v30, v4);
    v32 = (_QWORD *)((v7 + v29) & 0xFFFFFFFFFFFFF8);
    v33 = (_QWORD *)((v7 + v30) & 0xFFFFFFFFFFFFF8);
    *v32 = *v33;
    v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8);
    v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8);
    *v34 = *v35;
    v36 = (_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    v37 = (_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v36 = *v37;
    v38 = ((unint64_t)v36 + v8) & v26;
    v39 = ((unint64_t)v37 + v8) & v26;
    v31(v38, v39, v4);
    *(_QWORD *)((v7 + v38) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + v39) & 0xFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t destroy for PINECircuit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v7)(unint64_t, uint64_t);

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4
      + 8
      + ((((((((((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4;
  v7 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  v7(v5, v2);
  return ((uint64_t (*)(unint64_t, uint64_t))v7)((v4+ 8+ ((((((*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4, v2);
}

_QWORD *initializeWithCopy for PINECircuit(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (__int128 *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = *v5;
  v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  *v4 = v6;
  v8 = (_QWORD *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v5 + 55) & 0xFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = ((unint64_t)v18 + v22 + 8) & ~v22;
  v24 = ((unint64_t)v19 + v22 + 8) & ~v22;
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  v25(v23, v24, v20);
  v26 = *(_QWORD *)(v21 + 64) + 7;
  v27 = (_QWORD *)((v26 + v23) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v26 + v24) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = ((unint64_t)v31 + v22 + 8) & ~v22;
  v34 = ((unint64_t)v32 + v22 + 8) & ~v22;
  v25(v33, v34, v20);
  *(_QWORD *)((v26 + v33) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v26 + v34) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for PINECircuit(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v4[1] = v5[1];
  v4[2] = v5[2];
  v4[3] = v5[3];
  v4[4] = v5[4];
  v4[5] = v5[5];
  v6 = (_QWORD *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 55) & 0xFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = (_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = ((unint64_t)v16 + v20 + 8) & ~v20;
  v22 = ((unint64_t)v17 + v20 + 8) & ~v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 24);
  v23(v21, v22, v18);
  v24 = *(_QWORD *)(v19 + 64) + 7;
  v25 = (_QWORD *)((v24 + v21) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v24 + v22) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + v20 + 8) & ~v20;
  v32 = ((unint64_t)v30 + v20 + 8) & ~v20;
  v23(v31, v32, v18);
  *(_QWORD *)((v24 + v31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v24 + v32) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for PINECircuit(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (__int128 *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = *v5;
  v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  *v4 = v6;
  v8 = (_QWORD *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v5 + 55) & 0xFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = ((unint64_t)v18 + v22 + 8) & ~v22;
  v24 = ((unint64_t)v19 + v22 + 8) & ~v22;
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  v25(v23, v24, v20);
  v26 = *(_QWORD *)(v21 + 64) + 7;
  v27 = (_QWORD *)((v26 + v23) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v26 + v24) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = ((unint64_t)v31 + v22 + 8) & ~v22;
  v34 = ((unint64_t)v32 + v22 + 8) & ~v22;
  v25(v33, v34, v20);
  *(_QWORD *)((v26 + v33) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v26 + v34) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for PINECircuit(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v4[1] = v5[1];
  v4[2] = v5[2];
  v4[3] = v5[3];
  v4[4] = v5[4];
  v4[5] = v5[5];
  v6 = (_QWORD *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 55) & 0xFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = (_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = ((unint64_t)v16 + v20 + 8) & ~v20;
  v22 = ((unint64_t)v17 + v20 + 8) & ~v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
  v23(v21, v22, v18);
  v24 = *(_QWORD *)(v19 + 64) + 7;
  v25 = (_QWORD *)((v24 + v21) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v24 + v22) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + v20 + 8) & ~v20;
  v32 = ((unint64_t)v30 + v20 + 8) & ~v20;
  v23(v31, v32, v18);
  *(_QWORD *)((v24 + v31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v24 + v32) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PINECircuit(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((((((((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v6
                                                                    + 8) & ~v6);
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64)
         + 7
         + ((v6
           + ((((((*(_QWORD *)(v4 + 64) + 7 + ((v6 + 104) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
       + 8) & 0xFFFFFFF8) != 0)
    v7 = 2;
  else
    v7 = a2 - v5 + 1;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_249BFA040 + 4 * byte_249C2B0E0[v9]))();
}

void storeEnumTagSinglePayload for PINECircuit(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v12 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64)
         + 7
         + (((_DWORD)v8
           + ((((((*(_DWORD *)(v6 + 64) + 7 + (((_DWORD)v8 + 104) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 8) & ~(_DWORD)v8)) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v6 + 64)
       + 7
       + (((_DWORD)v8
         + ((((((*(_DWORD *)(v6 + 64) + 7 + (((_DWORD)v8 + 104) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 8) & ~(_DWORD)v8)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v13 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ 7+ ((v8+ ((((((*(_QWORD *)(v6 + 64) + 7 + ((v8 + 104) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_249BFA200()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_249BFA208(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x249BFA210);
}

void sub_249BFA26C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_249BFA274()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_249BFA27C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a1)
    JUMPOUT(0x249BFA284);
  return (*(uint64_t (**)(unint64_t))(v3 + 56))((((((((((((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                + v4
                                                                + 8) & a2);
}

uint64_t partial apply for closure #1 in closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(a1, a2, *(uint64_t **)(v3 + 40), a3);
}

uint64_t SumVectorType.init(bitWidth:measurementLength:chunkLength:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[3];
  _OWORD v27[3];

  if (a3 < 1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = result;
  result = static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(result, a2);
  if (v6)
    return result;
  v13 = result;
  v14 = result + a3;
  if (__OFADD__(result, a3))
    goto LABEL_8;
  v15 = __OFSUB__(v14, 1);
  v16 = v14 - 1;
  if (v15)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v17 = v16 / a3;
  v26[0] = MultiplicationGadget.init(numOfCalls:)();
  v26[1] = v18;
  v26[2] = v19;
  v21 = type metadata accessor for MultiplicationGadget(0, a4, a5, v20);
  v22 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v21);
  result = ParallelSum.init(inner:count:)((uint64_t)v26, a3, v21, v22, (char *)v27);
  v23 = v27[0];
  v24 = v27[1];
  v25 = v27[2];
  *(_QWORD *)a6 = v13;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = 1;
  *(_QWORD *)(a6 + 24) = a3;
  *(_QWORD *)(a6 + 32) = v17;
  *(_QWORD *)(a6 + 40) = v11;
  *(_OWORD *)(a6 + 48) = v23;
  *(_OWORD *)(a6 + 64) = v24;
  *(_OWORD *)(a6 + 80) = v25;
  return result;
}

uint64_t SumVectorType.init(bitWidth:measurementLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  float v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[6];

  result = static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a1, a2);
  if (v5)
    return result;
  v12 = sqrtf((float)result);
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v12 <= -9.2234e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 >= 9.2234e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if ((uint64_t)v12 <= 1)
    v13 = 1;
  else
    v13 = (uint64_t)v12;
  result = SumVectorType.init(bitWidth:measurementLength:chunkLength:)(a1, a2, v13, a3, a4, (uint64_t)v19);
  v14 = v19[1];
  v15 = v19[2];
  v16 = v19[3];
  v17 = v19[4];
  v18 = v19[5];
  *a5 = v19[0];
  a5[1] = v14;
  a5[2] = v15;
  a5[3] = v16;
  a5[4] = v17;
  a5[5] = v18;
  return result;
}

void static SumVectorType.identifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t SumVectorType.encodedMeasurementLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SumVectorType.outputLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t SumVectorType.jointRandLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SumVectorType.gadgetParameters.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_249C29130;
  v4 = type metadata accessor for MultiplicationGadget(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v3);
  v5 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v4);
  v7 = type metadata accessor for ParallelSum(0, v4, v5, v6);
  v8 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for ParallelSum<A>, v7);
  Gadget.parameters.getter(v7, v8, (uint64_t *)(v2 + 32));
  return v2;
}

uint64_t SumVectorType.chunkLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t SumVectorType.numberOfChunk.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t SumVectorType.bitWidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

__n128 SumVectorType.gadget.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 80);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (result < 1 || a2 < 1)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    v3 = result * a2;
    if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
    {
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v11 = 0xD000000000000013;
      v12 = 0x8000000249C30CC0;
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 0xD000000000000014;
      v5._object = (void *)0x8000000249C30CE0;
      String.append(_:)(v5);
      goto LABEL_8;
    }
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
    if (!__OFSUB__(result, 1))
    {
      if (result - 1 >= v2)
        return v3;
      v11 = 0;
      v12 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v6._countAndFlagsBits = 0xD000000000000021;
      v6._object = (void *)0x8000000249C30C90;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 0x74694278616D202CLL;
      v8._object = (void *)0xEE003D6874646957;
      String.append(_:)(v8);
LABEL_8:
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
      swift_allocError();
      *(_QWORD *)v10 = v11;
      *(_QWORD *)(v10 + 8) = v12;
      *(_BYTE *)(v10 + 16) = 2;
      swift_willThrow();
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t SumVectorType.encode(measurement:)(unsigned int (*a1)(char *, uint64_t, uint64_t), _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(char *, char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t AssociatedConformanceWitness;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unsigned int v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  Swift::String v130;
  Swift::String v131;
  Swift::String v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t AssociatedTypeWitness;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, char *, uint64_t);
  unsigned int (*v155)(char *, uint64_t, uint64_t);
  Swift::Int v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  Swift::Int *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  Swift::Int *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;

  v155 = a1;
  v3 = a2[6];
  v168 = a2[5];
  v153 = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  v5 = *(_QWORD *)(v168 + 8);
  v6 = (void (*)(char *, char *, uint64_t))a2[3];
  swift_getAssociatedTypeWitness();
  v148 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v146 = (char *)&v136 - v8;
  v9 = a2[4];
  v10 = a2[2];
  swift_getAssociatedTypeWitness();
  v160 = v9;
  v164 = v10;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v145 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16);
  v144 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v144, v12);
  v143 = (char *)&v136 - v13;
  v14 = swift_checkMetadataState();
  v169 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14, v15);
  v142 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v141 = (char *)&v136 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v162 = (char *)&v136 - v23;
  MEMORY[0x24BDAC7A8](v22, v24);
  v26 = (char *)&v136 - v25;
  v27 = type metadata accessor for Optional();
  v29 = MEMORY[0x24BDAC7A8](v27, v28);
  v163 = (char *)&v136 - v30;
  v150 = *((_QWORD *)v6 - 1);
  MEMORY[0x24BDAC7A8](v29, v31);
  v151 = (char *)&v136 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = v5;
  v165 = swift_getAssociatedTypeWitness();
  v149 = *(_QWORD *)(v165 - 8);
  MEMORY[0x24BDAC7A8](v165, v33);
  v167 = (char *)&v136 - v34;
  v35 = swift_checkMetadataState();
  v158 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x24BDAC7A8](v35, v36);
  v159 = (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v37, v39);
  v139 = (char *)&v136 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40, v42);
  v140 = (char *)&v136 - v44;
  v46 = MEMORY[0x24BDAC7A8](v43, v45);
  v48 = (char *)&v136 - v47;
  MEMORY[0x24BDAC7A8](v46, v49);
  v51 = (char *)&v136 - v50;
  v52 = v166[1];
  v156 = *v166;
  v166 = (Swift::Int *)v166[5];
  v154 = v6;
  if (dispatch thunk of Collection.count.getter() != v52)
  {
    v173 = 0;
    v174 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v173 = 0xD000000000000020;
    v174 = 0x8000000249C30BC0;
    v175 = dispatch thunk of Collection.count.getter();
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 540877088;
    v63._object = (void *)0xE400000000000000;
    String.append(_:)(v63);
    v175 = v52;
    v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 32;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    v66 = v173;
    v67 = v174;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v68 = v66;
    *(_QWORD *)(v68 + 8) = v67;
    *(_BYTE *)(v68 + 16) = 2;
    return swift_willThrow();
  }
  v175 = Array.init()();
  v53 = type metadata accessor for Array();
  v54 = v156;
  v156 = v53;
  Array.reserveCapacity(_:)(v54);
  v173 = 1;
  v55 = lazy protocol witness table accessor for type Int and conformance Int();
  v157 = v48;
  MEMORY[0x24BD00694](&v173, MEMORY[0x24BEE1768], v55, v35, v11);
  v173 = (unint64_t)v166;
  v161 = v51;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
  v168 = *(_QWORD *)(v158 + 8);
  ((void (*)(char *, uint64_t))v168)(v48, v35);
  (*(void (**)(char *, unsigned int (*)(char *, uint64_t, uint64_t), _QWORD))(v150 + 16))(v151, v155, v154);
  dispatch thunk of Sequence.makeIterator()();
  v56 = v165;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v58 = v163;
  dispatch thunk of IteratorProtocol.next()();
  v59 = v169;
  v155 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48);
  if (v155(v58, 1, v14) == 1)
  {
    v60 = v56;
    v61 = v161;
LABEL_28:
    (*(void (**)(char *, uint64_t))(v149 + 8))(v167, v60);
    ((void (*)(char *, uint64_t))v168)(v61, v35);
    return v175;
  }
  v70 = v58;
  v152 = AssociatedConformanceWitness;
  v154 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  v71 = v153;
  v61 = v161;
  v138 = v11;
  v137 = v26;
  v171 = v35;
  while (1)
  {
    v154(v26, v70, v14);
    v72 = dispatch thunk of static BinaryInteger.isSigned.getter();
    if (((v72 ^ dispatch thunk of static BinaryInteger.isSigned.getter()) & 1) == 0)
    {
      v87 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v78 = v14;
      v79 = v11;
      if (v87 >= dispatch thunk of BinaryInteger.bitWidth.getter())
      {
        v80 = v162;
        (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v162, v26, v78);
        v84 = v26;
        v85 = v61;
        v86 = v71;
        v90 = v157;
        v91 = v171;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v92 = dispatch thunk of static Comparable.< infix(_:_:)();
        v83 = v169;
        LODWORD(v151) = v92;
        ((void (*)(char *, uint64_t))v168)(v90, v91);
LABEL_17:
        if ((v151 & 1) != 0)
          goto LABEL_31;
        goto LABEL_26;
      }
      (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v157, v61, v171);
      v80 = v162;
      goto LABEL_14;
    }
    v73 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v75 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v73 & 1) == 0)
    {
      v88 = v35;
      v78 = v14;
      v80 = v162;
      if (v74 >= v75)
      {
        v104 = v148;
        v105 = AssociatedTypeWitness;
        v106 = swift_getAssociatedConformanceWitness();
        v107 = v146;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, v105, v106);
        MEMORY[0x24BD00904](v107, v14, v104);
        v108 = v153;
        LOBYTE(v104) = dispatch thunk of static Comparable.> infix(_:_:)();
        v109 = v169;
        v110 = *(void (**)(char *, uint64_t))(v169 + 8);
        v110(v80, v78);
        v111 = v139;
        (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v139, v61, v88);
        v112 = v142;
        (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v142, v26, v78);
        if ((v104 & 1) == 0)
        {
          v110(v112, v78);
          ((void (*)(char *, uint64_t))v168)(v111, v171);
          v86 = v108;
          v83 = v169;
          v80 = v162;
          v79 = v138;
          v84 = v137;
          goto LABEL_26;
        }
        v113 = v157;
        v114 = v108;
        v115 = v171;
        v79 = v138;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v102 = dispatch thunk of static Comparable.< infix(_:_:)();
        v116 = (void (*)(char *, uint64_t))v168;
        ((void (*)(char *, uint64_t))v168)(v113, v115);
        v116(v111, v115);
        v85 = v61;
        v86 = v114;
        v83 = v169;
        v80 = v162;
        goto LABEL_23;
      }
      (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v157, v61, v88);
      v79 = v138;
      v71 = v153;
LABEL_14:
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v89 = dispatch thunk of static Comparable.< infix(_:_:)();
      v84 = v26;
      v83 = v169;
      (*(void (**)(char *, uint64_t))(v169 + 8))(v80, v78);
      v85 = v61;
      v86 = v71;
      if ((v89 & 1) != 0)
        goto LABEL_31;
      goto LABEL_26;
    }
    if (v75 < v74)
    {
      v76 = v169;
      v77 = v35;
      v78 = v14;
      v79 = v11;
      v80 = v162;
      (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v162, v26, v78);
      v81 = v157;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v82 = v26;
      v83 = v76;
      LODWORD(v151) = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, uint64_t))v168)(v81, v77);
      v84 = v82;
      v85 = v61;
      v86 = v153;
      goto LABEL_17;
    }
    v93 = v145;
    v94 = v144;
    v95 = swift_getAssociatedConformanceWitness();
    v96 = v143;
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v94, v95);
    v97 = v157;
    MEMORY[0x24BD00904](v96, v35, v93);
    LOBYTE(v93) = dispatch thunk of static Comparable.< infix(_:_:)();
    ((void (*)(char *, uint64_t))v168)(v97, v35);
    v98 = v140;
    v99 = v26;
    (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v140, v61, v35);
    v83 = v169;
    v100 = v141;
    (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v141, v99, v14);
    if ((v93 & 1) != 0)
      break;
    v78 = v14;
    v79 = v11;
    v80 = v162;
    v101 = v100;
    v86 = v153;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v102 = dispatch thunk of static Comparable.< infix(_:_:)();
    v103 = *(void (**)(char *, uint64_t))(v169 + 8);
    v103(v80, v78);
    v103(v101, v78);
    v83 = v169;
    v85 = v161;
LABEL_23:
    v84 = v137;
    if ((v102 & 1) != 0)
      goto LABEL_31;
LABEL_26:
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v80, v84, v78);
    v117 = (uint64_t)v159;
    v118 = v86;
    v119 = v86;
    v120 = v84;
    MEMORY[0x24BD00694](v80, v78, v119);
    v121 = v170;
    v122 = static FieldElement.integerToBitVector(input:bitWidth:)(v117, (Swift::Int)v166, v164, v160);
    v170 = v121;
    if (v121)
    {
      v128 = v171;
      v129 = (void (*)(char *, uint64_t))v168;
      ((void (*)(uint64_t, uint64_t))v168)(v117, v171);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v120, v78);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v167, v165);
      v129(v161, v128);
      return swift_bridgeObjectRelease();
    }
    v123 = v122;
    v11 = v79;
    v124 = v117;
    v125 = v171;
    ((void (*)(uint64_t, uint64_t))v168)(v124, v171);
    v173 = v123;
    MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v156);
    Array.append<A>(contentsOf:)();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v120, v78);
    v126 = v163;
    v60 = v165;
    dispatch thunk of IteratorProtocol.next()();
    v70 = v126;
    v127 = v155(v126, 1, v78);
    v26 = v120;
    v61 = v161;
    v14 = v78;
    v35 = v125;
    v71 = v118;
    if (v127 == 1)
      goto LABEL_28;
  }
  (*(void (**)(char *, uint64_t))(v83 + 8))(v100, v14);
  ((void (*)(char *, uint64_t))v168)(v98, v35);
  v78 = v14;
  v85 = v161;
  v84 = v137;
LABEL_31:
  v173 = 0;
  v174 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  v130._object = (void *)0x8000000249C30BF0;
  v130._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v130);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v131._countAndFlagsBits = 0x646957746962202CLL;
  v131._object = (void *)0xEB000000003D6874;
  String.append(_:)(v131);
  v172 = v166;
  v132._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v132);
  swift_bridgeObjectRelease();
  v134 = v173;
  v133 = v174;
  lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  swift_allocError();
  *(_QWORD *)v135 = v134;
  *(_QWORD *)(v135 + 8) = v133;
  *(_BYTE *)(v135 + 16) = 1;
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v78);
  (*(void (**)(char *, uint64_t))(v149 + 8))(v167, v165);
  ((void (*)(char *, uint64_t))v168)(v85, v171);
  return swift_bridgeObjectRelease();
}

uint64_t SumVectorType.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized SumVectorType.decode(data:numOfMeasurements:)(a1, a3);
}

uint64_t SumVectorType.truncate(measurement:)(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = MEMORY[0x24BDAC7A8](a1, a2);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  v31 = v2[1];
  v11 = v2[5];
  v12 = MEMORY[0x24BD00400](v7, v6);
  if (v12 != v10)
  {
    v13 = v12;
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v32 = 0xD00000000000001BLL;
    v33 = 0x8000000249C307C0;
    v34 = v13;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    v34 = v10;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = v32;
    v5 = v33;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v18 = v17;
    *(_QWORD *)(v18 + 8) = v5;
    *(_BYTE *)(v18 + 16) = 2;
    swift_willThrow();
    return v5;
  }
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
    return v5;
  }
  v32 = Array.init()();
  v19 = type metadata accessor for Array();
  v20 = v31;
  v31 = v19;
  Array.reserveCapacity(_:)(v20);
  result = MEMORY[0x24BD00400](v5, v6);
  if (v11)
  {
    v22 = result;
    v23 = result >= 0;
    if (v11 > 0)
      v23 = result < 1;
    if (v23)
      return v32;
    result = 0;
    while (1)
    {
      v24 = __OFADD__(result, v11) ? ((result + v11) >> 63) ^ 0x8000000000000000 : result + v11;
      if (__OFADD__(result, v11))
        break;
      if (result + v11 < result)
        goto LABEL_23;
      v25 = Array.subscript.getter();
      FieldElement.init(inputVector:)(v25, v26, v27, v28, v6, *(_QWORD *)(a2 + 32), (uint64_t)v9);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
      Array.append(_:)();
      v29 = v22 >= v24;
      if (v11 > 0)
        v29 = v24 >= v22;
      result = v24;
      if (v29)
        return v32;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SumVectorType.evaluateGadget<A>(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = type metadata accessor for MultiplicationGadget(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a3);
  v10 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v9);
  v12 = type metadata accessor for ParallelSum(0, v9, v10, v11);
  return ParallelSum.evaluate<A>(at:)(a1, v12, a3, a4, a5);
}

uint64_t SumVectorType.evaluateGadget(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _OWORD *v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = v4[4];
  v18 = v4[3];
  v19 = v6;
  v20 = v4[5];
  v17 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = type metadata accessor for MultiplicationGadget(255, v7, v8, a3);
  v10 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v9);
  v12 = type metadata accessor for ParallelSum(0, v9, v10, v11);
  type metadata accessor for Polynomial(255, v7, v8, v13);
  v14 = type metadata accessor for Array();
  v15 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v14);
  return ParallelSum.evaluate<A>(at:)((uint64_t)&v17, v12, v14, v15, a4);
}

uint64_t SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t);
  uint64_t v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *AssociatedTypeWitness;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t AssociatedConformanceWitness;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v93 = a4;
  v82 = a3;
  v90 = a6;
  v9 = *(_QWORD *)(a5 + 32);
  v109 = a5;
  v10 = *(_QWORD *)(a5 + 16);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness();
  v85 = *(AssociatedTypeWitness - 1);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v11);
  v84 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v83 = (char *)&v80 - v16;
  v91 = *(_QWORD *)(v10 - 8);
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v89 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v23 = (char *)&v80 - v22;
  v25 = MEMORY[0x24BDAC7A8](v21, v24);
  v27 = (char *)&v80 - v26;
  MEMORY[0x24BDAC7A8](v25, v28);
  v88 = (char *)&v80 - v29;
  v30 = v6[1];
  v103 = *v6;
  v31 = v6[2];
  v32 = v6[4];
  v33 = v6[5];
  v106 = v6[3];
  v107 = v32;
  v108 = v33;
  v104 = v30;
  v105 = v31;
  v34 = v103;
  v87 = a1;
  v35 = MEMORY[0x24BD00400](a1, v10);
  if (v35 != v34)
  {
    v69 = v35;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v97 = 0xD00000000000001BLL;
    *((_QWORD *)&v97 + 1) = 0x8000000249C307C0;
LABEL_7:
    v95 = v69;
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 540877088;
    v71._object = (void *)0xE400000000000000;
    String.append(_:)(v71);
    v95 = v34;
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73 = v97;
    v74 = &v111;
    goto LABEL_8;
  }
  v34 = v104;
  v36 = MEMORY[0x24BD00400](a2, v10);
  if (v36 != v34)
  {
    v69 = v36;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v97 = 0xD000000000000019;
    *((_QWORD *)&v97 + 1) = 0x8000000249C31120;
    goto LABEL_7;
  }
  v81 = a2;
  v38 = v6[3];
  v99 = v6[2];
  v100 = v38;
  v39 = v6[5];
  v101 = v6[4];
  v102 = v39;
  v40 = v6[1];
  v97 = *v6;
  v98 = v40;
  v41 = type metadata accessor for GadgetEvaluation(0, v10, v9, v37);
  v42 = MEMORY[0x24BD00400](v93, v41);
  v43 = *(_QWORD *)(SumVectorType.gadgetParameters.getter(v109) + 16);
  swift_bridgeObjectRelease();
  v80 = v42;
  if (v42 == v43)
  {
    *(_QWORD *)&v97 = v82;
    v44 = AssociatedTypeWitness;
    v45 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
    v46 = lazy protocol witness table accessor for type Int and conformance Int();
    v82 = v41;
    v47 = v83;
    MEMORY[0x24BD00694](&v97, MEMORY[0x24BEE1768], v46, v44, v45);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 128))(v47, v10, v9);
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v23, v27, v10);
    v48 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 136))(v23, v10, v9);
    v49 = swift_checkMetadataState();
    v50 = v84;
    (*(void (**)(uint64_t, uint64_t))(v9 + 88))(v10, v9);
    (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 112))(v50, v49);
    (*(void (**)(char *, _QWORD *))(v85 + 8))(v50, v44);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 96))(v47, v10, v9);
    AssociatedTypeWitness = *(_QWORD **)(v91 + 8);
    ((void (*)(char *, uint64_t))AssociatedTypeWitness)(v27, v10);
    v51 = v89;
    v52 = v81;
    Array.subscript.getter();
    v97 = v106;
    v98 = v107;
    v99 = v108;
    v95 = v87;
    v53 = type metadata accessor for Array();
    swift_bridgeObjectRetain();
    MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v53);
    v54 = ArraySlice.init<A>(_:)();
    AssociatedConformanceWitness = v55;
    v91 = v56;
    v87 = v57;
    v58 = Array.subscript.getter();
    v94 = v95;
    MEMORY[0x24BDAC7A8](v58, v59);
    v60 = v109;
    v61 = *(_QWORD *)(v109 + 24);
    *(&v80 - 10) = v10;
    *(&v80 - 9) = v61;
    *(&v80 - 8) = v9;
    *(_OWORD *)(&v80 - 7) = *(_OWORD *)(v60 + 40);
    *(&v80 - 5) = (unint64_t)v51;
    *(&v80 - 4) = (unint64_t)v48;
    *(&v80 - 3) = v52;
    *(&v80 - 2) = (unint64_t)&v103;
    v63 = type metadata accessor for MultiplicationGadget(255, v10, v9, v62);
    v64 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v63);
    v66 = type metadata accessor for ParallelSum(0, v63, v64, v65);
    ParallelSum.chunkEvaluateSum(_:for:_:)(v54, AssociatedConformanceWitness, v91, v87, &v94, (void (*)(void))partial apply for closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:), (uint64_t)(&v80 - 12), v66, v90);
    outlined consume of GadgetEvaluation<A><A, B>(v94);
    swift_unknownObjectRelease();
    v67 = (uint64_t (*)(char *, uint64_t))AssociatedTypeWitness;
    ((void (*)(char *, uint64_t))AssociatedTypeWitness)(v48, v10);
    return v67(v51, v10);
  }
  v95 = 0;
  v96 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v95 = 0x2064696C61766E49;
  v96 = 0xEF203A746E756F63;
  v94 = v80;
  v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  v78._countAndFlagsBits = 540877088;
  v78._object = (void *)0xE400000000000000;
  String.append(_:)(v78);
  SumVectorType.gadgetParameters.getter(v109);
  v79._countAndFlagsBits = MEMORY[0x24BD00394]();
  String.append(_:)(v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = v95;
  v74 = &v110;
LABEL_8:
  v75 = *(v74 - 32);
  lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  swift_allocError();
  *(_QWORD *)v76 = v73;
  *(_QWORD *)(v76 + 8) = v75;
  *(_BYTE *)(v76 + 16) = 2;
  return swift_willThrow();
}

uint64_t closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t a1, void (*a2)(unint64_t, char *, uint64_t), uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(uint64_t, uint64_t);
  char *v63;
  char *v64;
  void (*v65)(char *, _QWORD *);
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  Swift::Int v71;
  char isClassOrObjCExistentialType;
  uint64_t v73;
  unint64_t v74;
  void (*v75)(unint64_t, char *, uint64_t);
  char *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  void (*v82)(uint64_t, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  void (*v87)(char *, _QWORD *);
  uint64_t v88;
  Swift::Int v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  Swift::Int v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  Swift::Int v127;
  void (*v128)(char *, char *, uint64_t);
  void (*v129)(char *, _QWORD *);
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t);
  void (*v133)(uint64_t, uint64_t);
  void (*v134)(char *, char *);
  uint64_t v135;
  void (*v136)(char *, uint64_t, uint64_t);
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  _QWORD *AssociatedTypeWitness;
  uint64_t v142;
  Swift::Int AssociatedConformanceWitness;
  void (*v144)(unint64_t, char *, uint64_t);
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  Swift::Int v148;

  v119 = a8;
  v124 = a7;
  v142 = a6;
  v123 = a5;
  swift_getAssociatedTypeWitness();
  v147 = a12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness();
  v118 = *(AssociatedTypeWitness - 1);
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v16);
  v140 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v139 = (char *)&v111 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20, v22);
  v138 = (char *)&v111 - v24;
  v122 = *(_QWORD *)(a10 - 8);
  v26 = MEMORY[0x24BDAC7A8](v23, v25);
  v113 = (char *)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26, v28);
  v112 = (char *)&v111 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29, v31);
  v117 = (char *)&v111 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v121 = (char *)&v111 - v36;
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v120 = (char *)&v111 - v39;
  v41 = MEMORY[0x24BDAC7A8](v38, v40);
  v116 = (char *)&v111 - v42;
  MEMORY[0x24BDAC7A8](v41, v43);
  v45 = (char *)&v111 - v44;
  v144 = a2;
  v145 = a3;
  v146 = a4;
  result = ArraySlice.count.getter();
  if (result < 0)
    goto LABEL_25;
  v47 = result;
  if (result)
  {
    v48 = v147;
    v136 = *(void (**)(char *, uint64_t, uint64_t))(v147 + 136);
    v49 = swift_checkMetadataState();
    v50 = 0;
    v134 = *(void (**)(char *, char *))(AssociatedConformanceWitness + 80);
    v135 = v49;
    v51 = 1;
    v52 = *(void (**)(uint64_t, uint64_t))(v48 + 88);
    v132 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 96);
    v133 = v52;
    v115 = a1;
    v137 = v45;
    v114 = v47;
    while (1)
    {
      v53 = ArraySlice.startIndex.getter();
      v54 = __OFADD__(v53, v50);
      result = v53 + v50;
      if (v54)
        break;
      result = ArraySlice.subscript.getter();
      if (v50 == 0x4000000000000000)
        goto LABEL_23;
      v131 = v50 + 1;
      v127 = v51 - 1;
      v55 = v122;
      v56 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
      v128 = v56;
      v57 = v120;
      v56(v120, (char *)v142, a10);
      v58 = v121;
      v56(v121, v45, a10);
      v59 = v116;
      v148 = v51;
      v60 = v147;
      v136(v58, a10, v147);
      v61 = v139;
      v62 = v133;
      v133(a10, v60);
      v63 = v140;
      v62(a10, v60);
      v64 = v138;
      v134(v61, v63);
      v65 = *(void (**)(char *, _QWORD *))(v118 + 8);
      v129 = v65;
      v66 = v63;
      v67 = AssociatedTypeWitness;
      v65(v66, AssociatedTypeWitness);
      v65(v61, v67);
      v132(v64, a10, v60);
      v130 = *(void (**)(char *, uint64_t))(v55 + 8);
      v130(v57, a10);
      v68 = type metadata accessor for Array();
      v69 = v123;
      Array._makeMutableAndUnique()();
      v70 = *v69;
      v71 = v127;
      Array._checkSubscript_mutating(_:)(v127);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v73 = v70 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v73 = v70;
      v126 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      v125 = *(_QWORD *)(v55 + 72);
      v74 = v73 + v126 + v125 * v71;
      v75 = *(void (**)(unint64_t, char *, uint64_t))(v55 + 40);
      v75(v74, v59, a10);
      AggregateShare.share.modify(v68);
      v128(v57, v137, a10);
      v76 = v117;
      v136(v57, a10, v60);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      Array._makeMutableAndUnique()();
      v77 = *v69;
      Array._checkSubscript_mutating(_:)(v148);
      v78 = _swift_isClassOrObjCExistentialType();
      v79 = v77 & 0xFFFFFFFFFFFFFF8;
      if ((v78 & 1) == 0)
        v79 = v77;
      v80 = v137;
      v75(v79 + v126 + v125 * v148, v76, a10);
      AggregateShare.share.modify(v68);
      Array.subscript.getter();
      v81 = v139;
      v82 = v133;
      v133(a10, v60);
      v83 = v140;
      v82(a10, v60);
      v84 = v138;
      v134(v81, v83);
      v85 = v83;
      v86 = AssociatedTypeWitness;
      v87 = v129;
      v129(v85, AssociatedTypeWitness);
      v87(v81, v86);
      v88 = v60;
      v89 = v148;
      v132(v84, a10, v88);
      v90 = v130;
      v50 = v131;
      v130(v57, a10);
      v45 = v80;
      v90(v80, a10);
      v51 = v89 + 2;
      if (v114 == v50)
        goto LABEL_11;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  result = ArraySlice.count.getter();
  v91 = *(_QWORD *)(a9 + 88);
  if (v91 < result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v91 != result)
  {
    v92 = v91 - result;
    if (v91 <= result)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    AssociatedTypeWitness = *(_QWORD **)(v147 + 136);
    v93 = result + 0x4000000000000000;
    v94 = 2 * result;
    v95 = v123;
    while ((v93 & 0x8000000000000000) == 0)
    {
      v96 = v112;
      v148 = v92;
      dispatch thunk of IteratorProtocol.next()();
      v97 = type metadata accessor for Array();
      v142 = v97;
      Array._makeMutableAndUnique()();
      v98 = *v95;
      Array._checkSubscript_mutating(_:)(v94);
      v99 = _swift_isClassOrObjCExistentialType();
      v100 = v98 & 0xFFFFFFFFFFFFFF8;
      if ((v99 & 1) == 0)
        v100 = v98;
      v101 = v122;
      v146 = (*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
      v102 = *(_QWORD *)(v122 + 72);
      v144 = *(void (**)(unint64_t, char *, uint64_t))(v122 + 40);
      v145 = v102;
      v144(v100 + v146 + v102 * v94, v96, a10);
      AggregateShare.share.modify(v97);
      AssociatedConformanceWitness = v94 + 1;
      v103 = v120;
      dispatch thunk of IteratorProtocol.next()();
      v104 = v121;
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v121, v103, a10);
      v105 = v113;
      ((void (*)(char *, uint64_t, uint64_t))AssociatedTypeWitness)(v104, a10, v147);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v103, a10);
      v106 = v142;
      Array._makeMutableAndUnique()();
      v107 = *v95;
      v108 = AssociatedConformanceWitness;
      Array._checkSubscript_mutating(_:)(AssociatedConformanceWitness);
      v109 = _swift_isClassOrObjCExistentialType();
      v110 = v107 & 0xFFFFFFFFFFFFFF8;
      if ((v109 & 1) == 0)
        v110 = v107;
      v144(v110 + v146 + v145 * v108, v105, a10);
      result = AggregateShare.share.modify(v106);
      ++v93;
      v94 += 2;
      v92 = v148 - 1;
      if (v148 == 1)
        return result;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t protocol witness for FullyLinearProof.encode(measurement:) in conformance SumVectorType<A, B>(unsigned int (*a1)(char *, uint64_t, uint64_t), _QWORD *a2)
{
  return SumVectorType.encode(measurement:)(a1, a2);
}

uint64_t protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance SumVectorType<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized SumVectorType.decode(data:numOfMeasurements:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t protocol witness for FullyLinearProof.truncate(measurement:) in conformance SumVectorType<A, B>(unint64_t a1, uint64_t a2)
{
  return SumVectorType.truncate(measurement:)(a1, a2);
}

uint64_t protocol witness for FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:) in conformance SumVectorType<A, B>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget<A>(_:at:) in conformance SumVectorType<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return SumVectorType.evaluateGadget<A>(_:at:)(a1, a4, a2, a3, a5);
}

uint64_t specialized SumVectorType.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (MEMORY[0x24BD00400](a1, v6) == v5)
    return static FieldElement.elementsToIntegers(_:)(a1, v6, *(_QWORD *)(a2 + 32));
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 540877088;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  swift_allocError();
  *(_QWORD *)v11 = 0xD000000000000016;
  *(_QWORD *)(v11 + 8) = 0x8000000249C30730;
  *(_BYTE *)(v11 + 16) = 2;
  return swift_willThrow();
}

uint64_t partial apply for closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t a1, void (*a2)(unint64_t, char *, uint64_t), uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;

  return closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4, a5, v5[7], v5[8], v5[9], v5[10], v5[2], v5[3], v5[4]);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for SumVectorType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SumVectorType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for SumVectorType()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg5072_s4VDAF15PINEPublicShareV4from9parameterACyxGqd___SiSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E38VSiXEfU_AA19XofHmacSha256Aes128C_SWTG5s10ArraySliceVys0T0VGTf1cn_nTm(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v5 = v3;
  v6 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v6;
  v8 = result;
  v15 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = v15;
    if (a2 <= v8)
      v9 = v8;
    else
      v9 = a2;
    for (i = v9 - v8; ; --i)
    {
      result = specialized closure #1 in PINEPublicShare.init<A>(from:parameter:)(a3);
      if (v5)
      {
        swift_release();
        return v6;
      }
      v11 = result;
      v5 = 0;
      v13 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      if (v13 >= v12 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      *(_QWORD *)(v15 + 16) = v13 + 1;
      *(_QWORD *)(v15 + 8 * v13 + 32) = v11;
      if (a2 < v8)
        break;
      if (!i)
        goto LABEL_18;
      if (!--v4)
        return v6;
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5020_s4VDAF4PINEV14splite65Bytes33_96F6F895E25AE9C9B366289ACE02F486LLySayAA0D0V16measurementg26_AG05proofO0AG24wraparoundjkl117AG012verificationrsT0tG12helperShares_AG016leaderWraparoundrsT0AG0x12VerificationrsT0AG05provesD0tqd__SkRd__s5UInt8V7B89Rtd__lFAgH_AgigjgKtSiXEfU_AA7Field64V_SRySfGAA19XofHmacSha256Aes128C10Foundation4DataVTG5s10ArraySliceVys5UInt8VGTf1cn_n(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v21;

  v19 = result;
  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v21 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = v21;
    v6 = a2;
    if (a2 <= v19)
      v6 = v19;
    for (i = v6 - v19; ; --i)
    {
      result = specialized closure #1 in PINE.splitSeedBytes<A>(_:)(a3);
      if (v3)
      {
        swift_release();
        return v5;
      }
      v11 = result;
      v12 = v8;
      v13 = v9;
      v14 = v10;
      v16 = *(_QWORD *)(v21 + 16);
      v15 = *(_QWORD *)(v21 + 24);
      if (v16 >= v15 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1);
      *(_QWORD *)(v21 + 16) = v16 + 1;
      v17 = (_QWORD *)(v21 + 32 * v16);
      v17[4] = v11;
      v17[5] = v12;
      v17[6] = v13;
      v17[7] = v14;
      if (a2 < v19)
        break;
      if (!i)
        goto LABEL_17;
      if (!--v4)
        return v5;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field64VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f28VXEfU_AA13SumVectorTypeVyAA7I14VSWG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v5 = 0;
    v35 = a2;
    v36 = a1 + 32;
    v34 = v3;
    while (1)
    {
      v6 = (uint64_t *)(v36 + 40 * v5);
      v7 = *v6;
      if (*v6 < 0)
        break;
      v8 = a2[2];
      v9 = a2[3] >> 1;
      v10 = v9 - v8;
      if (__OFSUB__(v9, v8))
        goto LABEL_54;
      v37 = v5;
      v11 = v6[2];
      v12 = a2[1];
      if (!v7 || v10 < 0 || (v13 = a2[3] >> 1, v10 >= v7))
      {
        v13 = v8 + v7;
        if (__OFADD__(v8, v7))
          goto LABEL_65;
      }
      if (v13 < v8)
        goto LABEL_55;
      if (v9 < v8)
        goto LABEL_56;
      if (v9 < v13)
        goto LABEL_57;
      if (v13 < 0)
        goto LABEL_58;
      if (!v7 || v10 < 0 || v10 >= v7)
      {
        v14 = __OFADD__(v8, v7);
        v15 = v8 + v7;
        if (v14)
          goto LABEL_66;
        if (v9 < v15)
          goto LABEL_59;
        v9 = v15;
      }
      if (v9 < v8)
        goto LABEL_60;
      a2[2] = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GadgetWireInputs<Field64>);
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = 0;
      v17 = v13 - v8;
      if (__OFSUB__(v13, v8))
        goto LABEL_61;
      *(_QWORD *)(v16 + 24) = v11;
      v18 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_62;
      if (v18 < 0)
        goto LABEL_63;
      v38 = v16;
      swift_unknownObjectRetain();
      if (v11 == -1)
      {
        v19 = MEMORY[0x24BEE4AF8];
        if (v17 < 0)
          goto LABEL_64;
      }
      else
      {
        v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v19 + 16) = v18;
        bzero((void *)(v19 + 32), 8 * v11 + 8);
        if (v17 < 0)
          goto LABEL_64;
      }
      if (v17)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Field64]);
        v20 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v21 = v20;
        v20[2] = v17;
        v20[4] = v19;
        if (v17 == 1)
        {
          *(_QWORD *)(v38 + 32) = v20;
          v22 = (_QWORD **)(v38 + 32);
        }
        else
        {
          v20[5] = v19;
          v23 = v17 - 2;
          if (v17 != 2)
          {
            v24 = v20 + 6;
            do
            {
              *v24++ = v19;
              swift_bridgeObjectRetain();
              --v23;
            }
            while (v23);
          }
          *(_QWORD *)(v38 + 32) = v21;
          v22 = (_QWORD **)(v38 + 32);
          swift_bridgeObjectRetain();
        }
        swift_beginAccess();
        v25 = 0;
        if (v13 <= v8)
          v26 = v8;
        else
          v26 = v13;
        v27 = v26 - v8;
        v28 = v12 + 8 * v8;
        while (v27 != v25)
        {
          v29 = *(_QWORD *)(v28 + 8 * v25);
          v30 = *v22;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          if (v25 >= v30[2])
            goto LABEL_52;
          v31 = &v30[v25];
          v32 = (char *)v31[4];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v31[4] = v32;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if (!*((_QWORD *)v32 + 2))
              goto LABEL_49;
          }
          else
          {
            v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
            v31[4] = v32;
            if (!*((_QWORD *)v32 + 2))
            {
LABEL_49:
              __break(1u);
              return;
            }
          }
          ++v25;
          *((_QWORD *)v32 + 4) = v29;
          *v22 = v30;
          if (v17 == v25)
            goto LABEL_4;
        }
        __break(1u);
LABEL_52:
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v38 + 32) = MEMORY[0x24BEE4AF8];
LABEL_4:
      v5 = v37 + 1;
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      a2 = v35;
      if (v37 + 1 == v34)
        return;
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
}

uint64_t specialized static VDAFProtocol.domainSeparationTag(usage:)(unsigned __int8 a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  int v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x24BEE4AF8]);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  v5 = v3 >> 1;
  v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
    v3 = *((_QWORD *)v2 + 3);
    v5 = v3 >> 1;
  }
  *((_QWORD *)v2 + 2) = v6;
  v2[v4 + 32] = 8;
  if (v5 < (uint64_t)(v4 + 2))
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 2, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 2;
  v2[v6 + 32] = 0;
  v11[0] = v2;
  v10 = 51445759;
  v7 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v10, (unint64_t)v11);
  specialized Array.append<A>(contentsOf:)(v7);
  LOWORD(v10) = __rev16(a1 + 1);
  v8 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v10, (unint64_t)&v10 + 2);
  specialized Array.append<A>(contentsOf:)(v8);
  return v11[0];
}

uint64_t specialized VerificationJointRandomness.seed.getter()
{
  return specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>, (uint64_t)&protocol conformance descriptor for VerificationJointRandomness<A, B>);
}

uint64_t specialized VerificationJointRandomness.seed.getter(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (v3[3])
  {
    v4 = v3[3];
  }
  else
  {
    v5 = v3;
    v6 = *v3;
    v7 = v5[2];
    v8 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(a1, a2, a3);
    v4 = static JointRandomness.jointRandSeed(parts:)(v7, v6, v8);
    v5[3] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t specialized VerificationJointRandomness.xof.getter()
{
  return specialized VerificationJointRandomness.xof.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static VDAFProtocol.domainSeparationTag(usage:));
}

uint64_t specialized VerificationJointRandomness.xof.getter(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  if (*(_QWORD *)(v3 + 32))
  {
    v4 = *(_QWORD *)(v3 + 32);
LABEL_6:
    swift_retain();
    return v4;
  }
  v6 = specialized VerificationJointRandomness.seed.getter(a1, a2, (uint64_t)&protocol conformance descriptor for VerificationJointRandomness<A, B>);
  v7 = a3(2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_249C29130;
  v9 = *(_QWORD *)(v3 + 48);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 <= 0xFF)
  {
    *(_BYTE *)(result + 32) = v9;
    v4 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v6, v7, result);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 32) = v4;
    swift_retain();
    swift_release();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  v12 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) == 32)
  {
    type metadata accessor for XofHmacSha256Aes128(0);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a1, a2, a3);
    if (!*(_QWORD *)(result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
    {
      v17 = result;
      v18 = result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v18, v6);
      HMAC.finalize()();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      return v17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized VerificationJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:count:numOfProofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized VerificationJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:count:numOfProofs:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &lazy protocol witness table cache variable for type VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>);
}

_QWORD *specialized VerificationJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:count:numOfProofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v21 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(a11, a12, (uint64_t)&protocol conformance descriptor for VerificationJointRandomness<A, B>);
  v22 = static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a1, a2, a3, a4, a5, a6, a7, a8, v12, v21);
  swift_bridgeObjectRelease();
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = 0;
  v23[5] = a9;
  v23[6] = a10;
  v23[2] = v22;
  v23[3] = 0;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t specialized static FieldElement.randomVector<A>(count:using:)(int64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t result;
  Swift::String v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;

  if (a1 < 0)
    goto LABEL_53;
  v3 = a1;
  v4 = MEMORY[0x24BEE4AF8];
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  v55 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1, 0);
  v6 = 0;
  v7 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  v50 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  v51 = a2;
  v48 = v3;
LABEL_4:
  if (v6 == v3)
    goto LABEL_54;
  v49 = v6 + 1;
LABEL_6:
  v54 = v4;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
  v8 = 0;
  v9 = v54;
  while (1)
  {
    v10 = *(_QWORD *)(a2 + v7);
    if (!v10)
      goto LABEL_50;
    v11 = *(char **)(v10 + 16);
    if (!*((_QWORD *)v11 + 2))
      break;
    swift_retain();
LABEL_15:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v20 = *((_QWORD *)v11 + 2);
      if (!v20)
        goto LABEL_52;
    }
    else
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
      v20 = *((_QWORD *)v11 + 2);
      if (!v20)
        goto LABEL_52;
    }
    v21 = v20 - 1;
    v22 = v11[v21 + 32];
    *((_QWORD *)v11 + 2) = v21;
    *(_QWORD *)(v10 + 16) = v11;
    swift_release();
    v54 = v9;
    v24 = *(_QWORD *)(v9 + 16);
    v23 = *(_QWORD *)(v9 + 24);
    v2 = (_QWORD *)(v24 + 1);
    if (v24 >= v23 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
      v9 = v54;
    }
    ++v8;
    *(_QWORD *)(v9 + 16) = v2;
    *(_BYTE *)(v9 + v24 + 32) = v22;
    if (v8 == 8)
    {
      if (v24 != 7)
      {
        *(_QWORD *)&v52 = 0;
        *((_QWORD *)&v52 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v52 = 0xD000000000000019;
        *((_QWORD *)&v52 + 1) = 0x8000000249C303D0;
        v54 = 8;
        v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        v33._countAndFlagsBits = 0x203A746F67202CLL;
        v33._object = (void *)0xE700000000000000;
        String.append(_:)(v33);
        v54 = v24 + 1;
        v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35 = v52;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v2 = (_QWORD *)swift_allocError();
        *(_OWORD *)v36 = v35;
        *(_BYTE *)(v36 + 16) = 0;
        goto LABEL_36;
      }
      v2 = 0;
      v31 = swift_retain();
      v37 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(v31);
      swift_release();
      if (v37 >= 0xFFFFFFFF00000001)
      {
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v2 = (_QWORD *)swift_allocError();
        *(_QWORD *)v38 = 0;
        *(_QWORD *)(v38 + 8) = 0;
        *(_BYTE *)(v38 + 16) = 5;
LABEL_36:
        swift_willThrow();
        swift_release();
        v54 = (uint64_t)v2;
        MEMORY[0x24BD00B44](v2);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast())
          goto LABEL_56;
        v40 = *((_QWORD *)&v52 + 1);
        v39 = v52;
        v41 = v53;
        if (v53 != 5 || v52 != 0)
          goto LABEL_55;
        MEMORY[0x24BD00B38](v2, *((_QWORD *)&v52 + 1));
        MEMORY[0x24BD00B38](v54);
        v4 = MEMORY[0x24BEE4AF8];
        goto LABEL_6;
      }
      specialized FieldElement.init(_:)(v37, (unint64_t *)&v52);
      swift_release();
      v42 = v52;
      v43 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1);
        v43 = v55;
      }
      v3 = v48;
      v45 = *(_QWORD *)(v43 + 16);
      v44 = *(_QWORD *)(v43 + 24);
      if (v45 >= v44 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1);
        v43 = v55;
      }
      *(_QWORD *)(v43 + 16) = v45 + 1;
      *(_QWORD *)(v43 + 8 * v45 + 32) = v42;
      v6 = v49;
      v4 = MEMORY[0x24BEE4AF8];
      if (v49 == v48)
        return v43;
      goto LABEL_4;
    }
  }
  v12 = v10 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  v13 = v10 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
  swift_beginAccess();
  swift_retain();
  v2 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v2[2] = 16;
  v2[5] = 0;
  v2[4] = 0;
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 8);
  v16 = *(unsigned int *)(v13 + 12);
  specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(v2 + 4), (uint64_t)(v2 + 6), v12, *(_QWORD *)v13, v15 | (v16 << 32));
  v17 = bswap32(v16);
  *(_DWORD *)(v13 + 12) = bswap32(v17 + 1);
  if (v17 == -1)
  {
    v18 = bswap32(v15);
    *(_DWORD *)(v13 + 8) = bswap32(v18 + 1);
    if (v18 == -1)
      *(_QWORD *)v13 = bswap64(bswap64(v14) + 1);
  }
  swift_endAccess();
  v19 = v2[2];
  if (v19 < 2)
  {
LABEL_14:
    *(_QWORD *)(v10 + 16) = v2;
    swift_bridgeObjectRelease();
    v11 = *(char **)(v10 + 16);
    v7 = v50;
    a2 = v51;
    if (!*((_QWORD *)v11 + 2))
      goto LABEL_51;
    goto LABEL_15;
  }
  v25 = 0;
  v26 = v19 >> 1;
  v27 = v19 + 31;
  while (1)
  {
    if (v25 == v27 - 32)
      goto LABEL_23;
    v28 = v2[2];
    if (v25 >= v28)
      break;
    if (v27 - 32 >= v28)
      goto LABEL_49;
    v29 = *((_BYTE *)v2 + v25 + 32);
    v30 = *((_BYTE *)v2 + v27);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
    *((_BYTE *)v2 + v25 + 32) = v30;
    *((_BYTE *)v2 + v27) = v29;
LABEL_23:
    ++v25;
    --v27;
    if (v26 == v25)
      goto LABEL_14;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  v39 = swift_unexpectedError();
  __break(1u);
LABEL_55:
  outlined consume of VDAFError(v39, v40, v41);
LABEL_56:
  MEMORY[0x24BD00B38](v54);
  *(_QWORD *)&v52 = 0;
  *((_QWORD *)&v52 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v47._object = (void *)0x8000000249C30420;
  v47._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v47);
  v54 = (uint64_t)v2;
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PINEPrepareState.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t result;
  _QWORD *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  if ((a6 & 1) != 0)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v26 = 0;
    v26[1] = 0;
    return swift_willThrow();
  }
  if (a1)
    v13 = a2 - a1;
  else
    v13 = 0;
  if ((unint64_t)(a5 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_56;
  }
  v10 = 8 * a5;
  v7 = 8 * a5 + a4;
  if (__OFADD__(8 * a5, a4))
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v13 != v7)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x203A746F67202CLL;
    v28._object = (void *)0xE700000000000000;
    String.append(_:)(v28);
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v30 = 0xD000000000000039;
    v30[1] = 0x8000000249C31240;
    return swift_willThrow();
  }
  v42 = a7;
  v43 = a3;
  v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v14 = (2 * *(_QWORD *)(v13 + 16)) | 1;
  v15 = (char *)specialized Collection.prefix(_:)(v10, v13, v13 + 32, 0, v14);
  v8 = v16;
  v18 = v17;
  v12 = v19;
  v20 = specialized Collection.dropFirst(_:)(v10, v13, v13 + 32, 0, v14);
  v44 = v21;
  v10 = v22;
  v11 = v23;
  swift_retain();
  v24 = specialized Array<A>.init<A>(from:)(v15, v8, v18, v12);
  if (v9)
    return swift_unknownObjectRelease();
  v7 = v11 >> 1;
  v31 = (v11 >> 1) - v10;
  if (__OFSUB__(v11 >> 1, v10))
    goto LABEL_57;
  v32 = v10;
  v12 = v11 >> 1;
  v10 = v20;
  if (v31 >= 0x20)
  {
    v12 = v32 + 32;
    if (__OFADD__(v32, 32))
      goto LABEL_72;
  }
  if (v12 < v32)
    goto LABEL_58;
  if (v7 < v32)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v7 < v12)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v12 < 0)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v13 = v11 >> 1;
  if (v31 >= 0x20)
  {
    v13 = v32 + 32;
    if (__OFADD__(v32, 32))
      goto LABEL_73;
    if (v7 < v13)
      goto LABEL_70;
  }
  if (v13 < v32)
    goto LABEL_62;
  v41 = v24;
  v8 = v11 & 1;
  if ((v11 & 1) != 0)
  {
    v11 = v32;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v34 = swift_dynamicCastClass();
    if (!v34)
    {
      swift_unknownObjectRelease();
      v34 = MEMORY[0x24BEE4AF8];
    }
    v35 = *(_QWORD *)(v34 + 16);
    swift_release();
    if (__OFSUB__(v12, v32))
      goto LABEL_74;
    if (v35 != v12 - v32)
      goto LABEL_75;
    v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      v12 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_33;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v10, v44, v32, v8 | (2 * v12));
    v12 = v33;
LABEL_33:
    swift_unknownObjectRelease();
    v36 = v7 - v13;
    if (__OFSUB__(v7, v13))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    v37 = v7;
    v11 = v44;
    if (v36 >= 0x20)
    {
      v37 = v13 + 32;
      if (__OFADD__(v13, 32))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        swift_unknownObjectRelease();
LABEL_45:
        specialized _copyCollectionToContiguousArray<A>(_:)(v10, v44, v13, v8 | (2 * v37));
        v39 = v38;
        goto LABEL_52;
      }
    }
    if (v37 < v13)
      goto LABEL_64;
    if (v7 < v37)
      goto LABEL_65;
    if (v37 < 0)
      goto LABEL_66;
    if (v36 >= 0x20)
    {
      if (__OFADD__(v13, 32))
        goto LABEL_77;
      if (v7 < v13 + 32)
        goto LABEL_67;
      v7 = v13 + 32;
    }
    if (v7 >= v13)
      break;
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    swift_unknownObjectRelease();
    v32 = v11;
  }
  if (!v8)
    goto LABEL_45;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    v40 = MEMORY[0x24BEE4AF8];
  }
  v7 = *(_QWORD *)(v40 + 16);
  swift_release();
  if (__OFSUB__(v37, v13))
    goto LABEL_78;
  if (v7 != v37 - v13)
    goto LABEL_79;
  v39 = swift_dynamicCastClass();
  if (!v39)
  {
    swift_unknownObjectRelease();
    v39 = MEMORY[0x24BEE4AF8];
  }
LABEL_52:
  result = swift_unknownObjectRelease();
  if ((v43 & 0x8000000000000000) != 0)
    goto LABEL_69;
  if (v43 > 0xFF)
    goto LABEL_71;
  *(_QWORD *)v42 = v41;
  *(_QWORD *)(v42 + 8) = v12;
  *(_QWORD *)(v42 + 16) = v39;
  *(_BYTE *)(v42 + 24) = v43;
  return result;
}

uint64_t specialized PINEPrepareState.encode<A>(into:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
    {
      v6 = *(_QWORD *)(a2 + 8 * i + 32);
      specialized FieldElement.encode<A>(into:)(a1, v6);
    }
    swift_bridgeObjectRelease();
  }
  v7 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v7);
  v8 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v8);
}

uint64_t specialized WraparoundJointRandomness.xof.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 32))
  {
    v1 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v2 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t)&protocol conformance descriptor for WraparoundJointRandomness<A, B>);
    v3 = specialized static PINE.domainSeparationTag(usage:)(7u);
    v1 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v2, v3, MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 32) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t specialized WraparoundJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t)&protocol conformance descriptor for WraparoundJointRandomness<A, B>);
  v18 = static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a1, a2, a3, a4, a5, a6, a7, a8, v8, v17);
  swift_bridgeObjectRelease();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = 0;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

void *specialized WraparoundJointRandomness.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v3;
  unint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 40);
  if (!v2)
  {
    if (!*(_QWORD *)(specialized WraparoundJointRandomness.xof.getter()
                    + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
    {
      __break(1u);
      goto LABEL_23;
    }
    swift_retain();
    v3 = SeedStreamAES128CTR.next()();
    swift_release();
    swift_release();
    swift_beginAccess();
    *(_BYTE *)(v0 + 48) = v3;
    v2 = 8;
    *(_QWORD *)(v0 + 40) = 8;
  }
  v4 = v2 - 2;
  if (__OFSUB__(v2, 2))
  {
    __break(1u);
    goto LABEL_19;
  }
  *(_QWORD *)(v1 + 40) = v4;
  swift_beginAccess();
  if (v4 - 9 > 0xFFFFFFFFFFFFFFEELL)
  {
    v6 = *(unsigned __int8 *)(v1 + 48);
    if ((v4 & 0x8000000000000000) != 0)
    {
      if (v4 <= 0xFFFFFFFFFFFFFFF8)
        goto LABEL_6;
      v7 = v6 << -(char)v4;
    }
    else
    {
      if (v4 >= 8)
        goto LABEL_6;
      v7 = v6 >> v4;
    }
    v8 = v7 & 3;
    if ((v8 - 1) < 2)
      return &outlined read-only object #0 of specialized WraparoundJointRandomness.next();
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_249C29130;
      if (one-time initialization token for one == -1)
      {
LABEL_17:
        v5 = &static Field64.one;
        goto LABEL_8;
      }
LABEL_23:
      swift_once();
      goto LABEL_17;
    }
  }
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_249C29130;
  if (one-time initialization token for negativeOne != -1)
LABEL_19:
    swift_once();
  v5 = &static Field64.negativeOne;
LABEL_8:
  *(_QWORD *)(v1 + 32) = *v5;
  return (void *)v1;
}

_QWORD *specialized Array.init(repeating:count:)(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Field64]);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    return v5;
  }
  return result;
}

char *specialized Share.init<A>(from:parameter:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v12;
  BOOL v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  if (a6 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v15 = 0;
    v15[1] = 0;
LABEL_19:
    swift_willThrow();
    swift_unknownObjectRelease();
    return (char *)v7;
  }
  v7 = a5;
  v12 = (a4 >> 1) - a3;
  v13 = __OFSUB__(a4 >> 1, a3);
  if ((a6 & 1) != 0)
  {
    if (!v13)
    {
      if (v12 != a5)
      {
        _StringGuts.grow(_:)(51);
        v17._object = (void *)0x8000000249C302F0;
        v17._countAndFlagsBits = 0xD000000000000022;
        String.append(_:)(v17);
LABEL_18:
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0x65707865203D2120;
        v22._object = (void *)0xED00003D64657463;
        String.append(_:)(v22);
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v7 = 0;
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        *v24 = 0;
        v24[1] = 0xE000000000000000;
        goto LABEL_19;
      }
      if ((a4 & 1) == 0)
        goto LABEL_15;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      v25 = swift_dynamicCastClass();
      if (!v25)
      {
        swift_unknownObjectRelease();
        v25 = MEMORY[0x24BEE4AF8];
      }
      v26 = *(_QWORD *)(v25 + 16);
      swift_release();
      if (v26 == v7)
      {
        v7 = swift_dynamicCastClass();
        if (!v7)
        {
          swift_unknownObjectRelease();
          v7 = MEMORY[0x24BEE4AF8];
        }
        goto LABEL_26;
      }
LABEL_31:
      swift_unknownObjectRelease();
LABEL_15:
      specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)a1, a2, a3, a4);
      v7 = v16;
LABEL_26:
      swift_unknownObjectRelease();
      return (char *)v7;
    }
    goto LABEL_29;
  }
  if (v13)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((unint64_t)(a5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v12 != 8 * a5)
  {
    _StringGuts.grow(_:)(56);
    v18._object = (void *)0x8000000249C30320;
    v18._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 2107936;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    goto LABEL_18;
  }
  v14 = specialized Array<A>.init<A>(from:)(a1, a2, a3, a4);
  if (!v6)
    return v14;
  return (char *)v7;
}

uint64_t specialized PINEInputShare.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t result;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;

  if (a4 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v13 = 0;
    v13[1] = 0;
    return swift_willThrow();
  }
  v14 = a5;
  v15 = a3;
  if (a1)
    v16 = a2 - a1;
  else
    v16 = 0;
  v17 = a3;
  if ((a4 & 1) == 0)
  {
    if ((unint64_t)(a3 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    v17 = 8 * a3;
  }
  v18 = a5;
  v8 = a6 & 1;
  if ((a6 & 1) == 0)
  {
    if ((unint64_t)(a5 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    v18 = 8 * a5;
  }
  v19 = __OFADD__(v17, v18);
  v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
    goto LABEL_75;
  }
  v19 = __OFADD__(v20, 64);
  v21 = v20 + 64;
  if (v19)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v9 = a4 & 1;
  if (v16 != v21)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v9)
    {
      if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v15 *= 8;
    }
    if (!(_DWORD)v8)
    {
      if ((unint64_t)(v14 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v14 *= 8;
    }
    if (!__OFADD__(v15, v14))
    {
      if (!__OFADD__(v15 + v14, 64))
      {
        v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 0x203A746F67202CLL;
        v35._object = (void *)0xE700000000000000;
        String.append(_:)(v35);
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        *v37 = 0xD000000000000037;
        v37[1] = 0x8000000249C31340;
        return swift_willThrow();
      }
      goto LABEL_79;
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v66 = v7;
  v22 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v16 = v15;
  LOBYTE(v65) = v9;
  if (v9)
    goto LABEL_18;
  if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
    goto LABEL_80;
  v16 = 8 * v15;
LABEL_18:
  v63 = v8;
  v61 = a7;
  v23 = (2 * *(_QWORD *)(v22 + 16)) | 1;
  v9 = specialized Collection.prefix(_:)(v16, v22, v22 + 32, 0, v23);
  v25 = v24;
  v8 = v26;
  v64 = v27;
  v10 = specialized Collection.dropFirst(_:)(v16, v22, v22 + 32, 0, v23);
  v62 = v28;
  v11 = v29;
  v16 = v30;
  swift_retain();
  v31 = specialized Share.init<A>(from:parameter:)((char *)v9, v25, v8, v64, v15, v65);
  if (v7)
    return swift_unknownObjectRelease();
  v66 = v31;
  v38 = v14;
  if (!v63)
  {
    if ((unint64_t)(v14 - 0x1000000000000000) >> 61 == 7)
    {
      v38 = 8 * v14;
      goto LABEL_33;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_33:
  v60 = v32;
  v9 = specialized Collection.prefix(_:)(v38, v10, v62, v11, v16);
  v64 = v40;
  v65 = v39;
  v42 = v41;
  v43 = specialized Collection.dropFirst(_:)(v38, v10, v62, v11, v16);
  v62 = v44;
  v11 = v45;
  v10 = v46;
  v16 = (uint64_t)v66;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v47 = specialized Share.init<A>(from:parameter:)((char *)v9, v65, v42, v64, v14, v63);
  v8 = v10 >> 1;
  v49 = (v10 >> 1) - v11;
  if (__OFSUB__(v10 >> 1, v11))
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v14 = (uint64_t)v47;
  v50 = v11;
  v9 = v10 >> 1;
  v16 = v43;
  if (v49 >= 0x20)
  {
    v9 = v11 + 32;
    if (__OFADD__(v11, 32))
      goto LABEL_97;
  }
  if (v9 < v11)
    goto LABEL_85;
  if (v8 < v11)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v8 < v9)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v9 < 0)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v11 = v10 >> 1;
  if (v49 >= 0x20)
  {
    v11 = v50 + 32;
    if (__OFADD__(v50, 32))
      goto LABEL_98;
    if (v8 < v11)
      goto LABEL_96;
  }
  if (v11 < v50)
    goto LABEL_89;
  LOBYTE(v65) = v48;
  v51 = v10 & 1;
  v64 = v51;
  if ((v10 & 1) != 0)
  {
    v10 = v50;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    v53 = swift_dynamicCastClass();
    if (!v53)
    {
      swift_unknownObjectRelease();
      v53 = MEMORY[0x24BEE4AF8];
    }
    v54 = *(_QWORD *)(v53 + 16);
    swift_release();
    if (__OFSUB__(v9, v50))
      goto LABEL_99;
    if (v54 != v9 - v50)
      goto LABEL_100;
    v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_unknownObjectRelease();
      v9 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v16, v62, v50, v51 | (2 * v9));
    v9 = v52;
LABEL_53:
    swift_unknownObjectRelease();
    v55 = v8 - v11;
    if (__OFSUB__(v8, v11))
    {
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    v10 = v8;
    if (v55 >= 0x20)
    {
      v10 = v11 + 32;
      if (__OFADD__(v11, 32))
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        swift_unknownObjectRelease();
        v51 = v64;
LABEL_66:
        specialized _copyCollectionToContiguousArray<A>(_:)(v16, v8, v11, v51 | (2 * v10));
        v57 = v56;
        goto LABEL_73;
      }
    }
    if ((uint64_t)v10 < v11)
      goto LABEL_91;
    if (v8 < (uint64_t)v10)
      goto LABEL_92;
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_93;
    if (v55 >= 0x20)
    {
      if (__OFADD__(v11, 32))
        goto LABEL_102;
      if (v8 < v11 + 32)
        goto LABEL_94;
      v8 = v11 + 32;
    }
    if (v8 >= v11)
      break;
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    swift_unknownObjectRelease();
    v50 = v10;
    v51 = v64;
  }
  v8 = v62;
  if (!v51)
  {
    swift_retain();
    goto LABEL_66;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_retain();
  v58 = swift_dynamicCastClass();
  if (!v58)
  {
    swift_unknownObjectRelease();
    v58 = MEMORY[0x24BEE4AF8];
  }
  v59 = *(_QWORD *)(v58 + 16);
  swift_release();
  if (__OFSUB__(v10, v11))
    goto LABEL_103;
  if (v59 != v10 - v11)
    goto LABEL_104;
  v57 = swift_dynamicCastClass();
  if (!v57)
  {
    swift_unknownObjectRelease();
    v57 = MEMORY[0x24BEE4AF8];
  }
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  *(_QWORD *)v61 = v66;
  *(_BYTE *)(v61 + 8) = v60 & 1;
  *(_QWORD *)(v61 + 16) = v14;
  *(_BYTE *)(v61 + 24) = v65 & 1;
  *(_QWORD *)(v61 + 32) = v9;
  *(_QWORD *)(v61 + 40) = v57;
  return result;
}

uint64_t specialized PINEInputShare.encode<A>(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t j;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = *v2;
  if ((v2[1] & 1) != 0)
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v18 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    v16[0] = v4;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
LABEL_3:
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v12 = *(_QWORD *)(v4 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v12; ++i)
      specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(a1);
    goto LABEL_3;
  }
LABEL_4:
  v5 = v2[2];
  if ((v2[3] & 1) != 0)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v17 = v6;
    v18 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    v16[0] = v5;
    __swift_project_boxed_opaque_existential_1(v16, v6);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v14 = *(_QWORD *)(v5 + 16);
    if (!v14)
      goto LABEL_7;
    swift_bridgeObjectRetain();
    for (j = 0; j != v14; ++j)
      specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(a1);
  }
  swift_bridgeObjectRelease();
LABEL_7:
  v8 = v2[4];
  v7 = v2[5];
  v19 = v7;
  v20 = v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v17 = v9;
  v10 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
  v18 = v10;
  v16[0] = v8;
  __swift_project_boxed_opaque_existential_1(v16, v9);
  outlined retain of Seed?((uint64_t)&v20);
  swift_bridgeObjectRetain();
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  outlined release of Seed?((uint64_t)&v20);
  v17 = v9;
  v18 = v10;
  v16[0] = v7;
  __swift_project_boxed_opaque_existential_1(v16, v9);
  outlined retain of Seed?((uint64_t)&v19);
  swift_bridgeObjectRetain();
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return outlined release of Seed?((uint64_t)&v19);
}

uint64_t specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(uint64_t a1, char a2, char a3, int64_t a4)
{
  return specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))specialized static VDAFProtocol.domainSeparationTag(usage:));
}

uint64_t specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(uint64_t a1, char a2, char a3, int64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;

  v6 = a1;
  if ((a2 & 1) != 0)
  {
    v8 = a5(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249C29130;
    *(_BYTE *)(inited + 32) = a3;
    v10 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v6, v8, inited);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    v6 = specialized static FieldElement.randomVector<A>(count:using:)(a4, v10);
    swift_release();
  }
  else if (*(_QWORD *)(a1 + 16) == a4)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(57);
    v11._object = (void *)0x8000000249C30350;
    v11._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0xD00000000000002DLL;
    v12._object = (void *)0x8000000249C30370;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x3D746F67202CLL;
    v14._object = (void *)0xE600000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v6 = 0;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0xE000000000000000;
    *(_BYTE *)(v16 + 16) = 1;
    swift_willThrow();
  }
  return v6;
}

uint64_t specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:numOfProofs:count:)(uint64_t a1, char a2, char a3, unint64_t a4, int64_t a5)
{
  return specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:numOfProofs:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))specialized static VDAFProtocol.domainSeparationTag(usage:));
}

uint64_t specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:numOfProofs:count:)(uint64_t a1, char a2, char a3, unint64_t a4, int64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;

  v7 = a1;
  if ((a2 & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 16) == a5)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(51);
      v13._object = (void *)0x8000000249C30350;
      v13._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v13);
      v14._countAndFlagsBits = 0xD000000000000027;
      v14._object = (void *)0x8000000249C303A0;
      String.append(_:)(v14);
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 0x3D746F67202CLL;
      v16._object = (void *)0xE600000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v7 = 0;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0xE000000000000000;
      *(_BYTE *)(v18 + 16) = 1;
      swift_willThrow();
    }
    return v7;
  }
  v10 = a6(1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_249C2A640;
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (a4 <= 0xFF)
  {
    *(_BYTE *)(result + 32) = a4;
    *(_BYTE *)(result + 33) = a3;
    v12 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v7, v10, result);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    v7 = specialized static FieldElement.randomVector<A>(count:using:)(a5, v12);
    swift_release();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t specialized static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(uint64_t a1, unint64_t a2, uint64_t a3, int64_t a4)
{
  return specialized static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))specialized static VDAFProtocol.domainSeparationTag(usage:));
}

uint64_t specialized static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(uint64_t a1, unint64_t a2, uint64_t a3, int64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t result;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  swift_bridgeObjectRetain();
  v10 = a5(4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    v49 = swift_unexpectedError();
    __break(1u);
LABEL_71:
    outlined consume of VDAFError(v49, v50, v51);
LABEL_72:
    MEMORY[0x24BD00B38](v68);
    *(_QWORD *)&v66 = 0;
    *((_QWORD *)&v66 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v59._object = (void *)0x8000000249C30420;
    v59._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v59);
    v68 = v5;
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (a2 > 0xFF)
    goto LABEL_67;
  *(_BYTE *)(inited + 32) = a2;
  *(_QWORD *)&v66 = inited;
  v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  v13 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v10, v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!a2)
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  v70 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
  if (a4 < 0)
    goto LABEL_70;
  v14 = 0;
  v5 = 0;
  v15 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  while (1)
  {
    if (v14 == a2)
      goto LABEL_68;
    if (a4)
      break;
    v53 = MEMORY[0x24BEE4AF8];
LABEL_52:
    v19 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
      v19 = v70;
    }
    v57 = *(_QWORD *)(v19 + 16);
    v56 = *(_QWORD *)(v19 + 24);
    if (v57 >= v56 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1);
      v19 = v70;
    }
    ++v14;
    *(_QWORD *)(v19 + 16) = v57 + 1;
    *(_QWORD *)(v19 + 8 * v57 + 32) = v53;
    if (v14 == a2)
      goto LABEL_65;
  }
  v69 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4, 0);
  v16 = 0;
  v61 = a2;
  v62 = a4;
  v64 = v15;
  v65 = v13;
  v60 = v14;
LABEL_9:
  if (v16 == a4)
    goto LABEL_69;
  v63 = v16 + 1;
LABEL_11:
  v68 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
  v17 = 0;
  v18 = v68;
  while (1)
  {
    v19 = *(_QWORD *)(v13 + v15);
    if (!v19)
      goto LABEL_62;
    v20 = *(char **)(v19 + 16);
    if (!*((_QWORD *)v20 + 2))
      break;
    swift_retain();
LABEL_20:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v30 = *((_QWORD *)v20 + 2);
      if (!v30)
        goto LABEL_64;
    }
    else
    {
      v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
      v30 = *((_QWORD *)v20 + 2);
      if (!v30)
        goto LABEL_64;
    }
    v31 = v30 - 1;
    v32 = v20[v31 + 32];
    *((_QWORD *)v20 + 2) = v31;
    *(_QWORD *)(v19 + 16) = v20;
    swift_release();
    v68 = v18;
    v34 = *(_QWORD *)(v18 + 16);
    v33 = *(_QWORD *)(v18 + 24);
    if (v34 >= v33 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1);
      v18 = v68;
    }
    ++v17;
    *(_QWORD *)(v18 + 16) = v34 + 1;
    *(_BYTE *)(v18 + v34 + 32) = v32;
    if (v17 == 8)
    {
      if (v34 != 7)
      {
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v66 = 0xD000000000000019;
        *((_QWORD *)&v66 + 1) = 0x8000000249C303D0;
        v68 = 8;
        v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        v43._countAndFlagsBits = 0x203A746F67202CLL;
        v43._object = (void *)0xE700000000000000;
        String.append(_:)(v43);
        v68 = v34 + 1;
        v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45 = v66;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v5 = swift_allocError();
        *(_OWORD *)v46 = v45;
        *(_BYTE *)(v46 + 16) = 0;
        goto LABEL_41;
      }
      v5 = 0;
      v41 = swift_retain();
      v47 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(v41);
      swift_release();
      if (v47 >= 0xFFFFFFFF00000001)
      {
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v5 = swift_allocError();
        *(_QWORD *)v48 = 0;
        *(_QWORD *)(v48 + 8) = 0;
        *(_BYTE *)(v48 + 16) = 5;
LABEL_41:
        swift_willThrow();
        swift_release();
        v68 = v5;
        MEMORY[0x24BD00B44](v5);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast())
          goto LABEL_72;
        v50 = *((_QWORD *)&v66 + 1);
        v49 = v66;
        v51 = v67;
        if (v67 != 5 || v66 != 0)
          goto LABEL_71;
        MEMORY[0x24BD00B38](v5, *((_QWORD *)&v66 + 1));
        MEMORY[0x24BD00B38](v68);
        goto LABEL_11;
      }
      specialized FieldElement.init(_:)(v47, (unint64_t *)&v66);
      swift_release();
      v52 = v66;
      v53 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v53 + 16) + 1, 1);
        v53 = v69;
      }
      a2 = v61;
      a4 = v62;
      v55 = *(_QWORD *)(v53 + 16);
      v54 = *(_QWORD *)(v53 + 24);
      if (v55 >= v54 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
        v53 = v69;
      }
      *(_QWORD *)(v53 + 16) = v55 + 1;
      *(_QWORD *)(v53 + 8 * v55 + 32) = v52;
      v16 = v63;
      v14 = v60;
      if (v63 == v62)
        goto LABEL_52;
      goto LABEL_9;
    }
  }
  v21 = v19 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  v22 = v19 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
  swift_beginAccess();
  swift_retain();
  v23 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v23[2] = 16;
  v23[5] = 0;
  v23[4] = 0;
  v24 = *(_QWORD *)v22;
  v26 = *(unsigned int *)(v22 + 8);
  v25 = *(unsigned int *)(v22 + 12);
  specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(v23 + 4), (uint64_t)(v23 + 6), v21, *(_QWORD *)v22, v26 | (v25 << 32));
  v27 = bswap32(v25);
  *(_DWORD *)(v22 + 12) = bswap32(v27 + 1);
  if (v27 == -1)
  {
    v28 = bswap32(v26);
    *(_DWORD *)(v22 + 8) = bswap32(v28 + 1);
    if (v28 == -1)
      *(_QWORD *)v22 = bswap64(bswap64(v24) + 1);
  }
  swift_endAccess();
  v29 = v23[2];
  if (v29 < 2)
  {
LABEL_19:
    *(_QWORD *)(v19 + 16) = v23;
    swift_bridgeObjectRelease();
    v20 = *(char **)(v19 + 16);
    v15 = v64;
    v13 = v65;
    if (!*((_QWORD *)v20 + 2))
      goto LABEL_63;
    goto LABEL_20;
  }
  v35 = 0;
  v36 = v29 >> 1;
  v37 = v29 + 31;
  while (1)
  {
    if (v35 == v37 - 32)
      goto LABEL_28;
    v38 = v23[2];
    if (v35 >= v38)
      break;
    if (v37 - 32 >= v38)
      goto LABEL_61;
    v39 = *((_BYTE *)v23 + v35 + 32);
    v40 = *((_BYTE *)v23 + v37);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v23);
    *((_BYTE *)v23 + v35 + 32) = v40;
    *((_BYTE *)v23 + v37) = v39;
LABEL_28:
    ++v35;
    --v37;
    if (v36 == v35)
      goto LABEL_19;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_release();
  return v19;
}

char **specialized static VDAFProtocol.splitShare<A, B>(_:into:_:)(char **result, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char **v57;
  char **v58;
  char **v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unsigned __int8 v63;
  uint64_t v64;

  v59 = result;
  if (__OFSUB__(a2, 1))
    goto LABEL_58;
  if (a2 - 1 < 0)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
  }
  else
  {
    if (a2 == 1)
      return result;
    v5 = a4;
    v6 = a3;
    v58 = (char **)(a2 - 1);
    v4 = *result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_5;
  }
  v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
LABEL_5:
  result = 0;
  *v59 = v4;
  v7 = v58;
  do
  {
    if (result == v7)
      goto LABEL_60;
    v57 = result;
    v8 = v6();
    v9 = v8;
    v10 = *((_QWORD *)v4 + 2);
    if (!v10)
      goto LABEL_51;
    v11 = 0;
    v12 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    *v59 = v4;
    v53 = v6;
    v54 = v5;
    v60 = v12;
    v61 = v8;
    v52 = v10;
    while (2)
    {
      v55 = v11 + 1;
      v56 = v11;
      v6 = 0;
      while (1)
      {
        v64 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
        v13 = 0;
        v4 = (char *)v64;
        do
        {
          v5 = *(_QWORD *)(v9 + v12);
          if (!v5)
            goto LABEL_55;
          v14 = *(char **)(v5 + 16);
          if (*((_QWORD *)v14 + 2))
          {
            swift_retain();
          }
          else
          {
            v15 = v5 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
            v16 = v5 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
            swift_beginAccess();
            swift_retain();
            v17 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
            v17[2] = 16;
            v17[5] = 0;
            v17[4] = 0;
            v18 = *(_QWORD *)v16;
            v19 = *(unsigned int *)(v16 + 8);
            v20 = *(unsigned int *)(v16 + 12);
            specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(v17 + 4), (uint64_t)(v17 + 6), v15, *(_QWORD *)v16, v19 | (v20 << 32));
            v21 = bswap32(v20);
            *(_DWORD *)(v16 + 12) = bswap32(v21 + 1);
            if (v21 == -1)
            {
              v22 = bswap32(v19);
              *(_DWORD *)(v16 + 8) = bswap32(v22 + 1);
              if (v22 == -1)
                *(_QWORD *)v16 = bswap64(bswap64(v18) + 1);
            }
            swift_endAccess();
            v23 = v17[2];
            if (v23 >= 2)
            {
              v29 = 0;
              v30 = v23 >> 1;
              v31 = v23 + 31;
              do
              {
                if (v29 != v31 - 32)
                {
                  v32 = v17[2];
                  if (v29 >= v32)
                  {
                    __break(1u);
LABEL_54:
                    __break(1u);
LABEL_55:
                    __break(1u);
LABEL_56:
                    __break(1u);
LABEL_57:
                    __break(1u);
LABEL_58:
                    __break(1u);
                    goto LABEL_59;
                  }
                  if (v31 - 32 >= v32)
                    goto LABEL_54;
                  v33 = *((_BYTE *)v17 + v29 + 32);
                  v34 = *((_BYTE *)v17 + v31);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v17 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
                  *((_BYTE *)v17 + v29 + 32) = v34;
                  *((_BYTE *)v17 + v31) = v33;
                }
                ++v29;
                --v31;
              }
              while (v30 != v29);
            }
            *(_QWORD *)(v5 + 16) = v17;
            swift_bridgeObjectRelease();
            v14 = *(char **)(v5 + 16);
            v12 = v60;
            v9 = v61;
            if (!*((_QWORD *)v14 + 2))
              goto LABEL_56;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v24 = *((_QWORD *)v14 + 2);
            if (!v24)
              goto LABEL_57;
          }
          else
          {
            v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
            v24 = *((_QWORD *)v14 + 2);
            if (!v24)
              goto LABEL_57;
          }
          v25 = v24 - 1;
          v26 = v14[v25 + 32];
          *((_QWORD *)v14 + 2) = v25;
          *(_QWORD *)(v5 + 16) = v14;
          swift_release();
          v64 = (uint64_t)v4;
          v28 = *((_QWORD *)v4 + 2);
          v27 = *((_QWORD *)v4 + 3);
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1);
            v4 = (char *)v64;
          }
          ++v13;
          *((_QWORD *)v4 + 2) = v28 + 1;
          v4[v28 + 32] = v26;
        }
        while (v13 != 8);
        if (v28 != 7)
        {
          *(_QWORD *)&v62 = 0;
          *((_QWORD *)&v62 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v62 = 0xD000000000000019;
          *((_QWORD *)&v62 + 1) = 0x8000000249C303D0;
          v64 = 8;
          v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          v38._countAndFlagsBits = 0x203A746F67202CLL;
          v38._object = (void *)0xE700000000000000;
          String.append(_:)(v38);
          v64 = v28 + 1;
          v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v39);
          swift_bridgeObjectRelease();
          v40 = v62;
          lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
          v36 = swift_allocError();
          *(_OWORD *)v41 = v40;
          *(_BYTE *)(v41 + 16) = 0;
          goto LABEL_40;
        }
        v36 = 0;
        v35 = swift_retain();
        v42 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(v35);
        swift_release();
        if (v42 < 0xFFFFFFFF00000001)
          break;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v36 = swift_allocError();
        *(_QWORD *)v43 = 0;
        *(_QWORD *)(v43 + 8) = 0;
        *(_BYTE *)(v43 + 16) = 5;
LABEL_40:
        swift_willThrow();
        v6 = 0;
        swift_release();
        v64 = v36;
        MEMORY[0x24BD00B44](v36);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast())
          goto LABEL_66;
        v45 = *((_QWORD *)&v62 + 1);
        v44 = v62;
        v46 = v63;
        if (v63 != 5 || v62 != 0)
          goto LABEL_65;
        MEMORY[0x24BD00B38](v36, *((_QWORD *)&v62 + 1));
        MEMORY[0x24BD00B38](v64);
      }
      specialized FieldElement.init(_:)(v42, (unint64_t *)&v62);
      swift_release();
      v4 = *v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      v6 = v53;
      v5 = v54;
      if (v56 >= *((_QWORD *)v4 + 2))
      {
        __break(1u);
        goto LABEL_63;
      }
      v47 = *(_QWORD *)&v4[8 * v56 + 32];
      v48 = v47 - v62;
      if (v47 < (unint64_t)v62)
      {
        v49 = 0xFFFFFFFF00000001 - v62;
        if ((unint64_t)v62 <= 0xFFFFFFFF00000001)
        {
          v50 = __CFADD__(v47, v49);
          v48 = v47 + v49;
          if (!v50)
            goto LABEL_50;
LABEL_64:
          __break(1u);
          v44 = swift_unexpectedError();
          __break(1u);
LABEL_65:
          outlined consume of VDAFError(v44, v45, v46);
LABEL_66:
          MEMORY[0x24BD00B38](v64);
          *(_QWORD *)&v62 = 0;
          *((_QWORD *)&v62 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(20);
          v51._object = (void *)0x8000000249C30420;
          v51._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v51);
          v64 = v36;
          _print_unlocked<A, B>(_:_:)();
          result = (char **)_assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
LABEL_50:
      v11 = v55;
      *(_QWORD *)&v4[8 * v56 + 32] = v48;
      *v59 = v4;
      if (v55 != v52)
        continue;
      break;
    }
LABEL_51:
    swift_release();
    result = (char **)((char *)v57 + 1);
    v7 = v58;
  }
  while ((char **)((char *)v57 + 1) != v58);
  return result;
}

unint64_t specialized FieldElement.init<A>(floatValue:fractionalBitCount:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>, float a3@<S0>)
{
  int v5;
  unint64_t *v6;
  _BYTE *v7;
  unint64_t v8;
  const char *v9;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t result;
  unint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  unint64_t v34;

  if ((LODWORD(a3) >> 23) == 255)
  {
    v5 = LODWORD(a3) & 0x7FFFFF;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    v7 = v6 + 2;
    v8 = 0xD000000000000018;
    if (v5)
    {
      v8 = 0xD000000000000011;
      v9 = "floatValue is NaN";
    }
    else
    {
      v9 = "floatValue is isInfinite";
    }
    *v6 = v8;
    v6[1] = (unint64_t)(v9 - 32) | 0x8000000000000000;
    goto LABEL_21;
  }
  if ((LODWORD(a3) & 0x7FFFFF) != 0 && !(LODWORD(a3) >> 23))
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *v11 = 0xD000000000000017;
    v11[1] = 0x8000000249C30510;
LABEL_20:
    v7 = v11 + 2;
LABEL_21:
    *v7 = 4;
    return swift_willThrow();
  }
  v12 = Float.exponent.getter();
  if (__OFADD__(v12, a1))
  {
    __break(1u);
LABEL_27:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v29._countAndFlagsBits = 0x74616F6C46;
    v29._object = (void *)0xE500000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0xD00000000000001ELL;
    v30._object = (void *)0x8000000249C301F0;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 0x3436746E4955;
    v31._object = (void *)0xE600000000000000;
    String.append(_:)(v31);
    v32._countAndFlagsBits = 0xD00000000000002ELL;
    v32._object = (void *)0x8000000249C30210;
    String.append(_:)(v32);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((uint64_t)(v12 + a1) > 63)
  {
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v19._countAndFlagsBits = 0xD00000000000001FLL;
    v19._object = (void *)0x8000000249C30480;
    String.append(_:)(v19);
    Float.exponent.getter();
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x8000000249C304A0;
    v21._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v21);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0xD000000000000016;
    v23._object = (void *)0x8000000249C304C0;
    String.append(_:)(v23);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v17 = 46;
    v18 = 0xE100000000000000;
    goto LABEL_19;
  }
  v13 = 1 << a1;
  if (a1 >= 0x40)
    v13 = 0;
  if (a1 > 0x40)
    v13 = 0;
  specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v33, fabsf(floorf((float)(unint64_t)v13 * a3)));
  if ((v34 & 1) != 0)
    goto LABEL_27;
  if (v33 > 0x7FFFFFFF80000000)
  {
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v14._countAndFlagsBits = 0x6C615674616F6C66;
    v14._object = (void *)0xEB000000003D6575;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)();
    v15._countAndFlagsBits = 0xD000000000000020;
    v15._object = (void *)0x8000000249C304E0;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = 11817;
    v18 = 0xE200000000000000;
LABEL_19:
    String.append(_:)(*(Swift::String *)&v17);
    v25 = v33;
    v26 = v34;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *v11 = v25;
    v11[1] = v26;
    goto LABEL_20;
  }
  if (a3 >= 0.0)
    v28 = v33;
  else
    v28 = 0xFFFFFFFF00000001 - v33;
  return specialized FieldElement.init(_:)(v28, a2);
}

uint64_t specialized FieldElement.init(inputVector:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v8 = a3 >> 1;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_51;
  v6 = a2;
  v7 = a1;
  v5 = a4;
  specialized static FieldElement.assertValidBitLength(_:)((a3 >> 1) - a2);
  if (v4)
    return swift_unknownObjectRelease();
  if (one-time initialization token for one != -1)
    goto LABEL_52;
LABEL_5:
  v10 = static Field64.one;
  result = specialized FieldElement.init(_:)(2uLL, &v30);
  v11 = v8 - v6;
  if (v8 != v6)
  {
    if (v8 <= v6)
    {
      __break(1u);
      return result;
    }
    v12 = 0;
    v13 = (unint64_t *)(v7 + 8 * v6);
    while (1)
    {
      v16 = *v13++;
      v17 = (v16 * (unsigned __int128)(unint64_t)v10) >> 64;
      v18 = (0xFFFFFFFEFFFFFFFFLL * v16 * v10 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v19 = __CFADD__(-(uint64_t)(v16 * v10), v16 * v10);
      v20 = v18 + v17;
      if (!__CFADD__(v18, v17))
      {
        if (v20 != -1)
        {
          v23 = v20 + v19;
          if (v23 >= 0xFFFFFFFF00000001)
            v23 += 0xFFFFFFFFLL;
          if (!v23)
            goto LABEL_34;
LABEL_20:
          v22 = v23 <= 0xFFFFFFFF00000001;
          v24 = 0xFFFFFFFF00000001 - v23;
          if (!v22)
          {
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            swift_once();
            goto LABEL_5;
          }
LABEL_22:
          if (v12 >= v24)
          {
            v12 -= v24;
          }
          else
          {
            v22 = v24 <= 0xFFFFFFFF00000001;
            v25 = 0xFFFFFFFF00000001 - v24;
            if (!v22)
              goto LABEL_49;
            v22 = __CFADD__(v12, v25);
            v12 += v25;
            if (v22)
              goto LABEL_50;
          }
          goto LABEL_34;
        }
        if (!v19)
        {
          v24 = 0xFFFFFFFE00000003;
          goto LABEL_22;
        }
        v19 = 1;
      }
      v21 = v19 + v20;
      v22 = __CFADD__(v21, 0xFFFFFFFFLL);
      v23 = v21 + 0xFFFFFFFFLL;
      if (v22)
        goto LABEL_48;
      if (v23)
        goto LABEL_20;
LABEL_34:
      v26 = ((unint64_t)v10 * (unsigned __int128)v30) >> 64;
      v27 = (0xFFFFFFFEFFFFFFFFLL * v10 * v30 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v14 = __CFADD__(-(uint64_t)(v10 * v30), v10 * v30);
      v28 = v27 + v26;
      if (!__CFADD__(v27, v26))
      {
        if (v28 != -1)
        {
          v29 = v28 + v14;
          if (v29 >= 0xFFFFFFFF00000001)
            v10 = v29 + 0xFFFFFFFF;
          else
            v10 = v29;
          goto LABEL_12;
        }
        if (!v14)
        {
          v10 = 4294967294;
          goto LABEL_12;
        }
        v14 = 1;
      }
      v15 = v14 + v28;
      v10 = v15 + 0xFFFFFFFF;
      if (v15 >= 0xFFFFFFFF00000001)
        goto LABEL_47;
LABEL_12:
      if (!--v11)
        goto LABEL_7;
    }
  }
  v12 = 0;
LABEL_7:
  result = swift_unknownObjectRelease();
  *v5 = v12;
  return result;
}

uint64_t specialized static FieldElement.assertValidBitLength(_:)(uint64_t result)
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;

  if (result >= 64)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 0xD000000000000015;
    v2._object = (void *)0x8000000249C305B0;
    String.append(_:)(v2);
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v4 = 0xD000000000000011;
    *(_QWORD *)(v4 + 8) = 0x8000000249C30590;
    *(_BYTE *)(v4 + 16) = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized static FieldElement.encode(_:into:with:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  v3 = a3;
  if (a3 >= 65)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 2113056;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7 = 0x8000000249C30610;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000012;
    v9 = 2;
LABEL_19:
    *(_QWORD *)(v8 + 8) = v7;
    *(_BYTE *)(v8 + 16) = v9;
    return swift_willThrow();
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  if (a3)
  {
    v11 = *a2;
    v10 = result;
    do
    {
      v12 = ((uint64_t)(v10 << 63) >> 63) & 0xFFFFFFFE00000001;
      v13 = ((unint64_t)-(uint64_t)(v12 | (v12 << 32)) * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      if (__CFADD__(-(uint64_t)v12, v12))
      {
        if (v13 > 0xFFFFFFFEFFFFFFFFLL)
          v13 = 0;
        else
          ++v13;
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
        v11 = result;
      }
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v11);
        v11 = result;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      *(_QWORD *)(v11 + 8 * v15 + 32) = v13;
      v10 >>= 1;
      --v3;
    }
    while (v3);
    *a2 = v11;
  }
  if (v10)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0x6962206874697720;
    v17._object = (void *)0xEF3D687464695774;
    String.append(_:)(v17);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v7 = 0x8000000249C305F0;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000014;
    v9 = 1;
    goto LABEL_19;
  }
  return result;
}

uint64_t specialized FieldElement.pow(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;

  v3 = a2;
  v4 = a1;
  *a3 = a2;
  result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(a1, &v22);
  if (v22 == 0)
  {
    v7 = 0xFFFFFFFFLL;
LABEL_3:
    *a3 = v7;
    return result;
  }
  v7 = 0xFFFFFFFFLL;
  while (1)
  {
    result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v4 & 1, &v22);
    v9 = *((_QWORD *)&v22 + 1) | v22;
    if (v22 == 0)
      goto LABEL_27;
    v10 = ((unint64_t)v3 * (unsigned __int128)(unint64_t)v7) >> 64;
    v11 = (0xFFFFFFFEFFFFFFFFLL * v3 * v7 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v12 = __CFADD__(-(v3 * v7), v3 * v7);
    v13 = __CFADD__(v11, v10);
    v14 = v11 + v10;
    if (v13)
    {
      v15 = v14 + v12;
    }
    else
    {
      if (v14 != -1)
      {
        v9 = 0;
        v16 = v14 + v12;
        if (v16 >= 0xFFFFFFFF00000001)
          v7 = v16 + 0xFFFFFFFF;
        else
          v7 = v16;
        goto LABEL_27;
      }
      v15 = 0;
      if (!v12)
      {
        v9 = 0;
        v7 = 4294967294;
        goto LABEL_27;
      }
    }
    v7 = v15 + 0xFFFFFFFF;
    if (v15 >= 0xFFFFFFFF00000001)
      goto LABEL_35;
    v9 = 0;
LABEL_27:
    v17 = (__PAIR128__(v9, v3) * __PAIR128__(v9, v3)) >> 64;
    v18 = (0xFFFFFFFEFFFFFFFFLL * v3 * v3 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v19 = __CFADD__(-(v3 * v3), v3 * v3);
    v13 = __CFADD__(v18, v17);
    v20 = v18 + v17;
    if (!v13)
    {
      if (v20 == -1)
      {
        if (v19)
          v3 = 0xFFFFFFFFLL;
        else
          v3 = 4294967294;
      }
      else
      {
        v8 = v20 + v19;
        if (v8 >= 0xFFFFFFFF00000001)
          v3 = v8 + 0xFFFFFFFF;
        else
          v3 = v8;
      }
      goto LABEL_9;
    }
    v21 = v20 + v19;
    v3 = v21 + 0xFFFFFFFF;
    if (v21 >= 0xFFFFFFFF00000001)
      break;
LABEL_9:
    v4 >>= 1;
    result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v4, &v22);
    if (v22 == 0)
      goto LABEL_3;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

unint64_t specialized ParallelSum.evaluate<A>(at:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_70;
  v4 = *(_QWORD *)(result + 16);
  v5 = 0;
  if ((uint64_t)v3 < 1 || v4 == 0)
  {
LABEL_7:
    *a2 = v5;
    return result;
  }
  v7 = 0;
  v8 = result + 32;
  v9 = 1;
  while (1)
  {
    v10 = v7;
    result = v4 - v7;
    v11 = __OFSUB__(v4, v7);
    v12 = __OFADD__(v7, v3);
    v7 += v3;
    if (v12)
    {
      if (v11)
        goto LABEL_66;
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_71;
      v13 = result >= v3;
      result = result >= v3 ? v7 : v4;
      if (v13)
        goto LABEL_71;
      v7 = 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)result < v10)
        goto LABEL_59;
    }
    else
    {
      if (v11)
        goto LABEL_67;
      if ((result & 0x8000000000000000) != 0)
      {
        result = v7;
        if (v7 < v10)
          goto LABEL_59;
      }
      else
      {
        if (result >= v3)
          result = v7;
        else
          result = v4;
        if ((uint64_t)result < v10)
          goto LABEL_59;
      }
    }
    if (!v9)
      goto LABEL_60;
    if (v10 < 0)
      goto LABEL_61;
    if (v4 < (uint64_t)result)
      goto LABEL_62;
    if (v10 >= result)
      goto LABEL_63;
    v14 = v10 + 1;
    if (v10 + 1 >= result)
      goto LABEL_64;
    v15 = *(_QWORD *)(v8 + 8 * v10);
    v16 = *(_QWORD *)(v8 + 8 * v14);
    result = (v16 * (unsigned __int128)v15) >> 64;
    v17 = (0xFFFFFFFEFFFFFFFFLL * v16 * v15 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v18 = __CFADD__(-(uint64_t)(v16 * v15), v16 * v15);
    v19 = v17 + result;
    if (__CFADD__(v17, result))
      goto LABEL_41;
    if (v19 != -1)
      break;
    if (!v18)
    {
      v22 = 0xFFFFFFFE00000003;
      goto LABEL_45;
    }
    v18 = 1;
LABEL_41:
    v20 = v18 + v19;
    v13 = __CFADD__(v20, 0xFFFFFFFFLL);
    v21 = v20 + 0xFFFFFFFFLL;
    if (v13)
      goto LABEL_65;
    if (v21)
      goto LABEL_43;
LABEL_9:
    v9 = v4 >= v7;
    if (v7 >= v4)
      goto LABEL_7;
  }
  v21 = v19 + v18;
  if (v21 >= 0xFFFFFFFF00000001)
    v21 += 0xFFFFFFFFLL;
  if (!v21)
    goto LABEL_9;
LABEL_43:
  v13 = v21 <= 0xFFFFFFFF00000001;
  v22 = 0xFFFFFFFF00000001 - v21;
  if (v13)
  {
LABEL_45:
    if (v5 >= v22)
    {
      v5 -= v22;
    }
    else
    {
      v13 = v22 <= 0xFFFFFFFF00000001;
      v23 = 0xFFFFFFFF00000001 - v22;
      if (!v13)
        goto LABEL_68;
      v13 = __CFADD__(v5, v23);
      v5 += v23;
      if (v13)
        goto LABEL_69;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

void specialized ParallelSum.evaluate<A>(at:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  int64_t v10;
  BOOL v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v5 = a3 >> 1;
  v6 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_67;
  v7 = *(_QWORD *)(v4 + 16);
  if (!v7)
  {
LABEL_68:
    __break(1u);
    return;
  }
  v8 = v6 >= 0;
  if (v7 > 0)
    v8 = v6 < 1;
  if (!v8)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v12 = v10;
      v13 = __OFADD__(v10, v7);
      v10 += v7;
      if (v13)
        v10 = (v10 >> 63) ^ 0x8000000000000000;
      v13 = __OFADD__(a2, v12);
      v14 = a2 + v12;
      if (v13)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v15 = v5 - v14;
      if (__OFSUB__(v5, v14))
        goto LABEL_55;
      if (v7 < 1)
      {
        if (v15 <= 0)
        {
          v16 = a3 >> 1;
          if (v7 < v15)
            goto LABEL_24;
        }
      }
      else if ((v15 & 0x8000000000000000) == 0)
      {
        v16 = a3 >> 1;
        if (v15 < (unint64_t)v7)
          goto LABEL_24;
      }
      v16 = v14 + v7;
      if (__OFADD__(v14, v7))
        goto LABEL_64;
LABEL_24:
      if (v16 < v14)
        goto LABEL_56;
      if (v5 < v14)
        goto LABEL_57;
      if (v14 < a2)
        goto LABEL_58;
      if (v5 < v16)
        goto LABEL_59;
      if (v16 < 0)
        goto LABEL_60;
      if (v14 >= v16)
        goto LABEL_61;
      v17 = v14 + 1;
      if (v14 + 1 >= v16)
        goto LABEL_62;
      v18 = *(_QWORD *)(a1 + 8 * v14);
      v19 = *(_QWORD *)(a1 + 8 * v17);
      v20 = (v19 * (unsigned __int128)v18) >> 64;
      v21 = (0xFFFFFFFEFFFFFFFFLL * v19 * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v22 = __CFADD__(-(uint64_t)(v19 * v18), v19 * v18);
      v23 = v21 + v20;
      if (!__CFADD__(v21, v20))
      {
        if (v23 != -1)
        {
          v26 = v23 + v22;
          if (v26 >= 0xFFFFFFFF00000001)
            v26 += 0xFFFFFFFFLL;
          if (!v26)
            goto LABEL_10;
LABEL_38:
          v25 = v26 <= 0xFFFFFFFF00000001;
          v27 = 0xFFFFFFFF00000001 - v26;
          if (!v25)
          {
            __break(1u);
            goto LABEL_54;
          }
LABEL_40:
          if (v9 >= v27)
          {
            v9 -= v27;
          }
          else
          {
            v25 = v27 <= 0xFFFFFFFF00000001;
            v28 = 0xFFFFFFFF00000001 - v27;
            if (!v25)
              goto LABEL_65;
            v25 = __CFADD__(v9, v28);
            v9 += v28;
            if (v25)
              goto LABEL_66;
          }
          goto LABEL_10;
        }
        if (!v22)
        {
          v27 = 0xFFFFFFFE00000003;
          goto LABEL_40;
        }
        v22 = 1;
      }
      v24 = v22 + v23;
      v25 = __CFADD__(v24, 0xFFFFFFFFLL);
      v26 = v24 + 0xFFFFFFFFLL;
      if (v25)
        goto LABEL_63;
      if (v26)
        goto LABEL_38;
LABEL_10:
      v11 = v6 >= v10;
      if (v7 > 0)
        v11 = v10 >= v6;
      if (v11)
        goto LABEL_7;
    }
  }
  v9 = 0;
LABEL_7:
  *a4 = v9;
}

void specialized ParallelSum.chunkEvaluateSum(_:for:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, unint64_t *a5@<X5>, uint64_t a6@<X6>, unint64_t *a7@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  BOOL v20;
  unint64_t *v21;
  _QWORD **v22;
  uint64_t v23;
  BOOL v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v39;
  char *v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65[2];
  uint64_t v66;

  v9 = v7;
  v10 = *v7;
  if ((*v7 & 0x8000000000000000) != 0)
  {
LABEL_60:
    __break(1u);
    return;
  }
  v11 = v8;
  v16 = v9[5];
  v60 = v16;
  if (v10)
  {
    v17 = a2;
    v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v18 + 16) = v10;
    bzero((void *)(v18 + 32), 8 * v10);
    v16 = v60;
    a2 = v17;
    v66 = v18;
    if (v60)
      goto LABEL_4;
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_47:
  v66 = MEMORY[0x24BEE4AF8];
  if (!v16)
    goto LABEL_48;
LABEL_4:
  v48 = a7;
  v19 = a3 >> 1;
  v20 = (uint64_t)(a3 >> 1) >= a2;
  if (v16 > 0)
    v20 = (uint64_t)(a3 >> 1) <= a2;
  if (!v20)
  {
    v61 = 0;
    v57 = a4 >> 62;
    v58 = a3 & 1;
    v51 = a4;
    v52 = a4 & 0x3FFFFFFFFFFFFFFFLL;
    v21 = (unint64_t *)(a4 + 16);
    v22 = (_QWORD **)(a4 + 32);
    v23 = a2;
    a7 = a5;
    v49 = a6;
    v50 = v9;
    v55 = a3 >> 1;
    v56 = a2;
    while (1)
    {
      v25 = v23 + v16;
      if (__OFADD__(v23, v16))
        break;
      if (v19 < v25)
        v25 = v19;
      if (v25 < v23)
        goto LABEL_55;
      if (v23 < a2)
        goto LABEL_56;
      if (v25 < 0)
        goto LABEL_57;
      v62 = v23 + v16;
      v26 = v58 | (2 * v25);
      v27 = swift_unknownObjectRetain();
      v28 = v23;
      v29 = v11;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))a7)(v27, a1, v28, v26, &v66);
      swift_unknownObjectRelease();
      if (v11)
        goto LABEL_49;
      v30 = v66;
      if ((_DWORD)v57)
      {
        if ((_DWORD)v57 == 1)
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field64>(a4);
          a3 = v52;
          specialized QueryGadget.evaluate<A>(at:)(v30, v65);
          outlined consume of GadgetEvaluation<A><A, B>(a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = (unint64_t)v9;
          specialized ParallelSum.evaluate<A>(at:)(v66, v65);
        }
      }
      else
      {
        swift_beginAccess();
        v31 = *(_QWORD *)(a4 + 16);
        if (v31 >= *(_QWORD *)(a4 + 24))
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field64>(a4);
          v63 = dispatch thunk of CustomStringConvertible.description.getter();
          v64 = v44;
          v45._countAndFlagsBits = 540884512;
          v45._object = (void *)0xE400000000000000;
          String.append(_:)(v45);
          v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
          swift_allocError();
          *(_QWORD *)v47 = v63;
          *(_QWORD *)(v47 + 8) = v64;
          *(_BYTE *)(v47 + 16) = 3;
          swift_willThrow();
          outlined consume of GadgetEvaluation<A><A, B>(a4);
          swift_bridgeObjectRelease_n();
          return;
        }
        v54 = v30;
        *v21 = v31 + 1;
        v32 = *(_QWORD *)(v30 + 16);
        if (v32)
        {
          v33 = v30 + 32;
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field64>(a4);
          swift_beginAccess();
          v34 = 0;
          while (1)
          {
            v35 = *v21;
            v36 = *(_QWORD *)(v33 + 8 * v34);
            v37 = *v22;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v22 = v37;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v37 = specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              *v22 = v37;
            }
            if (v34 >= v37[2])
              break;
            v39 = &v37[v34];
            v40 = (char *)v39[4];
            v41 = swift_isUniquelyReferenced_nonNull_native();
            v39[4] = v40;
            if ((v41 & 1) != 0)
            {
              if ((v35 & 0x8000000000000000) != 0)
                goto LABEL_53;
            }
            else
            {
              v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
              v39[4] = v40;
              if ((v35 & 0x8000000000000000) != 0)
                goto LABEL_53;
            }
            if (v35 >= *((_QWORD *)v40 + 2))
              goto LABEL_52;
            ++v34;
            *(_QWORD *)&v40[8 * v35 + 32] = v36;
            if (v32 == v34)
              goto LABEL_39;
          }
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          break;
        }
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field64>(a4);
LABEL_39:
        v9 = v50;
        a3 = (unint64_t)v50;
        specialized ParallelSum.evaluate<A>(at:)(v54, v65);
        a4 = v51;
        outlined consume of GadgetEvaluation<A><A, B>(v51);
        swift_bridgeObjectRelease();
        v11 = v29;
        a6 = v49;
        a7 = a5;
      }
      v19 = v55;
      a2 = v56;
      v16 = v60;
      if (v65[0])
      {
        v42 = 0xFFFFFFFF00000001 - v65[0];
        if (v65[0] > 0xFFFFFFFF00000001)
          goto LABEL_58;
        if (v61 >= v42)
        {
          v61 -= v42;
        }
        else
        {
          if (v42 > 0xFFFFFFFF00000001)
            goto LABEL_59;
          v43 = __CFADD__(v61, v65[0]);
          v61 += v65[0];
          if (v43)
          {
            __break(1u);
            goto LABEL_47;
          }
        }
      }
      v23 = v62;
      v24 = v55 >= v62;
      if (v60 > 0)
        v24 = v62 >= v55;
      if (v24)
        goto LABEL_8;
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v61 = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  *v48 = v61;
}

uint64_t specialized Gadget.wirePolynomialLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (v3)
    return 1 << -(char)__clz(v3 - 1);
  else
    return 1;
}

uint64_t specialized Gadget.gadgetPolynomialLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3)
  {
    v4 = 1 << -(char)__clz(v3 - 1);
    v2 = __OFSUB__(v4, 1);
    v5 = v4 - 1;
    if (!v2)
      goto LABEL_5;
    __break(1u);
    goto LABEL_11;
  }
  v5 = 0;
LABEL_5:
  v6 = *(_QWORD *)(v0 + 8);
  v7 = v6 * v5;
  if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = v7 + 1;
  if (__OFADD__(v7, 1))
LABEL_14:
    __break(1u);
  return result;
}

uint64_t specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v41 = a2;
  v44 = a1;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  v14 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45, v15);
  v42 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v19);
  v43 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v21 = a9(a8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  *(_BYTE *)(inited + 32) = a6;
  v46 = inited;
  v23 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v23);
  v24 = v46;
  type metadata accessor for XofHmacSha256Aes128(0);
  swift_allocObject();
  result = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a5, v21, v24);
  v26 = result;
  v27 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_7:
    if (!*(_QWORD *)(v26 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
    {
      v33 = v26 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
      swift_beginAccess();
      v34 = v42;
      v35 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v42, v33, v45);
      v36 = v43;
      HMAC.finalize()();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v34, v35);
      HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v36, v17);
      v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5060_s4VDAF24ExtendableOutputFunctionPAAE10nextVector5countSays5D44VGSi_tFAGSiXEfU_AA19XofHmacSha256Aes128C_TG54VDAF0rstU0CTf1cn_nTf4ng_n(0, 32, v26);
      swift_release();
      return v37;
    }
    goto LABEL_10;
  }
  v40 = v18;
  v28 = v27 - a3;
  if (v27 > a3)
  {
    v38 = v14;
    v39 = v17;
    v29 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    swift_unknownObjectRetain();
    v30 = (uint64_t *)(v41 + 8 * a3);
    v31 = MEMORY[0x24BDCFBD8];
    while (1)
    {
      v32 = *v30++;
      result = (uint64_t)specialized VDAFEncodable.encodedBytes.getter(v32);
      if (*(_QWORD *)(v26 + v29))
        break;
      v47 = result;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], v31);
      HMAC.update<A>(data:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (!--v28)
      {
        result = swift_unknownObjectRelease();
        v17 = v39;
        v18 = v40;
        v14 = v38;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(unint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(a1, a2, a3, a4, a5, a6, 6, (char *)specialized static VDAFProtocol.domainSeparationTag(usage:), (uint64_t)partial apply for closure #1 in XofHmacSha256Aes128.finalize(), (uint64_t)partial apply for closure #1 in XofHmacSha256Aes128.finalize());
}

uint64_t specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(unint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10;
  unint64_t v13;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;
  Swift::String v84;
  _QWORD v85[2];
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t);
  char *v109;
  __int128 v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  __int128 v115;
  unsigned __int8 v116;
  char *v117;
  unint64_t v118;

  v13 = v10;
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  v103 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105, v20);
  v102 = (char *)v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x24BDAC7A8](v101, v22);
  v99 = (char *)v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a6 + 16);
  if (v24 != 16)
    goto LABEL_74;
  v104 = a2;
  v114 = (char *)v10;
  v108 = (uint64_t (*)(uint64_t))a8;
  a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5 & ~(a5 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v13 = *((_QWORD *)a2 + 2);
  v24 = *((_QWORD *)a2 + 3);
  a8 = (char *)(v13 + 1);
  if (v13 >= v24 >> 1)
LABEL_75:
    a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), (int64_t)a8, 1, a2);
  *((_QWORD *)a2 + 2) = a8;
  *(_QWORD *)&a2[8 * v13 + 32] = MEMORY[0x24BEE4AF8];
  v25 = __OFSUB__(a5, 1);
  v26 = a5 - 1;
  if (v25)
  {
    __break(1u);
    goto LABEL_77;
  }
  if (v26 < 0)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (!v26)
  {
    swift_bridgeObjectRetain();
    goto LABEL_67;
  }
  v93 = a10;
  v27 = a4 + 32;
  v106 = a3 + 32;
  v28 = *(_QWORD *)(a4 + 16);
  v107 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  v29 = 0;
  v90 = MEMORY[0x24BEE4AE0] + 8;
  v111 = 0x8000000249C303D0;
  v96 = a7;
  v95 = a6;
  v94 = v26;
  v92 = v27;
  v91 = v28;
  v110 = xmmword_249C29130;
LABEL_7:
  if (v29 == v26)
    goto LABEL_78;
  if (v29 == 255)
    goto LABEL_79;
  if (v29 == v28)
    goto LABEL_80;
  v109 = (char *)a1;
  v98 = a2;
  a6 = v29 + 1;
  v30 = *(_QWORD *)(v27 + 8 * v29);
  swift_bridgeObjectRetain();
  a2 = (char *)v108;
  v31 = v108(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v110;
  *(_BYTE *)(inited + 32) = v29 + 1;
  v113 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v30, v31, inited);
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29 == v107)
    goto LABEL_81;
  v33 = *(_QWORD *)(v106 + 8 * v29);
  swift_bridgeObjectRetain_n();
  v13 = ((uint64_t (*)(uint64_t))a2)(a7);
  v34 = swift_initStackObject();
  *(_OWORD *)(v34 + 16) = v110;
  *(_BYTE *)(v34 + 32) = a6;
  *(_QWORD *)&v115 = v34;
  v35 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v35);
  a8 = (char *)v115;
  type metadata accessor for XofHmacSha256Aes128(0);
  swift_allocObject();
  v36 = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v33, v13, (uint64_t)a8);
  swift_bridgeObjectRelease();
  v37 = *((_QWORD *)v109 + 2);
  v97 = v29 + 1;
  if (!v37)
  {
    a2 = v114;
    goto LABEL_61;
  }
  v38 = 0;
  v112 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  v85[1] = v36 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
  v89 = v36;
  v86 = v37;
  while (2)
  {
    v88 = v38;
    v87 = v38 + 1;
    a7 = v112;
    a1 = v113;
    while (1)
    {
      v118 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
      a4 = 0;
      a5 = v118;
      do
      {
        a3 = *(_QWORD *)(a1 + a7);
        if (!a3)
          goto LABEL_71;
        a8 = *(char **)(a3 + 16);
        if (*((_QWORD *)a8 + 2))
        {
          swift_retain();
        }
        else
        {
          v39 = a3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
          v40 = a3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
          swift_beginAccess();
          swift_retain();
          a2 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)();
          *((_QWORD *)a2 + 2) = 16;
          *((_QWORD *)a2 + 5) = 0;
          *((_QWORD *)a2 + 4) = 0;
          v13 = *(_QWORD *)v40;
          a6 = *(unsigned int *)(v40 + 8);
          a1 = *(unsigned int *)(v40 + 12);
          v41 = v114;
          specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(a2 + 32), (uint64_t)(a2 + 48), v39, *(_QWORD *)v40, a6 | (a1 << 32));
          v114 = v41;
          if (v41)
            goto LABEL_88;
          v42 = bswap32(a1);
          *(_DWORD *)(v40 + 12) = bswap32(v42 + 1);
          if (v42 == -1)
          {
            v43 = bswap32(a6);
            *(_DWORD *)(v40 + 8) = bswap32(v43 + 1);
            if (v43 == -1)
              *(_QWORD *)v40 = bswap64(bswap64(v13) + 1);
          }
          swift_endAccess();
          v44 = *((_QWORD *)a2 + 2);
          if (v44 >= 2)
          {
            a8 = 0;
            v13 = v44 >> 1;
            a7 = v44 + 31;
            do
            {
              v24 = a7 - 32;
              if (a8 != (char *)(a7 - 32))
              {
                v47 = *((_QWORD *)a2 + 2);
                if ((unint64_t)a8 >= v47)
                {
                  __break(1u);
LABEL_70:
                  __break(1u);
LABEL_71:
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  __break(1u);
LABEL_74:
                  __break(1u);
                  goto LABEL_75;
                }
                if (v24 >= v47)
                  goto LABEL_70;
                a6 = a8[(_QWORD)a2 + 32];
                a1 = a2[a7];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  a2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)a2);
                a8[(_QWORD)a2 + 32] = a1;
                a2[a7] = a6;
              }
              ++a8;
              --a7;
            }
            while ((char *)v13 != a8);
          }
          *(_QWORD *)(a3 + 16) = a2;
          swift_bridgeObjectRelease();
          a8 = *(char **)(a3 + 16);
          v24 = *((_QWORD *)a8 + 2);
          a7 = v112;
          a1 = v113;
          if (!v24)
            goto LABEL_72;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v24 = *((_QWORD *)a8 + 2);
          if (!v24)
            goto LABEL_73;
        }
        else
        {
          a8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)a8);
          v24 = *((_QWORD *)a8 + 2);
          if (!v24)
            goto LABEL_73;
        }
        v45 = v24 - 1;
        v13 = a8[v45 + 32];
        *((_QWORD *)a8 + 2) = v45;
        *(_QWORD *)(a3 + 16) = a8;
        swift_release();
        v118 = a5;
        a8 = *(char **)(a5 + 16);
        v46 = *(_QWORD *)(a5 + 24);
        a2 = a8 + 1;
        if ((unint64_t)a8 >= v46 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), (int64_t)(a8 + 1), 1);
          a5 = v118;
        }
        ++a4;
        *(_QWORD *)(a5 + 16) = a2;
        v24 = (unint64_t)&a8[a5];
        a8[a5 + 32] = v13;
      }
      while (a4 != 8);
      if (a8 == (char *)7)
        break;
      *(_QWORD *)&v115 = 0;
      *((_QWORD *)&v115 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v115 = 0xD000000000000019;
      *((_QWORD *)&v115 + 1) = v111;
      v118 = 8;
      v13 = MEMORY[0x24BEE17D8];
      v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._countAndFlagsBits = 0x203A746F67202CLL;
      v52._object = (void *)0xE700000000000000;
      String.append(_:)(v52);
      v118 = (unint64_t)(a8 + 1);
      v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54 = *((_QWORD *)&v115 + 1);
      a8 = (char *)v115;
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      a2 = (char *)swift_allocError();
      *(_OWORD *)v55 = __PAIR128__(v54, (unint64_t)a8);
      *(_BYTE *)(v55 + 16) = 0;
LABEL_46:
      swift_willThrow();
LABEL_47:
      v114 = 0;
      swift_release();
      v118 = (unint64_t)a2;
      MEMORY[0x24BD00B44](a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (!swift_dynamicCast())
        goto LABEL_90;
      v58 = *((_QWORD *)&v115 + 1);
      v57 = v115;
      v59 = v116;
      if (v116 != 5 || v115 != 0)
        goto LABEL_89;
      MEMORY[0x24BD00B38](a2);
      MEMORY[0x24BD00B38](v118);
    }
    v48 = swift_retain();
    v49 = v114;
    v50 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(v48);
    a2 = v49;
    if (v49)
    {
      swift_release();
      goto LABEL_47;
    }
    a8 = (char *)v50;
    swift_release();
    if ((unint64_t)a8 >= 0xFFFFFFFF00000001)
    {
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      a2 = (char *)swift_allocError();
      *(_QWORD *)v56 = 0;
      *(_QWORD *)(v56 + 8) = 0;
      *(_BYTE *)(v56 + 16) = 5;
      goto LABEL_46;
    }
    specialized FieldElement.init(_:)((unint64_t)a8, &v118);
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v109 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v109);
    v60 = v89;
    if (v88 >= *((_QWORD *)v109 + 2))
      goto LABEL_84;
    v61 = v118;
    v62 = *(_QWORD *)&v109[8 * v88 + 32];
    v63 = v62 - v118;
    if (v62 >= v118)
      goto LABEL_57;
    v64 = 0xFFFFFFFF00000001 - v118;
    if (v118 > 0xFFFFFFFF00000001)
      goto LABEL_86;
    v65 = __CFADD__(v62, v64);
    v63 = v62 + v64;
    if (!v65)
    {
LABEL_57:
      *(_QWORD *)&v109[8 * v88 + 32] = v63;
      v66 = specialized VDAFEncodable.encodedBytes.getter(v61);
      if (*(_QWORD *)(v60 + a7))
        goto LABEL_85;
      a8 = v66;
      v117 = v66;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBD8]);
      HMAC.update<A>(data:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v38 = v87;
      v114 = 0;
      v36 = v89;
      if (v87 != v86)
        continue;
LABEL_61:
      if (*(_QWORD *)(v36 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
        goto LABEL_83;
      v67 = v36 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
      swift_beginAccess();
      v68 = v103;
      v69 = v102;
      v70 = v67;
      v71 = v105;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v102, v70, v105);
      v72 = v99;
      HMAC.finalize()();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v71);
      v73 = v101;
      HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v100 + 8))(v72, v73);
      swift_retain();
      v112 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5060_s4VDAF24ExtendableOutputFunctionPAAE10nextVector5countSays5D44VGSi_tFAGSiXEfU_AA19XofHmacSha256Aes128C_TG54VDAF0rstU0CTf1cn_nTf4ng_n(0, 32, v36);
      v114 = a2;
      swift_release();
      a2 = v98;
      v75 = *((_QWORD *)v98 + 2);
      v74 = *((_QWORD *)v98 + 3);
      if (v75 >= v74 >> 1)
        a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v98);
      v76 = v109;
      v77 = v96;
      v78 = v95;
      v26 = v94;
      v79 = v112;
      *((_QWORD *)a2 + 2) = v75 + 1;
      *(_QWORD *)&a2[8 * v75 + 32] = v79;
      swift_release();
      swift_release();
      v29 = v97;
      v27 = v92;
      v28 = v91;
      a7 = v77;
      a6 = v78;
      a1 = (unint64_t)v76;
      if (v97 == v26)
      {
LABEL_67:
        v80 = (2 * *(_QWORD *)(a1 + 16)) | 1;
        v81 = swift_bridgeObjectRetain();
        v82 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v81, a1 + 32, 0, v80, (uint64_t)v104, 0, a6, a7, v108);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)a2 + 2))
        {
          *((_QWORD *)a2 + 4) = v82;
          swift_bridgeObjectRelease();
          return (uint64_t)a2;
        }
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        break;
      }
      goto LABEL_7;
    }
    break;
  }
  __break(1u);
LABEL_88:
  v57 = swift_unexpectedError();
  __break(1u);
LABEL_89:
  outlined consume of VDAFError(v57, v58, v59);
LABEL_90:
  MEMORY[0x24BD00B38](v118);
  *(_QWORD *)&v115 = 0;
  *((_QWORD *)&v115 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v84._object = (void *)0x8000000249C30420;
  v84._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v84);
  v118 = (unint64_t)a2;
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *specialized discreteFourierTransform<A, B, C>(input:size:output:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  _QWORD *v18;
  uint64_t *result;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  _QWORD *v56;

  v9 = a2 - 1;
  if (__OFSUB__(a2, 1))
    goto LABEL_105;
  v3 = a2;
  if (a2 < 1 || (v9 & a2) != 0)
  {
LABEL_106:
    __break(1u);
  }
  else
  {
    v7 = a3;
    v5 = a1;
    if (one-time initialization token for roots == -1)
      goto LABEL_5;
  }
  swift_once();
LABEL_5:
  v10 = *((_QWORD *)static MontgomeryFiniteField64.roots + 2);
  if (v10 >= 0x40)
    v11 = 0;
  else
    v11 = 1 << v10;
  if (v11 <= v3)
  {
    __break(1u);
    goto LABEL_109;
  }
  v4 = *(char **)v7;
  if (*(_QWORD *)(*(_QWORD *)v7 + 16) < (unint64_t)v3)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  specialized static BitReversal.indicesFor(_:)(v3);
  if ((unint64_t)v9 < *(_QWORD *)(v12 + 16))
  {
    v6 = v12;
    v8 = __clz(__rbit64(v3));
    v9 = *(_QWORD *)(v5 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_12;
    goto LABEL_111;
  }
LABEL_110:
  __break(1u);
LABEL_111:
  v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
LABEL_12:
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)(v6 + 8 * v13 + 32);
    if (v14 >= v9)
    {
      if (v13 >= *((_QWORD *)v4 + 2))
        goto LABEL_98;
      v15 = 0;
    }
    else
    {
      if (v14 < 0)
        goto LABEL_97;
      if (v13 >= *((_QWORD *)v4 + 2))
        goto LABEL_99;
      v15 = *(_QWORD *)(v5 + 32 + 8 * v14);
    }
    *(_QWORD *)&v4[8 * v13++ + 32] = v15;
  }
  while (v3 != v13);
  swift_bridgeObjectRelease();
  v56 = (_QWORD *)v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  v16 = 0;
  v17 = v4 + 32;
  v5 = 0x2578C8000uLL;
  v18 = &one-time initialization token for one;
  v6 = 0xFFFFFFFF00000001;
  v9 = 0xFFFFFFFFLL;
  result = &one-time initialization token for one;
  v7 = 1;
  v20 = &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>;
  while (1)
  {
    v21 = v7;
    if (v7 >= v8)
    {
      if ((v7 != v8) | v16 & 1)
      {
LABEL_93:
        *v56 = v4;
        return result;
      }
      v16 = 1;
      v7 = v8;
    }
    else
    {
      ++v7;
    }
    if (one-time initialization token for one != -1)
    {
      swift_once();
      result = &one-time initialization token for one;
      v18 = &one-time initialization token for one;
      v20 = (_QWORD *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>;
    }
    v22 = v20[150];
    if ((int64_t)v21 >= *(_QWORD *)(v22 + 16))
      break;
    if ((v21 & 0x8000000000000000) != 0)
      goto LABEL_102;
    if (v21 >= 0x40)
      v23 = 0;
    else
      v23 = 1 << v21;
    if (v23 < 0)
    {
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    if ((unint64_t)v23 >= 2)
    {
      v24 = v3 / (1 << v21);
      if (v24 < 0)
        goto LABEL_104;
      v25 = 0;
      v26 = v18[279];
      v27 = *(_QWORD *)(v22 + 8 * v21 + 32);
      v28 = v23 >> 1;
LABEL_41:
      if (v25 == ((v23 >> 1) & ~(v23 >> 63)))
        goto LABEL_100;
      if (v24)
      {
        for (i = 0; v24 != i; ++i)
        {
          v34 = v23 * i;
          if ((unsigned __int128)(v23 * (__int128)i) >> 64 != (v23 * i) >> 63)
          {
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
            goto LABEL_93;
          }
          v35 = v34 + v25;
          if (__OFADD__(v34, v25))
            goto LABEL_86;
          if ((v35 & 0x8000000000000000) != 0)
            goto LABEL_87;
          v36 = *((_QWORD *)v4 + 2);
          if (v35 >= v36)
            goto LABEL_88;
          v37 = v35 + v28;
          if (__OFADD__(v35, v28))
            goto LABEL_89;
          if (v37 >= v36)
            goto LABEL_90;
          v38 = *(_QWORD *)&v17[8 * v35];
          v39 = *(_QWORD *)&v17[8 * v37];
          v40 = (v39 * (unsigned __int128)v26) >> 64;
          v41 = (0xFFFFFFFEFFFFFFFFLL * v39 * v26 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
          v42 = __CFADD__(-(uint64_t)(v39 * v26), v39 * v26);
          v31 = __CFADD__(v41, v40);
          v43 = v41 + v40;
          if (!v31)
          {
            if (v43 != -1)
            {
              v49 = v43 + v42;
              if (v49 >= 0xFFFFFFFF00000001)
                v45 = v49 + 0xFFFFFFFF;
              else
                v45 = v49;
              if (!v45)
                goto LABEL_44;
              goto LABEL_58;
            }
            if (!v42)
            {
              v45 = 4294967294;
              v46 = 0xFFFFFFFE00000003;
              goto LABEL_59;
            }
            v42 = 1;
          }
          v44 = v42 + v43;
          v45 = v44 + 0xFFFFFFFF;
          if (v44 >= 0xFFFFFFFF00000001)
            goto LABEL_92;
LABEL_58:
          v46 = 0xFFFFFFFF00000001 - v45;
          if (v45 > 0xFFFFFFFF00000001)
            goto LABEL_91;
LABEL_59:
          v47 = v38 - v46;
          if (v38 < v46)
          {
            v48 = 0xFFFFFFFF00000001 - v46;
            if (v46 > 0xFFFFFFFF00000001)
            {
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
              goto LABEL_103;
            }
            v31 = __CFADD__(v38, v48);
            v47 = v38 + v48;
            if (v31)
              goto LABEL_96;
          }
          *(_QWORD *)&v17[8 * v35] = v47;
          if (v38 >= v45)
          {
LABEL_44:
            v33 = v38 - v45;
            goto LABEL_45;
          }
          v33 = v38 + v46;
          if (__CFADD__(v38, v46))
            goto LABEL_95;
LABEL_45:
          *(_QWORD *)&v17[8 * v37] = v33;
        }
      }
      v50 = (v26 * (unsigned __int128)v27) >> 64;
      v51 = (0xFFFFFFFEFFFFFFFFLL * v26 * v27 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v29 = __CFADD__(-(uint64_t)(v26 * v27), v26 * v27);
      v52 = v51 + v50;
      if (!__CFADD__(v51, v50))
      {
        if (v52 != -1)
        {
          v26 = v52 + v29;
          if (v26 >= 0xFFFFFFFF00000001)
            v26 += 0xFFFFFFFFLL;
          goto LABEL_40;
        }
        if (!v29)
        {
          v26 = 4294967294;
          goto LABEL_40;
        }
        v29 = 1;
      }
      v30 = v29 + v52;
      v31 = __CFADD__(v30, 0xFFFFFFFFLL);
      v26 = v30 + 0xFFFFFFFFLL;
      if (v31)
        goto LABEL_101;
LABEL_40:
      if (++v25 == v28)
        continue;
      goto LABEL_41;
    }
  }
  _StringGuts.grow(_:)(26);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 2112544;
  v53._object = (void *)0xE300000000000000;
  String.append(_:)(v53);
  v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._object = (void *)0x8000000249C30630;
  v55._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v55);
  result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(unint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_38;
  specialized FieldElement.init(_:)(a2, &v25);
  v6 = v25;
  if (!v25)
  {
LABEL_39:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v24);
  if (v24 != 0)
  {
    v9 = 0xFFFFFFFEFFFFFFFFLL;
    v7 = 0xFFFFFFFFLL;
    while (1)
    {
      protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v9 & 1, &v24);
      v11 = *((_QWORD *)&v24 + 1) | v24;
      if (v24 == 0)
        goto LABEL_29;
      v12 = (v6 * (unsigned __int128)v7) >> 64;
      v13 = (0xFFFFFFFEFFFFFFFFLL * v6 * v7 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v14 = __CFADD__(-(uint64_t)(v6 * v7), v6 * v7);
      v15 = __CFADD__(v13, v12);
      v16 = v13 + v12;
      if (v15)
      {
        v17 = v16 + v14;
      }
      else
      {
        if (v16 != -1)
        {
          v11 = 0;
          v18 = v16 + v14;
          if (v18 >= 0xFFFFFFFF00000001)
            v7 = v18 + 0xFFFFFFFF;
          else
            v7 = v18;
          goto LABEL_29;
        }
        v17 = 0;
        if (!v14)
        {
          v11 = 0;
          v7 = 4294967294;
          goto LABEL_29;
        }
      }
      v7 = v17 + 0xFFFFFFFF;
      if (v17 >= 0xFFFFFFFF00000001)
        goto LABEL_37;
      v11 = 0;
LABEL_29:
      v19 = (__PAIR128__(v11, v6) * __PAIR128__(v11, v6)) >> 64;
      v20 = (0xFFFFFFFEFFFFFFFFLL * v6 * v6 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v21 = __CFADD__(-(uint64_t)(v6 * v6), v6 * v6);
      v15 = __CFADD__(v20, v19);
      v22 = v20 + v19;
      if (v15)
      {
        v23 = v22 + v21;
        v6 = v23 + 0xFFFFFFFF;
        if (v23 >= 0xFFFFFFFF00000001)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
      }
      else if (v22 == -1)
      {
        if (v21)
          v6 = 0xFFFFFFFFLL;
        else
          v6 = 4294967294;
      }
      else
      {
        v10 = v22 + v21;
        if (v10 >= 0xFFFFFFFF00000001)
          v6 = v10 + 0xFFFFFFFF;
        else
          v6 = v10;
      }
      v9 >>= 1;
      protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v9, &v24);
      if (v24 == 0)
        goto LABEL_5;
    }
  }
  v7 = 0xFFFFFFFFLL;
LABEL_5:
  specialized discreteFourierTransform<A, B, C>(input:size:output:)(a1, a2, (uint64_t)a3);
  return specialized inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(a2, v7, a3);
}

uint64_t specialized evaluateUsingHorner<A, B>(_:atInput:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_36;
  v4 = 0;
  v5 = result + 32;
  v6 = *(_QWORD *)(result + 32 + 8 * v3 - 8);
  v7 = v3 - 2;
  while (1)
  {
    do
    {
      if (v7 <= 0)
      {
        if ((v7 != 0) | v4 & 1)
          goto LABEL_31;
        v8 = 0;
        v4 = 1;
      }
      else
      {
        v8 = v7 - 1;
      }
      result = (v6 * (unsigned __int128)a2) >> 64;
      v9 = (0xFFFFFFFEFFFFFFFFLL * v6 * a2 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v10 = __CFADD__(-(uint64_t)(v6 * a2), v6 * a2);
      v11 = v9 + result;
      if (__CFADD__(v9, result))
        goto LABEL_13;
      if (v11 != -1)
      {
        v6 = v11 + v10;
        if (v6 >= 0xFFFFFFFF00000001)
          v6 += 0xFFFFFFFFLL;
        goto LABEL_19;
      }
      if (v10)
      {
        v10 = 1;
LABEL_13:
        v12 = v10 + v11;
        v13 = __CFADD__(v12, 0xFFFFFFFFLL);
        v6 = v12 + 0xFFFFFFFFLL;
        if (v13)
          goto LABEL_33;
LABEL_19:
        if (v7 >= v3)
          goto LABEL_30;
        goto LABEL_20;
      }
      v6 = 4294967294;
      if (v7 >= v3)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        *a3 = v6;
        return result;
      }
LABEL_20:
      v14 = *(_QWORD *)(v5 + 8 * v7);
      v7 = v8;
    }
    while (!v14);
    v15 = 0xFFFFFFFF00000001 - v14;
    if (v14 > 0xFFFFFFFF00000001)
      break;
    if (v6 >= v15)
    {
      v6 -= v15;
      v7 = v8;
    }
    else
    {
      if (v15 > 0xFFFFFFFF00000001)
        goto LABEL_34;
      v7 = v8;
      v13 = __CFADD__(v6, v14);
      v6 += v14;
      if (v13)
        goto LABEL_35;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized Polynomial.degree.getter(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    while (1)
    {
      v2 = *(_QWORD *)(result + 24 + 8 * v1);
      if (v2 > 0xFFFFFFFF00000000)
        break;
      if (v2)
        return v1 - 1;
      if (v1-- <= 1)
      {
        v1 = 0;
        return v1 - 1;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized static Polynomial.+ infix(_:_:)(unint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  int v33;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    goto LABEL_66;
  v7 = a1 + 32;
  v8 = v3 + 3;
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 8 * v8);
    if (v9 > 0xFFFFFFFF00000000)
      goto LABEL_58;
    if (v9)
      break;
    v10 = v8 - 3;
    --v8;
    if (v10 <= 1)
    {
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_67;
      *a3 = a2;
      goto LABEL_54;
    }
  }
  if ((specialized Polynomial.degree.getter(a2) & 0x8000000000000000) != 0)
  {
    *a3 = a1;
LABEL_54:
    swift_bridgeObjectRetain();
    return;
  }
  v11 = specialized Polynomial.degree.getter(a1);
  v12 = specialized Polynomial.degree.getter(a2);
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = specialized Polynomial.degree.getter(a1);
  v15 = specialized Polynomial.degree.getter(a2);
  if (v15 <= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v17 < 0)
      goto LABEL_69;
    if (v16 == -1)
    {
      v18 = MEMORY[0x24BEE4AF8];
      if ((v13 & 0x8000000000000000) == 0)
        goto LABEL_19;
    }
    else
    {
      v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v18 + 16) = v17;
      bzero((void *)(v18 + 32), 8 * v16 + 8);
      if ((v13 & 0x8000000000000000) == 0)
      {
LABEL_19:
        v19 = 0;
        v20 = *(_QWORD *)(a2 + 16);
        v21 = v18 + 32;
        if (v3 <= 1)
          v22 = 1;
        else
          v22 = v3;
        while (v20 != v19)
        {
          v23 = *(_QWORD *)(v7 + 8 * v19);
          v24 = *(_QWORD *)(a2 + 32 + 8 * v19);
          if (v24)
          {
            v25 = v24 <= 0xFFFFFFFF00000001;
            v26 = 0xFFFFFFFF00000001 - v24;
            if (!v25)
              goto LABEL_63;
            if (v23 >= v26)
            {
              v23 -= v26;
            }
            else
            {
              v25 = v26 <= 0xFFFFFFFF00000001;
              v27 = 0xFFFFFFFF00000001 - v26;
              if (!v25)
                goto LABEL_64;
              v25 = __CFADD__(v23, v27);
              v23 += v27;
              if (v25)
                goto LABEL_65;
            }
          }
          if (v19 >= *(_QWORD *)(v18 + 16))
            goto LABEL_60;
          *(_QWORD *)(v21 + 8 * v19) = v23;
          if (v13 == v19)
            goto LABEL_37;
          if (v22 == ++v19)
          {
            __break(1u);
LABEL_37:
            v28 = v13 + 1;
            if (__OFADD__(v13, 1))
              goto LABEL_70;
            v29 = 0;
            v30 = v28 == v16;
            if ((uint64_t)v28 >= v16)
              goto LABEL_42;
LABEL_39:
            v31 = v28 + 1;
            if (v3 < v20)
            {
LABEL_40:
              v32 = a2;
              if (v28 < v20)
                goto LABEL_48;
              goto LABEL_61;
            }
            while (1)
            {
              v32 = a1;
              if (v28 >= v3)
                goto LABEL_62;
LABEL_48:
              if (v28 >= *(_QWORD *)(v18 + 16))
                goto LABEL_57;
              *(_QWORD *)(v21 + 8 * v28) = *(_QWORD *)(v32 + 8 * v28 + 32);
              v28 = v31;
              v30 = v31 == v16;
              if (v31 < v16)
                goto LABEL_39;
LABEL_42:
              v33 = !v30;
              if (((v33 | v29) & 1) != 0)
              {
                if (!*(_QWORD *)(v18 + 16))
                  goto LABEL_71;
                *a3 = v18;
                return;
              }
              v29 = 1;
              v31 = v16;
              if (v3 < v20)
                goto LABEL_40;
            }
          }
        }
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

int64_t specialized static Polynomial.* infix(_:_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  int64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  result = specialized Polynomial.degree.getter(a1);
  if (result < 0 || (result = specialized Polynomial.degree.getter(a2), result < 0))
  {
    v14 = (char *)&outlined read-only object #0 of specialized static Polynomial.* infix(_:_:);
LABEL_33:
    *a3 = v14;
    return result;
  }
  v7 = specialized Polynomial.degree.getter(a1);
  result = specialized Polynomial.degree.getter(a2);
  v8 = v7 + result;
  if (__OFADD__(v7, result))
  {
    __break(1u);
    goto LABEL_35;
  }
  v9 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v10 = specialized Polynomial.degree.getter(a1);
  result = specialized Polynomial.degree.getter(a2);
  if (result <= v10)
    v11 = v10;
  else
    v11 = result;
  if (v11 >= 61)
  {
    result = specialized FixedWidthInteger.nextPowerOfTwo.getter(v9);
    if (result < 0)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v12 = result;
    if (result)
    {
      v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v13 + 16) = v12;
      bzero((void *)(v13 + 32), 8 * v12);
    }
    else
    {
      v13 = MEMORY[0x24BEE4AF8];
    }
    v20 = (char *)v13;
    result = specialized Polynomial.degree.getter(a1);
    v16 = result + 1;
    if (__OFADD__(result, 1))
      goto LABEL_39;
    if ((v16 & 0x8000000000000000) != 0)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (*(_QWORD *)(a1 + 16) < v16)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    result = specialized Polynomial.degree.getter(a2);
    v17 = result + 1;
    if (__OFADD__(result, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if ((v17 & 0x8000000000000000) != 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (*(_QWORD *)(a2 + 16) < v17)
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    result = specialized convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(a1 + 32, 0, (2 * v16) | 1, a2 + 32, 0, (2 * v17) | 1, &v20);
    goto LABEL_32;
  }
  if (v9 < 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v9)
  {
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v15 + 16) = v9;
    bzero((void *)(v15 + 32), 8 * v9);
  }
  else
  {
    v15 = MEMORY[0x24BEE4AF8];
  }
  v20 = (char *)v15;
  result = specialized Polynomial.degree.getter(a1);
  v18 = result + 1;
  if (__OFADD__(result, 1))
    goto LABEL_45;
  if ((v18 & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (*(_QWORD *)(a1 + 16) < v18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  result = specialized Polynomial.degree.getter(a2);
  v19 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (*(_QWORD *)(a2 + 16) >= v19)
  {
    result = specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(a1 + 32, 0, (2 * v18) | 1, a2 + 32, 0, (2 * v19) | 1, (uint64_t *)&v20);
LABEL_32:
    v14 = v20;
    if (*((_QWORD *)v20 + 2))
      goto LABEL_33;
    goto LABEL_36;
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized static PINE.domainSeparationTag(usage:)(unsigned __int8 a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  int v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0, MEMORY[0x24BEE4AF8]);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  v9[0] = v2;
  v8 = -1;
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)v9);
  specialized Array.append<A>(contentsOf:)(v5);
  LOWORD(v8) = __rev16(a1 + 1);
  v6 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v8 + 2);
  specialized Array.append<A>(contentsOf:)(v6);
  return v9[0];
}

uint64_t specialized PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, char **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  char v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char *v56;
  unint64_t v57;
  _QWORD *v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  Swift::String v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  char **v137;
  int64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  unsigned __int8 v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  _BYTE v152[64];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  unint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  unint64_t v162;

  v11 = *(_QWORD *)(a3 + 16);
  if (v11 != 32)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v147 = 0xD000000000000034;
    *((_QWORD *)&v147 + 1) = 0x8000000249C30D80;
LABEL_13:
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0x3D746F67202CLL;
    v32._object = (void *)0xE600000000000000;
    String.append(_:)(v32);
    v162 = v11;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34 = *((_QWORD *)&v147 + 1);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v35 = v147;
    *(_QWORD *)(v35 + 8) = v34;
    *(_BYTE *)(v35 + 16) = 1;
    return swift_willThrow();
  }
  v11 = *(_QWORD *)(a5 + 16);
  if (v11 != 16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v147 = 0xD000000000000030;
    *((_QWORD *)&v147 + 1) = 0x8000000249C30DC0;
    goto LABEL_13;
  }
  if ((*(_QWORD *)v8 & 0x8000000000000000) != 0)
    goto LABEL_85;
  if ((a4 & 0x8000000000000000) != 0 || *(_QWORD *)v8 <= (int64_t)a4)
  {
    *(_QWORD *)&v147 = a4;
    v36 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = v37;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v39 = v36;
    *(_QWORD *)(v39 + 8) = v38;
    *(_BYTE *)(v39 + 16) = 0;
    return swift_willThrow();
  }
  if (a4 > 0xFF)
  {
    __break(1u);
    goto LABEL_87;
  }
  v139 = *(_QWORD *)v8;
  v15 = *(_QWORD *)a8;
  v16 = *(_BYTE *)(a8 + 8);
  v17 = *(_OWORD *)(v8 + 120);
  v155 = *(_OWORD *)(v8 + 104);
  v156 = v17;
  v157 = *(_OWORD *)(v8 + 136);
  v158 = *(_QWORD *)(v8 + 152);
  v18 = *(_OWORD *)(v8 + 56);
  *(_OWORD *)&v152[32] = *(_OWORD *)(v8 + 40);
  *(_OWORD *)&v152[48] = v18;
  v19 = *(_OWORD *)(v8 + 88);
  v153 = *(_OWORD *)(v8 + 72);
  v154 = v19;
  v20 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)v152 = *(_OWORD *)(v8 + 8);
  *(_OWORD *)&v152[16] = v20;
  if (__OFSUB__(*(_QWORD *)v152, *((_QWORD *)&v156 + 1)))
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v15, v16, a4, *(_QWORD *)v152 - *((_QWORD *)&v156 + 1), (uint64_t (*)(_QWORD))specialized static PINE.domainSeparationTag(usage:));
  v10 = v9;
  if (v9)
    return result;
  v137 = a2;
  v138 = a4;
  v141 = *(_QWORD *)(a8 + 16);
  v143 = result;
  v26 = *(_BYTE *)(a8 + 24);
  v162 = result;
  v27 = *(_QWORD *)(v8 + 160);
  swift_bridgeObjectRetain();
  v28 = specialized FullyLinearProof.proofLength.getter();
  if ((unsigned __int128)(v28 * (__int128)v27) >> 64 != (v28 * v27) >> 63)
    goto LABEL_88;
  v29 = v27;
  v30 = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:numOfProofs:count:)(v141, v26, v138, v27, v28 * v27, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
  v41 = v40;
  v43 = v42;
  v133 = v44;
  v135 = v30;
  v136 = v29;
  v45 = *(_QWORD *)(a8 + 32);
  v46 = *(_QWORD *)(a8 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  if ((v158 & 0x8000000000000000) != 0)
    goto LABEL_89;
  v131 = v43;
  v132 = v41;
  if (*(_QWORD *)(v143 + 16) < v158)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v134 = specialized WraparoundJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:)(a6, v143, v143 + 32, 0, (2 * v158) | 1, v45, v138, a5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  v47 = (2 * *(_QWORD *)(v143 + 16)) | 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48 = specialized VerificationJointRandomness.__allocating_init(originalParts:commitment:blind:aggregatorID:nonce:count:numOfProofs:)(a7, v143, v143 + 32, 0, v47, v46, v138, a5, 3, v136, &lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  v49 = specialized PINECircuit.truncate(measurement:)(v143);
  if ((*((_QWORD *)&v154 + 1) & 0x8000000000000000) != 0)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v50 = v134;
  if (*(_QWORD *)(v143 + 16) < *((_QWORD *)&v154 + 1))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v129 = v49;
  v130 = v48;
  if ((*((_QWORD *)&v156 + 1) & 0x8000000000000000) != 0)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  swift_retain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64Vs5NeverOTg50146_s4VDAF11PINECircuitV21wraparoundDotProducts_6randomSayxGs10ArraySliceVyxG_AA25WraparoundJointRandomnessCyqd__xGtAA12VDAFProtocolRd__lFxSiXEfU_AA7E47V_SRySfGAA4PINEVyAopA19XofHmacSha256Aes128CGTG5s0pQ0VyAIGAG0tuV0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_n(0, *((uint64_t *)&v156 + 1), v143, v143 + 32, 0, (2 * *((_QWORD *)&v154 + 1)) | 1);
  v52 = v51;
  swift_bridgeObjectRelease();
  swift_release();
  specialized Array.append<A>(contentsOf:)(v52);
  v159 = *(_OWORD *)&v152[8];
  v160 = *(_OWORD *)&v152[24];
  v161 = *(_OWORD *)&v152[40];
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  v53 = specialized static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(a3, v136, a5, 1, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
  v54 = specialized FullyLinearProof.verifierLength.getter();
  if ((unsigned __int128)(v136 * (__int128)v54) >> 64 != (v136 * v54) >> 63)
  {
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v55 = v136;
  v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v136 * v54) & ~((v136 * v54) >> 63), 0, MEMORY[0x24BEE4AF8]);
  v151 = v56;
  if (v136 < 0)
    goto LABEL_95;
  if (!v136)
  {
    v121 = v56;
    swift_bridgeObjectRelease();
LABEL_77:
    v115 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t)&protocol conformance descriptor for WraparoundJointRandomness<A, B>);
    v116 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t)&protocol conformance descriptor for VerificationJointRandomness<A, B>);
    *(_QWORD *)a1 = v129;
    *(_QWORD *)(a1 + 8) = v115;
    *(_QWORD *)(a1 + 16) = v116;
    *(_BYTE *)(a1 + 24) = v138;
    v117 = *(_QWORD *)(v50 + 16);
    if (*(_QWORD *)(v117 + 16) > v138)
    {
      v118 = v130[2];
      if (*(_QWORD *)(v118 + 16) > v138)
      {
        v119 = *(char **)(v117 + 8 * v138 + 32);
        v120 = *(char **)(v118 + 8 * v138 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        result = swift_bridgeObjectRelease();
        *v137 = v121;
        v137[1] = v119;
        v137[2] = v120;
        return result;
      }
      goto LABEL_100;
    }
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    v95 = swift_unexpectedError();
    __break(1u);
LABEL_102:
    outlined consume of VDAFError(v95, v96, v97);
LABEL_103:
    MEMORY[0x24BD00B38](v149);
    *(_QWORD *)&v147 = 0;
    *((_QWORD *)&v147 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v122._object = (void *)0x8000000249C30420;
    v122._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v122);
    v149 = v10;
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v57 = 0;
  v125 = v53 + 32;
  v126 = v162;
  v58 = v130;
  v128 = v53;
  while (1)
  {
    v127 = v57;
    if (v57 == v55)
      goto LABEL_96;
    v59 = v58[5];
    v60 = specialized VerificationJointRandomness.xof.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
    if (v59 < 0)
      goto LABEL_97;
    v61 = v60;
    if (v59)
      break;
    swift_release();
    v144 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_73:
    v102 = specialized FullyLinearProof.proofLength.getter();
    v146 = specialized Collection.prefix(_:)(v102, v135, v132, v133, v131);
    v104 = v103;
    v106 = v105;
    v108 = v107;
    v109 = specialized Collection.dropFirst(_:)(v102, v135, v132, v133, v131);
    v132 = v110;
    v133 = v111;
    v131 = v112;
    if (v127 >= *(_QWORD *)(v128 + 16))
      goto LABEL_101;
    v113 = v109;
    v114 = *(_QWORD *)(v125 + 8 * v127);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v151, v126, v146, v104, v106, v108, v114, v144, v139);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v135 = v113;
    v55 = v136;
    v58 = v130;
    v57 = v127 + 1;
    if (v127 + 1 == v136)
    {
      swift_bridgeObjectRelease();
      v121 = v151;
      v50 = v134;
      goto LABEL_77;
    }
  }
  v150 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
  v62 = 0;
  v145 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  v123 = v59;
  v142 = v61;
LABEL_30:
  if (v62 == v59)
    goto LABEL_98;
  v124 = v62 + 1;
LABEL_32:
  v149 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
  v63 = 0;
  v64 = v149;
  while (1)
  {
    v65 = *(_QWORD *)(v61 + v145);
    if (!v65)
      goto LABEL_82;
    v66 = *(char **)(v65 + 16);
    if (!*((_QWORD *)v66 + 2))
      break;
    swift_retain();
LABEL_41:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v76 = *((_QWORD *)v66 + 2);
      if (!v76)
        goto LABEL_84;
    }
    else
    {
      v66 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v66);
      v76 = *((_QWORD *)v66 + 2);
      if (!v76)
        goto LABEL_84;
    }
    v77 = v76 - 1;
    v78 = v66[v77 + 32];
    *((_QWORD *)v66 + 2) = v77;
    *(_QWORD *)(v65 + 16) = v66;
    swift_release();
    v149 = v64;
    v80 = *(_QWORD *)(v64 + 16);
    v79 = *(_QWORD *)(v64 + 24);
    if (v80 >= v79 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1);
      v64 = v149;
    }
    ++v63;
    *(_QWORD *)(v64 + 16) = v80 + 1;
    *(_BYTE *)(v64 + v80 + 32) = v78;
    if (v63 == 8)
    {
      if (v80 != 7)
      {
        *(_QWORD *)&v147 = 0;
        *((_QWORD *)&v147 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v147 = 0xD000000000000019;
        *((_QWORD *)&v147 + 1) = 0x8000000249C303D0;
        v149 = 8;
        v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v88);
        swift_bridgeObjectRelease();
        v89._countAndFlagsBits = 0x203A746F67202CLL;
        v89._object = (void *)0xE700000000000000;
        String.append(_:)(v89);
        v149 = v80 + 1;
        v90._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v90);
        swift_bridgeObjectRelease();
        v91 = v147;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v10 = swift_allocError();
        *(_OWORD *)v92 = v91;
        *(_BYTE *)(v92 + 16) = 0;
        goto LABEL_62;
      }
      v10 = 0;
      v87 = swift_retain();
      v93 = specialized VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(v87);
      swift_release();
      if (v93 >= 0xFFFFFFFF00000001)
      {
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        v10 = swift_allocError();
        *(_QWORD *)v94 = 0;
        *(_QWORD *)(v94 + 8) = 0;
        *(_BYTE *)(v94 + 16) = 5;
LABEL_62:
        swift_willThrow();
        swift_release();
        v149 = v10;
        MEMORY[0x24BD00B44](v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast())
          goto LABEL_103;
        v96 = *((_QWORD *)&v147 + 1);
        v95 = v147;
        v97 = v148;
        if (v148 != 5 || v147 != 0)
          goto LABEL_102;
        MEMORY[0x24BD00B38](v10, *((_QWORD *)&v147 + 1));
        MEMORY[0x24BD00B38](v149);
        goto LABEL_32;
      }
      specialized FieldElement.init(_:)(v93, (unint64_t *)&v147);
      swift_release();
      v98 = v147;
      v99 = v150;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99[2] + 1, 1);
        v99 = v150;
      }
      v62 = v124;
      v101 = v99[2];
      v100 = v99[3];
      if (v101 >= v100 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v100 > 1), v101 + 1, 1);
        v99 = v150;
      }
      v99[2] = v101 + 1;
      v99[v101 + 4] = v98;
      v59 = v123;
      if (v124 == v123)
      {
        v144 = v99;
        swift_release();
        goto LABEL_73;
      }
      goto LABEL_30;
    }
  }
  v67 = v65 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  v68 = v65 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
  swift_beginAccess();
  swift_retain();
  v69 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v69[2] = 16;
  v69[5] = 0;
  v69[4] = 0;
  v70 = *(_QWORD *)v68;
  v71 = *(unsigned int *)(v68 + 8);
  v72 = *(unsigned int *)(v68 + 12);
  specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(v69 + 4), (uint64_t)(v69 + 6), v67, *(_QWORD *)v68, v71 | (v72 << 32));
  v73 = bswap32(v72);
  *(_DWORD *)(v68 + 12) = bswap32(v73 + 1);
  if (v73 == -1)
  {
    v74 = bswap32(v71);
    *(_DWORD *)(v68 + 8) = bswap32(v74 + 1);
    if (v74 == -1)
      *(_QWORD *)v68 = bswap64(bswap64(v70) + 1);
  }
  swift_endAccess();
  v75 = v69[2];
  if (v75 < 2)
  {
LABEL_40:
    *(_QWORD *)(v65 + 16) = v69;
    swift_bridgeObjectRelease();
    v66 = *(char **)(v65 + 16);
    v61 = v142;
    if (!*((_QWORD *)v66 + 2))
      goto LABEL_83;
    goto LABEL_41;
  }
  v81 = 0;
  v82 = v75 >> 1;
  v83 = v75 + 31;
  while (1)
  {
    if (v81 == v83 - 32)
      goto LABEL_49;
    v84 = v69[2];
    if (v81 >= v84)
      break;
    if (v83 - 32 >= v84)
      goto LABEL_81;
    v85 = *((_BYTE *)v69 + v81 + 32);
    v86 = *((_BYTE *)v69 + v83);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v69 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v69);
    *((_BYTE *)v69 + v81 + 32) = v86;
    *((_BYTE *)v69 + v83) = v85;
LABEL_49:
    ++v81;
    --v83;
    if (v82 == v81)
      goto LABEL_40;
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized PINECircuit.truncate(measurement:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v2 = a1;
  if (*(_QWORD *)(a1 + 16) != v5)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v8 = 0x8000000249C307C0;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v12 = 0xD00000000000001BLL;
    *(_QWORD *)(v12 + 8) = 0x8000000249C307C0;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow();
    return v8;
  }
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_13;
  if (v5 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v6 = swift_dynamicCastClass();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
  }
  v7 = *(_QWORD *)(v6 + 16);
  swift_release();
  if (v7 == v3)
  {
    v8 = swift_dynamicCastClass();
    swift_bridgeObjectRelease();
    if (!v8)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return v8;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  specialized _copyCollectionToContiguousArray<A>(_:)(v2, v2 + 32, 0, (2 * v3) | 1);
  v15 = v14;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(char **a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t i;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char **v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;

  v13 = *(_QWORD *)v9;
  v14 = v9[3];
  v87 = v9[2];
  v88 = v14;
  v15 = v9[5];
  v89 = v9[4];
  v90 = v15;
  v16 = v9[1];
  v85 = *v9;
  v86 = v16;
  if (*(_QWORD *)(a2 + 16) != v13)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v81 = 0xD00000000000001BLL;
    v82 = 0x8000000249C307C0;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 540877088;
    v27._object = (void *)0xE400000000000000;
    String.append(_:)(v27);
    v80 = v13;
LABEL_14:
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35 = v82;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v36 = v81;
    *(_QWORD *)(v36 + 8) = v35;
    *(_BYTE *)(v36 + 16) = 2;
    return swift_willThrow();
  }
  G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = a6;
  v18 = a5;
  v19 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v12 = a4;
  v11 = a3;
  v76 = a2;
  v77 = v10;
  v78 = a8;
  v73 = a1;
  v75 = a7;
  if (v19 != specialized FullyLinearProof.proofLength.getter())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v81 = 0xD000000000000015;
    v82 = 0x8000000249C312A0;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 540877088;
    v29._object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    v80 = specialized FullyLinearProof.proofLength.getter();
    goto LABEL_14;
  }
  v20 = v9[5];
  v92 = v9[4];
  v93 = v20;
  v91 = v9[3];
  v21 = *(_QWORD *)(v75 + 16);
  v74 = (uint64_t *)*((_QWORD *)&v91 + 1);
  v71 = v91;
  v72 = v20;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v21 != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v81 = 0xD000000000000019;
    v82 = 0x8000000249C312C0;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    specialized Gadget.wirePolynomialLength.getter();
    specialized Gadget.gadgetPolynomialLength.getter();
    v80 = 1;
    goto LABEL_14;
  }
  v22 = *((_QWORD *)v9 + 2);
  if (*(_QWORD *)(v78 + 16) != v22)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v81 = 0xD000000000000019;
    v82 = 0x8000000249C31120;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v80 = v22;
    goto LABEL_14;
  }
  v13 = a9;
  if (a9 < 1)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  if ((G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_9:
    specialized _copyCollectionToContiguousArray<A>(_:)(v11, v12, v18, G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm);
    v24 = v23;
    v25 = v71;
    goto LABEL_20;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v38 = swift_dynamicCastClass();
  if (!v38)
  {
    swift_unknownObjectRelease();
    v38 = MEMORY[0x24BEE4AF8];
  }
  v39 = *(_QWORD *)(v38 + 16);
  swift_release();
  if (v39 != v19)
  {
LABEL_98:
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  v24 = swift_dynamicCastClass();
  v25 = v91;
  if (!v24)
  {
    swift_unknownObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
  }
LABEL_20:
  swift_unknownObjectRelease();
  v40 = (2 * *(_QWORD *)(v24 + 16)) | 1;
  v81 = v24;
  v82 = v24 + 32;
  v83 = 0;
  v84 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  v42 = specialized Gadget.wirePolynomialLength.getter();
  v43 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_QWORD *)(inited + 32) = v25;
  *(_QWORD *)(inited + 40) = v74;
  *(_QWORD *)(inited + 48) = v72;
  *(_QWORD *)(inited + 56) = v42;
  *(_QWORD *)(inited + 64) = v43;
  MEMORY[0x24BDAC7A8](v43, v44);
  G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(inited, (void (*)(uint64_t, _OWORD *))partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:));
  v18 = v77;
  swift_setDeallocating();
  if (v77)
    return swift_unknownObjectRelease();
  if (G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >> 62)
  {
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = *(_QWORD *)((G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xFFFFFFFFFFFFF8)
                    + 0x10);
  }
  v46 = MEMORY[0x24BEE4AF8];
  v77 = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  v72 = v45;
  if (v45)
  {
    v80 = MEMORY[0x24BEE4AF8];
    v47 = (char *)&v80;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 & ~(v45 >> 63), 0);
    if (v45 < 0)
    {
      __break(1u);
LABEL_101:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v47 + 2) + 1, 1, v47);
      v47 = (char *)result;
      goto LABEL_40;
    }
    v46 = v80;
    v48 = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
    if ((G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v45; ++i)
      {
        v12 = MEMORY[0x24BD00718](i, v48);
        v80 = v46;
        v51 = *(_QWORD *)(v46 + 16);
        v50 = *(_QWORD *)(v46 + 24);
        if (v51 >= v50 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1);
          v48 = v77;
          v46 = v80;
        }
        *(_QWORD *)(v46 + 16) = v51 + 1;
        *(_QWORD *)(v46 + 8 * v51 + 32) = v12 | 0x4000000000000000;
      }
    }
    else
    {
      v52 = (unint64_t *)(G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                               + 32);
      v53 = *(_QWORD *)(v80 + 16);
      v54 = v72;
      do
      {
        v12 = *v52;
        v80 = v46;
        v55 = *(_QWORD *)(v46 + 24);
        swift_retain();
        if (v53 >= v55 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v55 > 1), v53 + 1, 1);
          v46 = v80;
        }
        *(_QWORD *)(v46 + 16) = v53 + 1;
        *(_QWORD *)(v46 + 8 * v53 + 32) = v12 | 0x4000000000000000;
        ++v52;
        ++v53;
        --v54;
      }
      while (v54);
    }
    v18 = 0;
    v45 = v72;
  }
  v96 = v87;
  v97 = v88;
  v98 = v89;
  v99 = v90;
  v94 = v85;
  v95 = v86;
  specialized SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(v76, v78, v13, v46, &v100);
  swift_bridgeObjectRelease();
  G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = v100;
  v47 = *v73;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_101;
LABEL_40:
  v57 = *((_QWORD *)v47 + 2);
  v56 = *((_QWORD *)v47 + 3);
  v11 = v57 + 1;
  if (v57 >= v56 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v47);
    v47 = (char *)result;
  }
  *((_QWORD *)v47 + 2) = v11;
  *(_QWORD *)&v47[8 * v57 + 32] = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  *v73 = v47;
  if ((v45 & 0x8000000000000000) == 0)
  {
    if (v45)
    {
      v58 = 0;
      v78 = v77 & 0xC000000000000001;
      v74 = (uint64_t *)(v77 + 32);
      while (1)
      {
        if (v58 == v45)
          goto LABEL_89;
        if (v78)
        {
          v59 = MEMORY[0x24BD00718](v58, v77);
        }
        else
        {
          if (v58 >= *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_96;
          v59 = swift_retain();
        }
        v11 = *(_QWORD *)(v59 + 72);
        swift_release();
        if (__OFADD__(v11, 1))
          goto LABEL_90;
        if (v11 + 1 < 0)
          goto LABEL_91;
        v60 = 1 << -(char)__clz(v11);
        if (v11 == -1)
          v12 = 1;
        else
          v12 = v60;
        if (v58)
          goto LABEL_92;
        v71 = 0;
        v76 = *(_QWORD *)(v75 + 32);
        if (!v78)
          break;
        v61 = *(_QWORD *)(MEMORY[0x24BD00718](0, v77) + 56);
        swift_unknownObjectRelease();
        if (v61 < 0)
          goto LABEL_94;
        if (v61)
          goto LABEL_62;
LABEL_78:
        G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(_QWORD *)(MEMORY[0x24BD00718](0, v77) + 32);
        swift_unknownObjectRelease();
LABEL_81:
        v69 = *((_QWORD *)v47 + 2);
        v68 = *((_QWORD *)v47 + 3);
        v11 = v69 + 1;
        if (v69 >= v68 >> 1)
          v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v47);
        *((_QWORD *)v47 + 2) = v11;
        v70 = &v47[8 * v69];
        v58 = 1;
        *((_QWORD *)v70 + 4) = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
        if (v45 == 1)
        {
          swift_bridgeObjectRelease();
          *v73 = v47;
          return swift_unknownObjectRelease();
        }
      }
      v62 = *v74;
      v61 = *(_QWORD *)(*v74 + 56);
      if (v61 < 0)
        goto LABEL_97;
      if (v61)
      {
LABEL_62:
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_95;
        v18 = 0;
        v11 = 8 * v12;
        do
        {
          if (v78)
          {
            v63 = MEMORY[0x24BD00718](0, v77);
          }
          else
          {
            v63 = *v74;
            swift_retain();
          }
          swift_beginAccess();
          v64 = *(_QWORD *)(v63 + 16);
          if (v18 >= *(_QWORD *)(v64 + 16))
          {
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          v13 = *(_QWORD *)(v64 + 8 * v18 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          if (*(_QWORD *)(v13 + 16) - 1 >= v12)
            goto LABEL_86;
          v65 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v65 + 16) = v12;
          bzero((void *)(v65 + 32), 8 * v12);
          v79 = v65;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v13, v12, &v79);
          v66 = v79;
          G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(_QWORD *)(v79 + 16);
          swift_bridgeObjectRelease();
          if (!G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm)
            goto LABEL_87;
          if ((specialized Polynomial.degree.getter(v66) & 0x8000000000000000) != 0)
          {
            swift_bridgeObjectRelease();
            v13 = 0;
            v79 = 0;
          }
          else
          {
            specialized evaluateUsingHorner<A, B>(_:atInput:)(v66, v76, (unint64_t *)&v79);
            swift_bridgeObjectRelease();
            v13 = v79;
          }
          G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *((_QWORD *)v47 + 2);
          v67 = *((_QWORD *)v47 + 3);
          if (G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >= v67 >> 1)
            v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm+ 1, 1, v47);
          ++v18;
          *((_QWORD *)v47 + 2) = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                               + 1;
          *(_QWORD *)&v47[8
                        * G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                        + 32] = v13;
        }
        while (v61 != v18);
        if (v78)
        {
          v18 = 0;
          v45 = v72;
          goto LABEL_78;
        }
        v62 = *v74;
        v18 = 0;
        v45 = v72;
      }
      G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(_QWORD *)(v62 + 32);
      goto LABEL_81;
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(char **a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  __int128 *v9;
  unint64_t v10;
  unint64_t G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t i;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char **v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;

  v14 = *(_QWORD *)v9;
  v15 = v9[7];
  v94 = v9[6];
  v95 = v15;
  v96 = v9[8];
  v97 = *((_QWORD *)v9 + 18);
  v16 = v9[3];
  v90 = v9[2];
  v91 = v16;
  v17 = v9[5];
  v92 = v9[4];
  v93 = v17;
  v18 = v9[1];
  v88 = *v9;
  v89 = v18;
  if (*(_QWORD *)(a2 + 16) != v14)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v84 = 0xD00000000000001BLL;
    v85 = 0x8000000249C307C0;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 540877088;
    v30._object = (void *)0xE400000000000000;
    String.append(_:)(v30);
    v83 = v14;
LABEL_15:
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v85;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v40 = v84;
    *(_QWORD *)(v40 + 8) = v39;
    *(_BYTE *)(v40 + 16) = 2;
    return swift_willThrow();
  }
  v19 = a6;
  v20 = a5;
  v21 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v12 = a4;
  G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = a3;
  v79 = a2;
  v80 = v10;
  v81 = a8;
  v76 = a1;
  v78 = a7;
  if (v21 != specialized FullyLinearProof.proofLength.getter())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v84 = 0xD000000000000015;
    v85 = 0x8000000249C312A0;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 540877088;
    v32._object = (void *)0xE400000000000000;
    String.append(_:)(v32);
    v83 = specialized FullyLinearProof.proofLength.getter();
    goto LABEL_15;
  }
  v22 = *(__int128 *)((char *)v9 + 40);
  v23 = *(__int128 *)((char *)v9 + 24);
  v98 = *(__int128 *)((char *)v9 + 8);
  v99 = v23;
  v100 = v22;
  v24 = *(_QWORD *)(v78 + 16);
  v13 = *((_QWORD *)&v98 + 1);
  v75 = v98;
  v77 = (uint64_t *)v22;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v24 != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v84 = 0xD000000000000019;
    v85 = 0x8000000249C312C0;
    v83 = v24;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 540877088;
    v34._object = (void *)0xE400000000000000;
    String.append(_:)(v34);
    specialized Gadget.wirePolynomialLength.getter();
    specialized Gadget.gadgetPolynomialLength.getter();
    v35 = 1;
LABEL_14:
    v83 = v35;
    goto LABEL_15;
  }
  v25 = v81[2];
  if (v25 != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v84 = 0xD000000000000019;
    v85 = 0x8000000249C31120;
    v83 = v25;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 540877088;
    v37._object = (void *)0xE400000000000000;
    String.append(_:)(v37);
    v35 = 3;
    goto LABEL_14;
  }
  if (a9 < 1)
  {
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v74 = a9;
  if ((v19 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_9:
    specialized _copyCollectionToContiguousArray<A>(_:)(G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm, v12, v20, v19);
    v27 = v26;
    v28 = v75;
    goto LABEL_21;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v42 = swift_dynamicCastClass();
  if (!v42)
  {
    swift_unknownObjectRelease();
    v42 = MEMORY[0x24BEE4AF8];
  }
  v43 = *(_QWORD *)(v42 + 16);
  swift_release();
  if (v43 != v21)
  {
LABEL_99:
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  v27 = swift_dynamicCastClass();
  v28 = v98;
  if (!v27)
  {
    swift_unknownObjectRelease();
    v27 = MEMORY[0x24BEE4AF8];
  }
LABEL_21:
  swift_unknownObjectRelease();
  v44 = (2 * *(_QWORD *)(v27 + 16)) | 1;
  v84 = v27;
  v85 = v27 + 32;
  v86 = 0;
  v87 = v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  v46 = specialized Gadget.wirePolynomialLength.getter();
  v47 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_QWORD *)(inited + 32) = v28;
  *(_QWORD *)(inited + 40) = v13;
  *(_QWORD *)(inited + 48) = v77;
  *(_QWORD *)(inited + 56) = v46;
  *(_QWORD *)(inited + 64) = v47;
  MEMORY[0x24BDAC7A8](v47, v48);
  G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(inited, (void (*)(uint64_t, _OWORD *))partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:));
  v20 = v80;
  swift_setDeallocating();
  if (v80)
    return swift_unknownObjectRelease();
  if (G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xFFFFFFFFFFFFF8)
                    + 0x10);
  }
  v49 = MEMORY[0x24BEE4AF8];
  v80 = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  v75 = v13;
  if (v13)
  {
    v83 = MEMORY[0x24BEE4AF8];
    v50 = (char *)&v83;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
    {
      __break(1u);
LABEL_102:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
      v50 = (char *)result;
      goto LABEL_41;
    }
    v49 = v83;
    v51 = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
    if ((G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v13; ++i)
      {
        v12 = MEMORY[0x24BD00718](i, v51);
        v83 = v49;
        v54 = *(_QWORD *)(v49 + 16);
        v53 = *(_QWORD *)(v49 + 24);
        if (v54 >= v53 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1);
          v51 = v80;
          v49 = v83;
        }
        *(_QWORD *)(v49 + 16) = v54 + 1;
        *(_QWORD *)(v49 + 8 * v54 + 32) = v12 | 0x4000000000000000;
      }
    }
    else
    {
      v55 = (unint64_t *)(G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                               + 32);
      v56 = *(_QWORD *)(v83 + 16);
      v57 = v75;
      do
      {
        v12 = *v55;
        v83 = v49;
        v58 = *(_QWORD *)(v49 + 24);
        swift_retain();
        if (v56 >= v58 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v56 + 1, 1);
          v49 = v83;
        }
        *(_QWORD *)(v49 + 16) = v56 + 1;
        *(_QWORD *)(v49 + 8 * v56 + 32) = v12 | 0x4000000000000000;
        ++v55;
        ++v56;
        --v57;
      }
      while (v57);
    }
    v20 = 0;
    v13 = v75;
  }
  v107 = v94;
  v108 = v95;
  v109 = v96;
  v110 = v97;
  v103 = v90;
  v104 = v91;
  v105 = v92;
  v106 = v93;
  v101 = v88;
  v102 = v89;
  specialized PINECircuit.evaluate(measurement:jointRand:numOfShares:for:)(v79, v81, v74, v49, &v111);
  swift_bridgeObjectRelease();
  G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = v111;
  v50 = *v76;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_102;
LABEL_41:
  v60 = *((_QWORD *)v50 + 2);
  v59 = *((_QWORD *)v50 + 3);
  v19 = v60 + 1;
  if (v60 >= v59 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v50);
    v50 = (char *)result;
  }
  *((_QWORD *)v50 + 2) = v19;
  *(_QWORD *)&v50[8 * v60 + 32] = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  *v76 = v50;
  if ((v13 & 0x8000000000000000) == 0)
  {
    if (v13)
    {
      v61 = 0;
      v81 = (_QWORD *)(v80 & 0xC000000000000001);
      v77 = (uint64_t *)(v80 + 32);
      while (1)
      {
        if (v61 == v13)
          goto LABEL_90;
        if (v81)
        {
          v62 = MEMORY[0x24BD00718](v61, v80);
        }
        else
        {
          if (v61 >= *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_97;
          v62 = swift_retain();
        }
        v19 = *(_QWORD *)(v62 + 72);
        swift_release();
        if (__OFADD__(v19, 1))
          goto LABEL_91;
        if (((v19 + 1) & 0x8000000000000000) != 0)
          goto LABEL_92;
        v63 = 1 << -(char)__clz(v19);
        if (v19 == -1)
          v12 = 1;
        else
          v12 = v63;
        if (v61)
          goto LABEL_93;
        v74 = 0;
        v79 = *(_QWORD *)(v78 + 32);
        if (!v81)
          break;
        v64 = *(_QWORD *)(MEMORY[0x24BD00718](0, v80) + 56);
        swift_unknownObjectRelease();
        if (v64 < 0)
          goto LABEL_95;
        if (v64)
          goto LABEL_63;
LABEL_79:
        G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(_QWORD *)(MEMORY[0x24BD00718](0, v80) + 32);
        swift_unknownObjectRelease();
LABEL_82:
        v72 = *((_QWORD *)v50 + 2);
        v71 = *((_QWORD *)v50 + 3);
        v19 = v72 + 1;
        if (v72 >= v71 >> 1)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v50);
        *((_QWORD *)v50 + 2) = v19;
        v73 = &v50[8 * v72];
        v61 = 1;
        *((_QWORD *)v73 + 4) = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
        if (v13 == 1)
        {
          swift_bridgeObjectRelease();
          *v76 = v50;
          return swift_unknownObjectRelease();
        }
      }
      v65 = *v77;
      v64 = *(_QWORD *)(*v77 + 56);
      if (v64 < 0)
        goto LABEL_98;
      if (v64)
      {
LABEL_63:
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_96;
        v20 = 0;
        v19 = 8 * v12;
        do
        {
          if (v81)
          {
            v13 = MEMORY[0x24BD00718](0, v80);
          }
          else
          {
            v13 = *v77;
            swift_retain();
          }
          swift_beginAccess();
          v66 = *(_QWORD *)(v13 + 16);
          if (v20 >= *(_QWORD *)(v66 + 16))
          {
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
          v67 = *(_QWORD *)(v66 + 8 * v20 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          if (*(_QWORD *)(v67 + 16) - 1 >= v12)
            goto LABEL_87;
          v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v68 + 16) = v12;
          bzero((void *)(v68 + 32), 8 * v12);
          v82 = v68;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v67, v12, &v82);
          v13 = v82;
          G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(_QWORD *)(v82 + 16);
          swift_bridgeObjectRelease();
          if (!G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm)
            goto LABEL_88;
          if ((specialized Polynomial.degree.getter(v13) & 0x8000000000000000) != 0)
          {
            swift_bridgeObjectRelease();
            v69 = 0;
            v82 = 0;
          }
          else
          {
            specialized evaluateUsingHorner<A, B>(_:atInput:)(v13, v79, (unint64_t *)&v82);
            swift_bridgeObjectRelease();
            v69 = v82;
          }
          G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *((_QWORD *)v50 + 2);
          v70 = *((_QWORD *)v50 + 3);
          if (G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >= v70 >> 1)
            v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm+ 1, 1, v50);
          ++v20;
          *((_QWORD *)v50 + 2) = G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                               + 1;
          *(_QWORD *)&v50[8
                        * G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                        + 32] = v69;
        }
        while (v64 != v20);
        if (v81)
        {
          v20 = 0;
          v13 = v75;
          goto LABEL_79;
        }
        v65 = *v77;
        v20 = 0;
        v13 = v75;
      }
      G0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(_QWORD *)(v65 + 32);
      goto LABEL_82;
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

void specialized PINE.prepareMessageFrom(_:parameter:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t inited;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != *v2)
  {
LABEL_24:
    _StringGuts.grow(_:)(53);
    v23._countAndFlagsBits = 0x4E49502F46414456;
    v23._object = (void *)0xEF74666977732E45;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 0xD00000000000002CLL;
    v24._object = (void *)0x8000000249C30E00;
    String.append(_:)(v24);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 15649;
    v26._object = (void *)0xE200000000000000;
    String.append(_:)(v26);
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 41;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_BYTE *)(v29 + 16) = 1;
    swift_willThrow();
    return;
  }
  v7 = specialized FullyLinearProof.verifierLength.getter();
  v8 = v2[20];
  v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
    goto LABEL_68;
  if (v9 < 0)
  {
LABEL_69:
    __break(1u);
    return;
  }
  v59 = a2;
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v10 + 16) = v9;
    bzero((void *)(v10 + 32), 8 * v9);
  }
  v65 = v3;
  v61 = v8;
  if (v4)
  {
    v11 = a1 + 32;
    v12 = v10 + 32;
    v60 = a1;
    swift_bridgeObjectRetain();
    v13 = 0;
    v62 = v10;
    do
    {
      v14 = (uint64_t *)(v11 + 24 * v13);
      v15 = *v14;
      v16 = *(_QWORD *)(v10 + 16);
      if (v16 != *(_QWORD *)(*v14 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = 540877088;
        v46._object = (void *)0xE400000000000000;
        String.append(_:)(v46);
        v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v48 = 0xD000000000000020;
        *(_QWORD *)(v48 + 8) = 0x8000000249C30700;
        *(_BYTE *)(v48 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      v10 = v62;
      if (v16)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17 = 0;
        while (1)
        {
          v19 = *(_QWORD *)(v15 + 8 * v17 + 32);
          v18 = *(_QWORD *)(v12 + 8 * v17);
          if (v19)
          {
            v20 = v19 <= 0xFFFFFFFF00000001;
            v21 = 0xFFFFFFFF00000001 - v19;
            if (!v20)
            {
              __break(1u);
LABEL_59:
              __break(1u);
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
              goto LABEL_69;
            }
            if (v18 >= v21)
            {
              v18 -= v21;
            }
            else
            {
              v20 = v21 <= 0xFFFFFFFF00000001;
              v22 = 0xFFFFFFFF00000001 - v21;
              if (!v20)
                goto LABEL_59;
              v20 = __CFADD__(v18, v22);
              v18 += v22;
              if (v20)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(_QWORD *)(v12 + 8 * v17++) = v18;
          if (v16 == v17)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      ++v13;
    }
    while (v13 != v4);
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v62 + 16);
    v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v32 = v63;
    v49 = (uint64_t *)(v60 + 40);
    v50 = v4;
    do
    {
      v51 = *v49;
      v53 = *(_QWORD *)(v63 + 16);
      v52 = *(_QWORD *)(v63 + 24);
      swift_bridgeObjectRetain();
      if (v53 >= v52 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1);
      *(_QWORD *)(v63 + 16) = v53 + 1;
      *(_QWORD *)(v63 + 8 * v53 + 32) = v51;
      v49 += 3;
      --v50;
    }
    while (v50);
    v64 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v31 = v64;
    v54 = (uint64_t *)(v60 + 48);
    do
    {
      v55 = *v54;
      v57 = *(_QWORD *)(v64 + 16);
      v56 = *(_QWORD *)(v64 + 24);
      swift_bridgeObjectRetain();
      if (v57 >= v56 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1);
      *(_QWORD *)(v64 + 16) = v57 + 1;
      *(_QWORD *)(v64 + 8 * v57 + 32) = v55;
      v54 += 3;
      --v4;
    }
    while (v4);
    v10 = v62;
    if (v8 < 0)
      goto LABEL_56;
  }
  else
  {
    v30 = *(_QWORD *)(v10 + 16);
    v31 = MEMORY[0x24BEE4AF8];
    v32 = MEMORY[0x24BEE4AF8];
    if (v8 < 0)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  if (v8)
  {
    v33 = 0;
    do
    {
      v34 = specialized FullyLinearProof.verifierLength.getter();
      if (v34 < 0)
        goto LABEL_60;
      v35 = v30 - v33;
      if (!v34 || v35 < 0 || (v36 = v30, v35 >= v34))
      {
        v36 = v33 + v34;
        if (__OFADD__(v33, v34))
          goto LABEL_66;
      }
      if (v36 < v33)
        goto LABEL_61;
      if (v30 < v33)
        goto LABEL_62;
      if (v30 < v36)
        goto LABEL_63;
      if (!v34 || v35 < 0 || (v37 = v30, v35 >= v34))
      {
        v37 = v33 + v34;
        if (__OFADD__(v33, v34))
          goto LABEL_67;
      }
      if (v30 < v37)
        goto LABEL_64;
      if (v37 < v33)
        goto LABEL_65;
      v38 = (2 * v36) | 1;
      v39 = swift_unknownObjectRetain();
      specialized FullyLinearProof.decide<A>(verifier:)(v39, v10 + 32, v33, v38);
      if (v65)
        goto LABEL_57;
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
        swift_allocError();
        *(_QWORD *)v58 = 0;
        *(_QWORD *)(v58 + 8) = 0;
        *(_BYTE *)(v58 + 16) = 4;
        swift_willThrow();
        swift_unknownObjectRelease_n();
        return;
      }
      swift_unknownObjectRelease();
      v33 = v37;
    }
    while (--v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = 0;
  *(_BYTE *)(inited + 48) = 0;
  *(_QWORD *)(inited + 16) = v32;
  *(_QWORD *)(inited + 24) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  v42 = (_QWORD *)swift_initStackObject();
  v42[4] = 0;
  v42[5] = 3;
  v42[6] = v61;
  v42[2] = v31;
  v42[3] = 0;
  v43 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t)&protocol conformance descriptor for WraparoundJointRandomness<A, B>);
  v44 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t)&protocol conformance descriptor for VerificationJointRandomness<A, B>);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_release();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  *v59 = v43;
  v59[1] = v44;
}

void specialized FullyLinearProof.decide<A>(verifier:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v5 = v4;
  v6 = a4;
  v8 = a3;
  v9 = a2;
  v7 = a1;
  if (v10 != specialized FullyLinearProof.verifierLength.getter())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    v30 = specialized FullyLinearProof.verifierLength.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000018;
    *(_QWORD *)(v15 + 8) = 0x8000000249C31280;
    *(_BYTE *)(v15 + 16) = 2;
    swift_willThrow();
    return;
  }
  if ((v6 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v16 = swift_dynamicCastClass();
    if (!v16)
    {
      swift_unknownObjectRelease();
      v16 = MEMORY[0x24BEE4AF8];
    }
    v17 = *(_QWORD *)(v16 + 16);
    swift_release();
    if (v17 != v10)
      goto LABEL_26;
    v6 = swift_dynamicCastClass();
    if (!v6)
    {
      swift_unknownObjectRelease();
      v6 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v7, v9, v8, v6);
    v6 = v11;
LABEL_12:
    swift_unknownObjectRelease();
    v9 = *(_QWORD *)(v6 + 16);
    if (!v9)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v7 = v6 + 32;
    v18 = *(_QWORD *)(v6 + 32);
    if (v18 <= 0xFFFFFFFF00000000)
      break;
LABEL_25:
    __break(1u);
LABEL_26:
    swift_unknownObjectRelease();
  }
  if (v18)
  {
    swift_release();
    return;
  }
  v19 = v5[5];
  v28 = v5[4];
  v29 = v19;
  v27 = v5[3];
  v20 = v27;
  v25 = v19;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  v22 = specialized Gadget.wirePolynomialLength.getter();
  v23 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v20;
  *(_QWORD *)(inited + 48) = v25;
  *(_QWORD *)(inited + 56) = v22;
  *(_QWORD *)(inited + 64) = v23;
  swift_bridgeObjectRelease();
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v9 <= (unint64_t)v20 || (_QWORD)v20 + 1 == v9)
    goto LABEL_30;
  if ((uint64_t)v20 + 1 >= v9)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v24 = *(_QWORD *)(v7 + 8 * (v20 + 1));
  specialized ParallelSum.evaluate<A>(at:)(v6 + 32, 1, 2 * v20 + 3, &v26);
  if (v24 <= 0xFFFFFFFF00000000 && v26 <= 0xFFFFFFFF00000000)
  {
    swift_unknownObjectRelease();
    return;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v5 = v4;
  v6 = a4;
  v8 = a3;
  v9 = a2;
  v7 = a1;
  if (v10 != specialized FullyLinearProof.verifierLength.getter())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    v31 = specialized FullyLinearProof.verifierLength.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000018;
    *(_QWORD *)(v15 + 8) = 0x8000000249C31280;
    *(_BYTE *)(v15 + 16) = 2;
    swift_willThrow();
    return;
  }
  if ((v6 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v16 = swift_dynamicCastClass();
    if (!v16)
    {
      swift_unknownObjectRelease();
      v16 = MEMORY[0x24BEE4AF8];
    }
    v17 = *(_QWORD *)(v16 + 16);
    swift_release();
    if (v17 != v10)
      goto LABEL_26;
    v6 = swift_dynamicCastClass();
    if (!v6)
    {
      swift_unknownObjectRelease();
      v6 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v7, v9, v8, v6);
    v6 = v11;
LABEL_12:
    swift_unknownObjectRelease();
    v9 = *(_QWORD *)(v6 + 16);
    if (!v9)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v7 = v6 + 32;
    v18 = *(_QWORD *)(v6 + 32);
    if (v18 <= 0xFFFFFFFF00000000)
      break;
LABEL_25:
    __break(1u);
LABEL_26:
    swift_unknownObjectRelease();
  }
  if (v18)
  {
    swift_release();
    return;
  }
  v19 = *(_OWORD *)(v5 + 40);
  v20 = *(_OWORD *)(v5 + 24);
  v28 = *(_OWORD *)(v5 + 8);
  v29 = v20;
  v30 = v19;
  v21 = v28;
  v26 = v19;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  v23 = specialized Gadget.wirePolynomialLength.getter();
  v24 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v21;
  *(_QWORD *)(inited + 48) = v26;
  *(_QWORD *)(inited + 56) = v23;
  *(_QWORD *)(inited + 64) = v24;
  swift_bridgeObjectRelease();
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v9 <= (unint64_t)v21 || (_QWORD)v21 + 1 == v9)
    goto LABEL_30;
  if ((uint64_t)v21 + 1 >= v9)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v25 = *(_QWORD *)(v7 + 8 * (v21 + 1));
  specialized ParallelSum.evaluate<A>(at:)(v6 + 32, 1, 2 * v21 + 3, &v27);
  if (v25 <= 0xFFFFFFFF00000000 && v27 <= 0xFFFFFFFF00000000)
  {
    swift_unknownObjectRelease();
    return;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t specialized PINE.prepareNext(state:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  Swift::String v12;
  unint64_t v13;
  const char *v14;
  Swift::String v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;

  if (!specialized static Array<A>.== infix(_:_:)(a3, a5))
  {
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v12._countAndFlagsBits = 0x4E49502F46414456;
    v12._object = (void *)0xEF74666977732E45;
    String.append(_:)(v12);
    v13 = 0xD00000000000003BLL;
    v14 = " mismatched verification joint randomness seed:\nin state: (";
LABEL_7:
    v16 = (unint64_t)(v14 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._object = (void *)0x8000000249C307A0;
    v18._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v18);
    swift_bridgeObjectRetain();
    v19 = String.init<A>(describing:)();
    goto LABEL_8;
  }
  if (!specialized static Array<A>.== infix(_:_:)(a2, a4))
  {
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v15._countAndFlagsBits = 0x4E49502F46414456;
    v15._object = (void *)0xEF74666977732E45;
    String.append(_:)(v15);
    v13 = 0xD000000000000039;
    v14 = " mismatched wraparound joint randomness seed:\nin state: (";
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(v6 + 96))
  {
    *(_QWORD *)a6 = a1;
    *(_OWORD *)(a6 + 8) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_BYTE *)(a6 + 56) = 1;
    return swift_bridgeObjectRetain();
  }
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v24 = 0xD000000000000033;
  v25 = 0x8000000249C30EB0;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x203A746F670A2CLL;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  v19 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_8:
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_QWORD *)v21 = v24;
  *(_QWORD *)(v21 + 8) = v25;
  *(_BYTE *)(v21 + 16) = 1;
  return swift_willThrow();
}

uint64_t specialized PINEPublicShare.init<A>(from:parameter:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  _QWORD *v17;
  uint64_t v18[5];

  if ((a4 & 1) != 0)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v11 = 0;
    v11[1] = 0;
    return swift_willThrow();
  }
  if (result)
    v7 = a2 - result;
  else
    v7 = 0;
  if ((unint64_t)(a3 - 0x200000000000000) >> 58 == 63)
  {
    if (v7 == a3 << 6)
    {
      result = specialized _copyCollectionToContiguousArray<A>(_:)(result, a2);
      v8 = (2 * *(_QWORD *)(result + 16)) | 1;
      v18[0] = result;
      v18[1] = result + 32;
      v18[2] = 0;
      v18[3] = v8;
      if ((a3 & 0x8000000000000000) == 0)
      {
        v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg5072_s4VDAF15PINEPublicShareV4from9parameterACyxGqd___SiSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E38VSiXEfU_AA19XofHmacSha256Aes128C_SWTG5s10ArraySliceVys0T0VGTf1cn_nTm(0, a3, v18);
        v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg5072_s4VDAF15PINEPublicShareV4from9parameterACyxGqd___SiSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E38VSiXEfU_AA19XofHmacSha256Aes128C_SWTG5s10ArraySliceVys0T0VGTf1cn_nTm(0, a3, v18);
        result = swift_unknownObjectRelease();
        *a5 = v9;
        a5[1] = v10;
        return result;
      }
      goto LABEL_13;
    }
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 2107936;
    v13._object = (void *)0xE300000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x203A746F67202CLL;
    v15._object = (void *)0xE700000000000000;
    String.append(_:)(v15);
    v18[4] = v7;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v17 = 0xD000000000000033;
    v17[1] = 0x8000000249C31380;
    return swift_willThrow();
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized PINEPrepareMessage.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 && a2 - a1 == 64)
  {
    v4 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
    v5 = v4;
    v6 = v4 + 32;
    v7 = *(_QWORD *)(v4 + 16);
    if (v7 >= 0x20)
      v8 = 32;
    else
      v8 = *(_QWORD *)(v4 + 16);
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_release();
      v9 = MEMORY[0x24BEE4AF8];
    }
    v10 = *(_QWORD *)(v9 + 16);
    swift_release();
    if (v10 == v8)
    {
      v11 = swift_dynamicCastClass();
      if (!v11)
      {
        swift_release();
        v11 = MEMORY[0x24BEE4AF8];
      }
    }
    else
    {
      swift_release();
      specialized _copyCollectionToContiguousArray<A>(_:)(v5, v6, 0, (2 * v8) | 1);
      v11 = v21;
    }
    if (v7 - v8 >= 0x20)
      v12 = v8 + 32;
    else
      v12 = v7;
    if (v7 < v12)
    {
      __break(1u);
    }
    else
    {
      swift_unknownObjectRetain_n();
      v13 = swift_dynamicCastClass();
      if (!v13)
      {
        swift_release();
        v13 = MEMORY[0x24BEE4AF8];
      }
      v14 = *(_QWORD *)(v13 + 16);
      swift_release();
      if (v14 == v12 - v8)
      {
        v15 = swift_dynamicCastClass();
        if (!v15)
        {
          swift_release();
          v15 = MEMORY[0x24BEE4AF8];
        }
        goto LABEL_20;
      }
    }
    swift_release();
    specialized _copyCollectionToContiguousArray<A>(_:)(v5, v6, v8, (2 * v12) | 1);
    v15 = v22;
LABEL_20:
    result = swift_release();
    *a3 = v11;
    a3[1] = v15;
    return result;
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x203A746F67202CLL;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *v20 = 0xD000000000000032;
  v20[1] = 0x8000000249C31200;
  return swift_willThrow();
}

unint64_t specialized PINE.shard<A>(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;

  if (*(_QWORD *)(a4 + 16) == 16)
    __asm { BR              X10 }
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3D746F67202CLL;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_QWORD *)v9 = 0xD00000000000002FLL;
  *(_QWORD *)(v9 + 8) = 0x8000000249C30EF0;
  *(_BYTE *)(v9 + 16) = 1;
  swift_willThrow();
  return 0xD00000000000002FLL;
}

uint64_t specialized PINE.splitSeedBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v9 = a1;
  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(v9, a2);
  v11 = v10;
  outlined consume of Data._Representation(v9, a2);
  v12 = (2 * *(_QWORD *)(v11 + 16)) | 1;
  v28 = (_QWORD *)v11;
  v29 = v11 + 32;
  v30 = 0;
  v31 = v12;
  v13 = *v2 - 1;
  if (__OFSUB__(*v2, 1))
  {
    __break(1u);
    goto LABEL_63;
  }
  if (v13 < 0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v9 = 0;
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5020_s4VDAF4PINEV14splite65Bytes33_96F6F895E25AE9C9B366289ACE02F486LLySayAA0D0V16measurementg26_AG05proofO0AG24wraparoundjkl117AG012verificationrsT0tG12helperShares_AG016leaderWraparoundrsT0AG0x12VerificationrsT0AG05provesD0tqd__SkRd__s5UInt8V7B89Rtd__lFAgH_AgigjgKtSiXEfU_AA7Field64V_SRySfGAA19XofHmacSha256Aes128C10Foundation4DataVTG5s10ArraySliceVys5UInt8VGTf1cn_n(0, v13, (uint64_t *)&v28);
  v11 = v30;
  v4 = v31;
  v6 = v31 >> 1;
  v15 = (v31 >> 1) - v30;
  if (__OFSUB__(v31 >> 1, v30))
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v2 = v28;
  v9 = v29;
  v7 = v31 >> 1;
  if (v15 >= 0x20)
  {
    v7 = v30 + 32;
    if (__OFADD__(v30, 32))
      goto LABEL_83;
  }
  if (v7 < v30)
    goto LABEL_65;
  if (v6 < v30)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v6 < v7)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (v7 < 0)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v3 = v31 >> 1;
  if (v15 >= 0x20)
  {
    v3 = v30 + 32;
    if (__OFADD__(v30, 32))
      goto LABEL_84;
    if (v6 < v3)
      goto LABEL_81;
  }
  if (v3 < v30)
    goto LABEL_69;
  v27 = v14;
  v30 = v3;
  v5 = v31 & 1;
  if ((v31 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    swift_release();
    if (__OFSUB__(v7, v11))
      goto LABEL_85;
    if (v18 != v7 - v11)
      goto LABEL_86;
    v11 = swift_dynamicCastClass();
    if (!v11)
    {
      swift_unknownObjectRelease();
      v11 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_23;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    v4 = v4 & 1 | (2 * v7);
    specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v2, v9, v11, v4);
    v11 = v16;
LABEL_23:
    swift_unknownObjectRelease();
    v19 = v6 - v3;
    if (__OFSUB__(v6, v3))
    {
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    v7 = v6;
    if (v19 >= 0x20)
    {
      v7 = v3 + 32;
      if (__OFADD__(v3, 32))
      {
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        swift_unknownObjectRelease();
LABEL_35:
        specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v2, v9, v3, v5 | (2 * v7));
        v3 = v20;
        goto LABEL_42;
      }
    }
    if (v7 < v3)
      goto LABEL_71;
    if (v6 < v7)
      goto LABEL_72;
    if (v7 < 0)
      goto LABEL_73;
    v4 = v6;
    if (v19 >= 0x20)
    {
      v4 = v3 + 32;
      if (__OFADD__(v3, 32))
        goto LABEL_88;
      if (v6 < v4)
        goto LABEL_82;
    }
    if (v4 < v3)
      goto LABEL_74;
    v30 = v4;
    if (!v5)
    {
      swift_unknownObjectRetain();
      goto LABEL_35;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v21 = swift_dynamicCastClass();
    if (!v21)
    {
      swift_unknownObjectRelease();
      v21 = MEMORY[0x24BEE4AF8];
    }
    v22 = *(_QWORD *)(v21 + 16);
    swift_release();
    if (__OFSUB__(v7, v3))
      goto LABEL_89;
    if (v22 != v7 - v3)
      goto LABEL_90;
    v3 = swift_dynamicCastClass();
    if (!v3)
    {
      swift_unknownObjectRelease();
      v3 = MEMORY[0x24BEE4AF8];
    }
LABEL_42:
    swift_unknownObjectRelease();
    v23 = v6 - v4;
    if (__OFSUB__(v6, v4))
      goto LABEL_75;
    v7 = v6;
    if (v23 >= 0x20)
    {
      v7 = v4 + 32;
      if (__OFADD__(v4, 32))
      {
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        swift_unknownObjectRelease();
LABEL_54:
        specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v2, v9, v4, v5 | (2 * v7));
        goto LABEL_61;
      }
    }
    if (v7 < v4)
      goto LABEL_76;
    if (v6 < v7)
      goto LABEL_77;
    if (v7 < 0)
      goto LABEL_78;
    if (v23 < 0x20)
      goto LABEL_52;
    if (__OFADD__(v4, 32))
      goto LABEL_92;
    if (v6 >= v4 + 32)
      break;
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    swift_unknownObjectRelease();
  }
  v6 = v4 + 32;
LABEL_52:
  if (v6 < v4)
    goto LABEL_80;
  if (!v5)
    goto LABEL_54;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v24 = swift_dynamicCastClass();
  if (!v24)
  {
    swift_unknownObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
  }
  v25 = *(_QWORD *)(v24 + 16);
  swift_release();
  if (__OFSUB__(v7, v4))
    goto LABEL_93;
  if (v25 != v7 - v4)
    goto LABEL_94;
  if (!swift_dynamicCastClass())
    swift_unknownObjectRelease();
LABEL_61:
  swift_unknownObjectRelease();
  return v27;
}

uint64_t specialized PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(float *a1, uint64_t a2, uint64_t *a3)
{
  int64_t *v3;
  uint64_t v4;
  int64_t v8;
  char *v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t *v42;
  unint64_t v43;
  unint64_t v44[2];
  unint64_t v45;

  v8 = *v3;
  v9 = (char *)*a3;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v8 > *((_QWORD *)v9 + 3) >> 1)
  {
    if (*((_QWORD *)v9 + 2) <= v8)
      v11 = v8;
    else
      v11 = *((_QWORD *)v9 + 2);
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 0, v9);
  }
  *a3 = (uint64_t)v9;
  v12 = v3[11];
  if (v12 != a2)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v44[0] = 0xD00000000000001DLL;
    v44[1] = 0x8000000249C310D0;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0x746365707865202CLL;
    v29._object = (void *)0xEB000000003D6465;
    String.append(_:)(v29);
    v45 = v12;
LABEL_43:
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37 = v44[0];
    v38 = v44[1];
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v39 = v37;
    *(_QWORD *)(v39 + 8) = v38;
    *(_BYTE *)(v39 + 16) = 1;
    return swift_willThrow();
  }
  v42 = v3;
  v13 = 0;
  if (a1 && a2)
  {
    v43 = v3[10];
    v14 = 4 * a2;
    while (1)
    {
      result = specialized FieldElement.init<A>(floatValue:fractionalBitCount:)(v43, v44, *a1);
      if (v4)
        return result;
      v16 = v44[0];
      v18 = *((_QWORD *)v9 + 2);
      v17 = *((_QWORD *)v9 + 3);
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v9);
        v9 = (char *)result;
      }
      *((_QWORD *)v9 + 2) = v18 + 1;
      *(_QWORD *)&v9[8 * v18 + 32] = v16;
      *a3 = (uint64_t)v9;
      v19 = (v16 * (unsigned __int128)v16) >> 64;
      v20 = (0xFFFFFFFEFFFFFFFFLL * v16 * v16 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v21 = __CFADD__(-(uint64_t)(v16 * v16), v16 * v16);
      v22 = __CFADD__(v20, v19);
      v23 = v20 + v19;
      if (v22)
        break;
      if (v23 != -1)
      {
        v25 = v23 + v21;
        if (v25 >= 0xFFFFFFFF00000001)
          v25 += 0xFFFFFFFFLL;
        if (!v25)
          goto LABEL_12;
        goto LABEL_24;
      }
      if (v21)
      {
        v24 = 0;
        goto LABEL_22;
      }
      v26 = 0xFFFFFFFE00000003;
LABEL_26:
      if (v13 >= v26)
      {
        v13 -= v26;
      }
      else
      {
        v22 = v26 <= 0xFFFFFFFF00000001;
        v27 = 0xFFFFFFFF00000001 - v26;
        if (!v22)
          goto LABEL_48;
        v22 = __CFADD__(v13, v27);
        v13 += v27;
        if (v22)
          goto LABEL_49;
      }
LABEL_12:
      ++a1;
      v14 -= 4;
      if (!v14)
        goto LABEL_41;
    }
    v24 = v23 + v21;
LABEL_22:
    v22 = __CFADD__(v24, 0xFFFFFFFFLL);
    v25 = v24 + 0xFFFFFFFFLL;
    if (v22)
      goto LABEL_47;
    if (!v25)
      goto LABEL_12;
LABEL_24:
    v22 = v25 <= 0xFFFFFFFF00000001;
    v26 = 0xFFFFFFFF00000001 - v25;
    if (!v22)
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    goto LABEL_26;
  }
LABEL_41:
  v30 = specialized FieldElement.integerValue.getter(v13);
  v31 = v42[13];
  v32 = specialized FieldElement.integerValue.getter(v31);
  if (v32 < v30)
  {
    v33 = v32;
    v44[0] = 0;
    v44[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    strcpy((char *)v44, "squared norm=");
    HIWORD(v44[1]) = -4864;
    v45 = v30;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0x6B63656863203E20;
    v35._object = (void *)0xEF3D646E756F6220;
    String.append(_:)(v35);
    v45 = v33;
    goto LABEL_43;
  }
  specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v44, &v45, v13, 0, v31);
  v40 = v45;
  v41 = v42[12];
  result = specialized static FieldElement.encode(_:into:with:)(v44[0], a3, v41);
  if (!v4)
    return specialized static FieldElement.encode(_:into:with:)(v40, a3, v41);
  return result;
}

unint64_t specialized PINECircuit.appendWraparoundCheck<A>(into:random:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v32;
  unint64_t v33;
  BOOL v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v7 = v1[11];
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v5 = a1;
  v8 = *a1;
  if (*(_QWORD *)(*a1 + 16) < v7)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v9 = v1[15];
  if ((v9 & 0x8000000000000000) == 0)
  {
    v10 = (2 * v7) | 1;
    swift_bridgeObjectRetain();
    swift_retain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64Vs5NeverOTg50146_s4VDAF11PINECircuitV21wraparoundDotProducts_6randomSayxGs10ArraySliceVyxG_AA25WraparoundJointRandomnessCyqd__xGtAA12VDAFProtocolRd__lFxSiXEfU_AA7E47V_SRySfGAA4PINEVyAopA19XofHmacSha256Aes128CGTG5s0pQ0VyAIGAG0tuV0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_n(0, v9, v8, v8 + 32, 0, v10);
    v3 = v11;
    v6 = v2;
    swift_release();
    v40 = *(_QWORD *)(v3 + 16);
    if (!v40)
    {
      if (v1[16])
        goto LABEL_50;
      goto LABEL_51;
    }
    v4 = (uint64_t *)v1[17];
    v41 = v1[16];
    v37 = v1[14];
    v12 = one-time initialization token for one;
    swift_bridgeObjectRetain();
    if (v12 == -1)
      goto LABEL_6;
    goto LABEL_63;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  swift_once();
LABEL_6:
  v13 = 0;
  v14 = 0;
  v38 = static Field64.one - (_QWORD)v4;
  v39 = static Field64.one;
  v34 = (unint64_t)v4 > 0xFFFFFFFF00000001;
  v33 = static Field64.one + 0xFFFFFFFF00000001 - (_QWORD)v4;
  v15 = __CFADD__(static Field64.one, 0xFFFFFFFF00000001 - (_QWORD)v4);
  v32 = v15;
  v35 = v4;
  v36 = v3;
  do
  {
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v16 = *(_QWORD *)(v3 + 8 * v13 + 32);
    v17 = v38;
    if (v39 < (unint64_t)v4)
    {
      if (v34)
        goto LABEL_54;
      v17 = v33;
      if (v32)
        goto LABEL_55;
    }
    v18 = v16 - v17;
    if (v16 < v17)
    {
      v19 = 0xFFFFFFFF00000001 - v17;
      if (v17 > 0xFFFFFFFF00000001)
        goto LABEL_56;
      v20 = __CFADD__(v16, v19);
      v18 = v16 + v19;
      if (v20)
        goto LABEL_57;
    }
    v21 = (0xFFFFFFFEFFFFFFFFLL * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    if (!__CFADD__(-v18, v18))
      goto LABEL_21;
    if (v21 <= 0xFFFFFFFEFFFFFFFFLL)
    {
      ++v21;
LABEL_21:
      v22 = (uint64_t)v4 - v17;
      if ((unint64_t)v4 >= v17)
        goto LABEL_27;
      goto LABEL_24;
    }
    v21 = 0;
    v22 = (uint64_t)v4 - v17;
    if ((unint64_t)v4 >= v17)
      goto LABEL_27;
LABEL_24:
    v20 = v17 <= 0xFFFFFFFF00000001;
    v23 = 0xFFFFFFFF00000001 - v17;
    if (!v20)
      goto LABEL_58;
    v22 = (uint64_t)v4 + v23;
    if (__CFADD__(v4, v23))
      goto LABEL_59;
LABEL_27:
    v24 = (0xFFFFFFFEFFFFFFFFLL * v22 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    if (__CFADD__(-v22, v22))
    {
      if (v24 > 0xFFFFFFFEFFFFFFFFLL)
        v24 = 0;
      else
        ++v24;
    }
    v26 = v24 >= v21 && v14 < v41;
    specialized static FieldElement.encode(_:into:with:)(v21, v5, v37);
    if (v6)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_51;
    }
    v42 = v13 + 1;
    specialized FieldElement.init(_:)(v26, &v43);
    v27 = v43;
    v4 = v5;
    v5 = (uint64_t *)*v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = (uint64_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, (char *)v5);
    v3 = v5[2];
    v28 = v5[3];
    v6 = v3 + 1;
    if (v3 >= v28 >> 1)
      v5 = (uint64_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v3 + 1, 1, (char *)v5);
    v5[2] = v6;
    v5[v3 + 4] = v27;
    *v4 = (uint64_t)v5;
    v29 = __OFADD__(v14, v26);
    v14 += v26;
    if (v29)
      goto LABEL_53;
    v5 = v4;
    ++v13;
    v4 = v35;
    v3 = v36;
    v6 = 0;
  }
  while (v42 != v40);
  swift_bridgeObjectRelease();
  if (v14 != v41)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v30 = 0xD000000000000023;
    *(_QWORD *)(v30 + 8) = 0x8000000249C310F0;
    *(_BYTE *)(v30 + 16) = 4;
    swift_willThrow();
  }
LABEL_51:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized FullyLinearProof.proveRandLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 48);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  v2 = v10;
  v4 = *(_QWORD *)(v10 + 16);
  v3 = *(_QWORD *)(v10 + 24);
  v5 = v4 + 1;
  if (v4 >= v3 >> 1)
  {
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1);
    v2 = v10;
  }
  v3 = 0;
  v6 = 0;
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 8 * v4 + 32) = v1;
  do
  {
    v7 = *(_QWORD *)(v2 + 8 * v3 + 32);
    v8 = __OFADD__(v6, v7);
    v6 += v7;
    if (v8)
    {
      __break(1u);
      goto LABEL_7;
    }
    ++v3;
  }
  while (v5 != v3);
  swift_release();
  return v6;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  v2 = v10;
  v4 = *(_QWORD *)(v10 + 16);
  v3 = *(_QWORD *)(v10 + 24);
  v5 = v4 + 1;
  if (v4 >= v3 >> 1)
  {
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1);
    v2 = v10;
  }
  v3 = 0;
  v6 = 0;
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 8 * v4 + 32) = v1;
  do
  {
    v7 = *(_QWORD *)(v2 + 8 * v3 + 32);
    v8 = __OFADD__(v6, v7);
    v6 += v7;
    if (v8)
    {
      __break(1u);
      goto LABEL_7;
    }
    ++v3;
  }
  while (v5 != v3);
  swift_release();
  return v6;
}

uint64_t specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(char *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int64_t v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85[3];
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)v4;
  if (v6 != *(_QWORD *)v4)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v86 = 0xD00000000000001BLL;
    v87 = 0x8000000249C307C0;
    v85[0] = v6;
LABEL_19:
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 540877088;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    v85[0] = v7;
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a3 + 16);
  if (v12 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v86 = 0xD000000000000019;
    v87 = 0x8000000249C313C0;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v85[0] = specialized FullyLinearProof.proveRandLength.getter();
LABEL_20:
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37 = v87;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v38 = v86;
    *(_QWORD *)(v38 + 8) = v37;
    *(_BYTE *)(v38 + 16) = 2;
    return swift_willThrow();
  }
  v76 = a2;
  v81 = a4;
  v13 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(v4 + 16);
  if (v13 != v7)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v86 = 0xD000000000000019;
    v87 = 0x8000000249C31120;
    v85[0] = v13;
    goto LABEL_19;
  }
  v86 = a3;
  v87 = a3 + 32;
  v88 = 0;
  v89 = (2 * v12) | 1;
  v14 = *(_OWORD *)(v4 + 64);
  v90 = *(_OWORD *)(v4 + 48);
  v91 = v14;
  v92 = *(_OWORD *)(v4 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  v79 = v90;
  v80 = v91;
  v16 = v92;
  v17 = specialized Gadget.wirePolynomialLength.getter();
  v18 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v90;
  *(_QWORD *)(inited + 48) = v16;
  *(_QWORD *)(inited + 56) = v17;
  *(_QWORD *)(inited + 64) = v18;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field64VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f28VXEfU_AA13SumVectorTypeVyAA7I14VSWG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(inited, &v86);
  v20 = v19;
  v21 = v5;
  swift_setDeallocating();
  v78 = a1;
  if (v20 >> 62)
    goto LABEL_123;
  for (i = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v23 = v81;
    v24 = v76;
    v25 = MEMORY[0x24BEE4AF8];
    v77 = i;
    if (!i)
      goto LABEL_21;
    v83 = MEMORY[0x24BEE4AF8];
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    v27 = v77;
    if (v77 < 0)
      break;
    v28 = 0;
    v25 = v83;
    do
    {
      if ((v20 & 0xC000000000000001) != 0)
      {
        v29 = MEMORY[0x24BD00718](v28, v20);
      }
      else
      {
        v29 = *(_QWORD *)(v20 + 8 * v28 + 32);
        swift_retain();
      }
      v83 = v25;
      v31 = *(_QWORD *)(v25 + 16);
      v30 = *(_QWORD *)(v25 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1);
        v27 = v77;
        v25 = v83;
      }
      ++v28;
      *(_QWORD *)(v25 + 16) = v31 + 1;
      *(_QWORD *)(v25 + 8 * v31 + 32) = v29;
    }
    while (v27 != v28);
    v23 = v81;
    v24 = v76;
LABEL_21:
    specialized SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(v24, v23, 1uLL, v25, v85);
    if (v21)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    v39 = v77;
    if (v77 < 0)
      goto LABEL_125;
    v21 = v78;
    if (!v77)
    {
LABEL_99:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    if (!v80)
      goto LABEL_126;
    v40 = 0;
    v81 = v20 & 0xC000000000000001;
    while (1)
    {
      if (v40 == v39)
        goto LABEL_113;
      v42 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v40)
        goto LABEL_114;
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v79 < 0)
        goto LABEL_115;
      v76 = 0;
      if (v79)
        break;
      v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_59:
      specialized Gadget.wirePolynomialLength.getter();
      result = specialized Gadget.gadgetPolynomialLength.getter();
      v60 = result;
      if (v80 < 1)
      {
        v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      }
      else
      {
        v61 = v45[2];
        v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
        if (v61)
        {
          v63 = 0;
          v64 = v45 + 4;
          v65 = 1;
          while (1)
          {
            v66 = v61 - v63;
            v67 = __OFSUB__(v61, v63);
            v68 = v63 + v80;
            if (__OFADD__(v63, v80))
            {
              if (v67)
                goto LABEL_111;
              if (v66 < 0)
                goto LABEL_127;
              v69 = v66 < v80;
              v70 = v66 >= v80 ? v63 + v80 : v61;
              if (!v69)
                goto LABEL_127;
              v68 = 0x7FFFFFFFFFFFFFFFLL;
              if (v70 < v63)
                goto LABEL_105;
            }
            else
            {
              if (v67)
                goto LABEL_112;
              if (v66 < 0)
              {
                v70 = v63 + v80;
                if (v68 < v63)
                  goto LABEL_105;
              }
              else
              {
                if (v66 >= v80)
                  v70 = v63 + v80;
                else
                  v70 = v61;
                if (v70 < v63)
                  goto LABEL_105;
              }
            }
            if (!v65)
              goto LABEL_106;
            if (v63 < 0)
              break;
            if (v61 < v70)
              goto LABEL_108;
            if (v63 >= (unint64_t)v70)
              goto LABEL_109;
            if (v63 + 1 >= (unint64_t)v70)
              goto LABEL_110;
            v71 = v64[v63];
            v21 = (char *)v64[v63 + 1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized static Polynomial.* infix(_:_:)(v71, (unint64_t)v21, &v84);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized static Polynomial.+ infix(_:_:)((unint64_t)v62, (unint64_t)v84, &v82);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v62 = v82;
            v65 = v61 >= v68;
            v63 = v68;
            if (v68 >= v61)
              goto LABEL_92;
          }
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
          goto LABEL_121;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease();
      v72 = specialized Polynomial.degree.getter((unint64_t)v62);
      v73 = v72 + 1;
      if (__OFADD__(v72, 1))
        goto LABEL_116;
      v21 = v78;
      if ((v73 & 0x8000000000000000) != 0)
        goto LABEL_117;
      if (v62[2] < v73)
        goto LABEL_118;
      specialized Array.append<A>(contentsOf:)((uint64_t)v62, (uint64_t)(v62 + 4), 0, (2 * v73) | 1);
      v74 = __OFSUB__(v60, v73);
      v75 = v60 - v73;
      if (v74)
        goto LABEL_119;
      if ((v75 & 0x8000000000000000) != 0)
        goto LABEL_120;
      if (v75)
      {
        v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v41 + 16) = v75;
        bzero((void *)(v41 + 32), 8 * v75);
      }
      else
      {
        v41 = MEMORY[0x24BEE4AF8];
      }
      v40 = 1;
      specialized Array.append<A>(contentsOf:)(v41);
      v39 = v77;
      if (v77 == 1)
        goto LABEL_99;
    }
    if (v81 || *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      if ((v42 & 0x8000000000000000) != 0)
        goto LABEL_122;
      v43 = 0;
      v44 = *(char **)v21;
      v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v81)
        {
          v46 = MEMORY[0x24BD00718](0, v20);
        }
        else
        {
          v46 = *(_QWORD *)(v20 + 32);
          swift_retain();
        }
        swift_beginAccess();
        v47 = *(_QWORD *)(v46 + 32);
        if (v43 >= *(_QWORD *)(v47 + 16))
          break;
        v48 = *(_QWORD *)(v47 + 8 * v43 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(_QWORD *)(v48 + 16) - 1 >= v42)
          goto LABEL_101;
        v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v49 + 16) = v42;
        bzero((void *)(v49 + 32), 8 * v42);
        v84 = (char *)v49;
        specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v48, v42, (uint64_t *)&v84);
        v21 = v84;
        v50 = *((_QWORD *)v84 + 2);
        swift_bridgeObjectRelease();
        if (!v50)
          goto LABEL_102;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
        v52 = v45[2];
        v51 = v45[3];
        if (v52 >= v51 >> 1)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v45);
        v45[2] = v52 + 1;
        v45[v52 + 4] = v21;
        if (v81)
        {
          v53 = MEMORY[0x24BD00718](0, v20);
        }
        else
        {
          v53 = *(_QWORD *)(v20 + 32);
          swift_retain();
        }
        swift_beginAccess();
        v54 = *(_QWORD *)(v53 + 32);
        if (v43 >= *(_QWORD *)(v54 + 16))
          goto LABEL_103;
        v55 = *(_QWORD *)(v54 + 8 * v43 + 32);
        if (!*(_QWORD *)(v55 + 16))
          goto LABEL_104;
        v21 = *(char **)(v55 + 32);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v44 + 2) + 1, 1, v44);
        v57 = *((_QWORD *)v44 + 2);
        v56 = *((_QWORD *)v44 + 3);
        v58 = v79;
        if (v57 >= v56 >> 1)
        {
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v44);
          v58 = v79;
          v44 = v59;
        }
        ++v43;
        *((_QWORD *)v44 + 2) = v57 + 1;
        *(_QWORD *)&v44[8 * v57 + 32] = v21;
        if (v58 == v43)
        {
          *(_QWORD *)v78 = v44;
          goto LABEL_59;
        }
      }
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    ;
  }
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t inited;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int64_t v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85[3];
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  v6 = *(_QWORD *)v4;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)v4)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v86 = 0xD00000000000001BLL;
    v87 = 0x8000000249C307C0;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    v85[0] = v6;
LABEL_19:
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37 = v87;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v38 = v86;
    *(_QWORD *)(v38 + 8) = v37;
    *(_BYTE *)(v38 + 16) = 2;
    return swift_willThrow();
  }
  v11 = *(_QWORD *)(a3 + 16);
  if (v11 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v86 = 0xD000000000000019;
    v87 = 0x8000000249C313C0;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v85[0] = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_19;
  }
  if (*(_QWORD *)(a4 + 16) != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v86 = 0xD000000000000019;
    v87 = 0x8000000249C31120;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 540877088;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    v85[0] = 3;
    goto LABEL_19;
  }
  v76 = a2;
  v81 = a4;
  v86 = a3;
  v87 = a3 + 32;
  v88 = 0;
  v89 = (2 * v11) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249C29130;
  v13 = *(_OWORD *)(v4 + 24);
  v90 = *(_OWORD *)(v4 + 8);
  v91 = v13;
  v92 = *(_OWORD *)(v4 + 40);
  v79 = v90;
  v80 = v13;
  v14 = v92;
  v15 = specialized Gadget.wirePolynomialLength.getter();
  v16 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v90;
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v15;
  *(_QWORD *)(inited + 64) = v16;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field64VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f28VXEfU_AA13SumVectorTypeVyAA7I14VSWG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(inited, &v86);
  v18 = v17;
  v19 = v5;
  swift_setDeallocating();
  v78 = a1;
  if (v18 >> 62)
    goto LABEL_122;
  for (i = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v21 = v76;
    v22 = MEMORY[0x24BEE4AF8];
    v77 = i;
    v23 = (_QWORD *)v81;
    if (!i)
      goto LABEL_20;
    v83 = MEMORY[0x24BEE4AF8];
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    v25 = v77;
    if (v77 < 0)
      break;
    v26 = 0;
    v22 = v83;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
      {
        v27 = MEMORY[0x24BD00718](v26, v18);
      }
      else
      {
        v27 = *(_QWORD *)(v18 + 8 * v26 + 32);
        swift_retain();
      }
      v83 = v22;
      v29 = *(_QWORD *)(v22 + 16);
      v28 = *(_QWORD *)(v22 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1);
        v25 = v77;
        v22 = v83;
      }
      ++v26;
      *(_QWORD *)(v22 + 16) = v29 + 1;
      *(_QWORD *)(v22 + 8 * v29 + 32) = v27;
    }
    while (v25 != v26);
    v23 = (_QWORD *)v81;
    v21 = v76;
LABEL_20:
    specialized PINECircuit.evaluate(measurement:jointRand:numOfShares:for:)(v21, v23, 1uLL, v22, v85);
    if (v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    v39 = v77;
    if (v77 < 0)
      goto LABEL_124;
    v19 = v78;
    if (!v77)
    {
LABEL_98:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    if (!v80)
      goto LABEL_125;
    v40 = 0;
    v81 = v18 & 0xC000000000000001;
    while (1)
    {
      if (v40 == v39)
        goto LABEL_112;
      v42 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v40)
        goto LABEL_113;
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v79 < 0)
        goto LABEL_114;
      v76 = 0;
      if (v79)
        break;
      v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_58:
      specialized Gadget.wirePolynomialLength.getter();
      result = specialized Gadget.gadgetPolynomialLength.getter();
      v60 = result;
      if (v80 < 1)
      {
        v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      }
      else
      {
        v61 = v45[2];
        v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
        if (v61)
        {
          v63 = 0;
          v64 = v45 + 4;
          v65 = 1;
          while (1)
          {
            v66 = v61 - v63;
            v67 = __OFSUB__(v61, v63);
            v68 = v63 + v80;
            if (__OFADD__(v63, v80))
            {
              if (v67)
                goto LABEL_110;
              if (v66 < 0)
                goto LABEL_126;
              v69 = v66 < v80;
              v70 = v66 >= v80 ? v63 + v80 : v61;
              if (!v69)
                goto LABEL_126;
              v68 = 0x7FFFFFFFFFFFFFFFLL;
              if (v70 < v63)
                goto LABEL_104;
            }
            else
            {
              if (v67)
                goto LABEL_111;
              if (v66 < 0)
              {
                v70 = v63 + v80;
                if (v68 < v63)
                  goto LABEL_104;
              }
              else
              {
                if (v66 >= v80)
                  v70 = v63 + v80;
                else
                  v70 = v61;
                if (v70 < v63)
                  goto LABEL_104;
              }
            }
            if (!v65)
              goto LABEL_105;
            if (v63 < 0)
              break;
            if (v61 < v70)
              goto LABEL_107;
            if (v63 >= (unint64_t)v70)
              goto LABEL_108;
            if (v63 + 1 >= (unint64_t)v70)
              goto LABEL_109;
            v71 = v64[v63];
            v19 = (char *)v64[v63 + 1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized static Polynomial.* infix(_:_:)(v71, (unint64_t)v19, &v84);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized static Polynomial.+ infix(_:_:)((unint64_t)v62, (unint64_t)v84, &v82);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v62 = v82;
            v65 = v61 >= v68;
            v63 = v68;
            if (v68 >= v61)
              goto LABEL_91;
          }
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
          goto LABEL_120;
        }
      }
LABEL_91:
      swift_bridgeObjectRelease();
      v72 = specialized Polynomial.degree.getter((unint64_t)v62);
      v73 = v72 + 1;
      if (__OFADD__(v72, 1))
        goto LABEL_115;
      v19 = v78;
      if ((v73 & 0x8000000000000000) != 0)
        goto LABEL_116;
      if (v62[2] < v73)
        goto LABEL_117;
      specialized Array.append<A>(contentsOf:)((uint64_t)v62, (uint64_t)(v62 + 4), 0, (2 * v73) | 1);
      v74 = __OFSUB__(v60, v73);
      v75 = v60 - v73;
      if (v74)
        goto LABEL_118;
      if ((v75 & 0x8000000000000000) != 0)
        goto LABEL_119;
      if (v75)
      {
        v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v41 + 16) = v75;
        bzero((void *)(v41 + 32), 8 * v75);
      }
      else
      {
        v41 = MEMORY[0x24BEE4AF8];
      }
      v40 = 1;
      specialized Array.append<A>(contentsOf:)(v41);
      v39 = v77;
      if (v77 == 1)
        goto LABEL_98;
    }
    if (v81 || *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      if ((v42 & 0x8000000000000000) != 0)
        goto LABEL_121;
      v43 = 0;
      v44 = *(char **)v19;
      v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v81)
        {
          v46 = MEMORY[0x24BD00718](0, v18);
        }
        else
        {
          v46 = *(_QWORD *)(v18 + 32);
          swift_retain();
        }
        swift_beginAccess();
        v47 = *(_QWORD *)(v46 + 32);
        if (v43 >= *(_QWORD *)(v47 + 16))
          break;
        v48 = *(_QWORD *)(v47 + 8 * v43 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(_QWORD *)(v48 + 16) - 1 >= v42)
          goto LABEL_100;
        v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v49 + 16) = v42;
        bzero((void *)(v49 + 32), 8 * v42);
        v84 = (char *)v49;
        specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v48, v42, (uint64_t *)&v84);
        v19 = v84;
        v50 = *((_QWORD *)v84 + 2);
        swift_bridgeObjectRelease();
        if (!v50)
          goto LABEL_101;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
        v52 = v45[2];
        v51 = v45[3];
        if (v52 >= v51 >> 1)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v45);
        v45[2] = v52 + 1;
        v45[v52 + 4] = v19;
        if (v81)
        {
          v53 = MEMORY[0x24BD00718](0, v18);
        }
        else
        {
          v53 = *(_QWORD *)(v18 + 32);
          swift_retain();
        }
        swift_beginAccess();
        v54 = *(_QWORD *)(v53 + 32);
        if (v43 >= *(_QWORD *)(v54 + 16))
          goto LABEL_102;
        v55 = *(_QWORD *)(v54 + 8 * v43 + 32);
        if (!*(_QWORD *)(v55 + 16))
          goto LABEL_103;
        v19 = *(char **)(v55 + 32);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v44 + 2) + 1, 1, v44);
        v57 = *((_QWORD *)v44 + 2);
        v56 = *((_QWORD *)v44 + 3);
        v58 = v79;
        if (v57 >= v56 >> 1)
        {
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v44);
          v58 = v79;
          v44 = v59;
        }
        ++v43;
        *((_QWORD *)v44 + 2) = v57 + 1;
        *(_QWORD *)&v44[8 * v57 + 32] = v19;
        if (v58 == v43)
        {
          *(_QWORD *)v78 = v44;
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    ;
  }
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
  return result;
}

unint64_t specialized closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0xFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4 = *(_QWORD *)(a2 + 8 * result + 32);
  v5 = *(_QWORD *)(a3 + 160);
  swift_bridgeObjectRetain();
  v6 = specialized static PINE.domainSeparationTag(usage:)(1u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_249C2A640;
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 <= 0xFF)
  {
    *(_BYTE *)(result + 32) = v5;
    *(_BYTE *)(result + 33) = v3;
    v7 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v4, v6, result);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  _QWORD *v17;
  char *v18;
  __int128 v19;

  v11 = *v5;
  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *v5 & ~(*v5 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v13 = v12[2];
  v14 = v12[3];
  v15 = v13 + 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  if (v13 >= v14 >> 1)
    goto LABEL_12;
  while (1)
  {
    v12[2] = v15;
    v17 = &v12[6 * v13];
    v17[4] = a1;
    *((_BYTE *)v17 + 40) = 0;
    v17[6] = a2;
    *((_BYTE *)v17 + 56) = 0;
    v17[8] = a3;
    v17[9] = a4;
    a2 = v11 - 1;
    if (__OFSUB__(v11, 1))
      break;
    if (a2 < 0)
      goto LABEL_14;
    if (v11 == 1)
      return (uint64_t)v12;
    a1 = *(_QWORD *)(a5 + 16);
    v15 = 48 * v13 + 80;
    v13 += 2;
    a4 = (_OWORD *)(a5 + 48);
    while (a1)
    {
      v11 = v13 - 1;
      a3 = *((_QWORD *)a4 - 2);
      a5 = *((_QWORD *)a4 - 1);
      v19 = *a4;
      v14 = v12[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v13 - 1 >= v14 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v13, 1, v12);
      v12[2] = v13;
      v18 = (char *)v12 + v15;
      *(_QWORD *)v18 = a3;
      v18[8] = 1;
      *((_QWORD *)v18 + 2) = a5;
      v15 += 48;
      ++v13;
      v18[24] = 1;
      --a1;
      a4 += 2;
      *((_OWORD *)v18 + 2) = v19;
      if (!--a2)
        return (uint64_t)v12;
    }
    __break(1u);
LABEL_12:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15, 1, v12);
    v12 = (_QWORD *)result;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *a3;
  if (*(_QWORD *)(*a3 + 16) < a1)
    goto LABEL_80;
  v3 = a3;
  v4 = a2;
  v5 = a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
      goto LABEL_4;
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    return result;
  }
LABEL_81:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v6 = result;
  v8 = *(_QWORD *)(result + 16);
  if (!v8)
    goto LABEL_82;
LABEL_4:
  v9 = (unint64_t *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 32);
  v11 = (v10 * (unsigned __int128)v4) >> 64;
  v12 = (0xFFFFFFFEFFFFFFFFLL * v10 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  LODWORD(v13) = __CFADD__(-(uint64_t)(v10 * v4), v10 * v4);
  v14 = v12 + v11;
  if (__CFADD__(v12, v11))
  {
    v15 = v14 + v13;
    goto LABEL_10;
  }
  while (v14 == -1)
  {
    if ((v13 & 1) == 0)
    {
      v13 = 4294967294;
      goto LABEL_20;
    }
    v15 = 0;
LABEL_10:
    v14 = 0xFFFFFFFFLL;
    v16 = __CFADD__(v15, 0xFFFFFFFFLL);
    v13 = v15 + 0xFFFFFFFFLL;
    if (!v16)
      goto LABEL_20;
    __break(1u);
  }
  v13 = v14 + v13;
  if (v13 >= 0xFFFFFFFF00000001)
    v13 += 0xFFFFFFFFLL;
LABEL_20:
  *v9 = v13;
  if (v5 >= 0)
    v17 = v5;
  else
    v17 = v5 + 1;
  if (v5 < -1)
    goto LABEL_83;
  v18 = v17 >> 1;
  if (v18 >= v8)
    goto LABEL_83;
  v19 = v9[v18];
  v20 = (v19 * (unsigned __int128)v4) >> 64;
  v21 = (0xFFFFFFFEFFFFFFFFLL * v19 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  LODWORD(v22) = __CFADD__(-(uint64_t)(v19 * v4), v19 * v4);
  v16 = __CFADD__(v21, v20);
  v23 = v21 + v20;
  if (v16)
  {
    v24 = v23 + v22;
    goto LABEL_31;
  }
  while (v23 == -1)
  {
    if ((v22 & 1) == 0)
    {
      v22 = 4294967294;
      goto LABEL_41;
    }
    v24 = 0;
LABEL_31:
    v23 = 0xFFFFFFFFLL;
    v16 = __CFADD__(v24, 0xFFFFFFFFLL);
    v22 = v24 + 0xFFFFFFFFLL;
    if (!v16)
      goto LABEL_41;
    __break(1u);
  }
  v22 = v23 + v22;
  if (v22 >= 0xFFFFFFFF00000001)
    v22 += 0xFFFFFFFFLL;
LABEL_41:
  v9[v18] = v22;
  *v3 = v6;
  if (v5 >= 2 && (v5 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    v25 = 0;
    v26 = v5 + 3;
    v27 = v18 - 1;
    while (1)
    {
      v31 = *(_QWORD *)(v6 + 16);
      if (v25 + 1 >= v31)
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      if (v26 - 4 >= v31)
        goto LABEL_77;
      v32 = v6 + 8 * v25;
      v33 = *(_QWORD *)(v32 + 40);
      v34 = *(_QWORD *)(v6 + 8 * v26);
      v35 = (v34 * (unsigned __int128)v4) >> 64;
      result = (0xFFFFFFFEFFFFFFFFLL * v34 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v36 = __CFADD__(-(uint64_t)(v34 * v4), v34 * v4);
      v37 = result + v35;
      if (!__CFADD__(result, v35))
      {
        if (v37 != -1)
        {
          v39 = v37 + v36;
          if (v39 >= 0xFFFFFFFF00000001)
            v39 += 0xFFFFFFFFLL;
          goto LABEL_64;
        }
        if (!v36)
        {
          v39 = 4294967294;
          goto LABEL_64;
        }
        v36 = 1;
      }
      v38 = v36 + v37;
      v16 = __CFADD__(v38, 0xFFFFFFFFLL);
      v39 = v38 + 0xFFFFFFFFLL;
      if (v16)
        goto LABEL_79;
LABEL_64:
      *(_QWORD *)(v32 + 40) = v39;
      v40 = (v33 * (unsigned __int128)v4) >> 64;
      v41 = (0xFFFFFFFEFFFFFFFFLL * v33 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v28 = __CFADD__(-(uint64_t)(v33 * v4), v33 * v4);
      v42 = v41 + v40;
      if (!__CFADD__(v41, v40))
      {
        if (v42 != -1)
        {
          v30 = v42 + v28;
          if (v30 >= 0xFFFFFFFF00000001)
            v30 += 0xFFFFFFFFLL;
          goto LABEL_46;
        }
        if (!v28)
        {
          v30 = 4294967294;
          goto LABEL_46;
        }
        v28 = 1;
      }
      v29 = v28 + v42;
      v16 = __CFADD__(v29, 0xFFFFFFFFLL);
      v30 = v29 + 0xFFFFFFFFLL;
      if (v16)
        goto LABEL_78;
LABEL_46:
      *(_QWORD *)(v6 + 8 * v26--) = v30;
      if (v27 == ++v25)
      {
        *v3 = v6;
        return result;
      }
    }
  }
  return result;
}

uint64_t specialized PINECircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t result;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL8 v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  unint64_t v181;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)v5;
  if (v7 != *(_QWORD *)v5)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v177 = 0xD00000000000001BLL;
    *((_QWORD *)&v177 + 1) = 0x8000000249C307C0;
    v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 540877088;
    v48._object = (void *)0xE400000000000000;
    String.append(_:)(v48);
    v181 = v8;
LABEL_12:
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v51);
LABEL_13:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)v52 = v177;
    *(_BYTE *)(v52 + 16) = 2;
    return swift_willThrow();
  }
  if (a2[2] != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v177 = 0xD000000000000019;
    *((_QWORD *)&v177 + 1) = 0x8000000249C31120;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 540877088;
    v50._object = (void *)0xE400000000000000;
    String.append(_:)(v50);
    v181 = 3;
    goto LABEL_12;
  }
  v10 = (_QWORD *)v5;
  v13 = *(_QWORD *)(a4 + 16);
  v14 = *(_OWORD *)(v5 + 40);
  v15 = *(_OWORD *)(v5 + 24);
  v178 = *(_OWORD *)(v5 + 8);
  v179 = v15;
  v180 = v14;
  v16 = *((_QWORD *)&v178 + 1);
  v171 = v178;
  v17 = v14;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v13 != 1)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v177 = 0x2064696C61766E49;
    *((_QWORD *)&v177 + 1) = 0xEF203A746E756F63;
    v181 = v13;
    v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._countAndFlagsBits = 540877088;
    v54._object = (void *)0xE400000000000000;
    String.append(_:)(v54);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_249C29130;
    v56 = specialized Gadget.wirePolynomialLength.getter();
    v57 = specialized Gadget.gadgetPolynomialLength.getter();
    *(_QWORD *)(v55 + 32) = v171;
    *(_QWORD *)(v55 + 40) = v16;
    *(_QWORD *)(v55 + 48) = v17;
    *(_QWORD *)(v55 + 56) = v56;
    *(_QWORD *)(v55 + 64) = v57;
    v58._countAndFlagsBits = MEMORY[0x24BD00394](v55, &type metadata for GadgetParameters);
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_148;
  specialized FieldElement.init(_:)(a3, &v181);
  v18 = v181;
  if (!v181)
    goto LABEL_161;
  protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v177);
  if (v177 == 0)
  {
    v19 = 0xFFFFFFFFLL;
LABEL_8:
    v161 = a2[4];
    v154 = a2[5];
    v150 = a2[6];
    v20 = v10[11];
    v164 = specialized Collection.prefix(_:)(v20, a1, a1 + 32, 0, (2 * v7) | 1);
    v156 = v22;
    v157 = v21;
    v155 = v23;
    v24 = specialized Collection.dropFirst(_:)(v20, a1, a1 + 32, 0, (2 * v7) | 1);
    v26 = v25;
    v28 = v27;
    v30 = v29;
    v31 = v10[9];
    v165 = specialized Collection.prefix(_:)(v31, v24, v25, v27, v29);
    v159 = v32;
    v172 = v33;
    v166 = v34;
    v35 = specialized Collection.dropFirst(_:)(v31, v24, v26, v28, v30);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    v42 = v10[15];
    v158 = specialized Collection.prefix(_:)(v42, v35, v36, v38, v40);
    v152 = v44;
    v153 = v43;
    v151 = v45;
    specialized Collection.dropFirst(_:)(v42, v35, v37, v39, v41);
    v46 = *(_QWORD *)(a4 + 32);
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    outlined copy of GadgetEvaluation<Field64>(v46);
    specialized PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(v165, v159, v172, v166, v161, v19, v46, (unint64_t *)&v177);
    if (v6)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      outlined consume of GadgetEvaluation<A><A, B>(v46);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    v168 = v42;
    v162 = v46;
    outlined consume of GadgetEvaluation<A><A, B>(v46);
    swift_unknownObjectRelease();
    v74 = v10[12];
    v170 = specialized Collection.prefix(_:)(v74, v165, v159, v172, v166);
    v148 = v76;
    v149 = v75;
    v147 = v77;
    v78 = specialized Collection.dropFirst(_:)(v74, v165, v159, v172, v166);
    v80 = v79;
    v82 = v81;
    v84 = v83;
    v173 = specialized Collection.prefix(_:)(v74, v78, v79, v81, v83);
    v86 = v85;
    v160 = v87;
    v146 = v88;
    v89 = specialized Collection.dropFirst(_:)(v74, v78, v80, v82, v84);
    v93 = v10[14];
    v94 = __OFADD__(v93, 1);
    v95 = v93 + 1;
    if (v94)
      goto LABEL_149;
    v96 = v95 * v168;
    if ((unsigned __int128)(v95 * (__int128)v168) >> 64 != (v95 * v168) >> 63)
      goto LABEL_150;
    v97 = v89;
    v98 = v90;
    v99 = v91;
    v100 = v86;
    v101 = v92;
    v169 = specialized Collection.prefix(_:)(v96, v89, v90, v91, v92);
    v144 = v103;
    v145 = v102;
    v143 = v104;
    specialized Collection.dropFirst(_:)(v96, v97, v98, v99, v101);
    swift_unknownObjectRetain();
    outlined copy of GadgetEvaluation<Field64>(v162);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(&v181, &v176, v164, v157, v156, v155, v170, v149, v148, v147, v173, v100, v160, v146, v19, v162);
    outlined consume of GadgetEvaluation<A><A, B>(v162);
    outlined copy of GadgetEvaluation<Field64>(v162);
    specialized PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)((uint64_t)&v175, &v174, v169, v145, v144, v143, v158, v153, v152, v151, v154, v19);
    outlined consume of GadgetEvaluation<A><A, B>(v162);
    v106 = v174;
    v107 = v175;
    v108 = (v181 * (unsigned __int128)(unint64_t)v150) >> 64;
    v109 = (0xFFFFFFFEFFFFFFFFLL * v181 * v150 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v110 = __CFADD__(-(uint64_t)(v181 * v150), v181 * v150);
    v111 = v109 + v108;
    if (__CFADD__(v109, v108))
      goto LABEL_53;
    while (v111 == -1)
    {
      if ((v110 & 1) == 0)
      {
        v113 = v177;
        v111 = 4294967294;
        goto LABEL_60;
      }
      v110 = 1;
LABEL_53:
      v112 = v110 + v111;
      LODWORD(v110) = -1;
      v65 = __CFADD__(v112, 0xFFFFFFFFLL);
      v111 = v112 + 0xFFFFFFFF;
      if (!v65)
        goto LABEL_59;
      __break(1u);
    }
    v111 += v110;
    if (v111 >= 0xFFFFFFFF00000001)
      v111 += 0xFFFFFFFFLL;
LABEL_59:
    v113 = v177;
    if (!v111)
      goto LABEL_69;
LABEL_60:
    v65 = v111 <= 0xFFFFFFFF00000001;
    v114 = 0xFFFFFFFF00000001 - v111;
    if (!v65)
      goto LABEL_151;
    v115 = v113 - v114;
    if (v113 < v114)
    {
      v115 = 0xFFFFFFFF00000001;
      v65 = v114 <= 0xFFFFFFFF00000001;
      v116 = 0xFFFFFFFF00000001 - v114;
      if (!v65)
        goto LABEL_157;
      v65 = __CFADD__(v113, v116);
      v113 += v116;
      if (!v65)
      {
LABEL_69:
        specialized FieldElement.pow(_:)(2, v150, (uint64_t *)&v175);
        v117 = (v175 * (unsigned __int128)v176) >> 64;
        v118 = (0xFFFFFFFEFFFFFFFFLL * v175 * v176 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        v119 = __CFADD__(-(uint64_t)(v175 * v176), v175 * v176);
        v120 = v118 + v117;
        if (!__CFADD__(v118, v117))
        {
          if (v120 != -1)
          {
            v122 = v120 + v119;
            if (v122 >= 0xFFFFFFFF00000001)
              v122 += 0xFFFFFFFFLL;
            if (!v122)
              goto LABEL_97;
            goto LABEL_88;
          }
          if (!v119)
          {
            v122 = 4294967294;
            goto LABEL_88;
          }
          v119 = 1;
        }
        v121 = v119 + v120;
        v65 = __CFADD__(v121, 0xFFFFFFFFLL);
        v122 = v121 + 0xFFFFFFFFLL;
        if (v65)
          goto LABEL_155;
        if (!v122)
          goto LABEL_97;
LABEL_88:
        v65 = v122 <= 0xFFFFFFFF00000001;
        v123 = 0xFFFFFFFF00000001 - v122;
        if (!v65)
          goto LABEL_152;
        v124 = v113 - v123;
        if (v113 < v123)
        {
          v124 = 0xFFFFFFFF00000001;
          v65 = v123 <= 0xFFFFFFFF00000001;
          v125 = 0xFFFFFFFF00000001 - v123;
          if (!v65)
            goto LABEL_158;
          v65 = __CFADD__(v113, v125);
          v113 += v125;
          if (!v65)
          {
LABEL_97:
            specialized FieldElement.pow(_:)(3, v150, (uint64_t *)&v175);
            v126 = (v175 * (unsigned __int128)v107) >> 64;
            v127 = (0xFFFFFFFEFFFFFFFFLL * v175 * v107 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
            v128 = __CFADD__(-(uint64_t)(v175 * v107), v175 * v107);
            v129 = v127 + v126;
            if (__CFADD__(v127, v126))
              goto LABEL_102;
            while (v129 == -1)
            {
              if ((v128 & 1) == 0)
              {
                v129 = 4294967294;
                goto LABEL_109;
              }
              v128 = 1;
LABEL_102:
              v130 = v128 + v129;
              LODWORD(v128) = -1;
              v65 = __CFADD__(v130, 0xFFFFFFFFLL);
              v129 = v130 + 0xFFFFFFFF;
              if (!v65)
                goto LABEL_108;
              __break(1u);
            }
            v129 += v128;
            if (v129 >= 0xFFFFFFFF00000001)
              v129 += 0xFFFFFFFFLL;
LABEL_108:
            if (!v129)
              goto LABEL_118;
LABEL_109:
            v65 = v129 <= 0xFFFFFFFF00000001;
            v131 = 0xFFFFFFFF00000001 - v129;
            if (!v65)
              goto LABEL_153;
            v132 = v113 - v131;
            if (v113 < v131)
            {
              v132 = 0xFFFFFFFF00000001;
              v65 = v131 <= 0xFFFFFFFF00000001;
              v133 = 0xFFFFFFFF00000001 - v131;
              if (!v65)
                goto LABEL_159;
              v65 = __CFADD__(v113, v133);
              v113 += v133;
              if (!v65)
              {
LABEL_118:
                specialized FieldElement.pow(_:)(4, v150, (uint64_t *)&v175);
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                result = swift_unknownObjectRelease();
                v134 = (v175 * (unsigned __int128)v106) >> 64;
                v135 = (0xFFFFFFFEFFFFFFFFLL * v175 * v106 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
                v136 = __CFADD__(-(uint64_t)(v175 * v106), v175 * v106);
                v137 = v135 + v134;
                if (!__CFADD__(v135, v134))
                {
                  if (v137 != -1)
                  {
                    v139 = v137 + v136;
                    if (v139 >= 0xFFFFFFFF00000001)
                      v139 += 0xFFFFFFFFLL;
                    if (!v139)
                      goto LABEL_146;
                    goto LABEL_137;
                  }
                  if (!v136)
                  {
                    v139 = 4294967294;
LABEL_137:
                    v65 = v139 <= 0xFFFFFFFF00000001;
                    v140 = 0xFFFFFFFF00000001 - v139;
                    if (!v65)
                      goto LABEL_154;
                    v141 = v113 - v140;
                    if (v113 < v140)
                    {
                      v141 = 0xFFFFFFFF00000001;
                      v65 = v140 <= 0xFFFFFFFF00000001;
                      v142 = 0xFFFFFFFF00000001 - v140;
                      if (!v65)
                        goto LABEL_160;
                      v65 = __CFADD__(v113, v142);
                      v113 += v142;
                      if (!v65)
                        goto LABEL_146;
                      __break(1u);
                    }
                    v113 = v141;
LABEL_146:
                    *a5 = v113;
                    return result;
                  }
                  v136 = 1;
                }
                v138 = v136 + v137;
                v65 = __CFADD__(v138, 0xFFFFFFFFLL);
                v139 = v138 + 0xFFFFFFFFLL;
                if (v65)
                  goto LABEL_156;
                if (!v139)
                  goto LABEL_146;
                goto LABEL_137;
              }
              __break(1u);
            }
            v113 = v132;
            goto LABEL_118;
          }
          __break(1u);
        }
        v113 = v124;
        goto LABEL_97;
      }
      __break(1u);
    }
    v113 = v115;
    goto LABEL_69;
  }
  v59 = 0xFFFFFFFEFFFFFFFFLL;
  v19 = 0xFFFFFFFFLL;
  while (1)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v59 & 1, &v177);
    v61 = *((_QWORD *)&v177 + 1) | v177;
    if (v177 == 0)
      goto LABEL_38;
    v62 = (v18 * (unsigned __int128)v19) >> 64;
    v63 = (0xFFFFFFFEFFFFFFFFLL * v18 * v19 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v64 = __CFADD__(-(uint64_t)(v18 * v19), v18 * v19);
    v65 = __CFADD__(v63, v62);
    v66 = v63 + v62;
    if (v65)
    {
      v67 = v66 + v64;
    }
    else
    {
      if (v66 != -1)
      {
        v61 = 0;
        v68 = v66 + v64;
        if (v68 >= 0xFFFFFFFF00000001)
          v19 = v68 + 0xFFFFFFFF;
        else
          v19 = v68;
        goto LABEL_38;
      }
      v67 = 0;
      if (!v64)
      {
        v61 = 0;
        v19 = 4294967294;
        goto LABEL_38;
      }
    }
    v19 = v67 + 0xFFFFFFFF;
    if (v67 >= 0xFFFFFFFF00000001)
      goto LABEL_147;
    v61 = 0;
LABEL_38:
    v69 = (__PAIR128__(v61, v18) * __PAIR128__(v61, v18)) >> 64;
    v70 = (0xFFFFFFFEFFFFFFFFLL * v18 * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v71 = __CFADD__(-(uint64_t)(v18 * v18), v18 * v18);
    v65 = __CFADD__(v70, v69);
    v72 = v70 + v69;
    if (!v65)
    {
      if (v72 == -1)
      {
        if (v71)
          v18 = 0xFFFFFFFFLL;
        else
          v18 = 4294967294;
      }
      else
      {
        v60 = v72 + v71;
        if (v60 >= 0xFFFFFFFF00000001)
          v18 = v60 + 0xFFFFFFFF;
        else
          v18 = v60;
      }
      goto LABEL_20;
    }
    v73 = v72 + v71;
    v18 = v73 + 0xFFFFFFFF;
    if (v73 >= 0xFFFFFFFF00000001)
      break;
LABEL_20:
    v59 >>= 1;
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v59, &v177);
    if (v177 == 0)
      goto LABEL_8;
  }
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  uint64_t v8;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[7];
  uint64_t v22;
  _OWORD v23[9];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v14 = *(_OWORD *)(v8 + 24);
  v27 = *(_OWORD *)(v8 + 8);
  v28 = v14;
  v29 = *(_OWORD *)(v8 + 40);
  v15 = *(_OWORD *)(v8 + 112);
  v16 = *(_OWORD *)(v8 + 128);
  v17 = *(_OWORD *)(v8 + 80);
  v23[6] = *(_OWORD *)(v8 + 96);
  v23[7] = v15;
  v23[8] = v16;
  v18 = *(_OWORD *)(v8 + 48);
  v19 = *(_OWORD *)(v8 + 64);
  v23[2] = *(_OWORD *)(v8 + 32);
  v23[3] = v18;
  v25 = a6;
  v26 = a5;
  v24 = *(_QWORD *)(v8 + 144);
  v23[4] = v19;
  v23[5] = v17;
  v20 = *(_OWORD *)(v8 + 16);
  v23[0] = *(_OWORD *)v8;
  v23[1] = v20;
  if (one-time initialization token for one != -1)
    a1 = swift_once();
  v22 = static Field64.one;
  MEMORY[0x24BDAC7A8](a1, a2);
  v21[2] = &v22;
  v21[3] = &v25;
  v21[4] = &v26;
  v21[5] = v23;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a2, a3, a4, a7, (unint64_t *)partial apply for specialized closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:), (uint64_t)v21, a8);
}

void specialized PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[4];
  unint64_t v42;
  unint64_t v43;
  _OWORD v44[6];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;

  v21 = *(_OWORD *)(v16 + 24);
  v49 = *(_OWORD *)(v16 + 8);
  v50 = v21;
  v51 = *(_OWORD *)(v16 + 40);
  v22 = *(_OWORD *)(v16 + 112);
  v23 = *(_OWORD *)(v16 + 128);
  v24 = *(_OWORD *)(v16 + 80);
  v45 = *(_OWORD *)(v16 + 96);
  v46 = v22;
  v47 = v23;
  v25 = *(_OWORD *)(v16 + 48);
  v26 = *(_OWORD *)(v16 + 64);
  v44[2] = *(_OWORD *)(v16 + 32);
  v44[3] = v25;
  v48 = *(_QWORD *)(v16 + 144);
  v44[4] = v26;
  v44[5] = v24;
  v27 = *(_OWORD *)(v16 + 16);
  v44[0] = *(_OWORD *)v16;
  v44[1] = v27;
  v41[2] = v44;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a4, a5, a6, a16, (unint64_t *)partial apply for specialized closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:), (uint64_t)v41, &v52);
  if (!v17)
  {
    swift_unknownObjectRetain();
    specialized FieldElement.init(inputVector:)(a8, a9, a10, &v43);
    swift_unknownObjectRetain();
    specialized FieldElement.init(inputVector:)(a12, a13, a14, &v42);
    v28 = v43;
    v29 = v43 - v52;
    if (v43 < v52)
    {
      v30 = 0xFFFFFFFF00000001 - v52;
      if (v52 > 0xFFFFFFFF00000001)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      v31 = __CFADD__(v43, v30);
      v29 = v43 + v30;
      if (v31)
      {
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }
    *a1 = v29;
    if (v42)
    {
      v32 = 0xFFFFFFFF00000001 - v42;
      if (v42 > 0xFFFFFFFF00000001)
      {
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      v33 = v28 - v32;
      if (v28 < v32)
      {
        v33 = 0xFFFFFFFF00000001;
        if (v32 > 0xFFFFFFFF00000001)
        {
LABEL_42:
          __break(1u);
          return;
        }
        v31 = __CFADD__(v28, v42);
        v28 += v42;
        if (!v31)
          goto LABEL_14;
        __break(1u);
      }
      v28 = v33;
    }
LABEL_14:
    v34 = (*((unint64_t *)&v45 + 1) * (unsigned __int128)a15) >> 64;
    v35 = (0xFFFFFFFEFFFFFFFFLL * *((_QWORD *)&v45 + 1) * a15 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v36 = __CFADD__(-(uint64_t)(*((_QWORD *)&v45 + 1) * a15), *((_QWORD *)&v45 + 1) * a15);
    v37 = v35 + v34;
    if (__CFADD__(v35, v34))
    {
      if (!v36)
      {
LABEL_28:
        v31 = __CFADD__(v37, 0xFFFFFFFFLL);
        v38 = v37 + 0xFFFFFFFFLL;
        if (v31)
          goto LABEL_37;
        v39 = v28 - v38;
        if (v28 >= v38)
          goto LABEL_33;
        goto LABEL_30;
      }
    }
    else
    {
      if (v37 != -1)
      {
        v38 = v37 + v36;
        if (v38 >= 0xFFFFFFFF00000001)
          v38 += 0xFFFFFFFFLL;
        v39 = v28 - v38;
        if (v28 >= v38)
          goto LABEL_33;
        goto LABEL_30;
      }
      if (!v36)
      {
        v38 = 4294967294;
        v39 = v28 - 4294967294u;
        if (v28 >= 0xFFFFFFFE)
        {
LABEL_33:
          *a2 = v39;
          return;
        }
LABEL_30:
        v31 = v38 <= 0xFFFFFFFF00000001;
        v40 = 0xFFFFFFFF00000001 - v38;
        if (!v31)
          goto LABEL_40;
        v39 = v28 + v40;
        if (__CFADD__(v28, v40))
        {
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        goto LABEL_33;
      }
    }
    ++v37;
    goto LABEL_28;
  }
}

void specialized PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[16];
  unint64_t *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[8];
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v41 = a2;
  v42 = (_QWORD *)a1;
  v56 = a11;
  v52 = a12;
  v19 = *(_OWORD *)(v12 + 112);
  v49[6] = *(_OWORD *)(v12 + 96);
  v49[7] = v19;
  v50 = *(_OWORD *)(v12 + 128);
  v20 = *(_QWORD *)(v12 + 136);
  v51 = *(_QWORD *)(v12 + 144);
  v21 = *(_OWORD *)(v12 + 48);
  v49[2] = *(_OWORD *)(v12 + 32);
  v49[3] = v21;
  v22 = *(_OWORD *)(v12 + 80);
  v49[4] = *(_OWORD *)(v12 + 64);
  v49[5] = v22;
  v23 = *(_OWORD *)(v12 + 16);
  v49[0] = *(_OWORD *)v12;
  v49[1] = v23;
  if (one-time initialization token for one != -1)
  {
    v40[15] = v13;
    a1 = swift_once();
  }
  v47 = 0;
  v48 = static Field64.one;
  v24 = static Field64.one - v20;
  if (static Field64.one < v20)
  {
    v25 = 0xFFFFFFFF00000001 - v20;
    if (v20 > 0xFFFFFFFF00000001)
    {
      __break(1u);
    }
    else
    {
      v26 = __CFADD__(static Field64.one, v25);
      v24 = static Field64.one + v25;
      if (!v26)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_36;
  }
LABEL_6:
  v27 = *(_OWORD *)(v12 + 24);
  v53 = *(_OWORD *)(v12 + 8);
  v54 = v27;
  v55 = *(_OWORD *)(v12 + 40);
  v45 = 0;
  v46 = v24;
  MEMORY[0x24BDAC7A8](a1, a2);
  v40[2] = a3;
  v40[3] = a4;
  v40[4] = a5;
  v40[5] = a6;
  v40[6] = &v47;
  v40[7] = v49;
  v40[8] = &v46;
  v40[9] = &v52;
  v40[10] = &v48;
  v40[11] = &v45;
  v40[12] = &v56;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a8, v28, v29, v30, (unint64_t *)partial apply for specialized closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:), (uint64_t)v40, &v44);
  if (v13)
    return;
  v31 = v45;
  *v42 = v44;
  v32 = v50;
  if ((v50 & 0x8000000000000000) != 0)
  {
    if (__OFSUB__(0, (_QWORD)v50))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (-(uint64_t)v50 < 0)
    {
LABEL_40:
      __break(1u);
      return;
    }
    v32 = v50 - 0xFFFFFFFFLL;
  }
  specialized FieldElement.init(_:)(v32, &v43);
  v33 = (v52 * (unsigned __int128)v43) >> 64;
  v34 = (0xFFFFFFFEFFFFFFFFLL * v52 * v43 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v35 = __CFADD__(-(uint64_t)(v52 * v43), v52 * v43);
  v36 = v34 + v33;
  if (__CFADD__(v34, v33))
  {
    if (!v35)
    {
LABEL_25:
      v26 = __CFADD__(v36, 0xFFFFFFFFLL);
      v37 = v36 + 0xFFFFFFFFLL;
      if (!v26)
      {
        v38 = v31 - v37;
        if (v31 >= v37)
          goto LABEL_30;
        goto LABEL_27;
      }
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_24:
    ++v36;
    goto LABEL_25;
  }
  if (v36 == -1)
  {
    if (!v35)
    {
      v37 = 4294967294;
      v38 = v31 - 4294967294u;
      if (v31 >= 0xFFFFFFFE)
        goto LABEL_30;
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  v37 = v36 + v35;
  if (v37 >= 0xFFFFFFFF00000001)
    v37 += 0xFFFFFFFFLL;
  v38 = v31 - v37;
  if (v31 >= v37)
    goto LABEL_30;
LABEL_27:
  v26 = v37 <= 0xFFFFFFFF00000001;
  v39 = 0xFFFFFFFF00000001 - v37;
  if (!v26)
    goto LABEL_37;
  v38 = v31 + v39;
  if (__CFADD__(v31, v39))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_30:
  *v41 = v38;
}

uint64_t specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(unint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = a3 - a4;
  if (a3 < a4)
  {
    v11 = 0xFFFFFFFF00000001 - a4;
    if (a4 > 0xFFFFFFFF00000001)
    {
      __break(1u);
    }
    else
    {
      result = a3 + v11;
      if (!__CFADD__(a3, v11))
        goto LABEL_4;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_4:
  v12 = specialized FieldElement.integerValue.getter(result);
  *a1 = v12;
  result = a5 - a3;
  if (a5 >= a3)
    goto LABEL_7;
  v13 = 0xFFFFFFFF00000001 - a3;
  if (a3 > 0xFFFFFFFF00000001)
    goto LABEL_13;
  result = a5 + v13;
  if (__CFADD__(a5, v13))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_7:
  *a2 = specialized FieldElement.integerValue.getter(result);
  result = a5 - a4;
  if (a5 >= a4)
    return specialized FieldElement.integerValue.getter(result) >= v12;
  v14 = 0xFFFFFFFF00000001 - a4;
  if (a4 > 0xFFFFFFFF00000001)
    goto LABEL_15;
  result = a5 + v14;
  if (!__CFADD__(a5, v14))
    return specialized FieldElement.integerValue.getter(result) >= v12;
LABEL_16:
  __break(1u);
  return result;
}

void specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X4>, unint64_t *a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = (a3 >> 1) - a2;
  if (a3 >> 1 == a2)
  {
    v5 = 0;
LABEL_32:
    *a4 = v5;
  }
  else
  {
    if ((uint64_t)(a3 >> 1) > a2)
    {
      v16 = a4;
      swift_unknownObjectRetain();
      v5 = 0;
      v8 = (unint64_t *)(a1 + 8 * a2);
      while (1)
      {
        v10 = *v8++;
        v9 = v10;
        v11 = specialized WraparoundJointRandomness.next()();
        if (!v11[2])
          break;
        v12 = v11[4];
        swift_bridgeObjectRelease();
        if (v12 > 0xFFFFFFFF00000000)
          goto LABEL_34;
        if (v12)
        {
          if (one-time initialization token for one != -1)
            swift_once();
          if ((unint64_t)static Field64.one > 0xFFFFFFFF00000000)
            goto LABEL_35;
          if (static Field64.one == v12)
          {
            if (v9)
            {
              v13 = 0xFFFFFFFF00000001 - v9;
              if (v9 > 0xFFFFFFFF00000001)
                goto LABEL_37;
              if (v5 >= v13)
              {
                v5 -= v13;
              }
              else
              {
                if (v13 > 0xFFFFFFFF00000001)
                  goto LABEL_40;
                v14 = __CFADD__(v5, v9);
                v5 += v9;
                if (v14)
                  goto LABEL_41;
              }
            }
          }
          else
          {
            if (one-time initialization token for negativeOne != -1)
              swift_once();
            if ((unint64_t)static Field64.negativeOne > 0xFFFFFFFF00000000)
              goto LABEL_36;
            if (static Field64.negativeOne != v12)
              goto LABEL_43;
            if (v5 >= v9)
            {
              v5 -= v9;
            }
            else
            {
              v15 = 0xFFFFFFFF00000001 - v9;
              if (v9 > 0xFFFFFFFF00000001)
                goto LABEL_38;
              v14 = __CFADD__(v5, v15);
              v5 += v15;
              if (v14)
                goto LABEL_39;
            }
          }
        }
        if (!--v4)
        {
          swift_unknownObjectRelease();
          a4 = v16;
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
    }
    __break(1u);
LABEL_43:
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t specialized SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[7];
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)v5;
  if (v7 != *(_QWORD *)v5)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v55 = 0xD00000000000001BLL;
    *((_QWORD *)&v55 + 1) = 0x8000000249C307C0;
    v59 = v7;
LABEL_12:
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 540877088;
    v25._object = (void *)0xE400000000000000;
    String.append(_:)(v25);
    v59 = v8;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
LABEL_13:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)v27 = v55;
    *(_BYTE *)(v27 + 16) = 2;
    return swift_willThrow();
  }
  v9 = v5;
  v11 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v5 + 16);
  if (v11 != v8)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v55 = 0xD000000000000019;
    *((_QWORD *)&v55 + 1) = 0x8000000249C31120;
    v59 = v11;
    goto LABEL_12;
  }
  v52 = v6;
  v53 = v11;
  v50 = a4;
  v51 = a5;
  v14 = *(_QWORD *)(a4 + 16);
  v15 = *(_OWORD *)(v5 + 80);
  v57 = *(_OWORD *)(v5 + 64);
  v58 = v15;
  v56 = *(_OWORD *)(v5 + 48);
  v16 = *((_QWORD *)&v56 + 1);
  v54 = v56;
  v17 = v15;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v14 != 1)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v55 = 0x2064696C61766E49;
    *((_QWORD *)&v55 + 1) = 0xEF203A746E756F63;
    v59 = v14;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 540877088;
    v29._object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_249C29130;
    v31 = specialized Gadget.wirePolynomialLength.getter();
    v32 = specialized Gadget.gadgetPolynomialLength.getter();
    *(_QWORD *)(v30 + 32) = v54;
    *(_QWORD *)(v30 + 40) = v16;
    *(_QWORD *)(v30 + 48) = v17;
    *(_QWORD *)(v30 + 56) = v31;
    *(_QWORD *)(v30 + 64) = v32;
    v33._countAndFlagsBits = MEMORY[0x24BD00394](v30, &type metadata for GadgetParameters);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_47;
  specialized FieldElement.init(_:)(a3, &v59);
  v18 = v59;
  if (!v59)
    goto LABEL_49;
  v19 = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v55);
  if (v55 == 0)
  {
    v21 = 0xFFFFFFFFLL;
LABEL_8:
    *(_QWORD *)&v55 = v21;
    if (!v53)
      goto LABEL_48;
    v59 = *(_QWORD *)(a2 + 32);
    v22 = *(_QWORD *)(v50 + 32);
    MEMORY[0x24BDAC7A8](v19, v20);
    v49[2] = &v59;
    v49[3] = &v55;
    v49[4] = a2;
    v49[5] = v9;
    swift_bridgeObjectRetain();
    outlined copy of GadgetEvaluation<Field64>(v22);
    specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a1 + 32, 0, (2 * v7) | 1, v22, (unint64_t *)partial apply for specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:), (uint64_t)v49, v51);
    outlined consume of GadgetEvaluation<A><A, B>(v22);
    return swift_bridgeObjectRelease();
  }
  v34 = 0xFFFFFFFEFFFFFFFFLL;
  v21 = 0xFFFFFFFFLL;
  while (1)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v34 & 1, &v55);
    v36 = *((_QWORD *)&v55 + 1) | v55;
    if (v55 == 0)
      goto LABEL_38;
    v37 = (v18 * (unsigned __int128)(unint64_t)v21) >> 64;
    v38 = (0xFFFFFFFEFFFFFFFFLL * v18 * v21 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v39 = __CFADD__(-(uint64_t)(v18 * v21), v18 * v21);
    v40 = __CFADD__(v38, v37);
    v41 = v38 + v37;
    if (v40)
    {
      v42 = v41 + v39;
    }
    else
    {
      if (v41 != -1)
      {
        v36 = 0;
        v43 = v41 + v39;
        if (v43 >= 0xFFFFFFFF00000001)
          v21 = v43 + 0xFFFFFFFF;
        else
          v21 = v43;
        goto LABEL_38;
      }
      v42 = 0;
      if (!v39)
      {
        v36 = 0;
        v21 = 4294967294;
        goto LABEL_38;
      }
    }
    v21 = v42 + 0xFFFFFFFF;
    if (v42 >= 0xFFFFFFFF00000001)
      goto LABEL_46;
    v36 = 0;
LABEL_38:
    v44 = (__PAIR128__(v36, v18) * __PAIR128__(v36, v18)) >> 64;
    v45 = (0xFFFFFFFEFFFFFFFFLL * v18 * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v46 = __CFADD__(-(uint64_t)(v18 * v18), v18 * v18);
    v40 = __CFADD__(v45, v44);
    v47 = v45 + v44;
    if (!v40)
    {
      if (v47 == -1)
      {
        if (v46)
          v18 = 0xFFFFFFFFLL;
        else
          v18 = 4294967294;
      }
      else
      {
        v35 = v47 + v46;
        if (v35 >= 0xFFFFFFFF00000001)
          v18 = v35 + 0xFFFFFFFF;
        else
          v18 = v35;
      }
      goto LABEL_20;
    }
    v48 = v47 + v46;
    v18 = v48 + 0xFFFFFFFF;
    if (v48 >= 0xFFFFFFFF00000001)
      break;
LABEL_20:
    v34 >>= 1;
    v19 = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v34, &v55);
    if (v55 == 0)
      goto LABEL_8;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PINE<>.shardAndEncode(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t i;
  __int128 v29;
  __int128 v30;
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[10];
  uint64_t v53;
  _BYTE v54[16];
  _BYTE v55[16];
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v14 = *(_OWORD *)(v6 + 144);
  v52[8] = *(_OWORD *)(v6 + 128);
  v52[9] = v14;
  v53 = *(_QWORD *)(v6 + 160);
  v15 = *(_OWORD *)(v6 + 80);
  v52[4] = *(_OWORD *)(v6 + 64);
  v52[5] = v15;
  v16 = *(_OWORD *)(v6 + 112);
  v52[6] = *(_OWORD *)(v6 + 96);
  v52[7] = v16;
  v17 = *(_OWORD *)(v6 + 16);
  v52[0] = *(_OWORD *)v6;
  v52[1] = v17;
  v18 = *(_OWORD *)(v6 + 48);
  v52[2] = *(_OWORD *)(v6 + 32);
  v52[3] = v18;
  outlined copy of Data._Representation(a3, a4);
  specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  v20 = v19;
  outlined consume of Data._Representation(a3, a4);
  v21 = v52;
  v22 = specialized PINE.shard<A>(_:nonce:seedBytes:)((uint64_t)&v48, a1, a2, v20, a5, a6);
  swift_release();
  if (v7)
    return (uint64_t)v21;
  v24 = *((_QWORD *)&v48 + 1);
  v23 = v48;
  v25 = specialized PINEPublicShare.encodedLength.getter(v48, *((uint64_t *)&v48 + 1));
  *(_QWORD *)&v48 = specialized Data.init(capacity:)(v25);
  *((_QWORD *)&v48 + 1) = v26;
  specialized PINEPublicShare.encode<A>(into:)((uint64_t)&v48, v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = (_OWORD *)v48;
  v27 = *(_QWORD *)(v22 + 16);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)v21;
  }
  v60 = v48;
  v47 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
  for (i = 32; ; i += 48)
  {
    v29 = *(_OWORD *)(v22 + i);
    v30 = *(_OWORD *)(v22 + i + 32);
    v50 = *(_OWORD *)(v22 + i + 16);
    v51 = v30;
    v49 = v29;
    outlined init with take of Share<Field64>((uint64_t)&v49, (uint64_t)v55);
    result = outlined init with take of Share<Field64>((uint64_t)v55, (uint64_t)&v56);
    v32 = *(_QWORD *)(v56 + 16);
    if ((v57 & 1) == 0 && v32)
    {
      if (v32 >> 60)
        goto LABEL_31;
      v32 *= 8;
    }
    outlined init with take of Share<Field64>((uint64_t)&v50, (uint64_t)v54);
    result = outlined init with take of Share<Field64>((uint64_t)v54, (uint64_t)&v58);
    v33 = *(_QWORD *)(v58 + 16);
    if ((v59 & 1) == 0 && v33)
    {
      if (v33 >> 60)
        goto LABEL_32;
      v33 *= 8;
    }
    v34 = __OFADD__(v32, v33);
    v35 = v32 + v33;
    if (v34)
      break;
    v36 = *(_QWORD *)(v51 + 16);
    v34 = __OFADD__(v35, v36);
    v37 = v35 + v36;
    if (v34)
      goto LABEL_29;
    v38 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 16);
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      goto LABEL_30;
    if (v39)
    {
      if (v39 <= 14)
      {
        outlined retain of PINEInputShare<Field64, XofHmacSha256Aes128>((uint64_t)&v49);
        v41 = 0;
        v42 = 0;
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        outlined retain of PINEInputShare<Field64, XofHmacSha256Aes128>((uint64_t)&v49);
        v40 = __DataStorage.init(capacity:)();
        if ((unint64_t)v39 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          v41 = swift_allocObject();
          v42 = v40 | 0x8000000000000000;
          *(_QWORD *)(v41 + 16) = 0;
          *(_QWORD *)(v41 + 24) = 0;
        }
        else
        {
          v41 = 0;
          v42 = v40 | 0x4000000000000000;
        }
      }
    }
    else
    {
      outlined retain of PINEInputShare<Field64, XofHmacSha256Aes128>((uint64_t)&v49);
      v41 = 0;
      v42 = 0xC000000000000000;
    }
    *(_QWORD *)&v48 = v41;
    *((_QWORD *)&v48 + 1) = v42;
    specialized PINEInputShare.encode<A>(into:)((uint64_t)&v48);
    outlined release of PINEInputShare<Field64, XofHmacSha256Aes128>((uint64_t)&v49);
    v43 = v48;
    v45 = *(_QWORD *)(v47 + 16);
    v44 = *(_QWORD *)(v47 + 24);
    if (v45 >= v44 >> 1)
    {
      v46 = v48;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1);
      v43 = v46;
    }
    *(_QWORD *)(v47 + 16) = v45 + 1;
    *(_OWORD *)(v47 + 16 * v45 + 32) = v43;
    if (!--v27)
    {
      swift_bridgeObjectRelease();
      return v60;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t PINE<>.shardAndEncodeIntoBytes(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  int64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _OWORD v66[10];
  uint64_t v67;
  unint64_t v68;

  v14 = *(_OWORD *)(v6 + 128);
  v15 = *(_OWORD *)(v6 + 144);
  v16 = *(_OWORD *)(v6 + 96);
  v66[7] = *(_OWORD *)(v6 + 112);
  v66[8] = v14;
  v66[9] = v15;
  v67 = *(_QWORD *)(v6 + 160);
  v17 = *(_OWORD *)(v6 + 80);
  v66[4] = *(_OWORD *)(v6 + 64);
  v66[5] = v17;
  v66[6] = v16;
  v18 = *(_OWORD *)(v6 + 16);
  v66[0] = *(_OWORD *)v6;
  v66[1] = v18;
  v19 = *(_OWORD *)(v6 + 48);
  v66[2] = *(_OWORD *)(v6 + 32);
  v66[3] = v19;
  outlined copy of Data._Representation(a3, a4);
  specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  v21 = v20;
  outlined consume of Data._Representation(a3, a4);
  v22 = (char *)v66;
  v23 = specialized PINE.shard<A>(_:nonce:seedBytes:)((uint64_t)&v64, a1, a2, v21, a5, a6);
  swift_release();
  if (v7)
    return (uint64_t)v22;
  v24 = v64;
  v25 = v65;
  v26 = specialized PINEPublicShare.encodedLength.getter((uint64_t)v64, v65);
  v27 = (char *)MEMORY[0x24BEE4AF8];
  v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0, MEMORY[0x24BEE4AF8]);
  specialized PINEPublicShare.encode<A>(into:)((char *)&v64, (uint64_t)v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v64;
  v28 = *(_QWORD *)(v23 + 16);
  if (!v28)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)v22;
  }
  v61 = v64;
  v64 = v27;
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
  v30 = 0;
  v31 = v64;
  v68 = v23 + 32;
  v62 = v28;
  while (1)
  {
    v32 = v68 + 48 * v30;
    v33 = *(_QWORD *)v32;
    v34 = *(_BYTE *)(v32 + 8);
    v35 = *(_QWORD *)(v32 + 16);
    v36 = *(_BYTE *)(v32 + 24);
    v38 = *(_QWORD *)(v32 + 32);
    v37 = *(_QWORD *)(v32 + 40);
    v39 = *(_QWORD *)(*(_QWORD *)v32 + 16);
    if ((v34 & 1) == 0 && v39)
    {
      if (v39 >> 60)
        goto LABEL_36;
      v39 *= 8;
    }
    v40 = *(_QWORD *)(v35 + 16);
    if ((v36 & 1) == 0 && v40)
    {
      if (v40 >> 60)
        goto LABEL_37;
      v40 *= 8;
    }
    v41 = __OFADD__(v39, v40);
    v42 = v39 + v40;
    if (v41)
      break;
    v43 = *(_QWORD *)(v38 + 16);
    v41 = __OFADD__(v42, v43);
    v44 = v42 + v43;
    if (v41)
      goto LABEL_34;
    v45 = *(_QWORD *)(v37 + 16);
    v41 = __OFADD__(v44, v45);
    v46 = v44 + v45;
    if (v41)
      goto LABEL_35;
    v47 = v46 & ~(v46 >> 63);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47, 0, MEMORY[0x24BEE4AF8]);
    if ((v34 & 1) != 0)
    {
      v48 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v48);
    }
    else
    {
      v49 = *(_QWORD *)(v33 + 16);
      if (v49)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v49; ++i)
        {
          v51 = *(_QWORD *)(v33 + 8 * i + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v63, v51);
        }
        swift_bridgeObjectRelease();
      }
    }
    if ((v36 & 1) != 0)
    {
      v52 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v52);
    }
    else
    {
      v53 = *(_QWORD *)(v35 + 16);
      if (v53)
      {
        swift_bridgeObjectRetain();
        for (j = 0; j != v53; ++j)
        {
          v55 = *(_QWORD *)(v35 + 8 * j + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v63, v55);
        }
        swift_bridgeObjectRelease();
      }
    }
    v56 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v56);
    v57 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v57);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease_n();
    v58 = v63;
    v64 = v31;
    v60 = *((_QWORD *)v31 + 2);
    v59 = *((_QWORD *)v31 + 3);
    if (v60 >= v59 >> 1)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1);
      v31 = v64;
    }
    ++v30;
    *((_QWORD *)v31 + 2) = v60 + 1;
    *(_QWORD *)&v31[8 * v60 + 32] = v58;
    if (v30 == v62)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v61;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t PINE<>.prepareInitAndEncodeIntoBytes(verifyKey:aggregatorID:nonce:encodedPublicShare:encodedInputShare:)(uint64_t a1, unint64_t a2, int64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, size_t a8, unint64_t a9)
{
  __int128 *v9;
  uint64_t v10;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t result;
  int64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _OWORD v51[3];
  uint64_t v52[2];
  char *v53[3];
  _QWORD v54[3];
  _OWORD v55[3];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[32];
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  size_t v77;

  v77 = a8;
  v18 = v9[9];
  *(_OWORD *)v64 = v9[8];
  *(_OWORD *)&v64[16] = v18;
  v65 = *((_QWORD *)v9 + 20);
  v19 = v9[5];
  v60 = v9[4];
  v61 = v19;
  v20 = v9[7];
  v62 = v9[6];
  v63 = v20;
  v21 = v9[1];
  v56 = *v9;
  v57 = v21;
  v22 = v9[3];
  v58 = v9[2];
  v59 = v22;
  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v24 = v23;
  outlined consume of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a4, a5);
  specialized _copyCollectionToContiguousArray<A>(_:)(a4, a5);
  v26 = v25;
  outlined consume of Data._Representation(a4, a5);
  v27 = v56;
  result = specialized PINEPublicShare.init<A>(from:parameter:)(a6, a7, v56, 0, v52);
  if (v10)
  {
    swift_release();
LABEL_12:
    swift_release();
    return a3;
  }
  v29 = a3;
  v30 = v77;
  if (v27 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v31 = v52[0];
  v32 = v52[1];
  if (v29 < 0 || v27 <= v29)
  {
    a3 = v24;
    v35 = dispatch thunk of CustomStringConvertible.description.getter();
    v37 = v36;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v38 = v35;
    *(_QWORD *)(v38 + 8) = v37;
    *(_BYTE *)(v38 + 16) = 0;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (!v29)
  {
    v70 = v60;
    v71 = v61;
    v72 = v62;
    v73 = v63;
    v67 = v57;
    v68 = v58;
    v69 = v59;
    v76 = *(_QWORD *)&v64[24];
    v75 = *(_OWORD *)&v64[8];
    v66 = *((_QWORD *)&v56 + 1);
    v74 = *(_QWORD *)v64;
    v34 = *((_QWORD *)&v56 + 1) - *(_QWORD *)v64;
    if (!__OFSUB__(*((_QWORD *)&v56 + 1), *(_QWORD *)v64))
    {
      result = specialized FullyLinearProof.proofLength.getter();
      v33 = result * v65;
      if ((unsigned __int128)(result * (__int128)v65) >> 64 == (result * v65) >> 63)
        goto LABEL_11;
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v33 = 32;
  v34 = 32;
LABEL_11:
  specialized PINEInputShare.init<A>(from:parameter:)(v30, a9, v34, v29 != 0, v33, v29 != 0, (uint64_t)v51);
  v55[0] = v51[0];
  v55[1] = v51[1];
  v55[2] = v51[2];
  specialized PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)((uint64_t)v54, v53, v24, v29, v26, v31, v32, (uint64_t)v55);
  swift_release();
  swift_release();
  outlined release of PINEInputShare<Field64, XofHmacSha256Aes128>((uint64_t)v55);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v39 = v54[0];
  v40 = *(_QWORD *)(v54[0] + 16);
  if (v40 >> 60)
    goto LABEL_21;
  v41 = *(_QWORD *)(v54[1] + 16);
  v42 = __OFADD__(v41, 8 * v40);
  v43 = v41 + 8 * v40;
  if (v42)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v44 = *(_QWORD *)(v54[2] + 16);
  v42 = __OFADD__(v43, v44);
  v45 = v43 + v44;
  if (!v42)
  {
    v46 = v53[0];
    v47 = v53[1];
    v48 = v53[2];
    v49 = (char *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v51[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 & ~(v45 >> 63), 0, MEMORY[0x24BEE4AF8]);
    specialized PINEPrepareState.encode<A>(into:)((uint64_t *)v51, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = *(_QWORD *)&v51[0];
    v50 = specialized PINEPrepareShare.encodedLength.getter((uint64_t)v46, (uint64_t)v47, (uint64_t)v48);
    *(_QWORD *)&v51[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 & ~(v50 >> 63), 0, v49);
    specialized PINEPrepareState.encode<A>(into:)((uint64_t *)v51, (uint64_t)v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a3;
  }
LABEL_23:
  __break(1u);
  return result;
}

void PINE<>.encodedPrepareMessageFrom(_:)(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = v1[8];
  v4 = v1[9];
  v5 = v1[6];
  v30 = v1[7];
  v31 = v3;
  v32 = v4;
  v7 = v1[4];
  v6 = v1[5];
  v33 = *((_QWORD *)v1 + 20);
  v28 = v6;
  v29 = v5;
  v8 = v1[1];
  v23 = *v1;
  v24 = v8;
  v9 = v1[2];
  v26 = v1[3];
  v27 = v7;
  v25 = v9;
  specialized PINE.prepareMessageFrom(_:parameter:)(a1, &v17);
  if (!v2)
  {
    v11 = v17;
    v10 = v18;
    v12 = *(_QWORD *)(v17 + 16);
    v13 = *(_QWORD *)(v18 + 16);
    if (__OFADD__(v12, v13))
    {
      __break(1u);
    }
    else
    {
      v21 = specialized Data.init(capacity:)(v12 + v13);
      v22 = v14;
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v19 = v15;
      v16 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
      v20 = v16;
      v17 = v11;
      __swift_project_boxed_opaque_existential_1(&v17, v15);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      swift_bridgeObjectRelease();
      v19 = v15;
      v20 = v16;
      v17 = v10;
      __swift_project_boxed_opaque_existential_1(&v17, v15);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t PINE<>.prepareNextAndEncodeIntoBytes(aggregatorID:encodedState:encodedMessage:)(unint64_t a1, size_t a2, unint64_t a3, size_t a4, unint64_t a5)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v9 = v5[9];
  v44 = v5[8];
  v45 = v9;
  v46 = *((_QWORD *)v5 + 20);
  v10 = v5[5];
  v40 = v5[4];
  v41 = v10;
  v11 = v5[7];
  v42 = v5[6];
  v43 = v11;
  v12 = v5[1];
  v36 = *v5;
  v37 = v12;
  v13 = v5[3];
  v38 = v5[2];
  v39 = v13;
  result = specialized PINEPrepareState.init<A>(from:parameter:)(a2, a3, a1, 64, v42, 0, (uint64_t)&v28);
  if (!v6)
  {
    v15 = v28;
    v16 = v29;
    v17 = v30;
    specialized PINEPrepareMessage.init<A>(from:parameter:)(a4, a5, &v28);
    specialized PINE.prepareNext(state:message:)(v15, v16, v17, v28, v29, (uint64_t)&v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = v28;
    v19 = v29;
    v20 = v30;
    v21 = v31;
    v22 = v32;
    v23 = v33;
    v24 = v34;
    if (v35 == 1)
    {
      v25 = swift_bridgeObjectRetain();
      v26 = specialized VDAFEncodable.encodedBytes.getter(v25);
      outlined consume of PrepareTransition<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v18, v19, v20, v21, v22, v23, v24, 1);
      outlined consume of PrepareTransition<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v18, v19, v20, v21, v22, v23, v24, 1);
      return v26;
    }
    else
    {
      outlined consume of PrepareTransition<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v28, v29, v30, v31, v32, v33, v34, 0);
      lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
      swift_allocError();
      *(_QWORD *)v27 = 0xD000000000000018;
      *(_QWORD *)(v27 + 8) = 0x8000000249C306B0;
      *(_BYTE *)(v27 + 16) = 2;
      return swift_willThrow();
    }
  }
  return result;
}

size_t PINE<>.outputShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

uint64_t PINE<>.encodedAggregateShare(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized VDAFEncodable.encodedBytes.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

size_t PINE<>.aggregateShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

uint64_t PINE<>.unshard(_:numOfMeasurements:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(a1, a3);
}

uint64_t specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD **v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v46;

  v17 = a10;
  *(_QWORD *)(v10 + 48) = 0;
  v42 = *(_QWORD *)(a10 + 24);
  v18 = specialized FixedWidthInteger.nextPowerOfTwo.getter(*(_QWORD *)(a10 + 32));
  v19 = *(_OWORD *)(a10 + 16);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)a10;
  *(_OWORD *)(v10 + 72) = v19;
  *(_QWORD *)(v10 + 88) = *(_QWORD *)(a10 + 32);
  v20 = *(_QWORD *)(a10 + 16);
  v21 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v21 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v11 = v18;
  v43 = a1;
  v44 = a4;
  if (v20 == -1)
  {
    v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v22 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v22[2] = v21;
    bzero(v22 + 4, 8 * v20 + 8);
  }
  v23 = specialized Array.init(repeating:count:)(v22, *(_QWORD *)a10);
  *(_QWORD *)(v10 + 16) = v23;
  v24 = (_QWORD **)(v10 + 16);
  v21 = v23[2];
  if (v21)
  {
    v25 = a8 >> 1;
    swift_beginAccess();
    v20 = 0;
    if (a7 <= v25)
      v26 = v25;
    else
      v26 = a7;
    v17 = v26 - a7;
    v27 = a6 + 8 * a7;
    while (v17 != v20)
    {
      v28 = *(_QWORD *)(v27 + 8 * v20);
      v29 = *v24;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v24 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        *v24 = v29;
      }
      if (v20 >= v29[2])
        goto LABEL_41;
      v31 = &v29[v20];
      v32 = (char *)v31[4];
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v31[4] = v32;
      if ((v33 & 1) != 0)
      {
        if (!*((_QWORD *)v32 + 2))
          goto LABEL_20;
      }
      else
      {
        v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
        v31[4] = v32;
        if (!*((_QWORD *)v32 + 2))
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      ++v20;
      *((_QWORD *)v32 + 4) = v28;
      if (v21 == v20)
        goto LABEL_21;
    }
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_21:
  v17 = v44;
  if ((v44 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    v20 = v43;
    swift_unknownObjectRetain_n();
    v35 = swift_dynamicCastClass();
    v21 = a3;
    if (!v35)
    {
      swift_unknownObjectRelease();
      v35 = MEMORY[0x24BEE4AF8];
    }
    v36 = *(_QWORD *)(v35 + 16);
    swift_release();
    if (__OFSUB__(v44 >> 1, a3))
      goto LABEL_47;
    if (v36 != (v44 >> 1) - a3)
      goto LABEL_48;
    v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_30;
  }
  v20 = v43;
  swift_unknownObjectRetain();
  v21 = a3;
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v20, a2, v21, v17);
    v17 = v34;
LABEL_30:
    swift_unknownObjectRelease();
    if (!*(_QWORD *)(v17 + 16))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((v11 & 0x8000000000000000) == 0)
      break;
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    swift_unknownObjectRelease();
  }
  if (v11)
  {
    v37 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v37 + 16) = v11;
    bzero((void *)(v37 + 32), 8 * v11);
  }
  else
  {
    v37 = MEMORY[0x24BEE4AF8];
  }
  v46 = v37;
  v38 = swift_bridgeObjectRetain();
  specialized discreteFourierTransform<A, B, C>(input:size:output:)(v38, v11, (uint64_t)&v46);
  swift_unknownObjectRelease();
  swift_release();
  *(_QWORD *)(v10 + 24) = v46;
  swift_unknownObjectRelease();
  if (!v42)
    goto LABEL_46;
  *(_QWORD *)(v10 + 40) = v11 / v42;
  if ((specialized Polynomial.degree.getter(v17) & 0x8000000000000000) != 0)
  {
    swift_release();
    v39 = 0;
  }
  else
  {
    specialized evaluateUsingHorner<A, B>(_:atInput:)(v17, a9, &v46);
    swift_release();
    v39 = v46;
  }
  *(_QWORD *)(v10 + 32) = v39;
  return v10;
}

uint64_t specialized QueryGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v5 = v2 + 6;
  result = swift_beginAccess();
  v7 = v2[6];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *v5 = v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v22 = a2;
    v11 = v2 + 2;
    v12 = a1 + 32;
    swift_beginAccess();
    v13 = 0;
    while (1)
    {
      v14 = *v5;
      v15 = *(_QWORD *)(v12 + 8 * v13);
      v16 = (_QWORD *)*v11;
      result = swift_isUniquelyReferenced_nonNull_native();
      *v11 = (uint64_t)v16;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        v16 = (_QWORD *)result;
        *v11 = result;
      }
      if (v13 >= v16[2])
        break;
      v17 = &v16[v13];
      v18 = v17[4];
      result = swift_isUniquelyReferenced_nonNull_native();
      v17[4] = v18;
      if ((result & 1) != 0)
      {
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_13;
      }
      else
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        v18 = result;
        v17[4] = result;
        if ((v14 & 0x8000000000000000) != 0)
        {
LABEL_13:
          __break(1u);
LABEL_14:
          v9 = *v5;
          a2 = v22;
          goto LABEL_15;
        }
      }
      if (v14 >= *(_QWORD *)(v18 + 16))
        goto LABEL_20;
      ++v13;
      *(_QWORD *)(v18 + 8 * v14 + 32) = v15;
      if (v10 == v13)
        goto LABEL_14;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  v19 = v2[5];
  v20 = v9 * v19;
  if ((unsigned __int128)((uint64_t)v9 * (__int128)v19) >> 64 != (uint64_t)(v9 * v19) >> 63)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_beginAccess();
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v21 = v2[3];
  if (v20 < *(_QWORD *)(v21 + 16))
  {
    *a2 = *(_QWORD *)(v21 + 8 * v20 + 32);
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized PINEPublicShare.encodedLength.getter(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)(result + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v5 = result;
    v25 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v6 = 0;
    v4 = v25;
    v7 = *(_QWORD *)(v25 + 16);
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v6 + 32) + 16);
      v9 = *(_QWORD *)(v25 + 24);
      if (v7 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v7 + 1, 1);
      ++v6;
      *(_QWORD *)(v25 + 16) = v7 + 1;
      *(_QWORD *)(v25 + 8 * v7++ + 32) = v8;
    }
    while (v3 != v6);
    result = swift_bridgeObjectRelease();
  }
  v10 = *(_QWORD *)(v4 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = (uint64_t *)(v4 + 32);
    while (1)
    {
      v13 = *v12++;
      v14 = __OFADD__(v11, v13);
      v11 += v13;
      if (v14)
        break;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_28;
  }
  v11 = 0;
LABEL_13:
  result = swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 16);
  v16 = MEMORY[0x24BEE4AF8];
  if (v15)
  {
    v26 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    v17 = 0;
    v16 = v26;
    v18 = *(_QWORD *)(v26 + 16);
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 8 * v17 + 32) + 16);
      v20 = *(_QWORD *)(v26 + 24);
      if (v18 >= v20 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v18 + 1, 1);
      ++v17;
      *(_QWORD *)(v26 + 16) = v18 + 1;
      *(_QWORD *)(v26 + 8 * v18++ + 32) = v19;
    }
    while (v15 != v17);
    result = swift_bridgeObjectRelease();
  }
  v21 = *(_QWORD *)(v16 + 16);
  if (v21)
  {
    v22 = 0;
    v23 = (uint64_t *)(v16 + 32);
    while (1)
    {
      v24 = *v23++;
      v14 = __OFADD__(v22, v24);
      v22 += v24;
      if (v14)
        break;
      if (!--v21)
        goto LABEL_25;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  v22 = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  result = v11 + v22;
  if (__OFADD__(v11, v22))
    goto LABEL_29;
  return result;
}

void specialized PINEPublicShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a2 + 8 * v7++ + 32);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v15 = v6;
      v13[0] = v8;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
    while (v4 != v7);
    swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
    swift_bridgeObjectRetain();
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a3 + 8 * v11++ + 32);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v15 = v10;
      v13[0] = v12;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
    while (v9 != v11);
    swift_bridgeObjectRelease();
  }
}

char *specialized PINEPublicShare.encode<A>(into:)(char *result, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = result;
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
  {
LABEL_19:
    v18 = *(_QWORD *)(a3 + 16);
    if (!v18)
      return result;
    result = (char *)swift_bridgeObjectRetain();
    v19 = 0;
    v20 = *(char **)v4;
    while (1)
    {
      v21 = *(_QWORD *)(a3 + 8 * v19 + 32);
      v22 = *(_QWORD *)(v21 + 16);
      v23 = *((_QWORD *)v20 + 2);
      v24 = v23 + v22;
      if (__OFADD__(v23, v22))
        goto LABEL_40;
      swift_bridgeObjectRetain();
      result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v24 <= *((_QWORD *)v20 + 3) >> 1)
      {
        if (*(_QWORD *)(v21 + 16))
          goto LABEL_32;
      }
      else
      {
        if (v23 <= v24)
          v25 = v23 + v22;
        else
          v25 = v23;
        result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v25, 1, v20);
        v20 = result;
        if (*(_QWORD *)(v21 + 16))
        {
LABEL_32:
          v26 = *((_QWORD *)v20 + 2);
          if ((*((_QWORD *)v20 + 3) >> 1) - v26 < v22)
            goto LABEL_43;
          result = (char *)memcpy(&v20[v26 + 32], (const void *)(v21 + 32), v22);
          if (v22)
          {
            v27 = *((_QWORD *)v20 + 2);
            v16 = __OFADD__(v27, v22);
            v28 = v27 + v22;
            if (v16)
              goto LABEL_45;
            *((_QWORD *)v20 + 2) = v28;
          }
          goto LABEL_22;
        }
      }
      if (v22)
        goto LABEL_41;
LABEL_22:
      ++v19;
      result = (char *)swift_bridgeObjectRelease();
      if (v18 == v19)
      {
        result = (char *)swift_bridgeObjectRelease();
        *(_QWORD *)v4 = v20;
        return result;
      }
    }
  }
  result = (char *)swift_bridgeObjectRetain();
  v7 = 0;
  v8 = *(char **)v4;
  while (1)
  {
    v9 = *(_QWORD *)(a2 + 8 * v7 + 32);
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *((_QWORD *)v8 + 2);
    v12 = v11 + v10;
    if (__OFADD__(v11, v10))
      break;
    swift_bridgeObjectRetain();
    result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v12 <= *((_QWORD *)v8 + 3) >> 1)
    {
      if (*(_QWORD *)(v9 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v11 <= v12)
        v13 = v11 + v10;
      else
        v13 = v11;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v8);
      v8 = result;
      if (*(_QWORD *)(v9 + 16))
      {
LABEL_14:
        v14 = *((_QWORD *)v8 + 2);
        if ((*((_QWORD *)v8 + 3) >> 1) - v14 < v10)
          goto LABEL_42;
        result = (char *)memcpy(&v8[v14 + 32], (const void *)(v9 + 32), v10);
        if (v10)
        {
          v15 = *((_QWORD *)v8 + 2);
          v16 = __OFADD__(v15, v10);
          v17 = v15 + v10;
          if (v16)
            goto LABEL_44;
          *((_QWORD *)v8 + 2) = v17;
        }
        goto LABEL_4;
      }
    }
    if (v10)
      goto LABEL_39;
LABEL_4:
    ++v7;
    result = (char *)swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      result = (char *)swift_bridgeObjectRelease();
      *(_QWORD *)v4 = v8;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t specialized PINEPrepareShare.encodedLength.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16);
  v4 = 8 * (v3 != 0);
  v5 = v4 * v3;
  if ((unsigned __int128)(v4 * (__int128)v3) >> 64 != (v4 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  if (v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a3 + 16);
  result = v8 + v9;
  if (__OFADD__(v8, v9))
LABEL_7:
    __break(1u);
  return result;
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, float a2)
{
  int v3;
  unint64_t v4;
  char v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (LODWORD(a2) >> 23);
  v4 = LODWORD(a2) & 0x7FFFFF;
  v5 = v3 | LOBYTE(a2);
  if (!(v3 | v4))
  {
    v7 = 0;
    result = 1;
    goto LABEL_23;
  }
  result = 0;
  v7 = 0;
  v5 = 1;
  if (v3 != 255 && a2 > -1.0)
  {
    v8 = Float.exponent.getter();
    if (v8 > 63)
    {
      v7 = 0;
      result = 0;
      v5 = 1;
      goto LABEL_23;
    }
    v9 = v8;
    v10 = Float.significandWidth.getter();
    v11 = v10 + __clz(__rbit32(v4));
    v12 = v9 - v11;
    if (__OFSUB__(v9, v11))
    {
      __break(1u);
    }
    else
    {
      if (v11 <= 63)
      {
        if (v12 < -64 || v12 > 64)
        {
LABEL_9:
          v13 = 0;
          v14 = 0;
          if ((v9 & 0x8000000000000000) == 0)
            goto LABEL_21;
          goto LABEL_22;
        }
        if (v12 < 0)
        {
          if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0)
            goto LABEL_9;
          v13 = v4 >> (v11 - v9);
        }
        else
        {
          if ((unint64_t)v12 >= 0x40)
            goto LABEL_9;
          v13 = v4 << v12;
        }
LABEL_19:
        if ((v9 & 0x8000000000000000) == 0)
        {
LABEL_21:
          v14 = 1 << v9;
          goto LABEL_22;
        }
        v14 = 0;
LABEL_22:
        v5 = 0;
        v7 = v13 | v14;
        result = v9 >= v10;
        goto LABEL_23;
      }
      if ((unint64_t)(v12 - 33) < 0xFFFFFFFFFFFFFFBFLL)
      {
LABEL_12:
        v13 = 0;
        goto LABEL_19;
      }
      if ((v12 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v12 < 0x20)
        {
          v13 = ((_DWORD)v4 << v12);
          goto LABEL_19;
        }
        goto LABEL_12;
      }
    }
    if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFE0)
    {
      v13 = v4 >> (v11 - v9);
      goto LABEL_19;
    }
    goto LABEL_12;
  }
LABEL_23:
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t specialized closure #1 in PINEPublicShare.init<A>(from:parameter:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[3];
  v6 = v5 >> 1;
  v7 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v1 = *a1;
  v2 = a1[1];
  v3 = v5 >> 1;
  if (v7 >= 0x20)
  {
    v3 = v4 + 32;
    if (__OFADD__(v4, 32))
      goto LABEL_30;
  }
  if (v3 < v4)
    goto LABEL_24;
  if (v6 < v4)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v6 < v3)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v3 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v7 < 0x20)
    goto LABEL_12;
  if (__OFADD__(v4, 32))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v6 < v4 + 32)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v6 = v4 + 32;
LABEL_12:
  if (v6 < v4)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  a1[2] = v6;
  if ((v5 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_15:
    specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2, v4, v5 & 1 | (2 * v3));
    v9 = v8;
    goto LABEL_22;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v11 = *(_QWORD *)(v10 + 16);
  swift_release();
  if (__OFSUB__(v3, v4))
    goto LABEL_32;
  if (v11 != v3 - v4)
  {
LABEL_33:
    swift_unknownObjectRelease();
    goto LABEL_15;
  }
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
LABEL_22:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t specialized closure #1 in PINE.splitSeedBytes<A>(_:)(uint64_t *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v5 = a1[2];
  v6 = a1[3];
  v7 = v6 >> 1;
  v8 = (v6 >> 1) - v5;
  if (__OFSUB__(v6 >> 1, v5))
  {
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v1 = (unint64_t *)a1;
  v2 = *a1;
  v3 = a1[1];
  v4 = v6 >> 1;
  if (v8 >= 0x20)
  {
    v4 = v5 + 32;
    if (__OFADD__(v5, 32))
      goto LABEL_114;
  }
  if ((uint64_t)v4 < v5)
    goto LABEL_87;
  if (v7 < v5)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v7 < (uint64_t)v4)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v8 < 0x20)
    goto LABEL_12;
  if (__OFADD__(v5, 32))
    goto LABEL_115;
  if (v7 < v5 + 32)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v7 = v5 + 32;
LABEL_12:
  if (v7 < v5)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  a1[2] = v7;
  if ((v6 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v10 = swift_dynamicCastClass();
    if (!v10)
    {
      swift_unknownObjectRelease();
      v10 = MEMORY[0x24BEE4AF8];
    }
    v11 = *(_QWORD *)(v10 + 16);
    swift_release();
    if (__OFSUB__(v4, v5))
      goto LABEL_116;
    if (v11 != v4 - v5)
      goto LABEL_117;
    v5 = swift_dynamicCastClass();
    if (!v5)
    {
      swift_unknownObjectRelease();
      v5 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_22;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    v6 = v6 & 1 | (2 * v4);
    specialized _copyCollectionToContiguousArray<A>(_:)(v2, v3, v5, v6);
    v5 = v9;
LABEL_22:
    swift_unknownObjectRelease();
    v2 = v1[2];
    v3 = v1[3];
    v12 = v3 >> 1;
    v13 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2))
    {
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    v6 = *v1;
    v14 = v1[1];
    v15 = v3 >> 1;
    if (v13 >= 0x20)
    {
      v15 = v2 + 32;
      if (__OFADD__(v2, 32))
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        swift_unknownObjectRelease();
LABEL_36:
        v3 = v3 & 1 | (2 * v15);
        specialized _copyCollectionToContiguousArray<A>(_:)(v6, v14, v2, v3);
        goto LABEL_43;
      }
    }
    if (v15 < v2)
      goto LABEL_94;
    if (v12 < v2)
      goto LABEL_95;
    if (v12 < v15)
      goto LABEL_96;
    if (v15 < 0)
      goto LABEL_97;
    if (v13 >= 0x20)
    {
      if (__OFADD__(v2, 32))
        goto LABEL_119;
      if (v12 < v2 + 32)
        goto LABEL_98;
      v12 = v2 + 32;
    }
    if (v12 < v2)
      goto LABEL_99;
    v1[2] = v12;
    if ((v3 & 1) == 0)
    {
      swift_unknownObjectRetain();
      goto LABEL_36;
    }
    v4 = type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v16 = swift_dynamicCastClass();
    if (!v16)
    {
      swift_unknownObjectRelease();
      v16 = MEMORY[0x24BEE4AF8];
    }
    v17 = *(_QWORD *)(v16 + 16);
    swift_release();
    if (__OFSUB__(v15, v2))
      goto LABEL_120;
    if (v17 != v15 - v2)
      goto LABEL_121;
    if (!swift_dynamicCastClass())
      swift_unknownObjectRelease();
LABEL_43:
    swift_unknownObjectRelease();
    v6 = v1[2];
    v18 = v1[3];
    v19 = v18 >> 1;
    v20 = (v18 >> 1) - v6;
    if (__OFSUB__(v18 >> 1, v6))
      goto LABEL_100;
    v3 = *v1;
    v21 = v1[1];
    v22 = v18 >> 1;
    if (v20 >= 0x20)
    {
      v22 = v6 + 32;
      if (__OFADD__(v6, 32))
      {
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        swift_unknownObjectRelease();
        v5 = v2;
        v21 = v34;
LABEL_57:
        specialized _copyCollectionToContiguousArray<A>(_:)(v3, v21, v6, v18 & 1 | (2 * v22));
        LOBYTE(v6) = v23;
        goto LABEL_64;
      }
    }
    if (v22 < (uint64_t)v6)
      goto LABEL_101;
    if (v19 < (uint64_t)v6)
      goto LABEL_102;
    if (v19 < v22)
      goto LABEL_103;
    if (v22 < 0)
      goto LABEL_104;
    if (v20 >= 0x20)
    {
      if (__OFADD__(v6, 32))
        goto LABEL_123;
      if (v19 < (uint64_t)(v6 + 32))
        goto LABEL_105;
      v19 = v6 + 32;
    }
    if (v19 < (uint64_t)v6)
      goto LABEL_106;
    v1[2] = v19;
    if ((v18 & 1) == 0)
    {
      swift_unknownObjectRetain();
      goto LABEL_57;
    }
    v34 = v21;
    v2 = v5;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v24 = swift_dynamicCastClass();
    if (!v24)
    {
      swift_unknownObjectRelease();
      v24 = MEMORY[0x24BEE4AF8];
    }
    v25 = *(_QWORD *)(v24 + 16);
    swift_release();
    if (__OFSUB__(v22, v6))
      goto LABEL_124;
    if (v25 != v22 - v6)
      goto LABEL_125;
    v6 = swift_dynamicCastClass();
    v5 = v2;
    if (!v6)
    {
      swift_unknownObjectRelease();
      LOBYTE(v6) = MEMORY[0x24BEE4AF8];
    }
LABEL_64:
    swift_unknownObjectRelease();
    v26 = v1[2];
    v4 = v1[3];
    v27 = v4 >> 1;
    v28 = (v4 >> 1) - v26;
    if (__OFSUB__(v4 >> 1, v26))
      goto LABEL_107;
    v3 = *v1;
    v29 = v1[1];
    v30 = v4 >> 1;
    if (v28 >= 0x20)
    {
      v30 = v26 + 32;
      if (__OFADD__(v26, 32))
      {
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        swift_unknownObjectRelease();
        v5 = v2;
        v29 = v34;
LABEL_78:
        specialized _copyCollectionToContiguousArray<A>(_:)(v3, v29, v26, v4 & 1 | (2 * v30));
        goto LABEL_85;
      }
    }
    if (v30 < v26)
      goto LABEL_108;
    if (v27 < v26)
      goto LABEL_109;
    if (v27 < v30)
      goto LABEL_110;
    if (v30 < 0)
      goto LABEL_111;
    if (v28 >= 0x20)
    {
      if (__OFADD__(v26, 32))
        goto LABEL_127;
      if (v27 < v26 + 32)
        goto LABEL_112;
      v27 = v26 + 32;
    }
    if (v27 >= v26)
      break;
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    swift_unknownObjectRelease();
  }
  v1[2] = v27;
  if ((v4 & 1) == 0)
  {
    swift_unknownObjectRetain();
    goto LABEL_78;
  }
  v34 = v29;
  v2 = v5;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v31 = swift_dynamicCastClass();
  if (!v31)
  {
    swift_unknownObjectRelease();
    v31 = MEMORY[0x24BEE4AF8];
  }
  v32 = *(_QWORD *)(v31 + 16);
  swift_release();
  if (__OFSUB__(v30, v26))
    goto LABEL_128;
  if (v32 != v30 - v26)
    goto LABEL_129;
  v5 = v2;
  if (!swift_dynamicCastClass())
    swift_unknownObjectRelease();
LABEL_85:
  swift_unknownObjectRelease();
  return v5;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64Vs5NeverOTg50146_s4VDAF11PINECircuitV21wraparoundDotProducts_6randomSayxGs10ArraySliceVyxG_AA25WraparoundJointRandomnessCyqd__xGtAA12VDAFProtocolRd__lFxSiXEfU_AA7E47V_SRySfGAA4PINEVyAopA19XofHmacSha256Aes128CGTG5s0pQ0VyAIGAG0tuV0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v20;
  uint64_t v21;

  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_21;
  v8 = v6;
  if (v7)
  {
    v21 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
LABEL_22:
      __break(1u);
      return;
    }
    v11 = v21;
    if (a2 <= a1)
      v12 = a1;
    else
      v12 = a2;
    v13 = a1;
    while (a2 != v13)
    {
      specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(a4, a5, a6, &v20);
      if (v8)
      {
        swift_release();
        return;
      }
      v8 = 0;
      v14 = v20;
      v21 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1);
        v11 = v21;
      }
      *(_QWORD *)(v11 + 16) = v16 + 1;
      *(_QWORD *)(v11 + 8 * v16 + 32) = v14;
      if (a2 < a1)
        goto LABEL_19;
      if (v12 == v13)
        goto LABEL_20;
      if (a2 == ++v13)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
}

uint64_t outlined init with take of Share<Field64>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Share<Field64>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of PINEInputShare<Field64, XofHmacSha256Aes128>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of PINEInputShare<Field64, XofHmacSha256Aes128>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of PrepareTransition<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *specialized discreteFourierTransform<A, B, C>(input:size:output:)(unint64_t a1, int64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  char v23;
  _QWORD *v24;
  uint64_t *result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  BOOL v36;
  uint64_t i;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  _QWORD *v60;

  v13 = a4 - 1;
  if (__OFSUB__(a4, 1))
  {
LABEL_113:
    __break(1u);
  }
  else
  {
    v5 = a4;
    if (a4 >= 1 && (v13 & a4) == 0)
    {
      v11 = a5;
      v10 = a3;
      v7 = a2;
      v8 = a1;
      if (one-time initialization token for roots == -1)
        goto LABEL_5;
      goto LABEL_115;
    }
  }
  __break(1u);
LABEL_115:
  swift_once();
LABEL_5:
  v14 = *((_QWORD *)static MontgomeryFiniteField64.roots + 2);
  if (v14 >= 0x40)
    v15 = 0;
  else
    v15 = 1 << v14;
  if (v15 <= v5)
  {
    __break(1u);
    goto LABEL_117;
  }
  v6 = *(char **)v11;
  if (*(_QWORD *)(*(_QWORD *)v11 + 16) < (unint64_t)v5)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  specialized static BitReversal.indicesFor(_:)(v5);
  if ((unint64_t)v13 >= *(_QWORD *)(v16 + 16))
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  v13 = v10 >> 1;
  v17 = __OFSUB__(v10 >> 1, v7);
  v10 = (v10 >> 1) - v7;
  if (!v17)
  {
    v9 = (char *)v16;
    v12 = __clz(__rbit64(v5));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_13;
    goto LABEL_120;
  }
LABEL_119:
  __break(1u);
LABEL_120:
  v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
LABEL_13:
  v18 = 0;
  do
  {
    v20 = *(_QWORD *)&v9[8 * v18 + 32];
    if (v20 >= (uint64_t)v10)
    {
      if (v18 >= *((_QWORD *)v6 + 2))
        goto LABEL_104;
      v19 = 0;
    }
    else
    {
      v17 = __OFADD__(v7, v20);
      v21 = v7 + v20;
      if (v17)
        goto LABEL_105;
      if (v21 < v7 || v21 >= v13)
      {
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      if (v18 >= *((_QWORD *)v6 + 2))
        goto LABEL_107;
      v19 = *(_QWORD *)(v8 + 8 * v21);
    }
    *(_QWORD *)&v6[8 * v18++ + 32] = v19;
  }
  while (v5 != v18);
  swift_bridgeObjectRelease();
  v60 = (_QWORD *)v11;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
  v23 = 0;
  v9 = v6 + 32;
  v7 = 0x2578C8000uLL;
  v24 = &one-time initialization token for one;
  v8 = 0xFFFFFFFF00000001;
  v13 = 0xFFFFFFFFLL;
  result = &one-time initialization token for one;
  v11 = 1;
  v26 = &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>;
  while (1)
  {
    v10 = v11;
    if (v11 >= v12)
    {
      if ((v11 != v12) | v23 & 1)
      {
LABEL_100:
        *v60 = v6;
        return result;
      }
      v23 = 1;
      v11 = v12;
    }
    else
    {
      ++v11;
    }
    if (one-time initialization token for one != -1)
    {
      swift_once();
      result = &one-time initialization token for one;
      v24 = &one-time initialization token for one;
      v26 = (_QWORD *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>;
    }
    v27 = v26[150];
    if ((int64_t)v10 >= *(_QWORD *)(v27 + 16))
      break;
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_110;
    if (v10 >= 0x40)
      v28 = 0;
    else
      v28 = 1 << v10;
    if (v28 < 0)
      goto LABEL_111;
    if ((unint64_t)v28 >= 2)
    {
      v29 = v5 / (1 << v10);
      if (v29 < 0)
        goto LABEL_112;
      v30 = 0;
      v31 = v24[279];
      v32 = *(_QWORD *)(v27 + 8 * v10 + 32);
      v33 = v28 >> 1;
LABEL_48:
      if (v30 == ((v28 >> 1) & ~(v28 >> 63)))
        goto LABEL_108;
      if (v29)
      {
        for (i = 0; v29 != i; ++i)
        {
          v39 = v28 * i;
          if ((unsigned __int128)(v28 * (__int128)i) >> 64 != (v28 * i) >> 63)
          {
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
            goto LABEL_100;
          }
          v40 = v39 + v30;
          if (__OFADD__(v39, v30))
            goto LABEL_93;
          if ((v40 & 0x8000000000000000) != 0)
            goto LABEL_94;
          v41 = *((_QWORD *)v6 + 2);
          if (v40 >= v41)
            goto LABEL_95;
          v42 = v40 + v33;
          if (__OFADD__(v40, v33))
            goto LABEL_96;
          if (v42 >= v41)
            goto LABEL_97;
          v10 = *(_QWORD *)&v9[8 * v40];
          v43 = *(_QWORD *)&v9[8 * v42];
          v44 = (v43 * (unsigned __int128)v31) >> 64;
          v45 = (0xFFFFFFFEFFFFFFFFLL * v43 * v31 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
          v46 = __CFADD__(-(uint64_t)(v43 * v31), v43 * v31);
          v36 = __CFADD__(v45, v44);
          v47 = v45 + v44;
          if (!v36)
          {
            if (v47 != -1)
            {
              v53 = v47 + v46;
              if (v53 >= 0xFFFFFFFF00000001)
                v49 = v53 + 0xFFFFFFFF;
              else
                v49 = v53;
              if (!v49)
                goto LABEL_51;
              goto LABEL_65;
            }
            if (!v46)
            {
              v49 = 4294967294;
              v50 = 0xFFFFFFFE00000003;
              goto LABEL_66;
            }
            v46 = 1;
          }
          v48 = v46 + v47;
          v49 = v48 + 0xFFFFFFFF;
          if (v48 >= 0xFFFFFFFF00000001)
            goto LABEL_99;
LABEL_65:
          v50 = 0xFFFFFFFF00000001 - v49;
          if (v49 > 0xFFFFFFFF00000001)
            goto LABEL_98;
LABEL_66:
          v51 = v10 - v50;
          if (v10 < v50)
          {
            v52 = 0xFFFFFFFF00000001 - v50;
            if (v50 > 0xFFFFFFFF00000001)
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            v36 = __CFADD__(v10, v52);
            v51 = v10 + v52;
            if (v36)
              goto LABEL_103;
          }
          *(_QWORD *)&v9[8 * v40] = v51;
          if (v10 >= v49)
          {
LABEL_51:
            v38 = v10 - v49;
            goto LABEL_52;
          }
          v38 = v10 + v50;
          if (__CFADD__(v10, v50))
            goto LABEL_102;
LABEL_52:
          *(_QWORD *)&v9[8 * v42] = v38;
        }
      }
      v54 = (v31 * (unsigned __int128)v32) >> 64;
      v55 = (0xFFFFFFFEFFFFFFFFLL * v31 * v32 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v34 = __CFADD__(-(uint64_t)(v31 * v32), v31 * v32);
      v56 = v55 + v54;
      if (!__CFADD__(v55, v54))
      {
        if (v56 != -1)
        {
          v31 = v56 + v34;
          if (v31 >= 0xFFFFFFFF00000001)
            v31 += 0xFFFFFFFFLL;
          goto LABEL_47;
        }
        if (!v34)
        {
          v31 = 4294967294;
          goto LABEL_47;
        }
        v34 = 1;
      }
      v35 = v34 + v56;
      v36 = __CFADD__(v35, 0xFFFFFFFFLL);
      v31 = v35 + 0xFFFFFFFFLL;
      if (v36)
        goto LABEL_109;
LABEL_47:
      if (++v30 == v33)
        continue;
      goto LABEL_48;
    }
  }
  _StringGuts.grow(_:)(26);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = 2112544;
  v57._object = (void *)0xE300000000000000;
  String.append(_:)(v57);
  v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v59._object = (void *)0x8000000249C30630;
  v59._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v59);
  result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(uint64_t result, int64_t a2, unint64_t a3, unint64_t a4, char *a5, unint64_t a6, char **a7)
{
  char **v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  char *v44;

  v15 = a3 >> 1;
  v16 = (char *)(a6 >> 1);
  if (a3 >> 1 != a2 && v16 != a5)
  {
    v19 = __OFSUB__(v15, a2);
    v20 = v15 - a2;
    if (v19)
      goto LABEL_50;
    v10 = a5;
    v19 = __OFSUB__(v16, a5);
    v21 = v16 - a5;
    if (v19)
      goto LABEL_51;
    v19 = __OFADD__(v20, v21);
    v22 = v20 + v21;
    if (v19)
      goto LABEL_52;
    v13 = result;
    if (__OFSUB__(v22, 1))
      goto LABEL_53;
    v7 = a7;
    v9 = a6;
    v11 = a4;
    v12 = a3;
    result = specialized FixedWidthInteger.nextPowerOfTwo.getter(v22 - 1);
    v14 = *v7;
    if (*((_QWORD *)*v7 + 2) < result)
      goto LABEL_54;
    v8 = result;
    if (result < 0)
      goto LABEL_55;
    if (!result)
    {
      __break(1u);
      return result;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_56;
    while (1)
    {
      v23 = *((_QWORD *)v14 + 2);
      v24 = v8 - 1;
      if (v23 < v8 - 1)
        v24 = *((_QWORD *)v14 + 2);
      if (v24 > 3)
      {
        v26 = v24 + 1;
        v27 = v26 & 3;
        if ((v26 & 3) == 0)
          v27 = 4;
        v25 = v26 - v27;
        v28 = v14 + 48;
        v29 = v25;
        do
        {
          *(v28 - 1) = 0uLL;
          *v28 = 0uLL;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
      }
      else
      {
        v25 = 0;
      }
      while (v25 < v23)
      {
        *(_QWORD *)&v14[8 * v25++ + 32] = 0;
        if (v8 == v25)
        {
          v42 = (uint64_t *)v7;
          *v7 = v14;
          if (v8 <= 0)
          {
            v14 = (char *)(8 * v8);
            v30 = MEMORY[0x24BEE4AF8];
            bzero((void *)(MEMORY[0x24BEE4AF8] + 32), 8 * v8);
            v44 = (char *)v30;
          }
          else
          {
            v7 = (char **)static Array._allocateBufferUninitialized(minimumCapacity:)();
            v7[2] = (char *)v8;
            v14 = (char *)(8 * v8);
            bzero(v7 + 4, 8 * v8);
            v44 = (char *)v7;
            v30 = static Array._allocateBufferUninitialized(minimumCapacity:)();
            *(_QWORD *)(v30 + 16) = v8;
          }
          bzero((void *)(v30 + 32), (size_t)v14);
          v43 = v30;
          specialized discreteFourierTransform<A, B, C>(input:size:output:)(v13, a2, v12, v8, (uint64_t)&v44);
          specialized discreteFourierTransform<A, B, C>(input:size:output:)(v11, (int64_t)v10, v9, v8, (uint64_t)&v43);
          v9 = v43;
          v10 = v44;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          v31 = 0;
          while (1)
          {
            if (v31 >= *(_QWORD *)(v9 + 16))
              goto LABEL_47;
            if (v31 >= *((_QWORD *)v10 + 2))
              goto LABEL_48;
            v36 = &v10[8 * v31];
            v37 = *((_QWORD *)v36 + 4);
            v38 = *(_QWORD *)(v9 + 8 * v31 + 32);
            v39 = (v37 * (unsigned __int128)v38) >> 64;
            v40 = (0xFFFFFFFEFFFFFFFFLL * v37 * v38 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
            v32 = __CFADD__(-(uint64_t)(v37 * v38), v37 * v38);
            v41 = v40 + v39;
            if (__CFADD__(v40, v39))
              goto LABEL_30;
            if (v41 == -1)
            {
              if (v32)
              {
                v32 = 1;
LABEL_30:
                v33 = v32 + v41;
                v34 = __CFADD__(v33, 0xFFFFFFFFLL);
                v35 = v33 + 0xFFFFFFFFLL;
                if (v34)
                  goto LABEL_49;
                goto LABEL_31;
              }
              v35 = 4294967294;
            }
            else
            {
              v35 = v41 + v32;
              if (v35 >= 0xFFFFFFFF00000001)
                v35 += 0xFFFFFFFFLL;
            }
LABEL_31:
            ++v31;
            *((_QWORD *)v36 + 4) = v35;
            if (v8 == v31)
            {
              specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)((unint64_t)v10, v8, v42);
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
          }
        }
      }
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
    }
  }
  return result;
}

uint64_t specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;

  v51 = a3 >> 1;
  v12 = a6 >> 1;
  if (a3 >> 1 != a2 && v12 != a5)
  {
    v14 = a2;
    v15 = v51 - a2;
    if (__OFSUB__(v51, a2))
      goto LABEL_81;
    v9 = a5;
    v11 = v12 - a5;
    if (__OFSUB__(v12, a5))
      goto LABEL_82;
    v16 = v15 + v11;
    if (__OFADD__(v15, v11))
      goto LABEL_83;
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (v17)
      goto LABEL_84;
    v8 = *a7;
    if (*(_QWORD *)(*a7 + 16) < v18)
      goto LABEL_85;
    if (v18 < 0)
      goto LABEL_86;
    v10 = a4;
    v7 = result;
    if (!v18)
      goto LABEL_28;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      goto LABEL_88;
    while (1)
    {
      v19 = *(_QWORD *)(v8 + 16);
      v20 = v12 + v51 - (v9 + v14) - 2;
      if (v20 >= v19)
        v20 = *(_QWORD *)(v8 + 16);
      if (v20 > 3)
      {
        v22 = v20 + 1;
        v23 = v22 & 3;
        if ((v22 & 3) == 0)
          v23 = 4;
        v21 = v22 - v23;
        v24 = (_OWORD *)(v8 + 48);
        v25 = v21;
        do
        {
          *(v24 - 1) = 0uLL;
          *v24 = 0uLL;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
      }
      else
      {
        v21 = 0;
      }
      v26 = v21 + v9 + v14 - v12 - v51 + 1;
      do
      {
        if (v21 >= v19)
          goto LABEL_76;
        v27 = v8 + 8 * v21++;
        *(_QWORD *)(v27 + 32) = 0;
        v28 = __CFADD__(v26++, 1);
      }
      while (!v28);
      *a7 = v8;
LABEL_28:
      if ((v15 & 0x8000000000000000) == 0)
        break;
LABEL_87:
      __break(1u);
LABEL_88:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      v8 = result;
    }
    if (!v15)
      return result;
    if ((v11 & 0x8000000000000000) == 0)
    {
      v29 = 0;
      if (v9 <= v12)
        v30 = v12;
      else
        v30 = v9;
      v47 = v30 - v9;
      v45 = v14;
      v46 = (_QWORD *)(v10 + 8 * v9);
      v31 = 4;
      v9 = 0xFFFFFFFF00000001;
      v12 = 0xFFFFFFFFLL;
      v43 = v11;
      v44 = v15;
      while (1)
      {
        if (v29 == v15)
          goto LABEL_77;
        if (v11)
          break;
LABEL_36:
        ++v29;
        ++v31;
        if (v29 == v15)
          return result;
      }
      v10 = v14 + v29;
      if (__OFADD__(v14, v29))
        goto LABEL_78;
      if (v10 < v14)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      v49 = v31;
      v50 = v29;
      v15 = v31;
      v32 = v46;
      v14 = v47;
      if (v10 >= v51)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
      while (1)
      {
        if (!v14)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
        v34 = *(_QWORD *)(v7 + 8 * v10);
        v35 = ((unint64_t)*v32 * (unsigned __int128)v34) >> 64;
        v36 = (0xFFFFFFFEFFFFFFFFLL * *v32 * v34 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        v37 = __CFADD__(-(uint64_t)(*v32 * v34), *v32 * v34);
        v38 = v36 + v35;
        if (!__CFADD__(v36, v35))
        {
          if (v38 != -1)
          {
            v41 = v38 + v37;
            if (v41 >= 0xFFFFFFFF00000001)
              v40 = v41 + 0xFFFFFFFF;
            else
              v40 = v41;
            goto LABEL_60;
          }
          if (!v37)
          {
            v40 = 4294967294;
            goto LABEL_60;
          }
          v37 = 1;
        }
        v39 = v37 + v38;
        v40 = v39 + 0xFFFFFFFF;
        if (v39 >= 0xFFFFFFFF00000001)
          goto LABEL_73;
LABEL_60:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
          v8 = result;
        }
        if ((unint64_t)(v15 - 4) >= *(_QWORD *)(v8 + 16))
          goto LABEL_71;
        v33 = *(_QWORD *)(v8 + 8 * v15);
        if (v40)
        {
          v42 = 0xFFFFFFFF00000001 - v40;
          if (v40 > 0xFFFFFFFF00000001)
            goto LABEL_72;
          if (v33 >= v42)
          {
            v33 -= v42;
          }
          else
          {
            if (v42 > 0xFFFFFFFF00000001)
              goto LABEL_74;
            v28 = __CFADD__(v33, v40);
            v33 += v40;
            if (v28)
              goto LABEL_75;
          }
        }
        *(_QWORD *)(v8 + 8 * v15) = v33;
        --v14;
        ++v32;
        ++v15;
        if (!--v11)
        {
          *a7 = v8;
          v15 = v44;
          v14 = v45;
          v11 = v43;
          v31 = v49;
          v29 = v50;
          goto LABEL_36;
        }
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field64VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b51Qyd__AFRtzANQyd_0_AORSr_0_lTRAA13SumVectorTypeVyAA7J32VSWG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(uint64_t a1, void (*a2)(uint64_t, _OWORD *))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = 0;
    v7 = (_QWORD *)(a1 + 64);
    while (1)
    {
      v8 = *v7;
      v9 = *((_OWORD *)v7 - 1);
      v11[0] = *((_OWORD *)v7 - 2);
      v11[1] = v9;
      v12 = v8;
      a2(v6, v11);
      if (v2)
        break;
      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += 5;
      if (v5 == v6)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return v13;
  }
}

uint64_t specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v3 = *(_QWORD *)(result + 16);
  if (v3 != *(_QWORD *)(v2 + 88))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v20 = 0xD000000000000016;
    v21 = 0x8000000249C30730;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
LABEL_26:
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v19 = v20;
    *(_QWORD *)(v19 + 8) = v21;
    *(_BYTE *)(v19 + 16) = 2;
    return swift_willThrow();
  }
  if (*(_QWORD *)(a2 + 8) != v3)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v20 = 0xD000000000000010;
    v21 = 0x8000000249C311B0;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 540877088;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    goto LABEL_26;
  }
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 80);
    v5 = *(float **)a2;
    v6 = (uint64_t *)(result + 32);
    v7 = 1 << v4;
    if (v4 >= 0x40)
      v7 = 0;
    v8 = 1uLL >> -(char)v4;
    if (v4 - 65 >= 0xFFFFFFFFFFFFFF7FLL)
      v9 = v7;
    else
      v9 = 0;
    if (v4 <= 0xFFFFFFFFFFFFFFC0)
      v8 = 0;
    do
    {
      v13 = *v6++;
      v10 = (0xFFFFFFFEFFFFFFFFLL * v13 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      if (__CFADD__(-v13, v13))
      {
        if (v10 > 0xFFFFFFFEFFFFFFFFLL)
        {
          v10 = 0;
          goto LABEL_13;
        }
        ++v10;
      }
      if (v10 >= 0x7FFFFFFF80000001)
      {
        v11 = -(float)(0xFFFFFFFF00000001 - v10);
        goto LABEL_14;
      }
LABEL_13:
      v11 = (float)v10;
LABEL_14:
      if (v4 <= 0xFFFFFFFFFFFFFFBFLL)
        v12 = v9;
      else
        v12 = v8;
      *v5++ = v11 / (float)v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  __int128 v21;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_29;
  v21 = *(_OWORD *)(v2 + 88);
  if ((*((_QWORD *)&v21 + 1) & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
  }
  else
  {
    v4 = result;
    if (*((_QWORD *)&v21 + 1))
    {
      v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&v21 + 1);
      bzero((void *)(v6 + 32), 8 * *((_QWORD *)&v21 + 1));
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    result = swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      v8 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_28;
      v9 = *(_QWORD *)(v4 + 32 + 8 * v7);
      v10 = *(_QWORD *)(v6 + 16);
      if (v10 != *(_QWORD *)(v9 + 16))
      {
LABEL_24:
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = 540877088;
        v18._object = (void *)0xE400000000000000;
        String.append(_:)(v18);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(_QWORD *)v20 = 0xD000000000000020;
        *(_QWORD *)(v20 + 8) = 0x8000000249C30700;
        *(_BYTE *)(v20 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v10)
      {
        result = swift_bridgeObjectRetain();
        v11 = 4;
        while (1)
        {
          v13 = *(_QWORD *)(v9 + 8 * v11);
          v12 = *(_QWORD *)(v6 + 8 * v11);
          if (v13)
          {
            v14 = v13 <= 0xFFFFFFFF00000001;
            v15 = 0xFFFFFFFF00000001 - v13;
            if (!v14)
            {
              __break(1u);
LABEL_27:
              __break(1u);
LABEL_28:
              __break(1u);
LABEL_29:
              __break(1u);
              goto LABEL_30;
            }
            if (v12 >= v15)
            {
              v12 -= v15;
            }
            else
            {
              v14 = v15 <= 0xFFFFFFFF00000001;
              v16 = 0xFFFFFFFF00000001 - v15;
              if (!v14)
                goto LABEL_27;
              v14 = __CFADD__(v12, v16);
              v12 += v16;
              if (v14)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(_QWORD *)(v6 + 8 * v11++) = v12;
          if (v11 - v10 == 4)
          {
            result = swift_bridgeObjectRelease();
            break;
          }
        }
      }
      v7 = v8;
    }
    while (v8 != v3);
    swift_bridgeObjectRelease();
    specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(v6, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(uint64_t **)(v2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = *(_QWORD *)(a2 + 32);
  return specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, v7, v3, v4);
}

{
  return partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2);
}

unint64_t outlined copy of GadgetEvaluation<Field64>(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_retain();
  return result;
}

uint64_t partial apply for specialized closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t **a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[9];
  uint64_t v24;

  v7 = v5[2];
  v8 = v5[3];
  v9 = v5[4];
  v10 = v5[5];
  v11 = (uint64_t *)v5[6];
  v12 = v5[7];
  v13 = (unint64_t *)v5[8];
  v14 = (uint64_t *)v5[9];
  v15 = (unint64_t *)v5[10];
  v16 = (unint64_t *)v5[11];
  v17 = (unint64_t *)v5[12];
  v18 = *(_OWORD *)(v12 + 112);
  v23[6] = *(_OWORD *)(v12 + 96);
  v23[7] = v18;
  v23[8] = *(_OWORD *)(v12 + 128);
  v24 = *(_QWORD *)(v12 + 144);
  v19 = *(_OWORD *)(v12 + 48);
  v23[2] = *(_OWORD *)(v12 + 32);
  v23[3] = v19;
  v20 = *(_OWORD *)(v12 + 80);
  v23[4] = *(_OWORD *)(v12 + 64);
  v23[5] = v20;
  v21 = *(_OWORD *)(v12 + 16);
  v23[0] = *(_OWORD *)v12;
  v23[1] = v21;
  return specialized closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(a2, a3, a4, a5, v7, v8, v9, v10, v11, (uint64_t)v23, *v13, *v14, v15, v16, *v17);
}

uint64_t specialized closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t result, uint64_t a2, unint64_t a3, char **a4, unint64_t *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char **v45;
  char *v46;

  v16 = a3 >> 1;
  v17 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (v17 < 0)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v14 = v8;
  v10 = a8;
  v9 = a2;
  if (!v17)
    goto LABEL_44;
  v11 = a7;
  v12 = a6;
  v13 = a5;
  v15 = result;
  v46 = v8;
  v45 = a4;
  v14 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_71;
  while (2)
  {
    v18 = 0;
    v19 = (unint64_t *)(v14 + 40);
    v20 = 0xFFFFFFFF00000001 - (_QWORD)v12;
    if (v9 <= v16)
      v21 = v16;
    else
      v21 = v9;
    v22 = v21 - v9;
    v23 = (unint64_t *)(v15 + 8 * v9);
    v24 = v17;
    do
    {
      if (!v22)
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      v29 = *v23;
      v30 = (*v13 * (unsigned __int128)*v23) >> 64;
      v31 = *v13 * *v23;
      v32 = (0xFFFFFFFEFFFFFFFFLL * v31 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v33 = __CFADD__(-(uint64_t)v31, v31);
      v34 = v32 + v30;
      if (!__CFADD__(v32, v30))
      {
        if (v34 != -1)
        {
          v36 = v34 + v33;
          if (v36 >= 0xFFFFFFFF00000001)
            v36 += 0xFFFFFFFFLL;
          goto LABEL_28;
        }
        if (!v33)
        {
          v36 = 4294967294;
          goto LABEL_28;
        }
        v33 = 1;
      }
      v35 = v33 + v34;
      v27 = __CFADD__(v35, 0xFFFFFFFFLL);
      v36 = v35 + 0xFFFFFFFFLL;
      if (v27)
        goto LABEL_65;
LABEL_28:
      if (v18 >= *((_QWORD *)v14 + 2))
        goto LABEL_58;
      *(v19 - 1) = v36;
      v37 = v29 - (_QWORD)v12;
      if (v29 < (unint64_t)v12)
      {
        if ((unint64_t)v12 > 0xFFFFFFFF00000001)
          goto LABEL_66;
        v37 = v29 + v20;
        if (__CFADD__(v29, v20))
          goto LABEL_67;
      }
      if (v18 + 1 >= *((_QWORD *)v14 + 2))
        goto LABEL_59;
      *v19 = v37;
      result = (*v13 * (unsigned __int128)(unint64_t)v11) >> 64;
      v38 = *v13 * v11;
      v39 = (0xFFFFFFFEFFFFFFFFLL * v38 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v25 = __CFADD__(-(uint64_t)v38, v38);
      v40 = v39 + result;
      if (!__CFADD__(v39, result))
      {
        if (v40 != -1)
        {
          v28 = v40 + v25;
          if (v28 >= 0xFFFFFFFF00000001)
            v28 += 0xFFFFFFFFLL;
          goto LABEL_11;
        }
        if (!v25)
        {
          v28 = 4294967294;
          goto LABEL_11;
        }
        v25 = 1;
      }
      v26 = v25 + v40;
      v27 = __CFADD__(v26, 0xFFFFFFFFLL);
      v28 = v26 + 0xFFFFFFFFLL;
      if (v27)
        goto LABEL_64;
LABEL_11:
      --v22;
      *v13 = v28;
      ++v23;
      v18 += 2;
      v19 += 2;
      --v24;
    }
    while (v24);
    a4 = v45;
    *v45 = v14;
    v14 = v46;
LABEL_44:
    v11 = *(_QWORD *)(v10 + 48);
    if (v11 < v17)
    {
LABEL_70:
      __break(1u);
LABEL_71:
      v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
      continue;
    }
    break;
  }
  if (v17 != v11)
  {
    if (v17 >= v11)
    {
      __break(1u);
      goto LABEL_72;
    }
    v12 = a4;
    v10 = (uint64_t)*a4;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_72:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      v10 = result;
    }
    v41 = v17 + 0x4000000000000000;
    v42 = 2 * v16 - 2 * v9;
    v43 = (_QWORD *)(v10 - 16 * v9 + 16 * v16 + 40);
    v44 = v11 + v9 - v16;
    while ((v41 & 0x8000000000000000) == 0)
    {
      if ((v42 & 0x8000000000000000) != 0)
        goto LABEL_61;
      if (v42 >= *(_QWORD *)(v10 + 16))
        goto LABEL_62;
      *(v43 - 1) = 0;
      if (v42 + 1 >= *(_QWORD *)(v10 + 16))
        goto LABEL_63;
      *v43 = 0;
      v43 += 2;
      ++v41;
      v42 += 2;
      if (!--v44)
      {
        *v12 = v10;
        return result;
      }
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  return result;
}

uint64_t specialized closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v10 = a3 >> 1;
  v11 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_34;
  if (v11 < 0)
    goto LABEL_35;
  v7 = a5;
  v5 = a4;
  v6 = a2;
  if (!v11)
    goto LABEL_14;
  v9 = result;
  v8 = *a4;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_37;
  while (1)
  {
    v12 = 0;
    v13 = (_QWORD *)(v8 + 40);
    v14 = v6 <= v10 ? v10 : v6;
    v15 = v14 - v6;
    v16 = (uint64_t *)(v9 + 8 * v6);
    v17 = v11;
    do
    {
      if (!v15)
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v12 >= *(_QWORD *)(v8 + 16))
        goto LABEL_28;
      v18 = *v16;
      *(v13 - 1) = *v16;
      if (v12 + 1 >= *(_QWORD *)(v8 + 16))
        goto LABEL_29;
      *v13 = v18;
      v13 += 2;
      --v15;
      ++v16;
      v12 += 2;
      --v17;
    }
    while (v17);
    *v5 = v8;
LABEL_14:
    v8 = *(_QWORD *)(v7 + 48);
    if (v8 >= v11)
      break;
LABEL_36:
    __break(1u);
LABEL_37:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    v8 = result;
  }
  if (v11 != v8)
  {
    if (v11 < v8)
    {
      v7 = *v5;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v7 = result;
LABEL_19:
    v19 = v11 + 0x4000000000000000;
    v20 = 2 * v10 - 2 * v6;
    v21 = (_QWORD *)(v7 - 16 * v6 + 16 * v10 + 40);
    v22 = v8 + v6 - v10;
    while ((v19 & 0x8000000000000000) == 0)
    {
      if ((v20 & 0x8000000000000000) != 0)
        goto LABEL_31;
      if (v20 >= *(_QWORD *)(v7 + 16))
        goto LABEL_32;
      *(v21 - 1) = 0;
      if (v20 + 1 >= *(_QWORD *)(v7 + 16))
        goto LABEL_33;
      *v21 = 0;
      v21 += 2;
      ++v19;
      v20 += 2;
      if (!--v22)
      {
        *v5 = v7;
        return result;
      }
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  return result;
}

uint64_t specialized closure #1 in PINECircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t *a13, unint64_t *a14, unint64_t a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  _BOOL8 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _BOOL8 v87;
  unint64_t *v88;
  uint64_t v90;
  unint64_t v91;

  v21 = a3 >> 1;
  v22 = (a3 >> 1) - (_QWORD)a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  if (v22 < 0)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v16 = (uint64_t *)a4;
  v20 = (uint64_t)a2;
  v23 = a10;
  if (!v22)
  {
LABEL_99:
    v67 = *(_QWORD *)(v23 + 48);
    if (v67 < v22)
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if (v22 == v67)
      return result;
    if (v22 < v67)
    {
      v17 = *v16;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_104:
        v68 = v22 + 0x4000000000000000;
        v69 = 2 * v21 - 2 * v20;
        v70 = (_QWORD *)(v17 - 16 * v20 + 16 * v21 + 40);
        v71 = (char *)(v67 + v20 - v21);
        while ((v68 & 0x8000000000000000) == 0)
        {
          if ((v69 & 0x8000000000000000) != 0)
            goto LABEL_114;
          if (v69 >= *(_QWORD *)(v17 + 16))
            goto LABEL_115;
          *(v70 - 1) = 0;
          if (v69 + 1 >= *(_QWORD *)(v17 + 16))
            goto LABEL_116;
          *v70 = 0;
          v70 += 2;
          ++v68;
          v69 += 2;
          if (!--v71)
          {
            *v16 = v17;
            return result;
          }
        }
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
    v17 = result;
    goto LABEL_104;
  }
  v82 = *(_QWORD *)(a10 + 112);
  v84 = v82 + 1;
  if (__OFADD__(v82, 1))
  {
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  v19 = a8;
  v76 = result;
  v90 = v15;
  v83 = a7;
  v88 = a14;
  v80 = a13;
  v18 = a11;
  v17 = a12;
  v85 = a9;
  v16 = *a4;
  v75 = (uint64_t *)a4;
  v77 = (a3 >> 1) - (_QWORD)a2;
  v72 = a10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_146:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
    goto LABEL_7;
  }
  result = (uint64_t)v16;
LABEL_7:
  v24 = 0;
  v25 = (unint64_t *)(result + 40);
  v81 = v19 & 1;
  v26 = v19 >> 1;
  v27 = v17 * v18;
  v28 = ((unint64_t)v17 * (unsigned __int128)v18) >> 64;
  v29 = -(uint64_t)(v17 * v18);
  v30 = (0xFFFFFFFEFFFFFFFFLL * v17 * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v86 = v30 + v28;
  v31 = __CFADD__(v30, v28);
  v79 = v31;
  v32 = __CFADD__(v29, v27);
  v33 = __CFADD__(v29, v27);
  v87 = v33;
  v34 = v28 + v32 + v30;
  if (v34 >= 0xFFFFFFFF00000001)
    v34 += 0xFFFFFFFFLL;
  v78 = v34;
  v73 = v21;
  v74 = (_QWORD *)v20;
  if (v20 <= v21)
    v35 = v21;
  else
    v35 = v20;
  v21 = v35 - v20;
  v18 = v77;
  v20 = v76 + 8 * v20;
  v36 = v85;
  while (1)
  {
    if (!v18)
      goto LABEL_117;
    v37 = *v36;
    v38 = v37 * v84;
    if ((unsigned __int128)(v37 * (__int128)v84) >> 64 != (v37 * v84) >> 63)
      goto LABEL_118;
    v39 = v83 + v38;
    if (__OFADD__(v83, v38))
      goto LABEL_119;
    v17 = v39 + v82;
    if (__OFADD__(v39, v82))
      goto LABEL_120;
    if (v17 < v39)
      goto LABEL_121;
    if (v26 < v39)
      goto LABEL_122;
    if (v39 < v83)
      goto LABEL_123;
    if (v26 < v17)
      goto LABEL_124;
    if (v17 < 0)
      goto LABEL_125;
    v16 = (uint64_t *)result;
    v19 = v81 | (2 * v17);
    swift_unknownObjectRetain();
    result = specialized FieldElement.init(inputVector:)(a6, v39, v19, &v91);
    if (v90)
      break;
    v40 = v87;
    if (v79)
      goto LABEL_30;
    v42 = v78;
    if (v86 == -1)
    {
      if (!v87)
      {
        v43 = v91;
        v44 = 0xFFFFFFFE00000003;
        goto LABEL_37;
      }
      v40 = 1;
LABEL_30:
      v41 = v40 + v86;
      v32 = __CFADD__(v41, 0xFFFFFFFFLL);
      v42 = v41 + 0xFFFFFFFFLL;
      if (v32)
        goto LABEL_133;
    }
    v43 = v91;
    if (!v42)
      goto LABEL_44;
    v32 = v42 <= 0xFFFFFFFF00000001;
    v44 = 0xFFFFFFFF00000001 - v42;
    if (!v32)
      goto LABEL_131;
LABEL_37:
    if (v43 >= v44)
    {
      v43 -= v44;
    }
    else
    {
      v32 = v44 <= 0xFFFFFFFF00000001;
      v45 = 0xFFFFFFFF00000001 - v44;
      if (!v32)
        goto LABEL_138;
      v32 = __CFADD__(v43, v45);
      v43 += v45;
      if (v32)
        goto LABEL_139;
    }
LABEL_44:
    if (v17 >= v26)
      goto LABEL_126;
    if (!v21)
      goto LABEL_127;
    v46 = *(_QWORD *)(a6 + 8 * v17);
    v47 = *(_QWORD *)v20;
    v48 = *(_QWORD *)v20 - v43;
    if (*(_QWORD *)v20 < v43)
    {
      v32 = v43 <= 0xFFFFFFFF00000001;
      v49 = 0xFFFFFFFF00000001 - v43;
      if (!v32)
        goto LABEL_136;
      v48 = v47 + v49;
      if (__CFADD__(v47, v49))
        goto LABEL_137;
    }
    v50 = *v80 * v48;
    v51 = (*v80 * (unsigned __int128)v48) >> 64;
    v52 = (0xFFFFFFFEFFFFFFFFLL * v50 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v53 = __CFADD__(-(uint64_t)v50, v50);
    v54 = v52 + v51;
    if (__CFADD__(v52, v51))
    {
      result = (uint64_t)v16;
    }
    else
    {
      result = (uint64_t)v16;
      if (v54 != -1)
      {
        v56 = v54 + v53;
        if (v56 >= 0xFFFFFFFF00000001)
          v56 += 0xFFFFFFFFLL;
        goto LABEL_69;
      }
      if (!v53)
      {
        v56 = 4294967294;
        goto LABEL_69;
      }
      v53 = 1;
    }
    v55 = v53 + v54;
    v32 = __CFADD__(v55, 0xFFFFFFFFLL);
    v56 = v55 + 0xFFFFFFFFLL;
    if (v32)
      goto LABEL_134;
LABEL_69:
    if (v24 >= *(_QWORD *)(result + 16))
      goto LABEL_128;
    *(v25 - 1) = v56;
    if (v24 + 1 >= *(_QWORD *)(result + 16))
      goto LABEL_129;
    *v25 = v46;
    v57 = *v88;
    if (v46)
    {
      v32 = v46 <= 0xFFFFFFFF00000001;
      v58 = 0xFFFFFFFF00000001 - v46;
      if (!v32)
        goto LABEL_132;
      if (v57 >= v58)
      {
        v57 -= v58;
      }
      else
      {
        v32 = v58 <= 0xFFFFFFFF00000001;
        v59 = 0xFFFFFFFF00000001 - v58;
        if (!v32)
          goto LABEL_140;
        v32 = __CFADD__(v57, v59);
        v57 += v59;
        if (v32)
          goto LABEL_141;
      }
    }
    *v88 = v57;
    v60 = (*v80 * (unsigned __int128)a15) >> 64;
    v61 = *v80 * a15;
    v62 = (0xFFFFFFFEFFFFFFFFLL * v61 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v63 = __CFADD__(-(uint64_t)v61, v61);
    v64 = v62 + v60;
    if (__CFADD__(v62, v60))
      goto LABEL_86;
    if (v64 == -1)
    {
      if (v63)
      {
        v63 = 1;
LABEL_86:
        v65 = v63 + v64;
        v32 = __CFADD__(v65, 0xFFFFFFFFLL);
        v66 = v65 + 0xFFFFFFFFLL;
        if (v32)
          goto LABEL_135;
        goto LABEL_96;
      }
      v66 = 4294967294;
    }
    else
    {
      v66 = v64 + v63;
      if (v66 >= 0xFFFFFFFF00000001)
        v66 += 0xFFFFFFFFLL;
    }
LABEL_96:
    *v80 = v66;
    v36 = v85;
    if (__OFADD__(*v85, 1))
      goto LABEL_130;
    --v21;
    ++*v85;
    v20 += 8;
    v24 += 2;
    v25 += 2;
    if (!--v18)
    {
      v20 = (uint64_t)v74;
      v16 = v75;
      *v75 = result;
      v23 = v72;
      v21 = v73;
      v22 = v77;
      goto LABEL_99;
    }
  }
  *v75 = (uint64_t)v16;
  return result;
}

uint64_t partial apply for specialized closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[9];
  uint64_t v13;

  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_OWORD *)(v6 + 112);
  v12[6] = *(_OWORD *)(v6 + 96);
  v12[7] = v7;
  v12[8] = *(_OWORD *)(v6 + 128);
  v13 = *(_QWORD *)(v6 + 144);
  v8 = *(_OWORD *)(v6 + 48);
  v12[2] = *(_OWORD *)(v6 + 32);
  v12[3] = v8;
  v9 = *(_OWORD *)(v6 + 80);
  v12[4] = *(_OWORD *)(v6 + 64);
  v12[5] = v9;
  v10 = *(_OWORD *)(v6 + 16);
  v12[0] = *(_OWORD *)v6;
  v12[1] = v10;
  return specialized closure #1 in PINECircuit.evaluateNormRangeCheck(inputVector:vBits:uBits:inverseNumOfShares:for:)(a2, a3, a4, a5, (uint64_t)v12);
}

uint64_t partial apply for specialized closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  uint64_t v5;
  unint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[9];
  uint64_t v17;

  v7 = *(unint64_t **)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 40);
  v9 = **(_QWORD ***)(v5 + 24);
  v10 = **(_QWORD **)(v5 + 32);
  v11 = *(_OWORD *)(v8 + 112);
  v16[6] = *(_OWORD *)(v8 + 96);
  v16[7] = v11;
  v16[8] = *(_OWORD *)(v8 + 128);
  v17 = *(_QWORD *)(v8 + 144);
  v12 = *(_OWORD *)(v8 + 48);
  v16[2] = *(_OWORD *)(v8 + 32);
  v16[3] = v12;
  v13 = *(_OWORD *)(v8 + 80);
  v16[4] = *(_OWORD *)(v8 + 64);
  v16[5] = v13;
  v14 = *(_OWORD *)(v8 + 16);
  v16[0] = *(_OWORD *)v8;
  v16[1] = v14;
  return specialized closure #1 in PINECircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(a2, a3, a4, a5, v7, v9, v10, (uint64_t)v16);
}

uint64_t specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t result, uint64_t a2, unint64_t a3, char **a4, unint64_t *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  char *v46;
  char **v47;
  char *v48;

  v16 = a3 >> 1;
  v17 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (v17 < 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v13 = v8;
  v11 = a8;
  v10 = a6;
  v9 = a2;
  if (!v17)
    goto LABEL_45;
  v15 = a7;
  if (!*(_QWORD *)(a7 + 16))
    goto LABEL_76;
  v12 = a5;
  v14 = (_QWORD *)result;
  v48 = v8;
  v47 = a4;
  v13 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_77;
  while (2)
  {
    v18 = 0;
    v19 = v13 + 40;
    v20 = *(_QWORD *)(v15 + 32);
    v21 = 0xFFFFFFFF00000001 - v10;
    if (v9 <= v16)
      v22 = v16;
    else
      v22 = v9;
    v23 = v22 - v9;
    v24 = &v14[v9];
    v25 = v17;
    do
    {
      if (!v23)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      v29 = *v24;
      v30 = (*v12 * (unsigned __int128)*v24) >> 64;
      v31 = *v12 * *v24;
      v32 = (0xFFFFFFFEFFFFFFFFLL * v31 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      v33 = __CFADD__(-(uint64_t)v31, v31);
      v34 = v32 + v30;
      if (!__CFADD__(v32, v30))
      {
        if (v34 != -1)
        {
          v36 = v34 + v33;
          if (v36 >= 0xFFFFFFFF00000001)
            v36 += 0xFFFFFFFFLL;
          goto LABEL_29;
        }
        if (!v33)
        {
          v36 = 4294967294;
          goto LABEL_29;
        }
        v33 = 1;
      }
      v35 = v33 + v34;
      v27 = __CFADD__(v35, 0xFFFFFFFFLL);
      v36 = v35 + 0xFFFFFFFFLL;
      if (v27)
        goto LABEL_69;
LABEL_29:
      if (v18 >= *((_QWORD *)v13 + 2))
        goto LABEL_62;
      *(v19 - 1) = v36;
      v37 = v29 - v10;
      if (v29 < v10)
      {
        if (v10 > 0xFFFFFFFF00000001)
          goto LABEL_70;
        v37 = v29 + v21;
        if (__CFADD__(v29, v21))
          goto LABEL_71;
      }
      if (v18 + 1 >= *((_QWORD *)v13 + 2))
        goto LABEL_63;
      *v19 = v37;
      v38 = (*v12 * (unsigned __int128)v20) >> 64;
      v39 = *v12 * v20;
      v40 = (0xFFFFFFFEFFFFFFFFLL * v39 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      result = __CFADD__(-(uint64_t)v39, v39);
      v41 = v40 + v38;
      if (!__CFADD__(v40, v38))
      {
        if (v41 != -1)
        {
          v28 = v41 + result;
          result = v28 + 0xFFFFFFFF;
          if (v28 >= 0xFFFFFFFF00000001)
            v28 += 0xFFFFFFFFLL;
          goto LABEL_12;
        }
        if ((result & 1) == 0)
        {
          v28 = 4294967294;
          goto LABEL_12;
        }
        result = 1;
      }
      v26 = result + v41;
      v27 = __CFADD__(v26, 0xFFFFFFFFLL);
      v28 = v26 + 0xFFFFFFFFLL;
      if (v27)
        goto LABEL_68;
LABEL_12:
      --v23;
      *v12 = v28;
      ++v24;
      v18 += 2;
      v19 += 2;
      --v25;
    }
    while (v25);
    a4 = v47;
    *v47 = v13;
    v13 = v48;
LABEL_45:
    v12 = *(unint64_t **)(v11 + 88);
    if ((uint64_t)v12 < v17)
    {
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
      continue;
    }
    break;
  }
  if ((unint64_t *)v17 != v12)
  {
    if (v17 >= (uint64_t)v12)
    {
      __break(1u);
      goto LABEL_78;
    }
    v14 = a4;
    v11 = (uint64_t)*a4;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_78:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      v11 = result;
    }
    v42 = 0xFFFFFFFF00000001 - v10;
    if (!v10)
      v42 = 0;
    v43 = v17 + 0x4000000000000000;
    v44 = 2 * v16 - 2 * v9;
    v45 = (unint64_t *)(v11 - 16 * v9 + 16 * v16 + 40);
    v46 = (char *)v12 + v9 - v16;
    while ((v43 & 0x8000000000000000) == 0)
    {
      if ((v44 & 0x8000000000000000) != 0)
        goto LABEL_65;
      if (v44 >= *(_QWORD *)(v11 + 16))
        goto LABEL_66;
      *(v45 - 1) = 0;
      if (v10 > 0xFFFFFFFF00000001)
        goto LABEL_72;
      if (v44 + 1 >= *(_QWORD *)(v11 + 16))
        goto LABEL_67;
      *v45 = v42;
      v45 += 2;
      ++v43;
      v44 += 2;
      if (!--v46)
      {
        *v14 = v11;
        return result;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  return result;
}

uint64_t specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(a3 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = a2;
  v7 = a2[3];
  if (v7 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v6 = a4;
  v5 = *(_QWORD *)(a3 + 8 * a1 + 32);
  result = specialized FieldElement.pow(_:)(a2[3], v5, (uint64_t *)&v49);
  if (one-time initialization token for one != -1)
LABEL_13:
    result = swift_once();
  if ((unint64_t)static Field64.one > 0xFFFFFFFF00000000 || v49 > 0xFFFFFFFF00000000)
  {
    __break(1u);
  }
  else if (v49 == static Field64.one)
  {
    v49 = 0;
    v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v9._countAndFlagsBits = 0xD00000000000001ALL;
    v9._object = (void *)0x8000000249C31300;
    String.append(_:)(v9);
    v10._countAndFlagsBits = specialized FieldElement.description.getter(v5);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 544434464;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v51 = v7;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._object = (void *)0x8000000249C31320;
    v13._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v13);
    v14 = v49;
    v15 = v50;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v16 = v14;
    *(_QWORD *)(v16 + 8) = v15;
    *(_BYTE *)(v16 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    v17 = *v4;
    v19 = *v6;
    v18 = v6[1];
    v20 = v6[2];
    v21 = v6[3];
    v22 = specialized Collection.prefix(_:)(*v4, *v6, v18, v20, v21);
    v47 = v23;
    v48 = v22;
    v45 = v25;
    v46 = v24;
    v26 = specialized Collection.dropFirst(_:)(v17, v19, v18, v20, v21);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    *v6 = v26;
    v6[1] = v27;
    v6[2] = v29;
    v6[3] = v31;
    v33 = v4[4];
    v34 = specialized Collection.prefix(_:)(v33, v26, v27, v29, v31);
    v43 = v35;
    v44 = v34;
    v41 = v37;
    v42 = v36;
    *v6 = specialized Collection.dropFirst(_:)(v33, v26, v28, v30, v32);
    v6[1] = v38;
    v6[2] = v39;
    v6[3] = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryGadget<Field64>);
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(v44, v43, v42, v41, v48, v47, v46, v45, v5, (uint64_t)v4);
  }
  return result;
}

unint64_t partial apply for specialized closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[10];
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_OWORD *)(v3 + 144);
  v10[8] = *(_OWORD *)(v3 + 128);
  v10[9] = v4;
  v11 = *(_QWORD *)(v3 + 160);
  v5 = *(_OWORD *)(v3 + 80);
  v10[4] = *(_OWORD *)(v3 + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(v3 + 112);
  v10[6] = *(_OWORD *)(v3 + 96);
  v10[7] = v6;
  v7 = *(_OWORD *)(v3 + 16);
  v10[0] = *(_OWORD *)v3;
  v10[1] = v7;
  v8 = *(_OWORD *)(v3 + 48);
  v10[2] = *(_OWORD *)(v3 + 32);
  v10[3] = v8;
  return specialized closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(a1, v2, (uint64_t)v10);
}

uint64_t partial apply for specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  uint64_t v5;

  return specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(a2, a3, a4, a5, *(unint64_t **)(v5 + 16), **(_QWORD **)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
}

size_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg50118_s4VDAF16Prio3PublicShareV4from9parameterACyxq_Gqd___Sb19isJointRandRequired_Si16numOfAggregatorstSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E8VSiXEfU_s10ArraySliceVys5UInt8VGSiTf1cn_n(size_t result, int64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_59;
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v9 = result;
  v25 = MEMORY[0x24BEE4AF8];
  result = (size_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a4 < 0)
    goto LABEL_60;
  if (a2 >= v9 && (v4 & 0x8000000000000000) == 0)
  {
    v5 = v25;
    v23 = a4;
    while (1)
    {
      v11 = a3[2];
      v10 = a3[3];
      v12 = v10 >> 1;
      v13 = (v10 >> 1) - v11;
      if (__OFSUB__(v10 >> 1, v11))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v14 = a3[1];
      if (!a4 || v13 < 0 || (v15 = v10 >> 1, v13 >= a4))
      {
        v15 = v11 + a4;
        if (__OFADD__(v11, a4))
          goto LABEL_55;
      }
      if (v15 < v11)
        goto LABEL_49;
      if (v12 < v11)
        goto LABEL_50;
      if (v12 < v15)
        goto LABEL_51;
      if (v15 < 0)
        goto LABEL_52;
      if (!a4 || v13 < 0 || v13 >= a4)
      {
        if (__OFADD__(v11, a4))
          goto LABEL_56;
        if (v12 < v11 + a4)
          goto LABEL_54;
        v12 = v11 + a4;
      }
      if (v12 < v11)
        goto LABEL_53;
      a3[2] = v12;
      if ((v10 & 1) == 0)
      {
        v16 = v15 - v11;
        v17 = __OFSUB__(v15, v11);
        result = swift_unknownObjectRetain();
        if (v17)
          goto LABEL_57;
        if (v16)
        {
LABEL_29:
          v24 = v14;
          if (v16 < 1)
          {
            v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
            if (v11 == v15)
              goto LABEL_62;
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
            v18 = (_QWORD *)swift_allocObject();
            result = _swift_stdlib_malloc_size(v18);
            v18[2] = v16;
            v18[3] = 2 * result - 64;
            if (v11 == v15)
              goto LABEL_62;
          }
          memcpy(v18 + 4, (const void *)(v24 + v11), v16);
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      v19 = swift_dynamicCastClass();
      if (!v19)
      {
        swift_unknownObjectRelease();
        v19 = MEMORY[0x24BEE4AF8];
      }
      v20 = *(_QWORD *)(v19 + 16);
      result = swift_release();
      v16 = v15 - v11;
      if (__OFSUB__(v15, v11))
        goto LABEL_58;
      if (v20 != v16)
        break;
      v18 = (_QWORD *)swift_dynamicCastClass();
      a4 = v23;
      if (!v18)
      {
        swift_unknownObjectRelease();
LABEL_38:
        v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
LABEL_41:
      result = swift_unknownObjectRelease();
      v22 = *(_QWORD *)(v25 + 16);
      v21 = *(_QWORD *)(v25 + 24);
      if (v22 >= v21 >> 1)
        result = (size_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1);
      *(_QWORD *)(v25 + 16) = v22 + 1;
      *(_QWORD *)(v25 + 8 * v22 + 32) = v18;
      if (!--v4)
        return v5;
    }
    result = swift_unknownObjectRelease();
    a4 = v23;
    if (v16)
      goto LABEL_29;
    goto LABEL_38;
  }
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

uint64_t Prio3PublicShare.jointRandParts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3PublicShare.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3 && (specialized static Array<A>.== infix(_:_:)(v2, v3) & 1) != 0)
      return 1;
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t Prio3PublicShare.init(jointRandParts:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Prio3PublicShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, size_t *a7@<X8>, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  size_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v13 = MEMORY[0x24BDAC7A8](a1, a2);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v19 & 1) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v13, a5);
    *a7 = 0;
    return result;
  }
  v33 = v14;
  v34 = v15;
  v32 = a7;
  v37 = v16;
  v21 = v13;
  result = (*(uint64_t (**)(unint64_t, uint64_t))(a6 + 8))(a4, a6);
  v22 = a3;
  v23 = result * a3;
  v36 = v22;
  if ((unsigned __int128)(result * (__int128)v22) >> 64 == v23 >> 63)
  {
    v24 = result;
    v35 = *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8);
    if (v23 != dispatch thunk of Collection.count.getter())
    {
      v38 = 0;
      v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      v38 = v33;
      v39 = a4;
      v40 = v34;
      v41 = a6;
      type metadata accessor for Prio3PublicShare();
    }
    v25 = v21;
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v18, v25, a5);
    result = ArraySlice.init<A>(_:)();
    v38 = result;
    v39 = v27;
    v40 = v28;
    v41 = v29;
    if ((v36 & 0x8000000000000000) == 0)
    {
      v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg50118_s4VDAF16Prio3PublicShareV4from9parameterACyxq_Gqd___Sb19isJointRandRequired_Si16numOfAggregatorstSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E8VSiXEfU_s10ArraySliceVys5UInt8VGSiTf1cn_n(0, v36, &v38, v24);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, a5);
      result = swift_unknownObjectRelease();
      *v32 = v30;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void type metadata accessor for Prio3PublicShare()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PublicShare<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, size_t *a6@<X8>)
{
  return Prio3PublicShare.init<A>(from:parameter:)(a1, *a2, a2[1], *(_QWORD *)(a5 + 24), a3, *(_QWORD *)(a5 + 40), a6, a4);
}

void Prio3PublicShare.encodedLength.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;

  v1 = *v0;
  if (!v1)
    return;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v4 = (char *)MEMORY[0x24BEE4AF8];
    v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v8)
      goto LABEL_10;
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 8 * v3 + 32) + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v7 = *((_QWORD *)v4 + 2);
    v6 = *((_QWORD *)v4 + 3);
    if (v7 >= v6 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    ++v3;
    *((_QWORD *)v4 + 2) = v7 + 1;
    *(_QWORD *)&v4[8 * v7 + 32] = v5;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)v4 + 2);
  if (!v8)
    goto LABEL_15;
LABEL_10:
  v9 = 0;
  v10 = (uint64_t *)(v4 + 32);
  while (1)
  {
    v11 = *v10++;
    v12 = __OFADD__(v9, v11);
    v9 += v11;
    if (v12)
      break;
    if (!--v8)
      goto LABEL_15;
  }
  __break(1u);
}

uint64_t Prio3PublicShare.encode<A>(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)v0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
    if (v1)
    {
      swift_bridgeObjectRetain();
      v2 = 0;
      do
      {
        ++v2;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
        lazy protocol witness table accessor for type [UInt8] and conformance [A]();
        dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      }
      while (v1 != v2);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3PublicShare<A, B>()
{
  return Prio3PublicShare.encode<A>(into:)();
}

uint64_t FullyLinearProof.proofLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = (*(uint64_t (**)(void))(a2 + 104))();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = v16;
    v6 = (_QWORD *)(v2 + 64);
    do
    {
      v7 = *(v6 - 4);
      v8 = v7 + *v6;
      if (__OFADD__(v7, *v6))
      {
        __break(1u);
        goto LABEL_16;
      }
      v10 = *(_QWORD *)(v16 + 16);
      v9 = *(_QWORD *)(v16 + 24);
      if (v10 >= v9 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
      v6 += 5;
      *(_QWORD *)(v16 + 16) = v10 + 1;
      *(_QWORD *)(v16 + 8 * v10 + 32) = v8;
      --v3;
    }
    while (v3);
    result = swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v16 + 16);
    if (!v11)
      goto LABEL_13;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BEE4AF8];
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v11)
    {
LABEL_13:
      v12 = 0;
LABEL_14:
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  v12 = 0;
  v13 = (uint64_t *)(v5 + 32);
  while (1)
  {
    v14 = *v13++;
    v15 = __OFADD__(v12, v14);
    v12 += v14;
    if (v15)
      break;
    if (!--v11)
      goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t FullyLinearProof.queryRandLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((*(uint64_t (**)(void))(a2 + 104))() + 16);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t FullyLinearProof.verifierLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = (*(uint64_t (**)(void))(a2 + 104))();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = 32;
    v6 = v16;
    do
    {
      v7 = *(_QWORD *)(v2 + v5);
      v8 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_17;
      }
      v10 = *(_QWORD *)(v16 + 16);
      v9 = *(_QWORD *)(v16 + 24);
      if (v10 >= v9 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v16 + 16) = v10 + 1;
      *(_QWORD *)(v16 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v3;
    }
    while (v3);
    result = swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v16 + 16);
    if (!v11)
      goto LABEL_13;
    goto LABEL_8;
  }
  result = swift_bridgeObjectRelease();
  v6 = MEMORY[0x24BEE4AF8];
  v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (v11)
  {
LABEL_8:
    v12 = 0;
    v13 = (uint64_t *)(v6 + 32);
    while (1)
    {
      v14 = *v13++;
      v15 = __OFADD__(v12, v14);
      v12 += v14;
      if (v15)
        break;
      if (!--v11)
        goto LABEL_14;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_13:
  v12 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  result = v12 + 1;
  if (__OFADD__(v12, 1))
LABEL_18:
    __break(1u);
  return result;
}

uint64_t FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *, _QWORD, uint64_t), uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t Gadget;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(_BYTE *, _QWORD, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(_BYTE *, _QWORD, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t AssociatedConformanceWitness;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  _QWORD v115[4];
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v102 = a6;
  v103 = a5;
  v105 = a4;
  AssociatedConformanceWitness = a3;
  v111 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v104 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, AssociatedTypeWitness);
  v112 = (uint64_t)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v113 = (char *)&v96 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20, v22);
  v99 = (char *)&v96 - v24;
  v100 = *(uint64_t **)(a9 - 8);
  MEMORY[0x24BDAC7A8](v23, v25);
  v27 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = a2;
  v29 = v28;
  v30 = MEMORY[0x24BD00400](a2);
  v31 = *(uint64_t (**)(unint64_t, uint64_t))(a10 + 48);
  v109 = v12;
  v107 = a7;
  if (v30 != v31(a7, a10))
  {
    v116 = 0;
    v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v116 = 0xD00000000000001BLL;
    v117 = 0x8000000249C307C0;
    v115[0] = v30;
LABEL_13:
    v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    v61._countAndFlagsBits = 540877088;
    v61._object = (void *)0xE400000000000000;
    String.append(_:)(v61);
    v115[0] = v31(v107, a10);
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63 = v116;
    v64 = v117;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v65 = v63;
    *(_QWORD *)(v65 + 8) = v64;
    *(_BYTE *)(v65 + 16) = 2;
    return swift_willThrow();
  }
  v110 = a8;
  v97 = a12;
  v32 = dispatch thunk of Collection.count.getter();
  v31 = *(uint64_t (**)(unint64_t, uint64_t))(a10 + 56);
  if (v32 != v31(v107, a10))
  {
    v116 = 0;
    v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v116 = 0xD000000000000015;
    v117 = 0x8000000249C312A0;
    v115[0] = dispatch thunk of Collection.count.getter();
    goto LABEL_13;
  }
  v33 = AssociatedConformanceWitness;
  v34 = MEMORY[0x24BD00400](v105, v29);
  v31 = *(uint64_t (**)(unint64_t, uint64_t))(a10 + 96);
  if (v34 != v31(v107, a10))
  {
    v116 = 0;
    v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v59 = "Invalid queryRandLength: ";
LABEL_12:
    v116 = 0xD000000000000019;
    v117 = (unint64_t)(v59 - 32) | 0x8000000000000000;
    v115[0] = v34;
    goto LABEL_13;
  }
  v34 = MEMORY[0x24BD00400](v103, v29);
  v31 = *(uint64_t (**)(unint64_t, uint64_t))(a10 + 80);
  result = v31(v107, a10);
  if (v34 != result)
  {
    v116 = 0;
    v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v59 = "Invalid jointRandLength: ";
    goto LABEL_12;
  }
  v36 = v109;
  v37 = v107;
  if (v102 < 1)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }
  ((void (*)(char *, uint64_t, uint64_t))v100[2])(v27, v33, a9);
  v116 = ArraySlice.init<A>(_:)();
  v117 = v38;
  v118 = v39;
  v119 = v40;
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 104))(v37, a10);
  v100 = &v96;
  v120 = v41;
  v43 = MEMORY[0x24BDAC7A8](v41, v42);
  v44 = v110;
  *(&v96 - 10) = v37;
  *(&v96 - 9) = v44;
  *(&v96 - 8) = a9;
  *(&v96 - 7) = a10;
  v45 = v97;
  *(&v96 - 6) = a11;
  *(&v96 - 5) = v45;
  v46 = v105;
  *(&v96 - 4) = v36;
  *(&v96 - 3) = v46;
  *(&v96 - 2) = (uint64_t)&v116;
  MEMORY[0x24BDAC7A8](v43, v47);
  *(&v96 - 8) = v37;
  *(&v96 - 7) = v48;
  *(&v96 - 6) = a9;
  *(&v96 - 5) = a10;
  v108 = a11;
  *(&v96 - 4) = a11;
  *(&v96 - 3) = v49;
  *(&v96 - 2) = (uint64_t)partial apply for closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:);
  *(&v96 - 1) = v50;
  v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[GadgetParameters]>);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Gadget = type metadata accessor for QueryGadget(0, v29, AssociatedConformanceWitness, v51);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v54 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type EnumeratedSequence<[GadgetParameters]> and conformance EnumeratedSequence<A>, &demangling cache variable for type metadata for EnumeratedSequence<[GadgetParameters]>, MEMORY[0x24BEE2FC0]);
  v55 = v101;
  v56 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned Int, @in_guaranteed GadgetParameters) -> (@owned QueryGadget<A.FullyLinearProof.F>, @error @owned Error), (uint64_t)(&v96 - 10), v96, Gadget, v53, v54, MEMORY[0x24BEE3F20], (uint64_t)v115);
  v57 = swift_bridgeObjectRelease();
  if (v55)
    return swift_unknownObjectRelease();
  v100 = &v96;
  v101 = v56;
  v115[0] = v56;
  MEMORY[0x24BDAC7A8](v57, v58);
  v66 = v110;
  *(&v96 - 6) = v37;
  *(&v96 - 5) = v66;
  *(&v96 - 4) = a9;
  *(&v96 - 3) = a10;
  v67 = v97;
  *(&v96 - 2) = v108;
  *(&v96 - 1) = v67;
  v68 = type metadata accessor for Array();
  v70 = type metadata accessor for GadgetEvaluation(0, v29, AssociatedConformanceWitness, v69);
  v71 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v68);
  v73 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:), (uint64_t)(&v96 - 8), v68, v70, MEMORY[0x24BEE4078], v71, MEMORY[0x24BEE40A8], v72);
  v74 = v99;
  (*(void (**)(uint64_t, void (*)(_BYTE *, _QWORD, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 136))(v98, v103, v102, v73, v37, a10);
  swift_bridgeObjectRelease();
  v100 = 0;
  v75 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v104 + 16);
  v109 = v29;
  v103 = v75;
  v75(v113, v74, v29);
  dispatch thunk of RangeReplaceableCollection.append(_:)();
  v76 = v101;
  result = MEMORY[0x24BD00400](v101, Gadget);
  if (result < 0)
    goto LABEL_30;
  v77 = Gadget;
  v78 = v76;
  if (result)
  {
    v79 = 0;
    v102 = result;
    while (v79 != result)
    {
      v82 = v79;
      Array.subscript.getter();
      v115[3] = v115[0];
      v83 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for QueryGadget<A>, v77);
      v107 = Gadget.wirePolynomialLength.getter(v77, v83);
      swift_release();
      Array.subscript.getter();
      v84 = v82;
      v85 = v78;
      v86 = v77;
      Array.subscript.getter();
      v87 = QueryGadget.arity.getter();
      result = swift_release();
      if (v87 < 0)
        goto LABEL_28;
      if (v87)
      {
        v88 = 0;
        do
        {
          v89 = v88 + 1;
          v90 = v86;
          Array.subscript.getter();
          swift_beginAccess();
          v91 = v109;
          type metadata accessor for Array();
          Array.subscript.getter();
          v92 = v114;
          swift_endAccess();
          swift_release();
          v93 = AssociatedConformanceWitness;
          static Polynomial.interpolateUsingRootsOfUnity(values:length:)(v92, v107, v91, AssociatedConformanceWitness, v115);
          swift_bridgeObjectRelease();
          v95 = type metadata accessor for Polynomial(0, v91, v93, v94);
          Polynomial.evaluate(at:)(v112, v95, v113);
          swift_bridgeObjectRelease();
          dispatch thunk of RangeReplaceableCollection.append(_:)();
          v86 = v90;
          v88 = v89;
        }
        while (v87 != v89);
      }
      Array.subscript.getter();
      v80 = v109;
      v103(v113, v115[0] + *(_QWORD *)(*(_QWORD *)v115[0] + 112), v109);
      swift_release();
      dispatch thunk of RangeReplaceableCollection.append(_:)();
      v81 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
      v81(v112, v80);
      v79 = v84 + 1;
      result = v102;
      v77 = v86;
      v78 = v85;
      if (v84 + 1 == v102)
      {
        v74 = v99;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v81 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
LABEL_26:
  v81((uint64_t)v74, v109);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t FullyLinearProof.decide<A>(verifier:)(uint64_t (*a1)(uint64_t, _QWORD *), uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _QWORD *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, _QWORD *);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  char v39;
  void (*v40)(_BYTE *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(unint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  _BYTE *v60;
  void (*v61)(_BYTE *, uint64_t);
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[16];
  uint64_t v69;
  void (*v70)(unint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD *);
  void (*v71)(_BYTE *, uint64_t);
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, _QWORD *);
  _BYTE *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v76 = &v68[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = &v68[-v14];
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v73 = &v68[-v18];
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v72 = &v68[-v21];
  v22 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v20, v23);
  v25 = &v68[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v75 = a1;
  *(_QWORD *)&v78 = a3;
  v26 = dispatch thunk of Collection.count.getter();
  v27 = (uint64_t (*)(uint64_t, _QWORD *))a4[8];
  v77 = a2;
  v28 = a2;
  v29 = v27;
  if (v26 != v27(v28, a4))
  {
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v82 = 0xD000000000000018;
    v83 = 0x8000000249C31280;
    *(_QWORD *)&v79 = dispatch thunk of Collection.count.getter();
    v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._countAndFlagsBits = 540877088;
    v64._object = (void *)0xE400000000000000;
    String.append(_:)(v64);
    *(_QWORD *)&v79 = v29(v77, a4);
    v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v66 = v82;
    v59 = v83;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v67 = v66;
    *(_QWORD *)(v67 + 8) = v59;
    *(_BYTE *)(v67 + 16) = 2;
    swift_willThrow();
    return v59 & 1;
  }
  v86 = v15;
  (*(void (**)(_BYTE *, uint64_t (*)(uint64_t, _QWORD *), _QWORD))(v22 + 16))(v25, v75, v78);
  v82 = ArraySlice.init<A>(_:)();
  v83 = v30;
  v84 = v31;
  v85 = v32;
  v33 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v34 = v72;
  dispatch thunk of IteratorProtocol.next()();
  v35 = type metadata accessor for ArraySlice();
  v36 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2198], v35);
  v37 = v73;
  RangeReplaceableCollection<>.removeFirst()();
  v38 = *(_BYTE **)(v33 + 8);
  v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  v40 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
  v40(v37, AssociatedTypeWitness);
  v40(v34, AssociatedTypeWitness);
  v41 = v77;
  if ((v39 & 1) == 0)
  {
    LOBYTE(v59) = 0;
LABEL_13:
    swift_unknownObjectRelease();
    return v59 & 1;
  }
  v42 = AssociatedTypeWitness;
  v74 = v36;
  v75 = (uint64_t (*)(uint64_t, _QWORD *))a4[13];
  v43 = *(_QWORD *)(v75(v77, a4) + 16);
  swift_bridgeObjectRelease();
  if (!v43)
  {
    LOBYTE(v59) = 1;
    goto LABEL_13;
  }
  v72 = v38;
  v73 = (_BYTE *)v35;
  v44 = 0;
  v45 = (void (*)(unint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD *))a4[18];
  v69 = v43 - 1;
  v70 = v45;
  v46 = 32;
  v71 = v40;
  while (1)
  {
    result = v75(v41, a4);
    if (v44 >= *(_QWORD *)(result + 16))
      break;
    v48 = v42;
    v49 = *(_QWORD *)(result + v46);
    swift_bridgeObjectRelease();
    v50 = (uint64_t)v73;
    v51 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v73);
    RandomAccessCollection<>.popFirst(_:)(v49, v50);
    v52 = a4;
    v53 = v80;
    v54 = v81;
    v78 = v79;
    RangeReplaceableCollection<>.removeFirst()();
    v79 = v78;
    v80 = v53;
    v81 = v54;
    v42 = v48;
    v55 = v76;
    a4 = v52;
    v56 = v50;
    v57 = v51;
    v41 = v77;
    v58 = v86;
    v70(v44, &v79, v56, v57, v77, v52);
    LOBYTE(v59) = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_unknownObjectRelease();
    v60 = v55;
    v61 = v71;
    v71(v60, v42);
    v61(v58, v42);
    if ((v59 & 1) != 0)
    {
      v46 += 40;
      if (v69 != v44++)
        continue;
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t FullyLinearProof.proveRandLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = (*(uint64_t (**)(void))(a2 + 104))();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v15;
    v5 = *(_QWORD *)(v15 + 16);
    v6 = 32;
    do
    {
      v7 = *(_QWORD *)(v2 + v6);
      v8 = *(_QWORD *)(v15 + 24);
      if (v5 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v5 + 1, 1);
      *(_QWORD *)(v15 + 16) = v5 + 1;
      *(_QWORD *)(v15 + 8 * v5 + 32) = v7;
      v6 += 40;
      ++v5;
      --v3;
    }
    while (v3);
    result = swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v15 + 16);
    if (v10)
    {
LABEL_7:
      v11 = 0;
      v12 = (uint64_t *)(v4 + 32);
      while (1)
      {
        v13 = *v12++;
        v14 = __OFADD__(v11, v13);
        v11 += v13;
        if (v14)
          break;
        if (!--v10)
          goto LABEL_13;
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v4 = MEMORY[0x24BEE4AF8];
    v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v10)
      goto LABEL_7;
  }
  v11 = 0;
LABEL_13:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  const char *v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[5];
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v110 = a8;
  v111 = a6;
  v109 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v104 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v15);
  v108 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v18);
  v106 = (uint64_t)&v92 - v19;
  v112 = a2;
  v20 = MEMORY[0x24BD00400](a2, AssociatedTypeWitness);
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 48);
  v103 = v8;
  if (v20 != v21(a5, a7))
  {
    v114 = 0;
    v115 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v114 = 0xD00000000000001BLL;
    v115 = 0x8000000249C307C0;
LABEL_10:
    v113[0] = v20;
    v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 540877088;
    v56._object = (void *)0xE400000000000000;
    String.append(_:)(v56);
    v113[0] = v21(a5, a7);
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58 = v114;
    v59 = v115;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v60 = v58;
    *(_QWORD *)(v60 + 8) = v59;
    *(_BYTE *)(v60 + 16) = 2;
    return swift_willThrow();
  }
  v20 = MEMORY[0x24BD00400](a3, AssociatedTypeWitness);
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 88);
  if (v20 != v21(a5, a7))
  {
    v114 = 0;
    v115 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v54 = "Invalid proveRandLength: ";
LABEL_9:
    v114 = 0xD000000000000019;
    v115 = (unint64_t)(v54 - 32) | 0x8000000000000000;
    goto LABEL_10;
  }
  v20 = MEMORY[0x24BD00400](a4, AssociatedTypeWitness);
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 80);
  if (v20 != v21(a5, a7))
  {
    v114 = 0;
    v115 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v54 = "Invalid jointRandLength: ";
    goto LABEL_9;
  }
  v113[0] = a3;
  v22 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  v23 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v22);
  v100 = v22;
  v96 = v23;
  v114 = ArraySlice.init<A>(_:)();
  v115 = v24;
  v116 = v25;
  v117 = v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 104);
  v95 = a4;
  v101 = v27;
  v28 = v27(a5, a7);
  v94 = &v92;
  v113[0] = v28;
  MEMORY[0x24BDAC7A8](v28, v29);
  v31 = v110;
  v30 = v111;
  *(&v92 - 6) = a5;
  *(&v92 - 5) = v30;
  *(&v92 - 4) = a7;
  *(&v92 - 3) = v31;
  *(&v92 - 2) = (uint64_t)&v114;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GadgetParameters]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v35 = type metadata accessor for GadgetWireInputs(0, AssociatedTypeWitness, AssociatedConformanceWitness, v34);
  v36 = lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance Slice<A>(&lazy protocol witness table cache variable for type [GadgetParameters] and conformance [A], &demangling cache variable for type metadata for [GadgetParameters], MEMORY[0x24BEE12E0]);
  v37 = v32;
  v38 = MEMORY[0x24BEE4078];
  v39 = v107;
  v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:), (uint64_t)(&v92 - 8), v37, v35, MEMORY[0x24BEE4078], v36, MEMORY[0x24BEE40A8], v40);
  v93 = v39;
  v42 = swift_bridgeObjectRelease();
  v94 = &v92;
  v102 = v41;
  v113[0] = v41;
  MEMORY[0x24BDAC7A8](v42, v43);
  v44 = v111;
  *(&v92 - 4) = a5;
  *(&v92 - 3) = v44;
  *(&v92 - 2) = a7;
  *(&v92 - 1) = v31;
  v97 = v35;
  v45 = type metadata accessor for Array();
  v107 = AssociatedConformanceWitness;
  v47 = type metadata accessor for GadgetEvaluation(0, AssociatedTypeWitness, AssociatedConformanceWitness, v46);
  v48 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E0], v45);
  v49 = v93;
  v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:), (uint64_t)(&v92 - 6), v45, v47, v38, v48, MEMORY[0x24BEE40A8], v50);
  v52 = v106;
  (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 136))(v112, v95, 1, v51, a5, a7);
  if (v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  v61 = AssociatedTypeWitness;
  v92 = 0;
  v95 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
  v95(v52, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  result = MEMORY[0x24BD00400](v102, v97);
  if ((result & 0x8000000000000000) == 0)
  {
    v62 = v101;
    if (!result)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    v63 = 0;
    v94 = *(uint64_t **)(a7 + 152);
    v99 = a7;
    v98 = a5;
    v93 = result;
    v105 = v61;
    while (v63 != result)
    {
      result = v62(a5, a7);
      if (v63 >= *(_QWORD *)(result + 16))
        goto LABEL_29;
      v64 = *(_QWORD *)(result + 40 * v63 + 56);
      swift_bridgeObjectRelease();
      v106 = type metadata accessor for Polynomial(0, v61, v107, v65);
      v118 = Array.init()();
      result = v62(a5, a7);
      if (v63 >= *(_QWORD *)(result + 16))
        goto LABEL_30;
      v66 = v63;
      v67 = *(_QWORD *)(result + 40 * v63 + 32);
      result = swift_bridgeObjectRelease();
      if (v67 < 0)
        goto LABEL_31;
      v68 = v97;
      if (v67)
      {
        v69 = v64;
        v70 = 0;
        v104 = v67;
        do
        {
          v112 = v70 + 1;
          v71 = v68;
          Array.subscript.getter();
          swift_beginAccess();
          Array.subscript.getter();
          v72 = v66;
          v73 = v113[4];
          swift_endAccess();
          swift_release();
          static Polynomial.interpolateUsingRootsOfUnity(values:length:)(v73, v69, v105, v107, v113);
          swift_bridgeObjectRelease();
          type metadata accessor for Array();
          Array.append(_:)();
          Array.subscript.getter();
          swift_beginAccess();
          Array.subscript.getter();
          Array.subscript.getter();
          swift_endAccess();
          swift_release();
          v66 = v72;
          swift_bridgeObjectRelease();
          dispatch thunk of RangeReplaceableCollection.append(_:)();
          v68 = v71;
          v70 = v112;
        }
        while (v104 != v112);
      }
      v61 = v105;
      v74 = v98;
      v75 = v99;
      result = v101(v98, v99);
      if (v66 >= *(_QWORD *)(result + 16))
        goto LABEL_32;
      v76 = v66;
      v77 = *(_QWORD *)(result + 40 * v66 + 64);
      swift_bridgeObjectRelease();
      ((void (*)(_QWORD *__return_ptr, unint64_t, uint64_t, uint64_t, uint64_t))v94)(v113, v66, v118, v74, v75);
      swift_bridgeObjectRelease();
      v78 = v113[0];
      v79 = v106;
      result = Polynomial.degree.getter(v106, v80);
      v81 = result + 1;
      if (__OFADD__(result, 1))
        goto LABEL_33;
      v113[0] = v78;
      Polynomial.coefficients.getter(v79);
      result = swift_bridgeObjectRelease();
      if (v81 < 0)
        goto LABEL_34;
      v82 = ArraySlice.subscript.getter();
      v84 = v83;
      v86 = v85;
      v88 = v87;
      swift_unknownObjectRelease();
      v113[0] = v82;
      v113[1] = v84;
      v113[2] = v86;
      v113[3] = v88;
      v89 = type metadata accessor for ArraySlice();
      MEMORY[0x24BD00BD4](MEMORY[0x24BEE2180], v89);
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      v90 = (uint64_t)v108;
      result = dispatch thunk of IteratorProtocol.next()();
      if (__OFSUB__(v77, v81))
        goto LABEL_35;
      v63 = v76 + 1;
      v91 = specialized Array.init(repeating:count:)(v90, v77 - v81, v61);
      v95(v90, v61);
      v113[0] = v91;
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      result = v93;
      a5 = v98;
      v62 = v101;
      a7 = v99;
      if (v63 == v93)
        goto LABEL_27;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidOutput(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v3 = v2;
  v4 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BD00400](a1._rawValue, AssociatedTypeWitness);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 72);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000016;
    *(_QWORD *)(v12 + 8) = 0x8000000249C30730;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidMeasurement(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v3 = v2;
  v4 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BD00400](a1._rawValue, AssociatedTypeWitness);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 48);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v12 = 0xD00000000000001BLL;
    *(_QWORD *)(v12 + 8) = 0x8000000249C307C0;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidJointRand(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v3 = v2;
  v4 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BD00400](a1._rawValue, AssociatedTypeWitness);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 80);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000019;
    *(_QWORD *)(v12 + 8) = 0x8000000249C31120;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidGadgetEvaluationKinds(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;

  v3 = v2;
  v4 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for GadgetEvaluation(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = MEMORY[0x24BD00400](a1._rawValue, v9);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 104);
  v12 = *(_QWORD *)(v11(v4, v3) + 16);
  swift_bridgeObjectRelease();
  if (v10 != v12)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 540877088;
    v14._object = (void *)0xE400000000000000;
    String.append(_:)(v14);
    v11(v4, v3);
    v15._countAndFlagsBits = MEMORY[0x24BD00394]();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v16 = 0x2064696C61766E49;
    *(_QWORD *)(v16 + 8) = 0xEF203A746E756F63;
    *(_BYTE *)(v16 + 16) = 2;
    swift_willThrow();
  }
}

uint64_t protocol witness for FullyLinearProof.prove(measurement:proveRand:jointRand:) in conformance PINECircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FullyLinearProof.prove(measurement:proveRand:jointRand:)(a1, a2, a3, a4, a5);
}

uint64_t FullyLinearProof.prove(measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::Int v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  v17 = Array.init()();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  v11 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v10);
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 168);
  v13 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E8], v11);
  v12(&v17, a1, a2, a3, v11, v13, a4, a5);
  v14 = v17;
  if (v16)
    swift_bridgeObjectRelease();
  return v14;
}

uint64_t protocol witness for FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:) in conformance PINECircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(a1, a2, a3, a4, a7, a5, a8, a6);
}

uint64_t protocol witness for FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:) in conformance PINECircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Swift::Int v12;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_getAssociatedTypeWitness();
  v22 = Array.init()();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 64))(a6, a7);
  v13 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v12);
  v21 = a2;
  v14 = *(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 184);
  v15 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E8], v13);
  v16 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v13);
  v14(&v22, a1, &v21, a3, a4, a5, v13, v13, v15, v16, a6, a7);
  if (v20)
    return swift_bridgeObjectRelease();
  else
    return v22;
}

uint64_t protocol witness for FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:) in conformance PINECircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *, _QWORD, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12)
{
  return FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2, a3, a4, a5, a6, a11, a7, a8, a12, a9, a10);
}

uint64_t protocol witness for FullyLinearProof.decide<A>(verifier:) in conformance PINECircuit<A, B>(uint64_t (*a1)(uint64_t, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return FullyLinearProof.decide<A>(verifier:)(a1, a4, a2, a5) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FLPTypeError(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidProveRand(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v3 = v2;
  v4 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BD00400](a1._rawValue, AssociatedTypeWitness);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 88);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000019;
    *(_QWORD *)(v12 + 8) = 0x8000000249C313C0;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

uint64_t FullyLinearProof.assertValidProof<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;

  v6 = dispatch thunk of Collection.count.getter();
  v7 = a2;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  result = v8(v7, a4);
  if (v6 != result)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    dispatch thunk of Collection.count.getter();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 540877088;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v8(v7, a4);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000015;
    *(_QWORD *)(v13 + 8) = 0x8000000249C312A0;
    *(_BYTE *)(v13 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidQueryRand(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v3 = v2;
  v4 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BD00400](a1._rawValue, AssociatedTypeWitness);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 96);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000019;
    *(_QWORD *)(v12 + 8) = 0x8000000249C312C0;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

uint64_t FullyLinearProof.assertValidVerifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;

  v6 = dispatch thunk of Collection.count.getter();
  v7 = a2;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  result = v8(v7, a4);
  if (v6 != result)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    dispatch thunk of Collection.count.getter();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 540877088;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v8(v7, a4);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000018;
    *(_QWORD *)(v13 + 8) = 0x8000000249C31280;
    *(_BYTE *)(v13 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _OWORD v12[4];

  v3 = *a1;
  v4 = a1[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for GadgetWireInputs(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v8 = type metadata accessor for ArraySlice();
  v9 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v8);
  RandomAccessCollection<>.popFirst(_:)(v3, v8);
  v12[0] = v12[2];
  v12[1] = v12[3];
  v10 = specialized GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(v4, (uint64_t)v12, v8, v9);
  result = swift_unknownObjectRelease();
  *a2 = v10;
  return result;
}

uint64_t closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  Swift::String v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;

  v50 = a5;
  v66 = (char *)a4;
  v55 = a1;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v51 = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)&v46 - v8;
  v10 = swift_checkMetadataState();
  v53 = *(void (**)(uint64_t, uint64_t))(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v12, v15);
  v18 = (char *)&v46 - v17;
  MEMORY[0x24BDAC7A8](v16, v19);
  v21 = (char *)&v46 - v20;
  v49 = *a2;
  v48 = a2[1];
  v22 = a2[3];
  v47 = a2[2];
  v23 = a2[4];
  Array.subscript.getter();
  v55 = v22;
  *(_QWORD *)&v56 = v22;
  v24 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v25 = lazy protocol witness table accessor for type Int and conformance Int();
  MEMORY[0x24BD00694](&v56, MEMORY[0x24BEE1768], v25, AssociatedTypeWitness, v24);
  v66 = v21;
  v26 = AssociatedConformanceWitness;
  FieldElement.pow(_:)((uint64_t)v9, v10, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v9, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v26 + 72))(v10, v26);
  v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v28 = (void (*)(char *, uint64_t))*((_QWORD *)v53 + 1);
  v28(v14, v10);
  v28(v18, v10);
  if ((v27 & 1) != 0)
  {
    *(_QWORD *)&v56 = 0;
    *((_QWORD *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v29._countAndFlagsBits = 0xD00000000000001ALL;
    v29._object = (void *)0x8000000249C31300;
    String.append(_:)(v29);
    v30 = (uint64_t)v66;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v31._countAndFlagsBits = 544434464;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    *(_QWORD *)&v63 = v55;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._object = (void *)0x8000000249C31320;
    v33._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v33);
    v35 = *((_QWORD *)&v56 + 1);
    v34 = v56;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v36 = v34;
    *(_QWORD *)(v36 + 8) = v35;
    *(_BYTE *)(v36 + 16) = 3;
    swift_willThrow();
    v28((char *)v30, v10);
  }
  else
  {
    v37 = type metadata accessor for ArraySlice();
    v38 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v37);
    v39 = v49;
    RandomAccessCollection<>.popFirst(_:)(v49, v37);
    v51 = v58;
    v52 = v57;
    v46 = v56;
    RandomAccessCollection<>.popFirst(_:)(v23, v37);
    v40 = v23;
    v53 = (void (*)(uint64_t, uint64_t))v28;
    v42 = v57;
    v41 = v58;
    type metadata accessor for QueryGadget(0, v10, v26, v43);
    v63 = v56;
    v64 = v42;
    v65 = v41;
    v60 = v46;
    v61 = v52;
    v62 = v51;
    *(_QWORD *)&v56 = v39;
    *((_QWORD *)&v56 + 1) = v48;
    v57 = v47;
    v58 = v55;
    v59 = v40;
    v44 = (uint64_t)v66;
    v34 = specialized QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)((uint64_t)&v63, (uint64_t)&v60, (uint64_t)v66, (uint64_t *)&v56, v37, v37, v38, v38);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v53(v44, v10);
  }
  return v34;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  Swift::Int v39;
  char *v40;
  uint64_t result;
  char *v42;
  char *v43;
  char *v44;
  _QWORD v45[2];
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v48 = a8;
  v49 = a5;
  v9 = v8;
  v61 = a4;
  v62 = a1;
  v63 = a2;
  v47 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1, a2);
  v60 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v12);
  v59 = (char *)v45 - v13;
  v53 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v19);
  v46 = (char *)v45 - v20;
  v21 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v21 - 8);
  v51 = v21;
  v23 = MEMORY[0x24BDAC7A8](v21, v22);
  v57 = (char *)v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23, v25);
  v28 = (char *)v45 - v27;
  v30 = MEMORY[0x24BDAC7A8](v26, v29);
  v45[1] = (char *)v45 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v30, v32);
  v56 = *((_QWORD *)v16 - 1);
  MEMORY[0x24BDAC7A8](v33, v34);
  v55 = (char *)v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64, v36);
  v54 = (char *)v45 - v37;
  v38 = v16;
  v39 = dispatch thunk of Sequence.underestimatedCount.getter();
  v65 = Array.init()();
  v61 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v39);
  (*(void (**)(char *, _QWORD, _QWORD *))(v56 + 16))(v55, v58, v16);
  v40 = v54;
  v58 = v38;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v39 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v39)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v28, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v62(v28, v60);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v60, v49);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v28, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v28, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v39)
      {
        v42 = v57;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v42 = v57;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  v60 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v42, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v57;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    return v65;
  }
  else
  {
    v58 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v46;
    v43 = v57;
    while (1)
    {
      v58(v44, v43, AssociatedTypeWitness);
      v62(v44, v59);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v59, v49);
  }
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  *v3 = result;
  return result;
}

uint64_t partial apply for closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  return closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2, v2[8], v2[9], v2[10]);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @in_guaranteed GadgetParameters) -> (@owned QueryGadget<A.FullyLinearProof.F>, @error @owned Error)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD *))(v3 + 64))(*a1, a1 + 1);
  if (v4)
    *a2 = v4;
  else
    *a3 = result;
  return result;
}

uint64_t partial apply for closure #2 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *a1 | 0x4000000000000000;
  return swift_retain();
}

uint64_t partial apply for closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(a1, a2);
}

uint64_t partial apply for closure #2 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>, &demangling cache variable for type metadata for [UInt8]);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Field64]>, &demangling cache variable for type metadata for [Field64]);
  *v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Seed>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(measurementShare: Seed, proofShare: Seed, wraparoundJointRandBlind: Seed, verificationJointRandBlind: Seed)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (measurementShare: Seed, proofShare: Seed, wraparoundJointRandBlind: Seed, verificationJointRandBlind: Seed));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetEvaluation<Field64>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GadgetEvaluation<Field64>);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(measurementShare: Seed, proofShare: Seed, jointRandBlind: Seed?)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (measurementShare: Seed, proofShare: Seed, jointRandBlind: Seed?));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4])
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return v11;
}

unint64_t instantiation function for generic protocol witness table for FLPTypeError(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  result = lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t outlined copy of FLPTypeError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for FLPTypeError(uint64_t a1)
{
  return outlined consume of FLPTypeError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of FLPTypeError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FLPTypeError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of FLPTypeError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FLPTypeError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of FLPTypeError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of FLPTypeError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for FLPTypeError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of FLPTypeError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTag for FLPTypeError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for FLPTypeError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FLPTypeError()
{
  return &type metadata for FLPTypeError;
}

uint64_t dispatch thunk of static FullyLinearProof.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of FullyLinearProof.encodedMeasurementLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FullyLinearProof.proofLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of FullyLinearProof.verifierLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of FullyLinearProof.outputLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of FullyLinearProof.jointRandLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of FullyLinearProof.proveRandLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of FullyLinearProof.queryRandLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of FullyLinearProof.gadgetParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of FullyLinearProof.encode(measurement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of FullyLinearProof.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of FullyLinearProof.truncate(measurement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

uint64_t dispatch thunk of FullyLinearProof.evaluateGadget<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

uint64_t dispatch thunk of FullyLinearProof.evaluateGadget(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

uint64_t dispatch thunk of FullyLinearProof.prove(measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 160))();
}

uint64_t dispatch thunk of FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 168))();
}

uint64_t dispatch thunk of FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 176))();
}

uint64_t dispatch thunk of FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 184))(a1, a2, a3, a4);
}

uint64_t dispatch thunk of FullyLinearProof.decide<A>(verifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 192))() & 1;
}

uint64_t QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;

  v14 = specialized QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 80) - 8) + 8))(a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a2, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v14;
}

uint64_t QueryGadget.arity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
}

uint64_t QueryGadget.wireInputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t QueryGadget.wireInputs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*QueryGadget.wireInputs.modify())()
{
  swift_beginAccess();
  return WraparoundJointRandomness.byte.modify;
}

uint64_t QueryGadget.wireOutputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t QueryGadget.wireOutputs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*QueryGadget.wireOutputs.modify())()
{
  swift_beginAccess();
  return WraparoundJointRandomness.bitsLeft.modify;
}

uint64_t QueryGadget.wireOutputAtRandomPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 112));
}

uint64_t QueryGadget.step.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t QueryGadget.numOfCalled.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t QueryGadget.numOfCalled.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*QueryGadget.numOfCalled.modify())()
{
  swift_beginAccess();
  return WraparoundJointRandomness.bitsLeft.modify;
}

__n128 QueryGadget.parameters.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v2 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(v2 + 32);
  result = *(__n128 *)v2;
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v14;
  uint64_t v15;

  v14 = *v8;
  v15 = specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 80) - 8) + 8))(a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a2, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v15;
}

uint64_t *QueryGadget.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  return v0;
}

uint64_t QueryGadget.__deallocating_deinit()
{
  QueryGadget.deinit();
  return swift_deallocClassInstance();
}

uint64_t QueryGadget.degree.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136) + 8);
}

uint64_t QueryGadget.numOfCalls.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136) + 16);
}

uint64_t QueryGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  Swift::Int *v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, _QWORD);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  char isClassOrObjCExistentialType;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(unint64_t, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::Int *v56;
  uint64_t v57;
  Swift::Int v58;
  Swift::Int v59;
  char *v60;
  char *v61;
  char v62[32];

  v5 = v4;
  v57 = a1;
  v9 = *v4;
  v10 = *(_QWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v55 = AssociatedTypeWitness;
  v18 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v17);
  v61 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v20);
  v22 = (char *)&v46 - v21;
  v23 = (_QWORD *)((char *)v5 + *(_QWORD *)(v9 + 128));
  result = swift_beginAccess();
  v25 = *v23 + 1;
  if (__OFADD__(*v23, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v56 = v23;
  *v23 = v25;
  result = dispatch thunk of Collection.count.getter();
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v46 = a4;
  v47 = v5;
  v53 = v11;
  v26 = v10;
  v60 = v13;
  v27 = v56;
  if (result)
  {
    v28 = 0;
    v49 = v47 + 2;
    v50 = v15;
    v29 = 32;
    v51 = result;
    v52 = a3;
    v48 = a2;
    v30 = v47 + 2;
    do
    {
      v58 = *v27;
      v59 = v28 + 1;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v31 = v55;
      v32 = *(void (**)(char *, uint64_t))(v54 + 8);
      v32(v61, v55);
      v33 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v34 = v22;
      v35 = v53;
      (*(void (**)(char *))(v53 + 16))(v60);
      v33(v62, 0);
      v32(v34, v31);
      swift_beginAccess();
      v36 = type metadata accessor for Array();
      v37 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      v38 = *v30;
      Array._checkSubscript_mutating(_:)(v28);
      Array._makeMutableAndUnique()();
      v39 = *(_QWORD *)(v38 + 8 * v28 + 32);
      v40 = v58;
      Array._checkSubscript_mutating(_:)(v58);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v42 = v39 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v42 = v39;
      v43 = v42
          + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
          + *(_QWORD *)(v35 + 72) * v40;
      v44 = *(void (**)(unint64_t, char *, uint64_t))(v35 + 40);
      v22 = v34;
      v44(v43, v60, v26);
      v27 = v56;
      AggregateShare.share.modify(v36);
      AggregateShare.share.modify(v37);
      swift_endAccess();
      result = v51;
      v29 += 8;
      v28 = v59;
    }
    while (v51 != v59);
  }
  v45 = *(_QWORD *)((char *)v47 + *(_QWORD *)(*v47 + 120));
  if ((unsigned __int128)(*v27 * (__int128)v45) >> 64 == (*v27 * v45) >> 63)
  {
    swift_beginAccess();
    Array.subscript.getter();
    return swift_endAccess();
  }
LABEL_12:
  __break(1u);
  return result;
}

void QueryGadget.evaluate<A>(at:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for Gadget.arity.getter in conformance QueryGadget<A>()
{
  return QueryGadget.arity.getter();
}

uint64_t protocol witness for Gadget.degree.getter in conformance QueryGadget<A>()
{
  return QueryGadget.degree.getter();
}

uint64_t protocol witness for Gadget.numOfCalls.getter in conformance QueryGadget<A>()
{
  return QueryGadget.numOfCalls.getter();
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance QueryGadget<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return QueryGadget.evaluate<A>(at:)(a1, a2, a3, a4);
}

void protocol witness for Gadget.evaluate<A>(at:) in conformance QueryGadget<A>()
{
  QueryGadget.evaluate<A>(at:)();
}

uint64_t specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  _QWORD *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void (*v54)(_QWORD *, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isClassOrObjCExistentialType;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(unint64_t, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::Int v101;
  char *v102;
  char *v103;
  _QWORD v104[5];

  v9 = v8;
  v90 = a7;
  v82 = a3;
  v88 = a2;
  v89 = a1;
  v12 = *(_QWORD **)v9;
  v100 = a8;
  v99 = *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8);
  v86 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v96 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v97 = AssociatedTypeWitness;
  v15 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v14);
  v103 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v95 = (char *)&v79 - v19;
  v91 = a5;
  v83 = *(_QWORD *)(a5 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v84 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v12[10];
  v24 = *(_QWORD *)(v23 - 8);
  v26 = MEMORY[0x24BDAC7A8](v21, v25);
  v102 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v28);
  v30 = (char *)&v79 - v29;
  v32 = *a4;
  v31 = a4[1];
  v34 = a4[2];
  v33 = a4[3];
  v35 = a4[4];
  *(_QWORD *)&v9[v12[16]] = 0;
  v85 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v35);
  v36 = (uint64_t *)&v9[*(_QWORD *)(*(_QWORD *)v9 + 136)];
  *v36 = v32;
  v36[1] = v31;
  v36[2] = v34;
  v36[3] = v33;
  v87 = v33;
  v36[4] = v35;
  v37 = v12[11];
  result = dispatch thunk of IteratorProtocol.next()();
  if (__OFADD__(v34, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v39 = specialized Array.init(repeating:count:)((uint64_t)v30, v34 + 1, v23);
  (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v30, v23);
  v104[0] = v39;
  v40 = type metadata accessor for Array();
  v41 = specialized Array.init(repeating:count:)((uint64_t)v104, v32, v40);
  swift_bridgeObjectRelease();
  *((_QWORD *)v9 + 2) = v41;
  v42 = (uint64_t *)(v9 + 16);
  v43 = swift_bridgeObjectRetain();
  v44 = MEMORY[0x24BD00400](v43, v40);
  result = swift_bridgeObjectRelease();
  if (v44 < 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v80 = v37;
  v79 = v30;
  v81 = v9;
  v98 = v24;
  v45 = v86;
  v46 = v40;
  v47 = v23;
  v48 = v88;
  if (v44)
  {
    v49 = 0;
    v50 = 32;
    v93 = v42;
    v94 = v44;
    v92 = v46;
    do
    {
      v101 = v49 + 1;
      dispatch thunk of Collection.startIndex.getter();
      v51 = v95;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v52 = v97;
      v53 = *(void (**)(char *, uint64_t))(v96 + 8);
      v53(v103, v97);
      v54 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v55 = v48;
      v56 = v45;
      v57 = v98;
      (*(void (**)(char *))(v98 + 16))(v102);
      v54(v104, 0);
      v58 = v51;
      v59 = v52;
      v61 = v92;
      v60 = v93;
      v53(v58, v59);
      swift_beginAccess();
      v62 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      v63 = *v60;
      Array._checkSubscript_mutating(_:)(v49);
      Array._makeMutableAndUnique()();
      v64 = *(_QWORD *)(v63 + 8 * v49 + 32);
      Array._checkSubscript_mutating(_:)(0);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v66 = v64 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v66 = v64;
      v67 = v66 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
      v68 = *(void (**)(unint64_t, char *, uint64_t))(v57 + 40);
      v45 = v56;
      v48 = v55;
      v68(v67, v102, v47);
      AggregateShare.share.modify(v61);
      AggregateShare.share.modify(v62);
      v69 = v94;
      swift_endAccess();
      v50 += 8;
      v49 = v101;
    }
    while (v69 != v101);
  }
  v70 = v98;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v84, v89, v91);
  v71 = Array.init<A>(_:)();
  v72 = v80;
  Polynomial.init(coefficients:)(v71, v104);
  v73 = v104[0];
  v75 = type metadata accessor for Polynomial(0, v47, v72, v74);
  v76 = v85;
  result = Polynomial.evaluateUsingRootsOfUnity(count:)(v85, v75);
  v77 = v81;
  *((_QWORD *)v81 + 3) = result;
  if (!v87)
    goto LABEL_14;
  if (v76 != 0x8000000000000000 || v87 != -1)
  {
    *(_QWORD *)&v77[*(_QWORD *)(*(_QWORD *)v77 + 120)] = v76 / v87;
    v104[0] = v73;
    v78 = v79;
    Polynomial.evaluate(at:)(v82, v75, v79);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _BYTE *, uint64_t))(v70 + 32))(&v77[*(_QWORD *)(*(_QWORD *)v77 + 112)], v78, v47);
    return (uint64_t)v77;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_allocObject();
  return specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t associated type witness table accessor for Gadget.F : FieldElement in QueryGadget<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t type metadata completion function for QueryGadget()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for QueryGadget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryGadget);
}

uint64_t method lookup function for QueryGadget()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t SeedStreamAES128CTR.__allocating_init(key:iv:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;

  v4 = type metadata accessor for SymmetricKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v10(v8, (uint64_t)a1, v4);
  v11 = SymmetricKey.bitCount.getter();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if (v11 == 128)
  {
    *(_QWORD *)(v9 + 16) = MEMORY[0x24BEE4AF8];
    v10((char *)(v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key), (uint64_t)a1, v4);
    v13 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)(a2);
    v15 = v14;
    swift_bridgeObjectRelease();
    v12(a1, v4);
    v16 = (uint64_t *)(v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce);
    *v16 = v13;
    v16[1] = v15;
    return v9;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t SeedStreamAES128CTR.init(key:iv:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;

  v3 = v2;
  v6 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v11(v10, (uint64_t)a1, v6);
  v12 = SymmetricKey.bitCount.getter();
  v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v10, v6);
  if (v12 == 128)
  {
    *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
    v11((char *)(v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key), (uint64_t)a1, v6);
    v14 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)(a2);
    v16 = v15;
    swift_bridgeObjectRelease();
    v13(a1, v6);
    v17 = (uint64_t *)(v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce);
    *v17 = v14;
    v17[1] = v16;
    return v3;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t SeedStreamAES128CTR.__allocating_init(key:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;

  v2 = type metadata accessor for SymmetricKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v7(v6, (uint64_t)a1, v2);
  v8 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v8[2] = 16;
  v8[4] = 0;
  v8[5] = 0;
  v9 = swift_allocObject();
  if (SymmetricKey.bitCount.getter() == 128)
  {
    *(_QWORD *)(v9 + 16) = MEMORY[0x24BEE4AF8];
    v7((char *)(v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key), (uint64_t)v6, v2);
    v10 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)((uint64_t)v8);
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v6, v2);
    v14 = (uint64_t *)(v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce);
    *v14 = v10;
    v14[1] = v12;
    v13(a1, v2);
    return v9;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

Swift::UInt8 __swiftcall SeedStreamAES128CTR.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v1 + 16))
  {
    v2 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
    v3 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
    swift_beginAccess();
    v4 = specialized static SeedStreamAES128CTR.fillBuffer(key:nonce:)(v2, v3);
    swift_endAccess();
    *(_QWORD *)(v0 + 16) = specialized Sequence.reversed()((uint64_t)v4);
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 16);
    if (!*(_QWORD *)(v1 + 16))
    {
      __break(1u);
LABEL_7:
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = (uint64_t)v5;
      v6 = *((_QWORD *)v5 + 2);
      if (v6)
        goto LABEL_5;
LABEL_8:
      __break(1u);
      return v5;
    }
  }
  LOBYTE(v5) = swift_isUniquelyReferenced_nonNull_native();
  if ((v5 & 1) == 0)
    goto LABEL_7;
  v6 = *(_QWORD *)(v1 + 16);
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v7 = v6 - 1;
  *(_QWORD *)(v1 + 16) = v7;
  LOBYTE(v5) = *(_BYTE *)(v1 + v7 + 32);
  *(_QWORD *)(v0 + 16) = v1;
  return v5;
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  char v7;
  char v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 31; ; --i)
  {
    if (v3 == i - 32)
      goto LABEL_5;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (i - 32 >= v6)
      goto LABEL_12;
    v7 = *(_BYTE *)(v1 + v3 + 32);
    v8 = *(_BYTE *)(v1 + i);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = result;
    }
    *(_BYTE *)(v1 + v3 + 32) = v8;
    *(_BYTE *)(v1 + i) = v7;
LABEL_5:
    if (v4 == ++v3)
      return v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t SeedStreamAES128CTR.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SeedStreamAES128CTR.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t static XofHmacSha256Aes128.seedSize.getter()
{
  return 32;
}

uint64_t XofHmacSha256Aes128.__allocating_init(seedBytes:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a1, a2, a3);
  return v6;
}

uint64_t XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  size_t v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for SymmetricKey();
  MEMORY[0x24BDAC7A8](v7, v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream) = 0;
  if (*(_QWORD *)(a1 + 16) != 32)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v17[0] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x24BDCFBE0]);
  SymmetricKey.init<A>(data:)();
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type SHA256 and conformance SHA256();
  HMAC.init(key:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v3 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac, v13, v9);
  if (*(_QWORD *)(a2 + 16) > 0xFFuLL)
    goto LABEL_5;
  LOBYTE(v17[0]) = *(_QWORD *)(a2 + 16);
  v16 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)v17, (unint64_t)v17 + 1);
  swift_beginAccess();
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x24BDCFBD8]);
  HMAC.update<A>(data:)();
  swift_endAccess();
  swift_release();
  v17[0] = a2;
  specialized Array.append<A>(contentsOf:)(a3);
  v16 = v17[0];
  swift_beginAccess();
  HMAC.update<A>(data:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return v3;
}

Swift::UInt8 __swiftcall XofHmacSha256Aes128.next()()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 result;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    swift_retain();
    v1 = SeedStreamAES128CTR.next()();
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall XofHmacSha256Aes128.update(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x24BDCFBD8]);
    HMAC.update<A>(data:)();
    swift_endAccess();
  }
}

Swift::Void __swiftcall XofHmacSha256Aes128.finalize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    __break(1u);
  }
  else
  {
    v12 = v1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v12, v2);
    HMAC.finalize()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t closure #1 in XofHmacSha256Aes128.finalize()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t *v24;
  uint64_t result;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7, v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)&v26 - v14;
  v26 = xmmword_249C2B460;
  v27 = a1;
  v28 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  SymmetricKey.init<A>(data:)();
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v16(v12, v15, v7);
  v17 = specialized _copyCollectionToContiguousArray<A>(_:)(16, 32, a1, a2);
  type metadata accessor for SeedStreamAES128CTR(0);
  v18 = swift_allocObject();
  if (SymmetricKey.bitCount.getter() == 128)
  {
    v29 = a3;
    *(_QWORD *)(v18 + 16) = MEMORY[0x24BEE4AF8];
    v16((char *)(v18 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key), v12, v7);
    v19 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)(v17);
    if (!v3)
    {
      v21 = v19;
      v22 = v20;
      swift_release();
      v23 = *(void (**)(char *, uint64_t))(v8 + 8);
      v23(v12, v7);
      v24 = (uint64_t *)(v18 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce);
      *v24 = v21;
      v24[1] = v22;
      v23(v15, v7);
      *(_QWORD *)(v29 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream) = v18;
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  swift_release();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t XofHmacSha256Aes128.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t XofHmacSha256Aes128.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static ExtendableOutputFunction.seedSize.getter in conformance XofHmacSha256Aes128()
{
  return 32;
}

uint64_t protocol witness for ExtendableOutputFunction.update(_:) in conformance XofHmacSha256Aes128()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x24BDCFBD8]);
    HMAC.update<A>(data:)();
    return swift_endAccess();
  }
  return result;
}

void protocol witness for ExtendableOutputFunction.next() in conformance XofHmacSha256Aes128()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    swift_retain();
    SeedStreamAES128CTR.next()();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for ExtendableOutputFunction.init(seedBytes:domainSeparationTag:binder:) in conformance XofHmacSha256Aes128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a1, a2, a3);
  return v6;
}

_QWORD *specialized static SeedStreamAES128CTR.fillBuffer(key:nonce:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v4[2] = 16;
  v4[5] = 0;
  v4[4] = 0;
  v5 = *(_QWORD *)a2;
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 12);
  specialized static AES.CTR.encryptInPlace(_:using:nonce:)((uint64_t)(v4 + 4), (uint64_t)(v4 + 6), a1, *(_QWORD *)a2, v6 | (v7 << 32));
  v8 = bswap32(v7);
  *(_DWORD *)(a2 + 12) = bswap32(v8 + 1);
  if (v8 == -1)
  {
    v9 = bswap32(v6);
    *(_DWORD *)(a2 + 8) = bswap32(v9 + 1);
    if (v9 == -1)
      *(_QWORD *)a2 = bswap64(bswap64(v5) + 1);
  }
  return v4;
}

uint64_t specialized AES.CTR.Nonce.init<A>(nonceBytes:)(uint64_t a1)
{
  size_t v1;
  const void *v3;
  size_t v4;
  _BYTE *v5;
  _QWORD __dst[3];

  __dst[2] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == 16 || v1 == 12)
  {
    v3 = (const void *)(a1 + 32);
    if (v1 <= 0xF)
      v4 = 16 - v1;
    else
      v4 = 0;
    bzero((char *)__dst + v1, v4);
    memcpy(__dst, v3, v1);
    return __dst[0];
  }
  else
  {
    lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError();
    swift_allocError();
    *v5 = 0;
    return swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SHA256 and conformance SHA256;
  if (!lazy protocol witness table cache variable for type SHA256 and conformance SHA256)
  {
    v1 = type metadata accessor for SHA256();
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BDC6AE8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x24BD00BD4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for SeedStreamAES128CTR()
{
  return type metadata accessor for SeedStreamAES128CTR(0);
}

uint64_t type metadata accessor for SeedStreamAES128CTR(uint64_t a1)
{
  return type metadata accessor for SeedStreamAES128CTR(a1, (uint64_t *)&type metadata singleton initialization cache for SeedStreamAES128CTR);
}

uint64_t type metadata completion function for SeedStreamAES128CTR()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SeedStreamAES128CTR()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SeedStreamAES128CTR.__allocating_init(key:iv:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t ObjC metadata update function for XofHmacSha256Aes128()
{
  return type metadata accessor for XofHmacSha256Aes128(0);
}

uint64_t type metadata accessor for XofHmacSha256Aes128(uint64_t a1)
{
  return type metadata accessor for SeedStreamAES128CTR(a1, (uint64_t *)&type metadata singleton initialization cache for XofHmacSha256Aes128);
}

uint64_t type metadata accessor for SeedStreamAES128CTR(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for XofHmacSha256Aes128()
{
  unint64_t v0;

  type metadata accessor for HMAC<SHA256>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for XofHmacSha256Aes128()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XofHmacSha256Aes128.__allocating_init(seedBytes:domainSeparationTag:binder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void type metadata accessor for HMAC<SHA256>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HMAC<SHA256>)
  {
    type metadata accessor for SHA256();
    lazy protocol witness table accessor for type SHA256 and conformance SHA256();
    v0 = type metadata accessor for HMAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HMAC<SHA256>);
  }
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    v2 = MEMORY[0x24BDCFB90];
    result = MEMORY[0x24BD00BD4](MEMORY[0x24BDD0790], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:));
}

uint64_t GadgetWireInputs.numOfCalled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t GadgetWireInputs.numOfCalled.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*GadgetWireInputs.numOfCalled.modify())()
{
  swift_beginAccess();
  return WraparoundJointRandomness.byte.modify;
}

uint64_t GadgetWireInputs.numOfCalls.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t GadgetWireInputs.values.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t GadgetWireInputs.values.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GadgetWireInputs.values.modify())()
{
  swift_beginAccess();
  return WraparoundJointRandomness.bitsLeft.modify;
}

uint64_t GadgetWireInputs.init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized GadgetWireInputs.init<A>(numOfCalls:proveRand:));
}

uint64_t GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7;

  v7 = a5();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  return v7;
}

uint64_t GadgetWireInputs.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::Int *v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  Swift::Int *v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(uint64_t *, _QWORD);
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  char isClassOrObjCExistentialType;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  Swift::Int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  Swift::Int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v5 = v3;
  v66 = a1;
  v9 = *v3;
  v8 = v3 + 2;
  v10 = *(_QWORD *)(v9 + 80);
  v57 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v59 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v60 = AssociatedTypeWitness;
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v16);
  v65 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v19);
  v58 = (char *)&v51 - v20;
  swift_beginAccess();
  v21 = v5[2];
  v22 = v5[3];
  if (v21 >= v22)
  {
    v69 = v5[2];
    v67 = dispatch thunk of CustomStringConvertible.description.getter();
    v68 = v45;
    v46._countAndFlagsBits = 540884512;
    v46._object = (void *)0xE400000000000000;
    String.append(_:)(v46);
    v69 = v22;
    v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48 = v67;
    v49 = v68;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v50 = v48;
    *(_QWORD *)(v50 + 8) = v49;
    *(_BYTE *)(v50 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    v62 = v10;
    *v8 = v21 + 1;
    result = dispatch thunk of Collection.count.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v51 = v4;
      v64 = v12;
      v24 = v8;
      v25 = v62;
      if (result)
      {
        v26 = v14;
        v27 = a2;
        v28 = 0;
        v52 = v5 + 4;
        v29 = 32;
        v55 = v27;
        v56 = result;
        v63 = v26;
        v53 = v8;
        v54 = a3;
        v30 = v57;
        do
        {
          v61 = *v24;
          v62 = v28 + 1;
          dispatch thunk of Collection.startIndex.getter();
          v31 = v25;
          v32 = v58;
          dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
          v33 = v60;
          v34 = *(void (**)(char *, uint64_t))(v59 + 8);
          v34(v65, v60);
          v35 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
          (*(void (**)(char *))(v30 + 16))(v64);
          v35(&v67, 0);
          v36 = v32;
          v25 = v31;
          v34(v36, v33);
          v37 = v52;
          swift_beginAccess();
          v38 = type metadata accessor for Array();
          v39 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          v40 = *v37;
          Array._checkSubscript_mutating(_:)(v28);
          Array._makeMutableAndUnique()();
          v41 = *(_QWORD *)(v40 + 8 * v28 + 32);
          v42 = v61;
          Array._checkSubscript_mutating(_:)(v61);
          isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          v44 = v41 & 0xFFFFFFFFFFFFFF8;
          if ((isClassOrObjCExistentialType & 1) == 0)
            v44 = v41;
          (*(void (**)(unint64_t, char *, Swift::Int))(v30 + 40))(v44+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v42, v64, v25);
          AggregateShare.share.modify(v38);
          AggregateShare.share.modify(v39);
          v24 = v53;
          swift_endAccess();
          result = v56;
          v29 += 8;
          v28 = v62;
        }
        while (v56 != v62);
      }
    }
  }
  return result;
}

uint64_t GadgetWireInputs.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GadgetWireInputs.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized GadgetWireInputs.init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD);
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char isClassOrObjCExistentialType;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::Int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD v73[4];

  v5 = v4;
  v9 = *v5;
  v64 = a4;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v66 = AssociatedTypeWitness;
  v67 = v12;
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v13);
  v72 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  v65 = (char *)&v59 - v18;
  v19 = *(_QWORD *)(v9 + 80);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x24BDAC7A8](v17, v21);
  v61 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v24);
  v26 = (char *)&v59 - v25;
  v5[2] = 0;
  v68 = dispatch thunk of Collection.count.getter();
  v5[3] = a1;
  result = dispatch thunk of IteratorProtocol.next()();
  v28 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v70 = v10;
  v60 = a2;
  v29 = a3;
  v30 = specialized Array.init(repeating:count:)((uint64_t)v26, v28, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
  v73[0] = v30;
  v31 = type metadata accessor for Array();
  v32 = v68;
  v33 = specialized Array.init(repeating:count:)((uint64_t)v73, v68, v31);
  result = swift_bridgeObjectRelease();
  v5[4] = v33;
  v34 = v5 + 4;
  if (v32 < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v35 = v32;
  v59 = v5;
  v36 = v29;
  v37 = v60;
  v38 = v61;
  v63 = v31;
  v39 = v19;
  v40 = v67;
  if (v35)
  {
    v41 = 0;
    v42 = 32;
    v71 = v36;
    v62 = v34;
    do
    {
      v69 = v41 + 1;
      v43 = v37;
      dispatch thunk of Collection.startIndex.getter();
      v44 = v38;
      v45 = v20;
      v46 = v65;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v47 = *(void (**)(char *, uint64_t))(v40 + 8);
      v48 = v66;
      v47(v72, v66);
      v49 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v45 + 16))(v44);
      v49(v73, 0);
      v50 = v46;
      v20 = v45;
      v38 = v44;
      v51 = v62;
      v47(v50, v48);
      swift_beginAccess();
      v52 = v63;
      v53 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      v54 = *v51;
      Array._checkSubscript_mutating(_:)(v41);
      Array._makeMutableAndUnique()();
      v55 = *(_QWORD *)(v54 + 8 * v41 + 32);
      Array._checkSubscript_mutating(_:)(0);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v57 = v55 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v57 = v55;
      (*(void (**)(unint64_t, char *, uint64_t))(v20 + 40))(v57 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)), v38, v39);
      v58 = v52;
      v40 = v67;
      AggregateShare.share.modify(v58);
      AggregateShare.share.modify(v53);
      v37 = v43;
      swift_endAccess();
      v42 += 8;
      v41 = v69;
    }
    while (v68 != v69);
  }
  return (uint64_t)v59;
}

uint64_t specialized GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return specialized GadgetWireInputs.init<A>(numOfCalls:proveRand:)(a1, a2, a3, a4);
}

uint64_t type metadata completion function for GadgetWireInputs()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for GadgetWireInputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GadgetWireInputs);
}

uint64_t method lookup function for GadgetWireInputs()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t specialized FixedWidthInteger.nextPowerOfTwo.getter(uint64_t result)
{
  uint64_t v1;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = 1 << -(char)__clz(result - 1);
    if (result)
      return v1;
    else
      return 1;
  }
  return result;
}

uint64_t Gadget.evaluate<A>(at:for:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  unint64_t v14;
  unint64_t v15;

  v14 = *a2;
  v15 = *a2 >> 62;
  if (!(_DWORD)v15)
  {
    swift_retain();
    GadgetWireInputs.update<A>(_:)(a1, a4, a6);
    if (!v7)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 64))(a1, a4, a6, a3, a5);
    return outlined consume of GadgetEvaluation<A><A, B>(v14);
  }
  if ((_DWORD)v15 == 1)
  {
    swift_retain();
    QueryGadget.evaluate<A>(at:)(a1, a4, a6, a7);
    return outlined consume of GadgetEvaluation<A><A, B>(v14);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 64))(a1, a4, a6, a3, a5);
}

unint64_t Gadget.wirePolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = (*(uint64_t (**)(void))(a2 + 40))();
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (((result + 1) & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == -1)
    return 1;
  else
    return 1 << -(char)__clz(result);
}

uint64_t Gadget.gadgetPolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(void))(a2 + 32))();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  v6 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = v4 * v6;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = v7 + 1;
  if (__OFADD__(v7, 1))
LABEL_7:
    __break(1u);
  return result;
}

uint64_t Gadget.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = (*(uint64_t (**)(void))(a2 + 24))();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v8;
  a3[3] = v9;
  a3[4] = result;
  return result;
}

uint64_t GadgetParameters.arity.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t GadgetParameters.degree.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t GadgetParameters.numOfCalls.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t GadgetParameters.wirePolynomialLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t GadgetParameters.gadgetPolynomialLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

void __swiftcall GadgetParameters.init(arity:degree:numOfCalls:wirePolynomialLength:gadgetPolynomialLength:)(VDAF::GadgetParameters *__return_ptr retstr, Swift::Int arity, Swift::Int degree, Swift::Int numOfCalls, Swift::Int wirePolynomialLength, Swift::Int gadgetPolynomialLength)
{
  retstr->arity = arity;
  retstr->degree = degree;
  retstr->numOfCalls = numOfCalls;
  retstr->wirePolynomialLength = wirePolynomialLength;
  retstr->gadgetPolynomialLength = gadgetPolynomialLength;
}

unint64_t *initializeBufferWithCopyOfBuffer for GadgetEvaluation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of GadgetEvaluation<Field64>(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for GadgetEvaluation(unint64_t *a1)
{
  return outlined consume of GadgetEvaluation<A><A, B>(*a1);
}

unint64_t *assignWithCopy for GadgetEvaluation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of GadgetEvaluation<Field64>(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of GadgetEvaluation<A><A, B>(v4);
  return a1;
}

unint64_t *assignWithTake for GadgetEvaluation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of GadgetEvaluation<A><A, B>(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for GadgetEvaluation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GadgetEvaluation(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for GadgetEvaluation(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *destructiveProjectEnumData for GadgetEvaluation(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for GadgetEvaluation(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

uint64_t type metadata accessor for GadgetEvaluation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GadgetEvaluation);
}

uint64_t getEnumTagSinglePayload for GadgetParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GadgetParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GadgetParameters()
{
  return &type metadata for GadgetParameters;
}

uint64_t dispatch thunk of Gadget.arity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Gadget.degree.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Gadget.numOfCalls.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Gadget.wirePolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Gadget.gadgetPolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Gadget.evaluate<A>(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t specialized static VDAFErrorProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))outlined copy of VDAFError);
}

{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))outlined copy of FLPTypeError);
}

{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))outlined copy of VDAFError);
}

uint64_t specialized static VDAFErrorProtocol.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v0 = specialized VDAFErrorProtocol.value.getter();
  v2 = v1;
  v3 = specialized VDAFErrorProtocol.value.getter();
  if (v2)
  {
    if (v4)
    {
      if (v0 == v3 && v2 == v4)
      {
        swift_bridgeObjectRelease();
        v5 = 1;
      }
      else
      {
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    if (!v4)
    {
      v5 = 1;
      return v5 & 1;
    }
    v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized static VDAFErrorProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v11 = specialized VDAFErrorProtocol.value.getter(a1, a2, a3, a7);
  v13 = v12;
  v14 = specialized VDAFErrorProtocol.value.getter(a4, a5, a6, a7);
  if (v13)
  {
    if (v15)
    {
      if (v11 == v14 && v13 == v15)
      {
        swift_bridgeObjectRelease();
        v16 = 1;
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    if (!v15)
    {
      v16 = 1;
      return v16 & 1;
    }
    v16 = 0;
  }
  swift_bridgeObjectRelease();
  return v16 & 1;
}

uint64_t specialized VDAFErrorProtocol.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  String.init<A>(describing:)();
  lazy protocol witness table accessor for type String and conformance String();
  v0 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v1 = 0;
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t specialized VDAFErrorProtocol.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;

  a4();
  String.init<A>(describing:)();
  lazy protocol witness table accessor for type String and conformance String();
  v4 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *(_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

BOOL Prio3.isJointRandRequired.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16)) > 0;
}

uint64_t Prio3.init(flp:numOfAggregators:numOfProofs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;

  if ((unint64_t)(a2 - 2) > 0xFD)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v18 = 0xD000000000000032;
    v19 = 0x8000000249C30C10;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3943982;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x20746F67202CLL;
    v14._object = (void *)0xE600000000000000;
    String.append(_:)(v14);
  }
  else
  {
    if ((static Prio3.isRecommended(numOfProofs:)(a3, a4, a5, a6) & 1) != 0)
    {
      *a7 = a2;
      a7[1] = a3;
      type metadata accessor for Prio3();
    }
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v18 = 0xD00000000000003CLL;
    v19 = 0x8000000249C30C50;
  }
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(_QWORD *)v16 = v18;
  *(_QWORD *)(v16 + 8) = v19;
  *(_BYTE *)(v16 + 16) = 1;
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t Prio3.shard<A>(_:nonce:seedBytes:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t (**v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  uint64_t AssociatedConformanceWitness;
  uint64_t (**v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (**v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  _BYTE v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (**v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (**v107)(uint64_t, uint64_t);
  uint64_t v108;
  void (*v109)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t);
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v9 = a3[2];
  if (v9 != 16)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0x3D746F67202CLL;
    v31._object = (void *)0xE600000000000000;
    String.append(_:)(v31);
    v126 = v9;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33 = 0xD000000000000030;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v34 = 0xD000000000000030;
    *(_QWORD *)(v34 + 8) = 0x8000000249C30B10;
    *(_BYTE *)(v34 + 16) = 1;
LABEL_11:
    swift_willThrow();
    return v33;
  }
  v10 = v7;
  v12 = (uint64_t)a5;
  v113 = a3;
  v114 = a2;
  v120 = a5[2];
  v121 = v8;
  v15 = a5[3];
  v16 = a5[4];
  v115 = a5[5];
  v116 = v15;
  v119 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
  v18 = dispatch thunk of Collection.count.getter();
  if (v18 != Prio3.randomSizeForShard.getter(v12))
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    Prio3.randomSizeForShard.getter(v12);
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0x3D746F67202CLL;
    v36._object = (void *)0xE600000000000000;
    String.append(_:)(v36);
    v126 = dispatch thunk of Collection.count.getter();
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v33 = 0xD00000000000002BLL;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v38 = 0xD00000000000002BLL;
    *(_QWORD *)(v38 + 8) = 0x8000000249C30B50;
    *(_BYTE *)(v38 + 16) = 0;
    goto LABEL_11;
  }
  v117 = v16;
  v103 = a1;
  v105 = a6;
  v104 = a7;
  v20 = Prio3.splitSeedBytes<A>(_:)(a4, (_QWORD *)v12, a6, a7);
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x24BEE4AF8];
  v107 = v7;
  v108 = v12;
  v119 = v20;
  v106 = v19;
  v111 = v23;
  if (v21)
  {
    v122 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v24 = v22;
    v25 = (uint64_t *)(v20 + 32);
    v26 = v21;
    do
    {
      v27 = *v25;
      v122 = v24;
      v29 = *(_QWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
        v24 = v122;
      }
      *(_QWORD *)(v24 + 16) = v29 + 1;
      *(_QWORD *)(v24 + 8 * v29 + 32) = v27;
      v25 += 3;
      --v26;
    }
    while (v26);
    v122 = v22;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v39 = (uint64_t *)(v119 + 40);
    v40 = v106;
    do
    {
      v41 = *v39;
      v122 = v22;
      v43 = *(_QWORD *)(v22 + 16);
      v42 = *(_QWORD *)(v22 + 24);
      swift_bridgeObjectRetain();
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1);
        v22 = v122;
      }
      *(_QWORD *)(v22 + 16) = v43 + 1;
      *(_QWORD *)(v22 + 8 * v43 + 32) = v41;
      v39 += 3;
      --v21;
    }
    while (v21);
    v10 = v107;
    v12 = v108;
    v20 = v119;
  }
  else
  {
    v40 = v19;
    v24 = MEMORY[0x24BEE4AF8];
  }
  v33 = (unint64_t)v10 + *(int *)(v12 + 56);
  v44 = v117;
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 112))(v114, v120, v117);
  if (v121)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    return v33;
  }
  v118 = v33;
  v114 = v45;
  v112 = *(uint64_t (**)(uint64_t, uint64_t))(v117 + 80);
  v47 = v112(v120, v117);
  if (v47 < 1)
  {
    v113 = &v101;
    v126 = v114;
    v112 = *v10;
    MEMORY[0x24BDAC7A8](v47, v48);
    v56 = v115;
    v55 = v116;
    v93 = v120;
    v94 = v116;
    v95 = v105;
    v96 = v44;
    v97 = v115;
    v98 = v104;
    v99 = v24;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_bridgeObjectRetain();
    v58 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, v12);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v91 = v56;
    v60 = v107;
    v61 = v108;
    static VDAFProtocol.splitShare<A, B>(_:into:_:)((uint64_t)&v126, (uint64_t)v112, (uint64_t (*)(uint64_t))partial apply for closure #4 in Prio3.shard<A>(_:nonce:seedBytes:), (uint64_t)v92, v108, AssociatedTypeWitness, v55, v58, AssociatedConformanceWitness, v91);
    swift_bridgeObjectRelease();
    v62 = v120;
    v113 = 0;
    v63 = v44;
    v64 = (int64_t)v60[1];
    v65 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, v61);
    v112 = (uint64_t (*)(uint64_t, uint64_t))static VDAFProtocol.proveRandXOF(seed:numOfProofs:)(v111, v64, v61, v65);
    swift_bridgeObjectRelease();
    v66 = swift_getAssociatedTypeWitness();
    v122 = Array.init()();
    v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 56))(v62, v63);
    v68 = v64 * v67;
    if ((unsigned __int128)(v64 * (__int128)v67) >> 64 == (v64 * v67) >> 63)
    {
      v111 = type metadata accessor for Array();
      Array.reserveCapacity(_:)(v68);
      if ((v64 & 0x8000000000000000) == 0)
      {
        v102 = v65;
        if (!v64)
        {
          swift_bridgeObjectRelease();
          v84 = v66;
          v85 = v117;
          v83 = swift_getAssociatedConformanceWitness();
          v77 = v83;
LABEL_47:
          v86 = v107;
          MEMORY[0x24BDAC7A8](v83, *v107);
          v93 = v62;
          v94 = v116;
          v95 = v105;
          v96 = v85;
          v97 = v115;
          v98 = v104;
          v99 = v22;
          v100 = v86;
          static VDAFProtocol.splitShare<A, B>(_:into:_:)((uint64_t)&v122, v87, (uint64_t (*)(uint64_t))partial apply for closure #5 in Prio3.shard<A>(_:nonce:seedBytes:), (uint64_t)v92, v108, v84, v116, v102, v77, v115);
          swift_bridgeObjectRelease();
          if (v113)
            v88 = swift_bridgeObjectRetain();
          else
            v88 = 0;
          Prio3PublicShare.init(jointRandParts:)(v88, v103);
          swift_bridgeObjectRetain();
          Prio3.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderJointBlind:helperShares:)();
        }
        v69 = *(uint64_t (**)(uint64_t, uint64_t))(v117 + 88);
        v109 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 168);
        v110 = v69;
        v70 = v113;
        while (1)
        {
          v71 = v120;
          if (v70)
          {
            swift_retain();
            v72 = VerificationJointRandomness.next()();
            swift_release();
          }
          else
          {
            v72 = Array.init()();
          }
          v73 = v71;
          v74 = v71;
          v75 = v117;
          v76 = v110(v73, v117);
          v77 = swift_getAssociatedConformanceWitness();
          v78 = v66;
          v79 = static FieldElement.randomVector<A>(count:using:)(v76, (uint64_t)v112, v66);
          v80 = v111;
          v81 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E8], v111);
          v82 = v121;
          v109(&v122, v114, v79, v72, v80, v81, v74, v75);
          v121 = v82;
          if (v82)
            break;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          --v64;
          v70 = v113;
          v66 = v78;
          if (!v64)
          {
            v83 = swift_bridgeObjectRelease();
            v84 = v78;
            v85 = v117;
            v62 = v120;
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = v126;
        swift_release();
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else if (v40)
  {
    v49 = *(_QWORD *)(v20 + 16);
    if (v49)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50 = (char *)MEMORY[0x24BEE4AF8];
      v51 = 48;
      do
      {
        v52 = *(_QWORD *)(v20 + v51);
        if (v52)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
          v54 = *((_QWORD *)v50 + 2);
          v53 = *((_QWORD *)v50 + 3);
          if (v54 >= v53 >> 1)
            v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v50);
          *((_QWORD *)v50 + 2) = v54 + 1;
          *(_QWORD *)&v50[8 * v54 + 32] = v52;
          v20 = v119;
        }
        v51 += 24;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v122 = v108;
    v123 = swift_getAssociatedTypeWitness();
    v124 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, v108);
    v125 = swift_getAssociatedConformanceWitness();
    type metadata accessor for VerificationJointRandomness();
  }
  v122 = 0;
  v123 = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v89._object = (void *)0x8000000249C30750;
  v89._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v89);
  v90._countAndFlagsBits = 0xD000000000000038;
  v90._object = (void *)0x8000000249C30B80;
  String.append(_:)(v90);
  LODWORD(v100) = 0;
  v99 = 200;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Prio3.publicShare<A>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, size_t *a5@<X8>)
{
  int64_t *v5;
  int64_t *v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BOOL8 v14;
  int64_t v15;
  size_t *v17;
  uint64_t v18;

  v6 = v5;
  v17 = a5;
  v18 = a4;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v13 + 32) + 80))(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 32)) > 0;
  v15 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  return Prio3PublicShare.init<A>(from:parameter:)((uint64_t)v12, v14, v15, *(_QWORD *)(a2 + 24), a3, *(_QWORD *)(a2 + 40), v17, v18);
}

void Prio3.inputShare<A>(from:aggregatorID:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[14];

  v10[13] = a4;
  v10[4] = a1;
  v10[5] = a5;
  v10[6] = a3;
  v5 = MEMORY[0x24BDAC7A8](a1, a2);
  MEMORY[0x24BDAC7A8](v5, v6);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  Prio3InputShareDecodableParameter.init(prio3:aggregatorID:)();
}

uint64_t sub_249C1B5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!v2)
  {
    v6 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 160) = *(unsigned __int8 *)(v5 - 112);
    *(_QWORD *)(v5 - 152) = v6;
    *(_QWORD *)(v5 - 168) = *(_QWORD *)(v5 - 104);
    v7 = *(unsigned __int8 *)(v5 - 96);
    v8 = *(_QWORD *)(v5 - 88);
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16);
    v10 = *(_QWORD *)(v5 - 128);
    v9(v3, *(_QWORD *)(v5 - 144), v10);
    v11 = *(_QWORD *)(v5 - 160);
    *(_QWORD *)(v5 - 120) = *(_QWORD *)(v5 - 152);
    *(_QWORD *)(v5 - 112) = v11;
    *(_QWORD *)(v5 - 104) = *(_QWORD *)(v5 - 168);
    *(_QWORD *)(v5 - 96) = v7;
    *(_QWORD *)(v5 - 88) = v8;
    return Prio3InputShare.init<A>(from:parameter:)(v3, v5 - 120, v4, v0, v10);
  }
  return result;
}

void Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, _QWORD *a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  int64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t *, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v62 = *(_QWORD *)a7;
  v63 = *(_BYTE *)(a7 + 8);
  v10 = *(_QWORD *)(a7 + 16);
  v60 = *(_BYTE *)(a7 + 24);
  v57 = *(_QWORD *)(a7 + 32);
  v59 = *a6;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = a9[3];
  v13 = a9[5];
  v64 = a9[4];
  v65 = a9[2];
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
  if (v11 != v14(v12, v13))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v69 = 0xD000000000000035;
    *((_QWORD *)&v69 + 1) = 0x8000000249C308D0;
    v73 = v14(v12, v13);
LABEL_10:
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0x3D746F67202CLL;
    v23._object = (void *)0xE600000000000000;
    String.append(_:)(v23);
    v73 = v11;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)v25 = v69;
    *(_BYTE *)(v25 + 16) = 1;
    swift_willThrow();
    return;
  }
  v11 = *(_QWORD *)(a5 + 16);
  if (v11 != 16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v69 = 0xD000000000000031;
    *((_QWORD *)&v69 + 1) = 0x8000000249C30910;
    v73 = 16;
    goto LABEL_10;
  }
  v51 = a5;
  v15 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, a9);
  VDAFProtocol.assertValidAggregatorID(_:)(a4);
  if (!v16)
  {
    v49 = v15;
    if (a4 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)a4 <= 0xFF)
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 48))(v65, v64);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v47 = AssociatedTypeWitness;
      v48 = static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v62, v63, a4, v17, (uint64_t)a9, AssociatedTypeWitness, v49);
      v20 = v67[1];
      v46 = *(uint64_t (**)(uint64_t, uint64_t))(v64 + 56);
      v21 = v46(v65, v64);
      if ((unsigned __int128)(v21 * (__int128)v20) >> 64 != (v21 * v20) >> 63)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v45 = v20;
      v73 = static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:numOfProofs:count:)(v10, v60, a4, v20, v21 * v20, (uint64_t)a9, v47, v49);
      v74 = v26;
      v75 = v27;
      v76 = v28;
      v77 = v59;
      *(_QWORD *)&v69 = v62;
      BYTE8(v69) = v63;
      v70 = v10;
      v71 = v60;
      v72 = v57;
      v61 = Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(a4, v51, v48, &v77, (uint64_t)&v69, (uint64_t)a9);
      v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 96))(v65, v64);
      static VDAFProtocol.queryRandsFrom<A>(verifyKey:numOfProofs:nonce:count:)(a3, v20, v51, v29, (uint64_t)a9, v47, v49, AssociatedConformanceWitness);
      v77 = Array.init()();
      v50 = *(uint64_t (**)(uint64_t, uint64_t))(v64 + 64);
      v30 = v50(v65, v64);
      v31 = v20 * v30;
      if ((unsigned __int128)(v45 * (__int128)v30) >> 64 != (v45 * v30) >> 63)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      v58 = type metadata accessor for Array();
      Array.reserveCapacity(_:)(v31);
      if (v20 < 0)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v32 = v20;
      v33 = v61;
      if (!v20)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if (v33)
        {
          swift_retain();
          v40 = v33;
          v41 = VerificationJointRandomness.seed.getter();
          swift_release();
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
        v42 = v50(v65, v64);
        Prio3PrepareState.init(measurementShare:jointRandSeed:aggregatorID:verifierLength:)(v62, v63, v41, a4, v42, a1);
        v43 = v77;
        if (v40)
        {
          v44 = *(_QWORD *)(v40 + 16);
          if (*(_QWORD *)(v44 + 16) <= a4)
          {
LABEL_35:
            __break(1u);
            return;
          }
          v40 = *(_QWORD *)(v44 + 8 * a4 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
        }
        Prio3PrepareShare.init(verifierShare:jointRandPart:)(v43, v40, a2);
        return;
      }
      v34 = 0;
      v56 = *v67;
      v52 = *(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 184);
      while (v32 != v34)
      {
        if (v33)
        {
          swift_retain();
          v35 = VerificationJointRandomness.next()();
          swift_release();
        }
        else
        {
          v35 = Array.init()();
        }
        v36 = v46(v65, v64);
        v37 = type metadata accessor for ArraySlice();
        v38 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v37);
        RandomAccessCollection<>.popFirst(_:)(v36, v37);
        Array.subscript.getter();
        v39 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12E8], v58);
        v52(&v77, v48, &v69, v68, v35, v56, v58, v37, v39, v38, v65, v64);
        ++v34;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32 = v45;
        v33 = v61;
        if (v45 == v34)
          goto LABEL_21;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    __break(1u);
    goto LABEL_31;
  }
}

uint64_t Prio3.prepareMessageFrom(_:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t (*v56)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = v3;
  v61 = a1;
  v53 = a3;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v12 = (char *)v51 - v11;
  v13 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v15 = (uint64_t)v4 + *(int *)(a2 + 56);
  v58 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 64);
  v59 = v15;
  result = v58(v7, v6);
  v55 = v4;
  v17 = v4[1];
  if ((unsigned __int128)(result * (__int128)v17) >> 64 != (result * v17) >> 63)
  {
    __break(1u);
    goto LABEL_24;
  }
  v18 = specialized Array.init(repeating:count:)((uint64_t)v12, result * v17, AssociatedTypeWitness);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  v57 = v51;
  v70 = v61;
  v65 = v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v21 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v13 + 24);
  v51[-4] = v7;
  v51[-3] = v21;
  v56 = v21;
  v22 = *(_QWORD *)(v13 + 40);
  v51[-2] = v6;
  v51[-1] = v22;
  v54 = v22;
  type metadata accessor for Prio3PrepareShare(255, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  v24 = type metadata accessor for Array();
  v25 = type metadata accessor for Array();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v24);
  v26 = v60;
  result = Sequence.reduce<A>(into:_:)();
  if (v26)
    return result;
  v57 = (_QWORD *)AssociatedConformanceWitness;
  v52 = v13;
  v70 = v62;
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12C8], v25);
  v66 = ArraySlice.init<A>(_:)();
  v67 = v27;
  v68 = v28;
  v69 = v29;
  *(_QWORD *)&v62 = v61;
  MEMORY[0x24BDAC7A8](v66, v27);
  v30 = v56;
  v51[-4] = v7;
  v51[-3] = v30;
  v31 = v54;
  v51[-2] = v6;
  v51[-1] = v31;
  result = Sequence.compactMap<A>(_:)();
  v32 = v55[1];
  if (v32 < 0)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v33 = 0;
  v34 = AssociatedTypeWitness;
  v54 = result;
  v51[1] = v32;
  if (v32)
  {
    v56 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v6 + 192);
    while (1)
    {
      v61 = v33;
      v35 = v58(v7, v6);
      v36 = v34;
      v37 = type metadata accessor for ArraySlice();
      v38 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE2188], v37);
      RandomAccessCollection<>.popFirst(_:)(v35, v37);
      v60 = v62;
      v39 = v61;
      v40 = v56(&v62, v37, v38, v7, v6);
      v33 = v39;
      if (v39)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      v41 = v57;
      if ((v40 & 1) == 0)
        break;
      swift_unknownObjectRelease();
      --v32;
      v34 = v36;
      if (!v32)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v50 = 0;
    *(_QWORD *)(v50 + 8) = 0;
    *(_BYTE *)(v50 + 16) = 4;
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  else
  {
    v41 = v57;
LABEL_11:
    v42 = v55;
    v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(v7, v6);
    v44 = *(_QWORD *)(v54 + 16);
    if (v43 < 1)
    {
      swift_bridgeObjectRelease();
      if (!v44)
      {
        result = swift_unknownObjectRelease();
        *v53 = 0;
        return result;
      }
      *(_QWORD *)&v62 = 0;
      *((_QWORD *)&v62 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      v48 = 0xD00000000000003BLL;
      v49 = "VDAF/Prio3.swift: unexpected jointRandPart in prepare share";
    }
    else
    {
      if (v44 == *v42)
      {
        v45 = v52;
        v46 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, v52);
        *(_QWORD *)&v62 = v45;
        *((_QWORD *)&v62 + 1) = v34;
        v63 = v46;
        v64 = v41;
        type metadata accessor for VerificationJointRandomness();
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)&v62 = 0;
      *((_QWORD *)&v62 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      v48 = 0xD000000000000038;
      v49 = "VDAF/Prio3.swift: missing jointRandPart in prepare share";
    }
    *(_QWORD *)v47 = v48;
    *(_QWORD *)(v47 + 8) = (unint64_t)(v49 - 32) | 0x8000000000000000;
    *(_BYTE *)(v47 + 16) = 1;
    swift_willThrow();
  }
  return swift_unknownObjectRelease();
}

void Prio3.prepareState<A>(from:aggregatorID:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[14];

  v10[13] = a4;
  v10[4] = a1;
  v10[5] = a5;
  v10[6] = a3;
  v5 = MEMORY[0x24BDAC7A8](a1, a2);
  MEMORY[0x24BDAC7A8](v5, v6);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  Prio3PrepareStateDecodableParameter.init(prio3:aggregatorID:)();
}

uint64_t sub_249C1C490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);
  uint64_t v9;
  uint64_t result;

  if (!v2)
  {
    *(_QWORD *)(v5 - 152) = *(_QWORD *)(v5 - 120);
    v6 = *(unsigned __int8 *)(v5 - 112);
    *(_OWORD *)(v5 - 176) = *(_OWORD *)(v5 - 104);
    v7 = *(_QWORD *)(v5 - 88);
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16);
    v9 = *(_QWORD *)(v5 - 128);
    v8(v3, *(_QWORD *)(v5 - 144), v9);
    *(_QWORD *)(v5 - 120) = *(_QWORD *)(v5 - 152);
    *(_QWORD *)(v5 - 112) = v6;
    *(_OWORD *)(v5 - 104) = *(_OWORD *)(v5 - 176);
    *(_QWORD *)(v5 - 88) = v7;
    return Prio3PrepareState.init<A>(from:parameter:)(v3, v5 - 120, v4, v0, v9);
  }
  return result;
}

uint64_t Prio3.prepareMessage<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1, a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return Prio3PrepareMessage.init<A>(from:parameter:)((uint64_t)v6, a2, a3);
}

uint64_t Prio3.prepareNext(state:message:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *a2;
  if (*(_QWORD *)(a1 + 16))
  {
    if (v10 && specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *a2))
      goto LABEL_4;
LABEL_7:
    _StringGuts.grow(_:)(68);
    v17._object = (void *)0x8000000249C30750;
    v17._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000002ELL;
    v18._object = (void *)0x8000000249C30770;
    String.append(_:)(v18);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Seed?);
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000249C307A0;
    v20._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v20);
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0xE000000000000000;
    *(_BYTE *)(v22 + 16) = 1;
    return swift_willThrow();
  }
  if (v10)
    goto LABEL_7;
LABEL_4:
  v11 = *(_QWORD *)(a3 + 32);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(v11 + 48))(*(_QWORD *)(a3 + 16), v11);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, a3);
  swift_getAssociatedConformanceWitness();
  result = static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v7, v8, v9, v12, a3, AssociatedTypeWitness, v14);
  if (!v4)
  {
    v16 = (*(uint64_t (**)(void))(v11 + 128))();
    swift_bridgeObjectRelease();
    result = OutputShare.init(_:)(v16, &v23);
    *(_QWORD *)a4 = v23;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_BYTE *)(a4 + 56) = 1;
  }
  return result;
}

uint64_t Prio3.unshard<A>(_:numOfMeasurements:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v34 = a6;
  v35 = a2;
  v10 = *(_QWORD *)(a3 + 32);
  v39 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v15 = (char *)&v34 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v13, v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v41 = a1;
  v20(v19, a1, a4);
  v40 = a5;
  v21 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  LOBYTE(a1) = dispatch thunk of Collection.isEmpty.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a4);
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v36 = v21;
    v23 = v39;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 72);
    v38 += *(int *)(a3 + 56);
    v26 = v25(v23, v10);
    v27 = specialized Array.init(repeating:count:)((uint64_t)v15, v26, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, AssociatedTypeWitness);
    v28 = AggregateShare.init(_:)(v27, v43);
    MEMORY[0x24BDAC7A8](v28, v29);
    v30 = *(_QWORD *)(a3 + 24);
    *(&v34 - 6) = v23;
    *(&v34 - 5) = v30;
    *(&v34 - 4) = a4;
    *(&v34 - 3) = v10;
    v31 = v40;
    *(&v34 - 2) = *(_QWORD *)(a3 + 40);
    *(&v34 - 1) = v31;
    type metadata accessor for AggregateShare(0, AssociatedTypeWitness, AssociatedConformanceWitness, v32);
    v33 = v42;
    result = Sequence.reduce<A>(into:_:)();
    if (!v33)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 120))(v43[2], v35, v23, v10);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3Error(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), (void (*)(void))outlined copy of Prio3Error) & 1;
}

uint64_t static Prio3.numOfAggregatorRange.getter()
{
  return 2;
}

uint64_t static Prio3.nonceSize.getter()
{
  return 16;
}

uint64_t static Prio3.numOfRounds.getter()
{
  return 1;
}

uint64_t Prio3.numOfAggregators.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Prio3.numOfProofs.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Prio3.flp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 56));
}

uint64_t Prio3.randomSizeForShard.getter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  if (__OFSUB__(*v1, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*v1 + 0x3FFFFFFFFFFFFFFFLL < 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v3 = result;
  v4 = (2 * (*v1 - 1)) | 1;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 32) + 80))(*(_QWORD *)(result + 16));
  if (result <= 0)
    v5 = 0;
  else
    v5 = v2;
  v6 = v4 + v5;
  if (__OFADD__(v4, v5))
    goto LABEL_11;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 40) + 8))();
  result = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
LABEL_12:
    __break(1u);
  return result;
}

uint64_t static Prio3.isRecommended(numOfProofs:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t AssociatedTypeWitness;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 24)
                  + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v47 = (char *)&v44 - v8;
  v9 = swift_checkMetadataState();
  v50 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v45 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)&v44 - v15;
  v18 = MEMORY[0x24BDAC7A8](v14, v17);
  v49 = (char *)&v44 - v19;
  MEMORY[0x24BDAC7A8](v18, v20);
  v22 = (char *)&v44 - v21;
  static Prio3.identifier.getter(a2, a4, (char *)&v51);
  if (v51 != 8)
  {
    static Prio3.identifier.getter(a2, a4, (char *)&v51);
    if (v51 != 9)
      return a1 == 1;
  }
  if (a1 - 256 < 0xFFFFFFFFFFFFFF01)
    return 0;
  swift_checkMetadataState();
  static FieldElement.modulus.getter();
  v23 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v24 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v23 & 1) != 0)
  {
    if (v24 <= 32)
    {
      v25 = v48;
      v26 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v28 = v47;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, v26, AssociatedConformanceWitness);
      v29 = v49;
      MEMORY[0x24BD00904](v28, v9, v25);
      LOBYTE(v26) = dispatch thunk of static Comparable.> infix(_:_:)();
      v30 = v50;
      v31 = *(void (**)(char *, uint64_t))(v50 + 8);
      v31(v29, v9);
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v16, v22, v9);
      if ((v26 & 1) != 0)
        dispatch thunk of BinaryInteger._lowWord.getter();
      v31(v16, v9);
      goto LABEL_18;
    }
  }
  else if (v24 < 33)
  {
    dispatch thunk of BinaryInteger._lowWord.getter();
    v31 = *(void (**)(char *, uint64_t))(v50 + 8);
    goto LABEL_18;
  }
  LODWORD(v51) = -1;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v33 = v49;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v34 = dispatch thunk of static Comparable.< infix(_:_:)();
  v35 = v50;
  v31 = *(void (**)(char *, uint64_t))(v50 + 8);
  v31(v33, v9);
  if ((v34 & 1) != 0)
  {
    v36 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v36 & 1) != 0)
    {
      if (v37 <= 64)
      {
        v38 = AssociatedTypeWitness;
        v39 = swift_getAssociatedConformanceWitness();
        v40 = v47;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, v38, v39);
        MEMORY[0x24BD00904](v40, v9, v48);
        v41 = dispatch thunk of static Comparable.> infix(_:_:)();
        v31(v33, v9);
        v42 = v45;
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v45, v22, v9);
        if ((v41 & 1) != 0)
          dispatch thunk of BinaryInteger._lowWord.getter();
        v31(v42, v9);
        goto LABEL_25;
      }
    }
    else if (v37 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_25:
      v31(v22, v9);
      return a1 > 1;
    }
    v51 = -1;
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v43 = dispatch thunk of static Comparable.< infix(_:_:)();
    v31(v33, v9);
    v31(v22, v9);
    if ((v43 & 1) != 0)
      return 1;
    return a1 > 1;
  }
LABEL_18:
  v31(v22, v9);
  return 0;
}

void type metadata accessor for Prio3()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t static Prio3.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  char v8;
  uint64_t v9;

  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 40);
  v6(&v9, a1, a2);
  if (v9 != 2)
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1, a2);
  type metadata accessor for XofHmacSha256Aes128(0);
  result = swift_dynamicCastMetatype();
  if (result)
    v8 = 9;
  else
    v8 = 8;
  *a3 = v8;
  return result;
}

uint64_t static Prio3.version.getter()
{
  return 8;
}

uint64_t protocol witness for static VDAFProtocol.identifier.getter in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return static Prio3.identifier.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a2);
}

uint64_t Prio3.splitSeedBytes<A>(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD *, _QWORD *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *);
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v7 = a2;
  v8 = *(a2 - 1);
  v9 = MEMORY[0x24BDAC7A8](a1, a1);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v9, v14);
  v17 = (unint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v18);
  v20 = (char *)&v68 - v19;
  v70 = *(void (**)(char *))(v13 + 16);
  v71 = v21;
  v70((char *)&v68 - v19);
  v22 = *(void (**)(char *, _QWORD *, _QWORD *))(v8 + 16);
  v72 = v4;
  v22(v11, v4, v7);
  v69 = a4;
  v23 = dispatch thunk of Collection.count.getter();
  v24 = Prio3.randomSizeForShard.getter((uint64_t)v7);
  (*(void (**)(char *, _QWORD *))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, a3);
  if (v23 != v24)
  {
    __break(1u);
    goto LABEL_27;
  }
  ((void (*)(unint64_t, uint64_t, uint64_t))v70)(v17, v71, a3);
  v75 = ArraySlice.init<A>(_:)();
  v76 = v25;
  v77 = v26;
  v78 = v27;
  v28 = v7[3];
  v17 = v7[5];
  v29 = (*(uint64_t (**)(uint64_t, unint64_t))(v17 + 8))(v28, v17);
  v13 = (uint64_t)v72;
  v31 = *v72 - 1;
  if (__OFSUB__(*v72, 1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v31 < 0)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v32 = v29;
  v73 = 0;
  v74 = v31;
  v33 = MEMORY[0x24BDAC7A8](v29, v30);
  v34 = v7[2];
  *(&v68 - 10) = v34;
  *(&v68 - 9) = v28;
  v35 = v7[4];
  *(&v68 - 8) = a3;
  *(&v68 - 7) = v35;
  v36 = v69;
  *(&v68 - 6) = v17;
  *(&v68 - 5) = v36;
  *(&v68 - 4) = (uint64_t)&v75;
  *(&v68 - 3) = v33;
  *(&v68 - 2) = v13;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (measurementShare: Seed, proofShare: Seed, jointRandBlind: Seed?));
  v39 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v71 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Prio3.splitSeedBytes<A>(_:), (uint64_t)(&v68 - 12), v37, v38, MEMORY[0x24BEE4078], v39, MEMORY[0x24BEE40A8], v40);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 80))(v34, v35) >= 1)
  {
    v41 = v75;
    v42 = v76;
    v43 = v77;
    v44 = v78;
    v45 = specialized Collection.prefix(_:)(v32, v75, v76, v77, v78);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    v75 = specialized Collection.dropFirst(_:)(v32, v41, v42, v43, v44);
    v76 = v52;
    v77 = v53;
    v78 = v54;
    if ((v51 & 1) != 0)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain();
      v55 = swift_dynamicCastClass();
      if (!v55)
      {
        swift_unknownObjectRelease();
        v55 = MEMORY[0x24BEE4AF8];
      }
      v56 = *(_QWORD *)(v55 + 16);
      swift_release();
      if (__OFSUB__(v51 >> 1, v49))
      {
        __break(1u);
      }
      else if (v56 == (v51 >> 1) - v49)
      {
        if (!swift_dynamicCastClass())
          swift_unknownObjectRelease();
        goto LABEL_15;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
    }
    specialized _copyCollectionToContiguousArray<A>(_:)(v45, v47, v49, v51);
LABEL_15:
    swift_unknownObjectRelease();
  }
  v58 = v75;
  v57 = v76;
  v60 = v77;
  v59 = v78;
  a3 = specialized Collection.prefix(_:)(v32, v75, v76, v77, v78);
  v13 = v61;
  v7 = v62;
  v17 = v63;
  specialized Collection.dropFirst(_:)(v32, v58, v57, v60, v59);
  if ((v17 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_18:
    specialized _copyCollectionToContiguousArray<A>(_:)(a3, v13, (uint64_t)v7, v17);
    goto LABEL_25;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v64 = swift_dynamicCastClass();
  if (!v64)
  {
    swift_unknownObjectRelease();
    v64 = MEMORY[0x24BEE4AF8];
  }
  v65 = *(_QWORD *)(v64 + 16);
  swift_release();
  if (__OFSUB__(v17 >> 1, v7))
    goto LABEL_29;
  if (v65 != (v17 >> 1) - (_QWORD)v7)
  {
LABEL_30:
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  if (!swift_dynamicCastClass())
    swift_unknownObjectRelease();
LABEL_25:
  v66 = v71;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v66;
}

void closure #1 in Prio3.splitSeedBytes<A>(_:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = specialized Collection.prefix(_:)(a3, *a2, v6, v8, v7);
  v36 = v10;
  v12 = v11;
  v14 = v13;
  *a2 = specialized Collection.dropFirst(_:)(a3, v5, v6, v8, v7);
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  if ((v14 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v18 = swift_dynamicCastClass();
    if (!v18)
    {
      swift_unknownObjectRelease();
      v18 = MEMORY[0x24BEE4AF8];
    }
    v19 = *(_QWORD *)(v18 + 16);
    swift_release();
    if (__OFSUB__(v14 >> 1, v12))
    {
      __break(1u);
    }
    else if (v19 == (v14 >> 1) - v12)
    {
      if (!swift_dynamicCastClass())
        swift_unknownObjectRelease();
LABEL_10:
      swift_unknownObjectRelease();
      v21 = *a2;
      v20 = a2[1];
      v23 = a2[2];
      v22 = a2[3];
      v24 = specialized Collection.prefix(_:)(a3, *a2, v20, v23, v22);
      v35 = v25;
      v27 = v26;
      v29 = v28;
      *a2 = specialized Collection.dropFirst(_:)(a3, v21, v20, v23, v22);
      a2[1] = v30;
      a2[2] = v31;
      a2[3] = v32;
      if ((v29 & 1) != 0)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        swift_unknownObjectRetain();
        v33 = swift_dynamicCastClass();
        if (!v33)
        {
          swift_unknownObjectRelease();
          v33 = MEMORY[0x24BEE4AF8];
        }
        v34 = *(_QWORD *)(v33 + 16);
        swift_release();
        if (__OFSUB__(v29 >> 1, v27))
        {
          __break(1u);
        }
        else if (v34 == (v29 >> 1) - v27)
        {
          if (!swift_dynamicCastClass())
            swift_unknownObjectRelease();
LABEL_19:
          swift_unknownObjectRelease();
          type metadata accessor for Prio3();
        }
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
      }
      specialized _copyCollectionToContiguousArray<A>(_:)(v24, v35, v27, v29);
      goto LABEL_19;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v9, v36, v12, v14);
  goto LABEL_10;
}

uint64_t Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;

  v7 = *a4;
  v8 = *(_QWORD *)(a5 + 32);
  if ((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a6 + 32) + 80))(*(_QWORD *)(a6 + 16), *(_QWORD *)(a6 + 32)) <= 0)
  {
    if (!(v8 | v7))
      return 0;
    _StringGuts.grow(_:)(103);
    v11._object = (void *)0x8000000249C30750;
    v11._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0xD000000000000065;
    v12._object = (void *)0x8000000249C30950;
    String.append(_:)(v12);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0xE000000000000000;
    goto LABEL_10;
  }
  if (v8)
  {
    if (v7)
    {
      swift_getAssociatedTypeWitness();
      MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>, a6);
      swift_getAssociatedConformanceWitness();
      type metadata accessor for VerificationJointRandomness();
    }
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000038;
    *(_QWORD *)(v13 + 8) = 0x8000000249C30A00;
LABEL_10:
    *(_BYTE *)(v13 + 16) = 1;
    return swift_willThrow();
  }
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  swift_allocError();
  *(_QWORD *)v10 = 0xD000000000000037;
  *(_QWORD *)(v10 + 8) = 0x8000000249C309C0;
  *(_BYTE *)(v10 + 16) = 0;
  return swift_willThrow();
}

void Prio3.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderJointBlind:helperShares:)()
{
  type metadata accessor for Prio3InputShare();
}

void closure #4 in Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t a1)
{
  unint64_t v1;

  v1 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1 <= 0xFF)
      type metadata accessor for Prio3();
LABEL_7:
    __break(1u);
    JUMPOUT(0x249C1E10CLL);
  }
  __break(1u);
  goto LABEL_7;
}

void closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t a1)
{
  unint64_t v1;

  v1 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1 <= 0xFF)
      type metadata accessor for Prio3();
LABEL_7:
    __break(1u);
    JUMPOUT(0x249C1E1E8);
  }
  __break(1u);
  goto LABEL_7;
}

uint64_t protocol witness for Client.shard<A>(_:nonce:seedBytes:) in conformance Prio3<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  return Prio3.shard<A>(_:nonce:seedBytes:)(a1, a2, a3, a4, a7, a5, a6);
}

uint64_t Prio3.verifyKeyLength.getter(uint64_t *a1)
{
  return specialized Prio3.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5]);
}

uint64_t closure #1 in Prio3.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;

  v2 = *a2;
  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Array();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return Array<A>.elementwiseAdd(_:)(v2, v3, AssociatedConformanceWitness);
}

uint64_t Prio3.aggregate<A>(_:parameter:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v23 = a1;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v6 = a2[4];
  v7 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v12 = (char *)&v19 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v7, v6);
  v15 = specialized Array.init(repeating:count:)((uint64_t)v12, v14, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  AggregateShare.init(_:)(v15, &v30);
  v16 = a2[3];
  v24 = v7;
  v25 = v16;
  v26 = v20;
  v27 = v6;
  v28 = a2[5];
  v29 = v21;
  type metadata accessor for AggregateShare(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  return Sequence.reduce<A>(into:_:)();
}

uint64_t closure #1 in Prio3.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for AggregateShare(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  return AggregateShare.accumulate(_:)((uint64_t)&v7, v5);
}

uint64_t Prio3.isValid(parameter:previousParameters:)()
{
  return specialized PINE.isValid(parameter:previousParameters:)();
}

uint64_t Prio3.prepareShare<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v23 = a6;
  v24 = a5;
  v22 = a1;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(_QWORD *)(v12 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 64))(v14, v13);
  v16 = *(_QWORD *)(v6 + 8);
  v17 = result * v16;
  if ((unsigned __int128)(result * (__int128)v16) >> 64 == (result * v16) >> 63)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 80))(v14, v13) < 1)
      v18 = 0;
    else
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)(a3 + 40) + 8))();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v22, a4);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return Prio3PrepareShare.init<A>(from:parameter:)((uint64_t)v11, v17, v18, 0, AssociatedTypeWitness, a4, AssociatedConformanceWitness, v24, v23);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Prio3.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))OutputShare.init<A>(from:parameter:));
}

uint64_t protocol witness for Aggregator.verifyKeyLength.getter in conformance Prio3<A, B>(uint64_t *a1)
{
  return specialized Prio3.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5]);
}

void protocol witness for Aggregator.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:) in conformance Prio3<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t protocol witness for Aggregator.prepareMessageFrom(_:parameter:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  return Prio3.prepareMessageFrom(_:parameter:)(a1, a2, a3);
}

uint64_t protocol witness for Aggregator.prepareNext(state:message:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Prio3.prepareNext(state:message:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Aggregator.aggregate<A>(_:parameter:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return Prio3.aggregate<A>(_:parameter:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for Aggregator.isValid(parameter:previousParameters:) in conformance Prio3<A, B>()
{
  return specialized PINE.isValid(parameter:previousParameters:)();
}

void protocol witness for Aggregator.inputShare<A>(from:aggregatorID:) in conformance Prio3<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Prio3.inputShare<A>(from:aggregatorID:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Aggregator.publicShare<A>(from:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, size_t *a5@<X8>)
{
  return Prio3.publicShare<A>(from:)(a1, a4, a2, a3, a5);
}

void protocol witness for Aggregator.prepareState<A>(from:aggregatorID:) in conformance Prio3<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Prio3.prepareState<A>(from:aggregatorID:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Aggregator.prepareShare<A>(from:aggregatorID:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return Prio3.prepareShare<A>(from:aggregatorID:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Aggregator.prepareMessage<A>(from:aggregatorID:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return Prio3.prepareMessage<A>(from:aggregatorID:)(a1, a2, a3);
}

uint64_t protocol witness for Aggregator.outputShare<A>(from:) in conformance Prio3<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.outputShare<A>(from:)(a1, a4, a2, a3);
}

uint64_t closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;

  v6 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return static AggregateShare.+= infix(_:_:)(a1, &v6, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t Prio3.aggregateShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AggregateShare.init<A>(from:parameter:));
}

uint64_t Prio3.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = a5;
  MEMORY[0x24BDAC7A8](a1, a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return v14(v8, 1, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
}

uint64_t protocol witness for Collector.unshard<A>(_:numOfMeasurements:parameter:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Collector.aggregateShare<A>(from:) in conformance Prio3<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.aggregateShare<A>(from:)(a1, a4, a2, a3);
}

void partial apply for closure #4 in Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t a1)
{
  closure #4 in Prio3.shard<A>(_:nonce:seedBytes:)(a1);
}

void partial apply for closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t a1)
{
  closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(a1);
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = static Array._allocateUninitialized(_:)();
  v15 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a3 - 8);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      v11 = a2 - 1;
      if (v11)
      {
        v12 = *(_QWORD *)(v9 + 72);
        v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    v14 = type metadata accessor for Array();
    AggregateShare.share.modify(v14);
    return v15;
  }
  return result;
}

uint64_t specialized Prio3.verifyKeyLength.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
}

uint64_t partial apply for closure #1 in Prio3.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in Prio3.prepareMessageFrom(_:parameter:)(a1, a2);
}

uint64_t partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:));
}

uint64_t partial apply for closure #1 in Prio3.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Prio3.aggregate<A>(_:parameter:));
}

uint64_t partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

unint64_t instantiation function for generic protocol witness table for Prio3Error(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  result = lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void associated type witness table accessor for VDAFProtocol.InputShare : Equatable in Prio3<A, B>()
{
  JUMPOUT(0x24BD00BD4);
}

void associated type witness table accessor for VDAFProtocol.InputShare : VDAFDecodable in Prio3<A, B>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.InputShare : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3InputShare<A, B>;
}

void associated type witness table accessor for VDAFProtocol.PublicShare : Equatable in Prio3<A, B>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFDecodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PublicShare<A, B>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PublicShare<A, B>;
}

uint64_t associated type witness table accessor for VDAFProtocol.XOF : ExtendableOutputFunction in Prio3<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

unint64_t lazy protocol witness table accessor for type Prio3PrepareMessage and conformance Prio3PrepareMessage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prio3PrepareMessage and conformance Prio3PrepareMessage;
  if (!lazy protocol witness table cache variable for type Prio3PrepareMessage and conformance Prio3PrepareMessage)
  {
    result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3PrepareMessage, &type metadata for Prio3PrepareMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prio3PrepareMessage and conformance Prio3PrepareMessage);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFDecodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareMessage;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareMessage;
}

void associated type witness table accessor for Aggregator.PrepareShare : Equatable in Prio3<A, B>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFDecodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareShare<A>;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareShare<A>;
}

void associated type witness table accessor for Aggregator.PrepareState : Equatable in Prio3<A, B>()
{
  JUMPOUT(0x24BD00BD4);
}

void associated type witness table accessor for Aggregator.PrepareState : VDAFDecodable in Prio3<A, B>()
{
  JUMPOUT(0x24BD00BD4);
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareState : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareState<A, B>;
}

uint64_t instantiation function for generic protocol witness table for Prio3<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24BD00BD4](&protocol conformance descriptor for Prio3<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined copy of Prio3Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for Prio3Error(uint64_t a1)
{
  return outlined consume of Prio3Error(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of Prio3Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Prio3Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Prio3Error(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Prio3Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Prio3Error(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Prio3Error(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Prio3Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Prio3Error(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Prio3Error()
{
  return &type metadata for Prio3Error;
}

uint64_t type metadata completion function for Prio3()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Prio3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v9 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v10 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  }
  return v3;
}

_QWORD *initializeWithCopy for Prio3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithCopy for Prio3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *initializeWithTake for Prio3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithTake for Prio3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_249C1F2E8 + 4 * byte_249C2B5F0[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for Prio3(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void partial apply for closure #1 in Prio3.splitSeedBytes<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Prio3.splitSeedBytes<A>(_:)(a1, *(_QWORD **)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t PINEPublicShare.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v13 = a1;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v18 & 1) != 0)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v35 = 0;
    v35[1] = 0;
    goto LABEL_9;
  }
  v46 = v7;
  v47 = v15;
  v19 = *(uint64_t **)(*(_QWORD *)(a7 + 8) + 8);
  v57 = v13;
  v48 = v19;
  v49 = v14;
  v20 = dispatch thunk of Collection.count.getter();
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 8);
  result = v21(a4, a6);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v23 = 2 * result * a2;
    if ((unsigned __int128)(2 * result * (__int128)a2) >> 64 == v23 >> 63)
    {
      if (v20 == v23)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v17, v57, a5);
        result = ArraySlice.init<A>(_:)();
        v53 = result;
        v54 = v24;
        v55 = v25;
        v56 = v26;
        if ((a2 & 0x8000000000000000) == 0)
        {
          v48 = &v46;
          v51 = 0;
          v52 = a2;
          MEMORY[0x24BDAC7A8](result, v24);
          *(&v46 - 6) = a4;
          *(&v46 - 5) = a5;
          *(&v46 - 4) = a6;
          *(&v46 - 3) = a7;
          *(&v46 - 2) = (uint64_t)&v53;
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
          v28 = lazy protocol witness table accessor for type Int and conformance Int();
          v50[0] = MEMORY[0x24BEE17A8];
          v50[1] = v28;
          v29 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE1BD8], v27, v50);
          v46 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:), (uint64_t)(&v46 - 8), v27, (uint64_t)&type metadata for Seed, MEMORY[0x24BEE4078], v29, MEMORY[0x24BEE40A8], v30);
          v51 = 0;
          v52 = a2;
          MEMORY[0x24BDAC7A8](v46, v31);
          *(&v46 - 6) = a4;
          *(&v46 - 5) = a5;
          *(&v46 - 4) = a6;
          *(&v46 - 3) = a7;
          *(&v46 - 2) = (uint64_t)&v53;
          v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:), (uint64_t)(&v46 - 8), v27, (uint64_t)&type metadata for Seed, MEMORY[0x24BEE4078], v29, MEMORY[0x24BEE40A8], v32);
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v57, a5);
          result = swift_unknownObjectRelease();
          v34 = v47;
          *v47 = v46;
          v34[1] = v33;
          return result;
        }
        goto LABEL_12;
      }
      v53 = 0;
      v54 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      type metadata accessor for PINEPublicShare(0, a4, a6, v36);
      v37._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 0x6572697571657220;
      v38._object = (void *)0xEF202A2032203A64;
      String.append(_:)(v38);
      v51 = v21(a4, a6);
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 2107936;
      v40._object = (void *)0xE300000000000000;
      String.append(_:)(v40);
      v51 = a2;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v41._countAndFlagsBits = 0x203A746F67202CLL;
      v41._object = (void *)0xE700000000000000;
      String.append(_:)(v41);
      v13 = v57;
      v51 = dispatch thunk of Collection.count.getter();
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43 = v53;
      v44 = v54;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *v45 = v43;
      v45[1] = v44;
      v14 = v49;
LABEL_9:
      swift_willThrow();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, a5);
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PINEPublicShare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PINEPublicShare);
}

uint64_t PINEPublicShare.init(wraparoundJointRandParts:verificationJointRandParts:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t PINEPublicShare.wraparoundJointRandParts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPublicShare.verificationJointRandParts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static PINEPublicShare.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
    return specialized static Array<A>.== infix(_:_:)(v2, v3);
  else
    return 0;
}

uint64_t partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:)(a1);
}

{
  uint64_t v1;

  return closure #1 in PINEPublicShare.init<A>(from:parameter:)(*(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t closure #1 in PINEPublicShare.init<A>(from:parameter:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v7 = *a1;
  v6 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v10 = specialized Collection.prefix(_:)(v5, *a1, v6, v8, v9);
  v24 = v11;
  v13 = v12;
  v15 = v14;
  *a1 = specialized Collection.dropFirst(_:)(v5, v7, v6, v8, v9);
  a1[1] = v16;
  a1[2] = v17;
  a1[3] = v18;
  if ((v15 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    specialized _copyCollectionToContiguousArray<A>(_:)(v10, v24, v13, v15);
    v20 = v19;
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
  }
  v22 = *(_QWORD *)(v21 + 16);
  swift_release();
  if (__OFSUB__(v15 >> 1, v13))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v22 != (v15 >> 1) - v13)
  {
LABEL_12:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
LABEL_10:
  result = swift_unknownObjectRelease();
  *a4 = v20;
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPublicShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PINEPublicShare.init<A>(from:parameter:)(a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8), *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

void PINEPublicShare.encodedLength.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *v0;
  v1 = v0[1];
  v3 = *(_QWORD *)(*v0 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v24 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = 0;
    v4 = v24;
    v6 = *(_QWORD *)(v24 + 16);
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5 + 32) + 16);
      v8 = *(_QWORD *)(v24 + 24);
      if (v6 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v6 + 1, 1);
      ++v5;
      *(_QWORD *)(v24 + 16) = v6 + 1;
      *(_QWORD *)(v24 + 8 * v6++ + 32) = v7;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)(v4 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = (uint64_t *)(v4 + 32);
    while (1)
    {
      v12 = *v11++;
      v13 = __OFADD__(v10, v12);
      v10 += v12;
      if (v13)
        break;
      if (!--v9)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_28;
  }
  v10 = 0;
LABEL_13:
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v1 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (v14)
  {
    v25 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v16 = 0;
    v15 = v25;
    v17 = *(_QWORD *)(v25 + 16);
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v1 + 8 * v16 + 32) + 16);
      v19 = *(_QWORD *)(v25 + 24);
      if (v17 >= v19 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v17 + 1, 1);
      ++v16;
      *(_QWORD *)(v25 + 16) = v17 + 1;
      *(_QWORD *)(v25 + 8 * v17++ + 32) = v18;
    }
    while (v14 != v16);
    swift_bridgeObjectRelease();
  }
  v20 = *(_QWORD *)(v15 + 16);
  if (v20)
  {
    v21 = 0;
    v22 = (uint64_t *)(v15 + 32);
    while (1)
    {
      v23 = *v22++;
      v13 = __OFADD__(v21, v23);
      v21 += v23;
      if (v13)
        break;
      if (!--v20)
        goto LABEL_25;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return;
  }
  v21 = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  if (__OFADD__(v10, v21))
    goto LABEL_29;
}

uint64_t PINEPublicShare.encode<A>(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[1];
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    do
    {
      ++v3;
      swift_bridgeObjectRetain();
      Seed.encode<A>(into:)();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
    result = swift_bridgeObjectRelease();
  }
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    do
    {
      ++v6;
      swift_bridgeObjectRetain();
      Seed.encode<A>(into:)();
      swift_bridgeObjectRelease();
    }
    while (v5 != v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPublicShare<A>()
{
  return PINEPublicShare.encode<A>(into:)();
}

uint64_t Prio3PrepareShare.init(verifierShare:jointRandPart:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Prio3PrepareShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(unint64_t, uint64_t);
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v94 = a8;
  v9 = a7;
  v95 = a3;
  v88 = a9;
  v92 = *(_QWORD *)(a7 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v15 = type metadata accessor for Optional();
  v17 = MEMORY[0x24BDAC7A8](v15, v16);
  v19 = (char *)&v81 - v18;
  v20 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v17, v21);
  v23 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) != 0)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v53 = 0;
    v53[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a6);
  }
  v89 = v20;
  v96 = a6;
  v97 = a1;
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
  v25 = v24(a5, v9);
  v26 = v25 * a2;
  if ((unsigned __int128)(v25 * (__int128)a2) >> 64 != (v25 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_24;
  }
  v86 = (uint64_t (*)(unint64_t, uint64_t))v24;
  v87 = a2;
  v20 = a5;
  a4 = *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8);
  v27 = dispatch thunk of Collection.count.getter();
  v28 = v26 + v95;
  if (__OFADD__(v26, v95))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v27 != v28)
  {
    v98 = 0;
    v99 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    type metadata accessor for Prio3PrepareShare(0, a5, v9, v54);
    v55 = _typeName(_:qualified:)();
    v57 = v56;
    swift_bridgeObjectRelease();
    v98 = v55;
    v99 = v57;
    v58._countAndFlagsBits = 0x6572697571657220;
    v58._object = (void *)0xEB00000000203A64;
    String.append(_:)(v58);
    v102 = v28;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    v60._countAndFlagsBits = 0x203A746F67202CLL;
    v60._object = (void *)0xE700000000000000;
    String.append(_:)(v60);
    v61 = v96;
    v62 = v97;
    v102 = dispatch thunk of Collection.count.getter();
    v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64 = v98;
    v65 = v99;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v66 = v64;
    v66[1] = v65;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v62, v61);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v23, v97, v96);
  v29 = ArraySlice.init<A>(_:)();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v36 = specialized Collection.prefix(_:)(v26, v29, v30, v32, v34);
  v94 = v37;
  v84 = v39;
  v85 = v38;
  v40 = specialized Collection.dropFirst(_:)(v26, v29, v31, v33, v35);
  v82 = v42;
  v83 = v41;
  v44 = v43;
  v98 = v36;
  v99 = v94;
  v100 = v85;
  v101 = v84;
  v45 = TupleTypeMetadata3;
  v46 = *(int *)(TupleTypeMetadata3 + 48);
  v47 = *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v19, 1, 1);
  *(_QWORD *)&v19[v46] = v87;
  swift_unknownObjectRetain();
  *(_QWORD *)&v19[v47] = v86(v20, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v19, 0, 1, v45);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  v49 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  v50 = v93;
  v51 = Array<A>.init<A>(from:parameter:)((uint64_t)&v98, (uint64_t)v19, v20, v48, v92, v49);
  if (v50)
  {
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v97, v96);
    return swift_unknownObjectRelease();
  }
  v9 = v51;
  v67 = v44;
  v68 = v82;
  v69 = v83;
  v70 = v95;
  if (v95 >= 1)
  {
    a4 = specialized Collection.prefix(_:)(v95, v40, v83, v82, v67);
    v71 = v70;
    v93 = v72;
    v94 = v73;
    v20 = v74;
    specialized Collection.dropFirst(_:)(v71, v40, v69, v68, v67);
    v75 = v97;
    if ((v20 & 1) == 0)
    {
      swift_unknownObjectRetain();
LABEL_12:
      specialized _copyCollectionToContiguousArray<A>(_:)(a4, v93, v94, v20);
      v77 = v76;
LABEL_20:
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v75, v96);
      result = swift_unknownObjectRelease();
      goto LABEL_21;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v78 = swift_dynamicCastClass();
    if (!v78)
    {
      swift_unknownObjectRelease();
      v78 = MEMORY[0x24BEE4AF8];
    }
    v79 = *(_QWORD *)(v78 + 16);
    swift_release();
    if (!__OFSUB__(v20 >> 1, v94))
    {
      if (v79 == (v20 >> 1) - v94)
      {
        v77 = swift_dynamicCastClass();
        v75 = v97;
        if (!v77)
        {
          swift_unknownObjectRelease();
          v77 = MEMORY[0x24BEE4AF8];
        }
        goto LABEL_20;
      }
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_unknownObjectRelease();
    v75 = v97;
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v97, v96);
  result = swift_unknownObjectRelease();
  v77 = 0;
LABEL_21:
  v80 = v88;
  *v88 = v9;
  v80[1] = v77;
  return result;
}

uint64_t type metadata accessor for Prio3PrepareShare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Prio3PrepareShare);
}

uint64_t Prio3PrepareShare.verifierShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3PrepareShare.jointRandPart.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3PrepareShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if ((static Array<A>.== infix(_:_:)() & 1) != 0)
  {
    if (v2)
    {
      if (v3 && specialized static Array<A>.== infix(_:_:)(v2, v3))
        return 1;
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3PrepareShare<A>(uint64_t a1, uint64_t a2)
{
  return static Prio3PrepareShare.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PrepareShare<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return Prio3PrepareShare.init<A>(from:parameter:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4, a6);
}

uint64_t Prio3PrepareShare.encodedLength.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  v2 = v1[1];
  result = Array<A>.encodedLength.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40));
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 16);
    v5 = __OFADD__(result, v4);
    result += v4;
    if (v5)
      __break(1u);
  }
  return result;
}

uint64_t Prio3PrepareShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v5 = v4[1];
  result = Array<A>.encode<A>(into:)(a1, *v4, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40), a4);
  if (v5)
    return Seed.encode<A>(into:)();
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3PrepareShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3PrepareShare.encode<A>(into:)(a1, a4, a2, a3);
}

_QWORD *assignWithCopy for Prio3PrepareShare(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void static CountType.identifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CountType.encodedMeasurementLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CountType.outputLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CountType.jointRandLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CountType.gadgetParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CountType.gadget.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CountType.encode(measurement:)(char *a1, uint64_t a2)
{
  return specialized CountType.encode(measurement:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t CountType.decode(data:numOfMeasurements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  _QWORD v17[2];

  v17[1] = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = (char *)v17 - v9;
  v11 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v8, v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BD00400](a1, v4);
  if (result == 1)
  {
    Array.subscript.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 112))(v4, v5);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return MEMORY[0x24BD00694](v10, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8), AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CountType.truncate(measurement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = specialized CountType.truncate(measurement:)(a1, a2);
  if (!v2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t CountType.evaluateGadget<A>(_:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return MultiplicationGadget.evaluate<A>(at:)(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 24), a3);
}

uint64_t CountType.evaluateGadget(_:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for Polynomial(255, v4, v5, a2);
  v6 = type metadata accessor for Array();
  MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v6);
  return MultiplicationGadget.evaluate<A>(at:)(v4, v5, a3);
}

uint64_t CountType.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v57 = a2;
  v55 = a4;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1, v6);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v51 - v13;
  v16 = MEMORY[0x24BDAC7A8](v12, v15);
  v18 = (char *)&v51 - v17;
  v58 = v19;
  v20 = MEMORY[0x24BD00400](v16);
  if (v20 != *(_QWORD *)v4)
  {
    v40 = v20;
    v41 = *(_QWORD *)v4;
    *(_QWORD *)&v61 = 0;
    *((_QWORD *)&v61 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v61 = 0xD00000000000001BLL;
    *((_QWORD *)&v61 + 1) = 0x8000000249C307C0;
    v63 = v40;
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 540877088;
    v43._object = (void *)0xE400000000000000;
    String.append(_:)(v43);
    v63 = v41;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
LABEL_7:
    v49 = v61;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)v50 = v49;
    *(_BYTE *)(v50 + 16) = 2;
    return swift_willThrow();
  }
  v52 = v10;
  v53 = v14;
  v54 = *(_QWORD *)(a3 + 24);
  v22 = type metadata accessor for GadgetEvaluation(0, v58, v54, v21);
  v23 = MEMORY[0x24BD00400](v57, v22);
  v24 = *(_QWORD *)(v4 + 24);
  if (v23 != *(_QWORD *)(v24 + 16))
  {
    v45 = v23;
    *(_QWORD *)&v61 = 0;
    *((_QWORD *)&v61 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v61 = 0x2064696C61766E49;
    *((_QWORD *)&v61 + 1) = 0xEF203A746E756F63;
    v63 = v45;
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 540877088;
    v47._object = (void *)0xE400000000000000;
    String.append(_:)(v47);
    outlined retain of CountType<A>(v4);
    v48._countAndFlagsBits = MEMORY[0x24BD00394](v24, &type metadata for GadgetParameters);
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    outlined release of CountType<A>(v4);
    goto LABEL_7;
  }
  v61 = *(_OWORD *)(v4 + 32);
  v62 = *(_QWORD *)(v4 + 48);
  v25 = v58;
  getContiguousArrayStorageType<A>(for:)(v58, v58);
  v26 = v7;
  swift_allocObject();
  v27 = static Array._adoptStorage(_:count:)();
  Array.subscript.getter();
  Array.subscript.getter();
  _finalizeUninitializedArray<A>(_:)();
  v63 = v27;
  Array.subscript.getter();
  v28 = v60;
  v59 = v60;
  v30 = type metadata accessor for MultiplicationGadget(0, v25, v54, v29);
  v31 = type metadata accessor for Array();
  v32 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v30);
  v33 = MEMORY[0x24BD00BD4](MEMORY[0x24BEE12D8], v31);
  v34 = v56;
  Gadget.evaluate<A>(at:for:)((uint64_t)&v63, &v59, v30, v31, v32, v33, (uint64_t)v18);
  outlined consume of GadgetEvaluation<A><A, B>(v28);
  result = swift_bridgeObjectRelease();
  if (!v34)
  {
    v36 = v53;
    v37 = v58;
    Array.subscript.getter();
    v38 = v52;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v52, v18, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 136))(v38, v37, v54);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v39 = *(void (**)(char *, uint64_t))(v26 + 8);
    v39(v36, v37);
    return ((uint64_t (*)(char *, uint64_t))v39)(v18, v37);
  }
  return result;
}

int64x2_t CountType.init()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t result;

  v6 = MultiplicationGadget.init(numOfCalls:)();
  v8 = v7;
  v10 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_249C29130;
  v13 = type metadata accessor for MultiplicationGadget(0, a1, a2, v12);
  v14 = MEMORY[0x24BD00BD4](&protocol conformance descriptor for MultiplicationGadget<A>, v13);
  Gadget.parameters.getter(v13, v14, (uint64_t *)(v11 + 32));
  result = vdupq_n_s64(1uLL);
  *a3 = result;
  a3[1].i64[0] = 0;
  a3[1].i64[1] = v11;
  a3[2].i64[0] = v6;
  a3[2].i64[1] = v8;
  a3[3].i64[0] = v10;
  return result;
}

uint64_t protocol witness for FullyLinearProof.jointRandLength.getter in conformance CountType<A>()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t protocol witness for FullyLinearProof.gadgetParameters.getter in conformance CountType<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FullyLinearProof.encode(measurement:) in conformance CountType<A>(char *a1, uint64_t a2)
{
  return specialized CountType.encode(measurement:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance CountType<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return CountType.decode(data:numOfMeasurements:)(a1, a2, a3);
}

uint64_t protocol witness for FullyLinearProof.truncate(measurement:) in conformance CountType<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = specialized CountType.truncate(measurement:)(a1, a2);
  if (!v2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t protocol witness for FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:) in conformance CountType<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return CountType.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget<A>(_:at:) in conformance CountType<A>@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return CountType.evaluateGadget<A>(_:at:)(a2, a1, a3);
}

uint64_t specialized CountType.encode(measurement:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t result;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_getAssociatedTypeWitness();
  v36 = a3;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v35 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v35 - v16;
  v37 = v18;
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v35 = a1;
  v20 = a1;
  v21 = v19;
  v19((char *)&v35 - v16, v20, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  v22 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v23 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v22 & 1) != 0)
  {
    if (v23 > 64)
      goto LABEL_3;
LABEL_6:
    v26 = dispatch thunk of BinaryInteger._lowWord.getter();
    v21(v10, v17, AssociatedTypeWitness);
    if (!v26)
      goto LABEL_4;
    goto LABEL_7;
  }
  if (v23 <= 63)
    goto LABEL_6;
LABEL_3:
  v38 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, AssociatedTypeWitness);
  v21(v10, v17, AssociatedTypeWitness);
  if ((v24 & 1) != 0)
  {
LABEL_4:
    v25 = *(void (**)(char *, uint64_t))(v37 + 8);
    v25(v10, AssociatedTypeWitness);
    v25(v17, AssociatedTypeWitness);
    goto LABEL_13;
  }
LABEL_7:
  v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v27 & 1) == 0)
    goto LABEL_11;
  if (v28 <= 64)
    goto LABEL_12;
  while (1)
  {
    v38 = 1;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30 = *(void (**)(char *, uint64_t))(v37 + 8);
    v30(v14, AssociatedTypeWitness);
    v30(v10, AssociatedTypeWitness);
    v28 = ((uint64_t (*)(char *, uint64_t))v30)(v17, AssociatedTypeWitness);
    if ((v29 & 1) != 0)
      break;
    while (1)
    {
      __break(1u);
LABEL_11:
      if (v28 > 63)
        break;
LABEL_12:
      v31 = dispatch thunk of BinaryInteger._lowWord.getter();
      v32 = *(void (**)(char *, uint64_t))(v37 + 8);
      v32(v10, AssociatedTypeWitness);
      v28 = ((uint64_t (*)(char *, uint64_t))v32)(v17, AssociatedTypeWitness);
      if (v31 == 1)
        goto LABEL_13;
    }
  }
LABEL_13:
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  swift_allocObject();
  v33 = static Array._adoptStorage(_:count:)();
  v21(v14, v35, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v36 + 128))(v14, a2);
  result = v33;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t specialized CountType.truncate(measurement:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;

  if (MEMORY[0x24BD00400](a1, *(_QWORD *)(a2 + 16)) != *v2)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 540877088;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_QWORD *)v7 = 0xD00000000000001BLL;
    *(_QWORD *)(v7 + 8) = 0x8000000249C307C0;
    *(_BYTE *)(v7 + 16) = 2;
    swift_willThrow();
  }
  return a1;
}

uint64_t outlined retain of CountType<A>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of CountType<A>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t associated type witness table accessor for FullyLinearProof.F : FieldElement in CountType<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t destroy for CountType()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CountType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CountType(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CountType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CountType(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CountType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CountType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountType);
}

uint64_t MultiplicationGadget.init(numOfCalls:)()
{
  return 2;
}

uint64_t MultiplicationGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(_BYTE *, _QWORD);
  void (*v38)(char *);
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  void (*v41)(_BYTE *, _QWORD);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t AssociatedTypeWitness;
  uint64_t v62;
  uint64_t AssociatedConformanceWitness;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _BYTE v69[40];

  v62 = a3;
  v64 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v60 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v58 = (char *)&v54 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v59 = (char *)&v54 - v15;
  v68 = *(_QWORD *)(a1 - 8);
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  v57 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v67 = (char *)&v54 - v21;
  MEMORY[0x24BDAC7A8](v20, v22);
  v24 = (char *)&v54 - v23;
  v54 = a2;
  v55 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v55 - 8);
  v27 = MEMORY[0x24BDAC7A8](v55, v26);
  v29 = (char *)&v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v27, v30);
  v33 = (char *)&v54 - v32;
  MEMORY[0x24BDAC7A8](v31, v34);
  v36 = (char *)&v54 - v35;
  dispatch thunk of Collection.startIndex.getter();
  v37 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v38 = *(void (**)(char *))(v68 + 16);
  v56 = v24;
  v38(v24);
  v37(v69, 0);
  v39 = *(void (**)(char *, uint64_t))(v25 + 8);
  v40 = v55;
  v39(v36, v55);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(after:)();
  v39(v29, v40);
  v41 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v38(v67);
  v41(v69, 0);
  v39(v33, v40);
  v42 = v57;
  ((void (*)(char *, char *, uint64_t))v38)(v57, v24, a1);
  v43 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 136))(v42, a1, v62);
  v44 = swift_checkMetadataState();
  v45 = *(void (**)(uint64_t, uint64_t))(v43 + 88);
  v46 = v58;
  v45(a1, v43);
  v47 = v60;
  v48 = v67;
  v45(a1, v43);
  v49 = v59;
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 80))(v46, v47, v44);
  v50 = v66;
  v51 = *(void (**)(char *, uint64_t))(v65 + 8);
  v51(v47, v66);
  v51(v46, v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 96))(v49, a1, v43);
  v52 = *(void (**)(char *, uint64_t))(v68 + 8);
  v52(v48, a1);
  return ((uint64_t (*)(char *, uint64_t))v52)(v56, a1);
}

uint64_t MultiplicationGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, _QWORD *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(_QWORD *, _QWORD);
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];

  v25 = a1;
  v26 = a2;
  v24 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v6, v9);
  v12 = (char *)&v24 - v11;
  MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)&v24 - v14;
  dispatch thunk of Collection.startIndex.getter();
  v16 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
  v18 = *v17;
  swift_bridgeObjectRetain();
  v16(v28, 0);
  v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19(v15, AssociatedTypeWitness);
  v27 = v18;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(after:)();
  v19(v8, AssociatedTypeWitness);
  v20 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
  v22 = *v21;
  swift_bridgeObjectRetain();
  v20(v28, 0);
  v19(v12, AssociatedTypeWitness);
  v28[0] = v22;
  static Polynomial.* infix(_:_:)((uint64_t)&v27, (uint64_t)v28, v25, v26, v24);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MultiplicationGadget.degree.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t MultiplicationGadget.numOfCalls.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance MultiplicationGadget<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return MultiplicationGadget.evaluate<A>(at:)(*(_QWORD *)(a2 + 16), a1, *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance MultiplicationGadget<A>@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  return MultiplicationGadget.evaluate<A>(at:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t type metadata accessor for MultiplicationGadget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiplicationGadget);
}

uint64_t static FiniteFieldProtocol.bitmask.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static FixedWidthInteger.max.getter();
}

{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static FixedWidthInteger.max.getter();
}

uint64_t static FiniteFieldProtocol.addMod(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a1;
  v49 = a5;
  swift_getAssociatedTypeWitness();
  v45 = a4;
  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 24);
  v8 = *(_QWORD *)(v44 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v12 = (char *)&v42 - v11;
  v13 = swift_checkMetadataState();
  v47 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13, v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v15, v18);
  v43 = (char *)&v42 - v20;
  MEMORY[0x24BDAC7A8](v19, v21);
  v23 = (char *)&v42 - v22;
  v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v46 = a3;
  if ((v24 & 1) == 0)
  {
    v30 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v42 = a2;
    v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v30 & 1) != 0)
    {
      if (v31 > 64)
        goto LABEL_7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      MEMORY[0x24BD00904](v12, v13, v8);
      v35 = v42;
      v36 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v25 = v47;
      v27 = *(void (**)(char *, uint64_t))(v47 + 8);
      v27(v23, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v17, v35, v13);
      v29 = v49;
      if ((v36 & 1) == 0)
      {
        v27(v17, v13);
        v28 = v48;
        goto LABEL_19;
      }
      v33 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27(v17, v13);
    }
    else
    {
      v29 = v49;
      if (v31 >= 64)
      {
        v50 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        v25 = v47;
        v27 = *(void (**)(char *, uint64_t))(v47 + 8);
        v27(v23, v13);
        v28 = v48;
        if ((v37 & 1) != 0)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v29, v28, v13);
        goto LABEL_19;
      }
      v25 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v23, v42, v13);
      v33 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27 = *(void (**)(char *, uint64_t))(v25 + 8);
      v27(v23, v13);
    }
    v28 = v48;
    if (!v33)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v29, v28, v13);
    goto LABEL_19;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
    v25 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v23, a2, v13);
    v26 = dispatch thunk of BinaryInteger._lowWord.getter();
    v27 = *(void (**)(char *, uint64_t))(v25 + 8);
    v27(v23, v13);
    v28 = v48;
    v29 = v49;
    if (!v26)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v29, v28, v13);
    goto LABEL_19;
  }
LABEL_7:
  v50 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25 = v47;
  v27 = *(void (**)(char *, uint64_t))(v47 + 8);
  v27(v23, v13);
  v28 = v48;
  v29 = v49;
  if ((v32 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v29, v28, v13);
LABEL_19:
  v39 = v45;
  v40 = v43;
  v41 = v46;
  (*(void (**)(uint64_t, uint64_t))(v45 + 24))(v46, v45);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v27(v40, v13);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v39 + 72))(v28, v23, v41, v39);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v13);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = a5;
  v51 = a1;
  swift_getAssociatedTypeWitness();
  v46 = a4;
  v47 = a3;
  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 24);
  v9 = *(_QWORD *)(v45 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v11);
  v13 = (char *)&v43 - v12;
  v14 = swift_checkMetadataState();
  v49 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14, v15);
  v44 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v21 = (char *)&v43 - v20;
  MEMORY[0x24BDAC7A8](v19, v22);
  v24 = (char *)&v43 - v23;
  v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v48 = v5;
  if ((v25 & 1) == 0)
  {
    v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v43 = a2;
    v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v31 & 1) != 0)
    {
      if (v32 > 64)
        goto LABEL_7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MEMORY[0x24BD00928](&unk_249C28BC8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      MEMORY[0x24BD00904](v13, v14, v9);
      v36 = v43;
      v37 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v26 = v49;
      v28 = *(void (**)(char *, uint64_t))(v49 + 8);
      v28(v24, v14);
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v21, v36, v14);
      v30 = v50;
      v29 = v51;
      if ((v37 & 1) == 0)
      {
        v28(v21, v14);
        goto LABEL_19;
      }
      v34 = dispatch thunk of BinaryInteger._lowWord.getter();
      v28(v21, v14);
    }
    else
    {
      v30 = v50;
      v29 = v51;
      if (v32 >= 64)
      {
        v52 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        v26 = v49;
        v28 = *(void (**)(char *, uint64_t))(v49 + 8);
        v28(v24, v14);
        if ((v38 & 1) != 0)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v30, v29, v14);
        goto LABEL_19;
      }
      v26 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v24, v43, v14);
      v34 = dispatch thunk of BinaryInteger._lowWord.getter();
      v28 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28(v24, v14);
    }
    if (!v34)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v30, v29, v14);
    goto LABEL_19;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
    v26 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v24, a2, v14);
    v27 = dispatch thunk of BinaryInteger._lowWord.getter();
    v28 = *(void (**)(char *, uint64_t))(v26 + 8);
    v28(v24, v14);
    v30 = v50;
    v29 = v51;
    if (!v27)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v30, v29, v14);
    goto LABEL_19;
  }
LABEL_7:
  v52 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  v26 = v49;
  v28 = *(void (**)(char *, uint64_t))(v49 + 8);
  v28(v24, v14);
  v30 = v50;
  v29 = v51;
  if ((v33 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v30, v29, v14);
LABEL_19:
  v40 = v46;
  v41 = v47;
  v42 = v44;
  (*(void (**)(uint64_t, uint64_t))(v46 + 24))(v47, v46);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v28(v42, v14);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v40 + 72))(v29, v24, v41, v40);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v14);
}

uint64_t static FiniteFieldProtocol.subMod(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[2];

  v20[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)v20 - v14;
  v16 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
    return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v12, AssociatedTypeWitness);
  MEMORY[0x24BD0085C](a1, v15, AssociatedTypeWitness, v17);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, AssociatedTypeWitness);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[2];

  v20[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)v20 - v14;
  v16 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
    return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v12, AssociatedTypeWitness);
  MEMORY[0x24BD0085C](a1, v15, AssociatedTypeWitness, v17);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, AssociatedTypeWitness);
}

uint64_t static FiniteFieldProtocol.pow(of:raiseTo:)@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  void (*v35)(void);
  void (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t AssociatedConformanceWitness;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t AssociatedTypeWitness;
  uint64_t v96;
  void (*v97)(void);
  char *v98;
  uint64_t v99;
  uint64_t v100;

  v97 = a1;
  v87 = a4;
  swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v96 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v94 = (char *)&v85 - v8;
  v9 = swift_checkMetadataState();
  v88 = *(_QWORD *)(v9 - 8);
  v10 = v88;
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v85 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v93 = (uint64_t)&v85 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v86 = (char *)&v85 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v23 = (char *)&v85 - v22;
  v25 = MEMORY[0x24BDAC7A8](v21, v24);
  v27 = (char *)&v85 - v26;
  v29 = MEMORY[0x24BDAC7A8](v25, v28);
  v31 = (char *)&v85 - v30;
  MEMORY[0x24BDAC7A8](v29, v32);
  v33 = *(void (**)(void))(v10 + 16);
  v98 = (char *)&v85 - v34;
  v33();
  v35 = v97;
  v97 = v33;
  ((void (*)(char *, void (*)(void), uint64_t))v33)(v31, v35, v9);
  v99 = 1;
  v91 = lazy protocol witness table accessor for type Int and conformance Int();
  MEMORY[0x24BD00694](&v99, MEMORY[0x24BEE1768]);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(a3 + 88);
  v89 = a2;
  v36(v27, a2, a3);
  v37 = *(void (**)(char *, uint64_t))(v10 + 8);
  v37(v27, v9);
  v92 = v23;
  v90 = v31;
  while (1)
  {
    ((void (*)(char *, char *, uint64_t))v97)(v23, v31, v9);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 128)
        goto LABEL_15;
      goto LABEL_11;
    }
    v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v47 & 1) == 0)
      break;
    if (v48 > 128)
      goto LABEL_15;
    v49 = AssociatedTypeWitness;
    v50 = v96;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v52 = v94;
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v49, AssociatedConformanceWitness);
    v53 = v52;
    v23 = v92;
    MEMORY[0x24BD00904](v53, v9, v50);
    LOBYTE(v49) = dispatch thunk of static Comparable.>= infix(_:_:)();
    v37(v27, v9);
    v54 = (uint64_t)v86;
    ((void (*)(char *, char *, uint64_t))v97)(v86, v23, v9);
    if ((v49 & 1) == 0)
    {
      v37((char *)v54, v9);
      v37(v23, v9);
      goto LABEL_16;
    }
    v55 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)(v54, (uint64_t)&type metadata for _UInt128, v9, v55, v6, (uint64_t)&v99);
    v37((char *)v54, v9);
LABEL_12:
    v57 = v99;
    v58 = v100;
    v37(v23, v9);
    if (!(v58 | v57))
      goto LABEL_34;
LABEL_16:
    v60 = AssociatedTypeWitness;
    v61 = v96;
    v62 = swift_getAssociatedConformanceWitness();
    v63 = v94;
    MEMORY[0x24BD00928](&unk_249C28BC0, 512, v60, v62);
    MEMORY[0x24BD00904](v63, v9, v61);
    v64 = v93;
    MEMORY[0x24BD005F8](v31, v27, v9, v6);
    v37(v27, v9);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 128)
      {
LABEL_24:
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        v99 = 0;
        v100 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        v37(v27, v9);
        v37((char *)v64, v9);
        v38 = v88;
        v39 = v89;
        v23 = v92;
        v41 = v98;
        if ((v77 & 1) == 0)
          goto LABEL_3;
        goto LABEL_4;
      }
      v75 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v64, (uint64_t)&type metadata for _UInt128, v9, v75, v6, (uint64_t)&v99);
      v72 = v99;
      v73 = v100;
      v74 = v64;
      goto LABEL_23;
    }
    v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v65 & 1) != 0)
    {
      if (v66 > 128)
        goto LABEL_24;
      v67 = v64;
      v68 = v94;
      MEMORY[0x24BD00928](&unk_249C28BC8, 256);
      MEMORY[0x24BD00904](v68, v9, v96);
      v69 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v37(v27, v9);
      v70 = (uint64_t)v85;
      ((void (*)(char *, uint64_t, uint64_t))v97)(v85, v67, v9);
      if ((v69 & 1) == 0)
      {
        v37((char *)v70, v9);
        v37((char *)v67, v9);
        v38 = v88;
        v39 = v89;
        v23 = v92;
LABEL_3:
        v40 = v87;
        (*(void (**)(char *, char *, uint64_t, uint64_t))(a3 + 80))(v87, v98, v39, a3);
        v37(v40, v9);
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v40, v27, v9);
        v41 = v98;
        goto LABEL_4;
      }
      v71 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v70, (uint64_t)&type metadata for _UInt128, v9, v71, v6, (uint64_t)&v99);
      v37((char *)v70, v9);
      v72 = v99;
      v73 = v100;
      v74 = v67;
LABEL_23:
      v37((char *)v74, v9);
      v76 = v73 | v72;
      v38 = v88;
      v39 = v89;
      goto LABEL_29;
    }
    v38 = v88;
    if (v66 < 128)
    {
      v78 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      v79 = v93;
      static FixedWidthInteger._truncatingInit<A>(_:)(v93, (uint64_t)&type metadata for _UInt128, v9, v78, v6, (uint64_t)&v99);
      v80 = v99;
      v81 = v100;
      v37((char *)v79, v9);
      v76 = v81 | v80;
      v39 = v89;
LABEL_29:
      v23 = v92;
      v41 = v98;
      if (v76)
        goto LABEL_3;
      goto LABEL_4;
    }
    lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    v99 = 0;
    v100 = 0;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v82 = v93;
    v83 = dispatch thunk of static Equatable.== infix(_:_:)();
    v37(v27, v9);
    v37((char *)v82, v9);
    v39 = v89;
    v23 = v92;
    v41 = v98;
    if ((v83 & 1) == 0)
      goto LABEL_3;
LABEL_4:
    v42 = *(void (**)(char *, char *, uint64_t, uint64_t))(a3 + 80);
    v43 = a3;
    v44 = v41;
    v42(v41, v41, v39, v43);
    v37(v44, v9);
    v45 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v46 = v44;
    a3 = v43;
    v45(v46, v27, v9);
    v99 = 1;
    v31 = v90;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v37(v31, v9);
    v45(v31, v27, v9);
  }
  if (v48 < 128)
  {
LABEL_11:
    v56 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v23, (uint64_t)&type metadata for _UInt128, v9, v56, v6, (uint64_t)&v99);
    goto LABEL_12;
  }
LABEL_15:
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v99 = 0;
  v100 = 0;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v27, v9);
  v37(v23, v9);
  if ((v59 & 1) == 0)
    goto LABEL_16;
LABEL_34:
  v37(v31, v9);
  return ((uint64_t (*)(char *, uint64_t))v37)(v98, v9);
}

uint64_t static FiniteFieldProtocol.pow(of:raiseTo:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t AssociatedConformanceWitness;
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t AssociatedTypeWitness;
  uint64_t v104;
  void (*v105)(void);
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;

  v108 = a1;
  v97 = a4;
  swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v104 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v102 = (char *)&v95 - v8;
  v9 = swift_checkMetadataState();
  v98 = *(_QWORD *)(v9 - 8);
  v10 = v98;
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v95 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v101 = (uint64_t)&v95 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v96 = (char *)&v95 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v23 = (char *)&v95 - v22;
  v25 = MEMORY[0x24BDAC7A8](v21, v24);
  v27 = (char *)&v95 - v26;
  v29 = MEMORY[0x24BDAC7A8](v25, v28);
  v31 = (char *)&v95 - v30;
  MEMORY[0x24BDAC7A8](v29, v32);
  v33 = *(void (**)(void))(v10 + 16);
  v107 = (char *)&v95 - v34;
  v33();
  v105 = v33;
  ((void (*)(char *, char *, uint64_t))v33)(v31, v108, v9);
  v109 = 1;
  v99 = lazy protocol witness table accessor for type Int and conformance Int();
  MEMORY[0x24BD00694](&v109, MEMORY[0x24BEE1768]);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(a3 + 88);
  v106 = a2;
  v36 = a2;
  v37 = a3;
  v35(v27, v36, a3);
  v38 = *(void (**)(char *, uint64_t))(v10 + 8);
  v38(v27, v9);
  v100 = v23;
  v108 = v31;
  while (1)
  {
    ((void (*)(char *, char *, uint64_t))v105)(v23, v31, v9);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      break;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
    {
      v61 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v23, (uint64_t)&type metadata for _UInt128, v9, v61, v6, (uint64_t)&v109);
      v62 = v109;
      v63 = v110;
      v38(v23, v9);
      v64 = v63 | v62;
      v50 = v37;
      goto LABEL_15;
    }
    lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    v109 = 0;
    v110 = 0;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    v38(v27, v9);
    v38(v23, v9);
    v50 = v37;
    v39 = v106;
    if ((v68 & 1) != 0)
      goto LABEL_39;
LABEL_22:
    v70 = AssociatedTypeWitness;
    v71 = v104;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v73 = v102;
    MEMORY[0x24BD00928](&unk_249C28BC0, 512, v70, AssociatedConformanceWitness);
    MEMORY[0x24BD00904](v73, v9, v71);
    v74 = v101;
    MEMORY[0x24BD005F8](v108, v27, v9, v6);
    v38(v27, v9);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
    {
      v75 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v75 & 1) != 0)
      {
        if (v76 <= 128)
        {
          v86 = v74;
          v87 = v102;
          MEMORY[0x24BD00928](&unk_249C28BC8, 256);
          MEMORY[0x24BD00904](v87, v9, v104);
          v88 = dispatch thunk of static Comparable.>= infix(_:_:)();
          v38(v27, v9);
          v89 = (uint64_t)v95;
          ((void (*)(char *, uint64_t, uint64_t))v105)(v95, v86, v9);
          if ((v88 & 1) == 0)
          {
            v38((char *)v89, v9);
            v38((char *)v86, v9);
            v39 = v106;
            v40 = v98;
            v23 = v100;
LABEL_3:
            v41 = v97;
            (*(void (**)(char *, char *, uint64_t, uint64_t))(v50 + 80))(v97, v107, v39, v50);
            v38(v41, v9);
            (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v41, v27, v9);
            v42 = v107;
            goto LABEL_4;
          }
          v90 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v89, (uint64_t)&type metadata for _UInt128, v9, v90, v6, (uint64_t)&v109);
          v38((char *)v89, v9);
          v91 = v109;
          v92 = v110;
          v38((char *)v86, v9);
          v81 = v92 | v91;
          v39 = v106;
          goto LABEL_34;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        v109 = 0;
        v110 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38(v27, v9);
        v38((char *)v74, v9);
        v39 = v106;
        v40 = v98;
      }
      else
      {
        v40 = v98;
        if (v76 < 128)
        {
          v82 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          v83 = v101;
          static FixedWidthInteger._truncatingInit<A>(_:)(v101, (uint64_t)&type metadata for _UInt128, v9, v82, v6, (uint64_t)&v109);
          v84 = v109;
          v85 = v110;
          v38((char *)v83, v9);
          v81 = v85 | v84;
          v39 = v106;
          goto LABEL_35;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        v109 = 0;
        v110 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v93 = v101;
        v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38(v27, v9);
        v38((char *)v93, v9);
        v39 = v106;
      }
    }
    else
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
      {
        v78 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v74, (uint64_t)&type metadata for _UInt128, v9, v78, v6, (uint64_t)&v109);
        v79 = v109;
        v80 = v110;
        v38((char *)v74, v9);
        v81 = v80 | v79;
LABEL_34:
        v40 = v98;
LABEL_35:
        v23 = v100;
        v42 = v107;
        if (v81)
          goto LABEL_3;
        goto LABEL_4;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      v109 = 0;
      v110 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v77 = dispatch thunk of static Equatable.== infix(_:_:)();
      v38(v27, v9);
      v38((char *)v74, v9);
      v40 = v98;
    }
    v23 = v100;
    v42 = v107;
    if ((v77 & 1) == 0)
      goto LABEL_3;
LABEL_4:
    v43 = *(void (**)(char *, char *, uint64_t))(v50 + 80);
    v44 = v50;
    v45 = v42;
    v46 = v39;
    v37 = v44;
    v43(v42, v42, v46);
    v38(v45, v9);
    v47 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v47(v45, v27, v9);
    v109 = 1;
    v31 = v108;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v38(v31, v9);
    v47(v31, v27, v9);
  }
  v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v50 = v37;
  if ((v48 & 1) != 0)
  {
    if (v49 > 128)
      goto LABEL_19;
    v51 = AssociatedTypeWitness;
    v52 = v104;
    v53 = swift_getAssociatedConformanceWitness();
    v54 = v102;
    MEMORY[0x24BD00928](&unk_249C28BC8, 256, v51, v53);
    v55 = v54;
    v56 = v100;
    MEMORY[0x24BD00904](v55, v9, v52);
    LOBYTE(v51) = dispatch thunk of static Comparable.>= infix(_:_:)();
    v38(v27, v9);
    v57 = (uint64_t)v96;
    ((void (*)(char *, char *, uint64_t))v105)(v96, v56, v9);
    v39 = v106;
    if ((v51 & 1) != 0)
    {
      v58 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v57, (uint64_t)&type metadata for _UInt128, v9, v58, v6, (uint64_t)&v109);
      v38((char *)v57, v9);
      v59 = v109;
      v60 = v110;
      v38(v56, v9);
      if (!(v60 | v59))
        goto LABEL_39;
    }
    else
    {
      v38((char *)v57, v9);
      v38(v56, v9);
    }
    goto LABEL_22;
  }
  if (v49 < 128)
  {
    v65 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v23, (uint64_t)&type metadata for _UInt128, v9, v65, v6, (uint64_t)&v109);
    v66 = v109;
    v67 = v110;
    v38(v23, v9);
    v64 = v67 | v66;
LABEL_15:
    v39 = v106;
    if (!v64)
      goto LABEL_39;
    goto LABEL_22;
  }
LABEL_19:
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v109 = 0;
  v110 = 0;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38(v27, v9);
  v38(v23, v9);
  v39 = v106;
  if ((v69 & 1) == 0)
    goto LABEL_22;
LABEL_39:
  v38(v108, v9);
  return ((uint64_t (*)(char *, uint64_t))v38)(v107, v9);
}

uint64_t static FiniteFieldProtocol.inv(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, uint64_t);
  uint64_t v35;
  _BYTE *v36;
  char v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t AssociatedConformanceWitness;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t result;
  _BYTE v44[4];
  int v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 24);
  v52 = *(_QWORD *)(v49 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v51 = &v44[-v10];
  v11 = swift_checkMetadataState();
  v46 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v15 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v48 = &v44[-v18];
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v47 = &v44[-v21];
  MEMORY[0x24BDAC7A8](v20, v22);
  v24 = &v44[-v23];
  v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v53 = a1;
  v50 = a4;
  if ((v25 & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      v26 = v46;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v46 + 16))(v24, a1, v11);
LABEL_11:
      v35 = dispatch thunk of BinaryInteger._lowWord.getter();
      v34 = *(void (**)(_BYTE *, uint64_t))(v26 + 8);
      v36 = v24;
LABEL_12:
      v34(v36, v11);
      if (!v35)
        goto LABEL_17;
LABEL_15:
      v38 = v47;
      (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      v39 = v52;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v41 = v51;
      MEMORY[0x24BD00928](&unk_249C2A750, 768, AssociatedTypeWitness, AssociatedConformanceWitness);
      v42 = v48;
      MEMORY[0x24BD00904](v41, v11, v39);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v34(v42, v11);
      v34(v38, v11);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(a3 + 104))(v53, v24, a2, a3);
      return ((uint64_t (*)(_BYTE *, uint64_t))v34)(v24, v11);
    }
  }
  else
  {
    v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v27 & 1) != 0)
    {
      if (v28 <= 64)
      {
        v29 = v52;
        v30 = swift_getAssociatedConformanceWitness();
        v31 = v51;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, AssociatedTypeWitness, v30);
        MEMORY[0x24BD00904](v31, v11, v29);
        v32 = v53;
        v45 = dispatch thunk of static Comparable.>= infix(_:_:)();
        v33 = v46;
        v34 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
        v34(v24, v11);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v33 + 16))(v15, v32, v11);
        if ((v45 & 1) == 0)
        {
          v34(v15, v11);
          goto LABEL_15;
        }
        v35 = dispatch thunk of BinaryInteger._lowWord.getter();
        v36 = v15;
        goto LABEL_12;
      }
    }
    else if (v28 < 64)
    {
      v26 = v46;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v46 + 16))(v24, v53, v11);
      goto LABEL_11;
    }
  }
  v54 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
  v34(v24, v11);
  if ((v37 & 1) == 0)
    goto LABEL_15;
LABEL_17:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, uint64_t);
  uint64_t v35;
  _BYTE *v36;
  char v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t AssociatedConformanceWitness;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t result;
  _BYTE v44[4];
  int v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 24);
  v52 = *(_QWORD *)(v49 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v51 = &v44[-v10];
  v11 = swift_checkMetadataState();
  v46 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v48 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v47 = &v44[-v17];
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v21 = &v44[-v20];
  MEMORY[0x24BDAC7A8](v19, v22);
  v24 = &v44[-v23];
  v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v53 = a1;
  v50 = a4;
  if ((v25 & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      v26 = v46;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v46 + 16))(v24, a1, v11);
LABEL_11:
      v35 = dispatch thunk of BinaryInteger._lowWord.getter();
      v34 = *(void (**)(_BYTE *, uint64_t))(v26 + 8);
      v36 = v24;
LABEL_12:
      v34(v36, v11);
      if (!v35)
        goto LABEL_17;
LABEL_15:
      v38 = v47;
      (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      v39 = v52;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v41 = v51;
      MEMORY[0x24BD00928](&unk_249C2A750, 768, AssociatedTypeWitness, AssociatedConformanceWitness);
      v42 = v48;
      MEMORY[0x24BD00904](v41, v11, v39);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v34(v42, v11);
      v34(v38, v11);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(a3 + 104))(v53, v24, a2, a3);
      return ((uint64_t (*)(_BYTE *, uint64_t))v34)(v24, v11);
    }
  }
  else
  {
    v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v27 & 1) != 0)
    {
      if (v28 <= 64)
      {
        v29 = v52;
        v30 = swift_getAssociatedConformanceWitness();
        v31 = v51;
        MEMORY[0x24BD00928](&unk_249C28BC8, 256, AssociatedTypeWitness, v30);
        MEMORY[0x24BD00904](v31, v11, v29);
        v32 = v53;
        v45 = dispatch thunk of static Comparable.>= infix(_:_:)();
        v33 = v46;
        v34 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
        v34(v24, v11);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v33 + 16))(v21, v32, v11);
        if ((v45 & 1) == 0)
        {
          v34(v21, v11);
          goto LABEL_15;
        }
        v35 = dispatch thunk of BinaryInteger._lowWord.getter();
        v36 = v21;
        goto LABEL_12;
      }
    }
    else if (v28 < 64)
    {
      v26 = v46;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v46 + 16))(v24, v53, v11);
      goto LABEL_11;
    }
  }
  v54 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
  v34(v24, v11);
  if ((v37 & 1) == 0)
    goto LABEL_15;
LABEL_17:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t static FiniteField64.p.getter()
{
  return 0xFFFFFFFF00000001;
}

uint64_t static FiniteField64.g.getter()
{
  return 0x185629DCDA58878CLL;
}

uint64_t static FiniteField64.logOfOrder.getter()
{
  return 32;
}

void one-time initialization function for roots()
{
  static FiniteField64.roots = (uint64_t)&outlined read-only object #0 of one-time initialization function for roots;
}

{
  static MontgomeryFiniteField64.roots = &outlined read-only object #0 of one-time initialization function for roots;
}

{
  static MontgomeryFiniteField128.roots = (uint64_t)&outlined read-only object #0 of one-time initialization function for roots;
}

uint64_t static FiniteField64.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

unint64_t static FiniteField64.mul(_:_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  specialized _wideDivide22<A>(_:by:)(&v5, &v4, &v3, (a2 * (unsigned __int128)a1) >> 64, a2 * a1, 0, 0xFFFFFFFF00000001);
  return v3;
}

unint64_t static FiniteField64.intToInternalValue(_:)(unint64_t result)
{
  if (result >= 0xFFFFFFFF00000001)
    result += 0xFFFFFFFFLL;
  return result;
}

void protocol witness for static FiniteFieldProtocol.p.getter in conformance FiniteField64(_QWORD *a1@<X8>)
{
  *a1 = 0xFFFFFFFF00000001;
}

void protocol witness for static FiniteFieldProtocol.g.getter in conformance FiniteField64(_QWORD *a1@<X8>)
{
  *a1 = 0x185629DCDA58878CLL;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

void protocol witness for static FiniteFieldProtocol.bitmask.getter in conformance FiniteField64(_QWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance FiniteField64@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = specialized _wideDivide22<A>(_:by:)(&v7, &v6, &v5, ((unint64_t)*a2 * (unsigned __int128)(unint64_t)*a1) >> 64, *a2 * *a1, 0, 0xFFFFFFFF00000001);
  *a3 = v5;
  return result;
}

uint64_t *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance FiniteField64@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 0xFFFFFFFF00000001)
    v2 = *result + 0xFFFFFFFFLL;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for static FiniteFieldProtocol.pow(of:raiseTo:) in conformance FiniteField64@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;

  v4 = *a1;
  v5 = *a2;
  result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(*a2, &v13);
  v8 = *((_QWORD *)&v13 + 1);
  v7 = v13;
  v9 = 1;
  while (v8 | v7)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v5 & 1, &v13);
    v10 = *((_QWORD *)&v13 + 1) | v13;
    if (v13 != 0)
    {
      specialized _wideDivide22<A>(_:by:)((uint64_t *)&v13, &v12, &v11, (v4 * (unsigned __int128)v9) >> 64, v4 * v9, 0, 0xFFFFFFFF00000001);
      v10 = 0;
      v9 = v11;
    }
    specialized _wideDivide22<A>(_:by:)((uint64_t *)&v13, &v12, &v11, (__PAIR128__(v10, v4) * __PAIR128__(v10, v4)) >> 64, v4 * v4, 0, 0xFFFFFFFF00000001);
    v4 = v11;
    v5 >>= 1;
    result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v5, &v13);
    v8 = *((_QWORD *)&v13 + 1);
    v7 = v13;
  }
  *a3 = v9;
  return result;
}

uint64_t protocol witness for static FiniteFieldProtocol.inv(_:) in conformance FiniteField64@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v2 = *a1;
  if (*a1)
  {
    result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v10);
    if (v10 == 0)
    {
      v5 = 1;
    }
    else
    {
      v6 = 0xFFFFFFFEFFFFFFFFLL;
      v5 = 1;
      do
      {
        protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v6 & 1, &v10);
        v7 = *((_QWORD *)&v10 + 1) | v10;
        if (v10 != 0)
        {
          specialized _wideDivide22<A>(_:by:)((uint64_t *)&v10, &v9, &v8, (v2 * (unsigned __int128)v5) >> 64, v2 * v5, 0, 0xFFFFFFFF00000001);
          v7 = 0;
          v5 = v8;
        }
        specialized _wideDivide22<A>(_:by:)((uint64_t *)&v10, &v9, &v8, (__PAIR128__(v7, v2) * __PAIR128__(v7, v2)) >> 64, v2 * v2, 0, 0xFFFFFFFF00000001);
        v2 = v8;
        v6 >>= 1;
        result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v6, &v10);
      }
      while (v10 != 0);
    }
    *a2 = v5;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static MontgomeryFiniteField.intToInternalValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  char v19;
  uint64_t result;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v28 = a4;
  v26 = a3;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v25 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v24 - v14;
  v16 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
  v29 = v4;
  v27 = v16;
  v16(a2, v7);
  swift_getAssociatedConformanceWitness();
  v17 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v15, AssociatedTypeWitness);
  if ((v17 & 1) != 0)
  {
    v27(a2, v7);
    v19 = dispatch thunk of static Comparable.< infix(_:_:)();
    v18(v15, AssociatedTypeWitness);
    if ((v19 & 1) != 0)
    {
      (*(void (**)(uint64_t))(v26 + 16))(a2);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 80))(a1, v15, a2, v7);
      return ((uint64_t (*)(char *, uint64_t))v18)(v15, AssociatedTypeWitness);
    }
    else
    {
      return dispatch thunk of IteratorProtocol.next()();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v25, a1, AssociatedTypeWitness);
    v30 = 0;
    v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v21._countAndFlagsBits = 0x2872656765746E49;
    v21._object = (void *)0xE800000000000000;
    String.append(_:)(v21);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v22._object = (void *)0x8000000249C30670;
    v22._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v22);
    v27(a2, v7);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v18(v15, AssociatedTypeWitness);
    v23._countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static MontgomeryFiniteField.internalValueToInt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v17 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 24)
                  + 16);
  v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v17 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x24BD00928](&unk_249C28BC0, 512, v11, AssociatedConformanceWitness);
  MEMORY[0x24BD00904](v14, AssociatedTypeWitness, v10);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 80))(v17, v9, a2, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

unint64_t static MontgomeryFiniteField64.p.getter()
{
  return 0xFFFFFFFF00000001;
}

unint64_t static MontgomeryFiniteField64.g.getter()
{
  return 0xDA58878B0D514E98;
}

uint64_t static MontgomeryFiniteField64.logOfOrder.getter()
{
  return 32;
}

uint64_t static MontgomeryFiniteField64.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

void *MontgomeryFiniteField64.mu.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField64.mu;
}

unint64_t static MontgomeryFiniteField64.mu.getter()
{
  return 0xFFFFFFFEFFFFFFFFLL;
}

void *MontgomeryFiniteField64.r2.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField64.r2;
}

unint64_t static MontgomeryFiniteField64.r2.getter()
{
  return 0xFFFFFFFE00000001;
}

uint64_t static MontgomeryFiniteField64.mul(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;

  v2 = (a2 * (unsigned __int128)a1) >> 64;
  v3 = (0xFFFFFFFEFFFFFFFFLL * a2 * a1 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v4 = __CFADD__(-(uint64_t)(a2 * a1), a2 * a1);
  v5 = v3 + v2;
  if (__CFADD__(v3, v2))
  {
    v5 += v4;
    goto LABEL_7;
  }
  while (v5 == -1)
  {
    if ((v4 & 1) == 0)
    {
      result = -1;
LABEL_18:
      result += 0xFFFFFFFFLL;
      return result;
    }
    v5 = 0;
LABEL_7:
    v4 = -1;
    result = v5 + 0xFFFFFFFF;
    if (v5 < 0xFFFFFFFF00000001)
      return result;
    __break(1u);
  }
  if (v4)
  {
    result = v5 + 1;
    v7 = 0xFFFFFFFF00000000;
  }
  else
  {
    v7 = 0xFFFFFFFF00000001;
    result = v5;
  }
  if (v5 >= v7)
    goto LABEL_18;
  return result;
}

void protocol witness for static MontgomeryFiniteField.r2.getter in conformance MontgomeryFiniteField64(_QWORD *a1@<X8>)
{
  *a1 = 0xFFFFFFFE00000001;
}

void protocol witness for static FiniteFieldProtocol.g.getter in conformance MontgomeryFiniteField64(_QWORD *a1@<X8>)
{
  *a1 = 0xDA58878B0D514E98;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance MontgomeryFiniteField64(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

_QWORD *protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance MontgomeryFiniteField64@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = ((unint64_t)*a2 * (unsigned __int128)(unint64_t)*result) >> 64;
  v4 = *a2 * *result;
  v5 = (0xFFFFFFFEFFFFFFFFLL * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  LODWORD(v6) = __CFADD__(-v4, v4);
  v7 = __CFADD__(v5, v3);
  v8 = v5 + v3;
  if (v7)
  {
    v9 = v8 + v6;
    goto LABEL_7;
  }
  while (v8 == -1)
  {
    if ((v6 & 1) == 0)
    {
      v6 = -1;
      goto LABEL_19;
    }
    v9 = 0;
LABEL_7:
    v8 = 0xFFFFFFFFLL;
    v7 = __CFADD__(v9, 0xFFFFFFFFLL);
    v6 = v9 + 0xFFFFFFFF;
    if (!v7)
      goto LABEL_17;
    __break(1u);
  }
  if ((v6 & 1) != 0)
  {
    v6 = v8 + 1;
    v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = 0xFFFFFFFF00000001;
    v6 = v8;
  }
  if (v8 < v10)
  {
LABEL_17:
    *a3 = v6;
    return result;
  }
LABEL_19:
  *a3 = v6 + 0xFFFFFFFFLL;
  return result;
}

unint64_t *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance MontgomeryFiniteField64@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v2 = *result;
  if (*result > 0xFFFFFFFF00000001)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._object = (void *)0x8000000249C30670;
    v10._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    result = (unint64_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (*result == 0xFFFFFFFF00000001)
    {
      v3 = 0;
    }
    else
    {
      v4 = (v2 * (unsigned __int128)0xFFFFFFFE00000001) >> 64;
      v5 = (0xFFFFFFFF * v2 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      LODWORD(v3) = __CFADD__(0x1FFFFFFFFLL * v2, 0xFFFFFFFE00000001 * v2);
      v6 = __CFADD__(v5, v4);
      v7 = v5 + v4;
      if (v6)
      {
        v8 = v7 + v3;
        goto LABEL_10;
      }
      while (v7 == -1)
      {
        if ((v3 & 1) == 0)
        {
          v3 = 4294967294;
          goto LABEL_20;
        }
        v8 = 0;
LABEL_10:
        v7 = 0xFFFFFFFFLL;
        v6 = __CFADD__(v8, 0xFFFFFFFFLL);
        v3 = v8 + 0xFFFFFFFFLL;
        if (!v6)
          goto LABEL_20;
        __break(1u);
      }
      v3 = v7 + v3;
      if (v3 >= 0xFFFFFFFF00000001)
        v3 += 0xFFFFFFFFLL;
    }
LABEL_20:
    *a2 = v3;
  }
  return result;
}

_QWORD *protocol witness for static FiniteFieldProtocol.internalValueToInt(_:) in conformance MontgomeryFiniteField64@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;

  v2 = (0xFFFFFFFEFFFFFFFFLL * *result * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  if (!__CFADD__(-*result, *result))
    goto LABEL_5;
  if (v2 <= 0xFFFFFFFEFFFFFFFFLL)
  {
    ++v2;
LABEL_5:
    *a2 = v2;
    return result;
  }
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static FiniteFieldProtocol.pow(of:raiseTo:) in conformance MontgomeryFiniteField64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;

  v4 = *a1;
  v5 = *a2;
  result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(*a2, &v22);
  if (v22 == 0)
  {
    v7 = 0xFFFFFFFFLL;
LABEL_3:
    *a3 = v7;
    return result;
  }
  v7 = 0xFFFFFFFFLL;
  while (1)
  {
    result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v5 & 1, &v22);
    v9 = *((_QWORD *)&v22 + 1) | v22;
    if (v22 == 0)
      goto LABEL_27;
    v10 = ((unint64_t)v4 * (unsigned __int128)(unint64_t)v7) >> 64;
    v11 = (0xFFFFFFFEFFFFFFFFLL * v4 * v7 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v12 = __CFADD__(-(v4 * v7), v4 * v7);
    v13 = __CFADD__(v11, v10);
    v14 = v11 + v10;
    if (v13)
    {
      v15 = v14 + v12;
    }
    else
    {
      if (v14 != -1)
      {
        v9 = 0;
        v16 = v14 + v12;
        if (v16 >= 0xFFFFFFFF00000001)
          v7 = v16 + 0xFFFFFFFF;
        else
          v7 = v16;
        goto LABEL_27;
      }
      v15 = 0;
      if (!v12)
      {
        v9 = 0;
        v7 = 4294967294;
        goto LABEL_27;
      }
    }
    v7 = v15 + 0xFFFFFFFF;
    if (v15 >= 0xFFFFFFFF00000001)
      goto LABEL_35;
    v9 = 0;
LABEL_27:
    v17 = (__PAIR128__(v9, v4) * __PAIR128__(v9, v4)) >> 64;
    v18 = (0xFFFFFFFEFFFFFFFFLL * v4 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v19 = __CFADD__(-(v4 * v4), v4 * v4);
    v13 = __CFADD__(v18, v17);
    v20 = v18 + v17;
    if (!v13)
    {
      if (v20 == -1)
      {
        if (v19)
          v4 = 0xFFFFFFFFLL;
        else
          v4 = 4294967294;
      }
      else
      {
        v8 = v20 + v19;
        if (v8 >= 0xFFFFFFFF00000001)
          v4 = v8 + 0xFFFFFFFF;
        else
          v4 = v8;
      }
      goto LABEL_9;
    }
    v21 = v20 + v19;
    v4 = v21 + 0xFFFFFFFF;
    if (v21 >= 0xFFFFFFFF00000001)
      break;
LABEL_9:
    v5 >>= 1;
    result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v5, &v22);
    if (v22 == 0)
      goto LABEL_3;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t protocol witness for static FiniteFieldProtocol.inv(_:) in conformance MontgomeryFiniteField64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v2 = *a1;
  if (!*a1)
    goto LABEL_37;
  result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v21);
  if (v21 == 0)
  {
    v5 = 0xFFFFFFFFLL;
LABEL_4:
    *a2 = v5;
    return result;
  }
  v6 = 0xFFFFFFFEFFFFFFFFLL;
  v5 = 0xFFFFFFFFLL;
  while (1)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v6 & 1, &v21);
    v8 = *((_QWORD *)&v21 + 1) | v21;
    if (v21 == 0)
      goto LABEL_28;
    v9 = ((unint64_t)v2 * (unsigned __int128)(unint64_t)v5) >> 64;
    v10 = (0xFFFFFFFEFFFFFFFFLL * v2 * v5 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v11 = __CFADD__(-(v2 * v5), v2 * v5);
    v12 = __CFADD__(v10, v9);
    v13 = v10 + v9;
    if (v12)
    {
      v14 = v13 + v11;
    }
    else
    {
      if (v13 != -1)
      {
        v8 = 0;
        v15 = v13 + v11;
        if (v15 >= 0xFFFFFFFF00000001)
          v5 = v15 + 0xFFFFFFFF;
        else
          v5 = v15;
        goto LABEL_28;
      }
      v14 = 0;
      if (!v11)
      {
        v8 = 0;
        v5 = 4294967294;
        goto LABEL_28;
      }
    }
    v5 = v14 + 0xFFFFFFFF;
    if (v14 >= 0xFFFFFFFF00000001)
      goto LABEL_36;
    v8 = 0;
LABEL_28:
    v16 = (__PAIR128__(v8, v2) * __PAIR128__(v8, v2)) >> 64;
    v17 = (0xFFFFFFFEFFFFFFFFLL * v2 * v2 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    v18 = __CFADD__(-(v2 * v2), v2 * v2);
    v12 = __CFADD__(v17, v16);
    v19 = v17 + v16;
    if (!v12)
    {
      if (v19 == -1)
      {
        if (v18)
          v2 = 0xFFFFFFFFLL;
        else
          v2 = 4294967294;
      }
      else
      {
        v7 = v19 + v18;
        if (v7 >= 0xFFFFFFFF00000001)
          v2 = v7 + 0xFFFFFFFF;
        else
          v2 = v7;
      }
      goto LABEL_10;
    }
    v20 = v19 + v18;
    v2 = v20 + 0xFFFFFFFF;
    if (v20 >= 0xFFFFFFFF00000001)
      break;
LABEL_10:
    v6 >>= 1;
    result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v6, &v21);
    if (v21 == 0)
      goto LABEL_4;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double static MontgomeryFiniteField128.p.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_249C2A740;
  return result;
}

double static MontgomeryFiniteField128.g.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = -6.64630084e231;
  *a1 = xmmword_249C2B930;
  return result;
}

uint64_t static MontgomeryFiniteField128.logOfOrder.getter()
{
  return 66;
}

uint64_t static MontgomeryFiniteField128.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

uint64_t static FiniteField64.roots.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void *MontgomeryFiniteField128.mu.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField128.mu;
}

uint64_t static MontgomeryFiniteField128.mu.getter()
{
  return -1;
}

double one-time initialization function for r2()
{
  double result;

  result = NAN;
  static MontgomeryFiniteField128.r2 = xmmword_249C2A730;
  return result;
}

__int128 *MontgomeryFiniteField128.r2.unsafeMutableAddressor()
{
  if (one-time initialization token for r2 != -1)
    swift_once();
  return &static MontgomeryFiniteField128.r2;
}

double static MontgomeryFiniteField128.r2.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = NAN;
  *a1 = xmmword_249C2A730;
  return result;
}

_OWORD *static MontgomeryFiniteField128.mul(_:_:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL4 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *result;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *a1;
  v37 = *a2;
  v38 = v4;
  _UInt128.multipliedFullWidth(by:)(&v34, &v39, (unint64_t *)&v37);
  v5 = v34;
  v6 = v39;
  v39 = xmmword_249C2A740;
  v38 = (unint64_t)-(uint64_t)v6;
  _UInt128.multipliedFullWidth(by:)(&v34, &v35, (unint64_t *)&v38);
  v7 = __CFADD__(v35, (_QWORD)v6);
  v8 = v36 + *((_QWORD *)&v6 + 1);
  if (__CFADD__(v36, *((_QWORD *)&v6 + 1)))
    v9 = 1;
  else
    v9 = v8 == -1 && v7;
  v10 = v8 + v7;
  v11 = v5 + v34;
  v12 = __CFADD__((_QWORD)v5, (_QWORD)v34);
  v13 = *((_QWORD *)&v5 + 1) + *((_QWORD *)&v34 + 1);
  if (!__CFADD__(*((_QWORD *)&v5 + 1), *((_QWORD *)&v34 + 1)) && v13 == -1)
  {
    if (!v12)
    {
      v13 = -1;
      if ((v9 & 1) != 0)
        goto LABEL_17;
      goto LABEL_19;
    }
  }
  else if (!v12)
  {
    if ((v9 & 1) != 0)
      goto LABEL_17;
    goto LABEL_19;
  }
  ++v13;
  if ((v9 & 1) != 0)
  {
LABEL_17:
    v14 = 1;
    goto LABEL_20;
  }
LABEL_19:
  v14 = 0;
LABEL_20:
  v15 = v11 + v14;
  if (__CFADD__(v11, v14))
    v16 = v13 + 1;
  else
    v16 = v13;
  v37 = xmmword_249C2A740;
  v33[0] = -v10;
  v33[1] = 0;
  result = _UInt128.multipliedFullWidth(by:)(&v39, &v38, v33);
  v18 = *((_QWORD *)&v39 + 1);
  v19 = __CFADD__((_QWORD)v38, v10);
  v20 = *((_QWORD *)&v38 + 1) + v15;
  v21 = __CFADD__(*((_QWORD *)&v38 + 1), v15);
  v22 = v20 == -1 && v19;
  v23 = v21 || v22;
  v24 = v20 + v19;
  v25 = v16 + v39;
  v26 = __CFADD__(v16, (_QWORD)v39);
  if (*((_QWORD *)&v39 + 1) == -1)
  {
    if (!v26)
    {
      if (v23)
      {
        v27 = __CFADD__(v25, 1);
        v28 = v25 + 1;
        if (v27)
          goto LABEL_63;
        goto LABEL_66;
      }
      v18 = -1;
      goto LABEL_54;
    }
    goto LABEL_45;
  }
  if (v26)
  {
LABEL_45:
    v18 = *((_QWORD *)&v39 + 1) + 1;
    if ((v23 & 1) != 0)
    {
      v29 = 1;
      goto LABEL_55;
    }
LABEL_54:
    v29 = 0;
LABEL_55:
    v27 = __CFADD__(v25, v29);
    v28 = v25 + v29;
    v30 = v27;
    if (v18 == -1)
    {
      if ((v30 & 1) != 0)
        goto LABEL_63;
    }
    else if ((v30 & 1) == 0)
    {
      goto LABEL_60;
    }
LABEL_66:
    v27 = v24-- != 0;
    v32 = 28;
    if (!v27)
      v32 = 27;
    v28 += v32;
    goto LABEL_69;
  }
  if (!v23)
    goto LABEL_54;
  v27 = __CFADD__(v25, 1);
  v28 = v25 + 1;
  if (v27)
    goto LABEL_66;
LABEL_60:
  if (v18)
    goto LABEL_66;
LABEL_63:
  v31 = v24 == 0;
  if (v28 != -28)
    v31 = v28 < 0xFFFFFFFFFFFFFFE4;
  if (!v31)
    goto LABEL_66;
LABEL_69:
  *a3 = v24;
  a3[1] = v28;
  return result;
}

double protocol witness for static MontgomeryFiniteField.r2.getter in conformance MontgomeryFiniteField128@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = NAN;
  *a1 = xmmword_249C2A730;
  return result;
}

double protocol witness for static FiniteFieldProtocol.p.getter in conformance MontgomeryFiniteField128@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_249C2A740;
  return result;
}

double protocol witness for static FiniteFieldProtocol.g.getter in conformance MontgomeryFiniteField128@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = -6.64630084e231;
  *a1 = xmmword_249C2B930;
  return result;
}

uint64_t protocol witness for static FiniteFieldProtocol.logOfOrder.getter in conformance MontgomeryFiniteField128()
{
  return 66;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance MontgomeryFiniteField128(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*a3 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

unint64_t *protocol witness for static FiniteFieldProtocol.addMod(_:_:) in conformance MontgomeryFiniteField128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;

  v3 = *result;
  v4 = result[1];
  v5 = *a2;
  v6 = a2[1];
  if (*(_OWORD *)a2 == 0)
    goto LABEL_2;
  v17 = v5 <= 1;
  v7 = 1 - v5;
  v8 = !v17;
  v9 = -28 - v6;
  if (v6 > 0xFFFFFFFFFFFFFFE4)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v10 = v9 - v8;
  if (v9)
  {
    if (v4 == v10)
      goto LABEL_9;
    goto LABEL_24;
  }
  if ((v8 & 1) == 0)
  {
    if (!v4)
    {
LABEL_9:
      if (v3 >= v7)
      {
LABEL_10:
        v17 = v3 >= v7;
        v3 -= v7;
        v11 = !v17;
        v17 = v4 >= v10;
        v4 -= v10;
        v12 = !v17;
        if ((v11 & 1) != 0)
        {
          if (v4)
            v12 = v12;
          else
            v12 = 1;
          if ((v12 & 1) == 0)
          {
            *a3 = v3;
            a3[1] = v4 - 1;
            return result;
          }
        }
        else if ((v12 & 1) == 0)
        {
LABEL_2:
          *a3 = v3;
          a3[1] = v4;
          return result;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_25:
      v17 = v7 <= 1;
      v12 = 1 - v7;
      v13 = !v17;
      v17 = v10 <= 0xFFFFFFFFFFFFFFE4;
      v10 = -28 - v10;
      v11 = !v17;
      if ((v13 & 1) != 0)
      {
        if (!v10)
          v11 = 1;
        if ((v11 & 1) != 0)
          goto LABEL_52;
        --v10;
LABEL_39:
        v17 = __CFADD__(v4, v10);
        v14 = v4 + v10;
        v15 = v17;
        v16 = v14 == -1;
        v17 = __CFADD__(v3, v12);
        v18 = v3 + v12;
        v19 = v17;
        if (!v17)
          v16 = 0;
        if ((v15 & 1) == 0 && !v16)
        {
          *a3 = v18;
          a3[1] = v14 + v19;
          return result;
        }
        __break(1u);
        goto LABEL_51;
      }
LABEL_38:
      if ((v11 & 1) != 0)
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      goto LABEL_39;
    }
LABEL_24:
    if (v4 >= v10)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_53:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static FiniteFieldProtocol.subMod(_:_:) in conformance MontgomeryFiniteField128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v7;
  BOOL v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;

  v3 = *result;
  v4 = result[1];
  v5 = *a2;
  v6 = a2[1];
  v7 = *result < *a2;
  if (v4 != v6)
    v7 = v4 < v6;
  if (!v7)
  {
    v8 = v3 >= v5;
    v13 = v3 - v5;
    v14 = !v8;
    v8 = v4 >= v6;
    v15 = v4 - v6;
    v16 = !v8;
    if ((v14 & 1) != 0)
    {
      if (!v15)
        LOBYTE(v16) = 1;
      if ((v16 & 1) == 0)
      {
        --v15;
LABEL_26:
        *a3 = v13;
        a3[1] = v15;
        return result;
      }
    }
    else if (!v16)
    {
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_37;
  }
  v8 = v5 <= 1;
  v9 = 1 - v5;
  v10 = !v8;
  v8 = v6 <= 0xFFFFFFFFFFFFFFE4;
  v11 = -28 - v6;
  v12 = !v8;
  if ((v10 & 1) != 0)
  {
    if (!v11)
      v12 = 1;
    if ((v12 & 1) == 0)
    {
      --v11;
      goto LABEL_28;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((v12 & 1) != 0)
    goto LABEL_37;
LABEL_28:
  v8 = __CFADD__(v3, v9);
  v17 = v3 + v9;
  v18 = v8;
  v8 = __CFADD__(v4, v11);
  v19 = v4 + v11;
  if (!v8 && (!v18 || v19 != -1))
  {
    *a3 = v17;
    a3[1] = v19 + v18;
    return result;
  }
LABEL_38:
  __break(1u);
  return result;
}

_OWORD *protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance MontgomeryFiniteField128@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *result;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *a1;
  v37 = *a2;
  v38 = v4;
  _UInt128.multipliedFullWidth(by:)(&v34, &v39, (unint64_t *)&v37);
  v5 = v34;
  v6 = v39;
  v39 = xmmword_249C2A740;
  v38 = (unint64_t)-(uint64_t)v6;
  _UInt128.multipliedFullWidth(by:)(&v34, &v35, (unint64_t *)&v38);
  v7 = __CFADD__(v35, (_QWORD)v6);
  v8 = v36 + *((_QWORD *)&v6 + 1);
  v9 = __CFADD__(v36, *((_QWORD *)&v6 + 1)) || v8 == -1 && v7;
  v10 = v8 + v7;
  v11 = v5 + v34;
  v12 = __CFADD__((_QWORD)v5, (_QWORD)v34);
  v13 = *((_QWORD *)&v5 + 1) + *((_QWORD *)&v34 + 1);
  if (!__CFADD__(*((_QWORD *)&v5 + 1), *((_QWORD *)&v34 + 1)) && v13 == -1)
  {
    if (!v12)
    {
      v13 = -1;
      if ((v9 & 1) != 0)
        goto LABEL_17;
      goto LABEL_19;
    }
  }
  else if (!v12)
  {
    if ((v9 & 1) != 0)
      goto LABEL_17;
    goto LABEL_19;
  }
  ++v13;
  if (v9)
  {
LABEL_17:
    v14 = 1;
    goto LABEL_20;
  }
LABEL_19:
  v14 = 0;
LABEL_20:
  v15 = v11 + v14;
  if (__CFADD__(v11, v14))
    v16 = v13 + 1;
  else
    v16 = v13;
  v37 = xmmword_249C2A740;
  v33[0] = -v10;
  v33[1] = 0;
  result = _UInt128.multipliedFullWidth(by:)(&v39, &v38, v33);
  v18 = *((_QWORD *)&v39 + 1);
  v19 = __CFADD__((_QWORD)v38, v10);
  v20 = *((_QWORD *)&v38 + 1) + v15;
  v21 = __CFADD__(*((_QWORD *)&v38 + 1), v15);
  v22 = v20 == -1 && v19;
  v23 = v21 || v22;
  v24 = v20 + v19;
  v25 = v16 + v39;
  v26 = __CFADD__(v16, (_QWORD)v39);
  if (*((_QWORD *)&v39 + 1) == -1)
  {
    if (!v26)
    {
      if (v23)
      {
        v27 = __CFADD__(v25, 1);
        v28 = v25 + 1;
        if (v27)
          goto LABEL_63;
        goto LABEL_66;
      }
      v18 = -1;
      goto LABEL_54;
    }
    goto LABEL_45;
  }
  if (v26)
  {
LABEL_45:
    v18 = *((_QWORD *)&v39 + 1) + 1;
    if (v23)
    {
      v29 = 1;
      goto LABEL_55;
    }
LABEL_54:
    v29 = 0;
LABEL_55:
    v27 = __CFADD__(v25, v29);
    v28 = v25 + v29;
    v30 = v27;
    if (v18 == -1)
    {
      if ((v30 & 1) != 0)
        goto LABEL_63;
    }
    else if ((v30 & 1) == 0)
    {
      goto LABEL_60;
    }
LABEL_66:
    v27 = v24-- != 0;
    v32 = 28;
    if (!v27)
      v32 = 27;
    v28 += v32;
    goto LABEL_69;
  }
  if (!v23)
    goto LABEL_54;
  v27 = __CFADD__(v25, 1);
  v28 = v25 + 1;
  if (v27)
    goto LABEL_66;
LABEL_60:
  if (v18)
    goto LABEL_66;
LABEL_63:
  v31 = v24 == 0;
  if (v28 != -28)
    v31 = v28 < 0xFFFFFFFFFFFFFFE4;
  if (!v31)
    goto LABEL_66;
LABEL_69:
  *a3 = v24;
  a3[1] = v28;
  return result;
}

uint64_t *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance MontgomeryFiniteField128@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  __int128 v6;
  __int128 v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  _BOOL4 v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  unint64_t v37[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;

  v3 = result[1];
  v4 = (unint64_t)*result > 1;
  if (v3 != -28)
    v4 = v3 > 0xFFFFFFFFFFFFFFE4;
  if (!v4)
  {
    v5 = *result == 0;
    if (v3 != -28)
      v5 = v3 < 0xFFFFFFFFFFFFFFE4;
    if (!v5)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    v42 = *result;
    v43 = v3;
    v41 = xmmword_249C2A730;
    _UInt128.multipliedFullWidth(by:)(&v38, &v44, (unint64_t *)&v41);
    v6 = v38;
    v7 = v44;
    v44 = xmmword_249C2A740;
    v42 = -(uint64_t)v7;
    v43 = 0;
    _UInt128.multipliedFullWidth(by:)(&v38, &v39, (unint64_t *)&v42);
    v8 = __CFADD__(v39, (_QWORD)v7);
    v9 = v40 + *((_QWORD *)&v7 + 1);
    v10 = __CFADD__(v40, *((_QWORD *)&v7 + 1)) || v9 == -1 && v8;
    v11 = v9 + v8;
    v12 = v6 + v38;
    v13 = __CFADD__((_QWORD)v6, (_QWORD)v38);
    v14 = *((_QWORD *)&v6 + 1) + *((_QWORD *)&v38 + 1);
    if (!__CFADD__(*((_QWORD *)&v6 + 1), *((_QWORD *)&v38 + 1)) && v14 == -1)
    {
      if (!v13)
      {
        v14 = -1;
        if ((v10 & 1) != 0)
          goto LABEL_24;
        goto LABEL_26;
      }
    }
    else if (!v13)
    {
      if ((v10 & 1) != 0)
        goto LABEL_24;
      goto LABEL_26;
    }
    ++v14;
    if (v10)
    {
LABEL_24:
      v15 = 1;
      goto LABEL_27;
    }
LABEL_26:
    v15 = 0;
LABEL_27:
    v16 = v12 + v15;
    if (__CFADD__(v12, v15))
      v17 = v14 + 1;
    else
      v17 = v14;
    v41 = xmmword_249C2A740;
    v37[0] = -v11;
    v37[1] = 0;
    result = (uint64_t *)_UInt128.multipliedFullWidth(by:)(&v44, &v42, v37);
    v18 = *((_QWORD *)&v44 + 1);
    v19 = __CFADD__(v42, v11);
    v20 = v43 + v16;
    v21 = __CFADD__(v43, v16) || v20 == -1 && v19;
    v22 = v20 + v19;
    v23 = v17 + v44;
    v24 = __CFADD__(v17, (_QWORD)v44);
    if (*((_QWORD *)&v44 + 1) == -1)
    {
      if (!v24)
      {
        if (v21)
        {
          v25 = __CFADD__(v23, 1);
          v26 = v23 + 1;
          if (v25)
            goto LABEL_67;
          goto LABEL_70;
        }
        v18 = -1;
        goto LABEL_58;
      }
    }
    else if (!v24)
    {
      if (v21)
      {
        v25 = __CFADD__(v23, 1);
        v26 = v23 + 1;
        if (v25)
          goto LABEL_70;
        goto LABEL_64;
      }
      goto LABEL_58;
    }
    v18 = *((_QWORD *)&v44 + 1) + 1;
    if (v21)
    {
      v27 = 1;
LABEL_59:
      v25 = __CFADD__(v23, v27);
      v26 = v23 + v27;
      v28 = v25;
      if (v18 == -1)
      {
        if ((v28 & 1) != 0)
          goto LABEL_67;
        goto LABEL_70;
      }
      if ((v28 & 1) != 0)
        goto LABEL_70;
LABEL_64:
      if (!v18)
      {
LABEL_67:
        v29 = v22 == 0;
        if (v26 != -28)
          v29 = v26 < 0xFFFFFFFFFFFFFFE4;
        if (v29)
          goto LABEL_73;
      }
LABEL_70:
      v25 = v22-- != 0;
      v30 = 28;
      if (!v25)
        v30 = 27;
      v26 += v30;
LABEL_73:
      *a2 = v22;
      a2[1] = v26;
      return result;
    }
LABEL_58:
    v27 = 0;
    goto LABEL_59;
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v31._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 30768;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._object = (void *)0x8000000249C30670;
  v33._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v33);
  v34._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 30768;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 41;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *protocol witness for static FiniteFieldProtocol.internalValueToInt(_:) in conformance MontgomeryFiniteField128@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *result;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  _BOOL8 v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  char v28;
  _BOOL4 v29;
  uint64_t v30;
  unint64_t v31[2];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v3 = *a1;
  v35 = xmmword_249C291E0;
  v36 = v3;
  _UInt128.multipliedFullWidth(by:)(&v32, &v37, (unint64_t *)&v35);
  v4 = v32;
  v5 = v37;
  v37 = xmmword_249C2A740;
  v36 = (unint64_t)-(uint64_t)v5;
  _UInt128.multipliedFullWidth(by:)(&v32, &v33, (unint64_t *)&v36);
  v6 = __CFADD__(v33, (_QWORD)v5);
  v7 = v34 + *((_QWORD *)&v5 + 1);
  v8 = __CFADD__(v34, *((_QWORD *)&v5 + 1)) || v7 == -1 && v6;
  v9 = v7 + v6;
  v10 = v4 + v32;
  v11 = __CFADD__((_QWORD)v4, (_QWORD)v32);
  v12 = *((_QWORD *)&v4 + 1) + *((_QWORD *)&v32 + 1);
  if (!__CFADD__(*((_QWORD *)&v4 + 1), *((_QWORD *)&v32 + 1)))
  {
    if (v12 == -1)
    {
      v12 = v11 - 1;
      if ((v8 & 1) != 0)
        goto LABEL_21;
      goto LABEL_17;
    }
    if (!v11)
    {
      if ((v8 & 1) != 0)
        goto LABEL_21;
      goto LABEL_17;
    }
LABEL_20:
    ++v12;
    if ((v8 & 1) != 0)
      goto LABEL_21;
LABEL_17:
    v13 = 0;
    goto LABEL_22;
  }
  if (v11)
    goto LABEL_20;
  if (!v8)
    goto LABEL_17;
LABEL_21:
  v13 = 1;
LABEL_22:
  v14 = v10 + v13;
  if (__CFADD__(v10, v13))
    v15 = v12 + 1;
  else
    v15 = v12;
  v35 = xmmword_249C2A740;
  v31[0] = -v9;
  v31[1] = 0;
  result = _UInt128.multipliedFullWidth(by:)(&v37, &v36, v31);
  v17 = *((_QWORD *)&v37 + 1);
  v18 = __CFADD__((_QWORD)v36, v9);
  v19 = *((_QWORD *)&v36 + 1) + v14;
  if (__CFADD__(*((_QWORD *)&v36 + 1), v14))
  {
    v20 = v19 + v18;
    v21 = v15 + v37;
    v22 = __CFADD__(v15, (_QWORD)v37);
    if (*((_QWORD *)&v37 + 1) == -1)
    {
      if (!v22)
      {
        v26 = __CFADD__(v21, 1);
        v27 = v21 + 1;
        if (v26)
          goto LABEL_70;
LABEL_73:
        v26 = v20-- != 0;
        v30 = 28;
        if (!v26)
          v30 = 27;
        v27 += v30;
        goto LABEL_76;
      }
      v17 = 0;
    }
    else if (v22)
    {
      v17 = *((_QWORD *)&v37 + 1) + 1;
      goto LABEL_51;
    }
LABEL_55:
    v26 = __CFADD__(v21, 1);
    v27 = v21 + 1;
    v28 = v26;
    goto LABEL_63;
  }
  v23 = v19 == -1 && v18;
  v20 = v19 + v18;
  v21 = v15 + v37;
  v24 = __CFADD__(v15, (_QWORD)v37);
  if (*((_QWORD *)&v37 + 1) == -1)
  {
    v17 = v24 - 1;
    if (v23)
      goto LABEL_51;
  }
  else
  {
    if (v24)
    {
      v17 = *((_QWORD *)&v37 + 1) + 1;
      if (!v23)
        goto LABEL_58;
LABEL_51:
      v25 = 1;
      goto LABEL_59;
    }
    if (v23)
      goto LABEL_55;
  }
LABEL_58:
  v25 = 0;
LABEL_59:
  v26 = __CFADD__(v21, v25);
  v27 = v21 + v25;
  v28 = v26;
  if (v17 == -1)
  {
    if ((v28 & 1) != 0)
      goto LABEL_70;
    goto LABEL_73;
  }
LABEL_63:
  if ((v28 & 1) != 0 || v17)
    goto LABEL_73;
LABEL_70:
  v29 = v20 == 0;
  if (v27 != -28)
    v29 = v27 < 0xFFFFFFFFFFFFFFE4;
  if (!v29)
    goto LABEL_73;
LABEL_76:
  *a2 = v20;
  a2[1] = v27;
  return result;
}

_OWORD *protocol witness for static FiniteFieldProtocol.pow(of:raiseTo:) in conformance MontgomeryFiniteField128@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *result;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  BOOL v26;
  _BOOL8 v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  _BOOL4 v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  BOOL v36;
  unint64_t v37[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v4 = *a2;
  v5 = a2[1];
  v44 = *a1;
  v41 = xmmword_249C2A730;
  v42 = xmmword_249C291E0;
  _UInt128.multipliedFullWidth(by:)(&v38, &v43, (unint64_t *)&v41);
  v6 = v38;
  v7 = v43;
  v8 = -(uint64_t)v43;
  v43 = xmmword_249C2A740;
  v42 = (unint64_t)v8;
  _UInt128.multipliedFullWidth(by:)(&v38, &v39, (unint64_t *)&v42);
  v9 = __CFADD__(v39, (_QWORD)v7);
  v10 = v40 + *((_QWORD *)&v7 + 1);
  v11 = __CFADD__(v40, *((_QWORD *)&v7 + 1)) || v10 == -1 && v9;
  v12 = v10 + v9;
  v13 = v6 + v38;
  v14 = __CFADD__((_QWORD)v6, (_QWORD)v38);
  v15 = *((_QWORD *)&v6 + 1) + *((_QWORD *)&v38 + 1);
  if (!__CFADD__(*((_QWORD *)&v6 + 1), *((_QWORD *)&v38 + 1)))
  {
    if (v15 == -1)
    {
      v15 = v14 - 1;
      if ((v11 & 1) != 0)
        goto LABEL_21;
      goto LABEL_17;
    }
    if (!v14)
    {
      if ((v11 & 1) != 0)
        goto LABEL_21;
      goto LABEL_17;
    }
LABEL_20:
    ++v15;
    if ((v11 & 1) != 0)
      goto LABEL_21;
LABEL_17:
    v16 = 0;
    goto LABEL_22;
  }
  if (v14)
    goto LABEL_20;
  if (!v11)
    goto LABEL_17;
LABEL_21:
  v16 = 1;
LABEL_22:
  v17 = v13 + v16;
  if (__CFADD__(v13, v16))
    v18 = v15 + 1;
  else
    v18 = v15;
  v41 = xmmword_249C2A740;
  v37[0] = -v12;
  v37[1] = 0;
  result = _UInt128.multipliedFullWidth(by:)(&v43, &v42, v37);
  v20 = *((_QWORD *)&v43 + 1);
  v21 = __CFADD__((_QWORD)v42, v12);
  v22 = *((_QWORD *)&v42 + 1) + v17;
  if (__CFADD__(*((_QWORD *)&v42 + 1), v17))
  {
    v23 = v22 + v21;
    v24 = v18 + v43;
    v25 = __CFADD__(v18, (_QWORD)v43);
    if (*((_QWORD *)&v43 + 1) == -1)
    {
      if (!v25)
      {
        v29 = v24 + 1;
        if (v24 == -1)
          goto LABEL_67;
LABEL_70:
        v32 = v23-- != 0;
        v33 = 28;
        if (!v32)
          v33 = 27;
        v29 += v33;
        goto LABEL_73;
      }
      v20 = 0;
    }
    else if (v25)
    {
      v20 = *((_QWORD *)&v43 + 1) + 1;
      goto LABEL_51;
    }
LABEL_55:
    v29 = v24 + 1;
    v30 = v24 == -1;
    goto LABEL_61;
  }
  v26 = v22 == -1 && v21;
  v23 = v22 + v21;
  v24 = v18 + v43;
  v27 = __CFADD__(v18, (_QWORD)v43);
  if (*((_QWORD *)&v43 + 1) == -1)
  {
    v20 = v27 - 1;
    if (v26)
      goto LABEL_51;
  }
  else
  {
    if (v27)
    {
      v20 = *((_QWORD *)&v43 + 1) + 1;
      if (!v26)
        goto LABEL_56;
LABEL_51:
      v28 = 1;
      goto LABEL_57;
    }
    if (v26)
      goto LABEL_55;
  }
LABEL_56:
  v28 = 0;
LABEL_57:
  v29 = v24 + v28;
  v30 = __CFADD__(v24, v28);
  if (v20 == -1)
  {
    if (v30)
      goto LABEL_67;
    goto LABEL_70;
  }
LABEL_61:
  if (v30 || v20)
    goto LABEL_70;
LABEL_67:
  v31 = v23 == 0;
  if (v29 != -28)
    v31 = v29 < 0xFFFFFFFFFFFFFFE4;
  if (!v31)
    goto LABEL_70;
LABEL_73:
  *(_QWORD *)&v43 = v23;
  *((_QWORD *)&v43 + 1) = v29;
  if (v5 | v4)
  {
    while (1)
    {
      if ((v4 & 1) != 0)
      {
        static MontgomeryFiniteField128.mul(_:_:)(&v43, &v44, &v38);
        v29 = *((_QWORD *)&v38 + 1);
        v23 = v38;
        v43 = v38;
      }
      result = static MontgomeryFiniteField128.mul(_:_:)(&v44, &v44, &v38);
      v44 = v38;
      v34 = v5 >> 1;
      *((_QWORD *)&v35 + 1) = v5;
      *(_QWORD *)&v35 = v4;
      v4 = v35 >> 1;
      v36 = v5 > 1;
      v5 >>= 1;
      if (!v36)
      {
        v5 = v34;
        if (!v4)
          break;
      }
    }
  }
  *a3 = v23;
  a3[1] = v29;
  return result;
}

uint64_t protocol witness for static FiniteFieldProtocol.inv(_:) in conformance MontgomeryFiniteField128@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  unint64_t v28;
  __int128 v29;
  BOOL v30;
  unint64_t v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_OWORD *)a1 == 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(_QWORD *)&v37 = *(_QWORD *)a1;
  *((_QWORD *)&v37 + 1) = v3;
  v34 = xmmword_249C2A730;
  v35 = xmmword_249C291E0;
  _UInt128.multipliedFullWidth(by:)(&v32, &v36, (unint64_t *)&v34);
  v4 = v32;
  v5 = v36;
  v6 = -(uint64_t)v36;
  v36 = xmmword_249C2A740;
  v35 = (unint64_t)v6;
  _UInt128.multipliedFullWidth(by:)(&v32, &v33, (unint64_t *)&v35);
  LODWORD(v7) = __CFADD__((_QWORD)v33, (_QWORD)v5) && *((_QWORD *)&v33 + 1) + *((_QWORD *)&v5 + 1) == -1;
  v8 = (unsigned __int128)(v33 + v5) >> 64;
  if (__CFADD__(*((_QWORD *)&v33 + 1), *((_QWORD *)&v5 + 1)))
    v7 = 1;
  else
    v7 = v7;
  v9 = v4 + v32;
  v10 = __CFADD__((_QWORD)v4, (_QWORD)v32);
  v11 = *((_QWORD *)&v4 + 1) + *((_QWORD *)&v32 + 1);
  if (!__CFADD__(*((_QWORD *)&v4 + 1), *((_QWORD *)&v32 + 1)) && v11 == -1)
    v12 = v10 - 1;
  else
    v12 = v11 + v10;
  v13 = v9 + v7;
  if (__CFADD__(v9, v7))
    v14 = v12 + 1;
  else
    v14 = v12;
  v34 = xmmword_249C2A740;
  v31[0] = -v8;
  v31[1] = 0;
  _UInt128.multipliedFullWidth(by:)(&v36, &v35, v31);
  LODWORD(v15) = __CFADD__((_QWORD)v35, v8) && *((_QWORD *)&v35 + 1) + v13 == -1;
  v16 = v13 + __CFADD__((_QWORD)v35, v8) + *((_QWORD *)&v35 + 1);
  if (__CFADD__(*((_QWORD *)&v35 + 1), v13))
    v15 = 1;
  else
    v15 = v15;
  v17 = v14 + v36;
  v18 = -1;
  if (__CFADD__(v14, (_QWORD)v36))
  {
    v18 = 0;
    v19 = *((_QWORD *)&v36 + 1) + 1;
  }
  else
  {
    v19 = *((_QWORD *)&v36 + 1);
  }
  if (*((_QWORD *)&v36 + 1) != -1)
    v18 = v19;
  v20 = v17 + v15;
  v21 = __CFADD__(v17, v15);
  if (v18 != -1)
  {
    if (v18)
      v21 = 1;
    if (v21)
      goto LABEL_40;
LABEL_37:
    v22 = v16 == 0;
    if (v20 != -28)
      v22 = v20 < 0xFFFFFFFFFFFFFFE4;
    if (v22)
      goto LABEL_43;
    goto LABEL_40;
  }
  if (v21)
    goto LABEL_37;
LABEL_40:
  v23 = v16-- != 0;
  v24 = 28;
  if (!v23)
    v24 = 27;
  v20 += v24;
LABEL_43:
  *(_QWORD *)&v36 = v16;
  *((_QWORD *)&v36 + 1) = v20;
  v25 = -1;
  v26 = -29;
  while (1)
  {
    if ((v25 & 1) != 0)
    {
      static MontgomeryFiniteField128.mul(_:_:)(&v36, &v37, &v32);
      v20 = *((_QWORD *)&v32 + 1);
      v16 = v32;
      v36 = v32;
    }
    result = (uint64_t)static MontgomeryFiniteField128.mul(_:_:)(&v37, &v37, &v32);
    v37 = v32;
    v28 = v26 >> 1;
    *((_QWORD *)&v29 + 1) = v26;
    *(_QWORD *)&v29 = v25;
    v25 = v29 >> 1;
    v30 = v26 > 1;
    v26 >>= 1;
    if (!v30)
    {
      v26 = v28;
      if (!v25)
        break;
    }
  }
  *a2 = v16;
  a2[1] = v20;
  return result;
}

uint64_t specialized static FixedWidthInteger._truncatingInit<A>(_:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t specialized static FixedWidthInteger._truncatingInit<A>(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t static FixedWidthInteger._truncatingInit<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char v76;

  v64 = a1;
  v70 = a6;
  v66 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v61 = (char *)&v57 - v11;
  v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 8);
  v62 = AssociatedTypeWitness;
  v74 = swift_getAssociatedTypeWitness();
  v63 = *(_QWORD *)(v74 - 8);
  v13 = MEMORY[0x24BDAC7A8](v74, v12);
  v73 = (char *)&v57 - v14;
  v72 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v69 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v68 = (char *)&v57 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v75 = (char *)&v57 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v27 = (char *)&v57 - v26;
  MEMORY[0x24BDAC7A8](v25, v28);
  v30 = (char *)&v57 - v29;
  v71 = a4;
  v31 = *(_QWORD *)(a4 + 8);
  v67 = *(_QWORD *)(v31 + 24);
  v65 = *(_QWORD *)(v67 + 16);
  v32 = swift_getAssociatedTypeWitness();
  v34 = MEMORY[0x24BDAC7A8](v32, v33);
  v58 = (char *)&v57 - v35;
  v59 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v34, v36);
  v38 = (char *)&v57 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)(*(_QWORD *)(v66 + 24) + 16);
  v40 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v40, v41);
  v43 = (char *)&v57 - v42;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v40, AssociatedConformanceWitness);
  v45 = v39;
  v46 = a3;
  MEMORY[0x24BD00904](v43, a3, v45);
  v47 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v38, a3);
  v48 = swift_getAssociatedConformanceWitness();
  v49 = v58;
  v59 = v32;
  MEMORY[0x24BD00928](&unk_249C28BC8, 256, v32, v48);
  v57 = v47;
  MEMORY[0x24BD00904](v49, a2, v65);
  if ((v47 & 1) != 0)
  {
    dispatch thunk of static BinaryInteger.~ prefix(_:)();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v30, a2);
  }
  MEMORY[0x24BD00928](&unk_249C28BC8, 256);
  MEMORY[0x24BD00904](v49, a2, v65);
  dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  dispatch thunk of FixedWidthInteger.init(_truncatingBits:)();
  MEMORY[0x24BD00658](v46, v66);
  dispatch thunk of Sequence.makeIterator()();
  v66 = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v76 & 1) == 0)
  {
    v65 = v57 << 63 >> 63;
    v50 = v68;
    do
    {
      if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
        break;
      v51 = v31;
      v52 = v69;
      dispatch thunk of FixedWidthInteger.init(_truncatingBits:)();
      dispatch thunk of static FixedWidthInteger.&<< infix(_:_:)();
      v53 = *(void (**)(char *, uint64_t))(v72 + 8);
      v54 = v52;
      v31 = v51;
      v53(v54, a2);
      dispatch thunk of static BinaryInteger.^= infix(_:_:)();
      v53(v50, a2);
      dispatch thunk of FixedWidthInteger.init(_truncatingBits:)();
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v53(v30, a2);
      dispatch thunk of IteratorProtocol.next()();
    }
    while ((v76 & 1) == 0);
  }
  (*(void (**)(char *, uint64_t))(v63 + 8))(v73, v74);
  v55 = *(void (**)(char *, uint64_t))(v72 + 8);
  v55(v75, a2);
  return ((uint64_t (*)(char *, uint64_t))v55)(v27, a2);
}

unint64_t instantiation function for generic protocol witness table for MontgomeryFiniteField64(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MontgomeryFiniteField128(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static FiniteFieldProtocol.p.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.g.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.logOfOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.roots.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.bitmask.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.addMod(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.subMod(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.mul(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.intToInternalValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.internalValueToInt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.pow(of:raiseTo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.inv(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

ValueMetadata *type metadata accessor for FiniteField64()
{
  return &type metadata for FiniteField64;
}

uint64_t dispatch thunk of static MontgomeryFiniteField.r2.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for MontgomeryFiniteField64()
{
  return &type metadata for MontgomeryFiniteField64;
}

ValueMetadata *type metadata accessor for MontgomeryFiniteField128()
{
  return &type metadata for MontgomeryFiniteField128;
}

uint64_t PolynomialEvaluationGadget.arity.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PolynomialEvaluationGadget.degree.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Polynomial(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  return Polynomial.degree.getter(v4, v5);
}

uint64_t PolynomialEvaluationGadget.numOfCalls.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t *PolynomialEvaluationGadget.init(polynomial:numOfCalls:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *result;
  *a3 = 1;
  a3[1] = a2;
  a3[2] = v3;
  return result;
}

uint64_t PolynomialEvaluationGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE v20[32];
  uint64_t v21;

  v18 = a2;
  v19 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v10);
  v12 = (char *)&v17 - v11;
  v21 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  dispatch thunk of Collection.startIndex.getter();
  v13 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v5 + 16))(v7);
  v13(v20, 0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  v15 = type metadata accessor for Polynomial(0, v4, *(_QWORD *)(v18 + 24), v14);
  Polynomial.evaluate(at:)((uint64_t)v7, v15, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_bridgeObjectRelease();
}

uint64_t PolynomialEvaluationGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(_QWORD *, _QWORD);
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[5];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)&v17[-1] - v8;
  v17[4] = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  dispatch thunk of Collection.startIndex.getter();
  v10 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
  v12 = *v11;
  swift_bridgeObjectRetain();
  v10(v17, 0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  v17[0] = v12;
  v14 = type metadata accessor for Polynomial(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v13);
  Polynomial.evaluate(at:)((uint64_t)v17, v14, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance PolynomialEvaluationGadget<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  return PolynomialEvaluationGadget.evaluate<A>(at:)(a1, a2, a3);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance PolynomialEvaluationGadget<A>@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  return PolynomialEvaluationGadget.evaluate<A>(at:)(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for PolynomialEvaluationGadget(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PolynomialEvaluationGadget()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for PolynomialEvaluationGadget(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PolynomialEvaluationGadget(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PolynomialEvaluationGadget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PolynomialEvaluationGadget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for PolynomialEvaluationGadget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PolynomialEvaluationGadget);
}

uint64_t PINEPrepareShare.init(verifierShare:wraparoundJointRandPart:verificationJointRandPart:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t PINEPrepareShare.init<A>(from:parameter:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(void);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v105 = a5;
  v106 = a8;
  v10 = a7;
  v97 = a9;
  v101 = *(_QWORD *)(a7 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v16 = type metadata accessor for Optional();
  v18 = MEMORY[0x24BDAC7A8](v16, v17);
  v20 = (char *)&v88 - v19;
  v21 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v18, v22);
  v24 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *v58 = 0;
    v58[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v21 + 8))(a1, a6);
  }
  v98 = v21;
  v103 = a1;
  v104 = a6;
  v25 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 64);
  v26 = a4;
  v27 = v25(a4, v10);
  v28 = a2 * v27;
  if ((unsigned __int128)(a2 * (__int128)v27) >> 64 != (a2 * v27) >> 63)
  {
    __break(1u);
    goto LABEL_32;
  }
  a1 = *(_QWORD *)(v106 + 8);
  v26 = v105;
  v29 = ((uint64_t (*)(void))a1)();
  if (v29 + 0x4000000000000000 < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v30 = __OFADD__(v28, 2 * v29);
  v31 = v28 + 2 * v29;
  if (v30)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v96 = *(_QWORD *)(*(_QWORD *)(a10 + 8) + 8);
  if (dispatch thunk of Collection.count.getter() != v31)
  {
    v107 = 0;
    v108 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v107 = a4;
    v108 = v105;
    v109 = v10;
    v110 = v106;
    type metadata accessor for PINEPrepareShare();
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v98 + 16))(v24, v103, v104);
  v32 = ArraySlice.init<A>(_:)();
  v24 = v33;
  v95 = v35;
  v96 = v34;
  v94 = v25;
  v36 = v25(a4, v10);
  v26 = v36 * a2;
  if ((unsigned __int128)(v36 * (__int128)a2) >> 64 != (v36 * a2) >> 63)
    goto LABEL_34;
  v90 = (uint64_t (*)(void))a1;
  v37 = v36 * a2;
  v93 = a2;
  v39 = v95;
  v38 = v96;
  v40 = specialized Collection.prefix(_:)(v37, v32, v24, v96, v95);
  v41 = v24;
  v43 = v42;
  v91 = v45;
  v92 = v44;
  v46 = specialized Collection.dropFirst(_:)(v26, v32, v41, v38, v39);
  v95 = v47;
  v96 = v46;
  v89 = v48;
  v88 = v49;
  v107 = v40;
  v108 = v43;
  v109 = v92;
  v110 = v91;
  v50 = TupleTypeMetadata3;
  v51 = *(int *)(TupleTypeMetadata3 + 48);
  v52 = *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v20, 1, 1);
  *(_QWORD *)&v20[v51] = v93;
  swift_unknownObjectRetain();
  *(_QWORD *)&v20[v52] = v94(a4, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v20, 0, 1, v50);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  v54 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  v55 = v102;
  v56 = Array<A>.init<A>(from:parameter:)((uint64_t)&v107, (uint64_t)v20, a4, v53, v101, v54);
  if (v55)
  {
    (*(void (**)(unint64_t, uint64_t))(v98 + 8))(v103, v104);
    return swift_unknownObjectRelease();
  }
  v101 = v56;
  v59 = v90();
  v61 = v95;
  v60 = v96;
  v62 = v59;
  v63 = v89;
  v64 = v88;
  v26 = specialized Collection.prefix(_:)(v59, v96, v95, v89, v88);
  TupleTypeMetadata3 = v65;
  v102 = v66;
  a1 = v67;
  v25 = (uint64_t (*)(uint64_t, uint64_t))specialized Collection.dropFirst(_:)(v62, v60, v61, v63, v64);
  v10 = v68;
  a2 = v69;
  v24 = v70;
  if ((a1 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_13:
    specialized _copyCollectionToContiguousArray<A>(_:)(v26, TupleTypeMetadata3, v102, a1);
    goto LABEL_20;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v72 = swift_dynamicCastClass();
  if (!v72)
  {
    swift_unknownObjectRelease();
    v72 = MEMORY[0x24BEE4AF8];
  }
  v73 = *(_QWORD *)(v72 + 16);
  swift_release();
  if (__OFSUB__(a1 >> 1, v102))
    goto LABEL_35;
  if (v73 != (a1 >> 1) - v102)
  {
LABEL_36:
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  v71 = swift_dynamicCastClass();
  if (!v71)
  {
    swift_unknownObjectRelease();
    v71 = MEMORY[0x24BEE4AF8];
  }
LABEL_20:
  v102 = v71;
  swift_unknownObjectRelease();
  v74 = v90();
  v75 = specialized Collection.prefix(_:)(v74, v25, v10, a2, v24);
  v106 = v76;
  v78 = v77;
  v80 = v79;
  specialized Collection.dropFirst(_:)(v74, v25, v10, a2, v24);
  if ((v80 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v84 = swift_dynamicCastClass();
    v81 = v104;
    if (!v84)
    {
      swift_unknownObjectRelease();
      v84 = MEMORY[0x24BEE4AF8];
    }
    v85 = *(_QWORD *)(v84 + 16);
    swift_release();
    if (__OFSUB__(v80 >> 1, v78))
    {
      __break(1u);
    }
    else if (v85 == (v80 >> 1) - v78)
    {
      v83 = swift_dynamicCastClass();
      if (!v83)
      {
        swift_unknownObjectRelease();
        v83 = MEMORY[0x24BEE4AF8];
      }
      goto LABEL_29;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    v81 = v104;
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v75, v106, v78, v80);
  v83 = v82;
LABEL_29:
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v98 + 8))(v103, v81);
  result = swift_unknownObjectRelease();
  v86 = v97;
  v87 = v102;
  *v97 = v101;
  v86[1] = v87;
  v86[2] = v83;
  return result;
}

void type metadata accessor for PINEPrepareShare()
{
  JUMPOUT(0x24BD00B80);
}

uint64_t PINEPrepareShare.verifierShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareShare.wraparoundJointRandPart.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareShare.verificationJointRandPart.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static PINEPrepareShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  return (static Array<A>.== infix(_:_:)() & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v2, v4)
      && specialized static Array<A>.== infix(_:_:)(v3, v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PINEPrepareShare<A, B>(uint64_t a1, uint64_t a2)
{
  return static PINEPrepareShare.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPrepareShare<A, B>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return PINEPrepareShare.init<A>(from:parameter:)(a1, *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a3, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), a6, a4);
}

uint64_t PINEPrepareShare.encodedLength.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[1];
  v3 = v1[2];
  result = Array<A>.encodedLength.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  v5 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(result, v5);
  v7 = result + v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v3 + 16);
  result = v7 + v8;
  if (__OFADD__(v7, v8))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t PINEPrepareShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  Array<A>.encode<A>(into:)(a1, *v4, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), a4);
  Seed.encode<A>(into:)();
  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPrepareShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINEPrepareShare.encode<A>(into:)(a1, a4, a2, a3);
}

_QWORD *initializeBufferWithCopyOfBuffer for PINEPrepareShare(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PINEPrepareShare(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PINEPrepareShare(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEPrepareShare(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEPrepareShare(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x24BDCBBF8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDB60]();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDBC8]();
}

uint64_t Data._copyContents(initializing:)()
{
  return MEMORY[0x24BDCDBF8]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t Data.init<A>(_:)()
{
  return MEMORY[0x24BDCDE68]();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return MEMORY[0x24BDC63B0]();
}

uint64_t SymmetricKey.bitCount.getter()
{
  return MEMORY[0x24BDC63D0]();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return MEMORY[0x24BDC63E0]();
}

uint64_t HashedAuthenticationCode.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDC6520]();
}

uint64_t static AES.permute<A>(_:key:)()
{
  return MEMORY[0x24BDC6670]();
}

uint64_t HMAC.init(key:)()
{
  return MEMORY[0x24BDC66F0]();
}

uint64_t HMAC.update<A>(data:)()
{
  return MEMORY[0x24BDC66F8]();
}

uint64_t HMAC.finalize()()
{
  return MEMORY[0x24BDC6700]();
}

uint64_t type metadata accessor for HMAC()
{
  return MEMORY[0x24BDC6708]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t Array.init()()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x24BEE0240]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x24BEE0260]();
}

uint64_t dispatch thunk of FloatingPoint.isInfinite.getter()
{
  return MEMORY[0x24BEE0510]();
}

uint64_t dispatch thunk of FloatingPoint.isSubnormal.getter()
{
  return MEMORY[0x24BEE0520]();
}

uint64_t dispatch thunk of static FloatingPoint./= infix(_:_:)()
{
  return MEMORY[0x24BEE0568]();
}

uint64_t dispatch thunk of FloatingPoint.isNaN.getter()
{
  return MEMORY[0x24BEE0590]();
}

uint64_t dispatch thunk of FloatingPoint.rounded(_:)()
{
  return MEMORY[0x24BEE05A8]();
}

uint64_t dispatch thunk of FloatingPoint.exponent.getter()
{
  return MEMORY[0x24BEE05B8]();
}

uint64_t dispatch thunk of FloatingPoint.init(_:)()
{
  return MEMORY[0x24BEE05E8]();
}

uint64_t dispatch thunk of FloatingPoint.init<A>(_:)()
{
  return MEMORY[0x24BEE05F0]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x24BEE0780]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t MutableCollection.subscript.getter()
{
  return MEMORY[0x24BEE0850]();
}

uint64_t dispatch thunk of MutableCollection.subscript.modify()
{
  return MEMORY[0x24BEE0890]();
}

uint64_t dispatch thunk of MutableCollection.subscript.setter()
{
  return MEMORY[0x24BEE0898]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x24BEE0AD8]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x24BEE0D58]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t Sequence.reduce<A>(into:_:)()
{
  return MEMORY[0x24BEE0EB0]();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return MEMORY[0x24BEE0EB8]();
}

uint64_t static SignedInteger<>._maskingAdd(_:_:)()
{
  return MEMORY[0x24BEE10F8]();
}

uint64_t static SignedInteger<>._maskingSubtract(_:_:)()
{
  return MEMORY[0x24BEE1100]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return MEMORY[0x24BEE1138]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x24BEE1140]();
}

Swift::Void __swiftcall Array.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE1150](a1);
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
  MEMORY[0x24BEE1178]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t static Array.+= infix(_:_:)()
{
  return MEMORY[0x24BEE11A8]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t Array.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE11F0]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x24BEE1220]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t static Array<A>.== infix(_:_:)()
{
  return MEMORY[0x24BEE1278]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x24BEE1290]();
}

{
  return MEMORY[0x24BEE1308]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t Float.significandWidth.getter()
{
  return MEMORY[0x24BEE14A8]();
}

uint64_t Float.exponent.getter()
{
  return MEMORY[0x24BEE14D0]();
}

uint64_t Set.isEmpty.getter()
{
  return MEMORY[0x24BEE1668]();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return MEMORY[0x24BEE17F8]();
}

uint64_t dispatch thunk of Numeric.magnitude.getter()
{
  return MEMORY[0x24BEE1820]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE1848]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE1850]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x24BEE18D8]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE18E8]();
}

uint64_t dispatch thunk of Collection.isEmpty.getter()
{
  return MEMORY[0x24BEE1900]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x24BEE1980]();
}

uint64_t Collection.prefix(_:)()
{
  return MEMORY[0x24BEE19A8]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x24BEE19D0]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x24BEE1A20]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE1A48]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append(_:)()
{
  return MEMORY[0x24BEE1A50]();
}

uint64_t RangeReplaceableCollection<>.removeFirst()()
{
  return MEMORY[0x24BEE1A70]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t Range<>.startIndex.getter()
{
  return MEMORY[0x24BEE1B80]();
}

uint64_t Range<>.endIndex.getter()
{
  return MEMORY[0x24BEE1B88]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UnsafeMutableRawBufferPointer.copyBytes<A>(from:)()
{
  return MEMORY[0x24BEE1F28]();
}

uint64_t dispatch thunk of Strideable.advanced(by:)()
{
  return MEMORY[0x24BEE1F68]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t dispatch thunk of static BinaryInteger.& infix(_:_:)()
{
  return MEMORY[0x24BEE1FD8]();
}

uint64_t dispatch thunk of static BinaryInteger./ infix(_:_:)()
{
  return MEMORY[0x24BEE1FE0]();
}

uint64_t dispatch thunk of static BinaryInteger.~ prefix(_:)()
{
  return MEMORY[0x24BEE1FF8]();
}

uint64_t dispatch thunk of static BinaryInteger.&= infix(_:_:)()
{
  return MEMORY[0x24BEE2010]();
}

uint64_t dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)()
{
  return MEMORY[0x24BEE2020]();
}

uint64_t dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)()
{
  return MEMORY[0x24BEE2028]();
}

uint64_t dispatch thunk of static BinaryInteger.|= infix(_:_:)()
{
  return MEMORY[0x24BEE2030]();
}

uint64_t dispatch thunk of static BinaryInteger.^= infix(_:_:)()
{
  return MEMORY[0x24BEE2038]();
}

uint64_t dispatch thunk of BinaryInteger.words.getter()
{
  return MEMORY[0x24BEE2058]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x24BEE2098]();
}

{
  return MEMORY[0x24BEE20A0]();
}

uint64_t ArraySlice.startIndex.getter()
{
  return MEMORY[0x24BEE2110]();
}

Swift::Bool __swiftcall ArraySlice._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x24BEE2130]();
}

uint64_t ArraySlice.count.getter()
{
  return MEMORY[0x24BEE2140]();
}

uint64_t ArraySlice.endIndex.getter()
{
  return MEMORY[0x24BEE2148]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t ArraySlice.subscript.getter()
{
  return MEMORY[0x24BEE2160]();
}

{
  return MEMORY[0x24BEE21A0]();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return MEMORY[0x24BEE2168]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t dispatch thunk of static SignedNumeric.- prefix(_:)()
{
  return MEMORY[0x24BEE27E0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2950](a1);
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t type metadata accessor for IndexingIterator()
{
  return MEMORY[0x24BEE2C00]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2D18]();
}

uint64_t dispatch thunk of FixedWidthInteger.init(_truncatingBits:)()
{
  return MEMORY[0x24BEE2D38]();
}

uint64_t dispatch thunk of FixedWidthInteger.leadingZeroBitCount.getter()
{
  return MEMORY[0x24BEE2D48]();
}

uint64_t dispatch thunk of static FixedWidthInteger.&<< infix(_:_:)()
{
  return MEMORY[0x24BEE2D78]();
}

uint64_t dispatch thunk of static FixedWidthInteger.max.getter()
{
  return MEMORY[0x24BEE2D80]();
}

uint64_t dispatch thunk of static FixedWidthInteger.min.getter()
{
  return MEMORY[0x24BEE2D88]();
}

uint64_t dispatch thunk of FixedWidthInteger.bigEndian.getter()
{
  return MEMORY[0x24BEE2DA8]();
}

uint64_t static FixedWidthInteger.random(in:)()
{
  return MEMORY[0x24BEE2DC8]();
}

{
  return MEMORY[0x24BEE2DD0]();
}

uint64_t FixedWidthInteger.init<A>(exactly:)()
{
  return MEMORY[0x24BEE2DD8]();
}

uint64_t static FixedWidthInteger._convert<A>(from:)()
{
  return MEMORY[0x24BEE2DE0]();
}

uint64_t FixedWidthInteger.init<A>(clamping:)()
{
  return MEMORY[0x24BEE2DE8]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x24BEE2F68]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return MEMORY[0x24BEE2F70]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)()
{
  return MEMORY[0x24BEE2F78]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)()
{
  return MEMORY[0x24BEE2F80]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return MEMORY[0x24BEE2F88]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x24BEE38F0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x24BEE3930]();
}

{
  return MEMORY[0x24BEE3938]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t abs<A>(_:)()
{
  return MEMORY[0x24BEE3DE8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
  MEMORY[0x24BEE4308](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x24BEE4310](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x24BEE4318](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t __udivti3()
{
  return MEMORY[0x24BDAC940]();
}

uint64_t __umodti3()
{
  return MEMORY[0x24BDAC958]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x24BEE4B28]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

