void FileDocument.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12[3];

  OUTLINED_FUNCTION_82_8();
  v12[2] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FileDocument.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  LOBYTE(v12[0]) = 0;
  OUTLINED_FUNCTION_1_7();
  if (!v0)
  {
    type metadata accessor for FileDocument(0);
    LOBYTE(v12[0]) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type URL? and conformance <A> A?();
    OUTLINED_FUNCTION_63_8();
    v4 = (void *)objc_opt_self();
    v5 = *(_QWORD *)(v1 + 16);
    v12[0] = 0;
    v6 = objc_msgSend(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v5, 1, v12);
    v7 = v12[0];
    if (v6)
    {
      v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;

      v12[0] = v8;
      v12[1] = v10;
      lazy protocol witness table accessor for type Data and conformance Data();
      OUTLINED_FUNCTION_63_8();
      OUTLINED_FUNCTION_38_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      outlined consume of Data._Representation((uint64_t)v8, (unint64_t)v10);
      goto LABEL_4;
    }
    v11 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  OUTLINED_FUNCTION_38_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
LABEL_4:
  OUTLINED_FUNCTION_256();
  OUTLINED_FUNCTION_56_5();
}

BOOL static FileDocument.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

OmniSearch::FileDocument::CodingKeys_optional __swiftcall FileDocument.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  BOOL v1;
  void *object;
  uint64_t countAndFlagsBits;
  BOOL v5;
  char v7;

  v1 = stringValue._countAndFlagsBits == 25705 && stringValue._object == (void *)0xE200000000000000;
  if (v1
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (OUTLINED_FUNCTION_13_17() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = countAndFlagsBits == 1835365481 && object == (void *)0xE400000000000000;
    if (v5 || (OUTLINED_FUNCTION_13_17() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return (OmniSearch::FileDocument::CodingKeys_optional)1;
    }
    else if (countAndFlagsBits == 7107189 && object == (void *)0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      return (OmniSearch::FileDocument::CodingKeys_optional)2;
    }
    else
    {
      v7 = OUTLINED_FUNCTION_13_17();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        return (OmniSearch::FileDocument::CodingKeys_optional)2;
      else
        return (OmniSearch::FileDocument::CodingKeys_optional)3;
    }
  }
}

OmniSearch::FileDocument::CodingKeys_optional __swiftcall FileDocument.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (OmniSearch::FileDocument::CodingKeys_optional)3;
}

uint64_t FileDocument.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FileDocument.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 25705;
  if (a1 == 1)
    return 1835365481;
  return 7107189;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FileDocument.CodingKeys(char *a1, char *a2)
{
  return static FileDocument.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FileDocument.CodingKeys()
{
  unsigned __int8 *v0;

  return WalletPass.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FileDocument.CodingKeys()
{
  char *v0;

  return FileDocument.CodingKeys.stringValue.getter(*v0);
}

OmniSearch::FileDocument::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance FileDocument.CodingKeys@<W0>(uint64_t a1@<X0>, OmniSearch::FileDocument::CodingKeys_optional *a2@<X8>)
{
  OmniSearch::FileDocument::CodingKeys_optional result;

  result.value = FileDocument.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance FileDocument.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FileDocument.CodingKeys()
{
  lazy protocol witness table accessor for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FileDocument.CodingKeys()
{
  lazy protocol witness table accessor for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance FileDocument()
{
  FileDocument.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance FileDocument()
{
  FileDocument.encode(to:)();
}

void WalletTransaction.date.getter()
{
  CalendarEvent.startDate.getter(type metadata accessor for WalletTransaction);
}

void CalendarEvent.startDate.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_47_11(a1);
  OUTLINED_FUNCTION_109_4(v1 + *(int *)(v2 + 28), v3, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_5();
}

void WalletTransaction.city.getter()
{
  WalletTransaction.city.getter(type metadata accessor for WalletTransaction);
}

void WalletTransaction.stateOrProvince.getter()
{
  CalendarEvent.locationName.getter(type metadata accessor for WalletTransaction);
}

void CalendarEvent.locationName.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void WalletTransaction.country.getter()
{
  WalletTransaction.country.getter(type metadata accessor for WalletTransaction);
}

uint64_t WalletTransaction.amount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for WalletTransaction(0) + 44));
}

void WalletTransaction.currencyCode.getter()
{
  CalendarEvent.notes.getter(type metadata accessor for WalletTransaction);
}

void CalendarEvent.notes.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void WalletTransaction.url.getter()
{
  CalendarEvent.url.getter(type metadata accessor for WalletTransaction);
}

void CalendarEvent.url.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_47_11(a1);
  OUTLINED_FUNCTION_109_4(v1 + *(int *)(v2 + 52), v3, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

uint64_t WalletTransaction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  char v15;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 1702125924 && a2 == 0xE400000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 2037672291 && a2 == 0xE400000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x50724F6574617473 && a2 == 0xEF65636E69766F72;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              v11 = a1 == 0x7972746E756F63 && a2 == 0xE700000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                v12 = a1 == 0x746E756F6D61 && a2 == 0xE600000000000000;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  v13 = a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else if (a1 == 7107189 && a2 == 0xE300000000000000)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v15 & 1) != 0)
                      return 9;
                    else
                      return 10;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WalletTransaction.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24320F0AC + 4 * byte_243351B39[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_24320F0AC()
{
  return 0x656C746974;
}

uint64_t sub_24320F0C0()
{
  return 0x7470697263736564;
}

uint64_t sub_24320F0E0()
{
  return 1702125924;
}

uint64_t sub_24320F0F0()
{
  return 2037672291;
}

uint64_t sub_24320F100()
{
  return 0x50724F6574617473;
}

uint64_t sub_24320F124()
{
  return 0x7972746E756F63;
}

uint64_t sub_24320F13C()
{
  return 0x746E756F6D61;
}

uint64_t sub_24320F150()
{
  return 0x79636E6572727563;
}

uint64_t sub_24320F170()
{
  return 7107189;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WalletTransaction.CodingKeys()
{
  unsigned __int8 *v0;

  return WalletTransaction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WalletTransaction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = WalletTransaction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WalletTransaction.CodingKeys()
{
  lazy protocol witness table accessor for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WalletTransaction.CodingKeys()
{
  lazy protocol witness table accessor for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void WalletTransaction.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_82_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WalletTransaction.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  OUTLINED_FUNCTION_1_7();
  if (!v0)
  {
    OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_21_12();
    type metadata accessor for WalletTransaction(0);
    OUTLINED_FUNCTION_160_0();
    OUTLINED_FUNCTION_78_10();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    OUTLINED_FUNCTION_281();
    OUTLINED_FUNCTION_65_3();
    OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_310();
    OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_21_12();
    type metadata accessor for NSDecimal(0);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
    OUTLINED_FUNCTION_65_3();
    OUTLINED_FUNCTION_286();
    OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_281();
    OUTLINED_FUNCTION_65_3();
  }
  OUTLINED_FUNCTION_38_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_256();
  OUTLINED_FUNCTION_56_5();
}

void WalletTransaction.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int *v32;
  __int128 v33;
  int v34;
  char v35;

  OUTLINED_FUNCTION_65_7();
  v6 = v5;
  v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_44_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_79_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WalletTransaction.CodingKeys>);
  OUTLINED_FUNCTION_211();
  MEMORY[0x24BDAC7A8](v11);
  v12 = OUTLINED_FUNCTION_64_6();
  v32 = (int *)type metadata accessor for WalletTransaction(v12);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_0_3();
  v31 = v14;
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  lazy protocol witness table accessor for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys();
  OUTLINED_FUNCTION_302();
  OUTLINED_FUNCTION_180();
  if (v1)
  {
    OUTLINED_FUNCTION_203();
  }
  else
  {
    *v31 = KeyedDecodingContainer.decode(_:forKey:)();
    v31[1] = v15;
    v31[2] = OUTLINED_FUNCTION_40_6(1);
    v31[3] = v16;
    v31[4] = OUTLINED_FUNCTION_40_6(2);
    v31[5] = v17;
    OUTLINED_FUNCTION_78_10();
    LOBYTE(v33) = 3;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    OUTLINED_FUNCTION_146_0();
    outlined init with take of Date?(v3, (uint64_t)v31 + v32[7], &demangling cache variable for type metadata for Date?);
    v18 = OUTLINED_FUNCTION_40_6(4);
    v19 = (uint64_t *)((char *)v31 + v32[8]);
    *v19 = v18;
    v19[1] = v20;
    v21 = OUTLINED_FUNCTION_40_6(5);
    v22 = (uint64_t *)((char *)v31 + v32[9]);
    *v22 = v21;
    v22[1] = v23;
    v24 = OUTLINED_FUNCTION_40_6(6);
    v25 = (uint64_t *)((char *)v31 + v32[10]);
    *v25 = v24;
    v25[1] = v26;
    type metadata accessor for NSDecimal(0);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
    OUTLINED_FUNCTION_146_0();
    v27 = (char *)v31 + v32[11];
    *(_OWORD *)v27 = v33;
    *((_DWORD *)v27 + 4) = v34;
    v27[20] = v35;
    v28 = OUTLINED_FUNCTION_107_3();
    v29 = (uint64_t *)((char *)v31 + v32[12]);
    *v29 = v28;
    v29[1] = v30;
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_146_0();
    OUTLINED_FUNCTION_67_9(v4, *(uint64_t (**)(uint64_t, _QWORD))(v2 + 8));
    outlined init with take of Date?(v0, (uint64_t)v31 + v32[13], &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_77_6((uint64_t)v31, v8);
    OUTLINED_FUNCTION_36_11((uint64_t)v6);
  }
  OUTLINED_FUNCTION_182();
  OUTLINED_FUNCTION_1_1();
}

void WalletTransaction.init(id:title:description:date:city:stateOrProvince:country:amount:currencyCode:url:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  v23 = (int *)type metadata accessor for WalletTransaction(0);
  outlined init with take of Date?(a7, (uint64_t)a9 + v23[7], &demangling cache variable for type metadata for Date?);
  v24 = (_QWORD *)((char *)a9 + v23[8]);
  *v24 = a8;
  v24[1] = a10;
  v25 = (_QWORD *)((char *)a9 + v23[9]);
  *v25 = a11;
  v25[1] = a12;
  v26 = (_QWORD *)((char *)a9 + v23[10]);
  *v26 = a13;
  v26[1] = a14;
  v27 = (char *)a9 + v23[11];
  *(_QWORD *)v27 = a15;
  *((_QWORD *)v27 + 1) = a16;
  *((_DWORD *)v27 + 4) = a17;
  v27[20] = a18 & 1;
  v28 = (_QWORD *)((char *)a9 + v23[12]);
  *v28 = a19;
  v28[1] = a20;
  outlined init with take of Date?(a21, (uint64_t)a9 + v23[13], &demangling cache variable for type metadata for URL?);
}

void protocol witness for Decodable.init(from:) in conformance WalletTransaction()
{
  WalletTransaction.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance WalletTransaction()
{
  WalletTransaction.encode(to:)();
}

void WalletPass.id.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void WalletPass.title.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void WalletPass.description.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void WalletPass.creationDate.getter()
{
  CalendarEvent.startDate.getter(type metadata accessor for WalletPass);
}

void WalletPass.creator.getter()
{
  WalletTransaction.city.getter(type metadata accessor for WalletPass);
}

void WalletTransaction.city.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void WalletPass.url.getter()
{
  NoteDocument.lastUsedDate.getter(type metadata accessor for WalletPass);
}

void NoteDocument.lastUsedDate.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_54_9(a1);
  OUTLINED_FUNCTION_105_6(*(int *)(v1 + 36));
  OUTLINED_FUNCTION_12();
}

void WalletPass.init(id:title:description:creationDate:creator:url:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9, uint64_t a10)
{
  int *v12;
  _QWORD *v13;

  OUTLINED_FUNCTION_243(a1, a2, a3, a4, a5, a6, a8);
  v12 = (int *)type metadata accessor for WalletPass(0);
  OUTLINED_FUNCTION_285((uint64_t)v12, (uint64_t)a8 + v12[7], &demangling cache variable for type metadata for Date?);
  v13 = (_QWORD *)((char *)a8 + v12[8]);
  *v13 = a7;
  v13[1] = a9;
  outlined init with take of Date?(a10, (uint64_t)a8 + v12[9], &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_63();
}

uint64_t WalletPass.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v11;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x726F7461657263 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 7107189 && a2 == 0xE300000000000000)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v11 & 1) != 0)
              return 5;
            else
              return 6;
          }
        }
      }
    }
  }
}

uint64_t WalletPass.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t WalletPass.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24320FE10 + 4 * byte_243351B43[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_24320FE10()
{
  return 0x656C746974;
}

uint64_t sub_24320FE24()
{
  return 0x7470697263736564;
}

uint64_t sub_24320FE44()
{
  return 0x6E6F697461657263;
}

uint64_t sub_24320FE64()
{
  return 0x726F7461657263;
}

uint64_t sub_24320FE7C()
{
  return 7107189;
}

void protocol witness for Hashable.hashValue.getter in conformance WalletPass.CodingKeys()
{
  unsigned __int8 *v0;

  EmailDocument.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WalletPass.CodingKeys()
{
  unsigned __int8 *v0;

  return WalletPass.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WalletPass.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = WalletPass.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WalletPass.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = WalletPass.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WalletPass.CodingKeys()
{
  lazy protocol witness table accessor for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WalletPass.CodingKeys()
{
  lazy protocol witness table accessor for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void WalletPass.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_82_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WalletPass.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  OUTLINED_FUNCTION_1_7();
  if (!v0)
  {
    OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_21_12();
    type metadata accessor for WalletPass(0);
    OUTLINED_FUNCTION_160_0();
    OUTLINED_FUNCTION_78_10();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    OUTLINED_FUNCTION_65_3();
    OUTLINED_FUNCTION_290();
    OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_65_3();
  }
  OUTLINED_FUNCTION_38_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_256();
  OUTLINED_FUNCTION_56_5();
}

void WalletPass.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;

  OUTLINED_FUNCTION_65_7();
  v4 = v3;
  v20 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_79_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_3_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WalletPass.CodingKeys>);
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x24BDAC7A8](v8);
  v9 = OUTLINED_FUNCTION_64_6();
  v21 = (int *)type metadata accessor for WalletPass(v9);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_0_3();
  v22 = v11;
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys();
  OUTLINED_FUNCTION_302();
  OUTLINED_FUNCTION_294();
  if (v1)
  {
    OUTLINED_FUNCTION_300();
  }
  else
  {
    *v22 = KeyedDecodingContainer.decode(_:forKey:)();
    v22[1] = v12;
    v22[2] = OUTLINED_FUNCTION_153_0();
    v22[3] = v13;
    v22[4] = OUTLINED_FUNCTION_153_0();
    v22[5] = v14;
    OUTLINED_FUNCTION_78_10();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v15 = OUTLINED_FUNCTION_139_0();
    OUTLINED_FUNCTION_263(v15, (uint64_t)v22 + v21[7], &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_290();
    v16 = OUTLINED_FUNCTION_153_0();
    v17 = (uint64_t *)((char *)v22 + v21[8]);
    *v17 = v16;
    v17[1] = v18;
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_139_0();
    v19 = OUTLINED_FUNCTION_69_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    OUTLINED_FUNCTION_263(v19, (uint64_t)v22 + v21[9], &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_77_6((uint64_t)v22, v20);
    OUTLINED_FUNCTION_300();
    OUTLINED_FUNCTION_79_7((uint64_t)v22);
  }
  OUTLINED_FUNCTION_1_1();
}

void protocol witness for Decodable.init(from:) in conformance WalletPass()
{
  WalletPass.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance WalletPass()
{
  WalletPass.encode(to:)();
}

void Contact.url.getter()
{
  NoteDocument.lastUsedDate.getter(type metadata accessor for Contact);
}

void Contact.init(id:name:phoneNumbers:emailAddresses:physicalAddresses:url:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_243(a1, a2, a3, a4, a5, a6, a8);
  *(_QWORD *)(v11 + 48) = v10;
  v12 = type metadata accessor for Contact(0);
  outlined init with take of Date?(a7, (uint64_t)a8 + *(int *)(v12 + 36), &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

uint64_t Contact.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v10;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1701667182 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6D754E656E6F6870 && a2 == 0xEC00000073726562;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x6464416C69616D65 && a2 == 0xEE00736573736572;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000011 && a2 == 0x800000024335D210
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 7107189 && a2 == 0xE300000000000000)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v10 & 1) != 0)
            return 5;
          else
            return 6;
        }
      }
    }
  }
}

uint64_t Contact.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_243210764 + 4 * byte_243351B49[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_243210764()
{
  return 1701667182;
}

uint64_t sub_243210774()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_243210794()
{
  return 0x6464416C69616D65;
}

unint64_t sub_2432107B8()
{
  return 0xD000000000000011;
}

uint64_t sub_2432107D4()
{
  return 7107189;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Contact.CodingKeys()
{
  unsigned __int8 *v0;

  return Contact.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Contact.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Contact.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Contact.CodingKeys()
{
  lazy protocol witness table accessor for type Contact.CodingKeys and conformance Contact.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Contact.CodingKeys()
{
  lazy protocol witness table accessor for type Contact.CodingKeys and conformance Contact.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void Contact.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_82_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Contact.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type Contact.CodingKeys and conformance Contact.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  OUTLINED_FUNCTION_1_7();
  if (!v0)
  {
    OUTLINED_FUNCTION_21_12();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_63_8();
    OUTLINED_FUNCTION_63_8();
    OUTLINED_FUNCTION_63_8();
    type metadata accessor for Contact(0);
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_223();
    OUTLINED_FUNCTION_65_3();
  }
  OUTLINED_FUNCTION_38_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_256();
  OUTLINED_FUNCTION_56_5();
}

void Contact.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  OUTLINED_FUNCTION_65_7();
  v13 = v12;
  v23 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_32_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Contact.CodingKeys>);
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x24BDAC7A8](v16);
  v17 = OUTLINED_FUNCTION_94_4();
  v18 = type metadata accessor for Contact(v17);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_0_3();
  v24 = v20;
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  lazy protocol witness table accessor for type Contact.CodingKeys and conformance Contact.CodingKeys();
  OUTLINED_FUNCTION_294();
  if (v10)
  {
    OUTLINED_FUNCTION_6_2();
  }
  else
  {
    OUTLINED_FUNCTION_200();
    *v24 = KeyedDecodingContainer.decode(_:forKey:)();
    v24[1] = v21;
    LOBYTE(a10) = 1;
    v24[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v24[3] = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_166();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_221();
    OUTLINED_FUNCTION_76_7();
    v24[4] = a10;
    OUTLINED_FUNCTION_76_7();
    v24[5] = a10;
    OUTLINED_FUNCTION_76_7();
    v24[6] = a10;
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_191();
    OUTLINED_FUNCTION_99_4();
    OUTLINED_FUNCTION_48_7();
    outlined init with take of Date?(v11, (uint64_t)v24 + *(int *)(v18 + 36), &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_77_6((uint64_t)v24, v23);
    OUTLINED_FUNCTION_6_2();
    OUTLINED_FUNCTION_79_7((uint64_t)v24);
  }
  OUTLINED_FUNCTION_100_5();
  OUTLINED_FUNCTION_1_1();
}

void protocol witness for Decodable.init(from:) in conformance Contact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  Contact.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance Contact()
{
  Contact.encode(to:)();
}

void FlightReservation.url.getter()
{
  FlightReservation.url.getter(type metadata accessor for FlightReservation);
}

uint64_t FlightReservation.url.setter(uint64_t a1)
{
  return FlightReservation.url.setter(a1, type metadata accessor for FlightReservation);
}

uint64_t (*FlightReservation.url.modify())()
{
  OUTLINED_FUNCTION_104_3();
  OUTLINED_FUNCTION_233();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightReservation.answers.getter()
{
  return FlightReservation.answers.getter(type metadata accessor for FlightReservation);
}

uint64_t FlightReservation.answerAttributes.getter()
{
  return FlightReservation.answerAttributes.getter(type metadata accessor for FlightReservation);
}

void FlightReservation.bundleId.getter()
{
  WalletTransaction.city.getter(type metadata accessor for FlightReservation);
}

void FlightReservation.mailMessageId.getter()
{
  CalendarEvent.locationName.getter(type metadata accessor for FlightReservation);
}

void FlightReservation.flightNumber.getter()
{
  OUTLINED_FUNCTION_104_3();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightCheckInUrl.getter()
{
  MobileSMSDocument.url.getter(type metadata accessor for FlightReservation);
}

void FlightReservation.flightBookingInfoUrl.getter()
{
  MobileSMSDocument.contentURL.getter(type metadata accessor for FlightReservation);
}

void MobileSMSDocument.contentURL.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_47_11(a1);
  OUTLINED_FUNCTION_109_4(v1 + *(int *)(v2 + 48), v3, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightCarrier.getter()
{
  FlightReservation.flightCarrier.getter(type metadata accessor for FlightReservation);
}

void FlightReservation.flightCarrierCode.getter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

uint64_t FlightReservation.flightDepartureDateComponents.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_68_8();
  v0 = OUTLINED_FUNCTION_6_5();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t FlightReservation.flightDepartureDateComponents.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_306();
  OUTLINED_FUNCTION_68_8();
  v0 = OUTLINED_FUNCTION_232();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t (*FlightReservation.flightDepartureDateComponents.modify())()
{
  type metadata accessor for FlightReservation(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightReservation.flightArrivalDateComponents.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_68_8();
  v0 = OUTLINED_FUNCTION_6_5();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t FlightReservation.flightArrivalDateComponents.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_306();
  OUTLINED_FUNCTION_68_8();
  v0 = OUTLINED_FUNCTION_232();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t (*FlightReservation.flightArrivalDateComponents.modify())()
{
  type metadata accessor for FlightReservation(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightReservation.flightDepartureTimeZone.getter()
{
  EmailDocument.url.getter(type metadata accessor for FlightReservation);
}

void EmailDocument.url.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_54_9(a1);
  OUTLINED_FUNCTION_105_6(*(int *)(v1 + 68));
  OUTLINED_FUNCTION_12();
}

void FlightReservation.flightArrivalTimeZone.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_104_3();
  OUTLINED_FUNCTION_109_4(v0 + *(int *)(v1 + 72), v2, &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightArrivalAirportCode.getter()
{
  FlightReservation.flightArrivalAirportCode.getter(type metadata accessor for FlightReservation);
}

void FlightReservation.flightDepartureAirportCode.getter()
{
  FlightReservation.flightDepartureAirportCode.getter(type metadata accessor for FlightReservation);
}

void FlightReservation.flightArrivalAirportName.getter()
{
  OUTLINED_FUNCTION_104_3();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightDepartureAirportName.getter()
{
  OUTLINED_FUNCTION_104_3();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightConfirmationNumber.getter()
{
  OUTLINED_FUNCTION_104_3();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

uint64_t FlightReservation.flightPassengerNames.getter()
{
  OUTLINED_FUNCTION_104_3();
  return swift_bridgeObjectRetain();
}

uint64_t FlightReservation.flightPassengerSeatNumbers.getter()
{
  OUTLINED_FUNCTION_104_3();
  return swift_bridgeObjectRetain();
}

void FlightReservation.flightArrivalTerminal.getter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightArrivalTerminal.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_74_10();
  OUTLINED_FUNCTION_129_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightReservation.flightArrivalTerminal.modify())()
{
  type metadata accessor for FlightReservation(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightReservation.flightDepartureTerminal.getter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightDepartureTerminal.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_74_10();
  OUTLINED_FUNCTION_129_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightReservation.flightDepartureTerminal.modify())()
{
  type metadata accessor for FlightReservation(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightReservation.flightDepartureDateString.getter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightDepartureDateString.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_74_10();
  OUTLINED_FUNCTION_129_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightReservation.flightDepartureDateString.modify())()
{
  type metadata accessor for FlightReservation(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightReservation.flightArrivalDateString.getter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightReservation.flightArrivalDateString.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_74_10();
  OUTLINED_FUNCTION_129_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightReservation.flightArrivalDateString.modify())()
{
  type metadata accessor for FlightReservation(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightReservation.arrivalDate.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char v8;

  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_255();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_141_0();
  OUTLINED_FUNCTION_66_9();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_70();
  v6 = objc_msgSend((id)objc_opt_self(), sel_currentCalendar);
  OUTLINED_FUNCTION_265();

  v7 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_213(*(int *)(v7 + 72));
  OUTLINED_FUNCTION_22_2(v0, 1, v3);
  if (v8)
  {
    Calendar.timeZone.getter();
    outlined destroy of MobileSMSDocument?(v0, &demangling cache variable for type metadata for TimeZone?);
  }
  else
  {
    OUTLINED_FUNCTION_186();
  }
  Calendar.timeZone.setter();
  OUTLINED_FUNCTION_261();
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_43_0();
}

void FlightReservation.resolvedFlightJSON.getter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

uint64_t key path getter for FlightReservation.resolvedFlightJSON : FlightReservation@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for FlightReservation(0) + 120));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

void key path setter for FlightReservation.resolvedFlightJSON : FlightReservation()
{
  swift_bridgeObjectRetain();
  FlightReservation.resolvedFlightJSON.setter();
}

void FlightReservation.resolvedFlightJSON.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_18_2();
  v5 = OUTLINED_FUNCTION_78_10();
  OUTLINED_FUNCTION_66_9();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = OUTLINED_FUNCTION_68_8();
  v9 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_79_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Leg?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v10);
  v11 = OUTLINED_FUNCTION_91_2();
  v12 = type metadata accessor for FlightSnippet.Leg(v11);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_3_1();
  FlightReservation.leg.getter(v3);
  OUTLINED_FUNCTION_22_2(v3, 1, v12);
  if (v14)
  {
    outlined destroy of MobileSMSDocument?(v3, &demangling cache variable for type metadata for FlightSnippet.Leg?);
  }
  else
  {
    outlined init with take of FlightSnippet.Leg(v3, v1);
    v32 = *(int *)(v12 + 20);
    OUTLINED_FUNCTION_1_4();
    OUTLINED_FUNCTION_288();
    OUTLINED_FUNCTION_262();
    v31 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31(v8, v5);
    v15 = (int *)OUTLINED_FUNCTION_104_3();
    v16 = v0;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40);
    v18 = v33;
    v17(v0 + v15[16], v2, v33);
    v19 = v32;
    OUTLINED_FUNCTION_1_4();
    OUTLINED_FUNCTION_288();
    OUTLINED_FUNCTION_262();
    v31(v8, v5);
    v17(v0 + v15[15], v2, v18);
    v20 = *(_QWORD *)(v1 + v19);
    v21 = (uint64_t *)(v20
                    + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
    OUTLINED_FUNCTION_1_4();
    v23 = *v21;
    v22 = v21[1];
    v24 = (_QWORD *)(v16 + v15[26]);
    OUTLINED_FUNCTION_4_7();
    OUTLINED_FUNCTION_121();
    *v24 = v23;
    v24[1] = v22;
    OUTLINED_FUNCTION_1_4();
    v26 = *(_QWORD *)(v20 + 64);
    v25 = *(_QWORD *)(v20 + 72);
    OUTLINED_FUNCTION_4_7();
    outlined destroy of EmailDocument(v1, type metadata accessor for FlightSnippet.Leg);
    v27 = (_QWORD *)(v16 + v15[27]);
    swift_bridgeObjectRelease();
    *v27 = v26;
    v27[1] = v25;
    v28 = (_QWORD *)(v16 + v15[29]);
    swift_bridgeObjectRelease();
    *v28 = 0;
    v28[1] = 0;
    v29 = (_QWORD *)(v16 + v15[28]);
    swift_bridgeObjectRelease();
    *v29 = 0;
    v29[1] = 0;
  }
  OUTLINED_FUNCTION_43_0();
}

void (*FlightReservation.resolvedFlightJSON.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for FlightReservation(0);
  return FlightReservation.resolvedFlightJSON.modify;
}

void FlightReservation.resolvedFlightJSON.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    FlightReservation.resolvedFlightJSON.didset();
}

void FlightReservation.resolvedFlight.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_83();
  type metadata accessor for JSONDecodingOptions();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  if (*(_QWORD *)(v1 + *(int *)(type metadata accessor for FlightReservation(0) + 120) + 8))
  {
    v3 = type metadata accessor for FlightSnippet.Flight(0);
    swift_bridgeObjectRetain();
    JSONDecodingOptions.init()();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
    Message.init(jsonString:options:)();
    __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
    OUTLINED_FUNCTION_63();
  }
  else
  {
    v4 = type metadata accessor for FlightSnippet.Flight(0);
    __swift_storeEnumTagSinglePayload(v0, 1, 1, v4);
  }
}

void FlightReservation.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_18_2();
  v2 = v0;
  v3 = type metadata accessor for TimeZone();
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_92_6(v5, v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_18_1();
  v32 = v7;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_34_1();
  v31 = v9;
  v10 = OUTLINED_FUNCTION_5_2();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_59_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_18_1();
  v29 = v13;
  OUTLINED_FUNCTION_17_1();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v28 - v16;
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_250();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_83_3();
  OUTLINED_FUNCTION_56_0();
  v18 = (int *)type metadata accessor for FlightReservation(0);
  outlined init with copy of TimeZone?(v0 + v18[5], v0, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_22_2(v0, 1, v10);
  v30 = v11;
  if (v19)
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  else
  {
    OUTLINED_FUNCTION_241(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
    OUTLINED_FUNCTION_23_15(1u);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_116_3();
    OUTLINED_FUNCTION_204(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  OUTLINED_FUNCTION_4_7();
  v20 = OUTLINED_FUNCTION_6_5();
  specialized Dictionary<>.hash(into:)(v20, v21);
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_197();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_83_3();
  OUTLINED_FUNCTION_56_0();
  if (*(_QWORD *)(v0 + v18[9] + 8))
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_117();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_83_3();
  OUTLINED_FUNCTION_56_0();
  outlined init with copy of TimeZone?(v0 + v18[11], (uint64_t)v17, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_22_2((uint64_t)v17, 1, v10);
  if (v19)
  {
    OUTLINED_FUNCTION_23_15(0);
    v22 = v30;
  }
  else
  {
    v22 = v30;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v1, v17, v10);
    OUTLINED_FUNCTION_23_15(1u);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_116_3();
    OUTLINED_FUNCTION_204(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  }
  v23 = v29;
  outlined init with copy of TimeZone?(v2 + v18[12], v29, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_22_2(v23, 1, v10);
  if (v19)
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  else
  {
    OUTLINED_FUNCTION_241(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 32));
    OUTLINED_FUNCTION_23_15(1u);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_116_3();
    OUTLINED_FUNCTION_204(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  }
  v24 = v35;
  v25 = v31;
  if (*(_QWORD *)(v2 + v18[13] + 8))
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_115();
    OUTLINED_FUNCTION_231();
    OUTLINED_FUNCTION_96_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  if (*(_QWORD *)(v2 + v18[14] + 8))
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_115();
    OUTLINED_FUNCTION_231();
    OUTLINED_FUNCTION_96_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  v26 = OUTLINED_FUNCTION_68_8();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_230();
  outlined init with copy of TimeZone?(v2 + v18[17], v25, &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_22_2(v25, 1, v24);
  if (v19)
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  else
  {
    v26 = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v33, v25, v24);
    OUTLINED_FUNCTION_23_15(1u);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    OUTLINED_FUNCTION_198();
    OUTLINED_FUNCTION_52_5(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  }
  v27 = v32;
  outlined init with copy of TimeZone?(v2 + v18[18], v32, &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_22_2(v27, 1, v24);
  if (v19)
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  else
  {
    v26 = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v33, v27, v24);
    OUTLINED_FUNCTION_23_15(1u);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    OUTLINED_FUNCTION_198();
    OUTLINED_FUNCTION_52_5(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_197();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_197();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_133();
  if (v26)
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_56_0();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  if (*(_QWORD *)(v2 + v18[30] + 8))
  {
    OUTLINED_FUNCTION_23_15(1u);
    OUTLINED_FUNCTION_91_0();
    String.hash(into:)();
    OUTLINED_FUNCTION_121();
  }
  else
  {
    OUTLINED_FUNCTION_23_15(0);
  }
  OUTLINED_FUNCTION_43_0();
}

uint64_t FlightReservation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v12;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x73726577736E61 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x800000024335D230
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v10 = a1 == 0x754E746867696C66 && a2 == 0xEC0000007265626DLL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x800000024335CE40
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD000000000000014 && a2 == 0x800000024335D250
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else
            {
              v11 = a1 == 0x6143746867696C66 && a2 == 0xED00007265697272;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x800000024335CE60
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 10;
              }
              else if (a1 == 0xD00000000000001DLL && a2 == 0x800000024335D270
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 11;
              }
              else if (a1 == 0xD00000000000001BLL && a2 == 0x800000024335D290
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x800000024335D2B0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD000000000000015 && a2 == 0x800000024335D2D0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else if (a1 == 0xD000000000000018 && a2 == 0x800000024335AB00
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 15;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024335ABA0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 16;
              }
              else if (a1 == 0xD000000000000018 && a2 == 0x800000024335AAE0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 17;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024335ABC0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 18;
              }
              else if (a1 == 0xD000000000000018 && a2 == 0x800000024335CE80
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 19;
              }
              else if (a1 == 0xD000000000000014 && a2 == 0x800000024335CEA0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 20;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024335CEC0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 21;
              }
              else if (a1 == 0xD000000000000015 && a2 == 0x800000024335AB40
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 22;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x800000024335AB60
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 23;
              }
              else if (a1 == 0xD000000000000019 && a2 == 0x800000024335AB80
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 24;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x800000024335AB20
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 25;
              }
              else if (a1 == 0xD000000000000012 && a2 == 0x800000024335D2F0)
              {
                swift_bridgeObjectRelease();
                return 26;
              }
              else
              {
                v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v12 & 1) != 0)
                  return 26;
                else
                  return 27;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t FlightReservation.CodingKeys.init(intValue:)()
{
  return 27;
}

uint64_t FlightReservation.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24321292C + 4 * byte_243351B4F[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_24321292C()
{
  return 7107189;
}

uint64_t sub_24321293C()
{
  return 0x73726577736E61;
}

unint64_t sub_243212954()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FlightReservation.CodingKeys()
{
  unsigned __int8 *v0;

  return FlightReservation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FlightReservation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = FlightReservation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FlightReservation.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FlightReservation.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FlightReservation.CodingKeys()
{
  lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightReservation.CodingKeys()
{
  lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void FlightReservation.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD v10[2];
  int *v11;
  char v12;

  OUTLINED_FUNCTION_65_7();
  OUTLINED_FUNCTION_82_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FlightReservation.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  OUTLINED_FUNCTION_120_3();
  if (!v0)
  {
    v5 = type metadata accessor for FlightReservation(0);
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_86_8();
    OUTLINED_FUNCTION_166();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_85_6();
    v11 = (int *)v5;
    OUTLINED_FUNCTION_134_0();
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    v8 = v7;
    v10[1] = v6;
    OUTLINED_FUNCTION_85_6();
    v10[0] = v8;
    v9 = v11;
    OUTLINED_FUNCTION_120_3();
    OUTLINED_FUNCTION_6_20(5);
    OUTLINED_FUNCTION_120_3();
    OUTLINED_FUNCTION_86_8();
    OUTLINED_FUNCTION_86_8();
    OUTLINED_FUNCTION_6_20(9);
    OUTLINED_FUNCTION_110_2(v9[14]);
    OUTLINED_FUNCTION_6_20(10);
    OUTLINED_FUNCTION_68_8();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    OUTLINED_FUNCTION_85_6();
    OUTLINED_FUNCTION_85_6();
    OUTLINED_FUNCTION_175();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    OUTLINED_FUNCTION_114_5();
    OUTLINED_FUNCTION_114_5();
    OUTLINED_FUNCTION_6_20(15);
    OUTLINED_FUNCTION_6_20(16);
    OUTLINED_FUNCTION_110_2(v11[21]);
    OUTLINED_FUNCTION_6_20(17);
    OUTLINED_FUNCTION_110_2(v11[22]);
    OUTLINED_FUNCTION_6_20(18);
    OUTLINED_FUNCTION_110_2(v11[23]);
    OUTLINED_FUNCTION_6_20(19);
    OUTLINED_FUNCTION_142(v11[24]);
    v12 = 20;
    OUTLINED_FUNCTION_85_6();
    OUTLINED_FUNCTION_142(v11[25]);
    v12 = 21;
    OUTLINED_FUNCTION_85_6();
    OUTLINED_FUNCTION_110_2(v11[26]);
    OUTLINED_FUNCTION_6_20(22);
    OUTLINED_FUNCTION_110_2(v11[27]);
    OUTLINED_FUNCTION_6_20(23);
    OUTLINED_FUNCTION_110_2(v11[28]);
    OUTLINED_FUNCTION_6_20(24);
    OUTLINED_FUNCTION_110_2(v11[29]);
    OUTLINED_FUNCTION_6_20(25);
    OUTLINED_FUNCTION_110_2(v11[30]);
    OUTLINED_FUNCTION_6_20(26);
  }
  OUTLINED_FUNCTION_4_18((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_1_1();
}

void FlightReservation.hashValue.getter()
{
  OUTLINED_FUNCTION_4_13();
  FlightReservation.hash(into:)();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_107();
}

void FlightReservation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _BYTE *v46;
  unsigned __int16 v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _BYTE v103[12];
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t *v126;
  int *v127;
  char v128;

  OUTLINED_FUNCTION_65_7();
  v125 = v10;
  v14 = v13;
  v109 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_18_1();
  v110 = v17;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_34_1();
  v111 = v19;
  v20 = OUTLINED_FUNCTION_68_8();
  v123 = *(_QWORD *)(v20 - 8);
  v124 = v20;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_18_1();
  v112 = v22;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_34_1();
  v113 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_18_1();
  v114 = v26;
  OUTLINED_FUNCTION_17_1();
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = &v103[-v29];
  MEMORY[0x24BDAC7A8](v28);
  v32 = &v103[-v31];
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FlightReservation.CodingKeys>);
  v33 = *(_QWORD *)(v116 - 8);
  MEMORY[0x24BDAC7A8](v116);
  v34 = OUTLINED_FUNCTION_94_4();
  v35 = (int *)type metadata accessor for FlightReservation(v34);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_59_5();
  v37 = OUTLINED_FUNCTION_5_2();
  v38 = OUTLINED_FUNCTION_172();
  __swift_storeEnumTagSinglePayload(v38, v39, v40, v37);
  OUTLINED_FUNCTION_93_0(v35[26]);
  v121 = v41;
  OUTLINED_FUNCTION_93_0(v35[27]);
  v120 = v42;
  OUTLINED_FUNCTION_93_0(v35[28]);
  v119 = v43;
  OUTLINED_FUNCTION_93_0(v35[29]);
  v117 = v14;
  v118 = v44;
  v126 = v12;
  v127 = v35;
  OUTLINED_FUNCTION_93_0(v35[30]);
  v122 = v45;
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  v115 = v11;
  v46 = v125;
  OUTLINED_FUNCTION_280();
  if (v46)
  {
    v125 = v46;
    v47 = 2;
  }
  else
  {
    v49 = (uint64_t)v32;
    v125 = v30;
    v108 = v33;
    OUTLINED_FUNCTION_200();
    v50 = OUTLINED_FUNCTION_308();
    v59 = v126;
    *v126 = v50;
    v59[1] = v60;
    OUTLINED_FUNCTION_293();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v62 = v61;
    OUTLINED_FUNCTION_124_3();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v63 = v127;
    OUTLINED_FUNCTION_289(v49);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    v128 = 2;
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v107 = v62;
    *(uint64_t *)((char *)v59 + v63[6]) = a10;
    v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v128 = 3;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    v66 = v65;
    OUTLINED_FUNCTION_257();
    OUTLINED_FUNCTION_181();
    v105 = v66;
    v106 = v64;
    *(uint64_t *)((char *)v59 + v63[7]) = a10;
    v67 = OUTLINED_FUNCTION_144(4);
    v68 = (uint64_t *)((char *)v59 + v63[8]);
    *v68 = v67;
    v68[1] = v69;
    v70 = OUTLINED_FUNCTION_102_5(5);
    v71 = (uint64_t *)((char *)v59 + v63[9]);
    *v71 = v70;
    v71[1] = v72;
    v73 = OUTLINED_FUNCTION_144(6);
    v74 = (uint64_t *)((char *)v59 + v63[10]);
    *v74 = v73;
    v74[1] = v75;
    OUTLINED_FUNCTION_199(7);
    OUTLINED_FUNCTION_124_3();
    v76 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_276(v76, (uint64_t)v59 + v63[11], &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_199(8);
    OUTLINED_FUNCTION_124_3();
    v77 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_276(v77, (uint64_t)v59 + v63[12], &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_277();
    v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v125 = 0;
    OUTLINED_FUNCTION_137_1(v78, v79, v127[13]);
    v80 = OUTLINED_FUNCTION_15_13(10);
    v125 = 0;
    OUTLINED_FUNCTION_137_1(v80, v81, v127[14]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    v82 = v125;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v125 = v82;
    if (v82)
    {
      OUTLINED_FUNCTION_7_20();
      v47 = 2047;
    }
    else
    {
      v83 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 32);
      v83((char *)v126 + v127[15], v113, v124);
      OUTLINED_FUNCTION_199(12);
      v84 = v115;
      v85 = v125;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v125 = v85;
      if (!v85)
      {
        v83((char *)v126 + v127[16], v112, v124);
        v86 = OUTLINED_FUNCTION_175();
        LOBYTE(a10) = 13;
        lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
        OUTLINED_FUNCTION_162();
        v125 = 0;
        outlined init with take of Date?(v111, (uint64_t)v126 + v127[17], &demangling cache variable for type metadata for TimeZone?);
        OUTLINED_FUNCTION_199(14);
        OUTLINED_FUNCTION_162();
        v125 = 0;
        outlined init with take of Date?(v110, (uint64_t)v126 + v127[18], &demangling cache variable for type metadata for TimeZone?);
        v87 = OUTLINED_FUNCTION_15_13(15);
        v125 = 0;
        v88 = (uint64_t *)((char *)v126 + v127[19]);
        *v88 = v87;
        v88[1] = v89;
        v90 = OUTLINED_FUNCTION_15_13(16);
        v125 = 0;
        OUTLINED_FUNCTION_137_1(v90, v91, v127[20]);
        v92 = OUTLINED_FUNCTION_15_13(17);
        v125 = 0;
        OUTLINED_FUNCTION_137_1(v92, v93, v127[21]);
        v94 = OUTLINED_FUNCTION_15_13(18);
        v125 = 0;
        OUTLINED_FUNCTION_137_1(v94, v95, v127[22]);
        v96 = OUTLINED_FUNCTION_15_13(19);
        v125 = 0;
        OUTLINED_FUNCTION_137_1(v96, v97, v127[23]);
        OUTLINED_FUNCTION_84_5(20);
        v125 = 0;
        *(uint64_t *)((char *)v126 + v127[24]) = a10;
        OUTLINED_FUNCTION_84_5(21);
        v125 = 0;
        *(uint64_t *)((char *)v126 + v127[25]) = a10;
        OUTLINED_FUNCTION_15_13(22);
        v125 = 0;
        OUTLINED_FUNCTION_170();
        v98 = v121;
        OUTLINED_FUNCTION_214();
        *v98 = v84;
        v98[1] = v86;
        OUTLINED_FUNCTION_15_13(23);
        v125 = 0;
        OUTLINED_FUNCTION_170();
        v99 = v120;
        OUTLINED_FUNCTION_214();
        *v99 = v84;
        v99[1] = v86;
        OUTLINED_FUNCTION_15_13(24);
        v125 = 0;
        OUTLINED_FUNCTION_170();
        v100 = v119;
        OUTLINED_FUNCTION_214();
        *v100 = v84;
        v100[1] = v86;
        OUTLINED_FUNCTION_15_13(25);
        v125 = 0;
        OUTLINED_FUNCTION_170();
        v101 = v118;
        OUTLINED_FUNCTION_214();
        *v101 = v84;
        v101[1] = v86;
        OUTLINED_FUNCTION_15_13(26);
        v125 = 0;
        OUTLINED_FUNCTION_170();
        OUTLINED_FUNCTION_7_20();
        v102 = v122;
        swift_bridgeObjectRelease();
        *v102 = v84;
        v102[1] = v86;
        OUTLINED_FUNCTION_77_6((uint64_t)v126, v109);
        OUTLINED_FUNCTION_36_11((uint64_t)v117);
        goto LABEL_49;
      }
      OUTLINED_FUNCTION_7_20();
      v47 = 4095;
    }
  }
  v48 = v47 | 0x7C00000;
  v51 = v126;
  v52 = v127;
  v53 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
  v54 = (v48 >> 3) & 1;
  v55 = (v48 >> 4) & 1;
  v56 = (v48 >> 5) & 1;
  v57 = (v48 >> 6) & 1;
  v58 = (v48 >> 7) & 1;
  v104 = (v48 >> 8) & 1;
  LODWORD(v105) = (v48 >> 9) & 1;
  LODWORD(v106) = (v48 >> 10) & 1;
  LODWORD(v107) = (v48 >> 11) & 1;
  LODWORD(v108) = (v48 >> 12) & 1;
  LODWORD(v109) = (v48 >> 13) & 1;
  LODWORD(v110) = (v48 >> 14) & 1;
  LODWORD(v111) = (v48 >> 15) & 1;
  LODWORD(v112) = HIWORD(v48) & 1;
  LODWORD(v113) = (v48 >> 17) & 1;
  LODWORD(v114) = (v48 >> 18) & 1;
  LODWORD(v115) = (v48 >> 19) & 1;
  LODWORD(v116) = (v48 >> 20) & 1;
  LODWORD(v117) = (v48 >> 21) & 1;
  if ((v48 & 1) != 0)
    v53 = OUTLINED_FUNCTION_115_2();
  OUTLINED_FUNCTION_252(v53, &demangling cache variable for type metadata for URL?);
  if (((v48 >> 2) & 1) != 0)
  {
    OUTLINED_FUNCTION_59_9();
    if (!v54)
      goto LABEL_9;
  }
  else if (!v54)
  {
LABEL_9:
    if (v55)
      goto LABEL_10;
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_59_9();
  if (v55)
  {
LABEL_10:
    OUTLINED_FUNCTION_16_18();
    if (!v56)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  if (!v56)
  {
LABEL_11:
    if (v57)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  OUTLINED_FUNCTION_16_18();
  if (v57)
  {
LABEL_12:
    OUTLINED_FUNCTION_16_18();
    if (!v58)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_18:
  if (v58)
LABEL_19:
    outlined destroy of MobileSMSDocument?((uint64_t)v51 + v52[11], &demangling cache variable for type metadata for URL?);
LABEL_20:
  if (v104)
    outlined destroy of MobileSMSDocument?((uint64_t)v51 + v52[12], &demangling cache variable for type metadata for URL?);
  if ((_DWORD)v105)
    OUTLINED_FUNCTION_16_18();
  if ((_DWORD)v106)
    OUTLINED_FUNCTION_16_18();
  if ((_DWORD)v107)
    OUTLINED_FUNCTION_40(v123);
  if ((_DWORD)v108)
    OUTLINED_FUNCTION_40(v123);
  if ((_DWORD)v109)
    outlined destroy of MobileSMSDocument?((uint64_t)v51 + v52[17], &demangling cache variable for type metadata for TimeZone?);
  if ((_DWORD)v110)
    outlined destroy of MobileSMSDocument?((uint64_t)v51 + v52[18], &demangling cache variable for type metadata for TimeZone?);
  if ((_DWORD)v111)
    OUTLINED_FUNCTION_16_18();
  if ((_DWORD)v112)
    OUTLINED_FUNCTION_16_18();
  if ((_DWORD)v113)
    OUTLINED_FUNCTION_16_18();
  if ((_DWORD)v114)
    OUTLINED_FUNCTION_16_18();
  if ((_DWORD)v115)
    OUTLINED_FUNCTION_16_18();
  if ((_DWORD)v116)
    OUTLINED_FUNCTION_59_9();
  if ((_DWORD)v117)
    OUTLINED_FUNCTION_59_9();
  OUTLINED_FUNCTION_16_18();
  OUTLINED_FUNCTION_16_18();
  OUTLINED_FUNCTION_16_18();
  OUTLINED_FUNCTION_16_18();
  OUTLINED_FUNCTION_16_18();
LABEL_49:
  OUTLINED_FUNCTION_1_1();
}

void FlightReservation.init(id:url:answers:answerAttributes:bundleId:mailMessageId:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDepartureDateComponents:flightArrivalDateComponents:flightDepartureTimeZone:flightArrivalTimeZone:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportName:flightDepartureAirportName:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightDepartureDateString:flightArrivalDateString:resolvedFlightJSON:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, char *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  int *v40;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;

  *(_QWORD *)a7 = a1;
  *((_QWORD *)a7 + 1) = a2;
  OUTLINED_FUNCTION_104_3();
  OUTLINED_FUNCTION_242();
  OUTLINED_FUNCTION_259(a3, v42);
  *(_QWORD *)&a7[v40[6]] = a4;
  *(_QWORD *)&a7[v40[7]] = a5;
  OUTLINED_FUNCTION_248(&a7[v40[8]]);
  *v43 = a6;
  v43[1] = a8;
  v44 = &a7[v40[10]];
  *(_QWORD *)v44 = a9;
  *((_QWORD *)v44 + 1) = a10;
  OUTLINED_FUNCTION_259(a11, (uint64_t)&a7[v40[11]]);
  OUTLINED_FUNCTION_259(a12, (uint64_t)&a7[v40[12]]);
  v45 = &a7[v40[13]];
  *(_QWORD *)v45 = a13;
  *((_QWORD *)v45 + 1) = a14;
  v46 = &a7[v40[14]];
  *(_QWORD *)v46 = a15;
  *((_QWORD *)v46 + 1) = a16;
  v47 = &a7[v40[15]];
  v48 = OUTLINED_FUNCTION_68_8();
  v49 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 32);
  v49(v47, a17, v48);
  v49(&a7[v40[16]], a18, v48);
  OUTLINED_FUNCTION_251(a19, (uint64_t)&a7[v40[17]]);
  OUTLINED_FUNCTION_251(a20, (uint64_t)&a7[v40[18]]);
  v50 = &a7[v40[19]];
  *(_QWORD *)v50 = a21;
  *((_QWORD *)v50 + 1) = a22;
  v51 = &a7[v40[20]];
  *(_QWORD *)v51 = a23;
  *((_QWORD *)v51 + 1) = a24;
  v52 = &a7[v40[21]];
  *(_QWORD *)v52 = a25;
  *((_QWORD *)v52 + 1) = a26;
  v53 = &a7[v40[22]];
  *(_QWORD *)v53 = a27;
  *((_QWORD *)v53 + 1) = a28;
  v54 = &a7[v40[23]];
  *(_QWORD *)v54 = a29;
  *((_QWORD *)v54 + 1) = a30;
  *(_QWORD *)&a7[v40[24]] = a31;
  *(_QWORD *)&a7[v40[25]] = a32;
  v55 = &a7[v40[26]];
  *(_QWORD *)v55 = a33;
  *((_QWORD *)v55 + 1) = a34;
  v56 = &a7[v40[27]];
  *(_QWORD *)v56 = a35;
  *((_QWORD *)v56 + 1) = a36;
  v57 = &a7[v40[28]];
  *(_QWORD *)v57 = a37;
  *((_QWORD *)v57 + 1) = a38;
  v58 = &a7[v40[29]];
  *(_QWORD *)v58 = a39;
  *((_QWORD *)v58 + 1) = a40;
  OUTLINED_FUNCTION_304(v40[30]);
  OUTLINED_FUNCTION_152();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlightReservation()
{
  Hasher.init(_seed:)();
  FlightReservation.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance FlightReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  FlightReservation.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance FlightReservation()
{
  FlightReservation.encode(to:)();
}

void HotelReservation.url.getter()
{
  FlightReservation.url.getter(type metadata accessor for HotelReservation);
}

void FlightReservation.url.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_47_11(a1);
  OUTLINED_FUNCTION_109_4(v1 + *(int *)(v2 + 20), v3, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

uint64_t HotelReservation.url.setter(uint64_t a1)
{
  return FlightReservation.url.setter(a1, type metadata accessor for HotelReservation);
}

uint64_t FlightReservation.url.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_305(a1, a2);
  OUTLINED_FUNCTION_233();
  return OUTLINED_FUNCTION_122_1(v2, v3);
}

uint64_t (*HotelReservation.url.modify())()
{
  type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_233();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t HotelReservation.answers.getter()
{
  return FlightReservation.answers.getter(type metadata accessor for HotelReservation);
}

uint64_t FlightReservation.answers.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  return swift_bridgeObjectRetain();
}

uint64_t HotelReservation.answerAttributes.getter()
{
  return FlightReservation.answerAttributes.getter(type metadata accessor for HotelReservation);
}

uint64_t FlightReservation.answerAttributes.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  return swift_bridgeObjectRetain();
}

void HotelReservation.bundleId.getter()
{
  WalletTransaction.city.getter(type metadata accessor for HotelReservation);
}

void HotelReservation.mailMessageId.getter()
{
  CalendarEvent.locationName.getter(type metadata accessor for HotelReservation);
}

void HotelReservation.hotelReservationId.getter()
{
  WalletTransaction.country.getter(type metadata accessor for HotelReservation);
}

void WalletTransaction.country.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void HotelReservation.hotelUnderName.getter()
{
  HotelReservation.hotelUnderName.getter(type metadata accessor for HotelReservation);
}

uint64_t HotelReservation.hotelCheckinDateComponents.getter()
{
  return EmailDocument.date.getter(type metadata accessor for HotelReservation);
}

uint64_t EmailDocument.date.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(OUTLINED_FUNCTION_54_9(a1) + 48);
  v5 = v1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
}

uint64_t HotelReservation.hotelCheckoutDateComponents.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v0 = OUTLINED_FUNCTION_83();
  type metadata accessor for HotelReservation(v0);
  OUTLINED_FUNCTION_68_8();
  v1 = OUTLINED_FUNCTION_6_5();
  return OUTLINED_FUNCTION_57_6(v1, v2, v3, v4);
}

void HotelReservation.hotelTimeZone.getter()
{
  HotelReservation.hotelTimeZone.getter(type metadata accessor for HotelReservation);
}

void HotelReservation.hotelReservationForName.getter()
{
  HotelReservation.hotelReservationForName.getter(type metadata accessor for HotelReservation);
}

void HotelReservation.hotelModifyReservationUrl.getter()
{
  HotelReservation.hotelModifyReservationUrl.getter(type metadata accessor for HotelReservation);
}

void HotelReservation.hotelReservationForTelephone.getter()
{
  HotelReservation.hotelReservationForTelephone.getter(type metadata accessor for HotelReservation);
}

void HotelReservation.hotelReservationForAddress.getter()
{
  HotelReservation.hotelReservationForAddress.getter(type metadata accessor for HotelReservation);
}

void HotelReservation.hotelCheckinDateString.getter()
{
  FlightReservation.flightArrivalAirportCode.getter(type metadata accessor for HotelReservation);
}

void FlightReservation.flightArrivalAirportCode.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void HotelReservation.hotelCheckoutDateString.getter()
{
  FlightReservation.flightDepartureAirportCode.getter(type metadata accessor for HotelReservation);
}

void FlightReservation.flightDepartureAirportCode.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

uint64_t HotelReservation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v12;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x73726577736E61 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x800000024335D230
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0xD000000000000012 && a2 == 0x800000024335CEE0
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            v10 = a1 == 0x646E556C65746F68 && a2 == 0xEE00656D614E7265;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024335D310
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else if (a1 == 0xD00000000000001BLL && a2 == 0x800000024335D330
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else
            {
              v11 = a1 == 0x6D69546C65746F68 && a2 == 0xED0000656E6F5A65;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 10;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x800000024335CF40
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 11;
              }
              else if (a1 == 0xD000000000000019 && a2 == 0x800000024335CF60
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD00000000000001CLL && a2 == 0x800000024335CF80
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024335CFA0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else if (a1 == 0xD000000000000016 && a2 == 0x800000024335CF00
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 15;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x800000024335CF20)
              {
                swift_bridgeObjectRelease();
                return 16;
              }
              else
              {
                v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v12 & 1) != 0)
                  return 16;
                else
                  return 17;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t HotelReservation.CodingKeys.init(intValue:)()
{
  return 17;
}

uint64_t HotelReservation.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2432149C0 + 4 * byte_243351B6A[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_2432149C0()
{
  return 7107189;
}

uint64_t sub_2432149D0()
{
  return 0x73726577736E61;
}

unint64_t sub_2432149E8()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HotelReservation.CodingKeys()
{
  unsigned __int8 *v0;

  return HotelReservation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HotelReservation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = HotelReservation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance HotelReservation.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = HotelReservation.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HotelReservation.CodingKeys()
{
  lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HotelReservation.CodingKeys()
{
  lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void HotelReservation.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_65_7();
  OUTLINED_FUNCTION_82_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HotelReservation.CodingKeys>);
  OUTLINED_FUNCTION_66_9();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  OUTLINED_FUNCTION_33_8();
  if (!v0)
  {
    type metadata accessor for HotelReservation(0);
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_27_12();
    OUTLINED_FUNCTION_166();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_134_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_33_8();
    OUTLINED_FUNCTION_1_21(5);
    OUTLINED_FUNCTION_1_21(6);
    OUTLINED_FUNCTION_1_21(7);
    OUTLINED_FUNCTION_163();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    OUTLINED_FUNCTION_188();
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_235(9);
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_161_0();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    OUTLINED_FUNCTION_27_12();
    OUTLINED_FUNCTION_1_21(11);
    OUTLINED_FUNCTION_1_21(12);
    OUTLINED_FUNCTION_1_21(13);
    OUTLINED_FUNCTION_1_21(14);
    OUTLINED_FUNCTION_1_21(15);
    OUTLINED_FUNCTION_1_21(16);
  }
  OUTLINED_FUNCTION_71_8((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_100_5();
  OUTLINED_FUNCTION_1_1();
}

void HotelReservation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;

  OUTLINED_FUNCTION_65_7();
  v15 = v14;
  v59 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_0_3();
  v60 = v18;
  v64 = OUTLINED_FUNCTION_68_8();
  v63 = *(_QWORD *)(v64 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_18_1();
  v61 = v20;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_34_1();
  v62 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_44_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HotelReservation.CodingKeys>);
  OUTLINED_FUNCTION_211();
  MEMORY[0x24BDAC7A8](v24);
  v25 = OUTLINED_FUNCTION_64_6();
  type metadata accessor for HotelReservation(v25);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_78_4();
  v65 = v27;
  v28 = OUTLINED_FUNCTION_5_2();
  v29 = OUTLINED_FUNCTION_172();
  __swift_storeEnumTagSinglePayload(v29, v30, v31, v28);
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  OUTLINED_FUNCTION_302();
  OUTLINED_FUNCTION_274();
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    OUTLINED_FUNCTION_271();
    OUTLINED_FUNCTION_252(v32, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    OUTLINED_FUNCTION_200();
    *v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v12[1] = v33;
    OUTLINED_FUNCTION_293();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_191();
    OUTLINED_FUNCTION_99_4();
    OUTLINED_FUNCTION_289(v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    OUTLINED_FUNCTION_166();
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_282();
    OUTLINED_FUNCTION_76_7();
    *(uint64_t *)((char *)v12 + v65[6]) = a10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_165();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_221();
    OUTLINED_FUNCTION_181();
    *(uint64_t *)((char *)v12 + v65[7]) = a10;
    v34 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_292(v34, v35, v65[8]);
    v36 = OUTLINED_FUNCTION_145_0(5);
    OUTLINED_FUNCTION_292(v36, v37, v65[9]);
    v38 = OUTLINED_FUNCTION_145_0(6);
    OUTLINED_FUNCTION_292(v38, v39, v65[10]);
    v40 = OUTLINED_FUNCTION_145_0(7);
    OUTLINED_FUNCTION_292(v40, v41, v65[11]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    OUTLINED_FUNCTION_181();
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 32);
    v42((char *)v12 + v65[12], v62, v64);
    OUTLINED_FUNCTION_199(9);
    OUTLINED_FUNCTION_76_7();
    v42((char *)v12 + v65[13], v61, v64);
    OUTLINED_FUNCTION_175();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    OUTLINED_FUNCTION_191();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_314();
    outlined init with take of Date?(v60, v43, &demangling cache variable for type metadata for TimeZone?);
    v44 = OUTLINED_FUNCTION_32_7(11);
    v45 = (uint64_t *)((char *)v12 + v65[15]);
    *v45 = v44;
    v45[1] = v46;
    v47 = OUTLINED_FUNCTION_32_7(12);
    v48 = (uint64_t *)((char *)v12 + v65[16]);
    *v48 = v47;
    v48[1] = v49;
    v50 = OUTLINED_FUNCTION_32_7(13);
    v51 = (uint64_t *)((char *)v12 + v65[17]);
    *v51 = v50;
    v51[1] = v52;
    v53 = OUTLINED_FUNCTION_32_7(14);
    OUTLINED_FUNCTION_137_1(v53, v54, v65[18]);
    v55 = OUTLINED_FUNCTION_32_7(15);
    v56 = (uint64_t *)((char *)v12 + v65[19]);
    *v56 = v55;
    v56[1] = v57;
    OUTLINED_FUNCTION_32_7(16);
    OUTLINED_FUNCTION_170();
    OUTLINED_FUNCTION_37_6();
    v58 = (uint64_t *)((char *)v12 + v65[20]);
    *v58 = v13;
    v58[1] = v64;
    OUTLINED_FUNCTION_77_6((uint64_t)v12, v59);
    OUTLINED_FUNCTION_36_11(0);
  }
  OUTLINED_FUNCTION_182();
  OUTLINED_FUNCTION_1_1();
}

void HotelReservation.init(id:url:answers:answerAttributes:bundleId:mailMessageId:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelTimeZone:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelCheckinDateString:hotelCheckoutDateString:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int *v27;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  *(_QWORD *)a9 = a1;
  *((_QWORD *)a9 + 1) = a2;
  type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_242();
  outlined init with take of Date?(a3, v32, &demangling cache variable for type metadata for URL?);
  *(_QWORD *)&a9[v27[6]] = a4;
  *(_QWORD *)&a9[v27[7]] = a5;
  OUTLINED_FUNCTION_248(&a9[v27[8]]);
  *v33 = a8;
  v33[1] = a10;
  v34 = &a9[v27[10]];
  *(_QWORD *)v34 = a11;
  *((_QWORD *)v34 + 1) = a12;
  v35 = &a9[v27[11]];
  *(_QWORD *)v35 = a13;
  *((_QWORD *)v35 + 1) = a14;
  v36 = &a9[v27[12]];
  v37 = OUTLINED_FUNCTION_68_8();
  v38 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
  v38(v36, a15, v37);
  v38(&a9[v27[13]], a16, v37);
  outlined init with take of Date?(a17, (uint64_t)&a9[v27[14]], &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_58_8(v39, v40, v41, v42, v43, v44, v45, v46, v50, a6, a7, a15, a8, a16, a17, a18, a19, a20, a21,
    a22,
    a23);
  *v47 = v48;
  v47[1] = a25;
  v49 = &a9[v27[19]];
  *(_QWORD *)v49 = a26;
  *((_QWORD *)v49 + 1) = a27;
  OUTLINED_FUNCTION_304(v27[20]);
}

void protocol witness for Decodable.init(from:) in conformance HotelReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  HotelReservation.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance HotelReservation()
{
  HotelReservation.encode(to:)();
}

void RestaurantReservation.url.getter()
{
  FlightReservation.url.getter(type metadata accessor for RestaurantReservation);
}

uint64_t RestaurantReservation.url.setter(uint64_t a1)
{
  return FlightReservation.url.setter(a1, type metadata accessor for RestaurantReservation);
}

uint64_t (*RestaurantReservation.url.modify())()
{
  type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_233();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t RestaurantReservation.answers.getter()
{
  return FlightReservation.answers.getter(type metadata accessor for RestaurantReservation);
}

uint64_t RestaurantReservation.answerAttributes.getter()
{
  return FlightReservation.answerAttributes.getter(type metadata accessor for RestaurantReservation);
}

void RestaurantReservation.bundleId.getter()
{
  WalletTransaction.city.getter(type metadata accessor for RestaurantReservation);
}

void RestaurantReservation.mailMessageId.getter()
{
  CalendarEvent.locationName.getter(type metadata accessor for RestaurantReservation);
}

void RestaurantReservation.restaurantReservationId.getter()
{
  WalletTransaction.country.getter(type metadata accessor for RestaurantReservation);
}

void RestaurantReservation.restaurantUnderName.getter()
{
  HotelReservation.hotelUnderName.getter(type metadata accessor for RestaurantReservation);
}

void HotelReservation.hotelUnderName.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

uint64_t RestaurantReservation.restaurantStartDateComponents.getter()
{
  return EmailDocument.date.getter(type metadata accessor for RestaurantReservation);
}

void RestaurantReservation.restaurantPartySize.getter()
{
  FlightReservation.flightCarrier.getter(type metadata accessor for RestaurantReservation);
}

void FlightReservation.flightCarrier.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void RestaurantReservation.restaurantTimeZone.getter()
{
  HotelReservation.hotelTimeZone.getter(type metadata accessor for RestaurantReservation);
}

void HotelReservation.hotelTimeZone.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_47_11(a1);
  OUTLINED_FUNCTION_109_4(v1 + *(int *)(v2 + 56), v3, &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_5();
}

void RestaurantReservation.restaurantReservationForName.getter()
{
  HotelReservation.hotelReservationForName.getter(type metadata accessor for RestaurantReservation);
}

void HotelReservation.hotelReservationForName.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void RestaurantReservation.restaurantReservationForTelephone.getter()
{
  HotelReservation.hotelModifyReservationUrl.getter(type metadata accessor for RestaurantReservation);
}

void HotelReservation.hotelModifyReservationUrl.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void RestaurantReservation.restaurantReservationForAddress.getter()
{
  HotelReservation.hotelReservationForTelephone.getter(type metadata accessor for RestaurantReservation);
}

void HotelReservation.hotelReservationForTelephone.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void RestaurantReservation.restaurantStartDateString.getter()
{
  HotelReservation.hotelReservationForAddress.getter(type metadata accessor for RestaurantReservation);
}

void HotelReservation.hotelReservationForAddress.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

uint64_t RestaurantReservation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v10;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x73726577736E61 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x800000024335D230
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0xD000000000000017 && a2 == 0x800000024335CFC0
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else if (a1 == 0xD000000000000013 && a2 == 0x800000024335CFE0
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD00000000000001DLL && a2 == 0x800000024335D350
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else if (a1 == 0xD000000000000013 && a2 == 0x800000024335D020
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000012 && a2 == 0x800000024335D370
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else if (a1 == 0xD00000000000001CLL && a2 == 0x800000024335D040
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 11;
          }
          else if (a1 == 0xD000000000000021 && a2 == 0x800000024335D060
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 12;
          }
          else if (a1 == 0xD00000000000001FLL && a2 == 0x800000024335D090
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 13;
          }
          else if (a1 == 0xD000000000000019 && a2 == 0x800000024335D000)
          {
            swift_bridgeObjectRelease();
            return 14;
          }
          else
          {
            v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v10 & 1) != 0)
              return 14;
            else
              return 15;
          }
        }
      }
    }
  }
}

uint64_t RestaurantReservation.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2432160F4 + 4 * byte_243351B7B[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_2432160F4()
{
  return 7107189;
}

uint64_t sub_243216104()
{
  return 0x73726577736E61;
}

unint64_t sub_24321611C()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RestaurantReservation.CodingKeys()
{
  unsigned __int8 *v0;

  return RestaurantReservation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RestaurantReservation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = RestaurantReservation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RestaurantReservation.CodingKeys()
{
  lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RestaurantReservation.CodingKeys()
{
  lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void RestaurantReservation.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_82_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RestaurantReservation.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  LOBYTE(v8) = 0;
  OUTLINED_FUNCTION_33_8();
  if (!v0)
  {
    v6 = type metadata accessor for RestaurantReservation(0);
    LOBYTE(v8) = 1;
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_27_12();
    v8 = *(_QWORD *)(v1 + *(int *)(v6 + 24));
    HIBYTE(v7) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_9_16();
    v8 = *(_QWORD *)(v1 + *(int *)(v6 + 28));
    HIBYTE(v7) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_9_16();
    LOBYTE(v8) = 4;
    OUTLINED_FUNCTION_33_8();
    OUTLINED_FUNCTION_1_21(5);
    OUTLINED_FUNCTION_1_21(6);
    OUTLINED_FUNCTION_1_21(7);
    OUTLINED_FUNCTION_163();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_1_21(9);
    OUTLINED_FUNCTION_161_0();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    OUTLINED_FUNCTION_27_12();
    OUTLINED_FUNCTION_1_21(11);
    OUTLINED_FUNCTION_1_21(12);
    OUTLINED_FUNCTION_1_21(13);
    OUTLINED_FUNCTION_1_21(14);
  }
  OUTLINED_FUNCTION_71_8((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_56_5();
}

void RestaurantReservation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t *v58;

  OUTLINED_FUNCTION_65_7();
  v14 = v13;
  v54 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_0_3();
  v55 = v17;
  v18 = OUTLINED_FUNCTION_68_8();
  v52 = *(_QWORD *)(v18 - 8);
  v53 = v18;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_0_3();
  v56 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_32_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RestaurantReservation.CodingKeys>);
  OUTLINED_FUNCTION_220();
  MEMORY[0x24BDAC7A8](v22);
  v23 = OUTLINED_FUNCTION_64_6();
  type metadata accessor for RestaurantReservation(v23);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_128_1();
  v57 = v25;
  v58 = v26;
  v27 = (uint64_t)v26 + v25[5];
  v28 = OUTLINED_FUNCTION_5_2();
  __swift_storeEnumTagSinglePayload(v27, 1, 1, v28);
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  OUTLINED_FUNCTION_302();
  OUTLINED_FUNCTION_294();
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    OUTLINED_FUNCTION_271();
    OUTLINED_FUNCTION_252(v30, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    OUTLINED_FUNCTION_200();
    *v58 = KeyedDecodingContainer.decode(_:forKey:)();
    v58[1] = v29;
    OUTLINED_FUNCTION_293();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_124_3();
    OUTLINED_FUNCTION_99_4();
    OUTLINED_FUNCTION_289(v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    OUTLINED_FUNCTION_166();
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_282();
    OUTLINED_FUNCTION_76_7();
    *(uint64_t *)((char *)v58 + v57[6]) = a10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_165();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_221();
    OUTLINED_FUNCTION_124_3();
    OUTLINED_FUNCTION_181();
    *(uint64_t *)((char *)v58 + v57[7]) = a10;
    v31 = OUTLINED_FUNCTION_144(4);
    OUTLINED_FUNCTION_299(v31, v32, v57[8]);
    v33 = OUTLINED_FUNCTION_102_5(5);
    OUTLINED_FUNCTION_299(v33, v34, v57[9]);
    v35 = OUTLINED_FUNCTION_102_5(6);
    OUTLINED_FUNCTION_299(v35, v36, v57[10]);
    v37 = OUTLINED_FUNCTION_102_5(7);
    OUTLINED_FUNCTION_299(v37, v38, v57[11]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    OUTLINED_FUNCTION_191();
    OUTLINED_FUNCTION_181();
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))((char *)v58 + v57[12], v56, v53);
    OUTLINED_FUNCTION_277();
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_137_1(v39, v40, v57[13]);
    OUTLINED_FUNCTION_175();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    OUTLINED_FUNCTION_191();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_314();
    outlined init with take of Date?(v55, v41, &demangling cache variable for type metadata for TimeZone?);
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v43 = (uint64_t *)((char *)v58 + v57[15]);
    *v43 = v42;
    v43[1] = v44;
    v45 = OUTLINED_FUNCTION_118_1(12);
    v46 = (uint64_t *)((char *)v58 + v57[16]);
    *v46 = v45;
    v46[1] = v47;
    v48 = OUTLINED_FUNCTION_118_1(13);
    v49 = (uint64_t *)((char *)v58 + v57[17]);
    *v49 = v48;
    v49[1] = v50;
    OUTLINED_FUNCTION_118_1(14);
    OUTLINED_FUNCTION_170();
    OUTLINED_FUNCTION_62_7();
    v51 = (uint64_t *)((char *)v58 + v57[18]);
    *v51 = v12;
    v51[1] = 0;
    OUTLINED_FUNCTION_77_6((uint64_t)v58, v54);
    OUTLINED_FUNCTION_36_11(0);
  }
  OUTLINED_FUNCTION_182();
  OUTLINED_FUNCTION_1_1();
}

void RestaurantReservation.init(id:url:answers:answerAttributes:bundleId:mailMessageId:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantTimeZone:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:restaurantStartDateString:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int *v26;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  *a9 = a1;
  a9[1] = a2;
  type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_242();
  outlined init with take of Date?(a3, v31, &demangling cache variable for type metadata for URL?);
  *(_QWORD *)((char *)a9 + v26[6]) = a4;
  *(_QWORD *)((char *)a9 + v26[7]) = a5;
  OUTLINED_FUNCTION_248((_QWORD *)((char *)a9 + v26[8]));
  *v32 = a8;
  v32[1] = a10;
  v33 = (_QWORD *)((char *)a9 + v26[10]);
  *v33 = a11;
  v33[1] = a12;
  v34 = (_QWORD *)((char *)a9 + v26[11]);
  *v34 = a13;
  v34[1] = a14;
  v35 = (char *)a9 + v26[12];
  v36 = OUTLINED_FUNCTION_68_8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v35, a15, v36);
  v37 = (_QWORD *)((char *)a9 + v26[13]);
  *v37 = a16;
  v37[1] = a17;
  outlined init with take of Date?(a18, (uint64_t)a9 + v26[14], &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_58_8(v38, v39, v40, v41, v42, v43, v44, v45, a6, a7, a8, a15, a16, a17, a18, a19, a20, a21, a22,
    a23,
    a24);
  *v46 = v47;
  v46[1] = a26;
  OUTLINED_FUNCTION_159_0();
}

void protocol witness for Decodable.init(from:) in conformance RestaurantReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  RestaurantReservation.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance RestaurantReservation()
{
  RestaurantReservation.encode(to:)();
}

void Answer.url.getter()
{
  FlightReservation.url.getter(type metadata accessor for Answer);
}

uint64_t Answer.url.setter(uint64_t a1)
{
  return FlightReservation.url.setter(a1, type metadata accessor for Answer);
}

uint64_t (*Answer.url.modify())()
{
  OUTLINED_FUNCTION_26_10();
  OUTLINED_FUNCTION_233();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void Answer.answer.getter()
{
  type metadata accessor for Answer(0);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void Answer.answer.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  type metadata accessor for Answer(0);
  OUTLINED_FUNCTION_129_0();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*Answer.answer.modify())()
{
  type metadata accessor for Answer(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t Answer.metadata.getter()
{
  return FlightReservation.answerAttributes.getter(type metadata accessor for Answer);
}

void Answer.metadata.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(int *)(OUTLINED_FUNCTION_155() + 28);
  OUTLINED_FUNCTION_311();
  *(_QWORD *)(v1 + v2) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*Answer.metadata.modify())()
{
  OUTLINED_FUNCTION_26_10();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t Answer.sourceResults.getter()
{
  type metadata accessor for Answer(0);
  return swift_bridgeObjectRetain();
}

void Answer.sourceResults.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(int *)(OUTLINED_FUNCTION_155() + 32);
  OUTLINED_FUNCTION_311();
  *(_QWORD *)(v1 + v2) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*Answer.sourceResults.modify())()
{
  type metadata accessor for Answer(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t Answer.experiences.getter()
{
  type metadata accessor for Answer(0);
  return swift_bridgeObjectRetain();
}

void Answer.experiences.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(int *)(OUTLINED_FUNCTION_155() + 36);
  OUTLINED_FUNCTION_311();
  *(_QWORD *)(v1 + v2) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*Answer.experiences.modify())()
{
  type metadata accessor for Answer(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void Answer.mediaURL.getter()
{
  MobileSMSDocument.date.getter(type metadata accessor for Answer);
}

uint64_t Answer.mediaURL.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_155();
  return OUTLINED_FUNCTION_122_1(v0, v1 + *(int *)(v2 + 40));
}

uint64_t (*Answer.mediaURL.modify())()
{
  type metadata accessor for Answer(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t Answer.lowConfidenceKnowledge.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Answer(0) + 44));
}

void Answer.lowConfidenceKnowledge.setter(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + *(int *)(type metadata accessor for Answer(0) + 44)) = a1;
  OUTLINED_FUNCTION_5();
}

uint64_t (*Answer.lowConfidenceKnowledge.modify())()
{
  type metadata accessor for Answer(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t Answer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v12;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x726577736E61 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x617461646174656DLL && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x6552656372756F73 && a2 == 0xED000073746C7573;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x6E65697265707865 && a2 == 0xEB00000000736563;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              v11 = a1 == 0x4C5255616964656DLL && a2 == 0xE800000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0xD000000000000016 && a2 == 0x800000024335D390)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v12 & 1) != 0)
                  return 7;
                else
                  return 8;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t Answer.CodingKeys.init(intValue:)()
{
  return 8;
}

void EmailDocument.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_4_13();
  Hasher._combine(_:)(a1);
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_107();
}

uint64_t Answer.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_243217574 + 4 * byte_243351B8A[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_243217574()
{
  return 7107189;
}

uint64_t sub_243217584()
{
  return 0x726577736E61;
}

uint64_t sub_243217598()
{
  return 0x617461646174656DLL;
}

uint64_t sub_2432175B0()
{
  return 0x6552656372756F73;
}

uint64_t sub_2432175D4()
{
  return 0x6E65697265707865;
}

uint64_t sub_2432175F4()
{
  return 0x4C5255616964656DLL;
}

unint64_t sub_24321760C()
{
  return 0xD000000000000016;
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance EmailDocument.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_107();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Answer.CodingKeys()
{
  unsigned __int8 *v0;

  return Answer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Answer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Answer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Answer.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Answer.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Answer.CodingKeys()
{
  lazy protocol witness table accessor for type Answer.CodingKeys and conformance Answer.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Answer.CodingKeys()
{
  lazy protocol witness table accessor for type Answer.CodingKeys and conformance Answer.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void Answer.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;

  OUTLINED_FUNCTION_65_7();
  OUTLINED_FUNCTION_82_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Answer.CodingKeys>);
  OUTLINED_FUNCTION_66_9();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_11();
  lazy protocol witness table accessor for type Answer.CodingKeys and conformance Answer.CodingKeys();
  OUTLINED_FUNCTION_22_12();
  OUTLINED_FUNCTION_1_7();
  if (!v0)
  {
    v3 = (int *)type metadata accessor for Answer(0);
    OUTLINED_FUNCTION_5_2();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    OUTLINED_FUNCTION_188();
    OUTLINED_FUNCTION_65_3();
    OUTLINED_FUNCTION_110_2(v3[6]);
    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_134_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_63_8();
    OUTLINED_FUNCTION_142(v3[8]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchResult]);
    lazy protocol witness table accessor for type [SearchResult] and conformance <A> [A]();
    OUTLINED_FUNCTION_63_8();
    OUTLINED_FUNCTION_142(v3[9]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogExperience]);
    lazy protocol witness table accessor for type [DialogExperience] and conformance <A> [A]();
    OUTLINED_FUNCTION_63_8();
    OUTLINED_FUNCTION_235(6);
    OUTLINED_FUNCTION_65_3();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  OUTLINED_FUNCTION_38_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_182();
  OUTLINED_FUNCTION_1_1();
}

void Answer.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  OUTLINED_FUNCTION_65_7();
  v13 = v12;
  v51 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_18_1();
  v52 = v16;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_34_1();
  v53 = v18;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Answer.CodingKeys>);
  v19 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for Answer(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_44_11();
  v25 = (uint64_t)v10 + *(int *)(v24 + 20);
  v26 = OUTLINED_FUNCTION_5_2();
  v61 = v25;
  OUTLINED_FUNCTION_34_4(v25);
  v27 = v22[7];
  v28 = MEMORY[0x24BEE4AF8];
  *(uint64_t *)((char *)v10 + v27) = Dictionary.init(dictionaryLiteral:)();
  v59 = v22[9];
  v60 = v27;
  *(uint64_t *)((char *)v10 + v59) = v28;
  v57 = (uint64_t)v10 + v22[10];
  OUTLINED_FUNCTION_34_4(v57);
  v55 = v13;
  v56 = v22;
  v29 = v22[11];
  *((_BYTE *)v10 + v29) = 0;
  v30 = *(_QWORD *)(v13 + 24);
  v31 = (_QWORD *)v13;
  v32 = v21;
  __swift_project_boxed_opaque_existential_1(v31, v30);
  lazy protocol witness table accessor for type Answer.CodingKeys and conformance Answer.CodingKeys();
  OUTLINED_FUNCTION_180();
  if (v11)
  {
    v34 = v57;
    __swift_destroy_boxed_opaque_existential_1(v55);
    outlined destroy of MobileSMSDocument?(v61, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_59_9();
    OUTLINED_FUNCTION_59_9();
    outlined destroy of MobileSMSDocument?(v34, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v33 = v53;
    v58 = v26;
    v50 = v29;
    OUTLINED_FUNCTION_200();
    *v10 = KeyedDecodingContainer.decode(_:forKey:)();
    v10[1] = v35;
    OUTLINED_FUNCTION_293();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v37 = v36;
    v49[2] = v32;
    OUTLINED_FUNCTION_99_4();
    v38 = v56;
    v39 = v57;
    v49[0] = v37;
    v49[1] = v19;
    outlined assign with take of URL?(v33, v61);
    OUTLINED_FUNCTION_234(2);
    v40 = KeyedDecodingContainer.decode(_:forKey:)();
    v41 = (uint64_t *)((char *)v10 + v38[6]);
    *v41 = v40;
    v41[1] = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    OUTLINED_FUNCTION_165();
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_55_4();
    v43 = v60;
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v10 + v43) = a10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchResult]);
    v62 = 4;
    lazy protocol witness table accessor for type [SearchResult] and conformance <A> [A]();
    OUTLINED_FUNCTION_55_4();
    *(uint64_t *)((char *)v10 + v38[8]) = a10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogExperience]);
    v62 = 5;
    lazy protocol witness table accessor for type [DialogExperience] and conformance <A> [A]();
    OUTLINED_FUNCTION_55_4();
    v44 = v59;
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v10 + v44) = a10;
    OUTLINED_FUNCTION_199(6);
    v45 = v52;
    OUTLINED_FUNCTION_99_4();
    outlined assign with take of URL?(v45, v39);
    OUTLINED_FUNCTION_234(7);
    v46 = KeyedDecodingContainer.decode(_:forKey:)();
    v47 = v55;
    LOBYTE(v44) = v46;
    OUTLINED_FUNCTION_103_6();
    v48 = v51;
    *((_BYTE *)v10 + v50) = v44 & 1;
    OUTLINED_FUNCTION_77_6((uint64_t)v10, v48);
    OUTLINED_FUNCTION_36_11(v47);
  }
  OUTLINED_FUNCTION_100_5();
  OUTLINED_FUNCTION_1_1();
}

uint64_t default argument 3 of Answer.init(id:url:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t default argument 5 of Answer.init(id:url:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 7 of Answer.init(id:url:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:)()
{
  return 0;
}

void Answer.init(id:url:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;

  OUTLINED_FUNCTION_207();
  v17 = v16;
  *v16 = v18;
  v16[1] = v19;
  v20 = (int *)OUTLINED_FUNCTION_26_10();
  outlined init with take of Date?(v14, (uint64_t)v17 + v20[5], &demangling cache variable for type metadata for URL?);
  v21 = (_QWORD *)((char *)v17 + v20[6]);
  *v21 = v13;
  v21[1] = v12;
  *(_QWORD *)((char *)v17 + v20[7]) = v11;
  *(_QWORD *)((char *)v17 + v20[8]) = v10;
  *(_QWORD *)((char *)v17 + v20[9]) = a8;
  outlined init with take of Date?(a9, (uint64_t)v17 + v20[10], &demangling cache variable for type metadata for URL?);
  *((_BYTE *)v17 + v20[11]) = a10;
}

void protocol witness for Decodable.init(from:) in conformance Answer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  Answer.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance Answer()
{
  Answer.encode(to:)();
}

uint64_t dateString(fromDateComponents:timezone:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  Class isa;
  id v32;
  uint64_t v33;
  Class v34;
  id v35;
  uint64_t v37[2];
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_18_2();
  v44 = v2;
  v45 = v3;
  v5 = v4;
  v37[1] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OUTLINED_FUNCTION_78_10();
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_92_6(v12, v37[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_250();
  v17 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_18_1();
  v37[0] = v19;
  OUTLINED_FUNCTION_17_1();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v37 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v37 - v24;
  v26 = type metadata accessor for Calendar();
  v39 = *(_QWORD *)(v26 - 8);
  v40 = v26;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_32_4();
  v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  static Calendar.current.getter();
  outlined init with copy of TimeZone?(v5, v1, &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_22_2(v1, 1, v17);
  if (v30)
  {
    outlined destroy of MobileSMSDocument?(v1, &demangling cache variable for type metadata for TimeZone?);
  }
  else
  {
    OUTLINED_FUNCTION_187((uint64_t)v25, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
    OUTLINED_FUNCTION_187((uint64_t)v23, (uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
    Calendar.timeZone.setter();
    OUTLINED_FUNCTION_225();
  }
  Calendar.date(from:)();
  v28 = v43;
  OUTLINED_FUNCTION_22_2((uint64_t)v9, 1, v43);
  if (v30)
  {
    OUTLINED_FUNCTION_224();

    outlined destroy of MobileSMSDocument?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v41, v9, v28);
    outlined init with copy of TimeZone?(v5, (uint64_t)v16, &demangling cache variable for type metadata for TimeZone?);
    OUTLINED_FUNCTION_22_2((uint64_t)v16, 1, v17);
    if (v30)
    {
      outlined destroy of MobileSMSDocument?((uint64_t)v16, &demangling cache variable for type metadata for TimeZone?);
      v32 = v38;
    }
    else
    {
      OUTLINED_FUNCTION_187(v37[0], (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
      isa = TimeZone._bridgeToObjectiveC()().super.isa;
      v32 = v38;
      objc_msgSend(v38, sel_setTimeZone_, isa);

      OUTLINED_FUNCTION_225();
    }
    v33 = v41;
    v34 = Date._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v32, sel_stringFromDate_, v34);

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v33, v43);
    OUTLINED_FUNCTION_224();
  }
  return v29;
}

uint64_t static FlightReservation.kAnswerFlightNumber.getter()
{
  return 0x754E746867696C66;
}

void *FlightReservation.kAnswerFlightCheckInUrl.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightCheckInUrl;
}

unint64_t static FlightReservation.kAnswerFlightCheckInUrl.getter()
{
  return OUTLINED_FUNCTION_30_11(16);
}

const char *FlightReservation.kAnswerFlightBookingInfoUrl.unsafeMutableAddressor()
{
  return "bookingInfoUrl";
}

uint64_t static FlightReservation.kAnswerFlightBookingInfoUrl.getter()
{
  return 0x49676E696B6F6F62;
}

const char *FlightReservation.kAnswerFlightCarrier.unsafeMutableAddressor()
{
  return "flightCarrier";
}

uint64_t static FlightReservation.kAnswerFlightCarrier.getter()
{
  return 0x6143746867696C66;
}

void *FlightReservation.kAnswerFlightCarrierCode.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightCarrierCode;
}

unint64_t static FlightReservation.kAnswerFlightCarrierCode.getter()
{
  return OUTLINED_FUNCTION_30_11(17);
}

unint64_t static FlightReservation.kAnswerFlightDepartureDateString.getter()
{
  return OUTLINED_FUNCTION_30_11(25);
}

unint64_t static FlightReservation.kAnswerFlightArrivalDateString.getter()
{
  return OUTLINED_FUNCTION_30_11(23);
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportCode.getter()
{
  return OUTLINED_FUNCTION_30_11(26);
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportCode.getter()
{
  return OUTLINED_FUNCTION_30_11(24);
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportName.getter()
{
  return OUTLINED_FUNCTION_30_11(24);
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportName.getter()
{
  return OUTLINED_FUNCTION_30_11(26);
}

void *FlightReservation.kAnswerFlightConfirmationNumber.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightConfirmationNumber;
}

unint64_t static FlightReservation.kAnswerFlightConfirmationNumber.getter()
{
  return OUTLINED_FUNCTION_30_11(24);
}

void *FlightReservation.kAnswerFlightPassengerNames.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightPassengerNames;
}

unint64_t static FlightReservation.kAnswerFlightPassengerNames.getter()
{
  return OUTLINED_FUNCTION_30_11(20);
}

void *FlightReservation.kAnswerFlightPassengerSeatNumbers.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightPassengerSeatNumbers;
}

unint64_t static FlightReservation.kAnswerFlightPassengerSeatNumbers.getter()
{
  return OUTLINED_FUNCTION_30_11(26);
}

unint64_t static FlightReservation.kAnswerFlightArrivalTerminal.getter()
{
  return OUTLINED_FUNCTION_30_11(21);
}

unint64_t static FlightReservation.kAnswerFlightDepartureTerminal.getter()
{
  return OUTLINED_FUNCTION_30_11(23);
}

uint64_t FlightReservation.answer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_44_11();
  v6 = specialized Collection.first.getter(*(_QWORD *)(v1 + *(int *)(v5 + 24)));
  v8 = v7;
  _s10OmniSearch0B6ResultVWOcTm_1(v2, v0, type metadata accessor for FlightReservation);
  if (!v8)
  {
    v6 = *(_QWORD *)(v0 + *(int *)(v3 + 40));
    OUTLINED_FUNCTION_91_0();
  }
  outlined destroy of EmailDocument(v0, type metadata accessor for FlightReservation);
  return v6;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v1 = MEMORY[0x24BEE4B00];
  v34 = MEMORY[0x24BEE4B00];
  specialized _NativeDictionary.makeIterator()(v33, a1);
  v2 = v33[0];
  v3 = v33[1];
  v4 = v33[3];
  v5 = v33[4];
  v6 = (unint64_t)(v33[2] + 64) >> 6;
  for (result = swift_bridgeObjectRetain(); ; result = swift_bridgeObjectRelease())
  {
    do
    {
      if (v5)
      {
        v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v9 = v8 | (v4 << 6);
      }
      else
      {
        v10 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_36;
        }
        if (v10 >= v6)
          goto LABEL_34;
        v11 = *(_QWORD *)(v3 + 8 * v10);
        v12 = v4 + 1;
        if (!v11)
        {
          v12 = v4 + 2;
          if (v4 + 2 >= v6)
            goto LABEL_34;
          v11 = *(_QWORD *)(v3 + 8 * v12);
          if (!v11)
          {
            v12 = v4 + 3;
            if (v4 + 3 >= v6)
              goto LABEL_34;
            v11 = *(_QWORD *)(v3 + 8 * v12);
            if (!v11)
            {
              v12 = v4 + 4;
              if (v4 + 4 >= v6)
                goto LABEL_34;
              v11 = *(_QWORD *)(v3 + 8 * v12);
              if (!v11)
              {
                v12 = v4 + 5;
                if (v4 + 5 >= v6)
                  goto LABEL_34;
                v11 = *(_QWORD *)(v3 + 8 * v12);
                if (!v11)
                {
                  v13 = v4 + 6;
                  while (v13 < v6)
                  {
                    v11 = *(_QWORD *)(v3 + 8 * v13++);
                    if (v11)
                    {
                      v12 = v13 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_34:
                  outlined consume of Set<FlightDesignator>.Iterator._Variant();
                  return v1;
                }
              }
            }
          }
        }
LABEL_19:
        v5 = (v11 - 1) & v11;
        v9 = __clz(__rbit64(v11)) + (v12 << 6);
        v4 = v12;
      }
      v14 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v9);
      v15 = v14[1];
    }
    while (!v15);
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
    v17 = v16[1];
    v31 = *v14;
    v32 = *v16;
    v18 = *(_QWORD *)(v1 + 16);
    if (*(_QWORD *)(v1 + 24) <= v18)
    {
      v19 = v18 + 1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, 1);
      v1 = v34;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = v1 + 64;
    v21 = -1 << *(_BYTE *)(v1 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v1 + 64 + 8 * (v22 >> 6))) == 0)
      break;
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v1 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v24);
    *v29 = v32;
    v29[1] = v17;
    v30 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v24);
    *v30 = v31;
    v30[1] = v15;
    ++*(_QWORD *)(v1 + 16);
  }
  v25 = 0;
  v26 = (unint64_t)(63 - v21) >> 6;
  while (++v23 != v26 || (v25 & 1) == 0)
  {
    v27 = v23 == v26;
    if (v23 == v26)
      v23 = 0;
    v25 |= v27;
    v28 = *(_QWORD *)(v20 + 8 * v23);
    if (v28 != -1)
    {
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
      goto LABEL_33;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v1 = MEMORY[0x24BEE4B00];
  v34 = MEMORY[0x24BEE4B00];
  specialized _NativeDictionary.makeIterator()(v33, a1);
  v2 = v33[0];
  v3 = v33[1];
  v4 = v33[3];
  v5 = v33[4];
  v6 = (unint64_t)(v33[2] + 64) >> 6;
  for (result = OUTLINED_FUNCTION_64(); ; result = swift_bridgeObjectRelease())
  {
    do
    {
      if (v5)
      {
        v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v9 = v8 | (v4 << 6);
      }
      else
      {
        v10 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_36;
        }
        if (v10 >= v6)
          goto LABEL_34;
        v11 = *(_QWORD *)(v3 + 8 * v10);
        v12 = v4 + 1;
        if (!v11)
        {
          v12 = v4 + 2;
          if (v4 + 2 >= v6)
            goto LABEL_34;
          v11 = *(_QWORD *)(v3 + 8 * v12);
          if (!v11)
          {
            v12 = v4 + 3;
            if (v4 + 3 >= v6)
              goto LABEL_34;
            v11 = *(_QWORD *)(v3 + 8 * v12);
            if (!v11)
            {
              v12 = v4 + 4;
              if (v4 + 4 >= v6)
                goto LABEL_34;
              v11 = *(_QWORD *)(v3 + 8 * v12);
              if (!v11)
              {
                v12 = v4 + 5;
                if (v4 + 5 >= v6)
                  goto LABEL_34;
                v11 = *(_QWORD *)(v3 + 8 * v12);
                if (!v11)
                {
                  v13 = v4 + 6;
                  while (v13 < v6)
                  {
                    v11 = *(_QWORD *)(v3 + 8 * v13++);
                    if (v11)
                    {
                      v12 = v13 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_34:
                  outlined consume of Set<FlightDesignator>.Iterator._Variant();
                  return v1;
                }
              }
            }
          }
        }
LABEL_19:
        v5 = (v11 - 1) & v11;
        v9 = __clz(__rbit64(v11)) + (v12 << 6);
        v4 = v12;
      }
      v14 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v9);
      v15 = v14[1];
    }
    while (!v15);
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
    v17 = v16[1];
    v31 = *v14;
    v32 = *v16;
    v18 = *(_QWORD *)(v1 + 16);
    if (*(_QWORD *)(v1 + 24) <= v18)
    {
      v19 = v18 + 1;
      OUTLINED_FUNCTION_190_4();
      OUTLINED_FUNCTION_64();
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, 1);
      v1 = v34;
    }
    else
    {
      OUTLINED_FUNCTION_190_4();
      OUTLINED_FUNCTION_64();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = v1 + 64;
    v21 = -1 << *(_BYTE *)(v1 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v1 + 64 + 8 * (v22 >> 6))) == 0)
      break;
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v1 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v24);
    *v29 = v32;
    v29[1] = v17;
    v30 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v24);
    *v30 = v31;
    v30[1] = v15;
    ++*(_QWORD *)(v1 + 16);
  }
  v25 = 0;
  v26 = (unint64_t)(63 - v21) >> 6;
  while (++v23 != v26 || (v25 & 1) == 0)
  {
    v27 = v23 == v26;
    if (v23 == v26)
      v23 = 0;
    v25 |= v27;
    v28 = *(_QWORD *)(v20 + 8 * v23);
    if (v28 != -1)
    {
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
      goto LABEL_33;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

double closure #1 in FlightReservation.init(id:url:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDepartureDateComponents:flightArrivalDateComponents:flightDepartureTimeZone:flightArrivalTimeZone:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportName:flightDepartureAirportName:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:answerAttributes:bundleId:mailMessageId:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v40;
  uint64_t v42;
  uint64_t v44;
  uint64_t v46;
  char v48;
  uint64_t v49;
  double result;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v28 = *a1;
  v27 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v29 == v27)
  {
    OUTLINED_FUNCTION_36_0();
    goto LABEL_48;
  }
  v64 = a8;
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
LABEL_48:
    if (!a3)
      goto LABEL_80;
    OUTLINED_FUNCTION_179(0xD000000000000019, v63, v64, a6, (_QWORD *)a9);
    *(_QWORD *)(v49 + 16) = a2;
    *(_QWORD *)(v49 + 24) = a3;
LABEL_50:
    swift_bridgeObjectRetain();
    return result;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v32 == v27)
  {
    OUTLINED_FUNCTION_36_0();
    goto LABEL_52;
  }
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_70_6();
  if ((v31 & 1) != 0)
  {
LABEL_52:
    if (!a5)
      goto LABEL_80;
    OUTLINED_FUNCTION_179(0xD000000000000017, v63, v64, a6, (_QWORD *)a9);
    *(_QWORD *)(v51 + 16) = a4;
    *(_QWORD *)(v51 + 24) = a5;
    goto LABEL_50;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v34 == v27)
  {
    OUTLINED_FUNCTION_36_0();
  }
  else
  {
    OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_70_6();
    if ((v31 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v36 == v27)
      {
        OUTLINED_FUNCTION_36_0();
      }
      else
      {
        OUTLINED_FUNCTION_29_11();
        OUTLINED_FUNCTION_70_6();
        if ((v31 & 1) == 0)
        {
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v38 == v27)
          {
            OUTLINED_FUNCTION_36_0();
          }
          else
          {
            OUTLINED_FUNCTION_29_11();
            OUTLINED_FUNCTION_70_6();
            if ((v31 & 1) == 0)
            {
              if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v40 == v27)
              {
                OUTLINED_FUNCTION_36_0();
              }
              else
              {
                OUTLINED_FUNCTION_29_11();
                OUTLINED_FUNCTION_70_6();
                if ((v31 & 1) == 0)
                {
                  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v42 == v27)
                  {
                    OUTLINED_FUNCTION_36_0();
                  }
                  else
                  {
                    OUTLINED_FUNCTION_29_11();
                    OUTLINED_FUNCTION_70_6();
                    if ((v31 & 1) == 0)
                    {
                      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v44 == v27)
                      {
                        OUTLINED_FUNCTION_36_0();
                      }
                      else
                      {
                        OUTLINED_FUNCTION_29_11();
                        OUTLINED_FUNCTION_70_6();
                        if ((v31 & 1) == 0)
                        {
                          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v46 == v27)
                          {
                            OUTLINED_FUNCTION_36_0();
                          }
                          else
                          {
                            v48 = OUTLINED_FUNCTION_29_11();
                            swift_bridgeObjectRelease();
                            if ((v48 & 1) == 0)
                              goto LABEL_80;
                          }
                          v56 = a21;
                          if (a21)
                          {
                            a11 = a20;
                            v58 = 0xD000000000000017;
                            v59 = "flightDepartureTerminal";
                            goto LABEL_65;
                          }
LABEL_80:
                          result = 0.0;
                          *(_OWORD *)a9 = 0u;
                          *(_OWORD *)(a9 + 16) = 0u;
                          return result;
                        }
                      }
                      v56 = a19;
                      if (!a19)
                        goto LABEL_80;
                      a11 = a18;
                      v58 = 0xD000000000000015;
                      v59 = "flightArrivalTerminal";
LABEL_65:
                      *(_QWORD *)a9 = v58;
                      *(_QWORD *)(a9 + 8) = (unint64_t)(v59 - 32) | 0x8000000000000000;
                      *(_QWORD *)(a9 + 16) = a11;
                      *(_QWORD *)(a9 + 24) = v56;
                      goto LABEL_50;
                    }
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
                  lazy protocol witness table accessor for type [String] and conformance [A]();
                  BidirectionalCollection<>.joined(separator:)();
                  OUTLINED_FUNCTION_179(0xD00000000000001ALL, v63, v64, a6, (_QWORD *)a9);
                  *(_QWORD *)(v62 + 16) = v60;
                  *(_QWORD *)(v62 + 24) = v61;
                  return result;
                }
              }
              v56 = a16;
              if (!a16)
                goto LABEL_80;
              a11 = a15;
              v58 = 0xD00000000000001ALL;
              v59 = "flightDepartureAirportName";
              goto LABEL_65;
            }
          }
          v56 = a14;
          if (!a14)
            goto LABEL_80;
          a11 = a13;
          v58 = 0xD000000000000018;
          v59 = "flightArrivalAirportName";
          goto LABEL_65;
        }
      }
      v56 = a12;
      if (!a12)
        goto LABEL_80;
      v58 = 0xD000000000000018;
      v59 = "flightConfirmationNumber";
      goto LABEL_65;
    }
  }
  if (a7)
    v52 = a6;
  else
    v52 = 0;
  if (a7)
    v53 = a7;
  else
    v53 = (void *)0xE000000000000000;
  OUTLINED_FUNCTION_76_0();
  v54._countAndFlagsBits = v52;
  v54._object = v53;
  String.append(_:)(v54);
  OUTLINED_FUNCTION_80_0();
  v55._countAndFlagsBits = v64;
  v55._object = a10;
  String.append(_:)(v55);
  result = 1.14319654e257;
  *(_OWORD *)a9 = xmmword_243351AF0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 24) = 0xE000000000000000;
  return result;
}

uint64_t outlined copy of DataDetectorResults?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for EmailDocument.CodingKeys, &unk_2513CCFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for EmailDocument.CodingKeys, &unk_2513CCFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for EmailDocument.CodingKeys, &unk_2513CCFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for EmailDocument.CodingKeys, &unk_2513CCFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys);
  }
  return result;
}

void lazy protocol witness table accessor for type Date and conformance Date(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    OUTLINED_FUNCTION_284();
  }
  OUTLINED_FUNCTION_5();
}

unint64_t lazy protocol witness table accessor for type DataDetectorResults and conformance DataDetectorResults()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataDetectorResults and conformance DataDetectorResults;
  if (!lazy protocol witness table cache variable for type DataDetectorResults and conformance DataDetectorResults)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for DataDetectorResults, &type metadata for DataDetectorResults);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataDetectorResults and conformance DataDetectorResults);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataDetectorResults and conformance DataDetectorResults;
  if (!lazy protocol witness table cache variable for type DataDetectorResults and conformance DataDetectorResults)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for DataDetectorResults, &type metadata for DataDetectorResults);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataDetectorResults and conformance DataDetectorResults);
  }
  return result;
}

void lazy protocol witness table accessor for type [String] and conformance <A> [A](_QWORD *a1)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_284();
  }
  OUTLINED_FUNCTION_59_0();
}

void outlined init with copy of TimeZone?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_70_1(a1, a2, a3);
  OUTLINED_FUNCTION_23_3(v3);
  OUTLINED_FUNCTION_5();
}

unint64_t lazy protocol witness table accessor for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for MobileSMSDocument.CodingKeys, &unk_2513CCF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for MobileSMSDocument.CodingKeys, &unk_2513CCF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for MobileSMSDocument.CodingKeys, &unk_2513CCF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for MobileSMSDocument.CodingKeys, &unk_2513CCF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileSMSDocument.CodingKeys and conformance MobileSMSDocument.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Photo] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Photo] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Photo] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Photo]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Photo and conformance Photo, (void (*)(uint64_t))type metadata accessor for Photo);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Photo] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Photo] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Photo] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Photo]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Photo and conformance Photo, (void (*)(uint64_t))type metadata accessor for Photo);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Photo] and conformance <A> [A]);
  }
  return result;
}

uint64_t type metadata accessor for Photo(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for Photo);
}

void outlined destroy of EmailDocument(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_305(a1, a2);
  OUTLINED_FUNCTION_31_2(v2);
  OUTLINED_FUNCTION_5();
}

uint64_t type metadata accessor for CalendarEvent(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for CalendarEvent);
}

unint64_t lazy protocol witness table accessor for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for CalendarEvent.CodingKeys, &unk_2513CCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for CalendarEvent.CodingKeys, &unk_2513CCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for CalendarEvent.CodingKeys, &unk_2513CCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for CalendarEvent.CodingKeys, &unk_2513CCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalendarEvent.CodingKeys and conformance CalendarEvent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Photo.CodingKeys and conformance Photo.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys;
  if (!lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Photo.CodingKeys, &unk_2513CCE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys;
  if (!lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Photo.CodingKeys, &unk_2513CCE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys;
  if (!lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Photo.CodingKeys, &unk_2513CCE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys;
  if (!lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Photo.CodingKeys, &unk_2513CCE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Photo.CodingKeys and conformance Photo.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for NoteDocument(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for NoteDocument);
}

unint64_t lazy protocol witness table accessor for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for NoteDocument.CodingKeys, &unk_2513CCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for NoteDocument.CodingKeys, &unk_2513CCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for NoteDocument.CodingKeys, &unk_2513CCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for NoteDocument.CodingKeys, &unk_2513CCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoteDocument.CodingKeys and conformance NoteDocument.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for FileDocument(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for FileDocument);
}

void *HotelReservation.kAnswerHotelReservationId.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationId;
}

unint64_t static HotelReservation.kAnswerHotelReservationId.getter()
{
  return OUTLINED_FUNCTION_30_11(18);
}

const char *HotelReservation.kAnswerHotelUnderName.unsafeMutableAddressor()
{
  return "hotelUnderName";
}

uint64_t static HotelReservation.kAnswerHotelUnderName.getter()
{
  return 0x646E556C65746F68;
}

void *HotelReservation.kAnswerHotelCheckinDateString.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelCheckinDateString;
}

unint64_t static HotelReservation.kAnswerHotelCheckinDateString.getter()
{
  return OUTLINED_FUNCTION_30_11(22);
}

void *HotelReservation.kAnswerHotelCheckoutDateString.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelCheckoutDateString;
}

unint64_t static HotelReservation.kAnswerHotelCheckoutDateString.getter()
{
  return OUTLINED_FUNCTION_30_11(23);
}

void *HotelReservation.kAnswerHotelReservationForName.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationForName;
}

unint64_t static HotelReservation.kAnswerHotelReservationForName.getter()
{
  return OUTLINED_FUNCTION_30_11(23);
}

void *HotelReservation.kAnswerHotelModifyReservationUrl.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelModifyReservationUrl;
}

unint64_t static HotelReservation.kAnswerHotelModifyReservationUrl.getter()
{
  return OUTLINED_FUNCTION_30_11(25);
}

void *HotelReservation.kAnswerHotelReservationForTelephone.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationForTelephone;
}

unint64_t static HotelReservation.kAnswerHotelReservationForTelephone.getter()
{
  return OUTLINED_FUNCTION_30_11(28);
}

void *HotelReservation.kAnswerHotelReservationForAddress.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationForAddress;
}

unint64_t static HotelReservation.kAnswerHotelReservationForAddress.getter()
{
  return OUTLINED_FUNCTION_30_11(26);
}

__n128 HotelReservation.init(id:url:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelTimeZone:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:answerAttributes:bundleId:mailMessageId:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 result;

  v26 = dateString(fromDateComponents:timezone:)();
  v28 = v27;
  v29 = dateString(fromDateComponents:timezone:)();
  v31 = v30;
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_35_1();
  OUTLINED_FUNCTION_64();
  v32 = specialized Sequence.compactMap<A>(_:)(a20, v26, v28, v29, v31, a12, a13, a18, a19, a4, a5);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v32);
  HotelReservation.init(id:url:answers:answerAttributes:bundleId:mailMessageId:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelTimeZone:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelCheckinDateString:hotelCheckoutDateString:)(a1, a2, a3, v33, a20, a21, a22, a23, a9, a24, a4, a5, a6, a7, a8, a10, a11, a12, a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    a19,
    v26,
    v28);
  return result;
}

double closure #1 in HotelReservation.init(id:url:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelTimeZone:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:answerAttributes:bundleId:mailMessageId:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  char v35;
  double result;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v20 = *a1;
  v19 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v21 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v39 = a8;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
LABEL_28:
    if (!a3)
      goto LABEL_44;
    *a9 = 0xD000000000000016;
    a9[1] = 0x800000024335CF00;
    a9[2] = a2;
    a9[3] = a3;
LABEL_30:
    swift_bridgeObjectRetain();
    return result;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v24 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
LABEL_32:
    if (!a5)
      goto LABEL_44;
    *a9 = 0xD000000000000017;
    a9[1] = 0x800000024335CF20;
    a9[2] = a4;
    a9[3] = a5;
    goto LABEL_30;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v27 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
LABEL_35:
    v37 = a7;
    if (!a7)
      goto LABEL_44;
    v38 = a9;
    *a9 = 0xD000000000000017;
    a9[1] = 0x800000024335CF40;
    a9[2] = a6;
    goto LABEL_37;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v30 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
LABEL_39:
    v37 = a10;
    if (!a10)
      goto LABEL_44;
    v38 = a9;
    *a9 = 0xD00000000000001ALL;
    a9[1] = 0x800000024335CFA0;
    a9[2] = v39;
LABEL_37:
    v38[3] = v37;
    goto LABEL_30;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v33 == v19)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
      goto LABEL_44;
  }
  if (a12)
  {
    *a9 = 0xD000000000000012;
    a9[1] = 0x800000024335CEE0;
    a9[2] = a11;
    a9[3] = a12;
    goto LABEL_30;
  }
LABEL_44:
  result = 0.0;
  *(_OWORD *)a9 = 0u;
  *((_OWORD *)a9 + 1) = 0u;
  return result;
}

void *RestaurantReservation.kAnswerRestaurantReservationId.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationId;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationId.getter()
{
  return OUTLINED_FUNCTION_30_11(23);
}

void *RestaurantReservation.kAnswerRestaurantUnderName.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantUnderName;
}

unint64_t static RestaurantReservation.kAnswerRestaurantUnderName.getter()
{
  return OUTLINED_FUNCTION_30_11(19);
}

void *RestaurantReservation.kAnswerRestaurantStartDateString.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantStartDateString;
}

unint64_t static RestaurantReservation.kAnswerRestaurantStartDateString.getter()
{
  return OUTLINED_FUNCTION_30_11(25);
}

void *RestaurantReservation.kAnswerRestaurantPartySize.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantPartySize;
}

unint64_t static RestaurantReservation.kAnswerRestaurantPartySize.getter()
{
  return OUTLINED_FUNCTION_30_11(19);
}

void *RestaurantReservation.kAnswerRestaurantReservationForName.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationForName;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationForName.getter()
{
  return OUTLINED_FUNCTION_30_11(28);
}

void *RestaurantReservation.kAnswerRestaurantReservationForTelephone.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationForTelephone;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationForTelephone.getter()
{
  return OUTLINED_FUNCTION_30_11(33);
}

void *RestaurantReservation.kAnswerRestaurantReservationForAddress.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationForAddress;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationForAddress.getter()
{
  return OUTLINED_FUNCTION_30_11(31);
}

void RestaurantReservation.init(id:url:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantTimeZone:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:answerAttributes:bundleId:mailMessageId:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = dateString(fromDateComponents:timezone:)();
  v27 = v26;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_64();
  v28 = specialized Sequence.compactMap<A>(_:)(a19, v25, v27, a13, a14, a17, a18, a4, a5);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v28);
  RestaurantReservation.init(id:url:answers:answerAttributes:bundleId:mailMessageId:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantTimeZone:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:restaurantStartDateString:)(a1, a2, a3, v29, a19, a20, a21, a22, a9, a23, a4, a5, a6, a7, a8, a10, a11, a12, a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    v25,
    v27);
  OUTLINED_FUNCTION_152();
}

double closure #1 in RestaurantReservation.init(id:url:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantTimeZone:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:answerAttributes:bundleId:mailMessageId:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  char v29;
  double result;
  uint64_t v31;

  v17 = *a1;
  v16 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v18 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v31 = a8;
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
LABEL_23:
    if (!a3)
      goto LABEL_35;
    *a9 = 0xD000000000000019;
    a9[1] = 0x800000024335D000;
    a9[2] = a2;
    a9[3] = a3;
LABEL_25:
    swift_bridgeObjectRetain();
    return result;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v21 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
LABEL_27:
    if (!a5)
      goto LABEL_35;
    *a9 = 0xD00000000000001CLL;
    a9[1] = 0x800000024335D040;
    a9[2] = a4;
    a9[3] = a5;
    goto LABEL_25;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v24 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
LABEL_30:
    if (!a7)
      goto LABEL_35;
    *a9 = 0xD00000000000001FLL;
    a9[1] = 0x800000024335D090;
    a9[2] = a6;
    a9[3] = a7;
    goto LABEL_25;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v27 == v16)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      goto LABEL_35;
  }
  if (a10)
  {
    *a9 = 0xD000000000000017;
    a9[1] = 0x800000024335CFC0;
    a9[2] = v31;
    a9[3] = a10;
    goto LABEL_25;
  }
LABEL_35:
  result = 0.0;
  *(_OWORD *)a9 = 0u;
  *((_OWORD *)a9 + 1) = 0u;
  return result;
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(void *a1)
{
  return outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(a1, (SEL *)&selRef_filename);
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.kind.getter(void *a1)
{
  return outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(a1, (SEL *)&selRef_kind);
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(void *a1, SEL *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, *a2);

  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.keywords.getter(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_keywords);

  if (v2)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  OUTLINED_FUNCTION_5();
}

unint64_t lazy protocol witness table accessor for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FileDocument.CodingKeys, &type metadata for FileDocument.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FileDocument.CodingKeys, &type metadata for FileDocument.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FileDocument.CodingKeys, &type metadata for FileDocument.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FileDocument.CodingKeys, &type metadata for FileDocument.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDocument.CodingKeys and conformance FileDocument.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type URL? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type URL? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE4AA8], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL? and conformance <A> A?);
  }
  return result;
}

uint64_t type metadata accessor for WalletTransaction(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for WalletTransaction);
}

unint64_t lazy protocol witness table accessor for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletTransaction.CodingKeys, &unk_2513CCD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletTransaction.CodingKeys, &unk_2513CCD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletTransaction.CodingKeys, &unk_2513CCD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletTransaction.CodingKeys, &unk_2513CCD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletTransaction.CodingKeys and conformance WalletTransaction.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for WalletPass(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for WalletPass);
}

unint64_t lazy protocol witness table accessor for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletPass.CodingKeys, &unk_2513CCC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletPass.CodingKeys, &unk_2513CCC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletPass.CodingKeys, &unk_2513CCC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys;
  if (!lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for WalletPass.CodingKeys, &unk_2513CCC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletPass.CodingKeys and conformance WalletPass.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for Contact(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for Contact);
}

unint64_t lazy protocol witness table accessor for type Contact.CodingKeys and conformance Contact.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys;
  if (!lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Contact.CodingKeys, &unk_2513CCBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys;
  if (!lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Contact.CodingKeys, &unk_2513CCBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys;
  if (!lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Contact.CodingKeys, &unk_2513CCBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys;
  if (!lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Contact.CodingKeys, &unk_2513CCBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact.CodingKeys and conformance Contact.CodingKeys);
  }
  return result;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = a2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
  }
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  Swift::UInt v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;

  v11 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  for (v4 &= v4 - 1; ; v4 = (v9 - 1) & v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      v7 = v8 + 1;
      if (v8 + 1 >= v5)
        goto LABEL_19;
      v9 = *(_QWORD *)(v11 + 8 * v7);
      if (!v9)
        break;
    }
LABEL_16:
    ;
  }
  v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  v9 = *(_QWORD *)(v11 + 8 * v10);
  if (v9)
  {
    v7 = v10;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v7 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v7);
    ++v10;
    if (v9)
      goto LABEL_16;
  }
LABEL_21:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FlightReservation.CodingKeys, &unk_2513CCB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FlightReservation.CodingKeys, &unk_2513CCB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FlightReservation.CodingKeys, &unk_2513CCB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for FlightReservation.CodingKeys, &unk_2513CCB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

void outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_70_1(a1, a2, a3);
  v4 = OUTLINED_FUNCTION_296();
  v5(v4, v3);
  OUTLINED_FUNCTION_5();
}

uint64_t type metadata accessor for HotelReservation(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for HotelReservation);
}

unint64_t lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for HotelReservation.CodingKeys, &unk_2513CCAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for HotelReservation.CodingKeys, &unk_2513CCAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for HotelReservation.CodingKeys, &unk_2513CCAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for HotelReservation.CodingKeys, &unk_2513CCAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for RestaurantReservation(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for RestaurantReservation);
}

unint64_t lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for RestaurantReservation.CodingKeys, &unk_2513CCA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for RestaurantReservation.CodingKeys, &unk_2513CCA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for RestaurantReservation.CodingKeys, &unk_2513CCA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for RestaurantReservation.CodingKeys, &unk_2513CCA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for Answer(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for Answer);
}

unint64_t lazy protocol witness table accessor for type Answer.CodingKeys and conformance Answer.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys;
  if (!lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Answer.CodingKeys, &unk_2513CC9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys;
  if (!lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Answer.CodingKeys, &unk_2513CC9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys;
  if (!lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Answer.CodingKeys, &unk_2513CC9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys;
  if (!lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for Answer.CodingKeys, &unk_2513CC9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Answer.CodingKeys and conformance Answer.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SearchResult] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchResult]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SearchResult and conformance SearchResult, (void (*)(uint64_t))type metadata accessor for SearchResult);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchResult]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SearchResult and conformance SearchResult, (void (*)(uint64_t))type metadata accessor for SearchResult);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DialogExperience] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [DialogExperience] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DialogExperience] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DialogExperience]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DialogExperience and conformance DialogExperience, (void (*)(uint64_t))type metadata accessor for DialogExperience);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DialogExperience] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [DialogExperience] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DialogExperience] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DialogExperience]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DialogExperience and conformance DialogExperience, (void (*)(uint64_t))type metadata accessor for DialogExperience);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DialogExperience] and conformance <A> [A]);
  }
  return result;
}

void instantiation function for generic protocol witness table for EmailDocument(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type EmailDocument and conformance EmailDocument, (void (*)(uint64_t))type metadata accessor for EmailDocument);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type EmailDocument and conformance EmailDocument, (void (*)(uint64_t))type metadata accessor for EmailDocument);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type EmailDocument and conformance EmailDocument, (void (*)(uint64_t))type metadata accessor for EmailDocument);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for MobileSMSDocument(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type MobileSMSDocument and conformance MobileSMSDocument, (void (*)(uint64_t))type metadata accessor for MobileSMSDocument);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type MobileSMSDocument and conformance MobileSMSDocument, (void (*)(uint64_t))type metadata accessor for MobileSMSDocument);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type MobileSMSDocument and conformance MobileSMSDocument, (void (*)(uint64_t))type metadata accessor for MobileSMSDocument);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for CalendarEvent(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type CalendarEvent and conformance CalendarEvent, (void (*)(uint64_t))type metadata accessor for CalendarEvent);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type CalendarEvent and conformance CalendarEvent, (void (*)(uint64_t))type metadata accessor for CalendarEvent);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type CalendarEvent and conformance CalendarEvent, (void (*)(uint64_t))type metadata accessor for CalendarEvent);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for Photo(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Photo and conformance Photo, (void (*)(uint64_t))type metadata accessor for Photo);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Photo and conformance Photo, (void (*)(uint64_t))type metadata accessor for Photo);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Photo and conformance Photo, (void (*)(uint64_t))type metadata accessor for Photo);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for NoteDocument(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type NoteDocument and conformance NoteDocument, (void (*)(uint64_t))type metadata accessor for NoteDocument);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type NoteDocument and conformance NoteDocument, (void (*)(uint64_t))type metadata accessor for NoteDocument);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type NoteDocument and conformance NoteDocument, (void (*)(uint64_t))type metadata accessor for NoteDocument);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for FileDocument(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FileDocument and conformance FileDocument, (void (*)(uint64_t))type metadata accessor for FileDocument);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FileDocument and conformance FileDocument, (void (*)(uint64_t))type metadata accessor for FileDocument);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FileDocument and conformance FileDocument, (void (*)(uint64_t))type metadata accessor for FileDocument);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for WalletTransaction(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type WalletTransaction and conformance WalletTransaction, (void (*)(uint64_t))type metadata accessor for WalletTransaction);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type WalletTransaction and conformance WalletTransaction, (void (*)(uint64_t))type metadata accessor for WalletTransaction);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type WalletTransaction and conformance WalletTransaction, (void (*)(uint64_t))type metadata accessor for WalletTransaction);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for WalletPass(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type WalletPass and conformance WalletPass, (void (*)(uint64_t))type metadata accessor for WalletPass);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type WalletPass and conformance WalletPass, (void (*)(uint64_t))type metadata accessor for WalletPass);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type WalletPass and conformance WalletPass, (void (*)(uint64_t))type metadata accessor for WalletPass);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for Contact(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Contact and conformance Contact, (void (*)(uint64_t))type metadata accessor for Contact);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Contact and conformance Contact, (void (*)(uint64_t))type metadata accessor for Contact);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Contact and conformance Contact, (void (*)(uint64_t))type metadata accessor for Contact);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for FlightReservation(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  *(_QWORD *)(a1 + 8) = v2;
}

void base witness table accessor for Equatable in FlightReservation()
{
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
}

void instantiation function for generic protocol witness table for FlightReservation(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for HotelReservation(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  *(_QWORD *)(a1 + 8) = v2;
}

void instantiation function for generic protocol witness table for HotelReservation(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for RestaurantReservation(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  *(_QWORD *)(a1 + 8) = v2;
}

void instantiation function for generic protocol witness table for RestaurantReservation(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  a1[3] = v4;
}

void instantiation function for generic protocol witness table for Answer(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Answer and conformance Answer, (void (*)(uint64_t))type metadata accessor for Answer);
  a1[1] = v2;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Answer and conformance Answer, (void (*)(uint64_t))type metadata accessor for Answer);
  a1[2] = v3;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Answer and conformance Answer, (void (*)(uint64_t))type metadata accessor for Answer);
  a1[3] = v4;
}

uint64_t dispatch thunk of DataDetectable.dataDetectorResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_QWORD *initializeBufferWithCopyOfBuffer for EmailDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v31 = a2[11];
    v12 = a3[12];
    v33 = (char *)a2 + v12;
    v34 = (char *)a1 + v12;
    a1[10] = a2[10];
    a1[11] = v31;
    v13 = type metadata accessor for Date();
    v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32(v34, v33, v13);
    v14 = a3[14];
    *(_QWORD *)((char *)v4 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
    *(_QWORD *)((char *)v4 + v14) = *(_QWORD *)((char *)a2 + v14);
    v15 = a3[16];
    *(_QWORD *)((char *)v4 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    v16 = a3[17];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
    }
    v22 = a3[18];
    v23 = (_QWORD *)((char *)v4 + v22);
    v24 = (_QWORD *)((char *)a2 + v22);
    if (*v24)
    {
      v25 = v24[1];
      v26 = v24[2];
      *v23 = *v24;
      v23[1] = v25;
      v27 = v24[3];
      v28 = v24[4];
      v23[2] = v26;
      v23[3] = v27;
      v23[4] = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v29;
      v23[4] = v24[4];
    }
  }
  return v4;
}

uint64_t destroy for EmailDocument(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[12];
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[17];
  v7 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  result = *(_QWORD *)(a1 + a2[18]);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for EmailDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  v10 = a2[11];
  v11 = a3[12];
  v31 = (char *)a2 + v11;
  v32 = (char *)a1 + v11;
  a1[10] = a2[10];
  a1[11] = v10;
  v12 = type metadata accessor for Date();
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30(v32, v31, v12);
  v13 = a3[14];
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  v15 = a3[17];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
  }
  v20 = a3[18];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  if (*v22)
  {
    v23 = v22[1];
    v24 = v22[2];
    *v21 = *v22;
    v21[1] = v23;
    v25 = v22[3];
    v26 = v22[4];
    v21[2] = v24;
    v21[3] = v25;
    v21[4] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = *((_OWORD *)v22 + 1);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v27;
    v21[4] = v22[4];
  }
  return a1;
}

_QWORD *assignWithCopy for EmailDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[12];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  v10 = a3[17];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (EnumTagSinglePayload)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
LABEL_7:
  v18 = a3[18];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)((char *)a2 + v18);
  if (*(_QWORD *)((char *)a1 + v18))
  {
    if (v21)
    {
      *v19 = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v19[1] = *((_QWORD *)v20 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v19[2] = *((_QWORD *)v20 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v19[3] = *((_QWORD *)v20 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v19[4] = *((_QWORD *)v20 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of DataDetectorResults((uint64_t)a1 + v18);
      v22 = *((_QWORD *)v20 + 4);
      v23 = *((_OWORD *)v20 + 1);
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *((_OWORD *)v19 + 1) = v23;
      v19[4] = v22;
    }
  }
  else if (v21)
  {
    *v19 = v21;
    v19[1] = *((_QWORD *)v20 + 1);
    v19[2] = *((_QWORD *)v20 + 2);
    v19[3] = *((_QWORD *)v20 + 3);
    v19[4] = *((_QWORD *)v20 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = *(_OWORD *)v20;
    v25 = *((_OWORD *)v20 + 1);
    v19[4] = *((_QWORD *)v20 + 4);
    *(_OWORD *)v19 = v24;
    *((_OWORD *)v19 + 1) = v25;
  }
  return a1;
}

uint64_t outlined destroy of DataDetectorResults(uint64_t a1)
{
  destroy for DataDetectorResults();
  return a1;
}

_OWORD *initializeWithTake for EmailDocument(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[12];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[14];
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  v15 = a3[17];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
  }
  v20 = a3[18];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  return a1;
}

_QWORD *assignWithTake for EmailDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int EnumTagSinglePayload;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  v10 = a3[12];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  v14 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v17);
  v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17);
  if (EnumTagSinglePayload)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v20 = *(_QWORD *)(v17 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v15, v16, v17);
LABEL_7:
  v22 = a3[18];
  v23 = (uint64_t)a1 + v22;
  v24 = (char *)a2 + v22;
  if (!*(_QWORD *)((char *)a1 + v22))
  {
LABEL_11:
    v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v25;
    *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
    return a1;
  }
  if (!*(_QWORD *)v24)
  {
    outlined destroy of DataDetectorResults(v23);
    goto LABEL_11;
  }
  *(_QWORD *)v23 = *(_QWORD *)v24;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 8) = *((_QWORD *)v24 + 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 24) = *((_QWORD *)v24 + 3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmailDocument()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_24321B6B8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    OUTLINED_FUNCTION_78_10();
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 48);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 68);
    }
    v3 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for EmailDocument()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24321B724()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    OUTLINED_FUNCTION_78_10();
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 48);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 68);
    }
    v3 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for EmailDocument()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MobileSMSDocument(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    v11 = a3[10];
    __dst = (char *)a1 + v11;
    v12 = (char *)a2 + v11;
    a1[8] = a2[8];
    a1[9] = v10;
    v13 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(__dst, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v13);
    }
    v16 = a3[11];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
    }
    v21 = a3[12];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v21, 1, v19))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v23, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v19);
    }
    v25 = a3[14];
    *(uint64_t *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    v26 = (uint64_t *)((char *)v4 + v25);
    v27 = (char *)a2 + v25;
    v28 = *(uint64_t *)((char *)a2 + v25);
    swift_bridgeObjectRetain();
    if (v28)
    {
      v29 = *((_QWORD *)v27 + 1);
      v30 = *((_QWORD *)v27 + 2);
      *v26 = v28;
      v26[1] = v29;
      v31 = *((_QWORD *)v27 + 3);
      v32 = *((_QWORD *)v27 + 4);
      v26[2] = v30;
      v26[3] = v31;
      v26[4] = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v33 = *((_OWORD *)v27 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *((_OWORD *)v26 + 1) = v33;
      v26[4] = *((_QWORD *)v27 + 4);
    }
  }
  return v4;
}

uint64_t destroy for MobileSMSDocument(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[10];
  v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[11];
  v7 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[12];
  if (!__swift_getEnumTagSinglePayload(v8, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v8, v7);
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + a2[14]);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for MobileSMSDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  v10 = a3[10];
  __dst = (char *)a1 + v10;
  v11 = (char *)a2 + v10;
  a1[8] = a2[8];
  a1[9] = v9;
  v12 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(__dst, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v12);
  }
  v14 = a3[11];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  v19 = a3[12];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v19, 1, v17))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v20, v21, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v17);
  }
  v23 = a3[14];
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)((char *)a2 + v23);
  swift_bridgeObjectRetain();
  if (v26)
  {
    v27 = *((_QWORD *)v25 + 1);
    v28 = *((_QWORD *)v25 + 2);
    *v24 = v26;
    v24[1] = v27;
    v29 = *((_QWORD *)v25 + 3);
    v30 = *((_QWORD *)v25 + 4);
    v24[2] = v28;
    v24[3] = v29;
    v24[4] = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v31;
    v24[4] = *((_QWORD *)v25 + 4);
  }
  return a1;
}

_QWORD *assignWithCopy for MobileSMSDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[10];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[11];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL();
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v17);
  v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v20 = *(_QWORD *)(v17 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v15, v16, v17);
LABEL_13:
  v22 = a3[12];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v22, 1, v17);
  v26 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v17);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v23, v24, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v17);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v27 = *(_QWORD *)(v17 - 8);
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v17);
LABEL_18:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v23, v24, v17);
LABEL_19:
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = a3[14];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (char *)a2 + v29;
  v32 = *(_QWORD *)((char *)a2 + v29);
  if (*(_QWORD *)((char *)a1 + v29))
  {
    if (v32)
    {
      *v30 = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v30[1] = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v30[2] = *((_QWORD *)v31 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v30[3] = *((_QWORD *)v31 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v30[4] = *((_QWORD *)v31 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of DataDetectorResults((uint64_t)a1 + v29);
      v33 = *((_QWORD *)v31 + 4);
      v34 = *((_OWORD *)v31 + 1);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v34;
      v30[4] = v33;
    }
  }
  else if (v32)
  {
    *v30 = v32;
    v30[1] = *((_QWORD *)v31 + 1);
    v30[2] = *((_QWORD *)v31 + 2);
    v30[3] = *((_QWORD *)v31 + 3);
    v30[4] = *((_QWORD *)v31 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v35 = *(_OWORD *)v31;
    v36 = *((_OWORD *)v31 + 1);
    v30[4] = *((_QWORD *)v31 + 4);
    *(_OWORD *)v30 = v35;
    *((_OWORD *)v30 + 1) = v36;
  }
  return a1;
}

_OWORD *initializeWithTake for MobileSMSDocument(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = a3[10];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  v13 = a3[11];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  v18 = a3[12];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v18, 1, v16))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v19, v20, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v16);
  }
  v22 = a3[14];
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  return a1;
}

_QWORD *assignWithTake for MobileSMSDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  v10 = a3[10];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (EnumTagSinglePayload)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  v18 = a3[11];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for URL();
  v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v21);
  v23 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v24 = *(_QWORD *)(v21 - 8);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v21);
LABEL_12:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v19, v20, v21);
LABEL_13:
  v26 = a3[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v26, 1, v21);
  v30 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v21);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v27, v28, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v21);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v31 = *(_QWORD *)(v21 - 8);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v21);
LABEL_18:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v27, v28, v21);
LABEL_19:
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  v33 = a3[14];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  if (!*(_QWORD *)((char *)a1 + v33))
  {
LABEL_23:
    v36 = *((_OWORD *)v35 + 1);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *(_OWORD *)(v34 + 16) = v36;
    *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
    return a1;
  }
  if (!*(_QWORD *)v35)
  {
    outlined destroy of DataDetectorResults(v34);
    goto LABEL_23;
  }
  *(_QWORD *)v34 = *(_QWORD *)v35;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34 + 8) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34 + 24) = *((_QWORD *)v35 + 3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MobileSMSDocument()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_24321C898()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 40);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 44);
    }
    v3 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for MobileSMSDocument()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24321C90C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 40);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 44);
    }
    v3 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for MobileSMSDocument()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CalendarEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    v16 = a3[8];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v16, 1, v13))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v17, v18, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v13);
    }
    v20 = a3[9];
    v21 = a3[10];
    v22 = (uint64_t *)((char *)v4 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    *(uint64_t *)((char *)v4 + v21) = *(uint64_t *)((char *)a2 + v21);
    v25 = a3[12];
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v26 = (uint64_t *)((char *)v4 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = a3[13];
    v30 = (char *)v4 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
    }
    v34 = a3[14];
    v35 = (uint64_t *)((char *)v4 + v34);
    v36 = (uint64_t *)((char *)a2 + v34);
    if (*v36)
    {
      v37 = v36[1];
      v38 = v36[2];
      *v35 = *v36;
      v35[1] = v37;
      v39 = v36[3];
      v40 = v36[4];
      v35[2] = v38;
      v35[3] = v39;
      v35[4] = v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v41 = *((_OWORD *)v36 + 1);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *((_OWORD *)v35 + 1) = v41;
      v35[4] = v36[4];
    }
  }
  return v4;
}

uint64_t destroy for CalendarEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[8];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + a2[13];
  v8 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  result = *(_QWORD *)(a1 + a2[14]);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for CalendarEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v14, 1, v12))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v15, v16, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v12);
  }
  v18 = a3[9];
  v19 = a3[10];
  v20 = (_QWORD *)((char *)a1 + v18);
  v21 = (_QWORD *)((char *)a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v23 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = a3[13];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  v32 = a3[14];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  if (*v34)
  {
    v35 = v34[1];
    v36 = v34[2];
    *v33 = *v34;
    v33[1] = v35;
    v37 = v34[3];
    v38 = v34[4];
    v33[2] = v36;
    v33[3] = v37;
    v33[4] = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v39 = *((_OWORD *)v34 + 1);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *((_OWORD *)v33 + 1) = v39;
    v33[4] = v34[4];
  }
  return a1;
}

_QWORD *assignWithCopy for CalendarEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v15, v16, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v19 = *(_QWORD *)(v9 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
LABEL_13:
  v21 = a3[9];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = a3[12];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[13];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for URL();
  v31 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v30);
  v32 = __swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v33 = *(_QWORD *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_18:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v28, v29, v30);
LABEL_19:
  v35 = a3[14];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (char *)a2 + v35;
  v38 = *(_QWORD *)((char *)a2 + v35);
  if (*(_QWORD *)((char *)a1 + v35))
  {
    if (v38)
    {
      *v36 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36[1] = *((_QWORD *)v37 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36[2] = *((_QWORD *)v37 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36[3] = *((_QWORD *)v37 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36[4] = *((_QWORD *)v37 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of DataDetectorResults((uint64_t)a1 + v35);
      v39 = *((_QWORD *)v37 + 4);
      v40 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v40;
      v36[4] = v39;
    }
  }
  else if (v38)
  {
    *v36 = v38;
    v36[1] = *((_QWORD *)v37 + 1);
    v36[2] = *((_QWORD *)v37 + 2);
    v36[3] = *((_QWORD *)v37 + 3);
    v36[4] = *((_QWORD *)v37 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v41 = *(_OWORD *)v37;
    v42 = *((_OWORD *)v37 + 1);
    v36[4] = *((_QWORD *)v37 + 4);
    *(_OWORD *)v36 = v41;
    *((_OWORD *)v36 + 1) = v42;
  }
  return a1;
}

_OWORD *initializeWithTake for CalendarEvent(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[8];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v12, 1, v10))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
  }
  v16 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  v17 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  v18 = a3[13];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
  }
  v23 = a3[14];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
  return a1;
}

_QWORD *assignWithTake for CalendarEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  v17 = a3[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v17, 1, v12);
  v21 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v12);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v18, v19, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v22 = *(_QWORD *)(v12 - 8);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v12);
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v18, v19, v12);
LABEL_13:
  v24 = a3[9];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  v29 = a3[12];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v34 = a3[13];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for URL();
  v38 = __swift_getEnumTagSinglePayload((uint64_t)v35, 1, v37);
  v39 = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v40 = *(_QWORD *)(v37 - 8);
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v37);
LABEL_18:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v35, v36, v37);
LABEL_19:
  v42 = a3[14];
  v43 = (uint64_t)a1 + v42;
  v44 = (char *)a2 + v42;
  if (!*(_QWORD *)((char *)a1 + v42))
  {
LABEL_23:
    v45 = *((_OWORD *)v44 + 1);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v45;
    *(_QWORD *)(v43 + 32) = *((_QWORD *)v44 + 4);
    return a1;
  }
  if (!*(_QWORD *)v44)
  {
    outlined destroy of DataDetectorResults(v43);
    goto LABEL_23;
  }
  *(_QWORD *)v43 = *(_QWORD *)v44;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 8) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 16) = *((_QWORD *)v44 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 24) = *((_QWORD *)v44 + 3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 32) = *((_QWORD *)v44 + 4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CalendarEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for CalendarEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Photo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v12 = a3[11];
    v24 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    a1[10] = a2[10];
    v23 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v23))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(__dst, v24, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v23);
    }
    v15 = a3[13];
    *(uint64_t *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)v4 + v15) = *(uint64_t *)((char *)a2 + v15);
    v16 = a3[15];
    *(uint64_t *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *(uint64_t *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    v17 = a3[16];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
  }
  return v4;
}

uint64_t destroy for Photo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 64);
  v7 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return result;
}

_QWORD *initializeWithCopy for Photo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  v11 = a3[11];
  v22 = (char *)a2 + v11;
  __dst = (char *)a1 + v11;
  a1[10] = a2[10];
  v21 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v21))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(__dst, v22, v21);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v21);
  }
  v13 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[16];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
  }
  return a1;
}

_QWORD *assignWithCopy for Photo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[11];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[16];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL();
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v17);
  v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17);
  if (!v18)
  {
    v20 = *(_QWORD *)(v17 - 8);
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  return a1;
}

uint64_t initializeWithTake for Photo(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[11];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[16];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  return a1;
}

_QWORD *assignWithTake for Photo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[10];
  a1[9] = a2[9];
  a1[10] = v9;
  swift_bridgeObjectRelease();
  v10 = a3[11];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (EnumTagSinglePayload)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  v18 = a3[16];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for URL();
  v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v21);
  v23 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21);
  if (!v22)
  {
    v24 = *(_QWORD *)(v21 - 8);
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Photo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_24321E868()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 64);
    }
    v3 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for Photo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24321E8DC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 64);
    }
    v3 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for Photo()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NoteDocument(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    v11 = a3[8];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    v14 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
    }
    v17 = a3[9];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v17, 1, v14))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v18, v19, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v14);
    }
    v21 = a3[10];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
    }
  }
  return v4;
}

uint64_t destroy for NoteDocument(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[9];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  v7 = a1 + a2[10];
  v8 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return result;
}

_QWORD *initializeWithCopy for NoteDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  v13 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v15, 1, v13))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v16, v17, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v13);
  }
  v19 = a3[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
  }
  return a1;
}

_QWORD *assignWithCopy for NoteDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[9];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v15, v16, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v19 = *(_QWORD *)(v9 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
LABEL_13:
  v21 = a3[10];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for URL();
  v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v24);
  v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24);
  if (!v25)
  {
    v27 = *(_QWORD *)(v24 - 8);
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v24);
    goto LABEL_18;
  }
  if (v26)
  {
LABEL_18:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
  return a1;
}

_OWORD *initializeWithTake for NoteDocument(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[8];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  v13 = a3[9];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v13, 1, v11))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
  }
  v17 = a3[10];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *assignWithTake for NoteDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (EnumTagSinglePayload)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  v18 = a3[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v18, 1, v13);
  v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v13);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v19, v20, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v23 = *(_QWORD *)(v13 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v13);
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v13);
LABEL_13:
  v25 = a3[10];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for URL();
  v29 = __swift_getEnumTagSinglePayload((uint64_t)v26, 1, v28);
  v30 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28);
  if (!v29)
  {
    v31 = *(_QWORD *)(v28 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v26, v27, v28);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v28);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for NoteDocument()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_24321F6A0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 32);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 40);
    }
    v3 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for NoteDocument()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24321F714()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 32);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 40);
    }
    v3 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for NoteDocument()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDocument(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = (void *)a2[2];
    a1[2] = (uint64_t)v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    v11 = v6;
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t destroy for FileDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for FileDocument(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  v10 = v5;
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithCopy for FileDocument(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for FileDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for FileDocument(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (void *)a1[2];
  a1[2] = a2[2];

  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (!EnumTagSinglePayload)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocument()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_24321FD74()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v2 = OUTLINED_FUNCTION_104_6(*(int *)(v0 + 24));
    OUTLINED_FUNCTION_33_2(v2, v3, v4);
  }
}

uint64_t storeEnumTagSinglePayload for FileDocument()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24321FDC8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v3 = OUTLINED_FUNCTION_45_10(*(int *)(v2 + 24));
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for FileDocument()
{
  unint64_t v0;

  type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for FileDocument.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24321FEEC + 4 * byte_243351B97[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24321FF20 + 4 * byte_243351B92[v4]))();
}

uint64_t sub_24321FF20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24321FF28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24321FF30);
  return result;
}

uint64_t sub_24321FF3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24321FF44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24321FF48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24321FF50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileDocument.CodingKeys()
{
  return &type metadata for FileDocument.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for WalletTransaction(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    v16 = a3[8];
    v17 = a3[9];
    v18 = (uint64_t *)((char *)v4 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)v4 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[10];
    v25 = a3[11];
    v26 = (uint64_t *)((char *)v4 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (char *)v4 + v25;
    v30 = (char *)a2 + v25;
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *(_QWORD *)(v29 + 13) = *(_QWORD *)(v30 + 13);
    v31 = a3[12];
    v32 = a3[13];
    v33 = (uint64_t *)((char *)v4 + v31);
    v34 = (uint64_t *)((char *)a2 + v31);
    v35 = v34[1];
    v36 = (char *)a2 + v32;
    v37 = (char *)v4 + v32;
    *v33 = *v34;
    v33[1] = v35;
    v38 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v38))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v37, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v37, v36, v38);
      __swift_storeEnumTagSinglePayload((uint64_t)v37, 0, 1, v38);
    }
  }
  return v4;
}

uint64_t destroy for WalletTransaction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 52);
  v7 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return result;
}

_QWORD *initializeWithCopy for WalletTransaction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  v14 = a3[8];
  v15 = a3[9];
  v16 = (_QWORD *)((char *)a1 + v14);
  v17 = (_QWORD *)((char *)a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = (_QWORD *)((char *)a1 + v15);
  v20 = (_QWORD *)((char *)a2 + v15);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = a3[10];
  v23 = a3[11];
  v24 = (_QWORD *)((char *)a1 + v22);
  v25 = (_QWORD *)((char *)a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = (char *)a1 + v23;
  v28 = (char *)a2 + v23;
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_QWORD *)(v27 + 13) = *(_QWORD *)(v28 + 13);
  v29 = a3[12];
  v30 = a3[13];
  v31 = (_QWORD *)((char *)a1 + v29);
  v32 = (_QWORD *)((char *)a2 + v29);
  v33 = v32[1];
  v34 = (char *)a2 + v30;
  v35 = (char *)a1 + v30;
  *v31 = *v32;
  v31[1] = v33;
  v36 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v36))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v35, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v35, v34, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v36);
  }
  return a1;
}

_QWORD *assignWithCopy for WalletTransaction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[10];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[11];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_OWORD *)v25;
  *(_QWORD *)(v24 + 13) = *(_QWORD *)(v25 + 13);
  *(_OWORD *)v24 = v26;
  v27 = a3[12];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = a3[13];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for URL();
  v34 = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v33);
  v35 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33);
  if (!v34)
  {
    v36 = *(_QWORD *)(v33 - 8);
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v31, v32, v33);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v33);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v33);
  return a1;
}

_OWORD *initializeWithTake for WalletTransaction(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 13) = *(_QWORD *)(v15 + 13);
  v16 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  return a1;
}

_QWORD *assignWithTake for WalletTransaction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  v17 = a3[8];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[9];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[10];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = a3[11];
  v33 = a3[12];
  v34 = (char *)a1 + v32;
  v35 = (char *)a2 + v32;
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_QWORD *)(v34 + 13) = *(_QWORD *)(v35 + 13);
  v36 = (_QWORD *)((char *)a1 + v33);
  v37 = (_QWORD *)((char *)a2 + v33);
  v39 = *v37;
  v38 = v37[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  v40 = a3[13];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = type metadata accessor for URL();
  v44 = __swift_getEnumTagSinglePayload((uint64_t)v41, 1, v43);
  v45 = __swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43);
  if (!v44)
  {
    v46 = *(_QWORD *)(v43 - 8);
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v41, v42, v43);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v43);
    goto LABEL_12;
  }
  if (v45)
  {
LABEL_12:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
  return a1;
}

uint64_t getEnumTagSinglePayload for WalletTransaction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_index_3Tm()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 28);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 52);
    }
    v3 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for WalletTransaction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_4Tm()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 28);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 52);
    }
    v3 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for WalletTransaction()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WalletPass(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    v16 = a3[8];
    v17 = a3[9];
    v18 = (uint64_t *)((char *)v4 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (char *)v4 + v17;
    v22 = (char *)a2 + v17;
    v23 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
    }
  }
  return v4;
}

uint64_t destroy for WalletPass(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 36);
  v7 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return result;
}

_QWORD *initializeWithCopy for WalletPass(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  v14 = a3[8];
  v15 = a3[9];
  v16 = (_QWORD *)((char *)a1 + v14);
  v17 = (_QWORD *)((char *)a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = (char *)a1 + v15;
  v20 = (char *)a2 + v15;
  v21 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
  }
  return a1;
}

_QWORD *assignWithCopy for WalletPass(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for URL();
  v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v20);
  v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20);
  if (!v21)
  {
    v23 = *(_QWORD *)(v20 - 8);
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
  return a1;
}

_OWORD *initializeWithTake for WalletPass(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithTake for WalletPass(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  v17 = a3[8];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[9];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for URL();
  v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v25);
  v27 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25);
  if (!v26)
  {
    v28 = *(_QWORD *)(v25 - 8);
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v23, v24, v25);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v25);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for WalletPass()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_2432216F8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 28);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 36);
    }
    v3 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for WalletPass()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24322176C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = *(int *)(v0 + 28);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v2 = *(int *)(v0 + 36);
    }
    v3 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for WalletPass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Contact(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    a1[6] = a2[6];
    v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t destroy for Contact(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for Contact(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  a1[6] = a2[6];
  v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for Contact(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for Contact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 36);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithTake for Contact(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 36);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (!EnumTagSinglePayload)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Contact()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_243221EE8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v2 = OUTLINED_FUNCTION_104_6(*(int *)(v0 + 36));
    OUTLINED_FUNCTION_33_2(v2, v3, v4);
  }
}

uint64_t storeEnumTagSinglePayload for Contact()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243221F3C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v3 = OUTLINED_FUNCTION_45_10(*(int *)(v2 + 36));
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for Contact()
{
  unint64_t v0;

  type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t dispatch thunk of InstantAnswerDocument.answers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InstantAnswerDocument.answerAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InstantAnswerDocument.bundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InstantAnswerDocument.mailMessageId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

char *initializeBufferWithCopyOfBuffer for FlightReservation(uint64_t *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[7];
    *(_QWORD *)&v4[a3[6]] = *(uint64_t *)((char *)a2 + a3[6]);
    *(_QWORD *)&v4[v14] = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[8];
    v16 = a3[9];
    v17 = &v4[v15];
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *(_QWORD *)v17 = *v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = &v4[v16];
    v21 = (uint64_t *)((char *)a2 + v16);
    v22 = v21[1];
    *(_QWORD *)v20 = *v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = a3[10];
    v24 = a3[11];
    v25 = &v4[v23];
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *(_QWORD *)v25 = *v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = &v4[v24];
    v29 = (char *)a2 + v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v11))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v28, v29, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v11);
    }
    v31 = a3[12];
    v32 = &v4[v31];
    v33 = (char *)a2 + v31;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v31, 1, v11))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v32, v33, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v32, 0, 1, v11);
    }
    v35 = a3[13];
    v36 = a3[14];
    v37 = &v4[v35];
    v38 = (uint64_t *)((char *)a2 + v35);
    v39 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = &v4[v36];
    v41 = (uint64_t *)((char *)a2 + v36);
    v42 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v42;
    v43 = a3[15];
    v44 = &v4[v43];
    v45 = (char *)a2 + v43;
    v46 = type metadata accessor for DateComponents();
    v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47(v44, v45, v46);
    v47(&v4[a3[16]], (char *)a2 + a3[16], v46);
    v48 = a3[17];
    v49 = &v4[v48];
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for TimeZone();
    if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, v51))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
      __swift_storeEnumTagSinglePayload((uint64_t)v49, 0, 1, v51);
    }
    v53 = a3[18];
    v54 = &v4[v53];
    v55 = (char *)a2 + v53;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v53, 1, v51))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v54, v55, v51);
      __swift_storeEnumTagSinglePayload((uint64_t)v54, 0, 1, v51);
    }
    v57 = a3[19];
    v58 = a3[20];
    v59 = &v4[v57];
    v60 = (uint64_t *)((char *)a2 + v57);
    v61 = v60[1];
    *(_QWORD *)v59 = *v60;
    *((_QWORD *)v59 + 1) = v61;
    v62 = &v4[v58];
    v63 = (uint64_t *)((char *)a2 + v58);
    v98 = v63[1];
    *(_QWORD *)v62 = *v63;
    *((_QWORD *)v62 + 1) = v98;
    v64 = a3[21];
    v65 = a3[22];
    v66 = &v4[v64];
    v67 = (uint64_t *)((char *)a2 + v64);
    v68 = v67[1];
    *(_QWORD *)v66 = *v67;
    *((_QWORD *)v66 + 1) = v68;
    v69 = &v4[v65];
    v70 = (uint64_t *)((char *)a2 + v65);
    v97 = v70[1];
    *(_QWORD *)v69 = *v70;
    *((_QWORD *)v69 + 1) = v97;
    v71 = a3[23];
    v72 = a3[24];
    v73 = &v4[v71];
    v74 = (uint64_t *)((char *)a2 + v71);
    v75 = v74[1];
    *(_QWORD *)v73 = *v74;
    *((_QWORD *)v73 + 1) = v75;
    *(_QWORD *)&v4[v72] = *(uint64_t *)((char *)a2 + v72);
    v76 = a3[26];
    *(_QWORD *)&v4[a3[25]] = *(uint64_t *)((char *)a2 + a3[25]);
    v77 = &v4[v76];
    v78 = (uint64_t *)((char *)a2 + v76);
    v79 = v78[1];
    *(_QWORD *)v77 = *v78;
    *((_QWORD *)v77 + 1) = v79;
    v80 = a3[27];
    v81 = a3[28];
    v82 = &v4[v80];
    v83 = (uint64_t *)((char *)a2 + v80);
    v84 = v83[1];
    *(_QWORD *)v82 = *v83;
    *((_QWORD *)v82 + 1) = v84;
    v85 = &v4[v81];
    v86 = (uint64_t *)((char *)a2 + v81);
    v87 = v86[1];
    *(_QWORD *)v85 = *v86;
    *((_QWORD *)v85 + 1) = v87;
    v88 = a3[29];
    v89 = a3[30];
    v90 = &v4[v88];
    v91 = (uint64_t *)((char *)a2 + v88);
    v92 = v91[1];
    *(_QWORD *)v90 = *v91;
    *((_QWORD *)v90 + 1) = v92;
    v93 = &v4[v89];
    v94 = (uint64_t *)((char *)a2 + v89);
    v95 = v94[1];
    *(_QWORD *)v93 = *v94;
    *((_QWORD *)v93 + 1) = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FlightReservation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[11];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  v7 = a1 + a2[12];
  if (!__swift_getEnumTagSinglePayload(v7, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v7, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + a2[15];
  v9 = type metadata accessor for DateComponents();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + a2[16], v9);
  v11 = a1 + a2[17];
  v12 = type metadata accessor for TimeZone();
  if (!__swift_getEnumTagSinglePayload(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[18];
  if (!__swift_getEnumTagSinglePayload(v13, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v13, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for FlightReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[8];
  v14 = a3[9];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  v18 = &a1[v14];
  v19 = &a2[v14];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = a3[10];
  v22 = a3[11];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  v26 = &a1[v22];
  v27 = &a2[v22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v10))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v26, v27, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v10);
  }
  v29 = a3[12];
  v30 = &a1[v29];
  v31 = &a2[v29];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v29], 1, v10))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v30, v31, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v10);
  }
  v33 = a3[13];
  v34 = a3[14];
  v35 = &a1[v33];
  v36 = &a2[v33];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v38 = &a1[v34];
  v39 = &a2[v34];
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = v40;
  v41 = a3[15];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v44 = type metadata accessor for DateComponents();
  v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45(v42, v43, v44);
  v45(&a1[a3[16]], &a2[a3[16]], v44);
  v46 = a3[17];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = type metadata accessor for TimeZone();
  if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
    __swift_storeEnumTagSinglePayload((uint64_t)v47, 0, 1, v49);
  }
  v51 = a3[18];
  v52 = &a1[v51];
  v53 = &a2[v51];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v51], 1, v49))
  {
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v52, v53, v49);
    __swift_storeEnumTagSinglePayload((uint64_t)v52, 0, 1, v49);
  }
  v55 = a3[19];
  v56 = a3[20];
  v57 = &a1[v55];
  v58 = &a2[v55];
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *((_QWORD *)v57 + 1) = v59;
  v60 = &a1[v56];
  v61 = &a2[v56];
  v96 = *((_QWORD *)v61 + 1);
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *((_QWORD *)v60 + 1) = v96;
  v62 = a3[21];
  v63 = a3[22];
  v64 = &a1[v62];
  v65 = &a2[v62];
  v66 = *((_QWORD *)v65 + 1);
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *((_QWORD *)v64 + 1) = v66;
  v67 = &a1[v63];
  v68 = &a2[v63];
  v95 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_QWORD *)v67 + 1) = v95;
  v69 = a3[23];
  v70 = a3[24];
  v71 = &a1[v69];
  v72 = &a2[v69];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  *(_QWORD *)&a1[v70] = *(_QWORD *)&a2[v70];
  v74 = a3[26];
  *(_QWORD *)&a1[a3[25]] = *(_QWORD *)&a2[a3[25]];
  v75 = &a1[v74];
  v76 = &a2[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = a3[27];
  v79 = a3[28];
  v80 = &a1[v78];
  v81 = &a2[v78];
  v82 = *((_QWORD *)v81 + 1);
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *((_QWORD *)v80 + 1) = v82;
  v83 = &a1[v79];
  v84 = &a2[v79];
  v85 = *((_QWORD *)v84 + 1);
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *((_QWORD *)v83 + 1) = v85;
  v86 = a3[29];
  v87 = a3[30];
  v88 = &a1[v86];
  v89 = &a2[v86];
  v90 = *((_QWORD *)v89 + 1);
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *((_QWORD *)v88 + 1) = v90;
  v91 = &a1[v87];
  v92 = &a2[v87];
  v93 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for FlightReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[8];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[10];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[11];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v23], 1, v9);
  v27 = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v9);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v24, v25, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v28 = *(_QWORD *)(v9 - 8);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v9);
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v24, v25, v9);
LABEL_13:
  v30 = a3[12];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v30], 1, v9);
  v34 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v9);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v31, v32, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v35 = *(_QWORD *)(v9 - 8);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v9);
LABEL_18:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v31, v32, v9);
LABEL_19:
  v37 = a3[13];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3[14];
  v41 = &a1[v40];
  v42 = &a2[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = a3[15];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = type metadata accessor for DateComponents();
  v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24);
  v47(v44, v45, v46);
  v47(&a1[a3[16]], &a2[a3[16]], v46);
  v48 = a3[17];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = type metadata accessor for TimeZone();
  LODWORD(v47) = __swift_getEnumTagSinglePayload((uint64_t)v49, 1, v51);
  v52 = __swift_getEnumTagSinglePayload((uint64_t)v50, 1, v51);
  if ((_DWORD)v47)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
      __swift_storeEnumTagSinglePayload((uint64_t)v49, 0, 1, v51);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v53 = *(_QWORD *)(v51 - 8);
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v51);
LABEL_24:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 24))(v49, v50, v51);
LABEL_25:
  v55 = a3[18];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v55], 1, v51);
  v59 = __swift_getEnumTagSinglePayload((uint64_t)v57, 1, v51);
  if (!v58)
  {
    v60 = *(_QWORD *)(v51 - 8);
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 24))(v56, v57, v51);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v51);
    goto LABEL_30;
  }
  if (v59)
  {
LABEL_30:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v56, v57, v51);
  __swift_storeEnumTagSinglePayload((uint64_t)v56, 0, 1, v51);
LABEL_31:
  v62 = a3[19];
  v63 = &a1[v62];
  v64 = &a2[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v65 = a3[20];
  v66 = &a1[v65];
  v67 = &a2[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = a3[21];
  v69 = &a1[v68];
  v70 = &a2[v68];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71 = a3[22];
  v72 = &a1[v71];
  v73 = &a2[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v74 = a3[23];
  v75 = &a1[v74];
  v76 = &a2[v74];
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = *((_QWORD *)v76 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[25]] = *(_QWORD *)&a2[a3[25]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = a3[26];
  v78 = &a1[v77];
  v79 = &a2[v77];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *((_QWORD *)v78 + 1) = *((_QWORD *)v79 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80 = a3[27];
  v81 = &a1[v80];
  v82 = &a2[v80];
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83 = a3[28];
  v84 = &a1[v83];
  v85 = &a2[v83];
  *(_QWORD *)v84 = *(_QWORD *)v85;
  *((_QWORD *)v84 + 1) = *((_QWORD *)v85 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v86 = a3[29];
  v87 = &a1[v86];
  v88 = &a2[v86];
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *((_QWORD *)v87 + 1) = *((_QWORD *)v88 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89 = a3[30];
  v90 = &a1[v89];
  v91 = &a2[v89];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FlightReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v12 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  v13 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v13], 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v14, v15, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v9);
  }
  v17 = a3[12];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v17], 1, v9))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v18, v19, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v9);
  }
  v21 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  v22 = a3[15];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for DateComponents();
  v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
  v26(v23, v24, v25);
  v26(&a1[a3[16]], &a2[a3[16]], v25);
  v27 = a3[17];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for TimeZone();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  v32 = a3[18];
  v33 = &a1[v32];
  v34 = &a2[v32];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v32], 1, v30))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v33, v34, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v30);
  }
  v36 = a3[20];
  *(_OWORD *)&a1[a3[19]] = *(_OWORD *)&a2[a3[19]];
  *(_OWORD *)&a1[v36] = *(_OWORD *)&a2[v36];
  v37 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v37] = *(_OWORD *)&a2[v37];
  v38 = a3[24];
  *(_OWORD *)&a1[a3[23]] = *(_OWORD *)&a2[a3[23]];
  *(_QWORD *)&a1[v38] = *(_QWORD *)&a2[v38];
  v39 = a3[26];
  *(_QWORD *)&a1[a3[25]] = *(_QWORD *)&a2[a3[25]];
  *(_OWORD *)&a1[v39] = *(_OWORD *)&a2[v39];
  v40 = a3[28];
  *(_OWORD *)&a1[a3[27]] = *(_OWORD *)&a2[a3[27]];
  *(_OWORD *)&a1[v40] = *(_OWORD *)&a2[v40];
  v41 = a3[30];
  *(_OWORD *)&a1[a3[29]] = *(_OWORD *)&a2[a3[29]];
  *(_OWORD *)&a1[v41] = *(_OWORD *)&a2[v41];
  return a1;
}

char *assignWithTake for FlightReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  v15 = a3[8];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  v20 = a3[9];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  v25 = a3[10];
  v26 = &a1[v25];
  v27 = (uint64_t *)&a2[v25];
  v29 = *v27;
  v28 = v27[1];
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v30 = a3[11];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v30], 1, v10);
  v34 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v10);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v31, v32, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v35 = *(_QWORD *)(v10 - 8);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v10);
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v31, v32, v10);
LABEL_13:
  v37 = a3[12];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v37], 1, v10);
  v41 = __swift_getEnumTagSinglePayload((uint64_t)v39, 1, v10);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v38, v39, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v42 = *(_QWORD *)(v10 - 8);
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v10);
LABEL_18:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v38, v39, v10);
LABEL_19:
  v44 = a3[13];
  v45 = &a1[v44];
  v46 = (uint64_t *)&a2[v44];
  v48 = *v46;
  v47 = v46[1];
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v49 = a3[14];
  v50 = &a1[v49];
  v51 = (uint64_t *)&a2[v49];
  v53 = *v51;
  v52 = v51[1];
  *(_QWORD *)v50 = v53;
  *((_QWORD *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  v54 = a3[15];
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = type metadata accessor for DateComponents();
  v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 40);
  v58(v55, v56, v57);
  v58(&a1[a3[16]], &a2[a3[16]], v57);
  v59 = a3[17];
  v60 = &a1[v59];
  v61 = &a2[v59];
  v62 = type metadata accessor for TimeZone();
  LODWORD(v58) = __swift_getEnumTagSinglePayload((uint64_t)v60, 1, v62);
  v63 = __swift_getEnumTagSinglePayload((uint64_t)v61, 1, v62);
  if ((_DWORD)v58)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
      __swift_storeEnumTagSinglePayload((uint64_t)v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v64 = *(_QWORD *)(v62 - 8);
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v62);
LABEL_24:
    v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 40))(v60, v61, v62);
LABEL_25:
  v66 = a3[18];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v69 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v66], 1, v62);
  v70 = __swift_getEnumTagSinglePayload((uint64_t)v68, 1, v62);
  if (!v69)
  {
    v71 = *(_QWORD *)(v62 - 8);
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v67, v68, v62);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v67, v62);
    goto LABEL_30;
  }
  if (v70)
  {
LABEL_30:
    v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v67, v68, v62);
  __swift_storeEnumTagSinglePayload((uint64_t)v67, 0, 1, v62);
LABEL_31:
  v73 = a3[19];
  v74 = &a1[v73];
  v75 = (uint64_t *)&a2[v73];
  v77 = *v75;
  v76 = v75[1];
  *(_QWORD *)v74 = v77;
  *((_QWORD *)v74 + 1) = v76;
  swift_bridgeObjectRelease();
  v78 = a3[20];
  v79 = &a1[v78];
  v80 = (uint64_t *)&a2[v78];
  v82 = *v80;
  v81 = v80[1];
  *(_QWORD *)v79 = v82;
  *((_QWORD *)v79 + 1) = v81;
  swift_bridgeObjectRelease();
  v83 = a3[21];
  v84 = &a1[v83];
  v85 = (uint64_t *)&a2[v83];
  v87 = *v85;
  v86 = v85[1];
  *(_QWORD *)v84 = v87;
  *((_QWORD *)v84 + 1) = v86;
  swift_bridgeObjectRelease();
  v88 = a3[22];
  v89 = &a1[v88];
  v90 = (uint64_t *)&a2[v88];
  v92 = *v90;
  v91 = v90[1];
  *(_QWORD *)v89 = v92;
  *((_QWORD *)v89 + 1) = v91;
  swift_bridgeObjectRelease();
  v93 = a3[23];
  v94 = &a1[v93];
  v95 = (uint64_t *)&a2[v93];
  v97 = *v95;
  v96 = v95[1];
  *(_QWORD *)v94 = v97;
  *((_QWORD *)v94 + 1) = v96;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[25]] = *(_QWORD *)&a2[a3[25]];
  swift_bridgeObjectRelease();
  v98 = a3[26];
  v99 = &a1[v98];
  v100 = (uint64_t *)&a2[v98];
  v102 = *v100;
  v101 = v100[1];
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease();
  v103 = a3[27];
  v104 = &a1[v103];
  v105 = (uint64_t *)&a2[v103];
  v107 = *v105;
  v106 = v105[1];
  *(_QWORD *)v104 = v107;
  *((_QWORD *)v104 + 1) = v106;
  swift_bridgeObjectRelease();
  v108 = a3[28];
  v109 = &a1[v108];
  v110 = (uint64_t *)&a2[v108];
  v112 = *v110;
  v111 = v110[1];
  *(_QWORD *)v109 = v112;
  *((_QWORD *)v109 + 1) = v111;
  swift_bridgeObjectRelease();
  v113 = a3[29];
  v114 = &a1[v113];
  v115 = (uint64_t *)&a2[v113];
  v117 = *v115;
  v116 = v115[1];
  *(_QWORD *)v114 = v117;
  *((_QWORD *)v114 + 1) = v116;
  swift_bridgeObjectRelease();
  v118 = a3[30];
  v119 = &a1[v118];
  v120 = (uint64_t *)&a2[v118];
  v122 = *v120;
  v121 = v120[1];
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightReservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_243223DA0()
{
  int *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = v0[5];
    }
    else
    {
      OUTLINED_FUNCTION_68_8();
      OUTLINED_FUNCTION_53_11();
      if (v3)
      {
        v2 = v0[15];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
        v2 = v0[17];
      }
    }
    v4 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for FlightReservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243223E2C()
{
  int *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = v0[5];
    }
    else
    {
      OUTLINED_FUNCTION_68_8();
      OUTLINED_FUNCTION_52_11();
      if (v3)
      {
        v2 = v0[15];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
        v2 = v0[17];
      }
    }
    v4 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v4, v5, v6, v7);
  }
}

void type metadata completion function for FlightReservation()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for TimeZone?, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

char *initializeBufferWithCopyOfBuffer for HotelReservation(uint64_t *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v64;
  char *v65;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[7];
    *(_QWORD *)&v4[a3[6]] = *(uint64_t *)((char *)a2 + a3[6]);
    *(_QWORD *)&v4[v14] = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[8];
    v16 = a3[9];
    v17 = &v4[v15];
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *(_QWORD *)v17 = *v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = &v4[v16];
    v21 = (uint64_t *)((char *)a2 + v16);
    v22 = v21[1];
    *(_QWORD *)v20 = *v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = a3[10];
    v24 = a3[11];
    v25 = &v4[v23];
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *(_QWORD *)v25 = *v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = &v4[v24];
    v29 = (uint64_t *)((char *)a2 + v24);
    v30 = v29[1];
    *(_QWORD *)v28 = *v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = a3[12];
    v64 = (char *)a2 + v31;
    v65 = &v4[v31];
    v32 = type metadata accessor for DateComponents();
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v65, v64, v32);
    v33(&v4[a3[13]], (char *)a2 + a3[13], v32);
    v34 = a3[14];
    v35 = &v4[v34];
    v36 = (char *)a2 + v34;
    v37 = type metadata accessor for TimeZone();
    if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
    }
    v39 = a3[15];
    v40 = a3[16];
    v41 = &v4[v39];
    v42 = (uint64_t *)((char *)a2 + v39);
    v43 = v42[1];
    *(_QWORD *)v41 = *v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = &v4[v40];
    v45 = (uint64_t *)((char *)a2 + v40);
    v46 = v45[1];
    *(_QWORD *)v44 = *v45;
    *((_QWORD *)v44 + 1) = v46;
    v47 = a3[17];
    v48 = a3[18];
    v49 = &v4[v47];
    v50 = (uint64_t *)((char *)a2 + v47);
    v51 = v50[1];
    *(_QWORD *)v49 = *v50;
    *((_QWORD *)v49 + 1) = v51;
    v52 = &v4[v48];
    v53 = (uint64_t *)((char *)a2 + v48);
    v54 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v54;
    v55 = a3[19];
    v56 = a3[20];
    v57 = &v4[v55];
    v58 = (uint64_t *)((char *)a2 + v55);
    v59 = v58[1];
    *(_QWORD *)v57 = *v58;
    *((_QWORD *)v57 + 1) = v59;
    v60 = &v4[v56];
    v61 = (uint64_t *)((char *)a2 + v56);
    v62 = v61[1];
    *(_QWORD *)v60 = *v61;
    *((_QWORD *)v60 + 1) = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for HotelReservation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[12];
  v7 = type metadata accessor for DateComponents();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[13], v7);
  v9 = a1 + a2[14];
  v10 = type metadata accessor for TimeZone();
  if (!__swift_getEnumTagSinglePayload(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for HotelReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v62;
  char *v63;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[8];
  v14 = a3[9];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  v18 = &a1[v14];
  v19 = &a2[v14];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = a3[10];
  v22 = a3[11];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  v26 = &a1[v22];
  v27 = &a2[v22];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v29 = a3[12];
  v62 = &a2[v29];
  v63 = &a1[v29];
  v30 = type metadata accessor for DateComponents();
  v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31(v63, v62, v30);
  v31(&a1[a3[13]], &a2[a3[13]], v30);
  v32 = a3[14];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for TimeZone();
  if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
  }
  v37 = a3[15];
  v38 = a3[16];
  v39 = &a1[v37];
  v40 = &a2[v37];
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  v42 = &a1[v38];
  v43 = &a2[v38];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = a3[17];
  v46 = a3[18];
  v47 = &a1[v45];
  v48 = &a2[v45];
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = v49;
  v50 = &a1[v46];
  v51 = &a2[v46];
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = v52;
  v53 = a3[19];
  v54 = a3[20];
  v55 = &a1[v53];
  v56 = &a2[v53];
  v57 = *((_QWORD *)v56 + 1);
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *((_QWORD *)v55 + 1) = v57;
  v58 = &a1[v54];
  v59 = &a2[v54];
  v60 = *((_QWORD *)v59 + 1);
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *((_QWORD *)v58 + 1) = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for HotelReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[8];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[10];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[11];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = a3[12];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = type metadata accessor for DateComponents();
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24);
  v30(v27, v28, v29);
  v30(&a1[a3[13]], &a2[a3[13]], v29);
  v31 = a3[14];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = type metadata accessor for TimeZone();
  LODWORD(v30) = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v34);
  v35 = __swift_getEnumTagSinglePayload((uint64_t)v33, 1, v34);
  if (!(_DWORD)v30)
  {
    v36 = *(_QWORD *)(v34 - 8);
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v32, v33, v34);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v32, v34);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  __swift_storeEnumTagSinglePayload((uint64_t)v32, 0, 1, v34);
LABEL_13:
  v38 = a3[15];
  v39 = &a1[v38];
  v40 = &a2[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[16];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3[17];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3[18];
  v48 = &a1[v47];
  v49 = &a2[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = a3[19];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = a3[20];
  v54 = &a1[v53];
  v55 = &a2[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for HotelReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v12 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  v13 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  v14 = a3[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for DateComponents();
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  v18(&a1[a3[13]], &a2[a3[13]], v17);
  v19 = a3[14];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for TimeZone();
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
  }
  v24 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  v25 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  v26 = a3[20];
  *(_OWORD *)&a1[a3[19]] = *(_OWORD *)&a2[a3[19]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  return a1;
}

char *assignWithTake for HotelReservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  v15 = a3[8];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  v20 = a3[9];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  v25 = a3[10];
  v26 = &a1[v25];
  v27 = (uint64_t *)&a2[v25];
  v29 = *v27;
  v28 = v27[1];
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v30 = a3[11];
  v31 = &a1[v30];
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  v35 = a3[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = type metadata accessor for DateComponents();
  v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40);
  v39(v36, v37, v38);
  v39(&a1[a3[13]], &a2[a3[13]], v38);
  v40 = a3[14];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = type metadata accessor for TimeZone();
  LODWORD(v39) = __swift_getEnumTagSinglePayload((uint64_t)v41, 1, v43);
  v44 = __swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43);
  if (!(_DWORD)v39)
  {
    v45 = *(_QWORD *)(v43 - 8);
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v41, v42, v43);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v43);
    goto LABEL_12;
  }
  if (v44)
  {
LABEL_12:
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
LABEL_13:
  v47 = a3[15];
  v48 = &a1[v47];
  v49 = (uint64_t *)&a2[v47];
  v51 = *v49;
  v50 = v49[1];
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  v52 = a3[16];
  v53 = &a1[v52];
  v54 = (uint64_t *)&a2[v52];
  v56 = *v54;
  v55 = v54[1];
  *(_QWORD *)v53 = v56;
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  v57 = a3[17];
  v58 = &a1[v57];
  v59 = (uint64_t *)&a2[v57];
  v61 = *v59;
  v60 = v59[1];
  *(_QWORD *)v58 = v61;
  *((_QWORD *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  v62 = a3[18];
  v63 = &a1[v62];
  v64 = (uint64_t *)&a2[v62];
  v66 = *v64;
  v65 = v64[1];
  *(_QWORD *)v63 = v66;
  *((_QWORD *)v63 + 1) = v65;
  swift_bridgeObjectRelease();
  v67 = a3[19];
  v68 = &a1[v67];
  v69 = (uint64_t *)&a2[v67];
  v71 = *v69;
  v70 = v69[1];
  *(_QWORD *)v68 = v71;
  *((_QWORD *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
  v72 = a3[20];
  v73 = &a1[v72];
  v74 = (uint64_t *)&a2[v72];
  v76 = *v74;
  v75 = v74[1];
  *(_QWORD *)v73 = v76;
  *((_QWORD *)v73 + 1) = v75;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HotelReservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for HotelReservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for HotelReservation()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for TimeZone?, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for RestaurantReservation(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[8];
    v16 = a3[9];
    v17 = (uint64_t *)((char *)v4 + v15);
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (uint64_t *)((char *)v4 + v16);
    v21 = (uint64_t *)((char *)a2 + v16);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = a3[10];
    v24 = a3[11];
    v25 = (uint64_t *)((char *)v4 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (uint64_t *)((char *)v4 + v24);
    v29 = (uint64_t *)((char *)a2 + v24);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = a3[12];
    v60 = (char *)a2 + v31;
    v61 = (char *)v4 + v31;
    v32 = type metadata accessor for DateComponents();
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v61, v60, v32);
    v33 = a3[13];
    v34 = a3[14];
    v35 = (uint64_t *)((char *)v4 + v33);
    v36 = (uint64_t *)((char *)a2 + v33);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = (char *)v4 + v34;
    v39 = (char *)a2 + v34;
    v40 = type metadata accessor for TimeZone();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v39, 1, v40))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v40);
    }
    v42 = a3[15];
    v43 = a3[16];
    v44 = (uint64_t *)((char *)v4 + v42);
    v45 = (uint64_t *)((char *)a2 + v42);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = (uint64_t *)((char *)v4 + v43);
    v48 = (uint64_t *)((char *)a2 + v43);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = a3[17];
    v51 = a3[18];
    v52 = (uint64_t *)((char *)v4 + v50);
    v53 = (uint64_t *)((char *)a2 + v50);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = (uint64_t *)((char *)v4 + v51);
    v56 = (uint64_t *)((char *)a2 + v51);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for RestaurantReservation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[12];
  v7 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[14];
  v9 = type metadata accessor for TimeZone();
  if (!__swift_getEnumTagSinglePayload(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for RestaurantReservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[8];
  v14 = a3[9];
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (_QWORD *)((char *)a1 + v14);
  v19 = (_QWORD *)((char *)a2 + v14);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[10];
  v22 = a3[11];
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (_QWORD *)((char *)a1 + v22);
  v27 = (_QWORD *)((char *)a2 + v22);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a3[12];
  v58 = (char *)a2 + v29;
  v59 = (char *)a1 + v29;
  v30 = type metadata accessor for DateComponents();
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57(v59, v58, v30);
  v31 = a3[13];
  v32 = a3[14];
  v33 = (_QWORD *)((char *)a1 + v31);
  v34 = (_QWORD *)((char *)a2 + v31);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = (char *)a1 + v32;
  v37 = (char *)a2 + v32;
  v38 = type metadata accessor for TimeZone();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
    __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
  }
  v40 = a3[15];
  v41 = a3[16];
  v42 = (_QWORD *)((char *)a1 + v40);
  v43 = (_QWORD *)((char *)a2 + v40);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = (_QWORD *)((char *)a1 + v41);
  v46 = (_QWORD *)((char *)a2 + v41);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v48 = a3[17];
  v49 = a3[18];
  v50 = (_QWORD *)((char *)a1 + v48);
  v51 = (_QWORD *)((char *)a2 + v48);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = (_QWORD *)((char *)a1 + v49);
  v54 = (_QWORD *)((char *)a2 + v49);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RestaurantReservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[10];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[11];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = a3[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[13];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = a3[14];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for TimeZone();
  v37 = __swift_getEnumTagSinglePayload((uint64_t)v34, 1, v36);
  v38 = __swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36);
  if (!v37)
  {
    v39 = *(_QWORD *)(v36 - 8);
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 24))(v34, v35, v36);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v36);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v36);
LABEL_13:
  v41 = a3[15];
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)((char *)a2 + v41);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3[16];
  v45 = (_QWORD *)((char *)a1 + v44);
  v46 = (_QWORD *)((char *)a2 + v44);
  *v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3[17];
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = (_QWORD *)((char *)a2 + v47);
  *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = a3[18];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  *v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for RestaurantReservation(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[12];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for TimeZone();
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
  }
  v23 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  v24 = a3[18];
  *(_OWORD *)((char *)a1 + a3[17]) = *(_OWORD *)((char *)a2 + a3[17]);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  return a1;
}

_QWORD *assignWithTake for RestaurantReservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v15 = a3[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[9];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[10];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[11];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[12];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  *v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  v44 = a3[14];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for TimeZone();
  v48 = __swift_getEnumTagSinglePayload((uint64_t)v45, 1, v47);
  v49 = __swift_getEnumTagSinglePayload((uint64_t)v46, 1, v47);
  if (!v48)
  {
    v50 = *(_QWORD *)(v47 - 8);
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v45, v46, v47);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v45, v47);
    goto LABEL_12;
  }
  if (v49)
  {
LABEL_12:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
  __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v47);
LABEL_13:
  v52 = a3[15];
  v53 = (_QWORD *)((char *)a1 + v52);
  v54 = (_QWORD *)((char *)a2 + v52);
  v56 = *v54;
  v55 = v54[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  v57 = a3[16];
  v58 = (_QWORD *)((char *)a1 + v57);
  v59 = (_QWORD *)((char *)a2 + v57);
  v61 = *v59;
  v60 = v59[1];
  *v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  v62 = a3[17];
  v63 = (_QWORD *)((char *)a1 + v62);
  v64 = (_QWORD *)((char *)a2 + v62);
  v66 = *v64;
  v65 = v64[1];
  *v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  v67 = a3[18];
  v68 = (_QWORD *)((char *)a1 + v67);
  v69 = (_QWORD *)((char *)a2 + v67);
  v71 = *v69;
  v70 = v69[1];
  *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RestaurantReservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_index_19Tm()
{
  int *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_53_11();
    if (v1)
    {
      v2 = v0[5];
    }
    else
    {
      OUTLINED_FUNCTION_68_8();
      OUTLINED_FUNCTION_53_11();
      if (v3)
      {
        v2 = v0[12];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
        v2 = v0[14];
      }
    }
    v4 = OUTLINED_FUNCTION_104_6(v2);
    OUTLINED_FUNCTION_33_2(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for RestaurantReservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_20Tm()
{
  int *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_148();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_52_11();
    if (v1)
    {
      v2 = v0[5];
    }
    else
    {
      OUTLINED_FUNCTION_68_8();
      OUTLINED_FUNCTION_52_11();
      if (v3)
      {
        v2 = v0[12];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
        v2 = v0[14];
      }
    }
    v4 = OUTLINED_FUNCTION_45_10(v2);
    OUTLINED_FUNCTION_32_2(v4, v5, v6, v7);
  }
}

void type metadata completion function for RestaurantReservation()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for TimeZone?, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for Answer(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *(_QWORD *)((char *)v4 + v15) = *(_QWORD *)((char *)a2 + v15);
    v19 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v19) = *(_QWORD *)((char *)a2 + v19);
    v20 = a3[10];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v11))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v21, v22, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v11);
    }
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  }
  return v4;
}

uint64_t destroy for Answer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 40);
  result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  return result;
}

_QWORD *initializeWithCopy for Answer(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v17 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  v18 = a3[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v10))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v19, v20, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v10);
  }
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

_QWORD *assignWithCopy for Answer(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[10];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v17, 1, v9);
  v21 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v9);
  if (!v20)
  {
    v22 = *(_QWORD *)(v9 - 8);
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v18, v19, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v9);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v18, v19, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v9);
LABEL_13:
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

_OWORD *initializeWithTake for Answer(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[10];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v13, 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v14, v15, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v9);
  }
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

_QWORD *assignWithTake for Answer(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  v20 = a3[10];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v20, 1, v10);
  v24 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v10);
  if (!v23)
  {
    v25 = *(_QWORD *)(v10 - 8);
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v21, v22, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v10);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v21, v22, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v10);
LABEL_13:
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Answer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_243226D98()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_46_9();
  if (v1)
  {
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_98_5();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v2 = OUTLINED_FUNCTION_104_6(*(int *)(v0 + 20));
    OUTLINED_FUNCTION_33_2(v2, v3, v4);
  }
}

uint64_t storeEnumTagSinglePayload for Answer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243226DEC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  if (v1)
  {
    OUTLINED_FUNCTION_97_7();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v3 = OUTLINED_FUNCTION_45_10(*(int *)(v2 + 20));
    OUTLINED_FUNCTION_32_2(v3, v4, v5, v6);
  }
}

void type metadata completion function for Answer()
{
  unint64_t v0;

  type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t getEnumTagSinglePayload for Answer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Answer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_243226FAC + 4 * byte_243351BA1[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_243226FE0 + 4 * byte_243351B9C[v4]))();
}

uint64_t sub_243226FE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243226FE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243226FF0);
  return result;
}

uint64_t sub_243226FFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243227004);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_243227008(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243227010(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Answer.CodingKeys()
{
  return &unk_2513CC9B8;
}

void *type metadata accessor for RestaurantReservation.CodingKeys()
{
  return &unk_2513CCA48;
}

uint64_t getEnumTagSinglePayload for HotelReservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 16) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v5 = v6 - 17;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HotelReservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_243227118 + 4 * byte_243351BAB[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_24322714C + 4 * byte_243351BA6[v4]))();
}

uint64_t sub_24322714C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243227154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24322715CLL);
  return result;
}

uint64_t sub_243227168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243227170);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_243227174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24322717C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for HotelReservation.CodingKeys()
{
  return &unk_2513CCAD8;
}

uint64_t getEnumTagSinglePayload for FlightReservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE6)
  {
    if (a2 + 26 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 26) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 27;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v5 = v6 - 27;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FlightReservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_24322726C + 4 * byte_243351BB5[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_2432272A0 + 4 * byte_243351BB0[v4]))();
}

uint64_t sub_2432272A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432272A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432272B0);
  return result;
}

uint64_t sub_2432272BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432272C4);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_2432272C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432272D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for FlightReservation.CodingKeys()
{
  return &unk_2513CCB68;
}

void *type metadata accessor for Contact.CodingKeys()
{
  return &unk_2513CCBF8;
}

uint64_t getEnumTagSinglePayload for Contact.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_270(-1);
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 6);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 6);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 6);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_270(v8);
}

uint64_t storeEnumTagSinglePayload for Contact.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2432273D4 + 4 * byte_243351BBF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_269 + 4 * byte_243351BBA[v4]))();
}

uint64_t sub_24322740C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243227414);
  return result;
}

uint64_t sub_24322741C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x243227424);
  return OUTLINED_FUNCTION_268();
}

void *type metadata accessor for WalletPass.CodingKeys()
{
  return &unk_2513CCC88;
}

uint64_t storeEnumTagSinglePayload for WalletTransaction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_243227490 + 4 * byte_243351BC9[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_2432274C4 + 4 * byte_243351BC4[v4]))();
}

uint64_t sub_2432274C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432274CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432274D4);
  return result;
}

uint64_t sub_2432274E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432274E8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_2432274EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432274F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WalletTransaction.CodingKeys()
{
  return &unk_2513CCD18;
}

uint64_t storeEnumTagSinglePayload for NoteDocument.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24322755C + 4 * byte_243351BD3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_243227590 + 4 * byte_243351BCE[v4]))();
}

uint64_t sub_243227590(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243227598(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432275A0);
  return result;
}

uint64_t sub_2432275AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432275B4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2432275B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432275C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NoteDocument.CodingKeys()
{
  return &unk_2513CCDA8;
}

uint64_t getEnumTagSinglePayload for Photo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 12) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v5 = v6 - 13;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Photo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_2432276B0 + 4 * byte_243351BDD[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_2432276E4 + 4 * byte_243351BD8[v4]))();
}

uint64_t sub_2432276E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432276EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432276F4);
  return result;
}

uint64_t sub_243227700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243227708);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_24322770C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243227714(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Photo.CodingKeys()
{
  return &unk_2513CCE38;
}

void *type metadata accessor for CalendarEvent.CodingKeys()
{
  return &unk_2513CCEC8;
}

uint64_t getEnumTagSinglePayload for CalendarEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_270(-1);
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 11);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 11);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 11);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_270(v8);
}

uint64_t storeEnumTagSinglePayload for CalendarEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_243227818 + 4 * byte_243351BE7[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_269_0 + 4 * byte_243351BE2[v4]))();
}

uint64_t sub_243227850(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243227858);
  return result;
}

uint64_t sub_243227860(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x243227868);
  return OUTLINED_FUNCTION_268();
}

void *type metadata accessor for MobileSMSDocument.CodingKeys()
{
  return &unk_2513CCF58;
}

uint64_t getEnumTagSinglePayload for RestaurantReservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_270(-1);
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 15);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 15);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_270((*a1 | (v4 << 8)) - 15);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_270(v8);
}

uint64_t storeEnumTagSinglePayload for RestaurantReservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_243227958 + 4 * byte_243351BF1[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_269_1 + 4 * byte_243351BEC[v4]))();
}

uint64_t sub_243227990(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243227998);
  return result;
}

uint64_t sub_2432279A0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432279A8);
  return OUTLINED_FUNCTION_268();
}

void *type metadata accessor for EmailDocument.CodingKeys()
{
  return &unk_2513CCFE8;
}

uint64_t outlined init with take of FlightSnippet.Leg(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FlightSnippet.Leg(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_21@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_20()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_19()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_20@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_7_20()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 264) + 8))(*(_QWORD *)(v0 - 208), *(_QWORD *)(v0 - 200));
}

uint64_t OUTLINED_FUNCTION_9_16()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_12_16@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

_QWORD *OUTLINED_FUNCTION_14_11()
{
  _QWORD *v0;

  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_15_13@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_16_18()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_18_13()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t OUTLINED_FUNCTION_21_12()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_22_12()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

void OUTLINED_FUNCTION_23_15(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_24_11(uint64_t (*a1)(_QWORD))
{
  return a1(0);
}

uint64_t OUTLINED_FUNCTION_27_12()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_29_11()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t OUTLINED_FUNCTION_30_11(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_31_13@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 208), *(_QWORD *)(v1 - 200));
}

uint64_t OUTLINED_FUNCTION_32_7@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_33_8()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_34_8()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_36_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined destroy of EmailDocument(v1, v2);
}

uint64_t OUTLINED_FUNCTION_37_6()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 160), *(_QWORD *)(v1 - 144));
}

uint64_t OUTLINED_FUNCTION_38_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_40_6@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 112) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_45_10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_47_11(uint64_t (*a1)(_QWORD))
{
  return a1(0);
}

uint64_t OUTLINED_FUNCTION_48_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_54_9(uint64_t (*a1)(_QWORD))
{
  return a1(0);
}

uint64_t OUTLINED_FUNCTION_55_4()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_57_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void OUTLINED_FUNCTION_58_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v23 = (_QWORD *)(v21 + v22[15]);
  *v23 = a16;
  v23[1] = a17;
  v24 = (_QWORD *)(v21 + v22[16]);
  *v24 = a18;
  v24[1] = a19;
  v25 = (_QWORD *)(v21 + v22[17]);
  *v25 = a20;
  v25[1] = a21;
}

uint64_t OUTLINED_FUNCTION_59_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_60_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_62_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_63_8()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_64_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_65_9@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_67_9@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 144));
}

uint64_t OUTLINED_FUNCTION_68_8()
{
  return type metadata accessor for DateComponents();
}

uint64_t OUTLINED_FUNCTION_70_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_71_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_72_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_73_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_74_10()
{
  return type metadata accessor for FlightReservation(0);
}

uint64_t OUTLINED_FUNCTION_75_8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_76_7()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_77_6(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s10OmniSearch0B6ResultVWOcTm_1(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_78_10()
{
  return type metadata accessor for Date();
}

void OUTLINED_FUNCTION_79_7(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of EmailDocument(a1, v1);
}

uint64_t OUTLINED_FUNCTION_83_3()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_84_5@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 89) = a1;
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_85_6()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_86_8()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_89_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 120));
}

uint64_t OUTLINED_FUNCTION_91_2()
{
  return 0;
}

void OUTLINED_FUNCTION_92_6(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_93_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_94_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_96_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 136));
}

void OUTLINED_FUNCTION_97_7()
{
  int v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = (v0 - 1);
}

uint64_t OUTLINED_FUNCTION_99_4()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_101_5@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 81) = a1;
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_102_5@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_103_6()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 200) + 8))(*(_QWORD *)(v1 - 192), v0);
}

uint64_t OUTLINED_FUNCTION_104_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void OUTLINED_FUNCTION_105_6(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  outlined init with copy of TimeZone?(v2 + a1, v3, v1);
}

uint64_t OUTLINED_FUNCTION_107_3()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void OUTLINED_FUNCTION_109_4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of TimeZone?(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_110_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

unint64_t OUTLINED_FUNCTION_111_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = v0 + *(int *)(v1 + 56);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v2 - 128) = *(_OWORD *)v3;
  *(_OWORD *)(v2 - 112) = v5;
  *(_QWORD *)(v2 - 96) = v4;
  *(_BYTE *)(v2 - 65) = 10;
  return lazy protocol witness table accessor for type DataDetectorResults and conformance DataDetectorResults();
}

uint64_t OUTLINED_FUNCTION_113_3@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_114_5()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_115_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_116_3()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_117_0@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 81) = a1;
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_118_1@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_119_2@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_120_3()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_122_1(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of URL?(a1, a2);
}

uint64_t OUTLINED_FUNCTION_123_2()
{
  uint64_t v0;

  return outlined consume of DataDetectorResults?(**(_QWORD **)(v0 - 168));
}

uint64_t OUTLINED_FUNCTION_124_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_130_0@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  uint64_t v0;

  *(_OWORD *)(v0 - 192) = *(_OWORD *)(v0 - 104);
  return outlined consume of DataDetectorResults?(**(_QWORD **)(v0 - 168));
}

void OUTLINED_FUNCTION_134_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  *(_BYTE *)(v2 - 81) = 3;
}

uint64_t OUTLINED_FUNCTION_135_1()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_137_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + a3);
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_140()
{
  return type metadata accessor for TimeZone();
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  return type metadata accessor for Calendar();
}

void OUTLINED_FUNCTION_142(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = *(_QWORD *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_143_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_144@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_145_0@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_146_0()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_153_0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_154()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_155()
{
  return type metadata accessor for Answer(0);
}

uint64_t OUTLINED_FUNCTION_156@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 120) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_158()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_161_0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 10;
  return type metadata accessor for TimeZone();
}

uint64_t OUTLINED_FUNCTION_162()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_163()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 8;
  return type metadata accessor for DateComponents();
}

uint64_t OUTLINED_FUNCTION_164@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)(v2 + a1);
  result = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  *v1 = *v3;
  v1[1] = v5;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v8;
  return result;
}

void OUTLINED_FUNCTION_165()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 81) = 3;
}

void OUTLINED_FUNCTION_166()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 81) = 2;
}

uint64_t OUTLINED_FUNCTION_169(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  *v2 = a1;
  v2[1] = a2;
  *(_BYTE *)(v3 - 120) = 1;
  return v3 - 120;
}

uint64_t OUTLINED_FUNCTION_171()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_172()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
  return v0;
}

void OUTLINED_FUNCTION_173(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  *v18 = v17;
  v18[1] = v16;
  v18[2] = v15;
  v18[3] = v14;
  v18[4] = v13;
  v18[5] = a11;
  v18[6] = a12;
  v18[7] = a13;
}

uint64_t OUTLINED_FUNCTION_174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  *(_BYTE *)(v3 - 120) = 2;
  return v3 - 120;
}

uint64_t OUTLINED_FUNCTION_175()
{
  return type metadata accessor for TimeZone();
}

void OUTLINED_FUNCTION_179(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;

  *a5 = a1;
  a5[1] = (v5 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_180()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_181()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_183(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of Date?(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_186()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_187@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_188()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_189()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v1;
  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 8))(v0, *(_QWORD *)(v3 - 200));
}

uint64_t OUTLINED_FUNCTION_190@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 - 152) = (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 - 144) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_194@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 65) = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_196@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 136) + 8))(v1 + a1, *(_QWORD *)(v2 - 120));
}

void OUTLINED_FUNCTION_197()
{
  uint64_t v0;
  uint64_t v1;

  specialized Array<A>.hash(into:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_198()
{
  return dispatch thunk of Hashable.hash(into:)();
}

void OUTLINED_FUNCTION_199(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
}

uint64_t OUTLINED_FUNCTION_200()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 0;
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_201@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined consume of DataDetectorResults?(*(_QWORD *)(v1 + a1));
}

uint64_t OUTLINED_FUNCTION_202()
{
  return type metadata accessor for FlightReservation(0);
}

uint64_t OUTLINED_FUNCTION_203()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 - 136));
}

uint64_t OUTLINED_FUNCTION_204@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_205(uint64_t result)
{
  return outlined copy of DataDetectorResults?(result);
}

uint64_t OUTLINED_FUNCTION_208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void OUTLINED_FUNCTION_210()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = v0;
}

double OUTLINED_FUNCTION_212@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v4 = v1 + a1;
  *(_QWORD *)(v4 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v3 - 176) = v2;
  *(_QWORD *)(v3 - 168) = v4;
  return result;
}

void OUTLINED_FUNCTION_213(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  outlined init with copy of TimeZone?(v1 + a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_214()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_223()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_224()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 120) + 8))(v0, *(_QWORD *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_225()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_226()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_228()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_230()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_231()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_232()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_234@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return v1 - 72;
}

void OUTLINED_FUNCTION_235(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
}

uint64_t OUTLINED_FUNCTION_237()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_241@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_243@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t OUTLINED_FUNCTION_244()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 192);
}

uint64_t OUTLINED_FUNCTION_246()
{
  return type metadata accessor for CalendarEvent(0);
}

void OUTLINED_FUNCTION_248(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
}

void OUTLINED_FUNCTION_251(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of Date?(a1, a2, v2);
}

void OUTLINED_FUNCTION_252(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of MobileSMSDocument?(*(_QWORD *)(v2 - 104), a2);
}

uint64_t OUTLINED_FUNCTION_253()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 - 104));
}

uint64_t OUTLINED_FUNCTION_254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_255()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_257()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_259(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of Date?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_261()
{
  return Calendar.date(from:)();
}

void OUTLINED_FUNCTION_262()
{
  Date.flightComponents.getter();
}

void OUTLINED_FUNCTION_263(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of Date?(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_264()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_265()
{
  return static Calendar._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_266(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_267(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

_BYTE *OUTLINED_FUNCTION_268@<X0>(_BYTE *result@<X0>, char a2@<W8>)
{
  *result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_269(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_270@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_272()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_274()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

unint64_t OUTLINED_FUNCTION_275()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 10;
  return lazy protocol witness table accessor for type DataDetectorResults and conformance DataDetectorResults();
}

void OUTLINED_FUNCTION_276(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of Date?(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_277()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 9;
  return v0 - 72;
}

void OUTLINED_FUNCTION_278(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = *(_QWORD *)(v1 + a1);
}

void OUTLINED_FUNCTION_279(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = *(_QWORD *)(v1 + a1);
  *(_BYTE *)(v2 - 65) = 9;
}

uint64_t OUTLINED_FUNCTION_280()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_281()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_282()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_283()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_284()
{
  JUMPOUT(0x2494F6CA4);
}

void OUTLINED_FUNCTION_285(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of Date?(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_286()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v0 + *(int *)(v1 + 48));
}

uint64_t OUTLINED_FUNCTION_288()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t OUTLINED_FUNCTION_289(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of URL?(a1, *(_QWORD *)(v1 - 104));
}

void OUTLINED_FUNCTION_290()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 4;
}

void OUTLINED_FUNCTION_291()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 4;
}

uint64_t OUTLINED_FUNCTION_292@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + a3);
  *v4 = result;
  v4[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_293()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
}

uint64_t OUTLINED_FUNCTION_294()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_296()
{
  uint64_t v0;

  return v0;
}

__n128 OUTLINED_FUNCTION_298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __int128 a10)
{
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  result = a9;
  *(_OWORD *)v11 = a10;
  *(__n128 *)(v11 + 16) = a9;
  *(_QWORD *)(v11 + 32) = v10;
  return result;
}

uint64_t OUTLINED_FUNCTION_299@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + a3);
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_300()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 - 88));
}

void OUTLINED_FUNCTION_304(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + a1);
  v4 = *(_QWORD *)(v2 - 96);
  *v3 = *(_QWORD *)(v2 - 104);
  v3[1] = v4;
}

uint64_t OUTLINED_FUNCTION_305(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t OUTLINED_FUNCTION_306()
{
  return type metadata accessor for FlightReservation(0);
}

uint64_t OUTLINED_FUNCTION_308()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_309()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_310()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v0 + *(int *)(v1 + 36));
}

uint64_t OUTLINED_FUNCTION_311()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_313()
{
  return swift_bridgeObjectRelease();
}

unint64_t static AnswerSynthesisModelProtocol.GMS_USE_CASE_ID.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static AnswerSynthesisModelProtocol.promptTemplateID.getter()
{
  return 0xD000000000000024;
}

const char *AnswerSynthesisModelProtocol.fallbackPromptTemplate.getter()
{
  return "{{ specialToken.chat.role.system }}Based on each personal data source, return a concise answer to the query (or"
         " return NO_ANSWER_FOUND_IN_SOURCE). If the query does not require an answer, return NO_ANSWER_NEEDED_FOR_QUERY."
         "{{ specialToken.chat.component.turnEnd }}{{ specialToken.chat.role.user }}{{ userPrompt }}{{ specialToken.chat."
         "component.turnEnd }}{{ specialToken.chat.role.assistant }}";
}

uint64_t static AnswerSynthesisModelProtocol.defaultSamplingParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy?);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v8 - v4;
  static SamplingStrategy.topK(_:)();
  v6 = type metadata accessor for SamplingStrategy();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  outlined init with copy of SamplingStrategy?((uint64_t)v5, (uint64_t)v3);
  SamplingParameters.init(strategy:temperature:frequencyPenalty:lengthPenalty:maximumTokens:stopSequences:randomSeed:timeout:)();
  SamplingParameters.promptLookupDraftSteps.setter();
  SamplingParameters.speculativeSampling.setter();
  SamplingParameters.tokenHealing.setter();
  return outlined destroy of SamplingStrategy?((uint64_t)v5);
}

uint64_t outlined init with copy of SamplingStrategy?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SamplingStrategy?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AnswerSynthesisModelProtocol.templateBindingUserPromptKey.getter()
{
  return 0x6D6F725072657375;
}

uint64_t dispatch thunk of AnswerSynthesisModelProtocol.prewarm()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnswerSynthesisModelProtocol.createPromptTemplate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnswerSynthesisModelProtocol.synthesize(_:bindings:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of AnswerSynthesisModelProtocol.synthesize(_:bindings:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AnswerSynthesisModelProtocol.synthesize(_:bindings:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t *LocalSearchManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static LocalSearchManager.shared;
}

uint64_t LocalSearchManager.resultsDidBecomeInvalid(_:)()
{
  return OUTLINED_FUNCTION_5_20(*MEMORY[0x24BEE4EA0]);
}

void *LocalSearchManager.kLocalSearchManagerTimeout.unsafeMutableAddressor()
{
  return &static LocalSearchManager.kLocalSearchManagerTimeout;
}

uint64_t static LocalSearchManager.kLocalSearchManagerTimeout.getter()
{
  return 5;
}

void LocalSearchManager.queryTask.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_queryTask);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_queryTask) = a1;

}

uint64_t LocalSearchManager.sections.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_sections);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t LocalSearchManager.completionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_completionHandler);
  *v3 = a1;
  v3[1] = a2;
  return swift_release();
}

void LocalSearchManager.__allocating_init(infinitePatience:)(char a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  LocalSearchManager.init(infinitePatience:)(a1);
  OUTLINED_FUNCTION_5();
}

id static LocalSearchManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static LocalSearchManager.shared;
}

void LocalSearchManager.init(infinitePatience:)(char a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];
  objc_super v32;

  v29 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v29 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_2_2();
  v28 = v5 - v4;
  type metadata accessor for OS_dispatch_queue_serial.Attributes();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5930];
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_2_2();
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_63_1();
  v10 = type metadata accessor for DispatchQoS();
  v26 = *(_QWORD *)(v10 - 8);
  v27 = v10;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_2_2();
  v14 = v13 - v12;
  v15 = OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_queryTask;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_queryTask] = 0;
  OUTLINED_FUNCTION_28_10(v16, &lazy cache variable for type metadata for OS_dispatch_queue_serial);
  v17 = v1;
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v2, *MEMORY[0x24BEE5758], v8);
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type OS_dispatch_queue_serial.Attributes and conformance OS_dispatch_queue_serial.Attributes, v6, MEMORY[0x24BEE5940]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue_serial.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue_serial.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue_serial.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue_serial.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)&v17[OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_workQueue] = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB0070]), sel_init);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_session] = v18;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_sections] = MEMORY[0x24BEE4AF8];
  v19 = *(void **)&v1[v15];
  *(_QWORD *)&v1[v15] = 0;

  v20 = &v17[OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_completionHandler];
  *(_QWORD *)v20 = destructiveProjectEnumData for GlobalSearchClient.QueryType;
  *((_QWORD *)v20 + 1) = 0;

  v32.receiver = v17;
  v32.super_class = (Class)type metadata accessor for LocalSearchManager();
  v21 = objc_msgSendSuper2(&v32, sel_init);
  v22 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v22 + 16) = v21;
  *(_BYTE *)(v22 + 24) = a1;
  aBlock[4] = partial apply for closure #2 in LocalSearchManager.init(infinitePatience:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3;
  v23 = _Block_copy(aBlock);
  v24 = v21;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue_serial.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494F6104](0, v14, v28, v23);

  _Block_release(v23);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v14, v27);
  swift_release();
  OUTLINED_FUNCTION_43_0();
}

uint64_t type metadata accessor for LocalSearchManager()
{
  return objc_opt_self();
}

void closure #2 in LocalSearchManager.init(infinitePatience:)(uint64_t a1, char a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_session), sel_setInfinitePatience_, a2 & 1);
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_sharedResourcesManager);
  v4 = (void *)MEMORY[0x2494F5BB8](0x6867696C746F7053, 0xE900000000000074);
  objc_msgSend(v3, sel_loadAllParametersForClient_, v4);

  v5 = objc_msgSend(v2, sel_sharedResourcesManager);
  v6 = (void *)MEMORY[0x2494F5BB8](0xD000000000000012, 0x800000024335D4D0);
  objc_msgSend(v5, sel_loadAllParametersForClient_, v6);

  v7 = objc_msgSend(v2, sel_sharedResourcesManager);
  v8 = (id)MEMORY[0x2494F5BB8](1818845517, 0xE400000000000000);
  objc_msgSend(v7, sel_loadAllParametersForClient_, v8);

}

uint64_t sub_243229D7C()
{
  OUTLINED_FUNCTION_16_19();
  return swift_deallocObject();
}

void partial apply for closure #2 in LocalSearchManager.init(infinitePatience:)()
{
  uint64_t v0;

  closure #2 in LocalSearchManager.init(infinitePatience:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void lazy protocol witness table accessor for type [OS_dispatch_queue_serial.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x2494F6CA4](MEMORY[0x24BEE12C8], v3), a1);
  }
  OUTLINED_FUNCTION_5();
}

Swift::Void __swiftcall LocalSearchManager.activate()()
{
  LocalSearchManager.activate()((uint64_t)&unk_2513CD110, (uint64_t)partial apply for closure #1 in LocalSearchManager.activate(), (uint64_t)&block_descriptor_6_0);
}

id closure #1 in LocalSearchManager.activate()(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_session);
  objc_msgSend(v1, sel_activate);
  return objc_msgSend(v1, sel_preheat);
}

uint64_t sub_243229E58()
{
  OUTLINED_FUNCTION_16_19();
  return swift_deallocObject();
}

id partial apply for closure #1 in LocalSearchManager.activate()()
{
  uint64_t v0;

  return closure #1 in LocalSearchManager.activate()(*(_QWORD *)(v0 + 16));
}

Swift::Void __swiftcall LocalSearchManager.deactivate()()
{
  LocalSearchManager.activate()((uint64_t)&unk_2513CD160, (uint64_t)partial apply for closure #1 in LocalSearchManager.deactivate(), (uint64_t)&block_descriptor_12);
}

uint64_t LocalSearchManager.activate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v19;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v19 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_2();
  v12 = v11 - v10;
  v13 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_63_1();
  v15 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v15 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a3;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v8, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue_serial.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494F6104](0, v4, v12, v16);
  _Block_release(v16);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v12, v7);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v13);
  return swift_release();
}

void closure #1 in LocalSearchManager.deactivate()(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_session), sel_deactivate);
  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_sharedResourcesManager);
  v3 = (void *)MEMORY[0x2494F5BB8](0x6867696C746F7053, 0xE900000000000074);
  objc_msgSend(v2, sel_loadAllParametersForClient_, v3);

  v4 = objc_msgSend(v1, sel_sharedResourcesManager);
  v5 = (void *)MEMORY[0x2494F5BB8](0xD000000000000012, 0x800000024335D4D0);
  objc_msgSend(v4, sel_loadAllParametersForClient_, v5);

  v6 = objc_msgSend(v1, sel_sharedResourcesManager);
  v7 = (id)MEMORY[0x2494F5BB8](1818845517, 0xE400000000000000);
  objc_msgSend(v6, sel_loadAllParametersForClient_, v7);

}

void partial apply for closure #1 in LocalSearchManager.deactivate()()
{
  uint64_t v0;

  closure #1 in LocalSearchManager.deactivate()(*(_QWORD *)(v0 + 16));
}

void LocalSearchManager.search(with:)(NSObject *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  dispatch_semaphore_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  char isEscapingClosureAtFileLocation;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];

  v41 = type metadata accessor for DispatchTimeInterval();
  v3 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_2_2();
  v6 = (_QWORD *)(v5 - v4);
  v42 = type metadata accessor for DispatchTime();
  v40 = *(_QWORD *)(v42 - 8);
  OUTLINED_FUNCTION_1_2();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v38 - v11;
  v13 = dispatch_semaphore_create(0);
  v14 = MEMORY[0x24BEE4AF8];
  LocalSearchManager.sections.setter(MEMORY[0x24BEE4AF8]);
  v15 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v15 + 16) = v14;
  v38[1] = v15 + 16;
  v16 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v13;
  v44 = v15;
  swift_retain();
  v39 = v13;
  LocalSearchManager.completionHandler.setter((uint64_t)partial apply for closure #1 in LocalSearchManager.search(with:), v16);
  v17 = *(NSObject **)&v1[OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_workQueue];
  v18 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v18 + 16) = v1;
  *(_QWORD *)(v18 + 24) = a1;
  v19 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v19 + 16) = partial apply for closure #2 in LocalSearchManager.search(with:);
  *(_QWORD *)(v19 + 24) = v18;
  v43 = v18;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_27;
  v20 = _Block_copy(aBlock);
  v21 = v1;
  v22 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v17, v20);
  _Block_release(v20);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  static DispatchTime.now()();
  *v6 = 5;
  v24 = v41;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x24BEE5420], v41);
  MEMORY[0x2494F5990](v10, v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v24);
  v25 = *(void (**)(char *, uint64_t))(v40 + 8);
  v26 = v42;
  v25(v10, v42);
  v27 = v39;
  MEMORY[0x2494F6128](v12);
  v25(v12, v26);
  a1 = v27;
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
  {
    if (one-time initialization token for search == -1)
    {
LABEL_4:
      v28 = OUTLINED_FUNCTION_13();
      __swift_project_value_buffer(v28, (uint64_t)static Logging.search);
      v29 = (void *)Logger.logObject.getter();
      v30 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_21(v30))
      {
        *(_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)() = 0;
        OUTLINED_FUNCTION_7(&dword_24315F000, v31, v32, "LocalSearchManager.search - Timed out waiting on update");
        specialized UnsafeMutablePointer.deallocate()();
      }

      goto LABEL_12;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for search != -1)
    swift_once();
  v33 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v33, (uint64_t)static Logging.search);
  v34 = (void *)Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21(v35))
  {
    *(_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)() = 0;
    OUTLINED_FUNCTION_7(&dword_24315F000, v36, v37, "LocalSearchManager.search - Success!");
    specialized UnsafeMutablePointer.deallocate()();
  }

  OUTLINED_FUNCTION_7_21();
  swift_bridgeObjectRetain();
LABEL_12:
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_43_0();
}

uint64_t sub_24322A5A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

Swift::Int closure #1 in LocalSearchManager.search(with:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_24322A628()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in LocalSearchManager.search(with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in LocalSearchManager.search(with:)(a1, *(_QWORD *)(v1 + 16));
}

void closure #2 in LocalSearchManager.search(with:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_queryTask), sel_cancel);
  v4 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_session), sel_queryTaskWithContext_, a2);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, sel_setDelegate_, a1);
    objc_msgSend(v5, sel_setForceStableResults_, 0);
    objc_msgSend(v5, sel_setMaxTopHitAppResults_, 10);
    objc_msgSend(v5, sel_start);
    v6 = v5;
    LocalSearchManager.queryTask.setter((uint64_t)v5);

  }
}

uint64_t sub_24322A734()
{
  uint64_t v0;

  OUTLINED_FUNCTION_16_19();

  return swift_deallocObject();
}

void partial apply for closure #2 in LocalSearchManager.search(with:)()
{
  uint64_t v0;

  closure #2 in LocalSearchManager.search(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_24322A764()
{
  return swift_deallocObject();
}

void LocalSearchManager.invalidateQuery(task:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_queryTask);
  if (v2)
  {
    v3 = (void *)a1;
    OUTLINED_FUNCTION_28_10(a1, &lazy cache variable for type metadata for SPQueryTask);
    v4 = v3;
    v5 = v2;
    LOBYTE(v3) = static NSObject.== infix(_:_:)();

    if ((v3 & 1) != 0)
      LocalSearchManager.sections.setter(MEMORY[0x24BEE4AF8]);
  }
}

uint64_t LocalSearchManager.didReceive(_:)()
{
  return OUTLINED_FUNCTION_4_21(*MEMORY[0x24BEE4EA0]);
}

void LocalSearchManager.update(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  id v23;
  uint64_t v24[3];

  v2 = v1;
  v4 = objc_msgSend(a1, sel_task);
  v5 = *(void **)(v1 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_queryTask);
  if (!v4)
  {
    if (v5)
      return;
LABEL_6:
    v9 = OUTLINED_FUNCTION_15_14((uint64_t)v4, sel_state);
    v10 = OUTLINED_FUNCTION_15_14((uint64_t)v9, sel_kind);
    if ((unint64_t)v10 > 1)
    {
      if (one-time initialization token for search != -1)
        swift_once();
      v13 = OUTLINED_FUNCTION_13();
      __swift_project_value_buffer(v13, (uint64_t)static Logging.search);
      v14 = a1;
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v18 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        v24[0] = v18;
        *(_DWORD *)v17 = 136315138;
        OUTLINED_FUNCTION_15_14(v18, sel_kind);
        type metadata accessor for SPResponseKind(0);
        v19 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24315F000, v15, v16, "LocalSearchManager received response of unknown kind: %s", v17, 0xCu);
        swift_arrayDestroy();
        specialized UnsafeMutablePointer.deallocate()();
      }

    }
    else
    {
      v11 = OUTLINED_FUNCTION_15_14((uint64_t)v10, sel_resultSections);
      OUTLINED_FUNCTION_28_10((uint64_t)v11, &lazy cache variable for type metadata for SFResultSection);
      v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v12);
      swift_endAccess();
    }
    if (v9 == (id)4)
    {
      v21 = *(void (**)(uint64_t))(v2 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_completionHandler);
      OUTLINED_FUNCTION_7_21();
      swift_retain();
      v22 = swift_bridgeObjectRetain();
      v21(v22);
      swift_release();
      swift_bridgeObjectRelease();
    }
    return;
  }
  if (!v5)
  {

    return;
  }
  v23 = v4;
  OUTLINED_FUNCTION_28_10((uint64_t)v4, &lazy cache variable for type metadata for SPQueryTask);
  v6 = v5;
  v7 = v23;
  v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
    goto LABEL_6;
}

id LocalSearchManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LocalSearchManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LocalSearchManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocalSearchManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void protocol witness for LocalIndexSearchAgent.activate() in conformance LocalSearchManager()
{
  _QWORD **v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xD0))();
  OUTLINED_FUNCTION_5();
}

void protocol witness for LocalIndexSearchAgent.deactivate() in conformance LocalSearchManager()
{
  _QWORD **v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xD8))();
  OUTLINED_FUNCTION_5();
}

void protocol witness for LocalIndexSearchAgent.search(with:) in conformance LocalSearchManager()
{
  _QWORD **v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xE0))();
  OUTLINED_FUNCTION_5();
}

uint64_t method lookup function for LocalSearchManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LocalSearchManager.resultsDidBecomeInvalid(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of LocalSearchManager.__allocating_init(infinitePatience:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of LocalSearchManager.activate()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of LocalSearchManager.deactivate()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of LocalSearchManager.search(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of LocalSearchManager.invalidateQuery(task:)()
{
  return OUTLINED_FUNCTION_5_20(*MEMORY[0x24BEE4EA0]);
}

uint64_t dispatch thunk of LocalSearchManager.didReceive(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of LocalSearchManager.update(with:)()
{
  return OUTLINED_FUNCTION_4_21(*MEMORY[0x24BEE4EA0]);
}

uint64_t OUTLINED_FUNCTION_4_21@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))((a1 & v1) + 0xF8))();
}

uint64_t OUTLINED_FUNCTION_5_20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))((a1 & v1) + 0xE8))();
}

uint64_t OUTLINED_FUNCTION_7_21()
{
  return swift_beginAccess();
}

id OUTLINED_FUNCTION_15_14(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_16_19()
{
  uint64_t v0;

}

uint64_t static DataFilter.FilterResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return static Array<A>.== infix(_:_:)();
  else
    return (a1 | a2) == 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DataFilter.FilterResult<A>(uint64_t *a1, uint64_t *a2)
{
  return static DataFilter.FilterResult.== infix(_:_:)(*a1, *a2);
}

void static DataFilter.filterAndReturnTopK<A>(_:where:topK:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  Array.init()();
  swift_bridgeObjectRetain();
  Array.startIndex.getter();
  OUTLINED_FUNCTION_2_18();
}

ValueMetadata *type metadata accessor for DataFilter()
{
  return &type metadata for DataFilter;
}

_QWORD *initializeBufferWithCopyOfBuffer for DataFilter.FilterResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DataFilter.FilterResult()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for DataFilter.FilterResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DataFilter.FilterResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DataFilter.FilterResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DataFilter.FilterResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for DataFilter.FilterResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DataFilter.FilterResult);
}

uint64_t OUTLINED_FUNCTION_1_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void OUTLINED_FUNCTION_2_18()
{
  JUMPOUT(0x2494F5EC4);
}

uint64_t OUTLINED_FUNCTION_3_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_4_22()
{
  return type metadata accessor for Array();
}

uint64_t EmailContentPreprocessing.preprocess(data:query:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v3[9] = type metadata accessor for SearchResultItem(0);
  v3[10] = swift_task_alloc();
  v3[11] = type metadata accessor for EmailDocument(0);
  v3[12] = OUTLINED_FUNCTION_5_8();
  v3[13] = OUTLINED_FUNCTION_17();
  v3[14] = *(_QWORD *)(type metadata accessor for SearchResult(0) - 8);
  v3[15] = OUTLINED_FUNCTION_5_8();
  v3[16] = OUTLINED_FUNCTION_17();
  v4 = type metadata accessor for OSSignpostError();
  v3[17] = v4;
  v3[18] = *(_QWORD *)(v4 - 8);
  v3[19] = OUTLINED_FUNCTION_5_8();
  v3[20] = OUTLINED_FUNCTION_17();
  v5 = type metadata accessor for OSSignpostID();
  v3[21] = v5;
  v3[22] = *(_QWORD *)(v5 - 8);
  v3[23] = OUTLINED_FUNCTION_5_8();
  v3[24] = OUTLINED_FUNCTION_17();
  v3[25] = OUTLINED_FUNCTION_17();
  v3[26] = OUTLINED_FUNCTION_17();
  return swift_task_switch();
}

uint64_t EmailContentPreprocessing.preprocess(data:query:)()
{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint8_t *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  char v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t *v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  int EnumCaseMultiPayload;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  os_signpost_id_t v50;
  uint64_t v51;
  uint8_t *v52;
  os_signpost_id_t v53;
  uint64_t v54;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[4];

  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v0 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v0, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v1 = OSSignposter.logHandle.getter();
  v2 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v3 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v4 = OUTLINED_FUNCTION_55_1(v3);
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v2, v4, "EmailContentPreprocessing.preprocess", "", v3);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = *(_QWORD *)(v58 + 200);
  v5 = *(_QWORD *)(v58 + 208);
  v7 = *(_QWORD *)(v58 + 168);
  v8 = *(_QWORD *)(v58 + 176);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v5, v7);
  type metadata accessor for NSUserDefaults();
  static NSUserDefaults.emailContentPreprocessing.getter();
  if ((v10 & 1) != 0)
  {
    if (one-time initialization token for search != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logging.search);
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    LOBYTE(v13) = static os_log_type_t.info.getter();
    v14 = os_log_type_enabled(v12, (os_log_type_t)v13);
    v15 = *(_QWORD *)(v58 + 64);
    v56 = (void (*)(uint64_t))v9;
    if (v14)
    {
      v16 = *(_QWORD *)(v58 + 56);
      v17 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      v60[0] = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v17 = 136315138;
      OUTLINED_FUNCTION_46_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v60);
      *(_QWORD *)(v58 + 40) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24315F000, v12, (os_log_type_t)v13, "EmailContentPreprocessing started for query:%s", v17, 0xCu);
      swift_arrayDestroy();
      specialized UnsafeMutablePointer.deallocate()();
    }
    swift_bridgeObjectRelease_n();

    v26 = *(_QWORD *)(v58 + 48);
    v27 = *(_QWORD *)(v26 + 16);
    v28 = MEMORY[0x24BEE4AF8];
    if (v27)
    {
      v30 = *(_QWORD *)(v58 + 104);
      v29 = *(_QWORD *)(v58 + 112);
      v13 = (uint64_t *)(v58 + 104);
      v59 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v31 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      v32 = v26 + v31;
      v57 = *(_QWORD *)(v29 + 72);
      do
      {
        v33 = type metadata accessor for SearchResultItem;
        outlined init with copy of SearchResult(v32, *(_QWORD *)(v58 + 80), type metadata accessor for SearchResultItem);
        OUTLINED_FUNCTION_12_17();
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v35 = (uint64_t *)(v58 + 80);
        if (!EnumCaseMultiPayload)
        {
          outlined init with take of SearchResult(*(_QWORD *)(v58 + 80), *v13, type metadata accessor for EmailDocument);
          if (*(_QWORD *)(v30 + 56))
          {
            OUTLINED_FUNCTION_46_0();
            v36 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of closure #1 in EmailContentPreprocessing.preprocess(data:query:));
            specialized Sequence.compactMap<A>(_:)(v36);
            v38 = v37;
            OUTLINED_FUNCTION_46_0();
            v39 = OUTLINED_FUNCTION_12_17();
            v60[0] = 0;
            v60[1] = 0xE000000000000000;
            *(_QWORD *)(v58 + 16) = specialized RangeReplaceableCollection.filter(_:)(v39, v40, v38);
            *(_QWORD *)(v58 + 24) = v41;
            String.UnicodeScalarView.append<A>(contentsOf:)();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_80_0();
            swift_bridgeObjectRelease();
            v42 = objc_allocWithZone(MEMORY[0x24BDD1798]);
            @nonobjc NSRegularExpression.init(pattern:options:)(0xD000000000000026, 0x800000024335D520, 0);
            String.text.getter();
            String.UTF16View.count.getter();
            OUTLINED_FUNCTION_80_0();
            OUTLINED_FUNCTION_17_16();
          }
          v35 = (uint64_t *)(v58 + 104);
          v33 = type metadata accessor for EmailDocument;
        }
        _s10OmniSearch0B6ResultVWOhTm_0(*v35, v33);
        outlined init with copy of SearchResult(v32, *(_QWORD *)(v58 + 128), type metadata accessor for SearchResult);
        v28 = v59;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v28 = v59;
        }
        v44 = *(_QWORD *)(v28 + 16);
        if (v44 >= *(_QWORD *)(v28 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v28 = v59;
        }
        v45 = *(_QWORD *)(v58 + 128);
        *(_QWORD *)(v28 + 16) = v44 + 1;
        outlined init with take of SearchResult(v45, v28 + v31 + v44 * v57, type metadata accessor for SearchResult);
        v32 += v57;
        --v27;
      }
      while (v27);
    }
    v46 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
    {
      v47 = *(_QWORD *)(v58 + 144);
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (OUTLINED_FUNCTION_13_18(*(uint64_t (**)(uint64_t, uint64_t))(v47 + 88)) == *MEMORY[0x24BEE7810])
      {
        v48 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v58 + 144) + 8))(*(_QWORD *)(v58 + 160), *(_QWORD *)(v58 + 136));
        v48 = "";
      }
      v52 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      v53 = OUTLINED_FUNCTION_55_1(v52);
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v46, (os_signpost_type_t)v13, v53, "EmailContentPreprocessing.preprocess", v48, v52);
      specialized UnsafeMutablePointer.deallocate()();
    }

    v54 = OUTLINED_FUNCTION_12_17();
    v56(v54);
    swift_release();
  }
  else
  {
    if (one-time initialization token for search != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logging.search);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_24315F000, v20, v21, "Skip email content preprocessing logging for eval", v22, 2u);
      specialized UnsafeMutablePointer.deallocate()();
    }

    swift_bridgeObjectRetain();
    v23 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
    {
      v24 = *(_QWORD *)(v58 + 144);
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (OUTLINED_FUNCTION_13_18(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88)) == *MEMORY[0x24BEE7810])
      {
        v25 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v58 + 144) + 8))(*(_QWORD *)(v58 + 152), *(_QWORD *)(v58 + 136));
        v25 = "";
      }
      v49 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      v50 = OUTLINED_FUNCTION_55_1(v49);
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v23, (os_signpost_type_t)v7, v50, "EmailContentPreprocessing.preprocess", v25, v49);
      specialized UnsafeMutablePointer.deallocate()();
    }

    v51 = OUTLINED_FUNCTION_12_17();
    ((void (*)(uint64_t))v9)(v51);
    swift_release();
    v28 = *(_QWORD *)(v58 + 48);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v58 + 8))(v28);
}

uint64_t protocol witness for SearchEntityPreprocess.preprocess(data:query:) in conformance EmailContentPreprocessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for SearchEntityPreprocess.preprocess(data:query:) in conformance EmailContentPreprocessing;
  return EmailContentPreprocessing.preprocess(data:query:)(a1, a2, a3);
}

uint64_t protocol witness for SearchEntityPreprocess.preprocess(data:query:) in conformance EmailContentPreprocessing(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t specialized RangeReplaceableCollection.filter(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_21;
  v7 = 0;
  while (1)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v8 = _decodeScalar(_:startingAt:)();
    }
    v10 = v9;
    v11 = *(_QWORD *)(a3 + 16);
    if (!v11)
      goto LABEL_19;
    if (*(_DWORD *)(a3 + 32) != v8)
      break;
LABEL_20:
    v7 += v10;
    if (v7 >= v5)
      goto LABEL_21;
  }
  if (v11 == 1)
  {
LABEL_19:
    String.UnicodeScalarView.append(_:)();
    goto LABEL_20;
  }
  v12 = 9;
  while (1)
  {
    v13 = v12 - 7;
    if (__OFADD__(v12 - 8, 1))
      break;
    if (*(_DWORD *)(a3 + 4 * v12) == v8)
      goto LABEL_20;
    ++v12;
    if (v13 == v11)
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  OUTLINED_FUNCTION_56_0();
  swift_bridgeObjectRelease();
  return 0;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x2494F5BB8]();
  OUTLINED_FUNCTION_56_0();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = MEMORY[0x24BEE4B08];
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = OUTLINED_FUNCTION_11_13();
  v3 = result;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return v3;
  }
  v4 = 0;
  v5 = result + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_46_0();
    String.hash(into:)();
    result = Hasher._finalize()();
    v9 = -1 << *(_BYTE *)(v3 + 32);
    v10 = result & ~v9;
    v11 = v10 >> 6;
    v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
    v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      v14 = *(_QWORD *)(v3 + 48);
      v15 = (_QWORD *)(v14 + 16 * v10);
      v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (result = OUTLINED_FUNCTION_7_22(), (result & 1) != 0))
      {
LABEL_11:
        result = OUTLINED_FUNCTION_80_0();
        goto LABEL_22;
      }
      v17 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v17;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
        v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          result = OUTLINED_FUNCTION_7_22();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    *v20 = v8;
    v20[1] = v7;
    v21 = *(_QWORD *)(v3 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v23;
LABEL_22:
    if (++v4 == v24)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for Calendar.Component();
  v30 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v25 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = MEMORY[0x24BEE4B08];
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  result = OUTLINED_FUNCTION_11_13();
  v9 = result;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  v10 = 0;
  v29 = result + 56;
  v11 = *(unsigned __int8 *)(v30 + 80);
  v25 = a1;
  v26 = a1 + ((v11 + 32) & ~v11);
  while (v10 < *(_QWORD *)(a1 + 16))
  {
    v12 = *(_QWORD *)(v30 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    v13(v7, v26 + v12 * v10, v2);
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
    v14 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(_BYTE *)(v9 + 32));
    OUTLINED_FUNCTION_6_21();
    if ((v17 & v16) != 0)
    {
      v28 = v10;
      v19 = ~v18;
      while (1)
      {
        v13(v5, *(_QWORD *)(v9 + 48) + v14 * v12, v2);
        lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2C0]);
        v20 = dispatch thunk of static Equatable.== infix(_:_:)();
        v21 = *(void (**)(char *, uint64_t))(v30 + 8);
        v21(v5, v2);
        if ((v20 & 1) != 0)
          break;
        v14 = (v14 + 1) & v19;
        OUTLINED_FUNCTION_6_21();
        if ((v16 & v17) == 0)
        {
          a1 = v25;
          v10 = v28;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v21)(v7, v2);
      a1 = v25;
      v10 = v28;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v29 + 8 * v15) = v17 | v16;
      result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(*(_QWORD *)(v9 + 48) + v14 * v12, v7, v2);
      v22 = *(_QWORD *)(v9 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        goto LABEL_18;
      *(_QWORD *)(v9 + 16) = v24;
    }
    if (++v10 == v27)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = MEMORY[0x24BEE4B08];
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  result = static _SetStorage.allocate(capacity:)();
  v3 = result;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return v3;
  }
  v4 = 0;
  v5 = result + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v9 = -1 << *(_BYTE *)(v3 + 32);
    v10 = result & ~v9;
    v11 = v10 >> 6;
    v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
    v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      v14 = *(_QWORD *)(v3 + 48);
      v15 = (uint64_t *)(v14 + 16 * v10);
      result = *v15;
      if (*v15 == v8 && v15[1] == v7)
        goto LABEL_21;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_21;
      v17 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v17;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
        v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0)
          break;
        v18 = (uint64_t *)(v14 + 16 * v10);
        result = *v18;
        if (*v18 != v8 || v18[1] != v7)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
    *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    *v20 = v8;
    v20[1] = v7;
    v21 = *(_QWORD *)(v3 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_26;
    *(_QWORD *)(v3 + 16) = v23;
    result = swift_bridgeObjectRetain();
LABEL_21:
    if (++v4 == v24)
      goto LABEL_24;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for EmailContentPreprocessing()
{
  return &type metadata for EmailContentPreprocessing;
}

void lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for Calendar.Component();
    atomic_store(MEMORY[0x2494F6CA4](a2, v4), a1);
  }
  OUTLINED_FUNCTION_5();
}

void OUTLINED_FUNCTION_4_23()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_7_22()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_11_13()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t OUTLINED_FUNCTION_12_17()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_13_18@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void OUTLINED_FUNCTION_16_20()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_17_16()
{
  JUMPOUT(0x2494F5BB8);
}

uint64_t LocalSearchService.init(maxItemCount:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  type metadata accessor for LocalIndexClient();
  result = LocalIndexClient.__allocating_init()();
  *(_QWORD *)a3 = 1;
  *(_BYTE *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = a1;
  *(_BYTE *)(a3 + 32) = a2 & 1;
  return result;
}

void LocalSearchService.supportedSearchSources.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t LocalSearchService.type.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t LocalSearchService.indexClient.getter()
{
  return swift_retain();
}

uint64_t LocalSearchService.maxItemCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

Swift::Void __swiftcall LocalSearchService.prewarm()()
{
  LocalIndexClient.prewarm()();
}

uint64_t LocalSearchService.search(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a2;
  v4 = type metadata accessor for OSSignpostError();
  *(_QWORD *)(v3 + 88) = v4;
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 104) = swift_task_alloc();
  v5 = type metadata accessor for OSSignpostID();
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 128) = OUTLINED_FUNCTION_9_4();
  *(_QWORD *)(v3 + 136) = OUTLINED_FUNCTION_9_4();
  v6 = OUTLINED_FUNCTION_9_4();
  v7 = *v2;
  *(_QWORD *)(v3 + 144) = v6;
  *(_QWORD *)(v3 + 152) = v7;
  *(_BYTE *)(v3 + 49) = *((_BYTE *)v2 + 8);
  v8 = v2[3];
  *(_QWORD *)(v3 + 160) = v2[2];
  *(_QWORD *)(v3 + 168) = v8;
  *(_BYTE *)(v3 + 50) = *((_BYTE *)v2 + 32);
  OUTLINED_FUNCTION_54();
  return swift_task_switch();
}

uint64_t LocalSearchService.search(text:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint8_t *v4;
  os_signpost_id_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  _QWORD *v15;
  uint64_t v17;

  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v1 = type metadata accessor for OSSignposter();
  *(_QWORD *)(v0 + 176) = __swift_project_value_buffer(v1, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v2 = OSSignposter.logHandle.getter();
  v3 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v4 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_WORD *)v4 = 0;
    v5 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_24315F000, v2, v3, v5, "LocalSearchService.search", "", v4, 2u);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = *(_BYTE *)(v0 + 50);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_BYTE *)(v0 + 49);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 168);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v9, v13);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(_QWORD *)(v0 + 184) = OSSignpostIntervalState.init(id:isOpen:)();
  v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v0 + 192) = v14;
  v14(v9, v13);
  type metadata accessor for LatencyProfiler();
  OUTLINED_FUNCTION_106_4();
  *(_QWORD *)(v0 + 200) = LatencyProfiler.init(_:)(0xD000000000000010, 0x800000024335D570);
  *(_QWORD *)(v0 + 16) = v10;
  *(_BYTE *)(v0 + 24) = v8;
  *(_QWORD *)(v0 + 32) = v7;
  *(_QWORD *)(v0 + 40) = v17;
  *(_BYTE *)(v0 + 48) = v6;
  swift_bridgeObjectRetain();
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v15;
  *v15 = v0;
  v15[1] = LocalSearchService.search(text:);
  return LocalSearchService.search(spotlightRequest:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 168), v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_101_1();
  *(_QWORD *)(v2 + 56) = v0;
  *(_QWORD *)(v2 + 64) = v1;
  OUTLINED_FUNCTION_16_7();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  os_signpost_id_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_8_14();
  OUTLINED_FUNCTION_50();
  v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v2 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 88);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    OUTLINED_FUNCTION_50();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5) == *MEMORY[0x24BEE7810])
    {
      v6 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
      v6 = "";
    }
    v7 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_WORD *)v7 = 0;
    v8 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_24315F000, v1, v2, v8, "LocalSearchService.search", v6, v7, 2u);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 112);

  v10(v11, v12);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t LocalSearchService.search(spotlightRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_BYTE *)(v5 + 49) = a4;
  *(_QWORD *)(v5 + 112) = a2;
  *(_QWORD *)(v5 + 120) = a3;
  *(_QWORD *)(v5 + 104) = a1;
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v4;
  *(_OWORD *)(v5 + 32) = v6;
  *(_BYTE *)(v5 + 48) = *(_BYTE *)(v4 + 32);
  return swift_task_switch();
}

uint64_t LocalSearchService.search(spotlightRequest:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v16;
  __int128 v17;
  uint64_t v18;

  if (one-time initialization token for search != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logging.search);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 104);
    v16 = *(_BYTE *)(v0 + 49);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v7 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v18 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 56) = v4;
    *(_QWORD *)(v0 + 64) = v5;
    *(_QWORD *)(v0 + 72) = v6;
    *(_BYTE *)(v0 + 80) = v16 & 1;
    swift_bridgeObjectRetain();
    v8 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v18);
    *(_QWORD *)(v0 + 96) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24315F000, v2, v3, "Start Spotlight search with request: %s", v7, 0xCu);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }
  swift_bridgeObjectRelease_n();

  v11 = *(_BYTE *)(v0 + 49);
  v12 = *(_QWORD *)(v0 + 120);
  v17 = *(_OWORD *)(v0 + 104);
  v13 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v13;
  *(_QWORD *)(v13 + 16) = v0 + 16;
  *(_OWORD *)(v13 + 24) = v17;
  *(_QWORD *)(v13 + 40) = v12;
  *(_BYTE *)(v13 + 48) = v11 & 1;
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchResult]);
  *v14 = v0;
  v14[1] = LocalSearchService.search(spotlightRequest:);
  OUTLINED_FUNCTION_54();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  OUTLINED_FUNCTION_101_1();
  OUTLINED_FUNCTION_16_7();
  swift_task_dealloc();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
}

uint64_t closure #1 in LocalSearchService.search(spotlightRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchResult], Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  LocalIndexClient.findMatches(for:maxItemCount:completion:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in LocalSearchService.search(spotlightRequest:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchResult], Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t LocalSearchService.search(query:sources:allowedTypes:searchOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 56) = a3;
  *(_QWORD *)(v5 + 64) = a4;
  v6 = *v4;
  *(_BYTE *)(v5 + 49) = *((_BYTE *)v4 + 8);
  v7 = v4[2];
  v8 = v4[3];
  *(_QWORD *)(v5 + 72) = v6;
  *(_QWORD *)(v5 + 80) = v7;
  *(_QWORD *)(v5 + 88) = v8;
  *(_BYTE *)(v5 + 50) = *((_BYTE *)v4 + 32);
  OUTLINED_FUNCTION_54();
  return swift_task_switch();
}

uint64_t LocalSearchService.search(query:sources:allowedTypes:searchOptions:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_BYTE *)(v0 + 50);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_BYTE *)(v0 + 49);
  v5 = *(_QWORD *)(v0 + 72);
  type metadata accessor for LatencyProfiler();
  OUTLINED_FUNCTION_106_4();
  *(_QWORD *)(v0 + 96) = LatencyProfiler.init(_:)(0xD00000000000001DLL, 0x800000024335D590);
  *(_QWORD *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 24) = v4;
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v2;
  *(_BYTE *)(v0 + 48) = v1;
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v6;
  *v6 = v0;
  v6[1] = LocalSearchService.search(query:sources:allowedTypes:searchOptions:);
  return LocalSearchService.search(spotlightRequest:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88), v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_8_14();
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

uint64_t LocalSearchService.search(query:sources:allowedTypes:searchOptions:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

Swift::String __swiftcall LocalSearchService.toString(documents:)(Swift::OpaquePointer documents)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String result;

  v1 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v1);
  if (one-time initialization token for iso8601PrettyPrinted != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchResult]);
  lazy protocol witness table accessor for type [SearchResult] and conformance <A> [A]();
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  static String.Encoding.utf8.getter();
  v2 = String.init(data:encoding:)();
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    OUTLINED_FUNCTION_89_7();
  }
  else
  {
    OUTLINED_FUNCTION_89_7();
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  v6 = v4;
  v7 = (void *)v5;
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

uint64_t protocol witness for SearchService.search(query:sources:allowedTypes:searchOptions:) in conformance LocalSearchService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = protocol witness for SearchService.search(query:sources:allowedTypes:searchOptions:) in conformance LocalSearchService;
  return LocalSearchService.search(query:sources:allowedTypes:searchOptions:)((uint64_t)v7, v8, a3, a4);
}

uint64_t protocol witness for SearchService.search(query:sources:allowedTypes:searchOptions:) in conformance LocalSearchService(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_101_1();
  v4 = OUTLINED_FUNCTION_16_7();
  if (!v1)
    v4 = a1;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

BOOL static LocalSearchService.ParseError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LocalSearchService.ParseError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int LocalSearchService.ParseError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LocalSearchService.ParseError(char *a1, char *a2)
{
  return static LocalSearchService.ParseError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalSearchService.ParseError()
{
  unsigned __int8 *v0;

  return LocalSearchService.ParseError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance LocalSearchService.ParseError(uint64_t a1)
{
  unsigned __int8 *v1;

  LocalSearchService.ParseError.hash(into:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError;
  if (!lazy protocol witness table cache variable for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for LocalSearchService.ParseError, &type metadata for LocalSearchService.ParseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError);
  }
  return result;
}

uint64_t destroy for LocalSearchService()
{
  return swift_release();
}

uint64_t initializeWithCopy for LocalSearchService(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LocalSearchService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for LocalSearchService(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalSearchService(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalSearchService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchService()
{
  return &type metadata for LocalSearchService;
}

uint64_t storeEnumTagSinglePayload for LocalSearchService.ParseError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24322DB20 + 4 * byte_243353895[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24322DB54 + 4 * asc_243353890[v4]))();
}

uint64_t sub_24322DB54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24322DB5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24322DB64);
  return result;
}

uint64_t sub_24322DB70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24322DB78);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24322DB7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24322DB84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchService.ParseError()
{
  return &type metadata for LocalSearchService.ParseError;
}

uint64_t partial apply for closure #1 in LocalSearchService.search(spotlightRequest:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in LocalSearchService.search(spotlightRequest:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24322DBB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchResult], Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LocalSearchService.search(spotlightRequest:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchResult], Never>);
  return closure #1 in closure #1 in LocalSearchService.search(spotlightRequest:)();
}

uint64_t OUTLINED_FUNCTION_8_14()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D153OIegnrzr_TR129_s10OmniSearch14ResultHydratorC32fetchFullContentForPhotosResults33_4DC86B6DF70367122DAA7E88D902EF60LLySayAA0bC0VGAHYaKFSSSshcfu_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v15;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      v9 = MEMORY[0x2494F5C48](v5, v6, v7, v8);
      v11 = v10;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v15 + 16);
      if (v12 >= *(_QWORD *)(v15 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v15 + 16) = v12 + 1;
      v13 = v15 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v11;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = specialized Array.index(_:offsetBy:limitedBy:)(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = specialized Array.index(_:offsetBy:limitedBy:)(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  uint64_t v1;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    v1 = String.subscript.getter();
    OUTLINED_FUNCTION_6_1();
    return v1;
  }
  return result;
}

uint64_t ResultHydrator.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for EmailContentManager();
  v1 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2E3B8]), sel_init);
  type metadata accessor for SFCardSection(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  static NSUserDefaults.answerSynthesisLimit.getter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v1, v2);
}

uint64_t ResultHydrator.emailContentManager.getter()
{
  return swift_retain();
}

uint64_t ResultHydrator.hydratedResultLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void ResultHydrator.__allocating_init(emailContentManager:hydratedResultLimit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t ResultHydrator.init(emailContentManager:hydratedResultLimit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t ResultHydrator.fetchFullContent(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[33] = a1;
  v2[34] = v1;
  v3 = OUTLINED_FUNCTION_103_3();
  v2[35] = v3;
  v2[36] = *(_QWORD *)(v3 - 8);
  v2[37] = OUTLINED_FUNCTION_5_8();
  v2[38] = OUTLINED_FUNCTION_17();
  v2[39] = OUTLINED_FUNCTION_17();
  v2[40] = OUTLINED_FUNCTION_17();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  v2[41] = v4;
  v2[42] = *(_QWORD *)(v4 - 8);
  v2[43] = OUTLINED_FUNCTION_5_8();
  v2[44] = OUTLINED_FUNCTION_17();
  v2[45] = *(_QWORD *)(OUTLINED_FUNCTION_77_0() - 8);
  v2[46] = OUTLINED_FUNCTION_5_8();
  v2[47] = OUTLINED_FUNCTION_17();
  v2[48] = OUTLINED_FUNCTION_17();
  v2[49] = OUTLINED_FUNCTION_17();
  v5 = type metadata accessor for SearchResultType();
  v2[50] = v5;
  v2[51] = *(_QWORD *)(v5 - 8);
  v2[52] = OUTLINED_FUNCTION_5_8();
  v2[53] = OUTLINED_FUNCTION_17();
  v2[54] = OUTLINED_FUNCTION_17();
  v2[55] = OUTLINED_FUNCTION_17();
  v6 = OUTLINED_FUNCTION_104_2();
  v2[56] = v6;
  v2[57] = *(_QWORD *)(v6 - 8);
  v2[58] = OUTLINED_FUNCTION_5_8();
  v2[59] = OUTLINED_FUNCTION_17();
  v2[60] = OUTLINED_FUNCTION_17();
  v2[61] = OUTLINED_FUNCTION_17();
  v2[62] = OUTLINED_FUNCTION_17();
  v2[63] = OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

void ResultHydrator.fetchFullContent(for:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_log_t log,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint8_t *v43;
  os_signpost_type_t v44;
  os_signpost_id_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  os_log_type_t v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  _DWORD *v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint8_t *v165;
  os_signpost_type_t v166;
  os_signpost_id_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;

  OUTLINED_FUNCTION_81_5();
  v197 = v39;
  v198 = v40;
  v196 = v38;
  if (one-time initialization token for searchSignposter != -1)
    goto LABEL_88;
  while (1)
  {
    v41 = *(NSObject **)(v38 + 504);
    v42 = OUTLINED_FUNCTION_78_5();
    *(_QWORD *)(v38 + 512) = __swift_project_value_buffer(v42, (uint64_t)static Logging.searchSignposter);
    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_192();
    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_189_0();
    if ((OUTLINED_FUNCTION_188_0() & 1) != 0)
    {
      v43 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_55_1(v43);
      OUTLINED_FUNCTION_35_2();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v41, v44, v45, "SpotlightContentRetriever.fetchFullContent", "", v43);
      specialized UnsafeMutablePointer.deallocate()();
    }
    v46 = *(_QWORD *)(v38 + 504);
    v47 = *(_QWORD *)(v38 + 456);

    OUTLINED_FUNCTION_59_6();
    OUTLINED_FUNCTION_77_2();
    OUTLINED_FUNCTION_27();
    *(_QWORD *)(v38 + 520) = OUTLINED_FUNCTION_73_2();
    v48 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8);
    *(_QWORD *)(v38 + 528) = v48;
    OUTLINED_FUNCTION_181_0(v46, v48);
    if (one-time initialization token for search != -1)
      swift_once();
    v49 = OUTLINED_FUNCTION_13();
    v50 = __swift_project_value_buffer(v49, (uint64_t)static Logging.search);
    *(_QWORD *)(v38 + 536) = v50;
    Logger.logObject.getter();
    v51 = OUTLINED_FUNCTION_52_10();
    if (os_log_type_enabled(v41, v51))
    {
      v52 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_24315F000, v41, v51, "SpotlightContentRetriever: Fetching full content for personal results...", v52, 2u);
      specialized UnsafeMutablePointer.deallocate()();
    }
    v53 = *(_QWORD *)(v38 + 440);
    v54 = *(_QWORD *)(v38 + 400);
    v55 = *(_QWORD *)(v38 + 408);
    v56 = *(_QWORD *)(v38 + 272);

    v57 = OUTLINED_FUNCTION_91_0();
    v58 = specialized Dictionary.init<A>(grouping:by:)(v57);
    *(_QWORD *)(v38 + 544) = v58;
    *(_DWORD *)(v38 + 800) = *MEMORY[0x24BE6E1D0];
    v59 = *(void (**)(uint64_t))(v55 + 104);
    *(_QWORD *)(v38 + 552) = v59;
    v59(v53);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_184(v53);
    v61 = v60;
    OUTLINED_FUNCTION_6_1();
    v62 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    *(_QWORD *)(v38 + 560) = v62;
    v62(v53, v54);
    v63 = MEMORY[0x24BEE4AF8];
    if (v61)
      v64 = v61;
    else
      v64 = MEMORY[0x24BEE4AF8];
    v65 = *(_QWORD *)(v56 + 24);
    *(_QWORD *)(v38 + 568) = v65;
    *(_QWORD *)(v38 + 576) = specialized Collection.prefix(_:)(v65, v64);
    v183 = v68;
    *(_QWORD *)(v38 + 584) = v68;
    *(_QWORD *)(v38 + 592) = v66;
    *(_QWORD *)(v38 + 600) = v67;
    v69 = MEMORY[0x24BEE4AD8];
    v194 = v38;
    if (v66 != v67 >> 1)
    {
      v76 = v66;
      v77 = v67 >> 1;
      swift_unknownObjectRetain();
      Logger.logObject.getter();
      v78 = OUTLINED_FUNCTION_52_10();
      if (OUTLINED_FUNCTION_44_12(v78))
      {
        v185 = v58;
        v79 = (_DWORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v182 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        v195 = v182;
        *v79 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024335D600, &v195);
        *(_QWORD *)(v38 + 248) = v80;
        OUTLINED_FUNCTION_217();
        OUTLINED_FUNCTION_201_0();
        if (!__OFSUB__(v77, v76))
        {
          OUTLINED_FUNCTION_200_0();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_105_7();
          OUTLINED_FUNCTION_30_12(&dword_24315F000, v81, (os_log_type_t)v50, "%s calling fetchFullContentForMailResults for %ld email(s)", v82, v83, v84, v85, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v180,
            v181,
            v182,
            v183,
            v185);
          OUTLINED_FUNCTION_34_2();
          specialized UnsafeMutablePointer.deallocate()();
        }
      }
      else
      {
        OUTLINED_FUNCTION_105_7();

        v101 = v77 - v76;
        if (!__OFSUB__(v77, v76))
        {
          v102 = MEMORY[0x24BEE4AF8];
          if (!v101)
          {
LABEL_35:
            *(_QWORD *)(v38 + 608) = v102;
            v107 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v38 + 616) = v107;
            v108 = OUTLINED_FUNCTION_49_3(v107, (uint64_t)ResultHydrator.fetchFullContent(for:));
            ResultHydrator.fetchFullContentForMailResults(_:)(v108);
            return;
          }
          v195 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_17_17();
          if (v101 < 0)
            goto LABEL_90;
          v103 = *(_QWORD *)(v38 + 328);
          v186 = *(_QWORD *)(v38 + 336);
          v38 = v183;
          while (v76 < v77)
          {
            v102 = *(_QWORD *)(v194 + 392);
            v104 = *(_QWORD *)(v194 + 352);
            OUTLINED_FUNCTION_219(v183 + *(_QWORD *)(v186 + 72) * v76);
            OUTLINED_FUNCTION_84_6(v104 + *(int *)(v103 + 48));
            OUTLINED_FUNCTION_46_10();
            OUTLINED_FUNCTION_211_0();
            if ((OUTLINED_FUNCTION_61_4() & 1) == 0)
            {
              OUTLINED_FUNCTION_6_22();
              v102 = v195;
            }
            v105 = *(_QWORD *)(v102 + 16);
            if (v105 >= *(_QWORD *)(v102 + 24) >> 1)
            {
              OUTLINED_FUNCTION_12_18();
              v102 = v195;
            }
            v106 = *(_QWORD *)(v194 + 392);
            *(_QWORD *)(v102 + 16) = v105 + 1;
            OUTLINED_FUNCTION_21_13(v106);
            ++v76;
            if (!--v101)
            {
              v38 = v194;
              goto LABEL_35;
            }
          }
          __break(1u);
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
        __break(1u);
LABEL_90:
        __break(1u);
      }
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
      return;
    }
    *(_QWORD *)(v38 + 640) = v58;
    *(_QWORD *)(v38 + 648) = 0;
    v70 = *(_QWORD *)(v38 + 568);
    *(_QWORD *)(v38 + 656) = v70;
    v71 = *(NSObject **)(v38 + 536);
    v72 = v70 & ~(v70 >> 63);
    swift_unknownObjectRetain();
    Logger.logObject.getter();
    v73 = OUTLINED_FUNCTION_51_2();
    if (os_log_type_enabled(v71, v73))
    {
      v74 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      v195 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v74 = 136315650;
      OUTLINED_FUNCTION_5_21((uint64_t)"fetchFullContent(for:)");
      *(_QWORD *)(v38 + 224) = v75;
      OUTLINED_FUNCTION_14_1();
      *(_WORD *)(v74 + 12) = 2048;
      *(_QWORD *)(v38 + 232) = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v74 + 22) = 2048;
      *(_QWORD *)(v38 + 240) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_105_7();
      _os_log_impl(&dword_24315F000, v71, v73, "%s photoHydrationLimit=%ld after subtracting mailResults.count=%ld", (uint8_t *)v74, 0x20u);
      OUTLINED_FUNCTION_34_2();
      specialized UnsafeMutablePointer.deallocate()();
    }
    OUTLINED_FUNCTION_105_7();

    v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 552);
    v87 = *(NSObject **)(v38 + 424);
    v88 = *MEMORY[0x24BE6E1E0];
    *(_DWORD *)(v38 + 804) = v88;
    OUTLINED_FUNCTION_214_0(v88, v86);
    OUTLINED_FUNCTION_184((uint64_t)v87);
    OUTLINED_FUNCTION_150_0();
    if (v69)
      v89 = v69;
    else
      v89 = v63;
    v90 = specialized Collection.prefix(_:)(v72, v89);
    *(_QWORD *)(v38 + 664) = v90;
    v189 = v91;
    OUTLINED_FUNCTION_196_0(v90, v91, v92, v93);
    if (!v96)
    {
      v109 = v94;
      v110 = v95 >> 1;
      OUTLINED_FUNCTION_160_1();
      v111 = Logger.logObject.getter();
      v112 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_205_0(v112))
      {
        v114 = (_DWORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v195 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        *v114 = 136315394;
        OUTLINED_FUNCTION_5_21((uint64_t)"fetchFullContent(for:)");
        OUTLINED_FUNCTION_159_1(v115);
        OUTLINED_FUNCTION_217();
        OUTLINED_FUNCTION_201_0();
        if (!__OFSUB__(v110, v109))
        {
          OUTLINED_FUNCTION_200_0();
          OUTLINED_FUNCTION_151();
          OUTLINED_FUNCTION_23_16();
          OUTLINED_FUNCTION_36_12(&dword_24315F000, v111, v112, "%s calling fetchFullContentForPhotosResults for %ld photo(s)");
          OUTLINED_FUNCTION_34_2();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_94;
      }
      OUTLINED_FUNCTION_23_16();

      v125 = v110 - v109;
      if (__OFSUB__(v110, v109))
        goto LABEL_92;
      v126 = MEMORY[0x24BEE4AF8];
      if (!v125)
      {
LABEL_55:
        *(_QWORD *)(v194 + 696) = v126;
        v133 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v194 + 704) = v133;
        *v133 = v194;
        v133[1] = ResultHydrator.fetchFullContent(for:);
        OUTLINED_FUNCTION_38_10(v126);
        return;
      }
      v195 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_17_17();
      if (v125 < 0)
        goto LABEL_93;
      v127 = *(_QWORD *)(v38 + 360);
      v184 = *(_QWORD *)(v38 + 328);
      v187 = *(_QWORD *)(v38 + 336);
      while (v109 < v110)
      {
        v38 = v110;
        v128 = *(_QWORD *)(v194 + 344);
        v129 = *(_QWORD *)(v194 + 352);
        OUTLINED_FUNCTION_219(v189 + *(_QWORD *)(v187 + 72) * v109);
        v130 = *(int *)(v184 + 48);
        v126 = v128 + v130;
        OUTLINED_FUNCTION_84_6(v129 + v130);
        OUTLINED_FUNCTION_46_10();
        OUTLINED_FUNCTION_211_0();
        if ((OUTLINED_FUNCTION_226_0() & 1) == 0)
        {
          OUTLINED_FUNCTION_6_22();
          v126 = v195;
        }
        v131 = *(_QWORD *)(v126 + 16);
        if (v131 >= *(_QWORD *)(v126 + 24) >> 1)
        {
          OUTLINED_FUNCTION_12_18();
          v126 = v195;
        }
        v132 = *(_QWORD *)(v194 + 384);
        *(_QWORD *)(v126 + 16) = v131 + 1;
        OUTLINED_FUNCTION_124_2(v132, v126+ ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))+ *(_QWORD *)(v127 + 72) * v131);
        ++v109;
        --v125;
        v110 = v38;
        if (!v125)
          goto LABEL_55;
      }
      goto LABEL_86;
    }
    *(_QWORD *)(v38 + 728) = v58;
    OUTLINED_FUNCTION_194_0();
    v190 = v97;
    swift_unknownObjectRetain();
    OUTLINED_FUNCTION_160_1();
    Logger.logObject.getter();
    v98 = OUTLINED_FUNCTION_51_2();
    if (OUTLINED_FUNCTION_23_5(v98))
    {
      v179 = *(_QWORD *)(v38 + 648);
      v99 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      v195 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v99 = 136315906;
      OUTLINED_FUNCTION_5_21((uint64_t)"fetchFullContent(for:)");
      *(_QWORD *)(v38 + 176) = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v99 + 12) = 2048;
      *(_QWORD *)(v38 + 184) = v190;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v99 + 22) = 2048;
      *(_QWORD *)(v38 + 192) = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_190_0();
      *(_WORD *)(v99 + 32) = 2048;
      *(_QWORD *)(v38 + 200) = 0;
      OUTLINED_FUNCTION_151();
      OUTLINED_FUNCTION_105_7();
      OUTLINED_FUNCTION_187_0(&dword_24315F000, v87, (os_log_type_t)v72, "%s messageHydrationLimit=%ld after subtracting mailResults.count=%ld and photosResults.count=%ld", (uint8_t *)v99);
      OUTLINED_FUNCTION_34_2();
      specialized UnsafeMutablePointer.deallocate()();
    }
    OUTLINED_FUNCTION_193();
    OUTLINED_FUNCTION_105_7();

    v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 552);
    v117 = *(_QWORD *)(v38 + 416);
    v118 = *MEMORY[0x24BE6E200];
    *(_DWORD *)(v38 + 808) = v118;
    OUTLINED_FUNCTION_214_0(v118, v116);
    OUTLINED_FUNCTION_184(v117);
    OUTLINED_FUNCTION_150_0();
    v119 = v63;
    v120 = v38 == -176 ? v63 : v38 + 176;
    v121 = specialized Collection.prefix(_:)(v190, v120);
    *(_QWORD *)(v38 + 736) = v121;
    v191 = v122;
    OUTLINED_FUNCTION_107_4(v121, v122, v123, v124);
    if (v96)
      break;
    OUTLINED_FUNCTION_166_0();
    v134 = Logger.logObject.getter();
    v135 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_205_0(v135))
    {
      v137 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      v195 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_202_0(4.8151e-34);
      OUTLINED_FUNCTION_5_21((uint64_t)"fetchFullContent(for:)");
      OUTLINED_FUNCTION_159_1(v138);
      OUTLINED_FUNCTION_14_1();
      *(_WORD *)(v137 + 12) = 2048;
      if (!__OFSUB__(v63, v72))
      {
        OUTLINED_FUNCTION_199_0();
        *(_QWORD *)(v38 + 168) = v63 - v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_36_12(&dword_24315F000, v134, v135, "%s calling fetchFullContentForMessagesResults for %ld message(s)");
        OUTLINED_FUNCTION_34_2();
        specialized UnsafeMutablePointer.deallocate()();
      }
      goto LABEL_97;
    }
    swift_unknownObjectRelease();

    v139 = v63 - v72;
    if (__OFSUB__(v63, v72))
      goto LABEL_95;
    v140 = MEMORY[0x24BEE4AF8];
    if (!v139)
    {
LABEL_70:
      *(_QWORD *)(v38 + 768) = v140;
      v145 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v38 + 776) = v145;
      v146 = OUTLINED_FUNCTION_49_3(v145, (uint64_t)ResultHydrator.fetchFullContent(for:));
      OUTLINED_FUNCTION_13_19(v146);
      return;
    }
    v188 = v63;
    v195 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_17_17();
    if (v139 < 0)
      goto LABEL_96;
    v38 = *(_QWORD *)(v38 + 328);
    v141 = *(_QWORD *)(v194 + 336);
    while (v72 < v188)
    {
      v140 = *(_QWORD *)(v194 + 376);
      v142 = *(_QWORD *)(v194 + 352);
      OUTLINED_FUNCTION_111_3(v191 + *(_QWORD *)(v141 + 72) * v72);
      OUTLINED_FUNCTION_84_6(v142 + *(int *)(v38 + 48));
      OUTLINED_FUNCTION_46_10();
      OUTLINED_FUNCTION_114_6();
      if ((OUTLINED_FUNCTION_61_4() & 1) == 0)
      {
        OUTLINED_FUNCTION_6_22();
        v140 = v195;
      }
      v143 = *(_QWORD *)(v140 + 16);
      if (v143 >= *(_QWORD *)(v140 + 24) >> 1)
      {
        OUTLINED_FUNCTION_12_18();
        v140 = v195;
      }
      v144 = *(_QWORD *)(v194 + 376);
      *(_QWORD *)(v140 + 16) = v143 + 1;
      OUTLINED_FUNCTION_21_13(v144);
      ++v72;
      if (!--v139)
      {
        v38 = v194;
        goto LABEL_70;
      }
    }
LABEL_87:
    __break(1u);
LABEL_88:
    swift_once();
  }
  OUTLINED_FUNCTION_104_0();
  specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v58);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_185();
  OUTLINED_FUNCTION_6_1();
  v147 = v195;
  if (*(_QWORD *)(v195 + 16))
  {
    v148 = *(_QWORD *)(v38 + 360);
    v192 = *(_QWORD *)(v38 + 328);
    v195 = v119;
    OUTLINED_FUNCTION_39_10();
    OUTLINED_FUNCTION_20_2();
    v150 = v147 + v149;
    v151 = v195;
    do
    {
      v152 = *(_QWORD *)(v38 + 368);
      v153 = *(_QWORD *)(v38 + 344);
      v154 = *(_QWORD *)(v38 + 352);
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v150, v154, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v155 = *(int *)(v192 + 48);
      v156 = v153 + v155;
      OUTLINED_FUNCTION_90_3(v154 + v155, v156);
      OUTLINED_FUNCTION_93_3(v156, v152);
      outlined destroy of MobileSMSDocument?(v154, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      if ((OUTLINED_FUNCTION_227_0() & 1) == 0)
      {
        OUTLINED_FUNCTION_6_22();
        v151 = v195;
      }
      v157 = *(_QWORD *)(v151 + 16);
      if (v157 >= *(_QWORD *)(v151 + 24) >> 1)
      {
        OUTLINED_FUNCTION_12_18();
        v151 = v195;
      }
      v38 = v194;
      *(_QWORD *)(v151 + 16) = v157 + 1;
      OUTLINED_FUNCTION_138_0();
      OUTLINED_FUNCTION_93_3(v159, v158 + *(_QWORD *)(v148 + 72) * v157);
      OUTLINED_FUNCTION_143_1();
    }
    while (!v96);
  }
  swift_release();
  OUTLINED_FUNCTION_228_0();
  v193 = v160;
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_23_16();
  OUTLINED_FUNCTION_40_3();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_6_1();
  v161 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_197_0() & 1) != 0)
  {
    v162 = *(_QWORD *)(v194 + 320);
    v163 = *(_QWORD *)(v194 + 288);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_195();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v162, *(uint64_t (**)(uint64_t, uint64_t))(v163 + 88)) == *MEMORY[0x24BEE7810])
    {
      v164 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v194 + 288));
      v164 = "";
    }
    v165 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v165);
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v161, v166, v167, "SpotlightContentRetriever.fetchFullContent", v164, v165);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v168 = *(_QWORD *)(v194 + 488);
  OUTLINED_FUNCTION_1_23(v161);
  OUTLINED_FUNCTION_91_3(v168);
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_68_2();
  OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_66_2();
  OUTLINED_FUNCTION_62_2();
  OUTLINED_FUNCTION_8_15(v193, *(uint64_t (**)(void))(v194 + 8));
}

uint64_t ResultHydrator.fetchFullContent(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_47_3();
  OUTLINED_FUNCTION_101_3(v3);
  *(_QWORD *)(v2 + 624) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 632) = v0;
  }
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_47_3();
  OUTLINED_FUNCTION_101_3(v3);
  *(_QWORD *)(v2 + 712) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 720) = v0;
  }
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_47_3();
  OUTLINED_FUNCTION_101_3(v3);
  *(_QWORD *)(v2 + 784) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 792) = v0;
  }
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  os_signpost_type_t v28;
  os_signpost_id_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  __int128 v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_81_5();
  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 752);
  v5 = *(_QWORD *)(v0 + 728);
  v36 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
  v6 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 400);
  v35 = *(_OWORD *)(v0 + 736);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 552))(v6, *(unsigned int *)(v0 + 808), v7);
  *(_OWORD *)(v0 + 96) = v35;
  *(_QWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v0 + 120) = v3;
  *(_QWORD *)(v0 + 128) = v1;
  OUTLINED_FUNCTION_108_4();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVys10ArraySliceVySi6offset_10OmniSearch0J6ResultV7elementtGSayAMGG_SiAJ_AmNts5NeverOTg506_sSi10i9Search0B6k51VACSiACIgynndr_Si6offset_AC7elementt_ACtSiAD_AcEts5m86OIegnrzr_TR04_s10a8Search14c78HydratorC16fetchFullContent3forSayAA0bC0VGAH_tYaKFSi_AGtT31_AG7elementt_S6XEfU1_Tf3nnnpf_nTf1cn_nTm((_QWORD *)(v0 + 96));
  v9 = v8;
  OUTLINED_FUNCTION_186_0();
  OUTLINED_FUNCTION_36_0();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v6, isUniquelyReferenced_nonNull_native);
  OUTLINED_FUNCTION_137_2();
  v36(v6, v7);
  OUTLINED_FUNCTION_104_0();
  specialized _copySequenceToContiguousArray<A>(_:)(v5);
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_185();
  if (v2)
    return OUTLINED_FUNCTION_9_17();
  OUTLINED_FUNCTION_56_0();
  v12 = v5;
  v13 = *(_QWORD *)(v5 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(v0 + 360);
    v37 = *(_QWORD *)(v0 + 328);
    v38 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_39_10();
    OUTLINED_FUNCTION_78_11();
    do
    {
      v15 = *(_QWORD *)(v0 + 368);
      v16 = *(_QWORD *)(v0 + 344);
      v17 = *(_QWORD *)(v0 + 352);
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v12, v17, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v18 = *(int *)(v37 + 48);
      v19 = v16 + v18;
      OUTLINED_FUNCTION_90_3(v17 + v18, v19);
      OUTLINED_FUNCTION_93_3(v19, v15);
      OUTLINED_FUNCTION_218(v17);
      if ((OUTLINED_FUNCTION_227_0() & 1) == 0)
      {
        OUTLINED_FUNCTION_6_22();
        v4 = v38;
      }
      v20 = *(_QWORD *)(v4 + 16);
      if (v20 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        OUTLINED_FUNCTION_12_18();
        v4 = v38;
      }
      *(_QWORD *)(v4 + 16) = v20 + 1;
      OUTLINED_FUNCTION_138_0();
      OUTLINED_FUNCTION_93_3(v22, v21 + *(_QWORD *)(v14 + 72) * v20);
      v12 += v35;
      --v13;
    }
    while (v13);
    swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_69();
  }
  OUTLINED_FUNCTION_228_0();
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_132_1();
  OUTLINED_FUNCTION_23_16();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_56_0();
  v23 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_197_0() & 1) != 0)
  {
    v24 = *(_QWORD *)(v0 + 320);
    v25 = *(_QWORD *)(v0 + 288);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_191_0();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v24, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 88)) == *MEMORY[0x24BEE7810])
    {
      v26 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 288));
      v26 = "";
    }
    v27 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v27);
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v23, v28, v29, "SpotlightContentRetriever.fetchFullContent", v26, v27);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v30 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v31 = *(_QWORD *)(v0 + 488);
  v32 = *(_QWORD *)(v0 + 448);
  OUTLINED_FUNCTION_1_23(v23);
  v30(v31, v32);
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_68_2();
  OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_66_2();
  OUTLINED_FUNCTION_62_2();
  v33 = OUTLINED_FUNCTION_146_1();
  return OUTLINED_FUNCTION_8_15(v33, v34);
}

{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  const char *v5;
  uint64_t v6;
  _WORD *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  NSObject *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_158_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_16();
  OUTLINED_FUNCTION_6_1();
  v1 = OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_45_6();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_99_2() & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 312);
    v4 = *(uint8_t **)(v0 + 280);
    v3 = *(_QWORD *)(v0 + 288);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_191_0();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88)) == *MEMORY[0x24BEE7810])
    {
      v5 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 288));
      v5 = "";
    }
    v7 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_169_0(v7);
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v8, v9, "SpotlightContentRetriever.fetchFullContent", v5, v4);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = *(_QWORD *)(v0 + 480);
  v10 = v1;
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v12 = *(_QWORD *)(v0 + 448);
  OUTLINED_FUNCTION_11_14(v10);
  v11(v6, v12);
  swift_release();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_68_2();
  OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_66_2();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_209();
  return OUTLINED_FUNCTION_15_15(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  const char *v5;
  uint64_t v6;
  _WORD *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  NSObject *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_158_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_23_16();
  OUTLINED_FUNCTION_6_1();
  v1 = OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_45_6();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_52() & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 304);
    v4 = *(uint8_t **)(v0 + 280);
    v3 = *(_QWORD *)(v0 + 288);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_191_0();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88)) == *MEMORY[0x24BEE7810])
    {
      v5 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 288));
      v5 = "";
    }
    v7 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_169_0(v7);
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v8, v9, "SpotlightContentRetriever.fetchFullContent", v5, v4);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = *(_QWORD *)(v0 + 472);
  v10 = v1;
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v12 = *(_QWORD *)(v0 + 448);
  OUTLINED_FUNCTION_11_14(v10);
  v11(v6, v12);
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_68_2();
  OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_66_2();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_209();
  return OUTLINED_FUNCTION_15_15(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint8_t *v7;
  os_signpost_id_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_158_0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_23_16();
  OUTLINED_FUNCTION_40_3();
  OUTLINED_FUNCTION_6_1();
  v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v2 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 288);
    v4 = *(_QWORD *)(v0 + 296);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88)) == *MEMORY[0x24BEE7810])
    {
      v5 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 288));
      v5 = "";
    }
    v7 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_WORD *)v7 = 0;
    v8 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v2, v8, "SpotlightContentRetriever.fetchFullContent", v5, v7);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = *(_QWORD *)(v0 + 464);
  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v10 = *(_QWORD *)(v0 + 448);

  v9(v6, v10);
  swift_release();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_68_2();
  OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_66_2();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_209();
  return OUTLINED_FUNCTION_15_15(*(uint64_t (**)(void))(v0 + 8));
}

#error "24322F7A0: call analysis failed (funcsize=670)"

#error "24322FF28: call analysis failed (funcsize=432)"

uint64_t specialized Dictionary.init<A>(grouping:by:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v2 = type metadata accessor for SearchResultType();
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v56 = (uint64_t)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  v50 = *(_QWORD *)(v55 - 8);
  v4 = MEMORY[0x24BDAC7A8](v55);
  v49 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (uint64_t *)((char *)&v45 - v7);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v54 = (char *)&v45 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v53 = (unint64_t *)((char *)&v45 - v11);
  v12 = (_QWORD *)MEMORY[0x24BEE4B00];
  v57 = (_QWORD *)MEMORY[0x24BEE4B00];
  v48 = *(_QWORD *)(a1 + 16);
  if (v48)
  {
    v13 = 0;
    v46 = xmmword_24334DB60;
    v47 = a1;
    while (v13 < *(_QWORD *)(a1 + 16))
    {
      v14 = type metadata accessor for SearchResult(0);
      v15 = a1;
      v16 = a1
          + ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v13;
      v18 = v54;
      v17 = v55;
      v19 = (uint64_t)&v54[*(int *)(v55 + 48)];
      outlined init with copy of SearchResult(v16, v19, type metadata accessor for SearchResult);
      v20 = (uint64_t)v53;
      v21 = (uint64_t)v53 + *(int *)(v17 + 48);
      *v53 = v13;
      outlined init with take of SearchResult(v19, v21, type metadata accessor for SearchResult);
      outlined init with take of URL?(v20, (uint64_t)v8, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v22 = *(int *)(v17 + 48);
      v23 = (uint64_t)v18 + v22;
      *v18 = *v8;
      outlined init with copy of SearchResult((uint64_t)v8 + v22, (uint64_t)v18 + v22, type metadata accessor for SearchResult);
      v24 = v56;
      SearchResultItem.type.getter();
      _s10OmniSearch0B6ResultVWOhTm_1(v23, type metadata accessor for SearchResult);
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
      v27 = v12[2];
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_19;
      v30 = v25;
      if (v12[3] < v29)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, 1);
        v12 = v57;
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
        if ((v30 & 1) != (v32 & 1))
          goto LABEL_21;
        v26 = v31;
      }
      if ((v30 & 1) != 0)
      {
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v56, v52);
        v12 = v57;
        v33 = v57[7];
        outlined init with take of URL?((uint64_t)v8, v49, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        v34 = *(_QWORD *)(v33 + 8 * v26);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v33 + 8 * v26) = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v34 = v42;
          *(_QWORD *)(v33 + 8 * v26) = v42;
        }
        v36 = *(_QWORD *)(v34 + 16);
        if (v36 >= *(_QWORD *)(v34 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v34 = v43;
          *(_QWORD *)(v33 + 8 * v26) = v43;
        }
        *(_QWORD *)(v34 + 16) = v36 + 1;
        outlined init with take of URL?(v49, v34+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v36, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        a1 = v47;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: SearchResult)>);
        v37 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
        v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = v46;
        outlined init with take of URL?((uint64_t)v8, v38 + v37, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        v12[(v26 >> 6) + 8] |= 1 << v26;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v51 + 32))(v12[6] + *(_QWORD *)(v51 + 72) * v26, v56, v52);
        *(_QWORD *)(v12[7] + 8 * v26) = v38;
        v39 = v12[2];
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
          goto LABEL_20;
        v12[2] = v41;
        a1 = v15;
      }
      if (v48 == ++v13)
        goto LABEL_17;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVys10ArraySliceVySi6offset_10OmniSearch0J6ResultV7elementtGSayAMGG_SiAJ_AmNts5NeverOTg506_sSi10i9Search0B6k51VACSiACIgynndr_Si6offset_AC7elementt_ACtSiAD_AcEts5m86OIegnrzr_TR04_s10a8Search14c78HydratorC16fetchFullContent3forSayAA0bC0VGAH_tYaKFSi_AGtT31_AG7elementt_S6XEfU1_Tf3nnnpf_nTf1cn_nTm(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char v95;
  uint64_t (*v96)(uint64_t);

  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  v3 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  OUTLINED_FUNCTION_57_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_31_0();
  v94 = (_QWORD *)v5;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_31_0();
  v88 = v7;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  v87 = v9;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_31_0();
  v79 = (_QWORD *)v11;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v12);
  v78 = (uint64_t)v75 - v13;
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((offset: Int, element: SearchResult), SearchResult));
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v14);
  v82 = (_QWORD *)((char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_31_0();
  v77 = v17;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v18);
  v76 = (_QWORD *)((char *)v75 - v19);
  v20 = (uint64_t *)(a1[3] >> 1);
  v91 = a1[2];
  if (__OFSUB__(v20, v91))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v75[2] = *a1;
  v90 = a1[1];
  v21 = a1[4];
  if (*(_QWORD *)(v21 + 16) >= (uint64_t)v20 - v91)
    v22 = (uint64_t)v20 - v91;
  else
    v22 = *(_QWORD *)(v21 + 16);
  v96 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22 & ~(v22 >> 63), 0);
  v95 = 0;
  if ((v22 & 0x8000000000000000) == 0)
  {
    v23 = v22;
    v83 = v3;
    v84 = v20;
    v85 = v21;
    if (v22)
    {
      swift_unknownObjectRetain();
      OUTLINED_FUNCTION_35_1();
      v24 = 0;
      v80 = v1;
      v81 = v91 - (_QWORD)v20;
      v92 = v22;
      v25 = v94;
      while (v23 != v24)
      {
        if (!(v81 + v24))
          goto LABEL_46;
        if ((uint64_t)(v91 + v24) >= (uint64_t)v20)
          goto LABEL_39;
        v26 = *(_QWORD *)(v3 + 72);
        outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v90 + v26 * (v91 + v24), v1, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        v27 = *(_QWORD *)(v21 + 16);
        if (v24 == v27)
          goto LABEL_45;
        if (v24 >= v27)
          goto LABEL_40;
        v93 = v26;
        type metadata accessor for SearchResult(0);
        OUTLINED_FUNCTION_126_1();
        v30 = v29 + v28 * v24;
        v31 = v82;
        v32 = (uint64_t)v82 + *(int *)(v86 + 48);
        outlined init with take of URL?(v1, (uint64_t)v82, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        OUTLINED_FUNCTION_106_2(v30, v32);
        v33 = *v31;
        v34 = v89;
        v35 = *(int *)(v89 + 48);
        v36 = (uint64_t)v25 + v35;
        v37 = v87;
        v38 = (uint64_t)v87 + v35;
        *v87 = *v31;
        OUTLINED_FUNCTION_106_2((uint64_t)v31 + v35, (uint64_t)v37 + v35);
        v39 = *(int *)(v34 + 48);
        v40 = v88;
        v41 = (uint64_t)v88 + v39;
        *v88 = v33;
        outlined init with take of SearchResult(v38, (uint64_t)v40 + v39, type metadata accessor for SearchResult);
        OUTLINED_FUNCTION_106_2(v32, v36);
        _s10OmniSearch0B6ResultVWOhTm_1(v41, type metadata accessor for SearchResult);
        *v25 = v33;
        outlined destroy of MobileSMSDocument?((uint64_t)v31, &demangling cache variable for type metadata for ((offset: Int, element: SearchResult), SearchResult));
        if ((OUTLINED_FUNCTION_178() & 1) == 0)
        {
          OUTLINED_FUNCTION_88_5();
          v36 = (uint64_t)v96;
        }
        v3 = v83;
        v42 = v93;
        v44 = *(_QWORD *)(v36 + 16);
        v43 = *(_QWORD *)(v36 + 24);
        v1 = v80;
        if (v44 >= v43 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          v36 = (uint64_t)v96;
        }
        ++v24;
        *(_QWORD *)(v36 + 16) = v44 + 1;
        OUTLINED_FUNCTION_177();
        outlined init with take of URL?((uint64_t)v94, v45 + v44 * v42, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        v23 = v92;
        v20 = v84;
        v21 = v85;
        if (v92 == v24)
        {
          v46 = v95;
          v47 = v91 + v24;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    else
    {
      swift_unknownObjectRetain();
      OUTLINED_FUNCTION_35_1();
      v46 = 0;
      v47 = v91;
LABEL_20:
      v82 = (uint64_t *)v47;
      if ((v46 & 1) != 0 || v82 == v20)
      {
LABEL_37:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return;
      }
      v1 = (uint64_t)v82;
      while ((uint64_t)v82 >= v91 && v1 < (uint64_t)v20)
      {
        v49 = *(_QWORD *)(v3 + 72);
        v50 = v78;
        outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v90 + v49 * v1, v78, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        v51 = *(_QWORD *)(v21 + 16);
        if (v23 == v51)
        {
          outlined destroy of MobileSMSDocument?(v50, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
          goto LABEL_37;
        }
        if (v23 >= v51)
          goto LABEL_42;
        v94 = (_QWORD *)v49;
        type metadata accessor for SearchResult(0);
        OUTLINED_FUNCTION_126_1();
        v92 = v23;
        v54 = v53 + v52 * v23;
        v55 = v86;
        v56 = v77;
        v57 = v77 + *(int *)(v86 + 48);
        outlined init with take of URL?(v50, v77, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        v58 = v54;
        v59 = type metadata accessor for SearchResult;
        OUTLINED_FUNCTION_2_7(v58, v57);
        v60 = v76;
        outlined init with take of URL?(v56, (uint64_t)v76, &demangling cache variable for type metadata for ((offset: Int, element: SearchResult), SearchResult));
        v61 = *v60;
        v62 = v89;
        v63 = *(int *)(v89 + 48);
        v93 = (uint64_t)v60 + *(int *)(v55 + 48);
        v64 = v79;
        v65 = (uint64_t)v79 + v63;
        v66 = v87;
        v67 = (uint64_t)v87 + v63;
        *v87 = v61;
        OUTLINED_FUNCTION_2_7((uint64_t)v60 + v63, (uint64_t)v66 + v63);
        v68 = *(int *)(v62 + 48);
        v69 = v88;
        v70 = (uint64_t)v88 + v68;
        *v88 = v61;
        outlined init with take of SearchResult(v67, (uint64_t)v69 + v68, type metadata accessor for SearchResult);
        OUTLINED_FUNCTION_2_7(v93, v65);
        _s10OmniSearch0B6ResultVWOhTm_1(v70, type metadata accessor for SearchResult);
        *v64 = v61;
        outlined destroy of MobileSMSDocument?((uint64_t)v60, &demangling cache variable for type metadata for ((offset: Int, element: SearchResult), SearchResult));
        if ((OUTLINED_FUNCTION_178() & 1) == 0)
        {
          OUTLINED_FUNCTION_88_5();
          v59 = v96;
        }
        v3 = v83;
        v71 = (uint64_t)v94;
        v73 = *((_QWORD *)v59 + 2);
        v72 = *((_QWORD *)v59 + 3);
        v21 = v85;
        if (v73 >= v72 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
          v59 = v96;
        }
        ++v1;
        *((_QWORD *)v59 + 2) = v73 + 1;
        OUTLINED_FUNCTION_177();
        outlined init with take of URL?((uint64_t)v79, v74 + v73 * v71, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
        v23 = v92 + 1;
        v20 = v84;
        if (v84 == (uint64_t *)v1)
          goto LABEL_37;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  outlined destroy of MobileSMSDocument?(v1, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
LABEL_46:
  __break(1u);
}

void ResultHydrator.runDataDetectorsOnResults(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int EnumCaseMultiPayload;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  ValueMetadata *v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  ValueMetadata *v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  ValueMetadata *v71;
  unint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[2];
  uint64_t v120;
  uint8_t *v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  ValueMetadata *v148;
  unint64_t v149;

  v120 = a1;
  v125 = type metadata accessor for MobileSMSDocument(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_3();
  v137 = v2;
  v124 = type metadata accessor for EmailDocument(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for CalendarEvent(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_0_3();
  v138 = v11;
  v12 = OUTLINED_FUNCTION_77_0();
  v143 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v119 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)v119 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)v119 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (uint64_t)v119 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)v119 - v28;
  v148 = &type metadata for FeatureFlag;
  v149 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  LOBYTE(v145) = 2;
  v30 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  if ((v30 & 1) != 0)
  {
    v139 = v29;
    v136 = v27;
    v128 = v24;
    v129 = v21;
    v130 = v18;
    v131 = v15;
    type metadata accessor for DataDetectorsController();
    OUTLINED_FUNCTION_8();
    v31 = DataDetectorsController.init()();
    if (*(_QWORD *)(v120 + 16))
    {
      v142 = *(_QWORD *)(v120 + 16);
      v135 = v31;
      OUTLINED_FUNCTION_20_2();
      v141 = v32;
      v34 = v33 + v32;
      v140 = *(_QWORD *)(v35 + 72);
      v119[1] = &v146;
      swift_bridgeObjectRetain();
      v143 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v36 = 136315138;
      v126 = v36;
      v119[0] = MEMORY[0x24BEE4AD8] + 8;
      v37 = v137;
      v38 = v138;
      v133 = v8;
      v134 = v5;
      v132 = v9;
      v39 = v136;
      v40 = (uint64_t)v139;
      do
      {
        OUTLINED_FUNCTION_2_7(v34, v40);
        OUTLINED_FUNCTION_2_7(v40, v39);
        outlined init with copy of SearchResult(v39, v38, type metadata accessor for SearchResultItem);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            outlined init with take of SearchResult(v38, v37, type metadata accessor for MobileSMSDocument);
            if (*(_QWORD *)(v37 + 56))
            {
              OUTLINED_FUNCTION_124_4();
              OUTLINED_FUNCTION_156_0();
              OUTLINED_FUNCTION_121();
              v68 = v145;
              v69 = v146;
              v70 = v147;
              v71 = v148;
              v72 = v149;
              if (one-time initialization token for search != -1)
                swift_once();
              v73 = OUTLINED_FUNCTION_13();
              v74 = __swift_project_value_buffer(v73, (uint64_t)static Logging.search);
              OUTLINED_FUNCTION_104_0();
              OUTLINED_FUNCTION_104_0();
              OUTLINED_FUNCTION_104_0();
              OUTLINED_FUNCTION_104_0();
              OUTLINED_FUNCTION_104_0();
              Logger.logObject.getter();
              v75 = OUTLINED_FUNCTION_106_3();
              if (OUTLINED_FUNCTION_77_7(v75))
              {
                v76 = specialized static UnsafeMutablePointer.allocate(capacity:)();
                v77 = specialized static UnsafeMutablePointer.allocate(capacity:)();
                OUTLINED_FUNCTION_40_7(v77);
                OUTLINED_FUNCTION_115();
                OUTLINED_FUNCTION_117();
                OUTLINED_FUNCTION_116_0();
                OUTLINED_FUNCTION_35_1();
                v78 = String.init<A>(describing:)();
                OUTLINED_FUNCTION_135_2(v78, v79);
                *(_QWORD *)(v76 + 4) = v80;
                OUTLINED_FUNCTION_102_0();
                OUTLINED_FUNCTION_102_0();
                OUTLINED_FUNCTION_102_0();
                OUTLINED_FUNCTION_102_0();
                OUTLINED_FUNCTION_102_0();
                OUTLINED_FUNCTION_6_1();
                OUTLINED_FUNCTION_29_2(&dword_24315F000, v74, (os_log_type_t)v37, "Ran dd on message and got fields: %s", (uint8_t *)v76);
                OUTLINED_FUNCTION_34_2();
                specialized UnsafeMutablePointer.deallocate()();
              }

              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              v37 = v137;
              v27 = v137 + *(int *)(v125 + 56);
              OUTLINED_FUNCTION_60_7();
              *(_QWORD *)v27 = v68;
              *(_QWORD *)(v27 + 8) = v69;
              *(_QWORD *)(v27 + 16) = v70;
              *(_QWORD *)(v27 + 24) = v71;
              *(_QWORD *)(v27 + 32) = v72;
              v39 = v136;
              _s10OmniSearch0B6ResultVWOhTm_1(v136, type metadata accessor for SearchResultItem);
              outlined init with copy of SearchResult(v37, v39, type metadata accessor for MobileSMSDocument);
              OUTLINED_FUNCTION_165_0();
              swift_storeEnumTagMultiPayload();
              v8 = v133;
              v5 = v134;
              v38 = v138;
            }
            OUTLINED_FUNCTION_2_7(v39, (uint64_t)v130);
            if ((OUTLINED_FUNCTION_142_0() & 1) == 0)
              OUTLINED_FUNCTION_18_14();
            v40 = (uint64_t)v139;
            OUTLINED_FUNCTION_89_10();
            v112 = (uint64_t)v130;
            if (v85)
            {
              OUTLINED_FUNCTION_27_13();
              v111 = v118;
              v112 = (uint64_t)v130;
            }
            OUTLINED_FUNCTION_22_13(v112, v109, v110, v111);
            OUTLINED_FUNCTION_170_0(v113, v114);
            OUTLINED_FUNCTION_1_9(v40);
            v88 = v37;
            v89 = type metadata accessor for MobileSMSDocument;
          }
          else if (EnumCaseMultiPayload == 2)
          {
            outlined init with take of SearchResult(v38, (uint64_t)v8, type metadata accessor for CalendarEvent);
            v42 = CalendarEvent.llmConsumableDescription.getter();
            (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v135 + 96))(&v145, v42);
            OUTLINED_FUNCTION_121();
            v43 = v145;
            v44 = v146;
            v45 = v147;
            v46 = v148;
            v47 = v149;
            if (one-time initialization token for search != -1)
              swift_once();
            v48 = OUTLINED_FUNCTION_13();
            v49 = __swift_project_value_buffer(v48, (uint64_t)static Logging.search);
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            Logger.logObject.getter();
            v50 = OUTLINED_FUNCTION_106_3();
            if (OUTLINED_FUNCTION_77_7(v50))
            {
              v51 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
              v123 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              v144 = v123;
              v145 = v43;
              v122 = v51;
              *(_DWORD *)v51 = v126;
              v121 = v51 + 4;
              v146 = v44;
              v147 = v45;
              v148 = v46;
              v149 = v47;
              OUTLINED_FUNCTION_115();
              OUTLINED_FUNCTION_117();
              OUTLINED_FUNCTION_116_0();
              OUTLINED_FUNCTION_35_1();
              OUTLINED_FUNCTION_23_0();
              v52 = String.init<A>(describing:)();
              OUTLINED_FUNCTION_135_2(v52, v53);
              v145 = v54;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_6_1();
              OUTLINED_FUNCTION_29_2(&dword_24315F000, v49, (os_log_type_t)v37, "Ran dd on calendar and got fields: %s", v122);
              OUTLINED_FUNCTION_34_2();
              specialized UnsafeMutablePointer.deallocate()();
            }

            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            v40 = (uint64_t)v139;
            v90 = v133;
            v27 = (uint64_t)&v133[*(int *)(v127 + 56)];
            OUTLINED_FUNCTION_60_7();
            *(_QWORD *)v27 = v43;
            *(_QWORD *)(v27 + 8) = v44;
            *(_QWORD *)(v27 + 16) = v45;
            *(_QWORD *)(v27 + 24) = v46;
            v8 = v90;
            *(_QWORD *)(v27 + 32) = v47;
            v39 = v136;
            _s10OmniSearch0B6ResultVWOhTm_1(v136, type metadata accessor for SearchResultItem);
            v91 = OUTLINED_FUNCTION_216();
            outlined init with copy of SearchResult(v91, v92, type metadata accessor for CalendarEvent);
            OUTLINED_FUNCTION_165_0();
            swift_storeEnumTagMultiPayload();
            outlined init with copy of SearchResult(v39, (uint64_t)v128, type metadata accessor for SearchResult);
            v93 = OUTLINED_FUNCTION_142_0();
            v37 = v137;
            if ((v93 & 1) == 0)
              OUTLINED_FUNCTION_18_14();
            v5 = v134;
            v38 = v138;
            OUTLINED_FUNCTION_89_10();
            v97 = (uint64_t)v128;
            if (v85)
            {
              OUTLINED_FUNCTION_27_13();
              v96 = v116;
              v97 = (uint64_t)v128;
            }
            OUTLINED_FUNCTION_22_13(v97, v94, v95, v96);
            OUTLINED_FUNCTION_170_0(v98, v99);
            OUTLINED_FUNCTION_1_9(v40);
            v88 = (uint64_t)v90;
            v89 = type metadata accessor for CalendarEvent;
          }
          else
          {
            OUTLINED_FUNCTION_2_7(v40, (uint64_t)v131);
            if ((OUTLINED_FUNCTION_142_0() & 1) == 0)
              OUTLINED_FUNCTION_18_14();
            OUTLINED_FUNCTION_89_10();
            v84 = (uint64_t)v131;
            if (v85)
            {
              OUTLINED_FUNCTION_27_13();
              v83 = v115;
              v84 = (uint64_t)v131;
            }
            OUTLINED_FUNCTION_22_13(v84, v81, v82, v83);
            OUTLINED_FUNCTION_170_0(v86, v87);
            OUTLINED_FUNCTION_1_9(v40);
            v88 = v38;
            v89 = type metadata accessor for SearchResultItem;
          }
        }
        else
        {
          outlined init with take of SearchResult(v38, (uint64_t)v5, type metadata accessor for EmailDocument);
          if (*((_QWORD *)v5 + 7))
          {
            OUTLINED_FUNCTION_124_4();
            OUTLINED_FUNCTION_156_0();
            OUTLINED_FUNCTION_121();
            v55 = v145;
            v56 = v146;
            v57 = v147;
            v58 = v148;
            v59 = v149;
            if (one-time initialization token for search != -1)
              swift_once();
            v60 = OUTLINED_FUNCTION_13();
            v61 = __swift_project_value_buffer(v60, (uint64_t)static Logging.search);
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            OUTLINED_FUNCTION_104_0();
            Logger.logObject.getter();
            v62 = OUTLINED_FUNCTION_106_3();
            if (OUTLINED_FUNCTION_77_7(v62))
            {
              v63 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              v64 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              OUTLINED_FUNCTION_40_7(v64);
              OUTLINED_FUNCTION_115();
              OUTLINED_FUNCTION_117();
              OUTLINED_FUNCTION_116_0();
              OUTLINED_FUNCTION_35_1();
              v65 = String.init<A>(describing:)();
              OUTLINED_FUNCTION_135_2(v65, v66);
              *(_QWORD *)(v63 + 4) = v67;
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_102_0();
              OUTLINED_FUNCTION_6_1();
              OUTLINED_FUNCTION_29_2(&dword_24315F000, v61, (os_log_type_t)v37, "Ran dd on email and got fields: %s", (uint8_t *)v63);
              swift_arrayDestroy();
              specialized UnsafeMutablePointer.deallocate()();
            }

            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_102_0();
            v37 = v137;
            v100 = v134;
            v27 = (uint64_t)&v134[*(int *)(v124 + 72)];
            OUTLINED_FUNCTION_60_7();
            *(_QWORD *)v27 = v55;
            *(_QWORD *)(v27 + 8) = v56;
            *(_QWORD *)(v27 + 16) = v57;
            *(_QWORD *)(v27 + 24) = v58;
            v5 = v100;
            *(_QWORD *)(v27 + 32) = v59;
            v39 = v136;
            _s10OmniSearch0B6ResultVWOhTm_1(v136, type metadata accessor for SearchResultItem);
            v101 = OUTLINED_FUNCTION_216();
            outlined init with copy of SearchResult(v101, v102, type metadata accessor for EmailDocument);
            OUTLINED_FUNCTION_165_0();
            swift_storeEnumTagMultiPayload();
            v8 = v133;
            v38 = v138;
          }
          OUTLINED_FUNCTION_2_7(v39, (uint64_t)v129);
          if ((OUTLINED_FUNCTION_142_0() & 1) == 0)
            OUTLINED_FUNCTION_18_14();
          v40 = (uint64_t)v139;
          OUTLINED_FUNCTION_89_10();
          v106 = (uint64_t)v129;
          if (v85)
          {
            OUTLINED_FUNCTION_27_13();
            v105 = v117;
            v106 = (uint64_t)v129;
          }
          OUTLINED_FUNCTION_22_13(v106, v103, v104, v105);
          OUTLINED_FUNCTION_170_0(v107, v108);
          OUTLINED_FUNCTION_1_9(v40);
          v88 = (uint64_t)v5;
          v89 = type metadata accessor for EmailDocument;
        }
        _s10OmniSearch0B6ResultVWOhTm_1(v88, v89);
        OUTLINED_FUNCTION_1_9(v39);
        v34 += v27;
        --v142;
      }
      while (v142);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_43_0();
}

uint64_t ResultHydrator.fetchFullContentForMailResults(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[8] = a1;
  v2 = OUTLINED_FUNCTION_103_3();
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = OUTLINED_FUNCTION_5_8();
  v1[12] = OUTLINED_FUNCTION_17();
  v3 = OUTLINED_FUNCTION_77_0();
  v1[13] = v3;
  v1[14] = *(_QWORD *)(v3 - 8);
  v1[15] = OUTLINED_FUNCTION_18_5();
  v4 = OUTLINED_FUNCTION_104_2();
  v1[16] = v4;
  v1[17] = *(_QWORD *)(v4 - 8);
  v1[18] = OUTLINED_FUNCTION_5_8();
  v1[19] = OUTLINED_FUNCTION_17();
  v1[20] = OUTLINED_FUNCTION_17();
  v1[21] = OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;

  v3 = (_QWORD *)*v2;
  v6 = v3;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  OUTLINED_FUNCTION_101_3(&v6);
  v3[29] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = (void *)v3[27];
    swift_bridgeObjectRelease();

  }
  OUTLINED_FUNCTION_54();
  return swift_task_switch();
}

uint64_t ResultHydrator.fetchFullContentForMailResults(_:)()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  os_signpost_type_t v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t inited;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;

  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v1 = v0[21];
  v2 = OUTLINED_FUNCTION_78_5();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logging.searchSignposter);
  OUTLINED_FUNCTION_223_0(v3);
  OUTLINED_FUNCTION_192();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_189_0();
  if ((OUTLINED_FUNCTION_188_0() & 1) != 0)
  {
    v4 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v4);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v5, v6, "SpotlightContentRetriever.fetchFullContentForMailResults", "", v4);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v7 = v0[21];
  v8 = v0[17];
  v9 = v0[8];

  OUTLINED_FUNCTION_59_6();
  OUTLINED_FUNCTION_77_2();
  OUTLINED_FUNCTION_27();
  v0[23] = OUTLINED_FUNCTION_73_2();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v0[24] = v10;
  OUTLINED_FUNCTION_181_0(v7, v10);
  v11 = MEMORY[0x24BEE4AF8];
  v26 = MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(v9 + 16);
  if (v12)
  {
    v14 = v0[13];
    v13 = v0[14];
    v15 = v0[8] + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v16 = *(_QWORD *)(v13 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v17 = v0[15];
      outlined init with copy of SearchResult(v15, v17, type metadata accessor for SearchResult);
      v18 = *(void **)(v17 + *(int *)(v14 + 20));
      if (v18)
      {
        v19 = v18;
        OUTLINED_FUNCTION_215();
        MEMORY[0x2494F5E10]();
        v20 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v20 >> 1)
        {
          OUTLINED_FUNCTION_86_0(v20);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        OUTLINED_FUNCTION_215();
      }
      v15 += v16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v11 = v26;
  }
  v0[25] = v11;
  type metadata accessor for EmailContentManager();
  inited = swift_initStackObject();
  v0[26] = inited;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2E3B8]), sel_init);
  v0[27] = v22;
  *(_QWORD *)(inited + 16) = v22;
  v23 = (_QWORD *)swift_task_alloc();
  v0[28] = v23;
  v24 = OUTLINED_FUNCTION_49_3(v23, (uint64_t)ResultHydrator.fetchFullContentForMailResults(_:));
  return EmailContentManager.fetchEmailDocuments(emailItems:)(v24);
}

{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  void (*v8)(uint64_t, uint64_t);
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_99_3();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_99_2() & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88)) == *MEMORY[0x24BEE7810])
    {
      v4 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 80));
      v4 = "";
    }
    v5 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v5);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v6, v7, "SpotlightContentRetriever.fetchFullContentForMailResults", v4, v5);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  v9 = v1;
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 48);

  v8(v10, v11);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_89();
  return OUTLINED_FUNCTION_41_9(v13, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  os_signpost_type_t v7;
  os_signpost_id_t v8;
  id v9;

  v1 = *(_QWORD *)(v0 + 208);
  swift_setDeallocating();

  OUTLINED_FUNCTION_6_1();
  v2 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_99_2() & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88)) == *MEMORY[0x24BEE7810])
    {
      v5 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 80));
      v5 = "";
    }
    v6 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v6);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v2, v7, v8, "SpotlightContentRetriever.fetchFullContentForMailResults", v5, v6);
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_155_0();

  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_22(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ResultHydrator.fetchFullContentForPhotosResults(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[25] = a1;
  v2[26] = v1;
  v3 = OUTLINED_FUNCTION_103_3();
  v2[27] = v3;
  v2[28] = *(_QWORD *)(v3 - 8);
  v2[29] = OUTLINED_FUNCTION_5_8();
  v2[30] = OUTLINED_FUNCTION_17();
  v2[31] = type metadata accessor for SearchResultItem(0);
  v2[32] = OUTLINED_FUNCTION_5_8();
  v2[33] = OUTLINED_FUNCTION_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Photo?);
  v2[34] = OUTLINED_FUNCTION_18_5();
  v2[35] = type metadata accessor for Photo(0);
  v2[36] = OUTLINED_FUNCTION_5_8();
  v2[37] = OUTLINED_FUNCTION_17();
  v4 = type metadata accessor for IndexSet();
  v2[38] = v4;
  v2[39] = *(_QWORD *)(v4 - 8);
  v2[40] = OUTLINED_FUNCTION_18_5();
  v5 = OUTLINED_FUNCTION_77_0();
  v2[41] = v5;
  v2[42] = *(_QWORD *)(v5 - 8);
  v2[43] = OUTLINED_FUNCTION_5_8();
  v2[44] = OUTLINED_FUNCTION_17();
  v2[45] = OUTLINED_FUNCTION_17();
  v2[46] = OUTLINED_FUNCTION_17();
  v2[47] = OUTLINED_FUNCTION_17();
  v6 = OUTLINED_FUNCTION_104_2();
  v2[48] = v6;
  v2[49] = *(_QWORD *)(v6 - 8);
  v2[50] = OUTLINED_FUNCTION_5_8();
  v2[51] = OUTLINED_FUNCTION_17();
  v2[52] = OUTLINED_FUNCTION_17();
  v2[53] = OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

uint64_t ResultHydrator.fetchFullContentForPhotosResults(_:)()
{
  unint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  os_signpost_type_t v6;
  uint8_t *v7;
  os_signpost_id_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Class isa;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSIndexSet *v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  _BOOL8 v62;
  Swift::Int v63;
  char v64;
  Swift::Bool v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  NSObject *v146;
  const char *v147;
  uint8_t *v149;
  os_signpost_type_t v150;
  os_signpost_id_t v151;
  uint64_t v152;
  int *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  void (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192[3];

  isUniquelyReferenced_nonNull_native = v1;
  if (one-time initialization token for searchSignposter != -1)
    goto LABEL_86;
  while (1)
  {
    v5 = OUTLINED_FUNCTION_78_5();
    __swift_project_value_buffer(v5, (uint64_t)static Logging.searchSignposter);
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    OSSignposter.logHandle.getter();
    v6 = OUTLINED_FUNCTION_189_0();
    if ((OUTLINED_FUNCTION_188_0() & 1) != 0)
    {
      v7 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      v8 = OUTLINED_FUNCTION_55_1(v7);
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v0, v6, v8, "SpotlightContentRetriever.fetchFullContentForPhotosResults", "", v7);
      specialized UnsafeMutablePointer.deallocate()();
    }
    v9 = isUniquelyReferenced_nonNull_native[52];
    v10 = isUniquelyReferenced_nonNull_native[53];
    v11 = isUniquelyReferenced_nonNull_native[48];
    v12 = isUniquelyReferenced_nonNull_native[49];
    v13 = isUniquelyReferenced_nonNull_native[25];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v10, v11);
    OUTLINED_FUNCTION_77_2();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_73_2();
    v160 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v160(v10, v11);
    v14 = *(_QWORD *)(v13 + 16);
    v191 = isUniquelyReferenced_nonNull_native;
    v185 = v14;
    if (v14)
    {
      v15 = isUniquelyReferenced_nonNull_native + 2;
      v16 = isUniquelyReferenced_nonNull_native[42];
      v17 = isUniquelyReferenced_nonNull_native[25];
      v192[0] = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      OUTLINED_FUNCTION_20_2();
      v19 = v17 + v18;
      v188 = *(_QWORD *)(v16 + 72);
      v3 = v192[0];
      v20 = v14;
      do
      {
        v21 = v191[47];
        outlined init with copy of SearchResult(v19, v21, type metadata accessor for SearchResult);
        SearchResultItem.associatedValue.getter();
        __swift_project_boxed_opaque_existential_1(v15, v191[5]);
        v22 = OUTLINED_FUNCTION_97_3();
        v24 = v23(v22);
        v2 = v25;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
        _s10OmniSearch0B6ResultVWOhTm_1(v21, type metadata accessor for SearchResult);
        if ((OUTLINED_FUNCTION_116_4() & 1) == 0)
        {
          OUTLINED_FUNCTION_139_1();
          v3 = v192[0];
        }
        v27 = *(_QWORD *)(v3 + 16);
        v26 = *(_QWORD *)(v3 + 24);
        if (v27 >= v26 >> 1)
        {
          OUTLINED_FUNCTION_86_0(v26);
          OUTLINED_FUNCTION_139_1();
          v3 = v192[0];
        }
        *(_QWORD *)(v3 + 16) = v27 + 1;
        v28 = v3 + 16 * v27;
        *(_QWORD *)(v28 + 32) = v24;
        *(_QWORD *)(v28 + 40) = v2;
        v19 += v188;
        --v20;
      }
      while (v20);
      v176 = v3;
      isUniquelyReferenced_nonNull_native = v191;
    }
    else
    {
      v176 = MEMORY[0x24BEE4AF8];
    }
    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE3570]), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v30 = OUTLINED_FUNCTION_8();
    *(_OWORD *)(v30 + 16) = xmmword_24334DB60;
    *(_QWORD *)(v30 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v30 + 40) = v31;
    v32 = OUTLINED_FUNCTION_216();
    outlined bridged method (mbnn) of @objc PHFetchOptions.addFetchPropertySets(_:)(v32, v33);
    v34 = (void *)objc_opt_self();
    isa = Array._bridgeToObjectiveC()().super.isa;
    v36 = objc_msgSend(v34, sel_fetchAssetsWithLocalIdentifiers_options_, isa, v29);

    v0 = type metadata accessor for SFCardSection(0, &lazy cache variable for type metadata for PHAsset);
    v37 = Dictionary.init(dictionaryLiteral:)();
    if (((unint64_t)objc_msgSend(v36, sel_count) & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = v37;
      v39 = isUniquelyReferenced_nonNull_native[39];
      v38 = isUniquelyReferenced_nonNull_native[40];
      v40 = isUniquelyReferenced_nonNull_native[38];
      IndexSet.init(integersIn:)();
      IndexSet._bridgeToObjectiveC()(v41);
      v43 = v42;
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
      v44 = objc_msgSend(v36, sel_objectsAtIndexes_, v43);

      v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      if (!(v3 >> 62))
      {
        v45 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_16;
      }
    }
    OUTLINED_FUNCTION_116_0();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_26_0();
LABEL_16:
    v158 = v36;
    v159 = v29;
    v46 = (_QWORD *)v2;
    if (v45)
      break;
LABEL_32:
    OUTLINED_FUNCTION_26_0();
    v181 = *(_QWORD *)(v176 + 16);
    if (!v181)
    {
LABEL_70:

      OUTLINED_FUNCTION_36_0();
      swift_bridgeObjectRelease();

      v146 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      static os_signpost_type_t.end.getter();
      if ((OUTLINED_FUNCTION_99_2() & 1) != 0)
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        OUTLINED_FUNCTION_11_5();
        if (OUTLINED_FUNCTION_152_0() == *MEMORY[0x24BEE7810])
        {
          v147 = "[Error] Interval already ended";
        }
        else
        {
          OUTLINED_FUNCTION_40(isUniquelyReferenced_nonNull_native[28]);
          v147 = "";
        }
        v149 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        OUTLINED_FUNCTION_55_1(v149);
        OUTLINED_FUNCTION_79();
        OUTLINED_FUNCTION_52_2(&dword_24315F000, v146, v150, v151, "SpotlightContentRetriever.fetchFullContentForPhotosResults", v147, v149);
        specialized UnsafeMutablePointer.deallocate()();
      }
      OUTLINED_FUNCTION_50_10(v146);
      v152 = OUTLINED_FUNCTION_216();
      ((void (*)(uint64_t))v160)(v152);
      OUTLINED_FUNCTION_11_5();
      OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_95();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_99();
      OUTLINED_FUNCTION_73();
      OUTLINED_FUNCTION_56();
      swift_task_dealloc();
      OUTLINED_FUNCTION_91();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_168();
      __asm { BR              X1 }
    }
    v73 = 0;
    v178 = isUniquelyReferenced_nonNull_native + 7;
    v157 = isUniquelyReferenced_nonNull_native + 12;
    v175 = isUniquelyReferenced_nonNull_native + 17;
    v3 = MEMORY[0x24BEE4AF8];
    v74 = (uint64_t *)(v176 + 40);
    v187 = isUniquelyReferenced_nonNull_native[42];
    v174 = isUniquelyReferenced_nonNull_native[41];
    v155 = (_QWORD *)isUniquelyReferenced_nonNull_native[36];
    v156 = (_QWORD *)isUniquelyReferenced_nonNull_native[37];
    v154 = (int *)isUniquelyReferenced_nonNull_native[35];
    v2 = v185;
    v180 = v46;
    while (v46[2])
    {
      v75 = *(v74 - 1);
      v76 = *v74;
      OUTLINED_FUNCTION_23_0();
      v77 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v76);
      if ((v78 & 1) == 0)
      {
        OUTLINED_FUNCTION_56_0();
        break;
      }
      v184 = v74;
      v79 = *(id *)(v46[7] + 8 * v77);
      OUTLINED_FUNCTION_56_0();
      v80 = ResultHydrator.ocrOutput(for:)(v79);
      v82 = v81;
      if (!v81)
        goto LABEL_57;
      if (v73 >= v2)
        goto LABEL_84;
      v83 = v80;
      v0 = (*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80);
      v177 = v73;
      v190 = *(_QWORD *)(v187 + 72);
      v84 = isUniquelyReferenced_nonNull_native[25] + v0 + v190 * v73;
      v46 = v175;
      SearchResultItem.associatedValue.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchItem);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v121 = isUniquelyReferenced_nonNull_native[34];
        __swift_storeEnumTagSinglePayload(v121, 1, 1, isUniquelyReferenced_nonNull_native[35]);
        swift_bridgeObjectRelease();
        outlined destroy of MobileSMSDocument?(v121, &demangling cache variable for type metadata for Photo?);
LABEL_57:
        if (one-time initialization token for search != -1)
          swift_once();
        v122 = OUTLINED_FUNCTION_13();
        __swift_project_value_buffer(v122, (uint64_t)static Logging.search);
        OUTLINED_FUNCTION_104_0();
        v123 = Logger.logObject.getter();
        v124 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v123, v124))
        {
          v125 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v192[0] = specialized static UnsafeMutablePointer.allocate(capacity:)();
          *(_DWORD *)v125 = 136315138;
          if (v73 < v2)
          {
            v126 = v73;
            v127 = isUniquelyReferenced_nonNull_native[32];
            OUTLINED_FUNCTION_110_3();
            outlined init with copy of SearchResult(v128 + v129 * v126, v127, type metadata accessor for SearchResultItem);
            SearchResultItem.associatedValue.getter();
            v130 = v191[15];
            v131 = v191[16];
            __swift_project_boxed_opaque_existential_1(v157, v130);
            v132 = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 32))(v130, v131);
            v134 = v133;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v157);
            _s10OmniSearch0B6ResultVWOhTm_1(v127, type metadata accessor for SearchResultItem);
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v134, v192);
            *(_QWORD *)(v125 + 4) = v135;
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_102_0();
            OUTLINED_FUNCTION_29_2(&dword_24315F000, v123, v124, "Could not populate ocr string for photo with id: %s", (uint8_t *)v125);
            OUTLINED_FUNCTION_34_2();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_85;
        }
        OUTLINED_FUNCTION_102_0();

        if (v73 >= v2)
          goto LABEL_83;
        v136 = OUTLINED_FUNCTION_80_4();
        outlined init with copy of SearchResult(v136, v137, type metadata accessor for SearchResult);
        if ((OUTLINED_FUNCTION_116_4() & 1) == 0)
        {
          OUTLINED_FUNCTION_33_9();
          v3 = v142;
        }
        v138 = *(_QWORD *)(v3 + 16);
        if (v138 >= *(_QWORD *)(v3 + 24) >> 1)
        {
          OUTLINED_FUNCTION_34_9();
          v3 = v143;
        }
        v139 = isUniquelyReferenced_nonNull_native[44];
        *(_QWORD *)(v3 + 16) = v138 + 1;
        outlined init with take of SearchResult(v139, (uint64_t)v46 + v3 + v138 * v0, type metadata accessor for SearchResult);
        OUTLINED_FUNCTION_180_0();
        v46 = v180;
        goto LABEL_68;
      }
      v173 = v0;
      v182 = v3;
      v85 = isUniquelyReferenced_nonNull_native[47];
      v172 = isUniquelyReferenced_nonNull_native[46];
      v86 = isUniquelyReferenced_nonNull_native[45];
      v88 = (_QWORD *)isUniquelyReferenced_nonNull_native[36];
      v87 = (uint64_t *)isUniquelyReferenced_nonNull_native[37];
      v89 = isUniquelyReferenced_nonNull_native;
      v91 = isUniquelyReferenced_nonNull_native + 34;
      v90 = isUniquelyReferenced_nonNull_native[34];
      v169 = v89[33];
      v170 = v86;
      __swift_storeEnumTagSinglePayload(v90, 0, 1, v91[1]);
      outlined init with take of SearchResult(v90, (uint64_t)v87, type metadata accessor for Photo);
      OUTLINED_FUNCTION_2_7(v84, v85);
      v168 = *(void **)(v85 + *(int *)(v174 + 20));
      v171 = v168;
      OUTLINED_FUNCTION_1_9(v85);
      v92 = v156[1];
      v167 = *v87;
      v93 = v156[3];
      v94 = v156[4];
      v95 = v156[5];
      v165 = v156[7];
      v166 = v156[2];
      v163 = v156[8];
      v164 = v156[6];
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?((uint64_t)v87 + v154[11], (uint64_t)v88 + v154[11], &demangling cache variable for type metadata for Date?);
      v96 = *(uint64_t *)((char *)v87 + v154[12]);
      v161 = *(uint64_t *)((char *)v87 + v154[14]);
      v162 = *(uint64_t *)((char *)v87 + v154[15]);
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?((uint64_t)v87 + v154[16], (uint64_t)v88 + v154[16], &demangling cache variable for type metadata for URL?);
      *v88 = v167;
      v155[1] = v92;
      v155[2] = v166;
      v155[3] = v93;
      v155[4] = v94;
      v155[5] = v95;
      v155[6] = v164;
      v155[7] = v165;
      v155[8] = v163;
      v155[9] = v83;
      v155[10] = v82;
      *(_QWORD *)((char *)v88 + v154[12]) = v96;
      *(_QWORD *)((char *)v88 + v154[13]) = v96;
      *(_QWORD *)((char *)v88 + v154[14]) = v161;
      *(_QWORD *)((char *)v88 + v154[15]) = v162;
      outlined init with copy of SearchResult((uint64_t)v88, v169, type metadata accessor for Photo);
      swift_storeEnumTagMultiPayload();
      v97 = (_QWORD *)(v170 + *(int *)(v174 + 24));
      *v97 = 0;
      v97[1] = 0;
      outlined init with take of SearchResult(v169, v170, type metadata accessor for SearchResultItem);
      *(_QWORD *)(v170 + *(int *)(v174 + 20)) = v168;
      outlined init with take of SearchResult(v170, v172, type metadata accessor for SearchResult);
      OUTLINED_FUNCTION_35_1();
      OUTLINED_FUNCTION_115();
      OUTLINED_FUNCTION_23_0();
      v3 = v182;
      OUTLINED_FUNCTION_104_0();
      v98 = v171;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_91_0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((OUTLINED_FUNCTION_116_4() & 1) == 0)
      {
        OUTLINED_FUNCTION_33_9();
        v3 = v144;
      }
      v100 = *(_QWORD *)(v3 + 16);
      v99 = *(_QWORD *)(v3 + 24);
      isUniquelyReferenced_nonNull_native = v191;
      v2 = v185;
      v46 = v180;
      v0 = v173;
      if (v100 >= v99 >> 1)
      {
        OUTLINED_FUNCTION_86_0(v99);
        OUTLINED_FUNCTION_34_9();
        v3 = v145;
      }
      v101 = v191[46];
      v103 = v191[36];
      v102 = v191[37];
      *(_QWORD *)(v3 + 16) = v100 + 1;
      outlined init with take of SearchResult(v101, v3 + v173 + v100 * v190, type metadata accessor for SearchResult);
      OUTLINED_FUNCTION_180_0();

      OUTLINED_FUNCTION_1_9(v103);
      OUTLINED_FUNCTION_1_9(v102);
      v73 = v177;
LABEL_68:
      v74 = v184;
LABEL_69:
      ++v73;
      v74 += 2;
      if (v181 == v73)
        goto LABEL_70;
    }
    if (one-time initialization token for search != -1)
      swift_once();
    v104 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v104, (uint64_t)static Logging.search);
    OUTLINED_FUNCTION_104_0();
    v105 = Logger.logObject.getter();
    v2 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v105, (os_log_type_t)v2))
    {
      OUTLINED_FUNCTION_102_0();

      v2 = v185;
      if (v73 >= v185)
        goto LABEL_80;
      v117 = OUTLINED_FUNCTION_80_4();
      outlined init with copy of SearchResult(v117, v118, type metadata accessor for SearchResult);
      if ((OUTLINED_FUNCTION_116_4() & 1) == 0)
      {
        OUTLINED_FUNCTION_33_9();
        v3 = v140;
      }
      v119 = *(_QWORD *)(v3 + 16);
      if (v119 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        OUTLINED_FUNCTION_34_9();
        v3 = v141;
      }
      v120 = isUniquelyReferenced_nonNull_native[43];
      *(_QWORD *)(v3 + 16) = v119 + 1;
      outlined init with take of SearchResult(v120, (uint64_t)v46 + v3 + v119 * v0, type metadata accessor for SearchResult);
      v46 = v180;
      goto LABEL_69;
    }
    v106 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v192[0] = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v106 = 136315138;
    if (v73 < v185)
    {
      v107 = v73;
      v108 = isUniquelyReferenced_nonNull_native[32];
      OUTLINED_FUNCTION_110_3();
      outlined init with copy of SearchResult(v109 + v110 * v107, v108, type metadata accessor for SearchResultItem);
      SearchResultItem.associatedValue.getter();
      v111 = v191[10];
      v112 = v191[11];
      __swift_project_boxed_opaque_existential_1(v178, v111);
      v113 = (*(uint64_t (**)(uint64_t, uint64_t))(v112 + 32))(v111, v112);
      v115 = v114;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v178);
      _s10OmniSearch0B6ResultVWOhTm_1(v108, type metadata accessor for SearchResultItem);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v115, v192);
      *(_QWORD *)(v106 + 4) = v116;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_29_2(&dword_24315F000, v105, (os_log_type_t)v2, "Could not fetch photo asset with id: %s", (uint8_t *)v106);
      swift_arrayDestroy();
      specialized UnsafeMutablePointer.deallocate()();
    }
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    swift_once();
  }
  v2 = 0;
  v47 = 0;
  v183 = v3 & 0xC000000000000001;
  v179 = v45;
  while (1)
  {
    if (v183)
      v48 = (id)MEMORY[0x2494F62E4](v2, v3);
    else
      v48 = *(id *)(v3 + 8 * v2 + 32);
    v49 = v48;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    v50 = objc_msgSend(v48, sel_localIdentifier);
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53 = v52;

    isUniquelyReferenced_nonNull_native[22] = v51;
    isUniquelyReferenced_nonNull_native[23] = v53;
    v54 = lazy protocol witness table accessor for type String and conformance String();
    v0 = MEMORY[0x2494F61F4](47, 0xE100000000000000, 1, 1, MEMORY[0x24BEE0D00], v54);
    OUTLINED_FUNCTION_56_0();
    v55 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D153OIegnrzr_TR129_s10OmniSearch14ResultHydratorC32fetchFullContentForPhotosResults33_4DC86B6DF70367122DAA7E88D902EF60LLySayAA0bC0VGAHYaKFSSSshcfu_Tf3nnnpf_nTf1cn_n(v0);
    OUTLINED_FUNCTION_6_1();
    if (!v55[2])
      goto LABEL_78;
    v186 = v2 + 1;
    v189 = v47;
    v56 = v3;
    v57 = v55[4];
    v3 = v55[5];
    OUTLINED_FUNCTION_116_0();
    OUTLINED_FUNCTION_36_0();
    v58 = v49;
    isUniquelyReferenced_nonNull_native = (uint64_t *)swift_isUniquelyReferenced_nonNull_native();
    v192[0] = (uint64_t)v46;
    v59 = OUTLINED_FUNCTION_144_0();
    v61 = v46[2];
    v62 = (v60 & 1) == 0;
    v63 = v61 + v62;
    if (__OFADD__(v61, v62))
      goto LABEL_79;
    v0 = v59;
    v64 = v60;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, PHAsset>);
    v65 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, v63);
    isUniquelyReferenced_nonNull_native = v191;
    v46 = (_QWORD *)v192[0];
    if (!v65)
      goto LABEL_27;
    v66 = OUTLINED_FUNCTION_144_0();
    if ((v64 & 1) != (v67 & 1))
      break;
    v0 = v66;
LABEL_27:
    if ((v64 & 1) != 0)
    {
      v68 = *(_QWORD *)(v192[0] + 56);

      *(_QWORD *)(v68 + 8 * v0) = v58;
    }
    else
    {
      *(_QWORD *)(v192[0] + 8 * (v0 >> 6) + 64) |= 1 << v0;
      v69 = (_QWORD *)(v46[6] + 16 * v0);
      *v69 = v57;
      v69[1] = v3;
      *(_QWORD *)(v46[7] + 8 * v0) = v58;
      v70 = v46[2];
      v71 = __OFADD__(v70, 1);
      v72 = v70 + 1;
      if (v71)
        goto LABEL_81;
      v46[2] = v72;
      OUTLINED_FUNCTION_116_0();
    }
    OUTLINED_FUNCTION_137_2();
    OUTLINED_FUNCTION_26_0();

    ++v2;
    v3 = v56;
    v47 = v189;
    if (v186 == v179)
      goto LABEL_32;
  }
  OUTLINED_FUNCTION_168();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t ResultHydrator.fetchFullContentForMessagesResults(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[9] = a1;
  v2 = OUTLINED_FUNCTION_103_3();
  v1[10] = v2;
  v1[11] = *(_QWORD *)(v2 - 8);
  v1[12] = OUTLINED_FUNCTION_5_8();
  v1[13] = OUTLINED_FUNCTION_17();
  v1[14] = *(_QWORD *)(OUTLINED_FUNCTION_77_0() - 8);
  v1[15] = OUTLINED_FUNCTION_18_5();
  v3 = OUTLINED_FUNCTION_104_2();
  v1[16] = v3;
  v1[17] = *(_QWORD *)(v3 - 8);
  v1[18] = OUTLINED_FUNCTION_5_8();
  v1[19] = OUTLINED_FUNCTION_17();
  v1[20] = OUTLINED_FUNCTION_17();
  v1[21] = OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

uint64_t ResultHydrator.fetchFullContentForMessagesResults(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_signpost_type_t v4;
  uint8_t *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_78_5();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Logging.searchSignposter);
  OUTLINED_FUNCTION_223_0(v2);
  OUTLINED_FUNCTION_192();
  v3 = OSSignposter.logHandle.getter();
  v4 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v6 = OUTLINED_FUNCTION_55_1(v5);
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v3, v4, v6, "SpotlightContentRetriever.fetchFullContentForMessagesResults", "", v5);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v7 = v0[9];
  v9 = v0[20];
  v8 = v0[21];
  v10 = v0[16];
  v11 = v0[17];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v8, v10);
  OUTLINED_FUNCTION_77_2();
  OUTLINED_FUNCTION_27();
  v0[23] = OUTLINED_FUNCTION_73_2();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  v0[24] = v12;
  OUTLINED_FUNCTION_181_0(v8, v12);
  v13 = *(_QWORD *)(v7 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v15 = v0 + 2;
    v16 = v0[14];
    v17 = v0[9];
    v43 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_20_2();
    v19 = v17 + v18;
    v41 = v0;
    v42 = *(_QWORD *)(v16 + 72);
    v14 = v43;
    do
    {
      v20 = v0[15];
      OUTLINED_FUNCTION_90_3(v19, v20);
      SearchResultItem.associatedValue.getter();
      v21 = v0[5];
      v22 = v0[6];
      __swift_project_boxed_opaque_existential_1(v15, v21);
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
      v25 = v24;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      _s10OmniSearch0B6ResultVWOhTm_1(v20, type metadata accessor for SearchResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_139_1();
        v14 = v43;
      }
      v27 = *(_QWORD *)(v14 + 16);
      v26 = *(_QWORD *)(v14 + 24);
      if (v27 >= v26 >> 1)
      {
        OUTLINED_FUNCTION_86_0(v26);
        OUTLINED_FUNCTION_139_1();
        v14 = v43;
      }
      *(_QWORD *)(v14 + 16) = v27 + 1;
      v28 = v14 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v23;
      *(_QWORD *)(v28 + 40) = v25;
      v0 = v41;
      v19 += v42;
      --v13;
    }
    while (v13);
  }
  v0[25] = v14;
  if (one-time initialization token for search != -1)
    swift_once();
  v29 = OUTLINED_FUNCTION_13();
  v30 = __swift_project_value_buffer(v29, (uint64_t)static Logging.search);
  OUTLINED_FUNCTION_104_0();
  Logger.logObject.getter();
  v31 = OUTLINED_FUNCTION_51_2();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v43 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v32 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026, 0x800000024335D6D0, &v43);
    v0[7] = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 12) = 2080;
    v34 = OUTLINED_FUNCTION_91_0();
    v35 = MEMORY[0x2494F5E4C](v34, MEMORY[0x24BEE0D00]);
    v37 = v36;
    OUTLINED_FUNCTION_121();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v43);
    v0[8] = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_47_2();
    OUTLINED_FUNCTION_102_0();
    _os_log_impl(&dword_24315F000, v30, v31, "%s identifiers: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_102_0();

  v39 = (_QWORD *)swift_task_alloc();
  v0[26] = v39;
  *v39 = v0;
  v39[1] = ResultHydrator.fetchFullContentForMessagesResults(_:);
  return static MessageBodyManager.retrieveMessages(for:)(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_47_3();
  OUTLINED_FUNCTION_101_3(v3);
  *(_QWORD *)(v2 + 216) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 224) = v0;
  }
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3();
}

{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t);
  const char *v4;
  uint8_t *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  NSObject *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = static MessageBodyManager.hydrateMessageBody(origMessages:spiMessages:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 224));
  OUTLINED_FUNCTION_121();
  v1 = OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_45_6();
  static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    OUTLINED_FUNCTION_75();
    checkForErrorAndConsumeState(state:)();
    OUTLINED_FUNCTION_50();
    v2 = OUTLINED_FUNCTION_97_3();
    if (v3(v2) == *MEMORY[0x24BEE7810])
    {
      v4 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 88));
      v4 = "";
    }
    v5 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v5);
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v6, v7, "SpotlightContentRetriever.fetchFullContentForMessagesResults", v4, v5);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v8 = v1;
  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);

  v9(v10, v11);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_89();
  return OUTLINED_FUNCTION_41_9(v13, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  id v8;

  swift_bridgeObjectRelease();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_99_3();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_99_2() & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_37_7(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 88)) == *MEMORY[0x24BEE7810])
    {
      v4 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 88));
      v4 = "";
    }
    v5 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v5);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v6, v7, "SpotlightContentRetriever.fetchFullContentForMessagesResults", v4, v5);
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_155_0();

  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_22(*(uint64_t (**)(void))(v0 + 8));
}

id ResultHydrator.ocrOutput(for:)(void *a1)
{
  uint64_t v1;
  id result;
  unint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  result = objc_msgSend(a1, sel_characterRecognitionProperties);
  if (result)
  {
    outlined bridged method (ob) of @objc PHAssetCharacterRecognitionProperties.characterRecognitionData.getter(result);
    if (v3 >> 60 != 15)
    {
      type metadata accessor for SFCardSection(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
      type metadata accessor for SFCardSection(0, &lazy cache variable for type metadata for VNDocumentObservation);
      v4 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      if (v1 || (v5 = v4) == 0)
      {
        OUTLINED_FUNCTION_63_9();
      }
      else
      {
        v6 = objc_msgSend(v4, sel_getTranscript);
        if (v6)
        {
          v7 = v6;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_63_9();

        }
        else
        {
          OUTLINED_FUNCTION_63_9();
        }

      }
    }
    return (id)OUTLINED_FUNCTION_97_3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ResultHydrator.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t ResultHydrator.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ResultHydration.hydratedResultLimit.getter in conformance ResultHydrator()
{
  return ResultHydrator.hydratedResultLimit.getter();
}

uint64_t protocol witness for ResultHydration.fetchFullContent(for:) in conformance ResultHydrator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v1 + 104) + *(_QWORD *)(**(_QWORD **)v1 + 104));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for ResultHydration.fetchFullContent(for:) in conformance ResultHydrator;
  return v6(a1);
}

uint64_t protocol witness for ResultHydration.fetchFullContent(for:) in conformance ResultHydrator()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_49_11();
  if (!v1)
    v3 = v0;
  return OUTLINED_FUNCTION_41(v3, *(uint64_t (**)(void))(v2 + 8));
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(int64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  char *v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  Swift::Int *v23;
  Swift::Int v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  Swift::Int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t *v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  Swift::Int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t **v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  Swift::Int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  Swift::Int *v135;
  Swift::Int v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v2 = v1;
  v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  v4 = *(_QWORD *)(v132 - 8);
  v5 = MEMORY[0x24BDAC7A8](v132);
  v128 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v138 = (uint64_t)&v122 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v135 = (uint64_t *)((char *)&v122 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v134 = (uint64_t *)((char *)&v122 - v11);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if (v12 < 0)
      goto LABEL_142;
    if (v12)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, (uint64_t *)a1);
    return;
  }
  v125 = v13;
  specialized static Array._allocateUninitialized(_:)(v12 / 2);
  v123 = v14;
  v124 = v12;
  v130 = v15;
  v131 = v4;
  if (v12 <= 0)
    goto LABEL_105;
  v16 = 0;
  v17 = (char *)MEMORY[0x24BEE4AF8];
  v137 = (uint64_t *)a1;
  while (1)
  {
    v18 = v16;
    v19 = v16 + 1;
    v127 = v17;
    v129 = v16;
    if (v16 + 1 >= v12)
    {
      v24 = v16 + 1;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD *)(v4 + 72);
      v22 = v134;
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v20 + v21 * v19, (uint64_t)v134, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v23 = v135;
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v20 + v21 * v18, (uint64_t)v135, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v139 = *v22;
      v136 = *v23;
      outlined destroy of MobileSMSDocument?((uint64_t)v23, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      outlined destroy of MobileSMSDocument?((uint64_t)v22, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v24 = v18 + 2;
      v126 = v20;
      v140 = v21;
      if (v18 + 2 < v12)
      {
        v122 = v2;
        v133 = v21 * v19;
        v25 = v20;
        v26 = v18 + 2;
        v27 = v21 * (v18 + 2);
        while (1)
        {
          v28 = v139 < v136;
          v29 = v134;
          outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v25 + v27, (uint64_t)v134, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
          v30 = v135;
          outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v25 + v133, (uint64_t)v135, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
          v31 = *v29 >= *v30;
          outlined destroy of MobileSMSDocument?((uint64_t)v30, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
          outlined destroy of MobileSMSDocument?((uint64_t)v29, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
          if (v28 == v31)
            break;
          v25 += v140;
          if (++v26 >= v12)
          {
            v24 = v12;
            v4 = v131;
            goto LABEL_12;
          }
        }
        v4 = v131;
        v24 = v26;
LABEL_12:
        v2 = v122;
        v18 = v129;
      }
      if (v139 >= v136)
        goto LABEL_30;
      if (v24 < v18)
        goto LABEL_143;
      if (v18 >= v24)
      {
LABEL_30:
        a1 = (int64_t)v137;
      }
      else
      {
        v136 = v12;
        v32 = 0;
        v33 = v140;
        v34 = v140 * (v24 - 1);
        v35 = v18;
        v36 = v24 * v140;
        v37 = v35;
        v38 = v35 * v140;
        do
        {
          if (v37 != v24 + v32 - 1)
          {
            v39 = v2;
            v40 = v126;
            if (!v126)
              goto LABEL_149;
            v41 = v126 + v38;
            v139 = v126 + v34;
            outlined init with take of URL?(v126 + v38, v128, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
            if (v38 < v34 || v41 >= v40 + v36)
            {
              v43 = v139;
              swift_arrayInitWithTakeFrontToBack();
              v2 = v39;
              v44 = v43;
            }
            else
            {
              v2 = v39;
              v44 = v139;
              if (v38 != v34)
                swift_arrayInitWithTakeBackToFront();
            }
            outlined init with take of URL?(v128, v44, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
            v33 = v140;
          }
          ++v37;
          --v32;
          v34 -= v33;
          v36 -= v33;
          v38 += v33;
        }
        while (v37 < v24 + v32);
        v4 = v131;
        v12 = v136;
        a1 = (int64_t)v137;
        v18 = v129;
      }
    }
    if (v24 < v12)
    {
      if (__OFSUB__(v24, v18))
        goto LABEL_141;
      if (v24 - v18 < v125)
      {
        if (__OFADD__(v18, v125))
          goto LABEL_144;
        if (v18 + v125 >= v12)
          v45 = v12;
        else
          v45 = v18 + v125;
        if (v45 < v18)
        {
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        if (v24 != v45)
        {
          v122 = v2;
          v46 = *(_QWORD *)(v4 + 72);
          v140 = v46 * (v24 - 1);
          v133 = v46;
          v47 = v24 * v46;
          v126 = v45;
          do
          {
            v48 = 0;
            v49 = v129;
            v136 = v24;
            while (1)
            {
              v50 = v137;
              v51 = *v137;
              v52 = v47;
              v53 = v47 + v48 + *v137;
              v54 = v134;
              outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v53, (uint64_t)v134, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
              v55 = v135;
              outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v140 + v48 + v51, (uint64_t)v135, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
              v139 = *v54;
              v56 = *v55;
              outlined destroy of MobileSMSDocument?((uint64_t)v55, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
              outlined destroy of MobileSMSDocument?((uint64_t)v54, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
              if (v139 >= v56)
                break;
              v57 = *v50;
              if (!*v50)
                goto LABEL_147;
              v47 = v52;
              v58 = v57 + v140 + v48;
              outlined init with take of URL?(v57 + v52 + v48, v138, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
              swift_arrayInitWithTakeFrontToBack();
              outlined init with take of URL?(v138, v58, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
              v48 -= v133;
              ++v49;
              v59 = v136;
              if (v136 == v49)
                goto LABEL_47;
            }
            v59 = v136;
            v47 = v52;
LABEL_47:
            v24 = v59 + 1;
            v140 += v133;
            v47 += v133;
          }
          while (v24 != v126);
          v24 = v126;
          v2 = v122;
          a1 = (int64_t)v137;
          v18 = v129;
        }
      }
    }
    if (v24 < v18)
      goto LABEL_140;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v136 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v17 = v127;
    }
    else
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v127 + 2) + 1, 1, v127);
      v17 = v113;
    }
    v62 = *((_QWORD *)v17 + 2);
    v61 = *((_QWORD *)v17 + 3);
    v63 = v62 + 1;
    if (v62 >= v61 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v17);
      v17 = v114;
    }
    *((_QWORD *)v17 + 2) = v63;
    v64 = v17 + 32;
    v65 = &v17[16 * v62 + 32];
    v66 = v136;
    *(_QWORD *)v65 = v129;
    *((_QWORD *)v65 + 1) = v66;
    if (v62)
      break;
    v63 = 1;
LABEL_97:
    v12 = *(_QWORD *)(a1 + 8);
    v16 = v136;
    v4 = v131;
    if (v136 >= v12)
      goto LABEL_106;
  }
  while (1)
  {
    v67 = v63 - 1;
    if (v63 >= 4)
    {
      v72 = &v64[16 * v63];
      v73 = *((_QWORD *)v72 - 8);
      v74 = *((_QWORD *)v72 - 7);
      v78 = __OFSUB__(v74, v73);
      v75 = v74 - v73;
      if (v78)
        goto LABEL_125;
      v77 = *((_QWORD *)v72 - 6);
      v76 = *((_QWORD *)v72 - 5);
      v78 = __OFSUB__(v76, v77);
      v70 = v76 - v77;
      v71 = v78;
      if (v78)
        goto LABEL_126;
      v79 = v63 - 2;
      v80 = &v64[16 * v63 - 32];
      v82 = *(_QWORD *)v80;
      v81 = *((_QWORD *)v80 + 1);
      v78 = __OFSUB__(v81, v82);
      v83 = v81 - v82;
      if (v78)
        goto LABEL_127;
      v78 = __OFADD__(v70, v83);
      v84 = v70 + v83;
      if (v78)
        goto LABEL_129;
      if (v84 >= v75)
      {
        v102 = &v64[16 * v67];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v78 = __OFSUB__(v103, v104);
        v105 = v103 - v104;
        if (v78)
          goto LABEL_135;
        v95 = v70 < v105;
        goto LABEL_86;
      }
    }
    else
    {
      if (v63 != 3)
      {
        v96 = *((_QWORD *)v17 + 4);
        v97 = *((_QWORD *)v17 + 5);
        v78 = __OFSUB__(v97, v96);
        v89 = v97 - v96;
        v90 = v78;
        goto LABEL_80;
      }
      v69 = *((_QWORD *)v17 + 4);
      v68 = *((_QWORD *)v17 + 5);
      v78 = __OFSUB__(v68, v69);
      v70 = v68 - v69;
      v71 = v78;
    }
    if ((v71 & 1) != 0)
      goto LABEL_128;
    v79 = v63 - 2;
    v85 = &v64[16 * v63 - 32];
    v87 = *(_QWORD *)v85;
    v86 = *((_QWORD *)v85 + 1);
    v88 = __OFSUB__(v86, v87);
    v89 = v86 - v87;
    v90 = v88;
    if (v88)
      goto LABEL_130;
    v91 = &v64[16 * v67];
    v93 = *(_QWORD *)v91;
    v92 = *((_QWORD *)v91 + 1);
    v78 = __OFSUB__(v92, v93);
    v94 = v92 - v93;
    if (v78)
      goto LABEL_132;
    if (__OFADD__(v89, v94))
      goto LABEL_134;
    if (v89 + v94 >= v70)
    {
      v95 = v70 < v94;
LABEL_86:
      if (v95)
        v67 = v79;
      goto LABEL_88;
    }
LABEL_80:
    if ((v90 & 1) != 0)
      goto LABEL_131;
    v98 = &v64[16 * v67];
    v100 = *(_QWORD *)v98;
    v99 = *((_QWORD *)v98 + 1);
    v78 = __OFSUB__(v99, v100);
    v101 = v99 - v100;
    if (v78)
      goto LABEL_133;
    if (v101 < v89)
      goto LABEL_97;
LABEL_88:
    v106 = v67 - 1;
    if (v67 - 1 >= v63)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    v107 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_148;
    v108 = v17;
    v109 = (uint64_t **)&v64[16 * v106];
    a1 = (int64_t)*v109;
    v110 = &v64[16 * v67];
    v111 = *((_QWORD *)v110 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)(v107 + *(_QWORD *)(v131 + 72) * (_QWORD)*v109, v107 + *(_QWORD *)(v131 + 72) * *(_QWORD *)v110, v107 + *(_QWORD *)(v131 + 72) * v111, v130);
    if (v2)
      break;
    if (v111 < a1)
      goto LABEL_122;
    if (v67 > *((_QWORD *)v108 + 2))
      goto LABEL_123;
    *v109 = (uint64_t *)a1;
    *(_QWORD *)&v64[16 * v106 + 8] = v111;
    v112 = *((_QWORD *)v108 + 2);
    if (v67 >= v112)
      goto LABEL_124;
    v63 = v112 - 1;
    memmove(&v64[16 * v67], v110 + 16, 16 * (v112 - 1 - v67));
    v17 = v108;
    *((_QWORD *)v108 + 2) = v112 - 1;
    a1 = (int64_t)v137;
    if (v112 <= 2)
      goto LABEL_97;
  }
LABEL_103:
  swift_bridgeObjectRelease();
  if (v124 >= -1)
    goto LABEL_118;
  __break(1u);
LABEL_105:
  v17 = (char *)MEMORY[0x24BEE4AF8];
  v63 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_106:
  if (v63 >= 2)
  {
    v115 = *(_QWORD *)a1;
    while (1)
    {
      a1 = v63 - 2;
      if (v63 < 2)
        break;
      if (!v115)
        goto LABEL_150;
      v116 = (uint64_t)v17;
      v117 = *(_QWORD *)&v17[16 * a1 + 32];
      v118 = *(_QWORD *)&v17[16 * v63 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v115 + *(_QWORD *)(v131 + 72) * v117, v115 + *(_QWORD *)(v131 + 72) * *(_QWORD *)&v17[16 * v63 + 16], v115 + *(_QWORD *)(v131 + 72) * v118, v130);
      if (v2)
        goto LABEL_103;
      if (v118 < v117)
        goto LABEL_137;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v116);
        v116 = v121;
      }
      if ((unint64_t)a1 >= *(_QWORD *)(v116 + 16))
        goto LABEL_138;
      v119 = (_QWORD *)(v116 + 32 + 16 * a1);
      *v119 = v117;
      v119[1] = v118;
      v120 = *(_QWORD *)(v116 + 16);
      if (v63 > v120)
        goto LABEL_139;
      memmove((void *)(v116 + 32 + 16 * (v63 - 1)), (const void *)(v116 + 32 + 16 * v63), 16 * (v120 - v63));
      v17 = (char *)v116;
      *(_QWORD *)(v116 + 16) = v120 - 1;
      v63 = v120 - 1;
      if (v120 <= 2)
        goto LABEL_117;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_117:
  swift_bridgeObjectRelease();
  if (v124 >= -1)
  {
LABEL_118:
    *(_QWORD *)(v123 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;

  v35 = a1;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  v7 = MEMORY[0x24BDAC7A8](v36);
  v42 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v38 = (uint64_t *)((char *)&v33 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v37 = (uint64_t *)((char *)&v33 - v12);
  v41 = a3;
  v34 = a2;
  if (a3 != a2)
  {
    v13 = *(_QWORD *)(v11 + 72);
    v14 = v13 * (v41 - 1);
    v39 = v13;
    v15 = v13 * v41;
    v16 = &demangling cache variable for type metadata for (offset: Int, element: SearchResult);
    v44 = a4;
    while (2)
    {
      v17 = 0;
      v18 = v35;
      v40 = v15;
      do
      {
        v19 = *v44;
        v20 = v15 + v17 + *v44;
        v21 = v37;
        outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v20, (uint64_t)v37, v16);
        v22 = v14 + v17 + v19;
        v23 = v14;
        v24 = v38;
        outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v22, (uint64_t)v38, v16);
        v43 = *v21;
        v25 = v16;
        v26 = *v24;
        v27 = (uint64_t)v24;
        v14 = v23;
        outlined destroy of MobileSMSDocument?(v27, v25);
        v28 = (uint64_t)v21;
        v15 = v40;
        outlined destroy of MobileSMSDocument?(v28, v25);
        v29 = v43 < v26;
        v16 = v25;
        if (!v29)
          break;
        v30 = *v44;
        if (!*v44)
        {
          __break(1u);
          return;
        }
        v31 = v30 + v23 + v17;
        outlined init with take of URL?(v30 + v15 + v17, v42, v25);
        swift_arrayInitWithTakeFrontToBack();
        v32 = v31;
        v16 = v25;
        outlined init with take of URL?(v42, v32, v25);
        v17 -= v39;
        ++v18;
      }
      while (v41 != v18);
      v14 = v23 + v39;
      v15 += v39;
      if (++v41 != v34)
        continue;
      break;
    }
  }
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v32;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v41;
  int64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;

  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  v9 = MEMORY[0x24BDAC7A8](v52);
  v54 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v53 = (uint64_t *)((char *)&v44 - v11);
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_77;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_78;
  v18 = v14 / v13;
  v19 = v16 / v13;
  if (v14 / v13 >= v16 / v13)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v16 / v13);
    v21 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2)
      goto LABEL_71;
    v45 = v4;
    v46 = v13;
    v48 = a4;
    v49 = -v13;
    v47 = a1;
    while (1)
    {
      v24 = a3;
      v25 = v49;
      a3 += v49;
      v51 = v21 + v49;
      v26 = v53;
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v21 + v49, (uint64_t)v53, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v50 = a2 + v25;
      v27 = v54;
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a2 + v25, (uint64_t)v54, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v28 = *v26;
      v29 = *v27;
      outlined destroy of MobileSMSDocument?((uint64_t)v27, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      outlined destroy of MobileSMSDocument?((uint64_t)v26, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      if (v28 >= v29)
      {
        if (v24 >= v21 && a3 < v21)
        {
          v32 = v47;
          a4 = v48;
          if (v24 == v21)
          {
            v21 = v51;
            goto LABEL_43;
          }
          v21 = v51;
LABEL_40:
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_43;
        }
        v21 = v51;
      }
      else
      {
        if (v24 >= a2 && a3 < a2)
        {
          v32 = v47;
          a4 = v48;
          if (v24 == a2)
          {
            a2 = v50;
            goto LABEL_43;
          }
          a2 = v50;
          goto LABEL_40;
        }
        a2 = v50;
      }
      swift_arrayInitWithTakeFrontToBack();
      v32 = v47;
      a4 = v48;
LABEL_43:
      v13 = v46;
      if (v21 <= a4 || a2 <= v32)
        goto LABEL_71;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v14 / v13);
  v20 = v18 * v13;
  v21 = a4 + v18 * v13;
  v51 = a3;
  if (v20 >= 1 && a2 < a3)
  {
    v45 = v4;
    v50 = v21;
    v34 = v53;
    v35 = v54;
    do
    {
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a2, (uint64_t)v34, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a4, (uint64_t)v35, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v36 = *v34;
      v37 = *v35;
      outlined destroy of MobileSMSDocument?((uint64_t)v35, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      outlined destroy of MobileSMSDocument?((uint64_t)v34, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      if (v36 >= v37)
      {
        if (a1 < a4 || a1 >= a4 + v13)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v38 = a2;
        a4 += v13;
      }
      else
      {
        v38 = a2 + v13;
        if (a1 < a2 || a1 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      v21 = v50;
      a1 += v13;
      v41 = a4 >= v50 || v38 >= v51;
      a2 = v38;
    }
    while (!v41);
  }
LABEL_71:
  v42 = v21 - a4;
  if (v13 != -1 || v42 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v42 / v13);
    return;
  }
LABEL_79:
  __break(1u);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)OUTLINED_FUNCTION_8();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_12();
}

uint64_t outlined bridged method (ob) of @objc PHAssetCharacterRecognitionProperties.characterRecognitionData.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_characterRecognitionData);

  if (!v2)
    return 0;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc PHFetchOptions.addFetchPropertySets(_:)(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_addFetchPropertySets_, isa);

}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_CardSection?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_57_2();
  MEMORY[0x24BDAC7A8](v4);
  v54 = (uint64_t)&v46 - v5;
  v6 = type metadata accessor for Searchfoundation_CardSection();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_0_3();
  v52 = v8;
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v11 = (v9 + 32) & ~v9;
  v53 = MEMORY[0x24BEE4AF8] + v11;
  v48 = v9 | 7;
  swift_bridgeObjectRetain();
  v12 = 0;
  v13 = 0;
  v55 = 0;
  v14 = 0;
  v15 = v7;
  while (1)
  {
    v16 = v11;
    if (!v13)
      goto LABEL_5;
LABEL_3:
    v17 = *(_QWORD *)(v13 + 16);
    if (v12 == v17)
    {
      OUTLINED_FUNCTION_34_4(v1);
      outlined destroy of MobileSMSDocument?(v1, &demangling cache variable for type metadata for Searchfoundation_CardSection?);
      while (1)
      {
LABEL_5:
        v18 = *(_QWORD *)(a1 + 16);
        if (v14 == v18)
        {
          v22 = v54;
          OUTLINED_FUNCTION_34_4(v54);
          OUTLINED_FUNCTION_6_1();
          goto LABEL_37;
        }
        if (v14 >= v18)
          break;
        v19 = v14 + 1;
        v20 = *(_QWORD *)(a1 + 8 * v14 + 32);
        OUTLINED_FUNCTION_116_0();
        swift_bridgeObjectRelease();
        v16 = v11;
        v12 = 0;
        v13 = v20;
        v14 = v19;
        v7 = v15;
        if (v13)
          goto LABEL_3;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v12 >= v17)
      goto LABEL_43;
    v49 = *(_QWORD *)(v7 + 72);
    v50 = v10;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v1, v13 + v16 + v49 * v12, v6);
    __swift_storeEnumTagSinglePayload(v1, 0, 1, v6);
    v21 = v7;
    v22 = v54;
    outlined init with take of URL?(v1, v54, &demangling cache variable for type metadata for Searchfoundation_CardSection?);
    if (__swift_getEnumTagSinglePayload(v22, 1, v6) == 1)
      break;
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
    v47(v52, v22, v6);
    v23 = v55;
    if (v55)
    {
      v24 = v50;
      v7 = v15;
      goto LABEL_34;
    }
    v25 = v50[3];
    if ((uint64_t)((v25 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_46;
    v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
    if (v26 <= 1)
      v27 = 1;
    else
      v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Searchfoundation_CardSection>);
    v55 = v27;
    v28 = v49;
    v51 = (void *)swift_allocObject();
    v29 = _swift_stdlib_malloc_size(v51);
    v30 = v28;
    if (!v28)
      goto LABEL_47;
    v31 = v29 - v11;
    if (v29 - v11 == 0x8000000000000000 && v28 == -1)
      goto LABEL_48;
    v7 = v15;
    v33 = v31 / v30;
    v34 = (char *)v50;
    v35 = (char *)v51;
    *((_QWORD *)v51 + 2) = v55;
    *((_QWORD *)v35 + 3) = 2 * (v31 / v30);
    v36 = &v35[v11];
    v37 = *((_QWORD *)v34 + 3);
    v38 = (v37 >> 1) * v30;
    if (*((_QWORD *)v34 + 2))
    {
      if (v35 >= v34 && v36 < &v34[v11 + v38])
      {
        if (v35 != v34)
        {
          OUTLINED_FUNCTION_161_1();
          swift_arrayInitWithTakeBackToFront();
LABEL_31:
          v38 = v46;
          v36 = (char *)v53;
          v33 = v55;
        }
        v50[2] = 0;
        goto LABEL_33;
      }
      OUTLINED_FUNCTION_161_1();
      swift_arrayInitWithTakeFrontToBack();
      goto LABEL_31;
    }
LABEL_33:
    v53 = (uint64_t)&v36[v38];
    v23 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - (v37 >> 1);
    swift_release();
    v24 = v51;
LABEL_34:
    v40 = __OFSUB__(v23, 1);
    v41 = v23 - 1;
    if (v40)
      goto LABEL_44;
    v55 = v41;
    ++v12;
    v42 = v53;
    v51 = v24;
    v47(v53, v52, v6);
    v53 = v42 + v49;
    v10 = v51;
  }
  OUTLINED_FUNCTION_6_1();
  v10 = v50;
LABEL_37:
  swift_bridgeObjectRelease();
  outlined destroy of MobileSMSDocument?(v22, &demangling cache variable for type metadata for Searchfoundation_CardSection?);
  v43 = v10[3];
  if (v43 < 2)
    goto LABEL_40;
  v44 = v43 >> 1;
  v40 = __OFSUB__(v44, v55);
  v45 = v44 - v55;
  if (!v40)
  {
    v10[2] = v45;
LABEL_40:
    OUTLINED_FUNCTION_43_0();
    return;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t i;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;

  v2 = &demangling cache variable for type metadata for (offset: Int, element: SearchResult)?;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v64 = (uint64_t)&v55 - v7;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  MEMORY[0x24BDAC7A8](v70);
  v63 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 64);
  v69 = a1 + 64;
  v11 = -1;
  v12 = -1 << *(_BYTE *)(a1 + 32);
  v59 = ~v12;
  v60 = v8;
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & v10;
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = (v14 + 32) & ~v14;
  v67 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v65 = MEMORY[0x24BEE4AF8] + v15;
  v68 = (unint64_t)(63 - v12) >> 6;
  v57 = v68 - 1;
  v58 = v14 | 7;
  swift_bridgeObjectRetain();
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v66 = 0;
  for (i = v15; ; v15 = i)
  {
    while (1)
    {
      if (!v17)
        goto LABEL_7;
      v20 = *(_QWORD *)(v17 + 16);
      if (v16 == v20)
        break;
      if (v16 >= v20)
        goto LABEL_63;
      v62 = *(_QWORD *)(v60 + 72);
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v17 + v15 + v62 * v16, (uint64_t)v6, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v28 = v70;
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v70);
      v29 = v2;
      v30 = v64;
      v31 = v29;
      outlined init with take of URL?((uint64_t)v6, v64, v29);
      if (__swift_getEnumTagSinglePayload(v30, 1, v28) == 1)
        goto LABEL_58;
      outlined init with take of URL?(v30, v63, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v32 = v66;
      if (v66)
      {
        v61 = v67;
        v2 = v31;
        v15 = i;
        goto LABEL_55;
      }
      v33 = v67[3];
      if ((uint64_t)((v33 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_67;
      v2 = v31;
      v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
      if (v34 <= 1)
        v35 = 1;
      else
        v35 = v34;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: SearchResult)>);
      v15 = i;
      v66 = v35;
      v36 = v62;
      v61 = (const void *)swift_allocObject();
      v37 = _swift_stdlib_malloc_size(v61);
      if (!v36)
        goto LABEL_68;
      v38 = v36;
      v39 = v37 - i;
      if (v37 - i == 0x8000000000000000 && v36 == -1)
        goto LABEL_69;
      v41 = v39 / v36;
      v42 = v61;
      v43 = v67;
      *((_QWORD *)v61 + 2) = v66;
      v42[3] = 2 * (v39 / v38);
      v44 = (unint64_t)v42 + i;
      v45 = v43[3];
      v46 = (v45 >> 1) * v38;
      if (v43[2])
      {
        if (v42 >= v43 && v44 < (unint64_t)v43 + i + v46)
        {
          if (v42 != v43)
          {
            v65 = (uint64_t)v42 + i;
            v66 = v45;
            v56 = v46;
            swift_arrayInitWithTakeBackToFront();
LABEL_52:
            v46 = v56;
            v44 = v65;
            v45 = v66;
            v43 = v67;
          }
          v43[2] = 0;
          goto LABEL_54;
        }
        v65 = (uint64_t)v42 + i;
        v66 = v45;
        v56 = v46;
        swift_arrayInitWithTakeFrontToBack();
        goto LABEL_52;
      }
LABEL_54:
      v65 = v44 + v46;
      v48 = (v41 & 0x7FFFFFFFFFFFFFFFLL) - (v45 >> 1);
      swift_release();
      v32 = v48;
LABEL_55:
      v49 = __OFSUB__(v32, 1);
      v50 = v32 - 1;
      if (v49)
        goto LABEL_64;
      v66 = v50;
      ++v16;
      v51 = v65;
      outlined init with take of URL?(v63, v65, &demangling cache variable for type metadata for (offset: Int, element: SearchResult));
      v65 = v51 + v62;
      v67 = v61;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v70);
    outlined destroy of MobileSMSDocument?((uint64_t)v6, v2);
LABEL_7:
    if (v13)
    {
      v21 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_19;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    if (v23 >= v68)
      goto LABEL_57;
    v24 = *(_QWORD *)(v69 + 8 * v23);
    if (!v24)
      break;
LABEL_18:
    v13 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v18 = v23;
LABEL_19:
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = v27;
  }
  v25 = v18 + 2;
  if (v18 + 2 >= v68)
    goto LABEL_57;
  v24 = *(_QWORD *)(v69 + 8 * v25);
  if (v24)
    goto LABEL_14;
  v26 = v18 + 3;
  if (v18 + 3 >= v68)
    goto LABEL_57;
  v24 = *(_QWORD *)(v69 + 8 * v26);
  if (v24)
    goto LABEL_17;
  v25 = v18 + 4;
  if (v18 + 4 >= v68)
    goto LABEL_57;
  v24 = *(_QWORD *)(v69 + 8 * v25);
  if (v24)
    goto LABEL_14;
  v26 = v18 + 5;
  if (v18 + 5 >= v68)
    goto LABEL_57;
  v24 = *(_QWORD *)(v69 + 8 * v26);
  if (v24)
  {
LABEL_17:
    v23 = v26;
    goto LABEL_18;
  }
  v25 = v18 + 6;
  if (v18 + 6 < v68)
  {
    v24 = *(_QWORD *)(v69 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        v23 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_65;
        if (v23 >= v68)
          goto LABEL_57;
        v24 = *(_QWORD *)(v69 + 8 * v23);
        ++v25;
        if (v24)
          goto LABEL_18;
      }
    }
LABEL_14:
    v23 = v25;
    goto LABEL_18;
  }
LABEL_57:
  v30 = v64;
  __swift_storeEnumTagSinglePayload(v64, 1, 1, v70);
LABEL_58:
  outlined consume of Set<FlightDesignator>.Iterator._Variant();
  swift_bridgeObjectRelease();
  outlined destroy of MobileSMSDocument?(v30, &demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
  v52 = v67[3];
  if (v52 < 2)
    return;
  v53 = v52 >> 1;
  v49 = __OFSUB__(v53, v66);
  v54 = v53 - v66;
  if (!v49)
  {
    v67[2] = v54;
    return;
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = v2 + 4;
    while (1)
    {
      v7 = *(_DWORD *)(v3 + 4 * v5 + 32);
      if (!v4)
      {
        v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Float)>);
        v11 = (_QWORD *)OUTLINED_FUNCTION_8();
        v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32) / 16;
        v11[2] = v10;
        v11[3] = 2 * v12;
        v13 = (unint64_t)(v11 + 4);
        v14 = v2[3];
        v15 = v14 >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v13 >= (unint64_t)&v2[2 * v15 + 4])
            memmove(v11 + 4, v2 + 4, 16 * v15);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v13 + 16 * v15);
        v4 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - (v14 >> 1);
        result = swift_release();
        v2 = v11;
      }
      v17 = __OFSUB__(v4--, 1);
      if (v17)
        break;
      *v6 = v5;
      *((_DWORD *)v6 + 2) = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = OUTLINED_FUNCTION_36_0();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v4 = 0;
LABEL_21:
  v18 = v2[3];
  if (v18 < 2)
    return (uint64_t)v2;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v4);
  v20 = v19 - v4;
  if (!v17)
  {
    v2[2] = v20;
    return (uint64_t)v2;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ResultHydration.hydratedResultLimit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ResultHydration.fetchFullContent(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v7 = (_QWORD *)OUTLINED_FUNCTION_25_5();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of ResultHydration.fetchFullContent(for:);
  return v9(a1, a2, a3);
}

uint64_t type metadata accessor for ResultHydrator()
{
  return objc_opt_self();
}

uint64_t method lookup function for ResultHydrator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ResultHydrator.__allocating_init(emailContentManager:hydratedResultLimit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ResultHydrator.fetchFullContent(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v3 = (_QWORD *)OUTLINED_FUNCTION_25_5();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = dispatch thunk of ResultHydrator.fetchFullContent(for:);
  return v5(a1);
}

uint64_t dispatch thunk of ResultHydrator.fetchFullContent(for:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_49_11();
  return OUTLINED_FUNCTION_41(v0, *(uint64_t (**)(void))(v1 + 8));
}

void OUTLINED_FUNCTION_1_23(void *a1@<X8>)
{

}

void OUTLINED_FUNCTION_5_21(uint64_t a1@<X8>)
{
  uint64_t v1;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, (a1 - 32) | 0x8000000000000000, (uint64_t *)(v1 - 88));
}

void OUTLINED_FUNCTION_6_22()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_8_15(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_9_17()
{
  return swift_release();
}

void OUTLINED_FUNCTION_11_14(void *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1[38];
  *(_QWORD *)(v2 - 96) = v1[39];
  *(_QWORD *)(v2 - 88) = v3;
  *(_QWORD *)(v2 - 80) = v1[37];

}

void OUTLINED_FUNCTION_12_18()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_13_19(uint64_t a1)
{
  return ResultHydrator.fetchFullContentForMessagesResults(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_15_15(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_17_17()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_18_14()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_21_13(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  outlined init with take of SearchResult(a1, v1+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v3, v2);
}

void OUTLINED_FUNCTION_22_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a4 + 16) = v4;
  *(_QWORD *)(v5 - 144) = a4;
}

uint64_t OUTLINED_FUNCTION_23_16()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_27_13()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_30_12(void *a1, int a2, os_log_type_t a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_log_t log)
{
  uint8_t *v23;

  _os_log_impl(a1, log, a3, a4, v23, 0x16u);
}

void OUTLINED_FUNCTION_33_9()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_34_9()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_36_12(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_37_7@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_38_10(uint64_t a1)
{
  return ResultHydrator.fetchFullContentForPhotosResults(_:)(a1);
}

void OUTLINED_FUNCTION_39_10()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_40_7(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 312) = a1;
  *(_QWORD *)(v7 - 136) = a1;
  *(_QWORD *)(v7 - 128) = v2;
  *v1 = *(_OWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 120) = v3;
  *(_QWORD *)(v7 - 112) = v4;
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v6;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_41_9(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

BOOL OUTLINED_FUNCTION_44_12(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_46_10()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of SearchResult(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_49_11()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_50_10(void *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[33];
  *(_QWORD *)(v2 - 136) = v1[34];
  *(_QWORD *)(v2 - 128) = v3;
  v4 = v1[30];
  *(_QWORD *)(v2 - 120) = v1[32];
  *(_QWORD *)(v2 - 112) = v4;
  *(_QWORD *)(v2 - 104) = v1[29];

}

uint64_t OUTLINED_FUNCTION_60_7()
{
  uint64_t *v0;

  return outlined consume of DataDetectorResults?(*v0);
}

uint64_t OUTLINED_FUNCTION_61_4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_63_9()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

BOOL OUTLINED_FUNCTION_77_7(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

unint64_t OUTLINED_FUNCTION_80_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v1 + 200)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 120) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 120) + 80))
       + *(_QWORD *)(*(_QWORD *)(v2 - 120) + 72) * v0;
}

uint64_t OUTLINED_FUNCTION_82_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void OUTLINED_FUNCTION_84_6(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with copy of SearchResult(a1, v2, v1);
}

void OUTLINED_FUNCTION_87_5(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 88) = v1;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v2, a1);
}

void OUTLINED_FUNCTION_88_5()
{
  uint64_t v0;

  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v0 + 16) + 1, 1);
}

uint64_t OUTLINED_FUNCTION_91_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_95_6(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_105_7()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_107_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[93] = a2;
  v4[94] = a3;
  v4[95] = a4;
}

uint64_t OUTLINED_FUNCTION_108_4()
{
  return swift_unknownObjectRetain();
}

void OUTLINED_FUNCTION_111_3(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a1, v2, v1);
}

void OUTLINED_FUNCTION_114_6()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of MobileSMSDocument?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_116_4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_124_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_131_1@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t OUTLINED_FUNCTION_132_1()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_135_2(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_137_2()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_139_1()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_142_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

unint64_t OUTLINED_FUNCTION_144_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_146_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 96);
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_150_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_151()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_152_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 88))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_156_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

_QWORD *OUTLINED_FUNCTION_159_1(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_160_1()
{
  return swift_unknownObjectRetain();
}

uint64_t OUTLINED_FUNCTION_161_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = v2;
  *(_QWORD *)(v3 - 88) = v1;
  *(_QWORD *)(v3 - 104) = v2;
  *(_QWORD *)(v3 - 160) = v0;
  return result;
}

void OUTLINED_FUNCTION_162_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_164_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 96))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_165_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_166_0()
{
  return swift_unknownObjectRetain();
}

uint64_t OUTLINED_FUNCTION_167()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_169_0(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

void OUTLINED_FUNCTION_170_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of SearchResult(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_178()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_180_0()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_181_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_183_0()
{
  _QWORD *v0;

  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVys10ArraySliceVySi6offset_10OmniSearch0J6ResultV7elementtGSayAMGG_SiAJ_AmNts5NeverOTg506_sSi10i9Search0B6k51VACSiACIgynndr_Si6offset_AC7elementt_ACtSiAD_AcEts5m86OIegnrzr_TR04_s10a8Search14c78HydratorC16fetchFullContent3forSayAA0bC0VGAH_tYaKFSi_AGtT31_AG7elementt_S6XEfU1_Tf3nnnpf_nTf1cn_nTm(v0);
}

void OUTLINED_FUNCTION_184(uint64_t a1)
{
  uint64_t v1;

  specialized Dictionary.subscript.getter(a1, v1);
}

void OUTLINED_FUNCTION_185()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  specialized MutableCollection<>.sort(by:)((uint64_t *)(v1 - 88));
}

uint64_t OUTLINED_FUNCTION_186_0()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_187_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x2Au);
}

uint64_t OUTLINED_FUNCTION_188_0()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_189_0()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t OUTLINED_FUNCTION_190_0()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_191_0()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t OUTLINED_FUNCTION_192()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_193()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_194_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 576);
}

uint64_t OUTLINED_FUNCTION_195()
{
  return checkForErrorAndConsumeState(state:)();
}

void OUTLINED_FUNCTION_196_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[84] = a2;
  v4[85] = a3;
  v4[86] = a4;
}

uint64_t OUTLINED_FUNCTION_197_0()
{
  return OS_os_log.signpostsEnabled.getter();
}

_QWORD *OUTLINED_FUNCTION_200_0()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
  return v0;
}

void OUTLINED_FUNCTION_201_0()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2048;
}

void OUTLINED_FUNCTION_202_0(float a1)
{
  float *v1;

  *v1 = a1;
}

BOOL OUTLINED_FUNCTION_205_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_208_0()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_209()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_211_0()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of MobileSMSDocument?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_212_0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void OUTLINED_FUNCTION_213_0()
{
  uint64_t v0;
  uint64_t v1;

  specialized Dictionary.subscript.getter(v0, v1);
}

uint64_t OUTLINED_FUNCTION_214_0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

void OUTLINED_FUNCTION_215()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  _s10OmniSearch0B6ResultVWOhTm_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_216()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_217()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_218(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of MobileSMSDocument?(a1, v1);
}

void OUTLINED_FUNCTION_219(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_223_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = a1;
  return OSSignposter.logHandle.getter();
}

void OUTLINED_FUNCTION_224_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v1 - 96);
}

uint64_t OUTLINED_FUNCTION_226_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_227_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_228_0()
{
  uint64_t v0;

  ResultHydrator.runDataDetectorsOnResults(_:)(v0);
}

uint64_t static SearchTool.openAppWhenRun.getter()
{
  return 0;
}

uint64_t one-time initialization function for authenticationPolicy()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for IntentAuthenticationPolicy();
  __swift_allocate_value_buffer(v0, static SearchTool.authenticationPolicy);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static SearchTool.authenticationPolicy);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, *MEMORY[0x24BDB6268], v0);
}

uint64_t static SearchTool.authenticationPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for authenticationPolicy, (uint64_t (*)(_QWORD))MEMORY[0x24BDB6270], (uint64_t)static SearchTool.authenticationPolicy, a1);
}

char *SearchTool.assistantOnly.unsafeMutableAddressor()
{
  return &static SearchTool.assistantOnly;
}

uint64_t static SearchTool.assistantOnly.getter()
{
  OUTLINED_FUNCTION_2_6();
  return static SearchTool.assistantOnly;
}

uint64_t static SearchTool.assistantOnly.setter(char a1)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_2_6();
  static SearchTool.assistantOnly = a1;
  return result;
}

uint64_t (*static SearchTool.assistantOnly.modify())()
{
  OUTLINED_FUNCTION_2_6();
  return static SearchToolControl.assistantOnly.modify;
}

uint64_t static SearchTool.title.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for title, (uint64_t (*)(_QWORD))MEMORY[0x24BDCD380], (uint64_t)static SearchTool.title, a1);
}

uint64_t static SearchTool.authenticationPolicy.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t static SearchTool.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v1 = type metadata accessor for EquatableComparisonOperator();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_70();
  KeyPath = swift_getKeyPath();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v0, *MEMORY[0x24BDB6308], v1);
  v13 = 1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameterSummary<SearchTool>);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  v6 = lazy protocol witness table accessor for type SearchTool and conformance SearchTool();
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type IntentParameterSummary<SearchTool> and conformance IntentParameterSummary<A>, &demangling cache variable for type metadata for IntentParameterSummary<SearchTool>);
  v8 = v7;
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type Bool? and conformance A?, &demangling cache variable for type metadata for Bool?);
  v10 = v9;
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type IntentParameter<Bool?> and conformance IntentParameter<A>, &demangling cache variable for type metadata for IntentParameter<Bool?>);
  return MEMORY[0x2494F4490](KeyPath, v0, &v13, closure #1 in static SearchTool.parameterSummary.getter, 0, closure #2 in static SearchTool.parameterSummary.getter, 0, v4, v4, v5, v6, v8, v8, v10, v11, MEMORY[0x24BEE1340]);
}

void SearchTool.$isLowConfidenceKnowledge.getter()
{
  IntentParameter.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void key path getter for SearchTool.$isLowConfidenceKnowledge : SearchTool(_QWORD *a1@<X8>)
{
  uint64_t v2;

  SearchTool.$isLowConfidenceKnowledge.getter();
  *a1 = v2;
}

void closure #1 in static SearchTool.parameterSummary.getter()
{
  closure #1 in static SearchTool.parameterSummary.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  _QWORD v10[2];

  OUTLINED_FUNCTION_18_2();
  v10[1] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterSummaryString<SearchTool>);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_2_2();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameterSummary<SearchTool>);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  lazy protocol witness table accessor for type SearchTool and conformance SearchTool();
  ParameterSummaryString.init(stringLiteral:)();
  IntentParameterSummary.init(_:table:)();
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type IntentParameterSummary<SearchTool> and conformance IntentParameterSummary<A>, &demangling cache variable for type metadata for IntentParameterSummary<SearchTool>);
  static ParameterSummaryBuilder.buildBlock<A>(_:)();
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  static ParameterSummaryBuilder.buildBlock<A>(_:)();
  v9(v8, v2);
  OUTLINED_FUNCTION_43_0();
}

void closure #2 in static SearchTool.parameterSummary.getter()
{
  closure #1 in static SearchTool.parameterSummary.getter();
}

unint64_t lazy protocol witness table accessor for type SearchTool and conformance SearchTool()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchTool and conformance SearchTool;
  if (!lazy protocol witness table cache variable for type SearchTool and conformance SearchTool)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchTool, &type metadata for SearchTool);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchTool and conformance SearchTool);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchTool and conformance SearchTool;
  if (!lazy protocol witness table cache variable for type SearchTool and conformance SearchTool)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchTool, &type metadata for SearchTool);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchTool and conformance SearchTool);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchTool and conformance SearchTool;
  if (!lazy protocol witness table cache variable for type SearchTool and conformance SearchTool)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchTool, &type metadata for SearchTool);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchTool and conformance SearchTool);
  }
  return result;
}

void static SearchTool.description.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for description != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_17_5();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchTool.description);
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_89_11(a1, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16));
  OUTLINED_FUNCTION_51_0();
}

void static SearchTool.description.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for description != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_17_5();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchTool.description);
  OUTLINED_FUNCTION_2_6();
  v4 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_89_11(v3, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24));
  swift_endAccess();
  OUTLINED_FUNCTION_96(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_51_0();
}

uint64_t (*static SearchTool.description.modify())()
{
  uint64_t v0;

  if (one-time initialization token for description != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_17_5();
  __swift_project_value_buffer(v0, (uint64_t)static SearchTool.description);
  OUTLINED_FUNCTION_2_6();
  return static UTType.searchToolExportedExperiences.modify;
}

void SearchTool.rawQuery.getter()
{
  OUTLINED_FUNCTION_131_2();
  OUTLINED_FUNCTION_2_5();
}

void key path getter for SearchTool.rawQuery : SearchTool(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  SearchTool.rawQuery.getter();
  *a1 = v2;
  a1[1] = v3;
}

void key path setter for SearchTool.rawQuery : SearchTool()
{
  swift_bridgeObjectRetain();
  SearchTool.rawQuery.setter();
}

void SearchTool.rawQuery.setter()
{
  OUTLINED_FUNCTION_69_7();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.rawQuery.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchTool.$rawQuery.getter()
{
  IntentParameter.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchTool.rewrittenQuery.getter()
{
  OUTLINED_FUNCTION_131_2();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.rewrittenQuery.setter()
{
  OUTLINED_FUNCTION_69_7();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.rewrittenQuery.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchTool.$rewrittenQuery.getter()
{
  IntentParameter.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

uint64_t SearchTool.context.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t key path getter for SearchTool.context : SearchTool@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _BYTE v6[136];
  _OWORD v7[3];
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  v7[2] = *(_OWORD *)(a1 + 32);
  v8 = v3;
  SearchTool.context.getter();
  outlined init with take of SearchContext?((uint64_t)v6, (uint64_t)v7);
  return outlined init with take of SearchContext?((uint64_t)v7, a2);
}

uint64_t key path setter for SearchTool.context : SearchTool(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  _BYTE v6[136];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[17];

  outlined init with take of SearchContext?(a1, (uint64_t)v11);
  v3 = *((_QWORD *)a2 + 6);
  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  v9 = a2[2];
  v10 = v3;
  outlined init with take of SearchContext?((uint64_t)v11, (uint64_t)v6);
  outlined retain of SearchContext?(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of SearchContext?);
  return SearchTool.context.setter((uint64_t)v6);
}

uint64_t SearchTool.context.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[136];

  outlined init with take of SearchContext?(a1, (uint64_t)v3);
  outlined init with take of SearchContext?((uint64_t)v3, (uint64_t)&v2);
  return IntentParameter.wrappedValue.setter();
}

void SearchTool.context.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchTool.$context.getter()
{
  IntentParameter.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

uint64_t SearchTool.matchedEntities.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchTool.matchedEntities : SearchTool@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SearchTool.matchedEntities.getter();
  *a1 = result;
  return result;
}

void key path setter for SearchTool.matchedEntities : SearchTool()
{
  swift_bridgeObjectRetain();
  SearchTool.matchedEntities.setter();
}

void SearchTool.matchedEntities.setter()
{
  IntentParameter.wrappedValue.setter();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.matchedEntities.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchTool.$matchedEntities.getter()
{
  IntentParameter.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchTool.isFirstToolInvocation.getter()
{
  IntentParameter.wrappedValue.getter();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.isFirstToolInvocation.setter()
{
  OUTLINED_FUNCTION_116_5();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.isFirstToolInvocation.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchTool.$isFirstToolInvocation.getter()
{
  IntentParameter.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchTool.isLowConfidenceKnowledge.getter()
{
  IntentParameter.wrappedValue.getter();
  OUTLINED_FUNCTION_2_5();
}

void key path getter for SearchTool.isFirstToolInvocation : SearchTool(__n128 *a1)
{
  _BYTE *v1;
  __n128 v2;
  uint64_t (*v3)(__n128);

  v2 = OUTLINED_FUNCTION_53_12(a1);
  *v1 = v3(v2);
  OUTLINED_FUNCTION_71_9();
}

void key path setter for SearchTool.isFirstToolInvocation : SearchTool(unsigned __int8 *a1, __n128 *a2)
{
  __n128 v2;
  void (*v3)(__n128);

  v2 = OUTLINED_FUNCTION_85_7(*a1, a2);
  v3(v2);
  OUTLINED_FUNCTION_71_9();
}

void SearchTool.isLowConfidenceKnowledge.setter()
{
  OUTLINED_FUNCTION_116_5();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.isLowConfidenceKnowledge.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchTool.lowConfidenceKnowledgeValue.getter()
{
  OUTLINED_FUNCTION_131_2();
  OUTLINED_FUNCTION_2_5();
}

void key path getter for SearchTool.rewrittenQuery : SearchTool(__n128 *a1)
{
  _QWORD *v1;
  __n128 v2;
  uint64_t (*v3)(__n128);
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_53_12(a1);
  *v1 = v3(v2);
  v1[1] = v4;
  OUTLINED_FUNCTION_71_9();
}

uint64_t key path setter for SearchTool.rewrittenQuery : SearchTool(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  OUTLINED_FUNCTION_85_7((uint64_t)a1, a2);
  OUTLINED_FUNCTION_46_0();
  return a5(v6, v7);
}

void SearchTool.lowConfidenceKnowledgeValue.setter()
{
  OUTLINED_FUNCTION_69_7();
  OUTLINED_FUNCTION_2_5();
}

void SearchTool.lowConfidenceKnowledgeValue.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchTool.$lowConfidenceKnowledgeValue.getter()
{
  IntentParameter.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchTool.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  _QWORD v91[17];
  uint64_t v92;
  uint64_t v93;

  OUTLINED_FUNCTION_18_2();
  v82 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool.IntentDisplayName?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_3();
  v81 = v2;
  v88 = type metadata accessor for InputConnectionBehavior();
  v3 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  OUTLINED_FUNCTION_0_3();
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDialog?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_18_1();
  v75 = v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v73 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.IntentInputOptions?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_2_2();
  v14 = v13 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_2_2();
  v18 = v17 - v16;
  v19 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_59_5();
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String>);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_110_4();
  OUTLINED_FUNCTION_98_2();
  v21 = OUTLINED_FUNCTION_146_2();
  v84 = v19;
  __swift_storeEnumTagSinglePayload(v21, v22, v23, v24);
  v85 = type metadata accessor for String.IntentInputOptions();
  v92 = 0;
  v93 = 0;
  __swift_storeEnumTagSinglePayload(v14, 1, 1, v85);
  v90 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_49((uint64_t)v10, v25, v26, v90);
  v27 = *MEMORY[0x24BDB6090];
  v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  v83 = v5;
  v87 = v27;
  v28 = v88;
  v89(v5, v27, v88);
  OUTLINED_FUNCTION_144_1();
  v80 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String?>);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_110_4();
  OUTLINED_FUNCTION_98_2();
  v29 = OUTLINED_FUNCTION_146_2();
  __swift_storeEnumTagSinglePayload(v29, v30, v31, v32);
  v92 = 0;
  v93 = 0;
  v77 = v14;
  OUTLINED_FUNCTION_105_8(v14);
  v33 = v10;
  OUTLINED_FUNCTION_104_7((uint64_t)v10);
  v34 = v83;
  v89(v83, v27, v28);
  OUTLINED_FUNCTION_144_1();
  v79 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<SearchContext?>);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_110_4();
  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_66_10();
  _s10OmniSearch0B7ContextVSgWOi0_(&v92);
  outlined init with take of SearchContext?((uint64_t)&v92, (uint64_t)v91);
  v86 = (uint64_t)v33;
  OUTLINED_FUNCTION_86_3();
  OUTLINED_FUNCTION_135_3(v35, v36, v37);
  OUTLINED_FUNCTION_86_3();
  OUTLINED_FUNCTION_135_3(v38, v39, v40);
  v41 = v87;
  v42 = v89;
  v89(v34, v87, v88);
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  OUTLINED_FUNCTION_134_1();
  v76 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<[EntityMatch]?>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v18, 0, 1, v14);
  v91[0] = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_86_3();
  OUTLINED_FUNCTION_76_8(v43, v44, v45);
  OUTLINED_FUNCTION_86_3();
  OUTLINED_FUNCTION_76_8(v46, v47, v48);
  v49 = v88;
  v42(v34, v41, v88);
  lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  OUTLINED_FUNCTION_134_1();
  v75 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  v73[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<Bool?>);
  OUTLINED_FUNCTION_138();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_98_2();
  OUTLINED_FUNCTION_135_3(v18, 0, 1);
  LOBYTE(v91[0]) = 0;
  v73[0] = type metadata accessor for Bool.IntentDisplayName();
  OUTLINED_FUNCTION_49(v81, v50, v51, v73[0]);
  OUTLINED_FUNCTION_86_3();
  v52 = v90;
  __swift_storeEnumTagSinglePayload(v53, v54, v55, v90);
  v56 = v87;
  v89(v34, v87, v49);
  v74 = IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)();
  OUTLINED_FUNCTION_110_4();
  OUTLINED_FUNCTION_138();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_108_5();
  OUTLINED_FUNCTION_66_10();
  LOBYTE(v91[0]) = 0;
  OUTLINED_FUNCTION_86_3();
  __swift_storeEnumTagSinglePayload(v57, v58, v59, v73[0]);
  v60 = v86;
  OUTLINED_FUNCTION_86_3();
  __swift_storeEnumTagSinglePayload(v61, v62, v63, v52);
  v64 = v83;
  v65 = v56;
  v66 = v89;
  v89(v83, v65, v49);
  v67 = v64;
  v68 = IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)();
  OUTLINED_FUNCTION_110_4();
  OUTLINED_FUNCTION_138();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_108_5();
  OUTLINED_FUNCTION_76_8(v18, 0, 1);
  v91[0] = 0;
  v91[1] = 0;
  OUTLINED_FUNCTION_105_8(v77);
  OUTLINED_FUNCTION_104_7(v60);
  v66(v67, v87, v49);
  v69 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  v70 = v82;
  v71 = v79;
  *v82 = v80;
  v70[1] = v71;
  v72 = v75;
  v70[2] = v76;
  v70[3] = v72;
  v70[4] = v74;
  v70[5] = v68;
  v70[6] = v69;
  OUTLINED_FUNCTION_43_0();
}

unint64_t lazy protocol witness table accessor for type SearchContext and conformance SearchContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

uint64_t SearchTool.perform()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v2 + 936) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _GeneratedContentFallback?);
  *(_QWORD *)(v2 + 944) = OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _GeneratedContentOptions?);
  *(_QWORD *)(v2 + 952) = OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDialog._GeneratedDialogContent<SearchTool, [SearchEntity]>);
  *(_QWORD *)(v2 + 960) = OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RGPluginModel?);
  *(_QWORD *)(v2 + 968) = OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog)?);
  *(_QWORD *)(v2 + 976) = OUTLINED_FUNCTION_18_5();
  *(_QWORD *)(v2 + 984) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog));
  *(_QWORD *)(v2 + 992) = OUTLINED_FUNCTION_75_9();
  *(_QWORD *)(v2 + 1000) = swift_task_alloc();
  *(_QWORD *)(v2 + 1008) = type metadata accessor for LocalizedStringResource();
  *(_QWORD *)(v2 + 1016) = OUTLINED_FUNCTION_18_5();
  v3 = type metadata accessor for DisplayRepresentation();
  *(_QWORD *)(v2 + 1024) = v3;
  *(_QWORD *)(v2 + 1032) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 1040) = OUTLINED_FUNCTION_18_5();
  v4 = OUTLINED_FUNCTION_148_1();
  *(_QWORD *)(v2 + 1048) = v4;
  *(_QWORD *)(v2 + 1056) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 1064) = OUTLINED_FUNCTION_18_5();
  v5 = type metadata accessor for IntentDialog();
  *(_QWORD *)(v2 + 1072) = v5;
  *(_QWORD *)(v2 + 1080) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 1088) = OUTLINED_FUNCTION_75_9();
  *(_QWORD *)(v2 + 1096) = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 1104) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 1120) = v6;
  *(_OWORD *)(v2 + 1136) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 1152) = *(_QWORD *)(v1 + 48);
  return OUTLINED_FUNCTION_2_10();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *v2;
  v4 = (_QWORD *)(*v2 + 448);
  *(_QWORD *)(v3 + 1208) = a1;
  *(_QWORD *)(v3 + 1216) = v1;
  swift_task_dealloc();
  outlined retain of SearchContext?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of SearchContext?);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_2_10();
}

uint64_t SearchTool.perform()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  _BOOL4 v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _WORD *v17;
  const char *v18;
  id v19;
  os_log_type_t v20;
  _WORD *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  int *v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *log;
  os_log_t loga;
  __int128 v47;
  uint64_t v48;
  uint64_t (*v49)(os_log_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  os_log_type_t type;
  os_log_type_t typea[16];
  __int128 v52;
  _QWORD *v53;
  _OWORD v54[3];
  uint64_t v55;

  if (one-time initialization token for stextension != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_13();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Logging.stextension);
  *(_QWORD *)(v0 + 1160) = v2;
  OUTLINED_FUNCTION_54_10();
  OUTLINED_FUNCTION_54_10();
  OUTLINED_FUNCTION_54_10();
  OUTLINED_FUNCTION_54_10();
  OUTLINED_FUNCTION_54_10();
  OUTLINED_FUNCTION_54_10();
  OUTLINED_FUNCTION_54_10();
  Logger.logObject.getter();
  type = OUTLINED_FUNCTION_106_3();
  v3 = os_log_type_enabled(v2, type);
  v4 = *(_QWORD *)(v0 + 1136);
  v5 = *(uint8_t **)(v0 + 1104);
  if (v3)
  {
    log = v2;
    v6 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_QWORD *)&v54[0] = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v6 = 136316162;
    OUTLINED_FUNCTION_15_5();
    OUTLINED_FUNCTION_12_9();
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_5_9();
    IntentParameter.wrappedValue.getter();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_4_12();
    OUTLINED_FUNCTION_11_5();
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_142_1(*(_QWORD *)(v0 + 784));
    *(_QWORD *)(v0 + 856) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_36_0();
    *(_WORD *)(v6 + 12) = 2080;
    OUTLINED_FUNCTION_15_5();
    OUTLINED_FUNCTION_12_9();
    swift_retain();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_5_9();
    IntentParameter.wrappedValue.getter();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_4_12();
    OUTLINED_FUNCTION_11_5();
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_39_0();
    if (*(_QWORD *)(v0 + 840))
      v8 = *(_QWORD *)(v0 + 832);
    else
      v8 = 0;
    OUTLINED_FUNCTION_142_1(v8);
    *(_QWORD *)(v0 + 928) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_36_0();
    *(_WORD *)(v6 + 22) = 2080;
    swift_retain();
    swift_retain();
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_5_9();
    IntentParameter.wrappedValue.getter();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_4_12();
    OUTLINED_FUNCTION_11_5();
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_3_6();
    if (*(_QWORD *)(v0 + 920))
      v10 = *(_QWORD *)(v0 + 920);
    else
      v10 = MEMORY[0x24BEE4AF8];
    v11 = MEMORY[0x2494F5E4C](v10, &type metadata for EntityMatch);
    v13 = v12;
    OUTLINED_FUNCTION_36_0();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, (uint64_t *)v54);
    *(_QWORD *)(v0 + 872) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_6_1();
    *(_WORD *)(v6 + 32) = 1024;
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_12_9();
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_133_0();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    *(_DWORD *)(v0 + 1228) = *(_BYTE *)(v0 + 1234) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_4_12();
    OUTLINED_FUNCTION_11_5();
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_3_6();
    *(_WORD *)(v6 + 38) = 1024;
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_12_9();
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_5_9();
    IntentParameter.wrappedValue.getter();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_7_6();
    *(_DWORD *)(v0 + 1224) = *(_BYTE *)(v0 + 1235) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_4_12();
    OUTLINED_FUNCTION_11_5();
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_3_6();
    _os_log_impl(&dword_24315F000, log, type, "SearchTool Intent perform() called with\n    rawQuery: %s,\n    rewrittenQuery: %s,\n    matchedEntities: %s,\n    isFirstToolInvocation: %{BOOL}d,\n    isLowConfidenceKnowledge: %{BOOL}d", (uint8_t *)v6, 0x2Cu);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }

  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_2_6();
  if ((byte_257289054 & 1) == 0)
  {
    LODWORD(v4) = static SearchToolControl.prewarmPID;
    v19 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v5 = (uint8_t *)objc_msgSend(v19, sel_processIdentifier);

    v15 = OUTLINED_FUNCTION_124_5();
    if ((_DWORD)v4 == (_DWORD)v5)
    {
      v20 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_31(v20))
        goto LABEL_20;
      v21 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_121_3(v21);
      v18 = "SearchTool extension was successfully prewarmed";
    }
    else
    {
      v22 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_31(v22))
        goto LABEL_20;
      v23 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_121_3(v23);
      v18 = "SearchTool Intent perform() called with a different PID than when prewarming!";
    }
LABEL_19:
    OUTLINED_FUNCTION_19_2(&dword_24315F000, v15, (os_log_type_t)v4, v18, v5);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v15 = OUTLINED_FUNCTION_124_5();
  v16 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_31(v16))
  {
    v17 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_121_3(v17);
    v18 = "SearchTool Intent perform() called while not prewarmed!";
    goto LABEL_19;
  }
LABEL_20:
  v24 = *(_QWORD *)(v0 + 1152);
  *(_OWORD *)typea = *(_OWORD *)(v0 + 1120);
  v52 = *(_OWORD *)(v0 + 1104);
  v47 = *(_OWORD *)(v0 + 1136);

  v54[0] = v52;
  v54[1] = *(_OWORD *)typea;
  v54[2] = v47;
  v55 = v24;
  v25 = (unint64_t)SearchTool.checkForOverrides()();
  if (v25)
  {
    v26 = v25;
    if (*(_QWORD *)(v25 + 16))
    {
      OUTLINED_FUNCTION_124_5();
      v27 = OUTLINED_FUNCTION_106_3();
      if (OUTLINED_FUNCTION_31(v27))
      {
        v28 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_WORD *)v28 = 0;
        OUTLINED_FUNCTION_19_2(&dword_24315F000, v54, (os_log_type_t)v4, "Override found! Returning canned SearchTool entities.", v28);
        specialized UnsafeMutablePointer.deallocate()();
      }
      v29 = *(_QWORD *)(v0 + 1096);
      v30 = *(_QWORD *)(v0 + 1080);
      v31 = *(_QWORD *)(v0 + 1072);

      *(_QWORD *)(v0 + 904) = v26;
      IntentDialog.init(stringLiteral:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchEntity]);
      lazy protocol witness table accessor for type [SearchEntity] and conformance <A> [A]();
      static IntentResult.result<A>(value:snippetModel:dialog:)();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      OUTLINED_FUNCTION_6_1();
      OUTLINED_FUNCTION_86_9();
      swift_task_dealloc();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_95();
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_99();
      OUTLINED_FUNCTION_41_2();
      OUTLINED_FUNCTION_73();
      OUTLINED_FUNCTION_56();
      OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_91();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    OUTLINED_FUNCTION_6_1();
  }
  v53 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for OmniSearchService()), sel_init);
  *(_QWORD *)(v0 + 1168) = v53;
  if (one-time initialization token for allExceptWebIndex != -1)
    swift_once();
  v48 = v0 + 448;
  v33 = static SearchSources.allExceptWebIndex;
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_18_8();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_15_5();
  IntentParameter.wrappedValue.getter();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_17_9();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_12();
  if ((*(_BYTE *)(v0 + 1232) & 1) != 0)
    v33 = 8;
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_18_8();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_15_5();
  IntentParameter.wrappedValue.getter();
  v44 = *(_QWORD *)(v0 + 824);
  loga = *(os_log_t *)(v0 + 816);
  *(_QWORD *)(v0 + 1176) = v44;
  IntentParameter.wrappedValue.getter();
  v42 = *(_QWORD *)(v0 + 808);
  v43 = *(_QWORD *)(v0 + 800);
  *(_QWORD *)(v0 + 1184) = v42;
  OUTLINED_FUNCTION_133_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_17_9();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_12();
  v34 = *(_QWORD *)(v0 + 912);
  *(_QWORD *)(v0 + 1192) = v34;
  if (!v34)
    v34 = MEMORY[0x24BEE4AF8];
  v40 = v34;
  *(_QWORD *)(v0 + 864) = v33;
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_18_8();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_15_5();
  IntentParameter.wrappedValue.getter();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_17_9();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_12();
  v39 = *(_BYTE *)(v0 + 1236) & 1;
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_18_8();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_15_5();
  IntentParameter.wrappedValue.getter();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_17_9();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_12();
  v41 = *(_BYTE *)(v0 + 1233) & 1;
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_18_8();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_15_5();
  IntentParameter.wrappedValue.getter();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_17_9();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_12();
  outlined init with take of SearchContext?(v0 + 584, v48);
  *(_BYTE *)(v0 + 304) = v39;
  *(_BYTE *)(v0 + 305) = v41;
  outlined init with take of SearchContext?(v48, v0 + 312);
  *(_BYTE *)(v0 + 16) = v39;
  *(_BYTE *)(v0 + 17) = v41;
  outlined init with take of SearchContext?(v48, v0 + 24);
  v35 = (void *)OUTLINED_FUNCTION_6_5();
  memcpy(v35, v36, 0x90uLL);
  v37 = *(int **)((*MEMORY[0x24BEE4EA0] & *v53) + 0xB0);
  v49 = (uint64_t (*)(os_log_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v37 + *v37);
  v38 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1200) = v38;
  *v38 = v0;
  v38[1] = SearchTool.perform();
  return v49(loga, v44, v43, v42, v40, v0 + 864, v0 + 160);
}

{
  _QWORD *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _QWORD *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  int EnumTagSinglePayload;
  uint64_t v90;
  unint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  os_log_type_t v115;
  _WORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  void *v129;
  _QWORD *v130;
  uint64_t v131;
  BOOL v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  void (*v158)(void);
  os_log_type_t v159;
  _QWORD *v160;
  uint64_t v161;
  NSObject *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v2 = v0[152];
  v3 = v0[151];
  v0[93] = &type metadata for EntityCardBuilder;
  v0[94] = &protocol witness table for EntityCardBuilder;
  v4 = Array<A>.createValidEntities(cardBuilder:)((uint64_t)(v0 + 90), v3);
  if (v2)
  {
    v5 = (void *)v0[146];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 90));
    OUTLINED_FUNCTION_56_0();

    OUTLINED_FUNCTION_117_1();
    OUTLINED_FUNCTION_86_9();
    swift_task_dealloc();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_91();
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_56();
    OUTLINED_FUNCTION_55();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  v7 = v4;
  v8 = v0[145];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 90));
  OUTLINED_FUNCTION_35_1();
  swift_bridgeObjectRetain();
  Logger.logObject.getter();
  v9 = OUTLINED_FUNCTION_106_3();
  v10 = OUTLINED_FUNCTION_91_4(v9);
  v11 = v0[151];
  v163 = v0;
  v138 = (uint64_t)(v0 + 111);
  if (v10)
  {
    v12 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v12 = 134218240;
    v0[111] = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_47_2();
    *(_WORD *)(v12 + 12) = 2048;
    v13 = *(_QWORD *)(v11 + 16);
    OUTLINED_FUNCTION_6_1();
    v0[112] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_6_1();
    _os_log_impl(&dword_24315F000, v8, v1, "SearchTool return %ld SearchEntities from %ld SearchResults:", (uint8_t *)v12, 0x16u);
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_102_0();

  v155 = *(_QWORD *)(v7 + 16);
  v139 = v7;
  if (v155)
  {
    v143 = v0[129];
    v145 = v0[132];
    OUTLINED_FUNCTION_35_1();
    v14 = 0;
    v15 = (_QWORD *)(v7 + 56);
    *(_QWORD *)&v16 = 134218754;
    v141 = v16;
    v140 = MEMORY[0x24BEE4AD8] + 8;
    do
    {
      v164 = v14;
      v162 = v0[145];
      v17 = *(v15 - 2);
      v18 = *(v15 - 1);
      v19 = *v15;
      v20 = v15[1];
      v21 = v15[2];
      v23 = v15[3];
      v22 = v15[4];
      v24 = v15[5];
      v25 = v15[6];
      v160 = v15;
      v26 = v15[7];
      v168 = *(v15 - 3);
      OUTLINED_FUNCTION_30_13();
      v172 = v17;
      OUTLINED_FUNCTION_30_13();
      OUTLINED_FUNCTION_30_13();
      OUTLINED_FUNCTION_30_13();
      OUTLINED_FUNCTION_30_13();
      OUTLINED_FUNCTION_30_13();
      OUTLINED_FUNCTION_30_13();
      v166 = v22;
      OUTLINED_FUNCTION_30_13();
      v165 = v24;
      OUTLINED_FUNCTION_30_13();
      v11 = v25;
      OUTLINED_FUNCTION_30_13();
      OUTLINED_FUNCTION_30_13();
      Logger.logObject.getter();
      v159 = OUTLINED_FUNCTION_106_3();
      if (os_log_type_enabled(v162, v159))
      {
        v147 = v163[133];
        v153 = v163[131];
        v27 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        v176 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_DWORD *)v27 = v141;
        *(_QWORD *)(v27 + 4) = v164;
        *(_WORD *)(v27 + 12) = 2080;
        OUTLINED_FUNCTION_73_7();
        swift_retain();
        OUTLINED_FUNCTION_2_8();
        OUTLINED_FUNCTION_75();
        swift_retain();
        OUTLINED_FUNCTION_0_11();
        v161 = v23;
        OUTLINED_FUNCTION_5_9();
        OUTLINED_FUNCTION_12_9();
        OUTLINED_FUNCTION_10_8();
        OUTLINED_FUNCTION_15_5();
        OUTLINED_FUNCTION_1_11();
        EntityProperty.wrappedValue.getter();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_39_0();
        OUTLINED_FUNCTION_11_5();
        OUTLINED_FUNCTION_13_8();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_3_6();
        OUTLINED_FUNCTION_9_8();
        OUTLINED_FUNCTION_4_12();
        OUTLINED_FUNCTION_61_5();
        OUTLINED_FUNCTION_38_11();
        OUTLINED_FUNCTION_39_11();
        v28 = SearchResultType.rawValue.getter();
        v30 = v29;
        (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v147, v153);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v176);
        *(_QWORD *)(v27 + 14) = v31;
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 22) = 2048;
        v177 = v168;
        v178 = v172;
        v179 = v18;
        v180 = v19;
        v181 = v20;
        v182 = v21;
        v183 = v161;
        v184 = v166;
        v185 = v165;
        v186 = v25;
        v187 = v26;
        v32 = (void *)SearchEntity.card.getter();
        if (v32 && (outlined bridged method (ob) of @objc SFCard.cardSections.getter(v32), v33))
        {
          if (v33 >> 62)
            v34 = _CocoaArrayWrapper.endIndex.getter();
          else
            v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
          OUTLINED_FUNCTION_56_0();
        }
        else
        {
          v34 = 0;
        }
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_11_5();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_17_9();
        OUTLINED_FUNCTION_111_4();
        OUTLINED_FUNCTION_4_12();
        OUTLINED_FUNCTION_61_5();
        OUTLINED_FUNCTION_13_8();
        OUTLINED_FUNCTION_39_11();
        v35 = v163[130];
        v148 = v163[127];
        v150 = v163[128];
        v154 = v163[126];
        *(_QWORD *)(v27 + 24) = v34;
        OUTLINED_FUNCTION_3_6();
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_39_0();
        OUTLINED_FUNCTION_11_5();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_17_9();
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_4_12();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_13_8();
        v36 = OUTLINED_FUNCTION_39_0();
        *(_WORD *)(v27 + 32) = 2080;
        v177 = v168;
        v178 = v172;
        v179 = v18;
        v180 = v19;
        v181 = v20;
        v182 = v21;
        v183 = v161;
        v184 = v166;
        v185 = v165;
        v186 = v25;
        v187 = v26;
        SearchEntity.displayRepresentation.getter(v36, v37, v38, v39, v40, v41, v42, v43, v137, v138, v139, v140, v141, *((uint64_t *)&v141 + 1), v142, v143, v145, v148, v150,
          v154);
        DisplayRepresentation.title.getter();
        (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v35, v151);
        v44 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v176);
        *(_QWORD *)(v27 + 34) = v46;
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_7_6();
        OUTLINED_FUNCTION_36_0();
        _os_log_impl(&dword_24315F000, v162, v159, "Result %ld---%s---%ld cardSections---%s\n", (uint8_t *)v27, 0x2Au);
        swift_arrayDestroy();
        specialized UnsafeMutablePointer.deallocate()();
      }

      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      OUTLINED_FUNCTION_31_14();
      v0 = v163;
      v14 = v164 + 1;
      v15 = v160 + 11;
    }
    while (v155 != v164 + 1);
    v7 = v139;
    OUTLINED_FUNCTION_47_2();
  }
  v47 = v0[145];
  swift_bridgeObjectRetain_n();
  Logger.logObject.getter();
  v48 = OUTLINED_FUNCTION_106_3();
  if (OUTLINED_FUNCTION_65(v48))
  {
    v49 = v0 + 110;
    v50 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v177 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v50 = 136315138;
    v51 = OUTLINED_FUNCTION_35_1();
    v52 = MEMORY[0x2494F5E4C](v51, &type metadata for SearchEntity);
    v54 = v53;
    OUTLINED_FUNCTION_47_2();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v177);
    *v49 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_102_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_29_2(&dword_24315F000, v47, (os_log_type_t)v11, "SearchTool Intent perform() returns entities:\n%s", v50);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }

  OUTLINED_FUNCTION_102_0();
  Array<A>.primaryEntities(maxLen:)();
  v57 = (uint64_t)v56;
  if (v56[2])
  {
    v167 = v163[122];
    v169 = v163[123];
    v58 = v56[5];
    v59 = v56[6];
    v173 = v56[7];
    v61 = v56[8];
    v60 = v56[9];
    v11 = v56[10];
    v62 = v56[11];
    v64 = v56[12];
    v63 = v56[13];
    v65 = v56[14];
    v177 = v56[4];
    v178 = v58;
    v179 = v59;
    v180 = v173;
    v181 = v61;
    v182 = v60;
    v183 = v11;
    v184 = v62;
    v185 = v64;
    v186 = v63;
    v187 = v65;
    swift_retain();
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_1_11();
    swift_retain();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_15_5();
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_12_9();
    OUTLINED_FUNCTION_5_9();
    SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(0, v66, v67, v68, v69, v70, v71, v72, v137, v138, v139, v140, v141, *((uint64_t *)&v141 + 1), v142, v143, v145, v146, v149,
      v152);
    if (__swift_getEnumTagSinglePayload(v167, 1, v169) != 1)
    {
      v92 = v163[145];
      v93 = v163[135];
      v94 = v163[134];
      v95 = (uint64_t *)v163[125];
      v96 = v163[123];
      v97 = (uint64_t *)v163[122];
      OUTLINED_FUNCTION_80_0();
      v98 = *(int *)(v96 + 48);
      v99 = v97[1];
      v100 = *v97;
      *v95 = v100;
      v95[1] = v99;
      v101 = (char *)v95 + v98;
      v158 = *(void (**)(void))(v93 + 32);
      v158();
      outlined copy of Data._Representation(v100, v99);
      Logger.logObject.getter();
      v102 = OUTLINED_FUNCTION_51_2();
      if (OUTLINED_FUNCTION_91_4(v102))
      {
        v103 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_WORD *)v103 = 0;
        OUTLINED_FUNCTION_19_2(&dword_24315F000, v92, (os_log_type_t)v94, "Passing through global snippet and dialog", v103);
        specialized UnsafeMutablePointer.deallocate()();
      }
      v104 = v163[135];
      v105 = v163[134];
      v156 = (uint64_t *)v163[125];
      v157 = v163[136];
      v106 = (uint64_t *)v163[124];

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_61_5();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_38_11();
      OUTLINED_FUNCTION_11_5();
      OUTLINED_FUNCTION_111_4();
      OUTLINED_FUNCTION_151_0();
      v107 = (char *)v106 + *(int *)(v96 + 48);
      v108 = v96;
      v109 = v99;
      *v106 = v100;
      v106[1] = v99;
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v107, v101, v105);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v107, v105);
      v110 = (char *)v106 + *(int *)(v108 + 48);
      v111 = *v156;
      v112 = v95[1];
      ((void (*)(char *, char *, uint64_t))v158)(v110, v101, v105);
      v113 = v111;
      v74 = v163;
      outlined consume of Data._Representation(v113, v112);
      ((void (*)(uint64_t, char *, uint64_t))v158)(v157, v110, v105);
      v114 = v139;
      goto LABEL_37;
    }
    v73 = v163[122];
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_4_12();
    OUTLINED_FUNCTION_11_5();
    OUTLINED_FUNCTION_39_0();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_38_11();
    swift_release();
    OUTLINED_FUNCTION_111_4();
    OUTLINED_FUNCTION_151_0();
    outlined destroy of CustomStringConvertible?(v73, &demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog)?);
    v7 = v139;
  }
  v74 = v163;
  v75 = v163[145];
  if (v155)
  {
    Logger.logObject.getter();
    v76 = OUTLINED_FUNCTION_51_2();
    if (OUTLINED_FUNCTION_65(v76))
    {
      v77 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v77 = 0;
      OUTLINED_FUNCTION_19_2(&dword_24315F000, v75, (os_log_type_t)v11, "One or more entity results. Search tool will synthesize model data & dialog", v77);
      specialized UnsafeMutablePointer.deallocate()();
    }
    v78 = (uint64_t *)v163[121];

    specialized static EntityCardBuilding.cardForEntities(_:)(v57, v79, v80, v81, v82, v83, v84, v85, v137, v138, v139, v140, v141, *((uint64_t *)&v141 + 1), v142, v143, v145, v146, v149,
      v152);
    v87 = v86;
    OUTLINED_FUNCTION_80_0();
    v174 = v87;
    SFCard.snippetPluginModel.getter(v78);
    v88 = type metadata accessor for RGPluginModel();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v78, 1, v88);
    v90 = v163[121];
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of CustomStringConvertible?(v163[121], &demangling cache variable for type metadata for RGPluginModel?);
      v170 = 0;
      v91 = 0xF000000000000000;
    }
    else
    {
      lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type RGPluginModel and conformance RGPluginModel, (void (*)(uint64_t))MEMORY[0x24BE52530]);
      v170 = SnippetPluginModel.data.getter();
      v91 = v117;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v90, v88);
    }
    v118 = v163[119];
    v119 = v163[118];
    v120 = swift_task_alloc();
    *(_QWORD *)(v120 + 16) = v7;
    v121 = type metadata accessor for _GeneratedContentOptions();
    __swift_storeEnumTagSinglePayload(v118, 1, 1, v121);
    v122 = type metadata accessor for _GeneratedContentFallback();
    OUTLINED_FUNCTION_49(v119, v123, v124, v122);
    v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchEntity]);
    v126 = v7;
    v127 = lazy protocol witness table accessor for type SearchTool and conformance SearchTool();
    v128 = lazy protocol witness table accessor for type [SearchEntity] and conformance <A> [A]();
    MEMORY[0x2494F4208](partial apply for closure #1 in SearchTool.perform(), v120, v118, v119, &type metadata for SearchTool, v125, v127, v128);
    OUTLINED_FUNCTION_56();
    v74 = v163;
    IntentDialog.init<A, B>(from:)();

    v114 = v126;
    v100 = v170;
    v109 = v91;
  }
  else
  {
    OUTLINED_FUNCTION_80_0();
    Logger.logObject.getter();
    v115 = OUTLINED_FUNCTION_51_2();
    if (os_log_type_enabled(v75, v115))
    {
      v116 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_121_3(v116);
      OUTLINED_FUNCTION_19_2(&dword_24315F000, v75, v115, "No results. Search tool will generate static dialog text", (uint8_t *)v11);
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_138();
    IntentDialog.init(stringLiteral:)();
    v100 = 0;
    v109 = 0xF000000000000000;
    v114 = v7;
  }
LABEL_37:
  v129 = (void *)v74[146];
  v130 = v74;
  v131 = v74[136];
  v171 = v130[135];
  v175 = v130[134];
  v130[106] = v114;
  v132 = v109 >> 60 == 15;
  v133 = v109;
  if (v109 >> 60 == 15)
    v134 = 0;
  else
    v134 = v100;
  if (v132)
    v135 = 0xC000000000000000;
  else
    v135 = v133;
  outlined copy of Data?(v100, v133);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchEntity]);
  lazy protocol witness table accessor for type [SearchEntity] and conformance <A> [A]();
  static IntentResult.result<A>(value:snippetModel:dialog:)();

  outlined consume of Data._Representation(v134, v135);
  outlined consume of Data?(v100, v133);
  (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v131, v175);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_117_1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  swift_task_dealloc();
  swift_task_dealloc();
  v6 = (uint64_t (*)(void))v130[1];
  return v6();
}

{
  uint64_t v0;

  swift_task_dealloc();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_104();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::OpaquePointer_optional __swiftcall SearchTool.checkForOverrides()()
{
  Swift::Bool v0;
  void *v1;
  uint64_t v2;
  Swift::OpaquePointer_optional result;

  if (AFIsInternalInstall())
  {
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_12_9();
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_18_8();
    IntentParameter.wrappedValue.getter();
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_11_5();
    if (!v2)
    {
      OUTLINED_FUNCTION_10_8();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_12_9();
      OUTLINED_FUNCTION_1_11();
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_0_11();
      OUTLINED_FUNCTION_18_8();
      OUTLINED_FUNCTION_133_0();
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_13_8();
      OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_11_5();
    }
    static SearchOverrides.read()();
  }
  v1 = 0;
  result.value._rawValue = v1;
  result.is_nil = v0;
  return result;
}

uint64_t Array<A>.createValidEntities(cardBuilder:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v18[4];
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_0_3();
  v6 = OUTLINED_FUNCTION_13_2(v5);
  v22 = type metadata accessor for SearchResult(v6);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = MEMORY[0x24BDAC7A8](v22);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v18 - v11;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
  {
    outlined init with copy of IMSPIMessageProtocol(a1, (uint64_t)&v30);
    type metadata accessor for SearchEntityBuilder();
    inited = swift_initStackObject();
    v18[2] = inited + 16;
    outlined init with take of SageSearchClient(&v30, inited + 16);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0, MEMORY[0x24BEE4AF8]);
    v23 = v14;
    v15 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v24 = *(_QWORD *)(v7 + 72);
    v18[1] = a2;
    OUTLINED_FUNCTION_46_0();
    *((_QWORD *)&v16 + 1) = 1;
    v19 = xmmword_24334E620;
    *(_QWORD *)&v16 = 136315394;
    v21 = v16;
    v20 = MEMORY[0x24BEE4AD8] + 8;
    v18[0] = v13;
    v26 = v10;
    v25 = v12;
    v28 = v13;
    v29 = v15;
    outlined init with copy of SearchResult(v15, (uint64_t)v12);
    SearchEntityBuilder.makeSearchEntity(searchResult:)((uint64_t)v12);
  }
  return MEMORY[0x24BEE4AF8];
}

void Array<A>.primaryEntities(maxLen:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  OUTLINED_FUNCTION_18_2();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_148_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_9_2();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v5 = MEMORY[0x24BDAC7A8](v4);
  if (v1[2])
  {
    v47 = v1[2];
    v9 = v1[5];
    v66 = v1[4];
    v55 = v5;
    v46 = (char *)&v44 - v6;
    v65 = v1[6];
    v10 = v1 + 8;
    *(_QWORD *)&v64 = v1[8];
    *(_QWORD *)&v63 = v1[9];
    v59 = v1[11];
    v60 = v1[12];
    *(_QWORD *)&v61 = v9;
    v45 = v7;
    *(_QWORD *)&v62 = v8;
    swift_retain();
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_15_5();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_15_5();
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_12_9();
    OUTLINED_FUNCTION_7_12();
    v11 = v62;
    EntityProperty.wrappedValue.getter();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_17_9();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_120_4();
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_87_6();
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v46, v11, v55);
    v44 = v1;
    swift_bridgeObjectRetain();
    v60 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v12 = *((_OWORD *)v10 - 1);
      v58 = *((_OWORD *)v10 - 2);
      v63 = *(_OWORD *)v10;
      v64 = v12;
      v13 = *((_OWORD *)v10 + 1);
      v61 = *((_OWORD *)v10 + 2);
      v62 = v13;
      v48 = v10;
      v14 = v10[6];
      v66 = v58;
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      v65 = v64;
      OUTLINED_FUNCTION_15_11();
      v15 = *((_QWORD *)&v64 + 1);
      OUTLINED_FUNCTION_15_11();
      v16 = v63;
      OUTLINED_FUNCTION_15_11();
      v17 = *((_QWORD *)&v63 + 1);
      OUTLINED_FUNCTION_15_11();
      v18 = v62;
      OUTLINED_FUNCTION_15_11();
      v19 = *((_QWORD *)&v62 + 1);
      OUTLINED_FUNCTION_15_11();
      v20 = v61;
      OUTLINED_FUNCTION_15_11();
      v21 = *((_QWORD *)&v61 + 1);
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_115_3();
      v49 = v14;
      OUTLINED_FUNCTION_11_5();
      v56 = v21;
      OUTLINED_FUNCTION_3_6();
      v57 = v20;
      OUTLINED_FUNCTION_9_8();
      v50 = v19;
      OUTLINED_FUNCTION_39_0();
      v51 = v18;
      OUTLINED_FUNCTION_17_9();
      v52 = v17;
      OUTLINED_FUNCTION_75_0();
      v53 = v16;
      OUTLINED_FUNCTION_69();
      v59 = v15;
      OUTLINED_FUNCTION_13_8();
      swift_release();
      OUTLINED_FUNCTION_50();
      OUTLINED_FUNCTION_87_6();
      lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultType and conformance SearchResultType, (void (*)(uint64_t))MEMORY[0x24BE6E228]);
      OUTLINED_FUNCTION_125_2();
      OUTLINED_FUNCTION_125_2();
      v22 = v69 == v67 && v70 == v68;
      v23 = v22 ? 1 : _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_36_0();
      v24 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v25 = v55;
      v24(v54, v55);
      v26 = v49;
      v27 = v48;
      if ((v23 & 1) == 0)
        break;
      swift_retain();
      OUTLINED_FUNCTION_0_11();
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_12_9();
      OUTLINED_FUNCTION_1_11();
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_18_8();
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_15_5();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v28 = v60;
      }
      else
      {
        v34 = OUTLINED_FUNCTION_228();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34, v35, v36, v37);
        v28 = v38;
      }
      v30 = *(_QWORD *)(v28 + 16);
      v29 = *(_QWORD *)(v28 + 24);
      if (v30 >= v29 >> 1)
      {
        v39 = OUTLINED_FUNCTION_130_1(v29);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39, v40, v41, v42);
        v28 = v43;
      }
      *(_QWORD *)(v28 + 16) = v30 + 1;
      v60 = v28;
      v31 = v28 + 88 * v30;
      v32 = v64;
      *(_OWORD *)(v31 + 32) = v58;
      *(_OWORD *)(v31 + 48) = v32;
      v33 = v62;
      *(_OWORD *)(v31 + 64) = v63;
      *(_OWORD *)(v31 + 80) = v33;
      *(_OWORD *)(v31 + 96) = v61;
      *(_QWORD *)(v31 + 112) = v26;
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_47_12();
      OUTLINED_FUNCTION_68_9();
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_13_8();
      OUTLINED_FUNCTION_84_7();
      OUTLINED_FUNCTION_120_4();
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_87_6();
      v10 = v27 + 11;
      if (!--v47)
      {
        OUTLINED_FUNCTION_49_1();
        v25 = v55;
        goto LABEL_19;
      }
    }
    OUTLINED_FUNCTION_49_1();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_47_12();
    OUTLINED_FUNCTION_68_9();
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_84_7();
    OUTLINED_FUNCTION_120_4();
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_87_6();
LABEL_19:
    v24((uint64_t)v46, v25);
  }
  OUTLINED_FUNCTION_43_0();
}

void SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t);
  char v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint8_t *v137;
  id v138;
  void *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD v158[3];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t, unint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196[5];
  _QWORD v197[4];
  _QWORD v198[5];

  OUTLINED_FUNCTION_18_2();
  a19 = v21;
  a20 = v22;
  v168 = v23;
  v185 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RGPluginModel?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_13_2(v26);
  v27 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_25_0(v27, (uint64_t)v196);
  v186 = v28;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_13_2(v30);
  v31 = type metadata accessor for SearchGlobalEntity();
  OUTLINED_FUNCTION_25_0(v31, (uint64_t)&a15);
  v192 = v32;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_13_2(v34);
  v35 = type metadata accessor for Searchfoundation_Card();
  OUTLINED_FUNCTION_25_0(v35, (uint64_t)v197);
  v165 = v36;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_9_2();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_127_1(v39);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_13_2(v41);
  v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  OUTLINED_FUNCTION_25_0(v42, (uint64_t)v198);
  v172 = v43;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_0_3();
  v196[0] = v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_18_1();
  v193 = (char *)v47;
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_13_2(v49);
  v50 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  v194 = *(_QWORD *)(v50 - 8);
  v195 = v50;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_9_2();
  v53 = MEMORY[0x24BDAC7A8](v52);
  v191 = (char *)v158 - v54;
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_9_2();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_127_1(v56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchGlobalEntity?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v57);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_9_2();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_127_1(v59);
  v60 = *v20;
  v189 = v20[1];
  v190 = v60;
  v62 = v20[2];
  v61 = v20[3];
  v63 = v20[5];
  v188 = v20[4];
  v187 = v63;
  v64 = v20[6];
  v65 = v20[7];
  v67 = v20[8];
  v66 = v20[9];
  v68 = v20[10];
  swift_retain();
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_15_5();
  OUTLINED_FUNCTION_0_11();
  v69 = v64;
  swift_retain();
  OUTLINED_FUNCTION_18_8();
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_1_11();
  OUTLINED_FUNCTION_7_12();
  v70 = v183;
  EntityProperty.wrappedValue.getter();
  v71 = v184;
  v175 = v68;
  OUTLINED_FUNCTION_9_8();
  v176 = v66;
  OUTLINED_FUNCTION_69();
  v177 = v67;
  OUTLINED_FUNCTION_4_12();
  v174 = v65;
  OUTLINED_FUNCTION_17_9();
  v178 = v69;
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_47_12();
  OUTLINED_FUNCTION_75_0();
  v179 = v62;
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_68_9();
  OUTLINED_FUNCTION_106_7();
  if (!__swift_getEnumTagSinglePayload(v70, 1, v71))
  {
    v159 = v61;
    v76 = SearchGlobalEntity.text.getter();
    v78 = v77;
    outlined destroy of CustomStringConvertible?(v70, &demangling cache variable for type metadata for SearchGlobalEntity?);
    if (!v78)
      goto LABEL_3;
    v158[2] = v76;
    v196[2] = v190;
    v196[3] = v189;
    v196[4] = v179;
    v197[0] = v159;
    v197[1] = v188;
    v197[2] = v187;
    v197[3] = v178;
    v198[0] = v174;
    OUTLINED_FUNCTION_136_1();
    v198[1] = v80;
    v198[2] = v79;
    v198[3] = v175;
    lazy protocol witness table accessor for type SearchEntity and conformance SearchEntity();
    v81 = ExperienceProviding.experiences.getter();
    v82 = v185;
    if (v81 >> 62)
      v83 = _CocoaArrayWrapper.endIndex.getter();
    else
      v83 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
    v84 = v186;
    v86 = v191;
    v85 = v192;
    v87 = (uint64_t)v180;
    v88 = v173;
    v89 = v172;
    if (v83)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v81 & 0xC000000000000001) == 0, v81);
      if ((v81 & 0xC000000000000001) != 0)
        v90 = (id)MEMORY[0x2494F62E4](0, v81);
      else
        v90 = *(id *)(v81 + 32);
      v91 = v90;
      OUTLINED_FUNCTION_36_0();
      type metadata accessor for GenericExperience();
      if (swift_dynamicCastClass())
      {
        v158[1] = v91;
        v172 = v78;
        v92 = GenericExperience.components.getter();
        v93 = *(_QWORD *)(v92 + 16);
        if (v93)
        {
          v94 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
          v158[0] = v92;
          v95 = v92 + v94;
          v183 = *(_QWORD *)(v89 + 72);
          v180 = *(void (**)(uint64_t, unint64_t, uint64_t))(v89 + 16);
          LODWORD(v173) = *MEMORY[0x24BE70C50];
          v96 = MEMORY[0x24BEE4AF8];
          v97 = v196[0];
          do
          {
            v180(v97, v95, v88);
            Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
            v98 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
            OUTLINED_FUNCTION_26_7(v87);
            if (v103)
            {
              outlined destroy of CustomStringConvertible?(v87, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
              v99 = 1;
            }
            else
            {
              v100 = *(_QWORD *)(v98 - 8);
              v101 = OUTLINED_FUNCTION_6_5();
              v102(v101);
              OUTLINED_FUNCTION_94_5();
              if (v103)
              {
                OUTLINED_FUNCTION_96(*(uint64_t (**)(uint64_t, uint64_t))(v100 + 96));
                v104 = v195;
                v105 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 32);
                v105(v86, v87, v195);
                v105(v193, (uint64_t)v86, v104);
                v99 = 0;
              }
              else
              {
                OUTLINED_FUNCTION_96(*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8));
                v99 = 1;
              }
              v85 = v192;
            }
            v106 = (uint64_t)v193;
            v107 = v195;
            __swift_storeEnumTagSinglePayload((uint64_t)v193, v99, 1, v195);
            (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v196[0], v88);
            OUTLINED_FUNCTION_26_7(v106);
            if (v103)
            {
              outlined destroy of CustomStringConvertible?(v106, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
            }
            else
            {
              v108 = v106;
              v109 = v181;
              OUTLINED_FUNCTION_128_2(v181, v108);
              v110 = v182;
              OUTLINED_FUNCTION_128_2(v182, v109);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                OUTLINED_FUNCTION_228();
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                v96 = v114;
              }
              v113 = *(_QWORD *)(v96 + 16);
              v112 = *(_QWORD *)(v96 + 24);
              if (v113 >= v112 >> 1)
              {
                OUTLINED_FUNCTION_130_1(v112);
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                v96 = v115;
              }
              *(_QWORD *)(v96 + 16) = v113 + 1;
              v107 = v195;
              OUTLINED_FUNCTION_128_2(v96+ ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80))+ *(_QWORD *)(v194 + 72) * v113, v110);
              v84 = v186;
              v85 = v192;
            }
            v95 += v183;
            --v93;
            v97 = v196[0];
            v86 = v191;
          }
          while (v93);
          OUTLINED_FUNCTION_49_1();
          v82 = v185;
        }
        else
        {
          swift_bridgeObjectRelease();
          v96 = MEMORY[0x24BEE4AF8];
          v107 = v195;
        }
        v116 = v169;
        v117 = v167;
        specialized Collection.first.getter(v96, v167);
        OUTLINED_FUNCTION_56_0();
        OUTLINED_FUNCTION_26_7(v117);
        v118 = v168;
        if (!v103)
        {
          OUTLINED_FUNCTION_89_11(v170, v117, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v194 + 32));
          OUTLINED_FUNCTION_118_2();
          static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)();
          if ((v118 & 1) == 0)
            goto LABEL_53;
          if (one-time initialization token for webDomains != -1)
            swift_once();
          v196[0] = static GlobalSearchClient.webDomains;
          swift_retain();
          swift_retain();
          OUTLINED_FUNCTION_145_1();
          OUTLINED_FUNCTION_75();
          swift_retain();
          OUTLINED_FUNCTION_145_1();
          OUTLINED_FUNCTION_15_5();
          OUTLINED_FUNCTION_5_9();
          OUTLINED_FUNCTION_0_11();
          OUTLINED_FUNCTION_12_9();
          OUTLINED_FUNCTION_1_11();
          v119 = v162;
          EntityProperty.wrappedValue.getter();
          OUTLINED_FUNCTION_69();
          OUTLINED_FUNCTION_13_8();
          OUTLINED_FUNCTION_3_6();
          OUTLINED_FUNCTION_75_0();
          v120 = v119;
          swift_release();
          swift_release();
          OUTLINED_FUNCTION_47_12();
          OUTLINED_FUNCTION_50();
          swift_release();
          OUTLINED_FUNCTION_68_9();
          OUTLINED_FUNCTION_106_7();
          v121 = v119;
          v122 = v184;
          if (__swift_getEnumTagSinglePayload(v121, 1, v184))
          {
            outlined destroy of CustomStringConvertible?(v120, &demangling cache variable for type metadata for SearchGlobalEntity?);
          }
          else
          {
            v125 = v160;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v160, v120, v122);
            outlined destroy of CustomStringConvertible?(v120, &demangling cache variable for type metadata for SearchGlobalEntity?);
            v126 = SearchGlobalEntity.domain.getter();
            v127 = v122;
            v123 = v126;
            v124 = v128;
            (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v125, v127);
            if (v124)
            {
LABEL_47:
              v129 = v166;
              specialized Set.contains(_:)(v123, v124, v196[0]);
              v131 = v130;
              v132 = OUTLINED_FUNCTION_36_0();
              v107 = v195;
              v116 = v169;
              if ((v131 & 1) != 0)
              {
                MEMORY[0x24BDAC7A8](v132);
                v158[-2] = v129;
                lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, (void (*)(uint64_t))MEMORY[0x24BE70018]);
                v133 = v161;
                static Message.with(_:)();
                (*(void (**)(uint64_t, uint64_t))(v165 + 40))(v129, v133);
                if (one-time initialization token for stextension != -1)
                  swift_once();
                v134 = OUTLINED_FUNCTION_13();
                __swift_project_value_buffer(v134, (uint64_t)static Logging.stextension);
                v135 = Logger.logObject.getter();
                v136 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v135, v136))
                {
                  v137 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
                  *(_WORD *)v137 = 0;
                  OUTLINED_FUNCTION_19_2(&dword_24315F000, v135, v136, "Stripped web search punchout button", v137);
                  specialized UnsafeMutablePointer.deallocate()();
                }

                v84 = v186;
                v107 = v195;
              }
LABEL_53:
              v138 = static GlobalSearchResponseProcessor.makeSFCard(card:)();
              if (!v138)
              {
                (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v170, v107);
                OUTLINED_FUNCTION_49_1();
                OUTLINED_FUNCTION_49_12();
                v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog));
                OUTLINED_FUNCTION_49((uint64_t)v82, v144, v145, v143);
                v146 = OUTLINED_FUNCTION_126_2();
                v148 = v116;
LABEL_61:
                v147(v146, v148);
                goto LABEL_5;
              }
              v139 = v138;
              v140 = v116;
              IntentDialog.init(stringLiteral:)();
              v141 = v163;
              SFCard.snippetPluginModel.getter(v163);
              v142 = type metadata accessor for RGPluginModel();
              if (__swift_getEnumTagSinglePayload((uint64_t)v141, 1, v142) == 1)
              {
                OUTLINED_FUNCTION_70_7();
                OUTLINED_FUNCTION_49_12();

                outlined destroy of CustomStringConvertible?((uint64_t)v141, &demangling cache variable for type metadata for RGPluginModel?);
              }
              else
              {
                lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type RGPluginModel and conformance RGPluginModel, (void (*)(uint64_t))MEMORY[0x24BE52530]);
                v149 = SnippetPluginModel.data.getter();
                v151 = v150;
                OUTLINED_FUNCTION_49_12();

                OUTLINED_FUNCTION_70_7();
                (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v142 - 8) + 8))(v141, v142);
                if (v151 >> 60 != 15)
                {
                  v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog));
                  v157 = (char *)v82 + *(int *)(v156 + 48);
                  *v82 = v149;
                  v82[1] = v151;
                  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v157, v171, v164);
                  v152 = (uint64_t)v82;
                  v153 = 0;
                  v154 = 1;
                  v155 = v156;
                  goto LABEL_60;
                }
              }
              (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v171, v164);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog));
              OUTLINED_FUNCTION_86_3();
LABEL_60:
              __swift_storeEnumTagSinglePayload(v152, v153, v154, v155);
              v146 = OUTLINED_FUNCTION_126_2();
              v148 = v140;
              goto LABEL_61;
            }
          }
          swift_bridgeObjectRelease();
          v123 = 0;
          v124 = 0xE000000000000000;
          goto LABEL_47;
        }
        OUTLINED_FUNCTION_49_1();
        OUTLINED_FUNCTION_49_12();
        outlined destroy of CustomStringConvertible?(v117, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
LABEL_39:
        v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog));
        v75 = (uint64_t)v82;
        goto LABEL_4;
      }

    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  outlined destroy of CustomStringConvertible?(v70, &demangling cache variable for type metadata for SearchGlobalEntity?);
LABEL_3:
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, dialog: IntentDialog));
  v75 = (uint64_t)v185;
LABEL_4:
  OUTLINED_FUNCTION_49(v75, v72, v73, v74);
LABEL_5:
  OUTLINED_FUNCTION_43_0();
}

void specialized static EntityCardBuilding.cardForEntities(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  OUTLINED_FUNCTION_18_2();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchAppEntity?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_59_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchAnswerEntity?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_70();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchSpotlightEntity?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchGlobalEntity?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_2_2();
  v29 = OUTLINED_FUNCTION_148_1();
  OUTLINED_FUNCTION_25_0(v29, (uint64_t)&a15);
  v74 = v30;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v32);
  v33 = *(_QWORD *)(v24 + 16);
  v34 = MEMORY[0x24BEE4AF8];
  if (v33)
  {
    swift_bridgeObjectRetain();
    v72 = MEMORY[0x24BEE4AF8];
    v35 = v24 + 56;
    v73 = v20;
    while (1)
    {
      v76 = v33;
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(_QWORD *)(v35 + 16);
      v75 = v35;
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_15_11();
      OUTLINED_FUNCTION_115_3();
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_13_8();
      OUTLINED_FUNCTION_11_5();
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_48_8();
      swift_release();
      OUTLINED_FUNCTION_50();
      (*(void (**)(uint64_t))(v74 + 88))(v36);
      OUTLINED_FUNCTION_94_5();
      if (v41)
        break;
      OUTLINED_FUNCTION_94_5();
      if (!v41)
      {
        OUTLINED_FUNCTION_94_5();
        if (v47)
        {
          OUTLINED_FUNCTION_75();
          OUTLINED_FUNCTION_73_7();
          OUTLINED_FUNCTION_119_3();
          OUTLINED_FUNCTION_7_12();
          OUTLINED_FUNCTION_15_5();
          OUTLINED_FUNCTION_0_11();
          OUTLINED_FUNCTION_18_8();
          OUTLINED_FUNCTION_7_12();
          OUTLINED_FUNCTION_5_9();
          OUTLINED_FUNCTION_2_8();
          OUTLINED_FUNCTION_1_11();
          OUTLINED_FUNCTION_118_2();
          EntityProperty.wrappedValue.getter();
          OUTLINED_FUNCTION_69();
          OUTLINED_FUNCTION_4_12();
          OUTLINED_FUNCTION_75_0();
          OUTLINED_FUNCTION_9_8();
          OUTLINED_FUNCTION_17_9();
          OUTLINED_FUNCTION_3_6();
          OUTLINED_FUNCTION_39_0();
          OUTLINED_FUNCTION_11_5();
          OUTLINED_FUNCTION_48_8();
          OUTLINED_FUNCTION_39_11();
          OUTLINED_FUNCTION_38_11();
          v48 = type metadata accessor for SearchSpotlightEntity(0);
          OUTLINED_FUNCTION_26_7(v37);
          if (v41)
          {
            v39 = v37;
            v40 = &demangling cache variable for type metadata for SearchSpotlightEntity?;
            goto LABEL_23;
          }
          *((_QWORD *)&v78 + 1) = v48;
          v53 = &lazy protocol witness table cache variable for type SearchSpotlightEntity and conformance SearchSpotlightEntity;
          v43 = type metadata accessor for SearchSpotlightEntity;
          v54 = (void (*)(uint64_t))type metadata accessor for SearchSpotlightEntity;
        }
        else
        {
          OUTLINED_FUNCTION_94_5();
          if (!v51)
          {
            v79 = 0;
            v77 = 0u;
            v78 = 0u;
            (*(void (**)())(v74 + 8))();
            goto LABEL_26;
          }
          OUTLINED_FUNCTION_75();
          OUTLINED_FUNCTION_73_7();
          OUTLINED_FUNCTION_119_3();
          OUTLINED_FUNCTION_7_12();
          OUTLINED_FUNCTION_15_5();
          OUTLINED_FUNCTION_7_12();
          OUTLINED_FUNCTION_18_8();
          OUTLINED_FUNCTION_0_11();
          OUTLINED_FUNCTION_5_9();
          OUTLINED_FUNCTION_2_8();
          OUTLINED_FUNCTION_1_11();
          OUTLINED_FUNCTION_118_2();
          EntityProperty.wrappedValue.getter();
          OUTLINED_FUNCTION_69();
          OUTLINED_FUNCTION_4_12();
          OUTLINED_FUNCTION_75_0();
          OUTLINED_FUNCTION_3_6();
          OUTLINED_FUNCTION_17_9();
          OUTLINED_FUNCTION_9_8();
          OUTLINED_FUNCTION_39_0();
          OUTLINED_FUNCTION_11_5();
          OUTLINED_FUNCTION_48_8();
          OUTLINED_FUNCTION_39_11();
          OUTLINED_FUNCTION_38_11();
          v52 = type metadata accessor for SearchAnswerEntity(0);
          OUTLINED_FUNCTION_26_7(v37);
          if (v41)
          {
            v39 = v37;
            v40 = &demangling cache variable for type metadata for SearchAnswerEntity?;
LABEL_23:
            outlined destroy of CustomStringConvertible?(v39, v40);
            v79 = 0;
            v77 = 0u;
            v78 = 0u;
LABEL_36:
            outlined destroy of CustomStringConvertible?((uint64_t)&v77, &demangling cache variable for type metadata for AppEntity?);
            v80 = 0u;
            v81 = 0u;
            v82 = 0;
            goto LABEL_37;
          }
          *((_QWORD *)&v78 + 1) = v52;
          v53 = &lazy protocol witness table cache variable for type SearchAnswerEntity and conformance SearchAnswerEntity;
          v43 = type metadata accessor for SearchAnswerEntity;
          v54 = (void (*)(uint64_t))type metadata accessor for SearchAnswerEntity;
        }
        lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(v53, v54);
        v45 = OUTLINED_FUNCTION_77_8(v55);
        v46 = v37;
        goto LABEL_25;
      }
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_73_7();
      OUTLINED_FUNCTION_119_3();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_0_11();
      OUTLINED_FUNCTION_15_5();
      OUTLINED_FUNCTION_18_8();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_2_8();
      OUTLINED_FUNCTION_1_11();
      OUTLINED_FUNCTION_118_2();
      EntityProperty.wrappedValue.getter();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_4_12();
      OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_11_5();
      OUTLINED_FUNCTION_48_8();
      OUTLINED_FUNCTION_39_11();
      OUTLINED_FUNCTION_38_11();
      v42 = type metadata accessor for SearchGlobalEntity();
      OUTLINED_FUNCTION_26_7(v37);
      if (v41)
      {
        v39 = v37;
        v40 = &demangling cache variable for type metadata for SearchGlobalEntity?;
        goto LABEL_23;
      }
      *((_QWORD *)&v78 + 1) = v42;
      lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchGlobalEntity and conformance SearchGlobalEntity, (void (*)(uint64_t))MEMORY[0x24BE6E2C0]);
      v50 = OUTLINED_FUNCTION_77_8(v49);
      OUTLINED_FUNCTION_89_11((uint64_t)v50, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32));
LABEL_26:
      if (!*((_QWORD *)&v78 + 1))
        goto LABEL_36;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppEntity);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CardRepresentable);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v82 = 0;
        v80 = 0u;
        v81 = 0u;
LABEL_37:
        outlined destroy of CustomStringConvertible?((uint64_t)&v80, &demangling cache variable for type metadata for CardRepresentable?);
        OUTLINED_FUNCTION_3_6();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_84_7();
        OUTLINED_FUNCTION_154_0();
        OUTLINED_FUNCTION_155_1();
        OUTLINED_FUNCTION_61_5();
        OUTLINED_FUNCTION_47_12();
        OUTLINED_FUNCTION_48_8();
        OUTLINED_FUNCTION_39_11();
LABEL_38:
        swift_release();
        goto LABEL_39;
      }
      v56 = *((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_37;
      v57 = v82;
      __swift_project_boxed_opaque_existential_1(&v80, *((uint64_t *)&v81 + 1));
      v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
      if (!v58)
      {
        OUTLINED_FUNCTION_68_9();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_106_7();
        OUTLINED_FUNCTION_84_7();
        OUTLINED_FUNCTION_154_0();
        OUTLINED_FUNCTION_155_1();
        OUTLINED_FUNCTION_61_5();
        OUTLINED_FUNCTION_47_12();
        OUTLINED_FUNCTION_48_8();
        OUTLINED_FUNCTION_39_11();
        goto LABEL_38;
      }
      outlined bridged method (ob) of @objc SFCard.cardSections.getter(v58);
      v60 = v59;
      OUTLINED_FUNCTION_68_9();
      OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_106_7();
      OUTLINED_FUNCTION_84_7();
      OUTLINED_FUNCTION_154_0();
      OUTLINED_FUNCTION_155_1();
      OUTLINED_FUNCTION_61_5();
      OUTLINED_FUNCTION_47_12();
      OUTLINED_FUNCTION_48_8();
      OUTLINED_FUNCTION_39_11();
      OUTLINED_FUNCTION_38_11();
      if (v60)
      {
        v61 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_228();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v72 = v65;
        }
        OUTLINED_FUNCTION_136_1();
        v63 = *(_QWORD *)(v62 + 16);
        if (v63 >= *(_QWORD *)(v62 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v72 = v66;
        }
        OUTLINED_FUNCTION_136_1();
        *(_QWORD *)(v64 + 16) = v63 + 1;
        *(_QWORD *)(v64 + 8 * v63 + 32) = v60;
        goto LABEL_40;
      }
LABEL_39:
      v61 = v76;
LABEL_40:
      v35 = v75 + 88;
      v33 = v61 - 1;
      if (!v33)
      {
        OUTLINED_FUNCTION_49_1();
        v67 = v72;
        v34 = MEMORY[0x24BEE4AF8];
        goto LABEL_45;
      }
    }
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_73_7();
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_18_8();
    OUTLINED_FUNCTION_12_9();
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_10_8();
    OUTLINED_FUNCTION_0_11();
    EntityProperty.wrappedValue.getter();
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_4_12();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_11_5();
    OUTLINED_FUNCTION_47_12();
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_39_11();
    OUTLINED_FUNCTION_38_11();
    v38 = type metadata accessor for SearchAppEntity(0);
    OUTLINED_FUNCTION_26_7(v73);
    if (v41)
    {
      v39 = v73;
      v40 = &demangling cache variable for type metadata for SearchAppEntity?;
      goto LABEL_23;
    }
    *((_QWORD *)&v78 + 1) = v38;
    v43 = type metadata accessor for SearchAppEntity;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchAppEntity and conformance SearchAppEntity, (void (*)(uint64_t))type metadata accessor for SearchAppEntity);
    v45 = OUTLINED_FUNCTION_77_8(v44);
    v46 = v73;
LABEL_25:
    outlined init with take of SearchAppEntity(v46, (uint64_t)v45, (void (*)(_QWORD))v43);
    goto LABEL_26;
  }
  v67 = MEMORY[0x24BEE4AF8];
LABEL_45:
  *(_QWORD *)&v80 = v34;
  v68 = *(_QWORD *)(v67 + 16);
  if (v68)
  {
    OUTLINED_FUNCTION_46_0();
    for (i = 0; i != v68; ++i)
    {
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)();
    }
    OUTLINED_FUNCTION_80_0();
  }
  OUTLINED_FUNCTION_80_0();
  objc_msgSend(objc_allocWithZone(MEMORY[0x24BE84D80]), sel_init);
  v70 = OUTLINED_FUNCTION_6_5();
  outlined bridged method (mbnn) of @objc SFCard.cardSections.setter(v70, v71);
  OUTLINED_FUNCTION_43_0();
}

uint64_t closure #1 in SearchTool.perform()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__dst;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD __src[19];
  _BYTE v37[24];
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  ValueMetadata *v43;
  unint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v45 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v45;
    v19 = lazy protocol witness table accessor for type SearchNLGEntity and conformance SearchNLGEntity();
    v4 = (uint64_t *)(a1 + 56);
    while (1)
    {
      v22 = v1;
      v23 = v3;
      v5 = *(v4 - 3);
      v6 = *(v4 - 1);
      v25 = *(v4 - 2);
      v26 = *v4;
      v7 = v4[1];
      v8 = v4[2];
      v9 = v4[3];
      v10 = v4[4];
      v11 = v4[5];
      v12 = v4[6];
      v13 = v4[7];
      v43 = &type metadata for SearchNLGEntity;
      v44 = v19;
      *(_QWORD *)&v42 = swift_allocObject();
      __dst = (void *)(v42 + 16);
      __src[0] = v5;
      __src[1] = v25;
      __src[2] = v6;
      __src[3] = v26;
      __src[4] = v7;
      __src[5] = v8;
      __src[6] = v9;
      v20 = v10;
      v21 = v9;
      __src[7] = v10;
      __src[8] = v11;
      v14 = v13;
      __src[9] = v12;
      __src[10] = v13;
      SearchEntity.representedEntity.getter();
      if (!v38)
        break;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppEntity);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchNLGEntityConvertible);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v29 = 0;
        v27 = 0u;
        v28 = 0u;
LABEL_9:
        outlined destroy of CustomStringConvertible?((uint64_t)&v27, &demangling cache variable for type metadata for SearchNLGEntityConvertible?);
        SearchNLGEntity.init()();
      }
      if (!*((_QWORD *)&v28 + 1))
        goto LABEL_9;
      outlined init with take of SageSearchClient(&v27, (uint64_t)v39);
      v16 = v40;
      v15 = v41;
      __swift_project_boxed_opaque_existential_1(v39, v40);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 8))(__src, v16, v15);
      *(_QWORD *)&v27 = v5;
      *((_QWORD *)&v27 + 1) = v25;
      *(_QWORD *)&v28 = v6;
      *((_QWORD *)&v28 + 1) = v26;
      v29 = v7;
      v30 = v8;
      v31 = v21;
      v32 = v20;
      v33 = v11;
      v34 = v12;
      v35 = v14;
      SearchEntity.representedEntity.getter();
      outlined assign with take of AppEntity?((uint64_t)v37, (uint64_t)&__src[14]);
      memcpy(__dst, __src, 0x98uLL);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      v3 = v23;
      v45 = v23;
      v17 = *(_QWORD *)(v23 + 16);
      if (v17 >= *(_QWORD *)(v23 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v3 = v45;
      }
      *(_QWORD *)(v3 + 16) = v17 + 1;
      outlined init with take of SageSearchClient(&v42, v3 + 40 * v17 + 32);
      v4 += 11;
      v1 = v22 - 1;
      if (v22 == 1)
        goto LABEL_13;
    }
    outlined destroy of CustomStringConvertible?((uint64_t)v37, &demangling cache variable for type metadata for AppEntity?);
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    goto LABEL_9;
  }
LABEL_13:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchEntity]);
  lazy protocol witness table accessor for type [SearchEntity] and conformance <A> [A]();
  static _DialogBuilderEntity.buildExpression(_:)();
  swift_bridgeObjectRelease();
  static _DialogBuilderEntity.buildBlock(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchTool(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AppIntent.perform() in conformance SearchToolControl;
  return SearchTool.perform()(a1);
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance SearchTool()
{
  lazy protocol witness table accessor for type SearchTool and conformance SearchTool();
  return static AppIntent.persistentIdentifier.getter();
}

void closure #2 in SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  char *v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v4 = type metadata accessor for BinaryDecodingOptions();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v20 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Searchfoundation_Card();
  v8 = (void (*)(uint64_t))MEMORY[0x24BE70018];
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v7);
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, v8);
  v12 = Message.serializedData(partial:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
  }
  else
  {
    v14 = v13;
    v18[1] = a2;
    v19 = v4;
    v15 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    v16 = v20;
    BinaryDecodingOptions.init()();
    Message.merge(serializedData:extensions:partial:options:)();
    outlined consume of Data._Representation(v15, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v19);
    outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for ExtensionMap?);
    v17 = Searchfoundation_Card.cardSections.getter();
    specialized Sequence.dropLast(_:)(1, v17);
    Searchfoundation_Card.cardSections.setter();
  }
}

void specialized Sequence.dropLast(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for Searchfoundation_CardSection();
  v30 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v28 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - v7;
  if (a1 < 0)
    goto LABEL_31;
  if (a1)
  {
    v32 = MEMORY[0x24BEE4AF8];
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    v10 = 0;
    v11 = 0;
    v12 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    v13 = a2 + v12;
    v14 = *(_QWORD *)(v30 + 72);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    v24 = v9 - 1;
    v15 = MEMORY[0x24BEE4AF8];
    v25 = (char *)&v23 - v7;
    v26 = a1;
    v27 = v12;
    v23 = a2;
    while (1)
    {
      v29(v8, v13, v4);
      v16 = *(_QWORD *)(v15 + 16);
      if ((uint64_t)v16 >= a1)
      {
        if (v11 >= v16)
          goto LABEL_29;
        v29(v28, v15 + v12 + v14 * v11, v4);
        v19 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v19 = v32;
        }
        v20 = *(_QWORD *)(v19 + 16);
        if (v20 >= *(_QWORD *)(v19 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v19 = v32;
        }
        *(_QWORD *)(v19 + 16) = v20 + 1;
        v12 = v27;
        (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v19 + v27 + v20 * v14, v28, v4);
        v32 = v19;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v31 = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          v15 = v22;
          v31 = v22;
        }
        v8 = v25;
        a1 = v26;
        if (v11 >= *(_QWORD *)(v15 + 16))
          goto LABEL_30;
        (*(void (**)(unint64_t, char *, uint64_t))(v30 + 40))(v15 + v12 + v14 * v11, v25, v4);
        v15 = v31;
        if ((uint64_t)++v11 >= a1)
        {
          a2 = v23;
          if (v24 == v10)
            goto LABEL_27;
          v11 = 0;
          goto LABEL_25;
        }
        a2 = v23;
      }
      else
      {
        v17 = swift_isUniquelyReferenced_nonNull_native();
        v31 = v15;
        if ((v17 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v15 = v31;
        }
        v18 = *(_QWORD *)(v15 + 16);
        if (v18 >= *(_QWORD *)(v15 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v15 = v31;
        }
        *(_QWORD *)(v15 + 16) = v18 + 1;
        v12 = v27;
        v8 = v25;
        (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v15 + v27 + v18 * v14, v25, v4);
        a1 = v26;
      }
      if (v24 == v10)
        goto LABEL_27;
LABEL_25:
      ++v10;
      v13 += v14;
      if (v10 >= *(_QWORD *)(a2 + 16))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        return;
      }
    }
  }
}

uint64_t partial apply for closure #1 in SearchTool.perform()()
{
  uint64_t v0;

  return closure #1 in SearchTool.perform()(*(_QWORD *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type [SearchEntity] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [SearchEntity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SearchEntity] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchEntity]);
    v2 = lazy protocol witness table accessor for type SearchEntity and conformance SearchEntity();
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BDB6630], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SearchEntity] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [SearchEntity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SearchEntity] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchEntity]);
    v2 = lazy protocol witness table accessor for type SearchEntity and conformance SearchEntity();
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BDB6638], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SearchEntity] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchEntity and conformance SearchEntity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity;
  if (!lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntity, &type metadata for SearchEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity);
  }
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void outlined bridged method (ob) of @objc SFCard.cardSections.getter(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_cardSections);

  if (v2)
  {
    type metadata accessor for SFCardSection();
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  OUTLINED_FUNCTION_5();
}

uint64_t outlined consume of SearchEntity?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void partial apply for closure #2 in SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in SearchTool()
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in SearchTool()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_24323D54C(__n128 *a1)
{
  key path getter for SearchTool.rewrittenQuery : SearchTool(a1);
}

uint64_t sub_24323D568(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchTool.rewrittenQuery : SearchTool(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchTool.rewrittenQuery.setter);
}

void sub_24323D594(__n128 *a1)
{
  key path getter for SearchTool.isFirstToolInvocation : SearchTool(a1);
}

void sub_24323D5B0(unsigned __int8 *a1, __n128 *a2)
{
  key path setter for SearchTool.isFirstToolInvocation : SearchTool(a1, a2);
}

void sub_24323D5CC(__n128 *a1)
{
  key path getter for SearchTool.isFirstToolInvocation : SearchTool(a1);
}

void sub_24323D5E8(unsigned __int8 *a1, __n128 *a2)
{
  key path setter for SearchTool.isFirstToolInvocation : SearchTool(a1, a2);
}

void sub_24323D604(__n128 *a1)
{
  key path getter for SearchTool.rewrittenQuery : SearchTool(a1);
}

uint64_t sub_24323D620(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchTool.rewrittenQuery : SearchTool(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchTool.lowConfidenceKnowledgeValue.setter);
}

uint64_t destroy for SearchTool()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for SearchTool(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SearchTool(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SearchTool(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SearchTool()
{
  return &type metadata for SearchTool;
}

void sub_24323D878()
{
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type ParameterSummaryWhenCondition<SearchTool, IntentParameterSummary<SearchTool>, IntentParameterSummary<SearchTool>> and conformance ParameterSummaryWhenCondition<A, B, C>, &demangling cache variable for type metadata for ParameterSummaryWhenCondition<SearchTool, IntentParameterSummary<SearchTool>, IntentParameterSummary<SearchTool>>);
}

void sub_24323D8A4()
{
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog> and conformance <> IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog>);
}

void sub_24323D8D0()
{
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog> and conformance <> IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog>);
}

void sub_24323D8FC()
{
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A](&lazy protocol witness table cache variable for type IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog>);
}

unint64_t type metadata accessor for SFCardSection()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SFCardSection;
  if (!lazy cache variable for type metadata for SFCardSection)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SFCardSection);
  }
  return result;
}

uint64_t sub_24323D964()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 152))
    __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  return swift_deallocObject();
}

void outlined init with take of SearchAppEntity(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  void (*v4)(uint64_t);

  a3(0);
  v3 = OUTLINED_FUNCTION_6_5();
  v4(v3);
  OUTLINED_FUNCTION_5();
}

uint64_t OUTLINED_FUNCTION_30_13()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_31_14()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_38_11()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_39_11()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_47_12()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_48_8()
{
  return swift_release();
}

void OUTLINED_FUNCTION_49_12()
{
  uint64_t v0;

}

__n128 OUTLINED_FUNCTION_53_12(__n128 *a1)
{
  return a1[2];
}

uint64_t OUTLINED_FUNCTION_54_10()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_55_5()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_61_5()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_66_10()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, *(_QWORD *)(v0 + 96));
}

uint64_t OUTLINED_FUNCTION_68_9()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_69_7()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_70_7()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 208) + 8))(*(_QWORD *)(v0 - 400), *(_QWORD *)(v0 - 200));
}

uint64_t OUTLINED_FUNCTION_73_7()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_75_9()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_76_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v3);
}

uint64_t *OUTLINED_FUNCTION_77_8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 - 176));
}

uint64_t OUTLINED_FUNCTION_84_7()
{
  return swift_release();
}

__n128 OUTLINED_FUNCTION_85_7(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

uint64_t OUTLINED_FUNCTION_87_6()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_89_11@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

BOOL OUTLINED_FUNCTION_91_4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_104_7(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, *(_QWORD *)(v1 + 144));
}

uint64_t OUTLINED_FUNCTION_105_8(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, *(_QWORD *)(v1 + 104));
}

uint64_t OUTLINED_FUNCTION_106_7()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_108_5()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_111_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_115_3()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_116_5()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_117_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1096);
}

uint64_t OUTLINED_FUNCTION_119_3()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_120_4()
{
  return swift_release();
}

_WORD *OUTLINED_FUNCTION_121_3(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_122_2()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 - 496));
}

uint64_t OUTLINED_FUNCTION_123_4()
{
  return swift_setDeallocating();
}

uint64_t OUTLINED_FUNCTION_124_5()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_125_2()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_126_2()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_127_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_128_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_129_2()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(v0, v1);
}

BOOL OUTLINED_FUNCTION_130_1@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_131_2()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_133_0()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_134_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_135_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v3);
}

id OUTLINED_FUNCTION_141_1()
{
  void *v0;

  return v0;
}

void OUTLINED_FUNCTION_142_1(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v1, (uint64_t *)(v2 - 144));
}

uint64_t OUTLINED_FUNCTION_144_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_145_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_146_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_148_1()
{
  return type metadata accessor for SearchResultType();
}

uint64_t OUTLINED_FUNCTION_151_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_154_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_155_1()
{
  return swift_release();
}

void specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  *a2 = v4;
  OUTLINED_FUNCTION_5();
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

BOOL specialized SearchService.supports(sources:)(uint64_t a1)
{
  _QWORD *v1;

  return (*v1 & a1) != 0;
}

BOOL specialized SearchService.supports(sources:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (a3 & a1) != 0;
}

Swift::Bool __swiftcall SearchService.supports(sources:)(OmniSearch::SearchSources sources)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)sources.rawValue;
  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  return (v4 & v2) != 0;
}

void specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))QUParse.CodingKeys.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))QUTokenInfo.CodingKeys.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SearchResultItem.CodingKeys.rawValue.getter);
}

void specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6563697665446E6FLL;
  else
    v3 = 0x726576726573;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6563697665446E6FLL;
  else
    v5 = 0x726576726573;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x800000024335AA80;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x6E776F6E6B6E75;
  if ((a2 & 1) != 0)
    v6 = 0x800000024335AA80;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x697274744173635FLL;
  else
    v3 = 1835365481;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xED00007365747562;
  if ((a2 & 1) != 0)
    v5 = 0x697274744173635FLL;
  else
    v5 = 1835365481;
  if ((a2 & 1) != 0)
    v6 = 0xED00007365747562;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_24323DF34(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_24323DF94 + 4 * byte_243353B14[a2]))(0xD000000000000011);
}

void sub_24323DF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 == 0xD000000000000011 && v2 == ((v1 - 32) | 0x8000000000000000))
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

void specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x6F69647541;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 1936744781;
    else
      v4 = 0x6E776F6E6B6E75;
    if (v3 == 1)
      v5 = 0xE400000000000000;
    else
      v5 = 0xE700000000000000;
  }
  else
  {
    v5 = 0xE500000000000000;
    v4 = 0x6F69647541;
  }
  if (a2)
  {
    if (a2 == 1)
      v2 = 1936744781;
    else
      v2 = 0x6E776F6E6B6E75;
    if (a2 == 1)
      v6 = 0xE400000000000000;
    else
      v6 = 0xE700000000000000;
  }
  else
  {
    v6 = 0xE500000000000000;
  }
  if (v4 == v2 && v5 == v6)
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x797469746E65;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6867696C746F7073;
    else
      v4 = 0x6C61626F6C67;
    if (v3 == 1)
      v5 = 0xE900000000000074;
    else
      v5 = 0xE600000000000000;
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x797469746E65;
  }
  if (a2)
  {
    if (a2 == 1)
      v2 = 0x6867696C746F7073;
    else
      v2 = 0x6C61626F6C67;
    if (a2 == 1)
      v6 = 0xE900000000000074;
    else
      v6 = 0xE600000000000000;
  }
  else
  {
    v6 = 0xE600000000000000;
  }
  if (v4 == v2 && v5 == v6)
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL specialized == infix<A>(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_24323E438(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24323E4A0 + 4 * byte_243353B1C[a2]))(0x6C61626F6C67);
}

void sub_24323E4A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 == 0x6C61626F6C67 && v1 == v2)
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

void specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3();
  v7 = v6;
  if (v5 == ((uint64_t (*)(uint64_t))a3)(a2) && v7 == v8)
    OUTLINED_FUNCTION_4_24();
  else
    OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_12();
}

void specialized OptionSet<>.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void specialized OptionSet<>.init()(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void specialized OptionSet.union(_:)(_DWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_39_3(a1);
}

uint64_t specialized OptionSet.union(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 | result;
  return result;
}

void specialized OptionSet.intersection(_:)(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_109(a1);
}

void specialized OptionSet.intersection(_:)(_DWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_39_3(a1);
}

void specialized OptionSet.symmetricDifference(_:)(_DWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_39_3(a1);
}

uint64_t specialized OptionSet.symmetricDifference(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 ^ result;
  return result;
}

void specialized OptionSet<>.remove(_:)(uint64_t a1@<X8>, int a2@<W0>)
{
  _DWORD *v2;

  if ((*v2 & a2) != 0)
    *v2 &= ~a2;
  OUTLINED_FUNCTION_13_20(a1);
}

uint64_t specialized OptionSet<>.remove(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & result;
  if (v3)
    *v2 &= ~result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

void specialized OptionSet<>.update(with:)(uint64_t a1@<X8>, int a2@<W0>)
{
  _DWORD *v2;

  *v2 |= a2;
  OUTLINED_FUNCTION_13_20(a1);
}

uint64_t specialized OptionSet<>.update(with:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  *v2 |= result;
  v4 = v3 & result;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v4 == 0;
  return result;
}

void specialized OptionSet<>.formIntersection(_:)(int a1)
{
  _DWORD *v1;

  OUTLINED_FUNCTION_11_15(*v1 & a1);
}

uint64_t specialized OptionSet<>.formSymmetricDifference(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

void specialized OptionSet<>.formSymmetricDifference(_:)(int a1)
{
  _DWORD *v1;

  OUTLINED_FUNCTION_11_15(*v1 ^ a1);
}

void specialized SetAlgebra.subtracting(_:)(_DWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_39_3(a1);
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 & ~result;
  return result;
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL specialized SetAlgebra.isSubset(of:)(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL specialized SetAlgebra.isDisjoint(with:)(int a1, int a2)
{
  return (a2 & a1) == 0;
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL specialized SetAlgebra.isSuperset(of:)(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

BOOL specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

BOOL specialized SetAlgebra.isEmpty.getter(int a1)
{
  return a1 == 0;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

void specialized SetAlgebra.subtract(_:)(int a1)
{
  _DWORD *v1;

  OUTLINED_FUNCTION_11_15(*v1 & ~a1);
}

void static SearchSources.allExceptWebIndex.getter(_QWORD *a1@<X8>)
{
  default argument 2 of GlobalSearchClient.search(content:entities:sources:)(&one-time initialization token for allExceptWebIndex, &static SearchSources.allExceptWebIndex, a1);
}

void SearchSources.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];

  v1 = *v0;
  lazy protocol witness table accessor for type SearchSources and conformance SearchSources();
  v2 = Dictionary.init(dictionaryLiteral:)();
  specialized _NativeDictionary.makeIterator()(v2, v22);
  v3 = v22[0];
  v4 = v22[1];
  v5 = v22[3];
  v6 = v22[4];
  v7 = (unint64_t)(v22[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_22;
    }
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v11 >= v7)
      goto LABEL_28;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    v13 = v5 + 1;
    if (!v12)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v7)
        goto LABEL_28;
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (!v12)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v7)
          goto LABEL_28;
        v12 = *(_QWORD *)(v4 + 8 * v13);
        if (!v12)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v7)
            goto LABEL_28;
          v12 = *(_QWORD *)(v4 + 8 * v13);
          if (!v12)
          {
            v13 = v5 + 5;
            if (v5 + 5 >= v7)
              goto LABEL_28;
            v12 = *(_QWORD *)(v4 + 8 * v13);
            if (!v12)
            {
              v13 = v5 + 6;
              if (v5 + 6 >= v7)
                goto LABEL_28;
              v12 = *(_QWORD *)(v4 + 8 * v13);
              if (!v12)
              {
                v14 = v5 + 7;
                while (v14 < v7)
                {
                  v12 = *(_QWORD *)(v4 + 8 * v14++);
                  if (v12)
                  {
                    v13 = v14 - 1;
                    goto LABEL_21;
                  }
                }
LABEL_28:
                swift_bridgeObjectRelease();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
                lazy protocol witness table accessor for type [String] and conformance [A]();
                BidirectionalCollection<>.joined(separator:)();
                OUTLINED_FUNCTION_6_1();
                return;
              }
            }
          }
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v5 = v13;
LABEL_22:
    if ((*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) & ~v1) == 0)
    {
      v15 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v10);
      v16 = v15[1];
      v21 = *v15;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_15_16();
        v8 = v19;
      }
      v17 = *(_QWORD *)(v8 + 16);
      if (v17 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        OUTLINED_FUNCTION_15_16();
        v8 = v20;
      }
      *(_QWORD *)(v8 + 16) = v17 + 1;
      v18 = v8 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v21;
      *(_QWORD *)(v18 + 40) = v16;
    }
  }
  __break(1u);
}

uint64_t SearchType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x797469746E65;
  if (a1 == 1)
    return 0x6867696C746F7073;
  return 0x6C61626F6C67;
}

unint64_t SearchEntityTypeIdentifier.debugDescription.getter(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  Swift::String v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;

  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6D614E6570797420;
  v9._object = (void *)0xEB00000000203A65;
  String.append(_:)(v9);
  if (a4)
  {
    v10 = a4;
  }
  else
  {
    a3 = 1701736302;
    v10 = (void *)0xE400000000000000;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = a3;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0xD00000000000001CLL;
}

BOOL protocol witness for SearchService.supports(sources:) in conformance LocalSearchService(uint64_t *a1)
{
  return specialized SearchService.supports(sources:)(*a1);
}

uint64_t SearchSources.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

OmniSearch::SearchSources __swiftcall SearchSources.init(rawValue:)(OmniSearch::SearchSources rawValue)
{
  OmniSearch::SearchSources *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SearchSources.local.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_109(a1);
}

void static SearchSources.global.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_109(a1);
}

void static SearchSources.entity.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_109(a1);
}

void static SearchSources.globalWebIndex.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_109(a1);
}

void one-time initialization function for all()
{
  static SearchSources.all = 11;
}

void static SearchSources.all.getter(_QWORD *a1@<X8>)
{
  default argument 2 of GlobalSearchClient.search(content:entities:sources:)(&one-time initialization token for all, &static SearchSources.all, a1);
}

void one-time initialization function for allExceptWebIndex()
{
  static SearchSources.allExceptWebIndex = 3;
}

OmniSearch::SearchSources protocol witness for OptionSet.init(rawValue:) in conformance SearchSources(Swift::Int *a1)
{
  return SearchSources.init(rawValue:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchSources()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance SearchSources(int a1)
{
  Swift::UInt *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchSources()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance SearchSources@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized OptionSet.union(_:)(*a1, *v2, a2);
}

void protocol witness for SetAlgebra.intersection(_:) in conformance SearchSources(_QWORD *a1@<X8>)
{
  specialized OptionSet.intersection(_:)(a1);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SearchSources@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized OptionSet.symmetricDifference(_:)(*a1, *v2, a2);
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance SearchSources(_QWORD *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance SearchSources@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.remove(_:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance SearchSources@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.update(with:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance SearchSources(_QWORD *a1)
{
  return specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance SearchSources(_QWORD *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SearchSources(uint64_t *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance SearchSources@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance SearchSources(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance SearchSources(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance SearchSources(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSuperset(of:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance SearchSources()
{
  uint64_t *v0;

  return specialized SetAlgebra.isEmpty.getter(*v0);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance SearchSources(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

OmniSearch::SearchSources protocol witness for RawRepresentable.init(rawValue:) in conformance SearchSources@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  OmniSearch::SearchSources result;

  result.rawValue = SearchSources.init(rawValue:)(*a1).rawValue;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchSources(uint64_t *a1@<X8>)
{
  *a1 = SearchSources.rawValue.getter();
  OUTLINED_FUNCTION_5();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchSources(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type SearchSources and conformance SearchSources()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchSources and conformance SearchSources;
  if (!lazy protocol witness table cache variable for type SearchSources and conformance SearchSources)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchSources, &type metadata for SearchSources);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSources and conformance SearchSources);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchSources and conformance SearchSources;
  if (!lazy protocol witness table cache variable for type SearchSources and conformance SearchSources)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchSources, &type metadata for SearchSources);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSources and conformance SearchSources);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchSources and conformance SearchSources;
  if (!lazy protocol witness table cache variable for type SearchSources and conformance SearchSources)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchSources, &type metadata for SearchSources);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSources and conformance SearchSources);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchSources and conformance SearchSources;
  if (!lazy protocol witness table cache variable for type SearchSources and conformance SearchSources)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchSources, &type metadata for SearchSources);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSources and conformance SearchSources);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchSources and conformance SearchSources;
  if (!lazy protocol witness table cache variable for type SearchSources and conformance SearchSources)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchSources, &type metadata for SearchSources);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSources and conformance SearchSources);
  }
  return result;
}

OmniSearch::SearchType_optional __swiftcall SearchType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SearchType.init(rawValue:), v2);
  OUTLINED_FUNCTION_6_1();
  if (v3 >= 3)
    return (OmniSearch::SearchType_optional)3;
  else
    return (OmniSearch::SearchType_optional)v3;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchType(unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchType()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchType(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchType()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::SearchType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchType@<W0>(Swift::String *a1@<X0>, OmniSearch::SearchType_optional *a2@<X8>)
{
  OmniSearch::SearchType_optional result;

  result.value = SearchType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchType(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *a1 = SearchType.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_5();
}

uint64_t SearchEntityTypeIdentifier.bundleId.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SearchEntityTypeIdentifier.typeName.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  return a3;
}

BOOL static SearchEntityTypeIdentifier.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SearchEntityTypeIdentifier.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t SearchEntityTypeIdentifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E65707974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SearchEntityTypeIdentifier.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int SearchEntityTypeIdentifier.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t SearchEntityTypeIdentifier.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656D614E65707974;
  else
    return 0x6449656C646E7562;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchEntityTypeIdentifier.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static SearchEntityTypeIdentifier.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchEntityTypeIdentifier.CodingKeys()
{
  char *v0;

  return SearchEntityTypeIdentifier.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SearchEntityTypeIdentifier.CodingKeys(uint64_t a1)
{
  char *v1;

  SearchEntityTypeIdentifier.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchEntityTypeIdentifier.CodingKeys()
{
  char *v0;

  return SearchEntityTypeIdentifier.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SearchEntityTypeIdentifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SearchEntityTypeIdentifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SearchEntityTypeIdentifier.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SearchEntityTypeIdentifier.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchEntityTypeIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchEntityTypeIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SearchEntityTypeIdentifier.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v12[0] = a4;
  v12[1] = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchEntityTypeIdentifier.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t SearchEntityTypeIdentifier.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SearchEntityTypeIdentifier.CodingKeys>);
  MEMORY[0x24BDAC7A8](v3);
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    OUTLINED_FUNCTION_10_15();
  }
  else
  {
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_54_6();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_10_15();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96_0();
  }
  return v4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SearchEntityTypeIdentifier@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = SearchEntityTypeIdentifier.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SearchEntityTypeIdentifier(_QWORD *a1)
{
  uint64_t *v1;

  return SearchEntityTypeIdentifier.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for SearchService.supports(sources:) in conformance AppEntitySearchService(uint64_t *a1)
{
  unsigned __int8 *v1;

  return specialized SearchService.supports(sources:)(*a1, *v1, *((_QWORD *)v1 + 1));
}

unint64_t lazy protocol witness table accessor for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntityTypeIdentifier.CodingKeys, &unk_2513CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntityTypeIdentifier.CodingKeys, &unk_2513CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntityTypeIdentifier.CodingKeys, &unk_2513CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchEntityTypeIdentifier.CodingKeys, &unk_2513CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier.CodingKeys and conformance SearchEntityTypeIdentifier.CodingKeys);
  }
  return result;
}

void type metadata accessor for SearchSources()
{
  OUTLINED_FUNCTION_103_0();
}

uint64_t storeEnumTagSinglePayload for SearchType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24323F554 + 4 * byte_243353B25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24323F588 + 4 * byte_243353B20[v4]))();
}

uint64_t sub_24323F588(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24323F590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24323F598);
  return result;
}

uint64_t sub_24323F5A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24323F5ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24323F5B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24323F5B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SearchType()
{
  OUTLINED_FUNCTION_103_0();
}

void type metadata accessor for SearchEntityTypeIdentifier()
{
  OUTLINED_FUNCTION_103_0();
}

uint64_t dispatch thunk of SearchService.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SearchService.supportedSearchSources.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SearchService.prewarm()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SearchService.search(query:sources:allowedTypes:searchOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a9 + 32) + *(_QWORD *)(a9 + 32));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v17;
  *v17 = v9;
  v17[1] = dispatch thunk of SearchService.search(query:sources:allowedTypes:searchOptions:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of SearchService.search(query:sources:allowedTypes:searchOptions:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of SearchService.supports(sources:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t storeEnumTagSinglePayload for SearchEntityTypeIdentifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24323F750 + 4 * byte_243353B2F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24323F784 + 4 * byte_243353B2A[v4]))();
}

uint64_t sub_24323F784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24323F78C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24323F794);
  return result;
}

uint64_t sub_24323F7A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24323F7A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24323F7AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24323F7B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SearchEntityTypeIdentifier.CodingKeys()
{
  return &unk_2513CD8C8;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_7_23(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_15()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

void OUTLINED_FUNCTION_11_15(int a1@<W8>)
{
  _DWORD *v1;

  *v1 = a1;
}

void OUTLINED_FUNCTION_13_20(uint64_t a1@<X8>)
{
  int v1;
  char v2;

  *(_DWORD *)a1 = v1;
  *(_BYTE *)(a1 + 4) = v2;
}

void OUTLINED_FUNCTION_15_16()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_16_21()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t static UniversalEmbeddingModelClient.shared()()
{
  id v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_service);
  type metadata accessor for UniversalEmbeddingModelClient();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t type metadata accessor for UniversalEmbeddingModelClient()
{
  return objc_opt_self();
}

void *UniversalEmbeddingModelClient.madService.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t UniversalEmbeddingModelClient.embed(items:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_42();
}

uint64_t UniversalEmbeddingModelClient.embed(items:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE642C8]), sel_init);
  *(_QWORD *)(v0 + 72) = v2;
  objc_msgSend(v2, sel_setVersion_, 4);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v0 + 80) = v3;
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_24334DB70;
    *(_QWORD *)(v4 + 32) = v2;
    v12 = v4;
    specialized Array._endMutation()();
    *(_QWORD *)(v0 + 88) = v12;
    v3;
    v5 = v2;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v6;
    *v6 = v0;
    v6[1] = UniversalEmbeddingModelClient.embed(items:);
    return MADService.perform(_:text:identifier:)(v12, *(_QWORD *)(v0 + 56), 0, 0);
  }
  else
  {
    if (one-time initialization token for search != -1)
      swift_once();
    v8 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v8, (uint64_t)static Logging.search);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_24315F000, v9, v10, "Couldn't fetch embedding due to error: madService is nil", v11, 2u);
      specialized UnsafeMutablePointer.deallocate()();
    }

    return OUTLINED_FUNCTION_0_22(0, *(uint64_t (**)(void))(v0 + 8));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void **)(v0 + 80);

  v3 = *(_QWORD *)(v0 + 104);
  if (!*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRelease();
    v3 = 0;
  }
  return OUTLINED_FUNCTION_41(v3, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  swift_bridgeObjectRelease();
  if (one-time initialization token for search != -1)
    swift_once();
  v1 = *(void **)(v0 + 112);
  v2 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v2, (uint64_t)static Logging.search);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 80);
  if (v7)
  {
    v9 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v14 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue();
    v10 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    *(_QWORD *)(v0 + 48) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_46_1();
    OUTLINED_FUNCTION_46_1();
    _os_log_impl(&dword_24315F000, v5, v6, "Couldn't fetch embedding due to error: %s", v9, 0xCu);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }

  OUTLINED_FUNCTION_46_1();
  OUTLINED_FUNCTION_46_1();
  OUTLINED_FUNCTION_46_1();

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t MADService.perform(_:text:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_getObjectType();
  return swift_task_switch();
}

uint64_t MADService.perform(_:text:identifier:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v3 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 64);
    v13 = *(_OWORD *)(v0 + 40);
    v4 = swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v4;
    v5 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v4 + 16) = v3;
    *(_OWORD *)(v4 + 24) = v5;
    *(_OWORD *)(v4 + 40) = v13;
    *(_QWORD *)(v4 + 56) = v2;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Float]]);
    *v6 = v0;
    v6[1] = MADService.perform(_:text:identifier:);
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  if (one-time initialization token for search != -1)
    swift_once();
  v9 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v9, (uint64_t)static Logging.search);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_24315F000, v10, v11, "No requests to perform", v12, 2u);
    specialized UnsafeMutablePointer.deallocate()();
  }

  return OUTLINED_FUNCTION_0_22(MEMORY[0x24BEE4AF8], *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return OUTLINED_FUNCTION_42();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t UniversalEmbeddingModelClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t UniversalEmbeddingModelClient.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

BOOL static MADService.EmbeddingError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MADService.EmbeddingError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int MADService.EmbeddingError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MADService.EmbeddingError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static MADService.EmbeddingError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MADService.EmbeddingError()
{
  char *v0;

  return MADService.EmbeddingError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MADService.EmbeddingError(uint64_t a1)
{
  char *v1;

  MADService.EmbeddingError.hash(into:)(a1, *v1);
}

float static MADService.convertFromUInt16BitPatternToFloat32(UInt16BitPattern:)(__int16 a1)
{
  float result;

  _H0 = a1;
  __asm { FCVT            S0, H0 }
  return result;
}

void closure #1 in MADService.perform(_:text:identifier:)(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSArray v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  Class v19;
  uint64_t v20;
  Class isa;
  uint64_t v22;
  id v23;
  _QWORD aBlock[6];

  v22 = a7;
  v23 = a2;
  v20 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >> 62)
  {
    type metadata accessor for SFCardSection(0, &lazy cache variable for type metadata for MADTextRequest);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SFCardSection(0, &lazy cache variable for type metadata for MADTextRequest);
  }
  type metadata accessor for SFCardSection(0, &lazy cache variable for type metadata for MADTextRequest);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a6)
    a6 = (void *)MEMORY[0x2494F5BB8](v20, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v17 + v15, v13, v10);
  *(_QWORD *)(v17 + v16) = a3;
  *(_QWORD *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = v22;
  aBlock[4] = partial apply for closure #1 in closure #1 in MADService.perform(_:text:identifier:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int32, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_4;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  v19 = isa;
  objc_msgSend(v23, sel_performRequests_text_identifier_completionHandler_, isa, v14.super.isa, a6, v18);
  _Block_release(v18);

}

void closure #1 in closure #1 in MADService.perform(_:text:identifier:)(int a1, id a2, uint64_t a3, unint64_t a4)
{
  id v5;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  if (a2)
  {
    v5 = a2;
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
    CheckedContinuation.resume(throwing:)();
    return;
  }
  if (!(a4 >> 62))
  {
    v7 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_6;
LABEL_27:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MADService.EmbeddingError and conformance MADService.EmbeddingError();
    swift_allocError();
    *v35 = 0;
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_27;
LABEL_6:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a4 & 0xC000000000000001) == 0, a4);
  if ((a4 & 0xC000000000000001) != 0)
    v8 = (id)MEMORY[0x2494F62E4](0, a4);
  else
    v8 = *(id *)(a4 + 32);
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v9, sel_error);
  if (!v10)
  {
    v12 = outlined bridged method (pb) of @objc MADTextEmbeddingRequest.embeddingResults.getter(v9);
    if (!v12)
    {
      lazy protocol witness table accessor for type MADService.EmbeddingError and conformance MADService.EmbeddingError();
      swift_allocError();
      *v34 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
      CheckedContinuation.resume(throwing:)();
      goto LABEL_31;
    }
    v13 = v12;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v14)
      {
LABEL_13:
        v36 = a3;
        v37 = v14;
        v38 = v13;
        if ((v13 & 0xC000000000000001) != 0)
          v15 = (id)MEMORY[0x2494F62E4](0, v13);
        else
          v15 = *(id *)(v13 + 32);
        v16 = v15;
        if (one-time initialization token for search != -1)
          swift_once();
        v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logging.search);
        v18 = v16;
        v19 = Logger.logObject.getter();
        v20 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = swift_slowAlloc();
          *(_DWORD *)v21 = 134217984;
          v22 = objc_msgSend(v18, MEMORY[0x1F4382EE0], v9, v36, v37, v38);
          v23 = objc_msgSend(v22, sel_type);

          *(_QWORD *)(v21 + 4) = v23;
          _os_log_impl(&dword_24315F000, v19, v20, "Embedding type = %ld", (uint8_t *)v21, 0xCu);
          MEMORY[0x2494F6D70](v21, -1, -1);
        }
        else
        {

          v19 = v18;
        }

        v24 = v18;
        v25 = Logger.logObject.getter();
        v26 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = swift_slowAlloc();
          *(_DWORD *)v27 = 134217984;
          v28 = -[NSObject embedding](v24, sel_embedding);
          v29 = objc_msgSend(v28, sel_count);

          *(_QWORD *)(v27 + 4) = v29;
          _os_log_impl(&dword_24315F000, v25, v26, "Embedding count = %ld", (uint8_t *)v27, 0xCu);
          MEMORY[0x2494F6D70](v27, -1, -1);
        }
        else
        {

          v25 = v24;
        }

        v30 = -[NSObject embedding](v24, sel_embedding);
        v31 = objc_msgSend(v30, sel_data);

        static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v33 = v32;

        __asm { BR              X9 }
      }
    }
    else
    {
      v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v14)
        goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
    CheckedContinuation.resume(returning:)();
    goto LABEL_31;
  }
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
  CheckedContinuation.resume(throwing:)();

LABEL_31:
}

char *closure #1 in closure #1 in closure #1 in MADService.perform(_:text:identifier:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    result = closure #1 in closure #1 in closure #1 in closure #1 in MADService.perform(_:text:identifier:)(result, (a2 - (uint64_t)result) / 2, &v5);
    v4 = v5;
  }
  else
  {
    v4 = MEMORY[0x24BEE4AF8];
  }
  *a3 = v4;
  return result;
}

char *closure #1 in closure #1 in closure #1 in closure #1 in MADService.perform(_:text:identifier:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v15;
  uint64_t v16;

  v4 = MEMORY[0x24BEE4AF8];
  if (!a2)
  {
LABEL_7:
    *a3 = v4;
    return result;
  }
  v5 = a2;
  v6 = result;
  v15 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v4 = v15;
    v7 = *(_QWORD *)(v15 + 16);
    do
    {
      _H8 = *(_WORD *)v6;
      v16 = v4;
      v9 = *(_QWORD *)(v4 + 24);
      if (v7 >= v9 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v7 + 1, 1);
        v4 = v16;
      }
      __asm { FCVT            S0, H8 }
      *(_QWORD *)(v4 + 16) = v7 + 1;
      *(_DWORD *)(v4 + 4 * v7 + 32) = _S0;
      v6 += 2;
      ++v7;
      --v5;
    }
    while (v5);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned Int32, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void partial apply for closure #1 in MADService.perform(_:text:identifier:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MADService.perform(_:text:identifier:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56));
}

unint64_t lazy protocol witness table accessor for type MADService.EmbeddingError and conformance MADService.EmbeddingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError;
  if (!lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for MADService.EmbeddingError, &type metadata for MADService.EmbeddingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError;
  if (!lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for MADService.EmbeddingError, &type metadata for MADService.EmbeddingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError);
  }
  return result;
}

uint64_t method lookup function for UniversalEmbeddingModelClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UniversalEmbeddingModelClient.embed(items:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 96) + *(_QWORD *)(*(_QWORD *)v1 + 96));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of UniversalEmbeddingModelClient.embed(items:);
  return v6(a1);
}

{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_41(a1, *(uint64_t (**)(void))(v4 + 8));
}

uint64_t storeEnumTagSinglePayload for MADService.EmbeddingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_243240E6C + 4 * byte_243353F95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_243240EA0 + 4 * byte_243353F90[v4]))();
}

uint64_t sub_243240EA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243240EA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243240EB0);
  return result;
}

uint64_t sub_243240EBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243240EC4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_243240EC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243240ED0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MADService.EmbeddingError()
{
  return &type metadata for MADService.EmbeddingError;
}

uint64_t sub_243240EEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in MADService.perform(_:text:identifier:)(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in closure #1 in MADService.perform(_:text:identifier:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v6 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v6 += a1 - result;
  }
  v7 = __OFSUB__(a2, a1);
  v8 = a2 - a1;
  if (v7)
  {
    __break(1u);
    goto LABEL_15;
  }
  v9 = __DataStorage._length.getter();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = &v6[v10];
  if (v6)
    v12 = (uint64_t)v11;
  else
    v12 = 0;
  result = (uint64_t)closure #1 in closure #1 in closure #1 in MADService.perform(_:text:identifier:)(v6, v12, &v13);
  if (!v2)
    return v13;
  return result;
}

uint64_t outlined bridged method (pb) of @objc MADTextEmbeddingRequest.embeddingResults.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_embeddingResults);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for SFCardSection(0, &lazy cache variable for type metadata for MADTextEmbeddingResult);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_0_22(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t dispatch thunk of CardRepresentable.card.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

BOOL static NetworkServiceError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void NetworkServiceError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int NetworkServiceError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NetworkServiceError(char *a1, char *a2)
{
  return static NetworkServiceError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkServiceError()
{
  unsigned __int8 *v0;

  return NetworkServiceError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NetworkServiceError(uint64_t a1)
{
  unsigned __int8 *v1;

  NetworkServiceError.hash(into:)(a1, *v1);
}

uint64_t storeEnumTagSinglePayload for NetworkServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_243241280 + 4 * byte_2433540C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2432412B4 + 4 * asc_2433540C0[v4]))();
}

uint64_t sub_2432412B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432412BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432412C4);
  return result;
}

uint64_t sub_2432412D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432412D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2432412DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432412E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkServiceError()
{
  return &type metadata for NetworkServiceError;
}

void *BundleId.notes.unsafeMutableAddressor()
{
  return &static BundleId.notes;
}

void *BundleId.localFiles.unsafeMutableAddressor()
{
  return &static BundleId.localFiles;
}

void *BundleId.mail.unsafeMutableAddressor()
{
  return &static BundleId.mail;
}

void *BundleId.messages.unsafeMutableAddressor()
{
  return &static BundleId.messages;
}

void *BundleId.wallet.unsafeMutableAddressor()
{
  return &static BundleId.wallet;
}

void *BundleId.photos.unsafeMutableAddressor()
{
  return &static BundleId.photos;
}

void *BundleId.calendar.unsafeMutableAddressor()
{
  return &static BundleId.calendar;
}

void *BundleId.iCloudFiles.unsafeMutableAddressor()
{
  return &static BundleId.iCloudFiles;
}

void *BundleId.contacts.unsafeMutableAddressor()
{
  return &static BundleId.contacts;
}

unint64_t static BundleId.contacts.getter()
{
  return OUTLINED_FUNCTION_30_11(27);
}

unint64_t static BundleId.calendar.getter()
{
  return OUTLINED_FUNCTION_30_11(19);
}

unint64_t static BundleId.mail.getter()
{
  return OUTLINED_FUNCTION_30_11(20);
}

unint64_t static BundleId.notes.getter()
{
  return OUTLINED_FUNCTION_30_11(21);
}

unint64_t static BundleId.photos.getter()
{
  return OUTLINED_FUNCTION_30_11(25);
}

unint64_t static BundleId.iCloudFiles.getter()
{
  return OUTLINED_FUNCTION_30_11(43);
}

unint64_t static BundleId.localFiles.getter()
{
  return OUTLINED_FUNCTION_30_11(35);
}

unint64_t static BundleId.messages.getter()
{
  return OUTLINED_FUNCTION_30_11(19);
}

unint64_t static BundleId.wallet.getter()
{
  return OUTLINED_FUNCTION_30_11(18);
}

void *BundleId.omniSearch.unsafeMutableAddressor()
{
  return &static BundleId.omniSearch;
}

unint64_t static BundleId.omniSearch.getter()
{
  return OUTLINED_FUNCTION_30_11(20);
}

void *BundleId.spotlightEvents.unsafeMutableAddressor()
{
  return &static BundleId.spotlightEvents;
}

unint64_t static BundleId.spotlightEvents.getter()
{
  return OUTLINED_FUNCTION_30_11(26);
}

ValueMetadata *type metadata accessor for BundleId()
{
  return &type metadata for BundleId;
}

__C::_NSRange_optional __swiftcall String.nsRangeWithCompleteTokenMatch(of:)(Swift::String of)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  Swift::Bool v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __C::_NSRange_optional result;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = String.standardizeQuotations()();
  v6 = v5;
  v28 = String.standardizeQuotations()();
  v8 = v7;
  if (one-time initialization token for search != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logging.search);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v31 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v6, &v31);
    v29 = v13;
    OUTLINED_FUNCTION_2_19();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v8, &v31);
    v29 = v14;
    OUTLINED_FUNCTION_2_19();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24315F000, v10, v11, "Checking to see if standardized string: %s, contains standardized key: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  v15 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v15 = v4 & 0xFFFFFFFFFFFFLL;
  v27 = 4 * v15;
  v16 = 15;
  while (v27 > v16 >> 14)
  {
    v31 = v4;
    v32 = v6;
    v29 = v28;
    v30 = v8;
    v17 = v8;
    v18 = type metadata accessor for Locale();
    __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v18);
    lazy protocol witness table accessor for type String and conformance String();
    v19 = StringProtocol.range<A>(of:options:range:locale:)();
    v16 = v20;
    v22 = v21;
    outlined destroy of Locale?((uint64_t)v3);
    if ((v22 & 1) != 0 || (v19 ^ v16) < 0x4000)
      break;
    v23 = String.distance(from:to:)();
    v8 = v17;
    if ((String.isCompleteToken(index:key:)(v23, v28, v17, v4, v6) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v31 = v19;
      v32 = v16;
      v29 = v4;
      v30 = v6;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<String.Index>);
      lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
      v24 = _NSRange.init<A, B>(_:in:)();
      v26 = 0;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = 0;
  v25 = 0;
  v26 = 1;
LABEL_14:
  result.value.length = v25;
  result.value.location = v24;
  result.is_nil = v26;
  return result;
}

Swift::String_optional __swiftcall String.substringFromNSRange(_:)(__C::_NSRange a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  Range<>.init(_:in:)();
  if ((v1 & 1) != 0)
  {
    v3 = 0;
    v5 = 0;
  }
  else
  {
    v2 = String.subscript.getter();
    v3 = MEMORY[0x2494F5C48](v2);
    v5 = v4;
    swift_bridgeObjectRelease();
  }
  v6 = v3;
  v7 = v5;
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

uint64_t String.oms_trimCharacters(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  specialized Sequence.compactMap<A>(_:)(a1);
  v6 = v5;
  swift_bridgeObjectRetain();
  specialized RangeReplaceableCollection.filter(_:)(a2, a3, v6);
  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Bool __swiftcall String.containsHTMLTag()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = v1;
  v3 = v0;
  v4 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v5 = @nonobjc NSRegularExpression.init(pattern:options:)(0xD000000000000026, 0x800000024335D520, 0);
  String.text.getter();
  v6 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  v7 = (void *)MEMORY[0x2494F5BB8](v3, v2);
  v8 = objc_msgSend(v5, sel_firstMatchInString_options_range_, v7, 0, 0, v6);

  if (!v8)
    return 0;

  return 1;
}

uint64_t String.nilIfEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v3 = a1;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t String.standardizeQuotations()()
{
  uint64_t v0;

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t String.isCompleteToken(index:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  Swift::String_optional *v8;
  uint64_t result;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t inited;
  uint64_t v14;
  Swift::String_optional *v15;
  uint64_t countAndFlagsBits;
  uint64_t object;

  swift_bridgeObjectRetain();
  v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a4, a5);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_2433541A0;
  *(_QWORD *)(result + 32) = 32;
  *(_QWORD *)(result + 40) = 0xE100000000000000;
  *(_QWORD *)(result + 48) = 39;
  *(_QWORD *)(result + 56) = 0xE100000000000000;
  *(_QWORD *)(result + 64) = 34;
  *(_QWORD *)(result + 72) = 0xE100000000000000;
  *(_QWORD *)(result + 80) = 92;
  *(_QWORD *)(result + 88) = 0xE100000000000000;
  *(_QWORD *)(result + 96) = 47;
  *(_QWORD *)(result + 104) = 0xE100000000000000;
  v10 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    if (v10 >= v8[1].value._countAndFlagsBits)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v11 = specialized Sequence<>.contains(_:)(v8[v10 + 2].value._countAndFlagsBits, (uint64_t)v8[v10 + 2].value._object, (_QWORD *)result);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    if ((v11 & 1) == 0)
    {
      swift_release();
      v12 = 0;
      return v12 & 1;
    }
  }
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2433541B0;
  *(_QWORD *)(inited + 32) = 32;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 48) = 46;
  *(_QWORD *)(inited + 56) = 0xE100000000000000;
  *(_QWORD *)(inited + 64) = 44;
  *(_QWORD *)(inited + 72) = 0xE100000000000000;
  *(_QWORD *)(inited + 80) = 39;
  *(_QWORD *)(inited + 88) = 0xE100000000000000;
  *(_QWORD *)(inited + 96) = 34;
  *(_QWORD *)(inited + 104) = 0xE100000000000000;
  *(_QWORD *)(inited + 112) = 58;
  *(_QWORD *)(inited + 120) = 0xE100000000000000;
  *(_QWORD *)(inited + 128) = 59;
  *(_QWORD *)(inited + 136) = 0xE100000000000000;
  *(_QWORD *)(inited + 144) = 33;
  *(_QWORD *)(inited + 152) = 0xE100000000000000;
  *(_QWORD *)(inited + 160) = 63;
  *(_QWORD *)(inited + 168) = 0xE100000000000000;
  *(_QWORD *)(inited + 176) = 92;
  *(_QWORD *)(inited + 184) = 0xE100000000000000;
  *(_QWORD *)(inited + 192) = 47;
  *(_QWORD *)(inited + 200) = 0xE100000000000000;
  result = String.count.getter();
  v14 = a1 + result;
  if (__OFADD__(a1, result))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v14 >= v8[1].value._countAndFlagsBits)
  {
    swift_release();
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    v12 = 1;
    return v12 & 1;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = &v8[v14];
    countAndFlagsBits = v15[2].value._countAndFlagsBits;
    object = (uint64_t)v15[2].value._object;
    swift_bridgeObjectRetain();
    swift_release();
    v12 = specialized Sequence<>.contains(_:)(countAndFlagsBits, object, (_QWORD *)inited);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return v12 & 1;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<String.Index>);
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE1BC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>);
  }
  return result;
}

Swift::String_optional *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::String_optional *v6;
  _QWORD *v7;
  uint64_t v9;

  v4 = String.count.getter();
  if (!v4)
    return (Swift::String_optional *)MEMORY[0x24BEE4AF8];
  v5 = v4;
  v6 = (Swift::String_optional *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0);
  swift_bridgeObjectRetain();
  v7 = specialized Sequence._copySequenceContents(initializing:)(&v9, v6 + 2, v5, a1, a2);
  swift_bridgeObjectRelease();
  if (v7 != (_QWORD *)v5)
  {
    __break(1u);
    return (Swift::String_optional *)MEMORY[0x24BEE4AF8];
  }
  return v6;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, Swift::String_optional *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String_optional *v8;
  uint64_t v9;
  Swift::String_optional v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = result;
  v6 = HIBYTE(a5) & 0xF;
  v11 = a4;
  v12 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v6 = a4 & 0xFFFFFFFFFFFFLL;
  v13 = v6;
  if (!a2)
  {
    v7 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (_QWORD *)v7;
  }
  v7 = a3;
  if (!a3)
    goto LABEL_14;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = a2;
    v9 = 0;
    while (1)
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
        break;
      ++v9;
      *v8++ = v10;
      if (v7 == v9)
      {
        a4 = v11;
        a5 = v12;
        goto LABEL_13;
      }
    }
    a4 = v11;
    a5 = v12;
    v7 = v9;
LABEL_13:
    v6 = v13;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 16);
  return v4;
}

uint64_t OUTLINED_FUNCTION_2_19()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

OmniSearch::SpotlightIndexRequest __swiftcall SpotlightIndexRequest.init(userQuery:bundleIds:targetMatches:)(Swift::String userQuery, Swift::OpaquePointer_optional bundleIds, Swift::Int_optional targetMatches)
{
  Swift::Int v3;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Bool v6;
  uint64_t v7;
  void *v8;
  Swift::Int v9;
  Swift::Bool v10;
  OmniSearch::SpotlightIndexRequest result;

  v3 = *(_QWORD *)&bundleIds.is_nil;
  object = userQuery._object;
  countAndFlagsBits = userQuery._countAndFlagsBits;
  v6 = targetMatches.value & 1;
  swift_bridgeObjectRelease();
  v7 = countAndFlagsBits;
  v8 = object;
  v9 = v3;
  v10 = v6;
  result.targetMatches.value = v9;
  result.userQuery._object = v8;
  result.userQuery._countAndFlagsBits = v7;
  result.targetMatches.is_nil = v10;
  return result;
}

uint64_t SpotlightIndexRequest.userQuery.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SpotlightIndexRequest.userQuery.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SpotlightIndexRequest.userQuery.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t SpotlightIndexRequest.targetMatches.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t SpotlightIndexRequest.targetMatches.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*SpotlightIndexRequest.targetMatches.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

Swift::String __swiftcall SpotlightIndexRequest.description()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String result;
  _QWORD v10[2];

  v2 = v1;
  v3 = v0;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  strcpy((char *)v10, "User Query: ");
  BYTE5(v10[1]) = 0;
  HIWORD(v10[1]) = -5120;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v3;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x800000024335DA60;
  v5._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v10[0];
  v8 = (void *)v10[1];
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t SpotlightIndexRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x7265755172657375 && a2 == 0xE900000000000079;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614D746567726174 && a2 == 0xED00007365686374)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SpotlightIndexRequest.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x614D746567726174;
  else
    return 0x7265755172657375;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpotlightIndexRequest.CodingKeys()
{
  char *v0;

  return SpotlightIndexRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpotlightIndexRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SpotlightIndexRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpotlightIndexRequest.CodingKeys()
{
  lazy protocol witness table accessor for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpotlightIndexRequest.CodingKeys()
{
  lazy protocol witness table accessor for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SpotlightIndexRequest.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  int v13;
  char v14;
  char v15;

  v13 = a5;
  v12[1] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpotlightIndexRequest.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v14 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t lazy protocol witness table accessor for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SpotlightIndexRequest.CodingKeys, &unk_2513CDE90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SpotlightIndexRequest.CodingKeys, &unk_2513CDE90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SpotlightIndexRequest.CodingKeys, &unk_2513CDE90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SpotlightIndexRequest.CodingKeys, &unk_2513CDE90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys);
  }
  return result;
}

uint64_t SpotlightIndexRequest.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpotlightIndexRequest.CodingKeys>);
  MEMORY[0x24BDAC7A8](v3);
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpotlightIndexRequest.CodingKeys and conformance SpotlightIndexRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_17_13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    OUTLINED_FUNCTION_47();
  }
  return v4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpotlightIndexRequest@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = SpotlightIndexRequest.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpotlightIndexRequest(_QWORD *a1)
{
  uint64_t v1;

  return SpotlightIndexRequest.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t initializeWithCopy for SpotlightIndexRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SpotlightIndexRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SpotlightIndexRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpotlightIndexRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotlightIndexRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotlightIndexRequest()
{
  return &type metadata for SpotlightIndexRequest;
}

uint64_t storeEnumTagSinglePayload for SpotlightIndexRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_243242AF0 + 4 * byte_2433541D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_243242B24 + 4 * byte_2433541D0[v4]))();
}

uint64_t sub_243242B24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243242B2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243242B34);
  return result;
}

uint64_t sub_243242B40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243242B48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_243242B4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243242B54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SpotlightIndexRequest.CodingKeys()
{
  return &unk_2513CDE90;
}

void GlobalItem.init(id:domain:url:text:parsecEntity:lowConfidenceKnowledge:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppEntity?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_2_2();
  v16 = v15 - v14;
  v17 = OUTLINED_FUNCTION_22_14();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_32_4();
  v19 = (int *)OUTLINED_FUNCTION_0_23();
  v20 = (uint64_t)a9 + v19[5];
  type metadata accessor for URL();
  v21 = OUTLINED_FUNCTION_20_13();
  __swift_storeEnumTagSinglePayload(v21, v22, v23, v24);
  v25 = (_QWORD *)((char *)a9 + v19[6]);
  *v25 = 0;
  v25[1] = 0;
  v38 = (char *)a9 + v19[8];
  *(_OWORD *)v38 = xmmword_24334E610;
  v26 = v19[9];
  *((_BYTE *)a9 + v26) = 0;
  *a9 = a1;
  a9[1] = a2;
  outlined assign with copy of URL?(a5, v20);
  swift_bridgeObjectRelease();
  *v25 = a6;
  v25[1] = a7;
  v27 = (_QWORD *)((char *)a9 + v19[7]);
  *v27 = a3;
  v27[1] = a4;
  *((_BYTE *)a9 + v26) = a10;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_AppEntity?(a8, v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppEntity?);
  if (__swift_getEnumTagSinglePayload(v16, 1, v17) == 1)
  {
    outlined destroy of CustomStringConvertible?(v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppEntity?);
    if (one-time initialization token for search != -1)
      swift_once();
    v28 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v28, (uint64_t)static Logging.search);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_24315F000, v29, v30, "No Parsec AppEntity attached with this item", v31, 2u);
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_19_16(v32, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppEntity?);
    OUTLINED_FUNCTION_26_11(v33, &demangling cache variable for type metadata for URL?);
    v36 = 0;
    v37 = 0xF000000000000000;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v10, v16, v17);
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppEntity and conformance Apple_Parsec_Siri_V2alpha_AppEntity, (uint64_t (*)(uint64_t))MEMORY[0x24BE70440], MEMORY[0x24BE70420]);
    v36 = Message.serializedData(partial:)();
    v37 = v34;
    OUTLINED_FUNCTION_19_16(v36, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppEntity?);
    OUTLINED_FUNCTION_26_11(v35, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_14_12();
  }
  outlined consume of Data?(*(_QWORD *)v38, *((_QWORD *)v38 + 1));
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  OUTLINED_FUNCTION_43_0();
}

uint64_t type metadata accessor for GlobalItem()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GlobalItem;
  if (!type metadata singleton initialization cache for GlobalItem)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined assign with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void GlobalItem.id.getter()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void GlobalItem.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*GlobalItem.id.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void GlobalItem.url.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_23();
  outlined init with copy of Apple_Parsec_Siri_V2alpha_AppEntity?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t GlobalItem.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_0_23() + 20);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*GlobalItem.url.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_23();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void GlobalItem.text.getter()
{
  OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void GlobalItem.text.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_129_0();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*GlobalItem.text.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_23();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void GlobalItem.domain.getter()
{
  OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void GlobalItem.domain.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_129_0();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*GlobalItem.domain.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_23();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void GlobalItem.parsecEntityData.getter()
{
  uint64_t v0;
  unint64_t v1;

  OUTLINED_FUNCTION_0_23();
  v0 = OUTLINED_FUNCTION_6_5();
  outlined copy of Data?(v0, v1);
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void GlobalItem.parsecEntityData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(OUTLINED_FUNCTION_0_23() + 32);
  outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*GlobalItem.parsecEntityData.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_23();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t GlobalItem.lowConfidenceKnowledge.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_0_23() + 36));
}

uint64_t GlobalItem.lowConfidenceKnowledge.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_0_23();
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*GlobalItem.lowConfidenceKnowledge.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_23();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t GlobalItem.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;

  _StringGuts.grow(_:)(45);
  v1 = OUTLINED_FUNCTION_0_23();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x800000024335DA80;
  v3._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v3);
  v4 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  if (v4[1])
  {
    v5 = *v4;
    v6 = (void *)v4[1];
  }
  else
  {
    v6 = (void *)0xE300000000000000;
    v5 = 7104878;
  }
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v2;
}

void GlobalItem.getParsecEntity()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);

  type metadata accessor for BinaryDecodingOptions();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_2_2();
  if (*(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_0_23() + 32) + 8) >> 60 == 15)
  {
    if (one-time initialization token for search != -1)
      swift_once();
    v4 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v4, (uint64_t)static Logging.search);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_24315F000, v5, v6, "SageExperience data is nil", v7, 2u);
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_22_14();
    v8 = OUTLINED_FUNCTION_20_13();
    __swift_storeEnumTagSinglePayload(v8, v9, v10, v11);
  }
  else
  {
    v12 = OUTLINED_FUNCTION_22_14();
    v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BE70440];
    OUTLINED_FUNCTION_27_14();
    OUTLINED_FUNCTION_27_14();
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppEntity and conformance Apple_Parsec_Siri_V2alpha_AppEntity, v13, MEMORY[0x24BE70420]);
    Message.init(serializedData:extensions:partial:options:)();
    OUTLINED_FUNCTION_13_21();
    __swift_storeEnumTagSinglePayload(a1, 0, 1, v12);
    OUTLINED_FUNCTION_43_0();
  }
}

uint64_t GlobalItem.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 1954047348 && a2 == 0xE400000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000010 && a2 == 0x800000024335DAB0
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD000000000000016 && a2 == 0x800000024335D390)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v9 & 1) != 0)
            return 5;
          else
            return 6;
        }
      }
    }
  }
}

uint64_t GlobalItem.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2432439D8 + 4 * byte_243354370[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_2432439D8()
{
  return 7107189;
}

uint64_t sub_2432439E8()
{
  return 1954047348;
}

uint64_t sub_2432439F8()
{
  return 0x6E69616D6F64;
}

unint64_t sub_243243A0C()
{
  return 0xD000000000000010;
}

unint64_t sub_243243A28()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GlobalItem.CodingKeys()
{
  unsigned __int8 *v0;

  return GlobalItem.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GlobalItem.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GlobalItem.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GlobalItem.CodingKeys()
{
  lazy protocol witness table accessor for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GlobalItem.CodingKeys()
{
  lazy protocol witness table accessor for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GlobalItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GlobalItem.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_2_2();
  v7 = v6 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_10_16();
  if (!v1)
  {
    type metadata accessor for GlobalItem();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    OUTLINED_FUNCTION_65_3();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_10_16();
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_65_3();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t GlobalItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v24;
  int *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_32_4();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GlobalItem.CodingKeys>);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_2_2();
  v5 = (int *)type metadata accessor for GlobalItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_2_2();
  v9 = (uint64_t *)(v8 - v7);
  v11 = v8 - v7 + *(int *)(v10 + 20);
  v12 = type metadata accessor for URL();
  __swift_storeEnumTagSinglePayload(v11, 1, 1, v12);
  v13 = (uint64_t *)((char *)v9 + v5[6]);
  *v13 = 0;
  v13[1] = 0;
  v28 = v13;
  v26 = (char *)v9 + v5[8];
  *(_OWORD *)v26 = xmmword_24334E610;
  v25 = v5;
  v14 = v5[9];
  *((_BYTE *)v9 + v14) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v27)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of CustomStringConvertible?(v11, &demangling cache variable for type metadata for URL?);
    swift_bridgeObjectRelease();
    return outlined consume of Data?(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
  }
  else
  {
    *v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[1] = v15;
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of URL?(v2, v11);
    LOBYTE(v29) = 2;
    v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v17 = v16;
    swift_bridgeObjectRelease();
    *v28 = v22;
    v28[1] = v17;
    OUTLINED_FUNCTION_23_17(3);
    v18 = KeyedDecodingContainer.decode(_:forKey:)();
    v19 = (uint64_t *)((char *)v9 + v25[7]);
    *v19 = v18;
    v19[1] = v20;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined consume of Data?(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
    *(_QWORD *)v26 = v29;
    *((_QWORD *)v26 + 1) = v30;
    OUTLINED_FUNCTION_23_17(5);
    LOBYTE(v17) = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_12_19();
    *((_BYTE *)v9 + v14) = v17 & 1;
    outlined init with copy of GlobalItem((uint64_t)v9, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of GlobalItem((uint64_t)v9);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance GlobalItem@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GlobalItem.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GlobalItem(_QWORD *a1)
{
  return GlobalItem.encode(to:)(a1);
}

void outlined init with copy of Apple_Parsec_Siri_V2alpha_AppEntity?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(a3);
  v3 = OUTLINED_FUNCTION_6_5();
  v4(v3);
  OUTLINED_FUNCTION_5();
}

unint64_t lazy protocol witness table accessor for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for GlobalItem.CodingKeys, &unk_2513CE010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for GlobalItem.CodingKeys, &unk_2513CE010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for GlobalItem.CodingKeys, &unk_2513CE010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for GlobalItem.CodingKeys, &unk_2513CE010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlobalItem.CodingKeys and conformance GlobalItem.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of GlobalItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GlobalItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GlobalItem(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GlobalItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void instantiation function for generic protocol witness table for GlobalItem(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type GlobalItem and conformance GlobalItem, (uint64_t (*)(uint64_t))type metadata accessor for GlobalItem, (uint64_t)&protocol conformance descriptor for GlobalItem);
  a1[1] = v2;
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type GlobalItem and conformance GlobalItem, (uint64_t (*)(uint64_t))type metadata accessor for GlobalItem, (uint64_t)&protocol conformance descriptor for GlobalItem);
  a1[2] = v3;
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type GlobalItem and conformance GlobalItem, (uint64_t (*)(uint64_t))type metadata accessor for GlobalItem, (uint64_t)&protocol conformance descriptor for GlobalItem);
  a1[3] = v4;
}

_QWORD *initializeBufferWithCopyOfBuffer for GlobalItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (_QWORD *)((char *)v4 + v15);
    v20 = (_QWORD *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[8];
    v23 = (char *)v4 + v22;
    v24 = (_QWORD *)((char *)a2 + v22);
    v25 = *(_QWORD *)((char *)a2 + v22 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v26 = *v24;
      outlined copy of Data._Representation(*v24, v25);
      *(_QWORD *)v23 = v26;
      *((_QWORD *)v23 + 1) = v25;
    }
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v4;
}

uint64_t destroy for GlobalItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return outlined consume of Data._Representation(*v7, v8);
  return result;
}

_QWORD *initializeWithCopy for GlobalItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = *(_QWORD *)((char *)a2 + v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v24 = *v22;
    outlined copy of Data._Representation(*v22, v23);
    *(_QWORD *)v21 = v24;
    *((_QWORD *)v21 + 1) = v23;
  }
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithCopy for GlobalItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = *(_QWORD *)((char *)a2 + v20 + 8);
  if (*(_QWORD *)((char *)a1 + v20 + 8) >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      v25 = *v22;
      outlined copy of Data._Representation(v25, v23);
      v26 = *v21;
      v27 = v21[1];
      *v21 = v25;
      v21[1] = v23;
      outlined consume of Data._Representation(v26, v27);
      goto LABEL_14;
    }
    outlined destroy of Data((uint64_t)v21);
    goto LABEL_12;
  }
  if (v23 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v21 = *(_OWORD *)v22;
    goto LABEL_14;
  }
  v24 = *v22;
  outlined copy of Data._Representation(v24, v23);
  *v21 = v24;
  v21[1] = v23;
LABEL_14:
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *initializeWithTake for GlobalItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  return a1;
}

_QWORD *assignWithTake for GlobalItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v28 = *(_QWORD *)((char *)a1 + v25 + 8);
  if (v28 >> 60 != 15)
  {
    v29 = v27[1];
    if (v29 >> 60 != 15)
    {
      v30 = *v26;
      *v26 = *v27;
      v26[1] = v29;
      outlined consume of Data._Representation(v30, v28);
      goto LABEL_12;
    }
    outlined destroy of Data((uint64_t)v26);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_12:
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for GlobalItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243244A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GlobalItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243244AAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    __swift_storeEnumTagSinglePayload(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

void type metadata completion function for GlobalItem()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t getEnumTagSinglePayload for GlobalItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GlobalItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_243244C7C + 4 * byte_24335437B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_243244CB0 + 4 * byte_243354376[v4]))();
}

uint64_t sub_243244CB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243244CB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243244CC0);
  return result;
}

uint64_t sub_243244CCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243244CD4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_243244CD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243244CE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GlobalItem.CodingKeys()
{
  return &unk_2513CE010;
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  return type metadata accessor for GlobalItem();
}

uint64_t OUTLINED_FUNCTION_10_16()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_11_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_12_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_13_21()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_14_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void OUTLINED_FUNCTION_19_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of CustomStringConvertible?(*(_QWORD *)(v2 - 112), a2);
}

uint64_t OUTLINED_FUNCTION_20_13()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_22_14()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_AppEntity();
}

uint64_t OUTLINED_FUNCTION_23_17@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 96) = a1;
  return v1 - 96;
}

void OUTLINED_FUNCTION_26_11(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of CustomStringConvertible?(*(_QWORD *)(v2 - 104), a2);
}

uint64_t OUTLINED_FUNCTION_27_14()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys11AnyHashableVypG_SS_SSts5NeverOTg505_ss11de37VypS2SIgnnoo_AB3key_yp5valuetSS_SSts5F99OIegnrzr_TR061_s10OmniSearch0B6ResultV18toJSONIntermediateAC0E0VyFSS_SSts11aB10V_yptXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE __dst[72];
  _BYTE __src[72];
  _BYTE v22[40];
  _BYTE v23[40];
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v24 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  result = specialized Dictionary.startIndex.getter(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v6 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v7 = a1 + 64;
      while ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
      {
        if (v5 != *(_DWORD *)(a1 + 36))
          goto LABEL_20;
        v15 = v5;
        outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v6, (uint64_t)v22);
        outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)v23);
        outlined init with copy of AnyHashable((uint64_t)v22, (uint64_t)__src);
        outlined init with copy of Any((uint64_t)v23, (uint64_t)&__src[40]);
        memcpy(__dst, __src, sizeof(__dst));
        outlined destroy of MobileSMSDocument?((uint64_t)v22, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
        v8 = AnyHashable.description.getter();
        v17 = v9;
        v18 = v8;
        outlined init with copy of Any((uint64_t)&__dst[40], (uint64_t)v19);
        v10 = String.init<A>(describing:)();
        v16 = v11;
        outlined destroy of MobileSMSDocument?((uint64_t)__dst, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
        v2 = v24;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
          v2 = v24;
        }
        v13 = *(_QWORD *)(v2 + 16);
        v12 = *(_QWORD *)(v2 + 24);
        if (v13 >= v12 >> 1)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1);
          v2 = v24;
        }
        *(_QWORD *)(v2 + 16) = v13 + 1;
        v14 = (_QWORD *)(v2 + 32 * v13);
        v14[4] = v18;
        v14[5] = v17;
        v14[6] = v10;
        v14[7] = v16;
        if ((uint64_t)v6 >= -(-1 << *(_BYTE *)(a1 + 32)))
          goto LABEL_21;
        v7 = a1 + 64;
        if ((*(_QWORD *)(a1 + 64 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
          goto LABEL_22;
        if (v15 != *(_DWORD *)(a1 + 36))
          goto LABEL_23;
        result = _HashTable.occupiedBucket(after:)();
        if (!--v1)
          return v2;
        v6 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v5 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall SearchResultItem.isAnswer()()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  Swift::Bool result;
  uint64_t v6;

  type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_40_8(v1, v2, v6);
  v3 = OUTLINED_FUNCTION_67_6();
  v4 = type metadata accessor for HotelReservation;
  switch((int)v3)
  {
    case 9:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
      v3 = OUTLINED_FUNCTION_44_13();
      v4 = type metadata accessor for FlightReservation;
      break;
    case 10:
      break;
    case 11:
      v4 = type metadata accessor for RestaurantReservation;
      break;
    case 15:
      v4 = type metadata accessor for Answer;
      break;
    default:
      v4 = type metadata accessor for SearchResultItem;
      break;
  }
  OUTLINED_FUNCTION_81_4(v3, v4);
  OUTLINED_FUNCTION_12();
  return result;
}

uint64_t type metadata accessor for SearchResultItem(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for SearchResultItem);
}

uint64_t SearchResult.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v0;
  v3 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_0_3();
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_66_11();
  v7 = type metadata accessor for SearchResult.JSONIntermediate(v6);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_91_2();
  type metadata accessor for JSONEncoder.OutputFormatting();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_2();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  v10 = *(void **)(v0 + *(int *)(v3 + 20));
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v11, sel_attributeSet);
    v13 = objc_msgSend(v12, sel_attributeDictionary);

    v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys11AnyHashableVypG_SS_SSts5NeverOTg505_ss11de37VypS2SIgnnoo_AB3key_yp5valuetSS_SSts5F99OIegnrzr_TR061_s10OmniSearch0B6ResultV18toJSONIntermediateAC0E0VyFSS_SSts11aB10V_yptXEfU_Tf3nnnpf_nTf1cn_n(v14);
    swift_bridgeObjectRelease();
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v15);
    v17 = v16;

  }
  else
  {
    v17 = 0;
  }
  outlined init with copy of SearchResult(v2, v1, type metadata accessor for SearchResultItem);
  *(_QWORD *)(v1 + *(int *)(v7 + 20)) = v17;
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResult.JSONIntermediate and conformance SearchResult.JSONIntermediate, (void (*)(uint64_t))type metadata accessor for SearchResult.JSONIntermediate);
  v18 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v20 = v19;
  _s10OmniSearch0B6ResultVWOhTm_1(v1, type metadata accessor for SearchResult.JSONIntermediate);
  static String.Encoding.utf8.getter();
  v21 = String.init(data:encoding:)();
  v23 = v22;
  outlined consume of Data._Representation(v18, v20);
  if (!v23)
  {
    OUTLINED_FUNCTION_51_9(v2, v24, type metadata accessor for SearchResult);
    v21 = String.init<A>(describing:)();
  }
  swift_release();
  return v21;
}

void SearchResult.init(_:csItem:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = type metadata accessor for SearchResult(0);
  v7 = (_QWORD *)(a3 + *(int *)(v6 + 24));
  *v7 = 0;
  v7[1] = 0;
  outlined init with take of SearchResult(a1, a3, type metadata accessor for SearchResultItem);
  *(_QWORD *)(a3 + *(int *)(v6 + 20)) = a2;
  OUTLINED_FUNCTION_12();
}

void SearchResultItem.associatedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;

  type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_2_2();
  outlined init with copy of SearchResult(v0, v3 - v2, v4);
  v5 = (char *)sub_243245680 + 4 * byte_2433545D7[OUTLINED_FUNCTION_95_7()];
  __asm { BR              X10 }
}

void sub_243245680()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v0[3] = type metadata accessor for EmailDocument(0);
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type EmailDocument and conformance EmailDocument, (void (*)(uint64_t))type metadata accessor for EmailDocument);
  v0[4] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0);
  outlined init with take of SearchResult(v1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for EmailDocument);
  OUTLINED_FUNCTION_12();
}

void SearchResultItem.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[5];

  OUTLINED_FUNCTION_68_10();
  OUTLINED_FUNCTION_41_10(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0], v10[1], v10[2], v10[3]);
  OUTLINED_FUNCTION_72_7(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 32));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_7_3();
}

void SearchResultItem.type.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;

  type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_51_9(v0, v2, v3);
  v4 = (char *)sub_243245A08 + 4 * byte_2433545E7[OUTLINED_FUNCTION_95_7()];
  __asm { BR              X10 }
}

void sub_243245A08()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_148_1();
  v1 = OUTLINED_FUNCTION_3_16(v0);
  OUTLINED_FUNCTION_81_4(v1, type metadata accessor for EmailDocument);
  OUTLINED_FUNCTION_12();
}

uint64_t SearchResultItem.experience.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v10;

  type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_71_10();
  v3 = OUTLINED_FUNCTION_95_7();
  if (v3 == 9)
  {
    v6 = *(_QWORD *)&v2[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]))
                               + 48)];
    if (v6 >> 62)
    {
      OUTLINED_FUNCTION_58_9();
      v5 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_36_0();
      if (!v5)
        goto LABEL_6;
    }
    else
    {
      v5 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v5)
        goto LABEL_6;
    }
    OUTLINED_FUNCTION_62_8();
    OUTLINED_FUNCTION_109_5();
  }
  if (v3 != 12)
  {
    v5 = 0;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)&v2[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]))
                             + 48)];
  if (v4 >> 62)
  {
    OUTLINED_FUNCTION_58_9();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_36_0();
    if (v5)
    {
LABEL_5:
      OUTLINED_FUNCTION_62_8();
      OUTLINED_FUNCTION_109_5();
    }
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_5;
  }
LABEL_6:
  OUTLINED_FUNCTION_36_0();
LABEL_12:
  v7 = OUTLINED_FUNCTION_6_5();
  _s10OmniSearch0B6ResultVWOhTm_1(v7, v8);
  return v5;
}

void sub_243245D84()
{
  JUMPOUT(0x243245D08);
}

Swift::Bool __swiftcall SearchResultItem.isInstantAnswer()()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  Swift::Bool result;
  uint64_t v6;

  type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_40_8(v1, v2, v6);
  v3 = OUTLINED_FUNCTION_67_6();
  switch((_DWORD)v3)
  {
    case 0xB:
      v4 = type metadata accessor for RestaurantReservation;
      break;
    case 0xA:
      v4 = type metadata accessor for HotelReservation;
      break;
    case 9:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
      v3 = OUTLINED_FUNCTION_44_13();
      v4 = type metadata accessor for FlightReservation;
      break;
    default:
      v4 = type metadata accessor for SearchResultItem;
      break;
  }
  OUTLINED_FUNCTION_81_4(v3, v4);
  OUTLINED_FUNCTION_12();
  return result;
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v3 = v1;
  v2 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, 1, &v3);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_59_0();
}

uint64_t SearchResult.item.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of SearchResultItem(a1, v1);
}

uint64_t (*SearchResult.item.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void SearchResult.csItem.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + *(int *)(type metadata accessor for SearchResult(0) + 20));
  OUTLINED_FUNCTION_5();
}

uint64_t SearchResult.hasAssociatedAppEntity.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);

  v2 = v1;
  v3 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_44_11();
  v6 = *(void **)(v1 + *(int *)(v5 + 20));
  if (!v6 || (v7 = v6, CSSearchableItem.associatedAppEntityId.getter(), v9 = v8, v7, !v9))
  {
    OUTLINED_FUNCTION_71_10();
    v17 = OUTLINED_FUNCTION_6_5();
LABEL_8:
    _s10OmniSearch0B6ResultVWOhTm_1(v17, v18);
    return 0;
  }
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_51_9(v2, v10, type metadata accessor for SearchResult);
  v11 = *(void **)(v0 + *(int *)(v3 + 20));
  if (!v11)
  {
    v18 = type metadata accessor for SearchResult;
    v17 = v0;
    goto LABEL_8;
  }
  v12 = v11;
  CSSearchableItem.associatedAppEntityTypeId.getter();
  v14 = v13;

  OUTLINED_FUNCTION_81_4(v15, type metadata accessor for SearchResult);
  if (v14)
  {
    OUTLINED_FUNCTION_36_0();
    return 1;
  }
  return 0;
}

uint64_t SearchResult.associatedQuery.getter()
{
  type metadata accessor for SearchResult(0);
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_6_5();
}

void SearchResult.associatedQuery.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SearchResult(0) + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*SearchResult.associatedQuery.modify())(_QWORD)
{
  type metadata accessor for SearchResult(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t static SearchResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  char v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;

  v4 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_15();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v39 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v39 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v39 - v15;
  specialized static SearchItem.== infix(_:_:)();
  v18 = v17;
  OUTLINED_FUNCTION_90_3(a1, (uint64_t)v16);
  OUTLINED_FUNCTION_90_3(a2, (uint64_t)v14);
  if ((v18 & 1) == 0)
    goto LABEL_21;
  v19 = *(int *)(v4 + 20);
  v20 = *(void **)&v16[v19];
  if (v20)
  {
    v21 = objc_msgSend(v20, sel_uniqueIdentifier);
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    v24 = *(void **)&v14[*(int *)(v4 + 20)];
    if (!v24)
    {
      if (!v23)
        goto LABEL_26;
      goto LABEL_20;
    }
    v40 = v11;
  }
  else
  {
    v24 = *(void **)&v14[v19];
    if (!v24)
    {
LABEL_26:
      OUTLINED_FUNCTION_33_4((uint64_t)v16);
      OUTLINED_FUNCTION_33_4((uint64_t)v14);
      OUTLINED_FUNCTION_90_3(a1, (uint64_t)v11);
      OUTLINED_FUNCTION_90_3(a2, (uint64_t)v8);
      goto LABEL_27;
    }
    v39 = 0;
    v40 = v11;
    v23 = 0;
  }
  v25 = objc_msgSend(v24, sel_uniqueIdentifier, v39);
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  if (!v23)
  {
    v11 = v40;
    if (!v28)
      goto LABEL_26;
    goto LABEL_20;
  }
  if (!v28)
  {
    v11 = v40;
LABEL_20:
    OUTLINED_FUNCTION_47_2();
LABEL_21:
    OUTLINED_FUNCTION_69_8((uint64_t)v16);
    OUTLINED_FUNCTION_69_8((uint64_t)v14);
    outlined init with copy of SearchResult(a1, (uint64_t)v11, type metadata accessor for SearchResult);
    outlined init with copy of SearchResult(a2, (uint64_t)v8, type metadata accessor for SearchResult);
    goto LABEL_22;
  }
  if (v39 == v26 && v23 == v28)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_2();
    v11 = v40;
    goto LABEL_26;
  }
  v30 = OUTLINED_FUNCTION_18_7();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_33_4((uint64_t)v16);
  OUTLINED_FUNCTION_33_4((uint64_t)v14);
  v11 = v40;
  OUTLINED_FUNCTION_90_3(a1, (uint64_t)v40);
  OUTLINED_FUNCTION_90_3(a2, (uint64_t)v8);
  if ((v30 & 1) == 0)
  {
LABEL_22:
    OUTLINED_FUNCTION_59_3((uint64_t)v8);
    OUTLINED_FUNCTION_59_3((uint64_t)v11);
LABEL_23:
    v31 = 0;
    return v31 & 1;
  }
LABEL_27:
  v33 = *(int *)(v4 + 24);
  v34 = &v11[v33];
  v35 = *(_QWORD *)&v11[v33 + 8];
  v36 = &v8[v33];
  v37 = *((_QWORD *)v36 + 1);
  if (!v35)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_59_3((uint64_t)v8);
    OUTLINED_FUNCTION_59_3((uint64_t)v11);
    if (!v37)
    {
      v31 = 1;
      return v31 & 1;
    }
    goto LABEL_37;
  }
  if (!v37)
  {
    swift_bridgeObjectRetain();
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v8, type metadata accessor for SearchResult);
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v11, type metadata accessor for SearchResult);
LABEL_37:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (*(_QWORD *)v34 == *(_QWORD *)v36 && v35 == v37)
    v31 = 1;
  else
    v31 = OUTLINED_FUNCTION_18_7();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_69_8((uint64_t)v8);
  OUTLINED_FUNCTION_69_8((uint64_t)v11);
  swift_bridgeObjectRelease();
  return v31 & 1;
}

uint64_t SearchResult.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 1835365481 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x43656C6261646F63 && a2 == 0xED00006D65744953;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x746169636F737361 && a2 == 0xEF79726575516465)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t SearchResult.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 1835365481;
  if (a1 == 1)
    return 0x43656C6261646F63;
  return 0x746169636F737361;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchResult.CodingKeys()
{
  char *v0;

  return SearchResult.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SearchResult.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SearchResult.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResult.CodingKeys()
{
  lazy protocol witness table accessor for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResult.CodingKeys()
{
  lazy protocol witness table accessor for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void SearchResult.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResult.CodingKeys>);
  OUTLINED_FUNCTION_98_6();
  MEMORY[0x24BDAC7A8](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys();
  OUTLINED_FUNCTION_61_6();
  type metadata accessor for SearchResultItem(0);
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultItem and conformance SearchResultItem, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
  OUTLINED_FUNCTION_38_12();
  if (!v1)
  {
    v4 = type metadata accessor for SearchResult(0);
    OUTLINED_FUNCTION_77_9(v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableNSSecureCoding<CSSearchableItem>);
    lazy protocol witness table accessor for type CodableNSSecureCoding<CSSearchableItem> and conformance CodableNSSecureCoding<A>(&lazy protocol witness table cache variable for type CodableNSSecureCoding<CSSearchableItem> and conformance CodableNSSecureCoding<A>);
    OUTLINED_FUNCTION_36_13();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  OUTLINED_FUNCTION_76_9();
  OUTLINED_FUNCTION_56_5();
}

void SearchResult.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;

  OUTLINED_FUNCTION_65_7();
  v2 = v1;
  v18 = v3;
  type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_0_3();
  v19 = v5;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SearchResult.CodingKeys>);
  MEMORY[0x24BDAC7A8](v20);
  v6 = OUTLINED_FUNCTION_94_4();
  v7 = type metadata accessor for SearchResult(v6);
  OUTLINED_FUNCTION_15();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v11[*(int *)(v9 + 24)];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v21 = v2;
  v22 = v12;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultItem and conformance SearchResultItem, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
    OUTLINED_FUNCTION_18_15();
    v13 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of SearchResult(v13, (uint64_t)v11, type metadata accessor for SearchResultItem);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableNSSecureCoding<CSSearchableItem>);
    lazy protocol witness table accessor for type CodableNSSecureCoding<CSSearchableItem> and conformance CodableNSSecureCoding<A>(&lazy protocol witness table cache variable for type CodableNSSecureCoding<CSSearchableItem> and conformance CodableNSSecureCoding<A>);
    OUTLINED_FUNCTION_101_6();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)&v11[*(int *)(v7 + 20)] = v23;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v16 = v15;
    OUTLINED_FUNCTION_28_12();
    v17 = (uint64_t *)v22;
    swift_bridgeObjectRelease();
    *v17 = v14;
    v17[1] = v16;
    outlined init with copy of SearchResult((uint64_t)v11, v18, type metadata accessor for SearchResult);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v11, type metadata accessor for SearchResult);
  }
  OUTLINED_FUNCTION_1_1();
}

void protocol witness for Decodable.init(from:) in conformance SearchResult()
{
  SearchResult.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance SearchResult(_QWORD *a1)
{
  SearchResult.encode(to:)(a1);
}

uint64_t SearchResult.toJSONIntermediate()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(void **)(v1 + *(int *)(type metadata accessor for SearchResult(0) + 20));
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v5, sel_attributeSet);
    v7 = objc_msgSend(v6, sel_attributeDictionary);

    v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys11AnyHashableVypG_SS_SSts5NeverOTg505_ss11de37VypS2SIgnnoo_AB3key_yp5valuetSS_SSts5F99OIegnrzr_TR061_s10OmniSearch0B6ResultV18toJSONIntermediateAC0E0VyFSS_SSts11aB10V_yptXEfU_Tf3nnnpf_nTf1cn_n(v8);
    swift_bridgeObjectRelease();
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v9);
    v11 = v10;

  }
  else
  {
    v11 = 0;
  }
  OUTLINED_FUNCTION_51_9(v1, v3, type metadata accessor for SearchResultItem);
  result = type metadata accessor for SearchResult.JSONIntermediate(0);
  *(_QWORD *)(a1 + *(int *)(result + 20)) = v11;
  return result;
}

uint64_t type metadata accessor for SearchResult(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for SearchResult);
}

uint64_t type metadata accessor for SearchResult.JSONIntermediate(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for SearchResult.JSONIntermediate);
}

void SearchResult.JSONIntermediate.item.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined init with copy of SearchResult(v1, a1, type metadata accessor for SearchResultItem);
}

uint64_t SearchResult.JSONIntermediate.csAttributes.getter()
{
  type metadata accessor for SearchResult.JSONIntermediate(0);
  return swift_bridgeObjectRetain();
}

OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional __swiftcall SearchResult.JSONIntermediate.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional result;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SearchResult.JSONIntermediate.CodingKeys.init(rawValue:), v2);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_5();
  return result;
}

OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional __swiftcall SearchResult.JSONIntermediate.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional)2;
}

uint64_t SearchResult.JSONIntermediate.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x697274744173635FLL;
  else
    return 1835365481;
}

uint64_t SearchResult.JSONIntermediate.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x697274744173635FLL;
  else
    return 1835365481;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchResult.JSONIntermediate.CodingKeys(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchResult.JSONIntermediate.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchResult.JSONIntermediate.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchResult.JSONIntermediate.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchResult.JSONIntermediate.CodingKeys@<W0>(Swift::String *a1@<X0>, OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional *a2@<X8>)
{
  OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional result;

  result.value = SearchResult.JSONIntermediate.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchResult.JSONIntermediate.CodingKeys(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *a1 = SearchResult.JSONIntermediate.CodingKeys.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_5();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchResult.JSONIntermediate.CodingKeys()
{
  char *v0;

  return SearchResult.JSONIntermediate.CodingKeys.stringValue.getter(*v0);
}

OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance SearchResult.JSONIntermediate.CodingKeys@<W0>(uint64_t a1@<X0>, OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional *a2@<X8>)
{
  OmniSearch::SearchResult::JSONIntermediate::CodingKeys_optional result;

  result.value = SearchResult.JSONIntermediate.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResult.JSONIntermediate.CodingKeys()
{
  lazy protocol witness table accessor for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResult.JSONIntermediate.CodingKeys()
{
  lazy protocol witness table accessor for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void SearchResult.JSONIntermediate.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResult.JSONIntermediate.CodingKeys>);
  OUTLINED_FUNCTION_98_6();
  MEMORY[0x24BDAC7A8](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys();
  OUTLINED_FUNCTION_61_6();
  type metadata accessor for SearchResultItem(0);
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultItem and conformance SearchResultItem, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
  OUTLINED_FUNCTION_38_12();
  if (!v1)
  {
    v4 = type metadata accessor for SearchResult.JSONIntermediate(0);
    OUTLINED_FUNCTION_77_9(v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    _sSDyS2SGSDyxq_GSEsSERzSER_rlWlTm_0(&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    OUTLINED_FUNCTION_36_13();
  }
  OUTLINED_FUNCTION_76_9();
  OUTLINED_FUNCTION_56_5();
}

void SearchResult.JSONIntermediate.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_65_7();
  v3 = v2;
  v14 = v4;
  type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_0_3();
  v15 = v6;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SearchResult.JSONIntermediate.CodingKeys>);
  v7 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v8 = OUTLINED_FUNCTION_91_2();
  v9 = type metadata accessor for SearchResult.JSONIntermediate(v8);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_2_2();
  v13 = v12 - v11;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_2_17();
  }
  else
  {
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultItem and conformance SearchResultItem, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
    OUTLINED_FUNCTION_18_15();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of SearchResult(v15, v13, type metadata accessor for SearchResultItem);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    _sSDyS2SGSDyxq_GSEsSERzSER_rlWlTm_0(&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    OUTLINED_FUNCTION_101_6();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_37_7(v1, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    *(_QWORD *)(v13 + *(int *)(v9 + 20)) = v17;
    outlined init with copy of SearchResult(v13, v14, type metadata accessor for SearchResult.JSONIntermediate);
    OUTLINED_FUNCTION_2_17();
    _s10OmniSearch0B6ResultVWOhTm_1(v13, type metadata accessor for SearchResult.JSONIntermediate);
  }
  OUTLINED_FUNCTION_1_1();
}

void SearchResult.JSONIntermediate.init(item:csAttributes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of SearchResult(a1, a3, type metadata accessor for SearchResultItem);
  *(_QWORD *)(a3 + *(int *)(type metadata accessor for SearchResult.JSONIntermediate(0) + 20)) = a2;
  OUTLINED_FUNCTION_5();
}

void protocol witness for Decodable.init(from:) in conformance SearchResult.JSONIntermediate()
{
  SearchResult.JSONIntermediate.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance SearchResult.JSONIntermediate(_QWORD *a1)
{
  SearchResult.JSONIntermediate.encode(to:)(a1);
}

OmniSearch::SearchResultItem::CodingKeys_optional __swiftcall SearchResultItem.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  OmniSearch::SearchResultItem::CodingKeys_optional result;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SearchResultItem.CodingKeys.init(rawValue:), v2);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_5();
  return result;
}

OmniSearch::SearchResultItem::CodingKeys_optional __swiftcall SearchResultItem.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (OmniSearch::SearchResultItem::CodingKeys_optional)16;
}

uint64_t SearchResultItem.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2432471C4 + 4 * byte_2433545F7[a1]))(0x6C69616D65, 0xE500000000000000);
}

uint64_t sub_2432471C4()
{
  return 0x4D53656C69626F6DLL;
}

uint64_t sub_2432471E0()
{
  return 0x7261646E656C6163;
}

uint64_t sub_2432471F8()
{
  return 0x6F746F6870;
}

uint64_t sub_243247208()
{
  return 0x726577736E61;
}

uint64_t sub_24324721C()
{
  return 1702129518;
}

uint64_t sub_24324722C()
{
  return 1701603686;
}

unint64_t sub_24324723C()
{
  return 0xD000000000000011;
}

unint64_t sub_24324729C()
{
  return 0xD000000000000010;
}

uint64_t sub_2432472D4()
{
  return 0x65526C61626F6C67;
}

uint64_t sub_2432472F4()
{
  return 0x7469746E45707061;
}

uint64_t sub_243247314()
{
  return 0x6946746E65746E69;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchResultItem.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchResultItem.CodingKeys()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchResultItem.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchResultItem.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

OmniSearch::SearchResultItem::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchResultItem.CodingKeys@<W0>(Swift::String *a1@<X0>, OmniSearch::SearchResultItem::CodingKeys_optional *a2@<X8>)
{
  OmniSearch::SearchResultItem::CodingKeys_optional result;

  result.value = SearchResultItem.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchResultItem.CodingKeys(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = SearchResultItem.CodingKeys.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_5();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchResultItem.CodingKeys()
{
  unsigned __int8 *v0;

  return SearchResultItem.CodingKeys.stringValue.getter(*v0);
}

OmniSearch::SearchResultItem::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance SearchResultItem.CodingKeys@<W0>(uint64_t a1@<X0>, OmniSearch::SearchResultItem::CodingKeys_optional *a2@<X8>)
{
  OmniSearch::SearchResultItem::CodingKeys_optional result;

  result.value = SearchResultItem.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SearchResultItem.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.CodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.CodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SearchResultItem.url.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[3];
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_68_10();
  v0 = v4;
  v1 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v0, v1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void SearchResultItem.source.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[5];

  OUTLINED_FUNCTION_68_10();
  OUTLINED_FUNCTION_41_10(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0], v10[1], v10[2], v10[3]);
  OUTLINED_FUNCTION_72_7(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 48));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_7_3();
}

Swift::String __swiftcall SearchResultItem.description()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String result;
  uint64_t v11;
  uint64_t v12[5];

  OUTLINED_FUNCTION_68_10();
  OUTLINED_FUNCTION_41_10(v0, v1, v2, v3, v4, v5, v6, v7, v11, v12[0], v12[1], v12[2], v12[3]);
  Encodable.oms_jsonPrettyPrinted()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_7_3();
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

void SearchResultItem.sfCard.getter()
{
  uint64_t v0;

  v0 = SearchResultItem.experience.getter();
  if (v0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 128))(v0);
    swift_release();
  }
  OUTLINED_FUNCTION_5();
}

void SearchResultItem.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157[2];
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _QWORD *v212[2];

  OUTLINED_FUNCTION_65_7();
  a19 = v22;
  a20 = v23;
  v211 = (char *)v20;
  v25 = v24;
  v204 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFileItem?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_13_2(v28);
  v209 = type metadata accessor for IntentFileItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v30);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppEntityItem?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_46_11(v32, v157[0]);
  v208 = type metadata accessor for AppEntityItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_127_1((uint64_t)v157 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalItem?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_13_2(v36);
  v171 = type metadata accessor for GlobalItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v38);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RestaurantReservation?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_0_3();
  v168 = OUTLINED_FUNCTION_80_5(v40);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_127_1((uint64_t)v157 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_0_3();
  v167 = v44;
  v165 = type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v46);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightReservation?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v47);
  v49 = OUTLINED_FUNCTION_47_13(v48, v157[0]);
  v162 = type metadata accessor for FlightReservation(v49);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v50);
  OUTLINED_FUNCTION_127_1((uint64_t)v157 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v52);
  v54 = OUTLINED_FUNCTION_45_11(v53, v157[0]);
  v179 = type metadata accessor for Contact(v54);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WalletPass?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v57);
  v183 = (uint64_t)v157 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for WalletPass(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v59);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v60);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WalletTransaction?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_0_3();
  v185 = OUTLINED_FUNCTION_82_10(v62);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v63);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FileDocument?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v65);
  v188 = OUTLINED_FUNCTION_81_6((uint64_t)v157 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v67);
  OUTLINED_FUNCTION_127_1((uint64_t)v157 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NoteDocument?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v69);
  OUTLINED_FUNCTION_0_3();
  v192 = v70;
  v191 = type metadata accessor for NoteDocument(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v71);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v73);
  v75 = OUTLINED_FUNCTION_54_11(v74, v157[0]);
  v194 = type metadata accessor for Answer(v75);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_127_1((uint64_t)v157 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Photo?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v78);
  OUTLINED_FUNCTION_64_7(v79, v157[0]);
  v197 = type metadata accessor for Photo(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v80);
  OUTLINED_FUNCTION_0_3();
  v193 = v81;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmailDocument?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v82);
  OUTLINED_FUNCTION_0_3();
  v200 = v83;
  v201 = type metadata accessor for EmailDocument(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v84);
  OUTLINED_FUNCTION_0_3();
  v196 = v85;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MobileSMSDocument?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v86);
  OUTLINED_FUNCTION_0_3();
  v202 = v87;
  v203 = type metadata accessor for MobileSMSDocument(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v88);
  OUTLINED_FUNCTION_63_10(v89, v157[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v90);
  OUTLINED_FUNCTION_0_3();
  v207 = v91;
  v206 = type metadata accessor for CalendarEvent(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v92);
  OUTLINED_FUNCTION_0_3();
  v205 = v93;
  v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SearchResultItem.CodingKeys>);
  v94 = *(_QWORD *)(v210 - 8);
  MEMORY[0x24BDAC7A8](v210);
  v95 = OUTLINED_FUNCTION_66_11();
  v96 = type metadata accessor for SearchResultItem(v95);
  OUTLINED_FUNCTION_15();
  v98 = MEMORY[0x24BDAC7A8](v97);
  v100 = (char *)v157 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v98);
  v102 = (char *)v157 - v101;
  v212[0] = v25;
  v103 = OUTLINED_FUNCTION_107_5();
  v104 = (uint64_t)v211;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v104)
  {
    v110 = v212[0];
  }
  else
  {
    v105 = v205;
    v158 = v100;
    v159 = v103;
    v160 = v96;
    v211 = v102;
    v106 = v208;
    v107 = v209;
    HIBYTE(a10) = 2;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type CalendarEvent and conformance CalendarEvent, (void (*)(uint64_t))type metadata accessor for CalendarEvent);
    OUTLINED_FUNCTION_18_15();
    v109 = v206;
    v108 = v207;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v157[1] = v21;
    v112 = OUTLINED_FUNCTION_22_2(v108, 1, v109);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v108, v105);
      v116 = (uint64_t)v211;
      OUTLINED_FUNCTION_11_17(v105, (uint64_t)v211);
      OUTLINED_FUNCTION_14_13();
LABEL_9:
      swift_storeEnumTagMultiPayload();
LABEL_10:
      v117 = v212[0];
      v118 = v204;
LABEL_11:
      outlined init with take of SearchResult(v116, v118, type metadata accessor for SearchResultItem);
      v111 = (uint64_t)v117;
      goto LABEL_5;
    }
    OUTLINED_FUNCTION_111_0(v112, &demangling cache variable for type metadata for CalendarEvent?);
    HIBYTE(a10) = 1;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type MobileSMSDocument and conformance MobileSMSDocument, (void (*)(uint64_t))type metadata accessor for MobileSMSDocument);
    OUTLINED_FUNCTION_18_15();
    v114 = v202;
    v115 = v203;
    OUTLINED_FUNCTION_10_17();
    v116 = v94;
    v119 = OUTLINED_FUNCTION_22_2(v114, 1, v115);
    if (!v113)
    {
      OUTLINED_FUNCTION_23_18();
      v122 = v199;
      outlined init with take of SearchResult(v114, v199, type metadata accessor for MobileSMSDocument);
      v116 = (uint64_t)v211;
      outlined init with take of SearchResult(v122, (uint64_t)v211, type metadata accessor for MobileSMSDocument);
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_111_0(v119, &demangling cache variable for type metadata for MobileSMSDocument?);
    HIBYTE(a10) = 0;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type EmailDocument and conformance EmailDocument, (void (*)(uint64_t))type metadata accessor for EmailDocument);
    OUTLINED_FUNCTION_18_15();
    v120 = v200;
    v121 = v201;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v123 = OUTLINED_FUNCTION_22_2(v120, 1, v121);
    if (!v113)
    {
      OUTLINED_FUNCTION_23_18();
      OUTLINED_FUNCTION_11_17(v120, v196);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      swift_storeEnumTagMultiPayload();
      v117 = v212[0];
      v118 = v204;
      goto LABEL_11;
    }
    OUTLINED_FUNCTION_111_0(v123, &demangling cache variable for type metadata for EmailDocument?);
    HIBYTE(a10) = 3;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type Photo and conformance Photo, (void (*)(uint64_t))type metadata accessor for Photo);
    OUTLINED_FUNCTION_18_15();
    v124 = v197;
    OUTLINED_FUNCTION_67_10();
    v118 = v204;
    OUTLINED_FUNCTION_22_2(v198, 1, v124);
    if (!v113)
    {
      OUTLINED_FUNCTION_23_18();
      OUTLINED_FUNCTION_11_17(v198, v193);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
LABEL_23:
      swift_storeEnumTagMultiPayload();
      v117 = v212[0];
      goto LABEL_11;
    }
    outlined destroy of MobileSMSDocument?(v198, &demangling cache variable for type metadata for Photo?);
    HIBYTE(a10) = 4;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type Answer and conformance Answer, (void (*)(uint64_t))type metadata accessor for Answer);
    OUTLINED_FUNCTION_18_15();
    v125 = v194;
    OUTLINED_FUNCTION_67_10();
    OUTLINED_FUNCTION_22_2(v195, 1, v125);
    if (!v113)
    {
      OUTLINED_FUNCTION_23_18();
      OUTLINED_FUNCTION_11_17(v195, v190);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_23;
    }
    outlined destroy of MobileSMSDocument?(v195, &demangling cache variable for type metadata for Answer?);
    HIBYTE(a10) = 5;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type NoteDocument and conformance NoteDocument, (void (*)(uint64_t))type metadata accessor for NoteDocument);
    OUTLINED_FUNCTION_18_15();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_22_15(v192, 1, (uint64_t)&a18);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v192, v187);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    outlined destroy of MobileSMSDocument?(v192, &demangling cache variable for type metadata for NoteDocument?);
    HIBYTE(a10) = 6;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type FileDocument and conformance FileDocument, (void (*)(uint64_t))type metadata accessor for FileDocument);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v126 = OUTLINED_FUNCTION_33_10((uint64_t)&a16);
    OUTLINED_FUNCTION_22_15(v126, v127, (uint64_t)&a15);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v189, v184);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for FileDocument?, (uint64_t)&a16);
    HIBYTE(a10) = 7;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type WalletTransaction and conformance WalletTransaction, (void (*)(uint64_t))type metadata accessor for WalletTransaction);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v128 = OUTLINED_FUNCTION_33_10((uint64_t)&a13);
    OUTLINED_FUNCTION_22_15(v128, v129, (uint64_t)&a12);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v186, v181);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for WalletTransaction?, (uint64_t)&a13);
    HIBYTE(a10) = 8;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type WalletPass and conformance WalletPass, (void (*)(uint64_t))type metadata accessor for WalletPass);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v130 = OUTLINED_FUNCTION_33_10((uint64_t)&a10);
    OUTLINED_FUNCTION_22_15(v130, v131, (uint64_t)&a9);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v183, v178);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for WalletPass?, (uint64_t)&a10);
    HIBYTE(a10) = 9;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type Contact and conformance Contact, (void (*)(uint64_t))type metadata accessor for Contact);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v132 = OUTLINED_FUNCTION_33_10((uint64_t)v212);
    OUTLINED_FUNCTION_22_15(v132, v133, (uint64_t)&v211);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v180, v161);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for Contact?, (uint64_t)v212);
    HIBYTE(a10) = 10;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v134 = OUTLINED_FUNCTION_33_10((uint64_t)&v196);
    OUTLINED_FUNCTION_22_15(v134, v135, (uint64_t)&v194);
    if (!v113)
    {
      v152 = v163;
      OUTLINED_FUNCTION_11_17(v164, v163);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
      v153 = v152;
      v154 = (uint64_t)v158;
      OUTLINED_FUNCTION_11_17(v153, (uint64_t)v158);
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_108_6(MEMORY[0x24BEE4AF8]);
LABEL_45:
      swift_storeEnumTagMultiPayload();
      v116 = (uint64_t)v211;
      outlined init with take of SearchResult(v154, (uint64_t)v211, type metadata accessor for SearchResultItem);
      goto LABEL_10;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for FlightReservation?, (uint64_t)&v196);
    HIBYTE(a10) = 11;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v136 = OUTLINED_FUNCTION_33_10((uint64_t)&v199);
    OUTLINED_FUNCTION_22_15(v136, v137, (uint64_t)&v197);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v167, v166);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for HotelReservation?, (uint64_t)&v199);
    HIBYTE(a10) = 12;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v138 = OUTLINED_FUNCTION_33_10((uint64_t)&v202);
    OUTLINED_FUNCTION_22_15(v138, v139, (uint64_t)&v200);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v170, v169);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for RestaurantReservation?, (uint64_t)&v202);
    HIBYTE(a10) = 13;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type GlobalItem and conformance GlobalItem, (void (*)(uint64_t))type metadata accessor for GlobalItem);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_7_24();
    v140 = OUTLINED_FUNCTION_33_10((uint64_t)&v205);
    OUTLINED_FUNCTION_22_15(v140, v141, (uint64_t)&v203);
    if (!v113)
    {
      v155 = v172;
      OUTLINED_FUNCTION_11_17(v173, v172);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
      v156 = v155;
      v154 = (uint64_t)v158;
      OUTLINED_FUNCTION_11_17(v156, (uint64_t)v158);
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_108_6(MEMORY[0x24BEE4AF8]);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for GlobalItem?, (uint64_t)&v205);
    HIBYTE(a10) = 14;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type AppEntityItem and conformance AppEntityItem, (void (*)(uint64_t))type metadata accessor for AppEntityItem);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_10_17();
    v142 = OUTLINED_FUNCTION_33_10((uint64_t)&v207);
    OUTLINED_FUNCTION_22_2(v142, v143, v106);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v175, v174);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for AppEntityItem?, (uint64_t)&v207);
    HIBYTE(a10) = 15;
    lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type IntentFileItem and conformance IntentFileItem, (void (*)(uint64_t))type metadata accessor for IntentFileItem);
    OUTLINED_FUNCTION_18_15();
    OUTLINED_FUNCTION_10_17();
    v144 = OUTLINED_FUNCTION_33_10((uint64_t)&v209);
    OUTLINED_FUNCTION_22_2(v144, v145, v107);
    if (!v113)
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_11_17(v177, v176);
      OUTLINED_FUNCTION_6_23();
      OUTLINED_FUNCTION_14_13();
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_29_12(&demangling cache variable for type metadata for IntentFileItem?, (uint64_t)&v209);
    v146 = type metadata accessor for DecodingError();
    swift_allocError();
    v148 = v147;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v149 = v159;
    *(_QWORD *)(v148 + 24) = &type metadata for SearchResultItem.CodingKeys;
    *(_QWORD *)(v148 + 32) = v149;
    *(_BYTE *)v148 = 2;
    v110 = v212[0];
    v151 = v212[0][3];
    v150 = v212[0][4];
    __swift_project_boxed_opaque_existential_1(v212[0], v151);
    MEMORY[0x2494F6794](v151, v150);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v146 - 8) + 104))(v148, *MEMORY[0x24BEE26C8], v146);
    swift_willThrow();
    OUTLINED_FUNCTION_5_22();
  }
  v111 = (uint64_t)v110;
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1(v111);
  OUTLINED_FUNCTION_1_1();
}

uint64_t SearchResultItem.AppEntityCodingKeys.stringValue.getter()
{
  return 12383;
}

uint64_t SearchResultItem.FileCodingKeys.stringValue.getter()
{
  return 0x746E656D75636F64;
}

uint64_t SearchResultItem.FlightReservationCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x746E656D75636F64 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65697265707865 && a2 == 0xEB00000000736563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SearchResultItem.FlightReservationCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E65697265707865;
  else
    return 0x746E656D75636F64;
}

uint64_t SearchResultItem.GlobalResultCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65697265707865 && a2 == 0xEB00000000736563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void SearchResultItem.FlightReservationCodingKeys.hashValue.getter(char a1)
{
  OUTLINED_FUNCTION_4_13();
  Hasher._combine(_:)(a1 & 1);
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_107();
}

uint64_t SearchResultItem.GlobalResultCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E65697265707865;
  else
    return 12383;
}

void SearchResultItem.AppEntityCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_18_7();
    OUTLINED_FUNCTION_6_1();
  }
  OUTLINED_FUNCTION_5();
}

void SearchResultItem.AnswerCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x746E656D75636F64 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_18_7();
    OUTLINED_FUNCTION_6_1();
  }
  OUTLINED_FUNCTION_5();
}

void SearchResultItem.AnswerCodingKeys.hashValue.getter()
{
  OUTLINED_FUNCTION_4_13();
  OUTLINED_FUNCTION_4_19();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_107();
}

void protocol witness for Hashable.hashValue.getter in conformance SearchResultItem.AnswerCodingKeys()
{
  SearchResultItem.AnswerCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.AnswerCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.AnswerCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for CodingKey.init(stringValue:) in conformance SearchResultItem.AppEntityCodingKeys(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  SearchResultItem.AppEntityCodingKeys.init(stringValue:)(a1, a2);
  *a3 = v4 & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.AppEntityCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.AppEntityCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.CalendarCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.CalendarCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.ContactCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.ContactCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.EmailCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.EmailCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for CodingKey.init(stringValue:) in conformance SearchResultItem.FileCodingKeys(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  SearchResultItem.AnswerCodingKeys.init(stringValue:)(a1, a2);
  *a3 = v4 & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.FileCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.FileCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchResultItem.FlightReservationCodingKeys()
{
  char *v0;

  return SearchResultItem.FlightReservationCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SearchResultItem.FlightReservationCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SearchResultItem.FlightReservationCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.FlightReservationCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.FlightReservationCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance SearchResultItem.GlobalResultCodingKeys()
{
  char *v0;

  SearchResultItem.FlightReservationCodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchResultItem.GlobalResultCodingKeys()
{
  char *v0;

  return SearchResultItem.GlobalResultCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SearchResultItem.GlobalResultCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SearchResultItem.GlobalResultCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.GlobalResultCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.GlobalResultCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.HotelReservationCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.HotelReservationCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.IntentFileCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.IntentFileCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.MobileSMSCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.MobileSMSCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.NoteCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.NoteCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.PhotoCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.PhotoCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.RestaurantReservationCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.RestaurantReservationCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.WalletPassCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.WalletPassCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchResultItem.AnswerCodingKeys()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_4_19();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_107();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchResultItem.WalletTransactionCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchResultItem.WalletTransactionCodingKeys()
{
  lazy protocol witness table accessor for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys();
  return CodingKey.debugDescription.getter();
}

void SearchResultItem.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126[33];
  _QWORD v127[5];
  _QWORD v128[6];
  _QWORD v129[5];
  _QWORD v130[5];
  _QWORD v131[5];
  _QWORD v132[4];
  uint64_t v133;
  _QWORD v134[5];
  _QWORD v135[3];
  uint64_t v136;
  _QWORD v137[7];
  _QWORD v138[4];

  OUTLINED_FUNCTION_65_7();
  a19 = v21;
  a20 = v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.AnswerCodingKeys>);
  v137[2] = *(_QWORD *)(v23 - 8);
  v137[3] = v23;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_0_3();
  v137[1] = v25;
  v135[2] = type metadata accessor for Answer(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_0_3();
  v137[0] = v27;
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.IntentFileCodingKeys>);
  v135[1] = *(_QWORD *)(v136 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_63_10(v29, v126[0]);
  v132[3] = type metadata accessor for IntentFileItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_64_7(v31, v126[0]);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.AppEntityCodingKeys>);
  v132[2] = *(_QWORD *)(v133 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v32);
  v132[1] = (char *)v126 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131[4] = type metadata accessor for AppEntityItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_127_1((uint64_t)v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.GlobalResultCodingKeys>);
  v134[2] = *(_QWORD *)(v36 - 8);
  v134[3] = v36;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_54_11(v38, v126[0]);
  v131[3] = type metadata accessor for GlobalItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_0_3();
  v134[0] = v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.RestaurantReservationCodingKeys>);
  OUTLINED_FUNCTION_25_0(v41, (uint64_t)&a13);
  v131[1] = v42;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v43);
  v129[3] = OUTLINED_FUNCTION_80_5((uint64_t)v126 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_127_1((uint64_t)v126 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.HotelReservationCodingKeys>);
  OUTLINED_FUNCTION_25_0(v47, (uint64_t)v138);
  v129[2] = v48;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v49);
  v51 = OUTLINED_FUNCTION_46_11(v50, v126[0]);
  v128[5] = type metadata accessor for HotelReservation(v51);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_127_1((uint64_t)v126 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.FlightReservationCodingKeys>);
  OUTLINED_FUNCTION_25_0(v54, (uint64_t)&a9);
  v130[2] = v55;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v56);
  v58 = OUTLINED_FUNCTION_45_11(v57, v126[0]);
  v128[4] = type metadata accessor for FlightReservation(v58);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v59);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v60);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.ContactCodingKeys>);
  OUTLINED_FUNCTION_25_0(v61, (uint64_t)v137);
  v128[2] = v62;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v63);
  v128[1] = (char *)v126 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127[3] = type metadata accessor for Contact(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v65);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v66);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.WalletPassCodingKeys>);
  OUTLINED_FUNCTION_25_0(v67, (uint64_t)v135);
  v127[2] = v68;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v69);
  v71 = OUTLINED_FUNCTION_47_13(v70, v126[0]);
  v126[31] = type metadata accessor for WalletPass(v71);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v72);
  OUTLINED_FUNCTION_127_1((uint64_t)v126 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.WalletTransactionCodingKeys>);
  OUTLINED_FUNCTION_25_0(v74, (uint64_t)v134);
  v126[30] = v75;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_0_3();
  v126[26] = OUTLINED_FUNCTION_82_10(v77);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v78);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v79);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.FileCodingKeys>);
  OUTLINED_FUNCTION_25_0(v80, (uint64_t)v132);
  v126[25] = v81;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v82);
  OUTLINED_FUNCTION_0_3();
  v126[21] = OUTLINED_FUNCTION_81_6(v83);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v84);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v85);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.NoteCodingKeys>);
  OUTLINED_FUNCTION_25_0(v86, (uint64_t)v131);
  v126[20] = v87;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v88);
  OUTLINED_FUNCTION_0_3();
  v90 = OUTLINED_FUNCTION_13_2(v89);
  v126[16] = type metadata accessor for NoteDocument(v90);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v91);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v92);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.PhotoCodingKeys>);
  OUTLINED_FUNCTION_25_0(v93, (uint64_t)v130);
  v126[15] = v94;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v95);
  OUTLINED_FUNCTION_0_3();
  v97 = OUTLINED_FUNCTION_13_2(v96);
  v126[11] = type metadata accessor for Photo(v97);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v98);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v99);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.CalendarCodingKeys>);
  OUTLINED_FUNCTION_25_0(v100, (uint64_t)v129);
  v126[10] = v101;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v102);
  OUTLINED_FUNCTION_0_3();
  v104 = OUTLINED_FUNCTION_13_2(v103);
  v126[7] = type metadata accessor for CalendarEvent(v104);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v105);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v106);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.MobileSMSCodingKeys>);
  OUTLINED_FUNCTION_25_0(v107, (uint64_t)v128);
  v126[5] = v108;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v109);
  OUTLINED_FUNCTION_0_3();
  v111 = OUTLINED_FUNCTION_13_2(v110);
  v126[2] = type metadata accessor for MobileSMSDocument(v111);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v112);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_127_1(v113);
  v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.EmailCodingKeys>);
  OUTLINED_FUNCTION_25_0(v114, (uint64_t)v127);
  v126[0] = v115;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v116);
  v117 = OUTLINED_FUNCTION_94_4();
  type metadata accessor for EmailDocument(v117);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v118);
  v119 = OUTLINED_FUNCTION_91_2();
  type metadata accessor for SearchResultItem(v119);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v120);
  OUTLINED_FUNCTION_44_11();
  v138[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchResultItem.CodingKeys>);
  v137[4] = *(_QWORD *)(v138[0] - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v121);
  OUTLINED_FUNCTION_2_2();
  v124 = v123 - v122;
  OUTLINED_FUNCTION_107_5();
  v137[6] = v124;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of SearchResult(v138[1], v20, type metadata accessor for SearchResultItem);
  v125 = (char *)sub_243249788 + 4 * word_243354608[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_243249788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_89_12(v0, v1);
  *(_BYTE *)(v3 - 72) = 0;
  lazy protocol witness table accessor for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys();
  v5 = *(_QWORD *)(v3 - 120);
  v4 = *(_QWORD *)(v3 - 112);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  OUTLINED_FUNCTION_90_6(&lazy protocol witness table cache variable for type EmailDocument and conformance EmailDocument);
  v6 = *(_QWORD *)(v3 - 744);
  OUTLINED_FUNCTION_20_14();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 752) + 8))(v2, v6);
  _s10OmniSearch0B6ResultVWOhTm_1(v1, type metadata accessor for EmailDocument);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 136) + 8))(v5, v4);
  OUTLINED_FUNCTION_1_1();
}

#error "24324A10C: call analysis failed (funcsize=5)"

#error "24324A120: call analysis failed (funcsize=5)"

uint64_t outlined assign with take of SearchResultItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.CodingKeys, &unk_2513CEBC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.CodingKeys, &unk_2513CEBC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.CodingKeys, &unk_2513CEBC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.CodingKeys, &unk_2513CEBC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.CodingKeys and conformance SearchResult.CodingKeys);
  }
  return result;
}

void lazy protocol witness table accessor for type CodableNSSecureCoding<CSSearchableItem> and conformance CodableNSSecureCoding<A>(_QWORD *a1)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableNSSecureCoding<CSSearchableItem>);
    OUTLINED_FUNCTION_100();
  }
  OUTLINED_FUNCTION_5();
}

unint64_t lazy protocol witness table accessor for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.JSONIntermediate.CodingKeys, &type metadata for SearchResult.JSONIntermediate.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.JSONIntermediate.CodingKeys, &type metadata for SearchResult.JSONIntermediate.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.JSONIntermediate.CodingKeys, &type metadata for SearchResult.JSONIntermediate.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResult.JSONIntermediate.CodingKeys, &type metadata for SearchResult.JSONIntermediate.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResult.JSONIntermediate.CodingKeys and conformance SearchResult.JSONIntermediate.CodingKeys);
  }
  return result;
}

void _sSDyS2SGSDyxq_GSEsSERzSER_rlWlTm_0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[2];

  if (!*a1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String : String]);
    v7[0] = a2;
    v7[1] = a2;
    atomic_store(MEMORY[0x2494F6CA4](a3, v6, v7), a1);
  }
  OUTLINED_FUNCTION_59_0();
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CodingKeys, &type metadata for SearchResultItem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CodingKeys, &type metadata for SearchResultItem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CodingKeys, &type metadata for SearchResultItem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CodingKeys, &type metadata for SearchResultItem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AnswerCodingKeys, &unk_2513CEB38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AnswerCodingKeys, &unk_2513CEB38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AnswerCodingKeys, &unk_2513CEB38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AnswerCodingKeys, &unk_2513CEB38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AnswerCodingKeys and conformance SearchResultItem.AnswerCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.IntentFileCodingKeys, &unk_2513CEAA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.IntentFileCodingKeys, &unk_2513CEAA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.IntentFileCodingKeys, &unk_2513CEAA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.IntentFileCodingKeys, &unk_2513CEAA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.IntentFileCodingKeys and conformance SearchResultItem.IntentFileCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AppEntityCodingKeys, &unk_2513CEA18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AppEntityCodingKeys, &unk_2513CEA18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AppEntityCodingKeys, &unk_2513CEA18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.AppEntityCodingKeys, &unk_2513CEA18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.AppEntityCodingKeys and conformance SearchResultItem.AppEntityCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.GlobalResultCodingKeys, &unk_2513CE988);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.GlobalResultCodingKeys, &unk_2513CE988);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.GlobalResultCodingKeys, &unk_2513CE988);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.GlobalResultCodingKeys, &unk_2513CE988);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.GlobalResultCodingKeys and conformance SearchResultItem.GlobalResultCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.RestaurantReservationCodingKeys, &unk_2513CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.RestaurantReservationCodingKeys, &unk_2513CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.RestaurantReservationCodingKeys, &unk_2513CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.RestaurantReservationCodingKeys, &unk_2513CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.RestaurantReservationCodingKeys and conformance SearchResultItem.RestaurantReservationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.HotelReservationCodingKeys, &unk_2513CE868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.HotelReservationCodingKeys, &unk_2513CE868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.HotelReservationCodingKeys, &unk_2513CE868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.HotelReservationCodingKeys, &unk_2513CE868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.HotelReservationCodingKeys and conformance SearchResultItem.HotelReservationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FlightReservationCodingKeys, &unk_2513CE7D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FlightReservationCodingKeys, &unk_2513CE7D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FlightReservationCodingKeys, &unk_2513CE7D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FlightReservationCodingKeys, &unk_2513CE7D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FlightReservationCodingKeys and conformance SearchResultItem.FlightReservationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.ContactCodingKeys, &unk_2513CE748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.ContactCodingKeys, &unk_2513CE748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.ContactCodingKeys, &unk_2513CE748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.ContactCodingKeys, &unk_2513CE748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.ContactCodingKeys and conformance SearchResultItem.ContactCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletPassCodingKeys, &unk_2513CE6B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletPassCodingKeys, &unk_2513CE6B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletPassCodingKeys, &unk_2513CE6B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletPassCodingKeys, &unk_2513CE6B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletPassCodingKeys and conformance SearchResultItem.WalletPassCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletTransactionCodingKeys, &unk_2513CE628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletTransactionCodingKeys, &unk_2513CE628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletTransactionCodingKeys, &unk_2513CE628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.WalletTransactionCodingKeys, &unk_2513CE628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.WalletTransactionCodingKeys and conformance SearchResultItem.WalletTransactionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FileCodingKeys, &unk_2513CE598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FileCodingKeys, &unk_2513CE598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FileCodingKeys, &unk_2513CE598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.FileCodingKeys, &unk_2513CE598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.FileCodingKeys and conformance SearchResultItem.FileCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.NoteCodingKeys, &unk_2513CE508);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.NoteCodingKeys, &unk_2513CE508);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.NoteCodingKeys, &unk_2513CE508);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.NoteCodingKeys, &unk_2513CE508);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.NoteCodingKeys and conformance SearchResultItem.NoteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.PhotoCodingKeys, &unk_2513CE478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.PhotoCodingKeys, &unk_2513CE478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.PhotoCodingKeys, &unk_2513CE478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.PhotoCodingKeys, &unk_2513CE478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.PhotoCodingKeys and conformance SearchResultItem.PhotoCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CalendarCodingKeys, &unk_2513CE3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CalendarCodingKeys, &unk_2513CE3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CalendarCodingKeys, &unk_2513CE3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.CalendarCodingKeys, &unk_2513CE3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.CalendarCodingKeys and conformance SearchResultItem.CalendarCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.MobileSMSCodingKeys, &unk_2513CE358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.MobileSMSCodingKeys, &unk_2513CE358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.MobileSMSCodingKeys, &unk_2513CE358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.MobileSMSCodingKeys, &unk_2513CE358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.MobileSMSCodingKeys and conformance SearchResultItem.MobileSMSCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.EmailCodingKeys, &unk_2513CE2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.EmailCodingKeys, &unk_2513CE2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.EmailCodingKeys, &unk_2513CE2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys;
  if (!lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for SearchResultItem.EmailCodingKeys, &unk_2513CE2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultItem.EmailCodingKeys and conformance SearchResultItem.EmailCodingKeys);
  }
  return result;
}

void instantiation function for generic protocol witness table for SearchResultItem(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultItem and conformance SearchResultItem, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
  a1[1] = v2;
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultItem and conformance SearchResultItem, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
  a1[2] = v3;
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(&lazy protocol witness table cache variable for type SearchResultItem and conformance SearchResultItem, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
  a1[3] = v4;
}

uint64_t dispatch thunk of SpotlightConvertible.csItem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for SearchResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for SearchResultItem(0);
    v5 = (char *)&loc_24324A8E4 + 4 * word_243354628[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for SearchResult(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int EnumTagSinglePayload;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  type metadata accessor for SearchResultItem(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = (int *)type metadata accessor for EmailDocument(0);
      v5 = a1 + v4[12];
      v6 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = a1 + v4[17];
      v8 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      v9 = v4[18];
      goto LABEL_19;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = (int *)type metadata accessor for MobileSMSDocument(0);
      v11 = a1 + v10[10];
      v12 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v11, 1, v12))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      v13 = a1 + v10[11];
      v14 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v13, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
      v15 = a1 + v10[12];
      if (!__swift_getEnumTagSinglePayload(v15, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v15, v14);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = (int *)type metadata accessor for CalendarEvent(0);
      v16 = a1 + v10[7];
      v17 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
      v18 = a1 + v10[8];
      if (!__swift_getEnumTagSinglePayload(v18, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v18, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = a1 + v10[13];
      v20 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v19, 1, v20))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
LABEL_18:
      v9 = v10[14];
LABEL_19:
      if (!*(_QWORD *)(a1 + v9))
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_64;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = type metadata accessor for Photo(0);
      v22 = a1 + *(int *)(v21 + 44);
      v23 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v22, 1, v23))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = *(int *)(v21 + 64);
      goto LABEL_66;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = (int *)type metadata accessor for NoteDocument(0);
      v26 = a1 + v25[8];
      v27 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v26, 1, v27))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
      v28 = a1 + v25[9];
      if (!__swift_getEnumTagSinglePayload(v28, 1, v27))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v28, v27);
      v24 = v25[10];
      goto LABEL_66;
    case 5u:
      swift_bridgeObjectRelease();

      v24 = *(int *)(type metadata accessor for FileDocument(0) + 24);
      goto LABEL_66;
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = type metadata accessor for WalletTransaction(0);
      v30 = a1 + *(int *)(v29 + 28);
      v31 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v30, 1, v31))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = *(int *)(v29 + 52);
      goto LABEL_66;
    case 7u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = type metadata accessor for WalletPass(0);
      v33 = a1 + *(int *)(v32 + 28);
      v34 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v33, 1, v34))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
      swift_bridgeObjectRelease();
      v24 = *(int *)(v32 + 36);
      goto LABEL_66;
    case 8u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = *(int *)(type metadata accessor for Contact(0) + 36);
      goto LABEL_66;
    case 9u:
      swift_bridgeObjectRelease();
      v35 = (int *)type metadata accessor for FlightReservation(0);
      v36 = a1 + v35[5];
      v37 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v36, 1, v37))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = a1 + v35[11];
      if (!__swift_getEnumTagSinglePayload(v38, 1, v37))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v38, v37);
      v39 = a1 + v35[12];
      if (!__swift_getEnumTagSinglePayload(v39, 1, v37))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v39, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = a1 + v35[15];
      v41 = type metadata accessor for DateComponents();
      v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8);
      v42(v40, v41);
      v42(a1 + v35[16], v41);
      v43 = a1 + v35[17];
      v44 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v43, 1, v44))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
      v45 = a1 + v35[18];
      if (!__swift_getEnumTagSinglePayload(v45, 1, v44))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v45, v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v46 = &demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]);
      goto LABEL_63;
    case 0xAu:
      swift_bridgeObjectRelease();
      v47 = (int *)type metadata accessor for HotelReservation(0);
      v48 = a1 + v47[5];
      v49 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v48, 1, v49))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = a1 + v47[12];
      v51 = type metadata accessor for DateComponents();
      v52 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8);
      v52(v50, v51);
      v52(a1 + v47[13], v51);
      v53 = a1 + v47[14];
      v54 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v53, 1, v54))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_64;
    case 0xBu:
      swift_bridgeObjectRelease();
      v55 = (int *)type metadata accessor for RestaurantReservation(0);
      v56 = a1 + v55[5];
      v57 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v56, 1, v57))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = a1 + v55[12];
      v59 = type metadata accessor for DateComponents();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
      swift_bridgeObjectRelease();
      v60 = a1 + v55[14];
      v61 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v60, 1, v61))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v60, v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_64;
    case 0xCu:
      swift_bridgeObjectRelease();
      v62 = type metadata accessor for GlobalItem();
      v63 = a1 + *(int *)(v62 + 20);
      v64 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v63, 1, v64))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v63, v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v65 = (uint64_t *)(a1 + *(int *)(v62 + 32));
      v66 = v65[1];
      if (v66 >> 60 != 15)
        outlined consume of Data._Representation(*v65, v66);
      v46 = &demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]);
LABEL_63:
      __swift_instantiateConcreteTypeFromMangledName(v46);
LABEL_64:
      swift_bridgeObjectRelease();
      break;
    case 0xDu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = *(int *)(type metadata accessor for AppEntityItem() + 32);
LABEL_66:
      v67 = a1 + v24;
      v68 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v67, 1, v68))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v67, v68);
      break;
    case 0xEu:
      swift_bridgeObjectRelease();
      v69 = type metadata accessor for IntentFileItem();
      v70 = a1 + *(int *)(v69 + 20);
      v71 = type metadata accessor for URL();
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v70, 1, v71);
      v73 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8);
      if (!EnumTagSinglePayload)
        v73(v70, v71);
      v73(a1 + *(int *)(v69 + 24), v71);
      break;
    case 0xFu:
      swift_bridgeObjectRelease();
      v74 = type metadata accessor for Answer(0);
      v75 = a1 + *(int *)(v74 + 20);
      v76 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v75, 1, v76))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v75, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v77 = a1 + *(int *)(v74 + 40);
      if (!__swift_getEnumTagSinglePayload(v77, 1, v76))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v77, v76);
      break;
    default:
      break;
  }

  return swift_bridgeObjectRelease();
}

void initializeWithCopy for SearchResult()
{
  char *v0;

  type metadata accessor for SearchResultItem(0);
  v0 = (char *)sub_24324D350 + 4 * word_243354668[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_24324D350(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__dst, void *a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  v65 = v31;
  v32 = v30[1];
  *v29 = *v30;
  v29[1] = v32;
  v33 = v30[3];
  v29[2] = v30[2];
  v29[3] = v33;
  v34 = v30[5];
  v29[4] = v30[4];
  v29[5] = v34;
  v35 = v30[7];
  v29[6] = v30[6];
  v29[7] = v35;
  v36 = v30[9];
  v29[8] = v30[8];
  v29[9] = v36;
  v64 = v30[11];
  v29[10] = v30[10];
  v29[11] = v64;
  v37 = (int *)type metadata accessor for EmailDocument(0);
  v38 = v37[12];
  v62 = (char *)v30 + v38;
  v63 = (char *)v29 + v38;
  v39 = type metadata accessor for Date();
  v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61(v63, v62, v39);
  *(_QWORD *)((char *)v29 + v37[13]) = *(_QWORD *)((char *)v30 + v37[13]);
  *(_QWORD *)((char *)v29 + v37[14]) = *(_QWORD *)((char *)v30 + v37[14]);
  *(_QWORD *)((char *)v29 + v37[15]) = *(_QWORD *)((char *)v30 + v37[15]);
  *((_BYTE *)v29 + v37[16]) = *((_BYTE *)v30 + v37[16]);
  v40 = v37[17];
  v41 = (char *)v29 + v40;
  v42 = (char *)v30 + v40;
  v43 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
  }
  v45 = v37[18];
  v46 = (_QWORD *)((char *)v29 + v45);
  v47 = (_QWORD *)((char *)v30 + v45);
  if (*v47)
  {
    v49 = v47[1];
    v50 = v47[2];
    *v46 = *v47;
    v46[1] = v49;
    v51 = v47[3];
    v52 = v47[4];
    v46[2] = v50;
    v46[3] = v51;
    v46[4] = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v48 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v48;
    v46[4] = v47[4];
  }
  swift_storeEnumTagMultiPayload();
  v53 = *(int *)(v65 + 20);
  v54 = *(int *)(v65 + 24);
  v55 = *(void **)((char *)v30 + v53);
  *(_QWORD *)((char *)v29 + v53) = v55;
  v56 = (_QWORD *)((char *)v29 + v54);
  v57 = (_QWORD *)((char *)v30 + v54);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = v55;
  swift_bridgeObjectRetain();
  return v29;
}

uint64_t assignWithCopy for SearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a1 != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1(a1, type metadata accessor for SearchResultItem);
    type metadata accessor for SearchResultItem(0);
    v6 = (char *)&loc_24324EFEC + 4 * word_243354688[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = v9;

  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void initializeWithTake for SearchResult()
{
  char *v0;

  type metadata accessor for SearchResultItem(0);
  v0 = (char *)sub_243250F64 + 4 * word_2433546A8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_OWORD *sub_243250F64()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;

  v3 = v1[1];
  *v0 = *v1;
  v0[1] = v3;
  v4 = v1[3];
  v0[2] = v1[2];
  v0[3] = v4;
  v5 = v1[5];
  v0[4] = v1[4];
  v0[5] = v5;
  v6 = (int *)type metadata accessor for EmailDocument(0);
  v7 = v6[12];
  v8 = (char *)v0 + v7;
  v9 = (char *)v1 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)((char *)v0 + v6[13]) = *(_QWORD *)((char *)v1 + v6[13]);
  *(_QWORD *)((char *)v0 + v6[14]) = *(_QWORD *)((char *)v1 + v6[14]);
  *(_QWORD *)((char *)v0 + v6[15]) = *(_QWORD *)((char *)v1 + v6[15]);
  *((_BYTE *)v0 + v6[16]) = *((_BYTE *)v1 + v6[16]);
  v11 = v6[17];
  v12 = (char *)v0 + v11;
  v13 = (char *)v1 + v11;
  v14 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  v16 = v6[18];
  v17 = (char *)v0 + v16;
  v18 = (char *)v1 + v16;
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  swift_storeEnumTagMultiPayload();
  v20 = *(int *)(v2 + 24);
  *(_QWORD *)((char *)v0 + *(int *)(v2 + 20)) = *(_QWORD *)((char *)v1 + *(int *)(v2 + 20));
  *(_OWORD *)((char *)v0 + v20) = *(_OWORD *)((char *)v1 + v20);
  return v0;
}

uint64_t assignWithTake for SearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1(a1, type metadata accessor for SearchResultItem);
    type metadata accessor for SearchResultItem(0);
    v6 = (char *)&loc_2432522F8 + 4 * word_2433546C8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for SearchResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for SearchResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SearchResultItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchResult.JSONIntermediate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for SearchResultItem(0);
    v5 = (char *)&loc_24325373C + 4 * word_2433546E8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for SearchResult.JSONIntermediate(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int EnumTagSinglePayload;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  type metadata accessor for SearchResultItem(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = (int *)type metadata accessor for EmailDocument(0);
      v3 = a1 + v2[12];
      v4 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = a1 + v2[17];
      v6 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v5, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      v7 = v2[18];
      goto LABEL_19;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = (int *)type metadata accessor for MobileSMSDocument(0);
      v9 = a1 + v8[10];
      v10 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
      v11 = a1 + v8[11];
      v12 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v11, 1, v12))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      v13 = a1 + v8[12];
      if (!__swift_getEnumTagSinglePayload(v13, 1, v12))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v13, v12);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = (int *)type metadata accessor for CalendarEvent(0);
      v14 = a1 + v8[7];
      v15 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v14, 1, v15))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
      v16 = a1 + v8[8];
      if (!__swift_getEnumTagSinglePayload(v16, 1, v15))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v16, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = a1 + v8[13];
      v18 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v17, 1, v18))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
LABEL_18:
      v7 = v8[14];
LABEL_19:
      if (!*(_QWORD *)(a1 + v7))
        return swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_64;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = type metadata accessor for Photo(0);
      v20 = a1 + *(int *)(v19 + 44);
      v21 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v20, 1, v21))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = *(int *)(v19 + 64);
      goto LABEL_66;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = (int *)type metadata accessor for NoteDocument(0);
      v24 = a1 + v23[8];
      v25 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v24, 1, v25))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
      v26 = a1 + v23[9];
      if (!__swift_getEnumTagSinglePayload(v26, 1, v25))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v26, v25);
      v22 = v23[10];
      goto LABEL_66;
    case 5u:
      swift_bridgeObjectRelease();

      v22 = *(int *)(type metadata accessor for FileDocument(0) + 24);
      goto LABEL_66;
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = type metadata accessor for WalletTransaction(0);
      v28 = a1 + *(int *)(v27 + 28);
      v29 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v28, 1, v29))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = *(int *)(v27 + 52);
      goto LABEL_66;
    case 7u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = type metadata accessor for WalletPass(0);
      v31 = a1 + *(int *)(v30 + 28);
      v32 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v31, 1, v32))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
      swift_bridgeObjectRelease();
      v22 = *(int *)(v30 + 36);
      goto LABEL_66;
    case 8u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = *(int *)(type metadata accessor for Contact(0) + 36);
      goto LABEL_66;
    case 9u:
      swift_bridgeObjectRelease();
      v33 = (int *)type metadata accessor for FlightReservation(0);
      v34 = a1 + v33[5];
      v35 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v34, 1, v35))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = a1 + v33[11];
      if (!__swift_getEnumTagSinglePayload(v36, 1, v35))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v36, v35);
      v37 = a1 + v33[12];
      if (!__swift_getEnumTagSinglePayload(v37, 1, v35))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v37, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = a1 + v33[15];
      v39 = type metadata accessor for DateComponents();
      v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8);
      v40(v38, v39);
      v40(a1 + v33[16], v39);
      v41 = a1 + v33[17];
      v42 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v41, 1, v42))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
      v43 = a1 + v33[18];
      if (!__swift_getEnumTagSinglePayload(v43, 1, v42))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v43, v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44 = &demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]);
      goto LABEL_63;
    case 0xAu:
      swift_bridgeObjectRelease();
      v45 = (int *)type metadata accessor for HotelReservation(0);
      v46 = a1 + v45[5];
      v47 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v46, 1, v47))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = a1 + v45[12];
      v49 = type metadata accessor for DateComponents();
      v50 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8);
      v50(v48, v49);
      v50(a1 + v45[13], v49);
      v51 = a1 + v45[14];
      v52 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v51, 1, v52))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_64;
    case 0xBu:
      swift_bridgeObjectRelease();
      v53 = (int *)type metadata accessor for RestaurantReservation(0);
      v54 = a1 + v53[5];
      v55 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v54, 1, v55))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v56 = a1 + v53[12];
      v57 = type metadata accessor for DateComponents();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
      swift_bridgeObjectRelease();
      v58 = a1 + v53[14];
      v59 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v58, 1, v59))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_64;
    case 0xCu:
      swift_bridgeObjectRelease();
      v60 = type metadata accessor for GlobalItem();
      v61 = a1 + *(int *)(v60 + 20);
      v62 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v61, 1, v62))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v61, v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = (uint64_t *)(a1 + *(int *)(v60 + 32));
      v64 = v63[1];
      if (v64 >> 60 != 15)
        outlined consume of Data._Representation(*v63, v64);
      v44 = &demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]);
LABEL_63:
      __swift_instantiateConcreteTypeFromMangledName(v44);
LABEL_64:
      swift_bridgeObjectRelease();
      break;
    case 0xDu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = *(int *)(type metadata accessor for AppEntityItem() + 32);
LABEL_66:
      v65 = a1 + v22;
      v66 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v65, 1, v66))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v65, v66);
      break;
    case 0xEu:
      swift_bridgeObjectRelease();
      v67 = type metadata accessor for IntentFileItem();
      v68 = a1 + *(int *)(v67 + 20);
      v69 = type metadata accessor for URL();
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v68, 1, v69);
      v71 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8);
      if (!EnumTagSinglePayload)
        v71(v68, v69);
      v71(a1 + *(int *)(v67 + 24), v69);
      break;
    case 0xFu:
      swift_bridgeObjectRelease();
      v72 = type metadata accessor for Answer(0);
      v73 = a1 + *(int *)(v72 + 20);
      v74 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v73, 1, v74))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v73, v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v75 = a1 + *(int *)(v72 + 40);
      if (!__swift_getEnumTagSinglePayload(v75, 1, v74))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v75, v74);
      break;
    default:
      return swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for SearchResult.JSONIntermediate()
{
  char *v0;

  type metadata accessor for SearchResultItem(0);
  v0 = (char *)sub_243256180 + 4 * word_243354728[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_243256180(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__dst, void *a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v58 = v31;
  v32 = v30[1];
  *v29 = *v30;
  v29[1] = v32;
  v33 = v30[3];
  v29[2] = v30[2];
  v29[3] = v33;
  v34 = v30[5];
  v29[4] = v30[4];
  v29[5] = v34;
  v35 = v30[7];
  v29[6] = v30[6];
  v29[7] = v35;
  v36 = v30[9];
  v29[8] = v30[8];
  v29[9] = v36;
  v57 = v30[11];
  v29[10] = v30[10];
  v29[11] = v57;
  v37 = (int *)type metadata accessor for EmailDocument(0);
  v38 = v37[12];
  v55 = (char *)v30 + v38;
  v56 = (char *)v29 + v38;
  v39 = type metadata accessor for Date();
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54(v56, v55, v39);
  *(_QWORD *)((char *)v29 + v37[13]) = *(_QWORD *)((char *)v30 + v37[13]);
  *(_QWORD *)((char *)v29 + v37[14]) = *(_QWORD *)((char *)v30 + v37[14]);
  *(_QWORD *)((char *)v29 + v37[15]) = *(_QWORD *)((char *)v30 + v37[15]);
  *((_BYTE *)v29 + v37[16]) = *((_BYTE *)v30 + v37[16]);
  v40 = v37[17];
  v41 = (char *)v29 + v40;
  v42 = (char *)v30 + v40;
  v43 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
  }
  v45 = v37[18];
  v46 = (_QWORD *)((char *)v29 + v45);
  v47 = (_QWORD *)((char *)v30 + v45);
  if (*v47)
  {
    v49 = v47[1];
    v50 = v47[2];
    *v46 = *v47;
    v46[1] = v49;
    v51 = v47[3];
    v52 = v47[4];
    v46[2] = v50;
    v46[3] = v51;
    v46[4] = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v48 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v48;
    v46[4] = v47[4];
  }
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)v29 + *(int *)(v58 + 20)) = *(_QWORD *)((char *)v30 + *(int *)(v58 + 20));
  swift_bridgeObjectRetain();
  return v29;
}

uint64_t assignWithCopy for SearchResult.JSONIntermediate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (a1 != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1(a1, type metadata accessor for SearchResultItem);
    type metadata accessor for SearchResultItem(0);
    v4 = (char *)&loc_243257E04 + 4 * word_243354748[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void initializeWithTake for SearchResult.JSONIntermediate()
{
  char *v0;

  type metadata accessor for SearchResultItem(0);
  v0 = (char *)sub_243259D54 + 4 * word_243354768[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_OWORD *sub_243259D54()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;

  v3 = v1[1];
  *v0 = *v1;
  v0[1] = v3;
  v4 = v1[3];
  v0[2] = v1[2];
  v0[3] = v4;
  v5 = v1[5];
  v0[4] = v1[4];
  v0[5] = v5;
  v6 = (int *)type metadata accessor for EmailDocument(0);
  v7 = v6[12];
  v8 = (char *)v0 + v7;
  v9 = (char *)v1 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)((char *)v0 + v6[13]) = *(_QWORD *)((char *)v1 + v6[13]);
  *(_QWORD *)((char *)v0 + v6[14]) = *(_QWORD *)((char *)v1 + v6[14]);
  *(_QWORD *)((char *)v0 + v6[15]) = *(_QWORD *)((char *)v1 + v6[15]);
  *((_BYTE *)v0 + v6[16]) = *((_BYTE *)v1 + v6[16]);
  v11 = v6[17];
  v12 = (char *)v0 + v11;
  v13 = (char *)v1 + v11;
  v14 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  v16 = v6[18];
  v17 = (char *)v0 + v16;
  v18 = (char *)v1 + v16;
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)v0 + *(int *)(v2 + 20)) = *(_QWORD *)((char *)v1 + *(int *)(v2 + 20));
  return v0;
}

uint64_t assignWithTake for SearchResult.JSONIntermediate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (a1 != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1(a1, type metadata accessor for SearchResultItem);
    type metadata accessor for SearchResultItem(0);
    v4 = (char *)&loc_24325B0E0 + 4 * word_243354788[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResult.JSONIntermediate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultItem(0);
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    __swift_getEnumTagSinglePayload(a1, a2, v4);
  else
    OUTLINED_FUNCTION_12();
}

uint64_t storeEnumTagSinglePayload for SearchResult.JSONIntermediate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = type metadata accessor for SearchResultItem(0);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
    OUTLINED_FUNCTION_12();
  }
}

uint64_t type metadata completion function for SearchResult.JSONIntermediate()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SearchResultItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchResult.JSONIntermediate.CodingKeys()
{
  return &type metadata for SearchResult.JSONIntermediate.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchResultItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_24325C5EC + 4 * word_2433547A8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for SearchResultItem(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int EnumTagSinglePayload;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for EmailDocument(0);
      v4 = a1 + v3[12];
      v5 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = a1 + v3[17];
      v7 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      v8 = v3[18];
      goto LABEL_19;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = (int *)type metadata accessor for MobileSMSDocument(0);
      v10 = a1 + v9[10];
      v11 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v10, 1, v11))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
      v12 = a1 + v9[11];
      v13 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      v14 = a1 + v9[12];
      if (!__swift_getEnumTagSinglePayload(v14, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v14, v13);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = (int *)type metadata accessor for CalendarEvent(0);
      v15 = a1 + v9[7];
      v16 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v15, 1, v16))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      v17 = a1 + v9[8];
      if (!__swift_getEnumTagSinglePayload(v17, 1, v16))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = a1 + v9[13];
      v19 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v18, 1, v19))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
LABEL_18:
      v8 = v9[14];
LABEL_19:
      result = *(_QWORD *)(a1 + v8);
      if (!result)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = type metadata accessor for Photo(0);
      v21 = a1 + *(int *)(v20 + 44);
      v22 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v21, 1, v22))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = *(int *)(v20 + 64);
      goto LABEL_66;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = (int *)type metadata accessor for NoteDocument(0);
      v25 = a1 + v24[8];
      v26 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v25, 1, v26))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
      v27 = a1 + v24[9];
      if (!__swift_getEnumTagSinglePayload(v27, 1, v26))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v27, v26);
      v23 = v24[10];
      goto LABEL_66;
    case 5:
      swift_bridgeObjectRelease();

      v23 = *(int *)(type metadata accessor for FileDocument(0) + 24);
      goto LABEL_66;
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = type metadata accessor for WalletTransaction(0);
      v29 = a1 + *(int *)(v28 + 28);
      v30 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v29, 1, v30))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = *(int *)(v28 + 52);
      goto LABEL_66;
    case 7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = type metadata accessor for WalletPass(0);
      v32 = a1 + *(int *)(v31 + 28);
      v33 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v32, 1, v33))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      swift_bridgeObjectRelease();
      v23 = *(int *)(v31 + 36);
      goto LABEL_66;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = *(int *)(type metadata accessor for Contact(0) + 36);
      goto LABEL_66;
    case 9:
      swift_bridgeObjectRelease();
      v34 = (int *)type metadata accessor for FlightReservation(0);
      v35 = a1 + v34[5];
      v36 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v35, 1, v36))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = a1 + v34[11];
      if (!__swift_getEnumTagSinglePayload(v37, 1, v36))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v37, v36);
      v38 = a1 + v34[12];
      if (!__swift_getEnumTagSinglePayload(v38, 1, v36))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v38, v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v39 = a1 + v34[15];
      v40 = type metadata accessor for DateComponents();
      v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
      v41(v39, v40);
      v41(a1 + v34[16], v40);
      v42 = a1 + v34[17];
      v43 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v42, 1, v43))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
      v44 = a1 + v34[18];
      if (!__swift_getEnumTagSinglePayload(v44, 1, v43))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v44, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45 = &demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]);
      goto LABEL_63;
    case 10:
      swift_bridgeObjectRelease();
      v46 = (int *)type metadata accessor for HotelReservation(0);
      v47 = a1 + v46[5];
      v48 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v47, 1, v48))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v47, v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = a1 + v46[12];
      v50 = type metadata accessor for DateComponents();
      v51 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
      v51(v49, v50);
      v51(a1 + v46[13], v50);
      v52 = a1 + v46[14];
      v53 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v52, 1, v53))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 11:
      swift_bridgeObjectRelease();
      v54 = (int *)type metadata accessor for RestaurantReservation(0);
      v55 = a1 + v54[5];
      v56 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v55, 1, v56))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v57 = a1 + v54[12];
      v58 = type metadata accessor for DateComponents();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v57, v58);
      swift_bridgeObjectRelease();
      v59 = a1 + v54[14];
      v60 = type metadata accessor for TimeZone();
      if (!__swift_getEnumTagSinglePayload(v59, 1, v60))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v59, v60);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 12:
      swift_bridgeObjectRelease();
      v61 = type metadata accessor for GlobalItem();
      v62 = a1 + *(int *)(v61 + 20);
      v63 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v62, 1, v63))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v62, v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 = (uint64_t *)(a1 + *(int *)(v61 + 32));
      v65 = v64[1];
      if (v65 >> 60 != 15)
        outlined consume of Data._Representation(*v64, v65);
      v45 = &demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]);
LABEL_63:
      __swift_instantiateConcreteTypeFromMangledName(v45);
      return swift_bridgeObjectRelease();
    case 13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = *(int *)(type metadata accessor for AppEntityItem() + 32);
LABEL_66:
      v66 = a1 + v23;
      v67 = type metadata accessor for URL();
      goto LABEL_67;
    case 14:
      swift_bridgeObjectRelease();
      v71 = type metadata accessor for IntentFileItem();
      v72 = a1 + *(int *)(v71 + 20);
      v73 = type metadata accessor for URL();
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v72, 1, v73);
      v75 = *(_QWORD *)(v73 - 8);
      v68 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      if (!EnumTagSinglePayload)
      {
        v78 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
        v68(v72, v73);
        v68 = v78;
      }
      v69 = a1 + *(int *)(v71 + 24);
      v70 = v73;
      goto LABEL_73;
    case 15:
      swift_bridgeObjectRelease();
      v76 = type metadata accessor for Answer(0);
      v77 = a1 + *(int *)(v76 + 20);
      v67 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v77, 1, v67))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v77, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v66 = a1 + *(int *)(v76 + 40);
LABEL_67:
      result = __swift_getEnumTagSinglePayload(v66, 1, v67);
      if (!(_DWORD)result)
      {
        v68 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8);
        v69 = v66;
        v70 = v67;
LABEL_73:
        result = ((uint64_t (*)(uint64_t, uint64_t))v68)(v69, v70);
      }
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for SearchResultItem()
{
  char *v0;

  v0 = (char *)sub_24325F1C0 + 4 * word_2433547E8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_24325F1C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__dst, void *a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;

  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = v30[3];
  v29[2] = v30[2];
  v29[3] = v32;
  v33 = v30[5];
  v29[4] = v30[4];
  v29[5] = v33;
  v34 = v30[7];
  v29[6] = v30[6];
  v29[7] = v34;
  v35 = v30[9];
  v29[8] = v30[8];
  v29[9] = v35;
  v56 = v30[11];
  v29[10] = v30[10];
  v29[11] = v56;
  v36 = (int *)type metadata accessor for EmailDocument(0);
  v37 = v36[12];
  v54 = (char *)v30 + v37;
  v55 = (char *)v29 + v37;
  v38 = type metadata accessor for Date();
  v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53(v55, v54, v38);
  *(_QWORD *)((char *)v29 + v36[13]) = *(_QWORD *)((char *)v30 + v36[13]);
  *(_QWORD *)((char *)v29 + v36[14]) = *(_QWORD *)((char *)v30 + v36[14]);
  *(_QWORD *)((char *)v29 + v36[15]) = *(_QWORD *)((char *)v30 + v36[15]);
  *((_BYTE *)v29 + v36[16]) = *((_BYTE *)v30 + v36[16]);
  v39 = v36[17];
  v40 = (char *)v29 + v39;
  v41 = (char *)v30 + v39;
  v42 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v41, 1, v42))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
    __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v42);
  }
  v44 = v36[18];
  v45 = (_QWORD *)((char *)v29 + v44);
  v46 = (_QWORD *)((char *)v30 + v44);
  if (*v46)
  {
    v48 = v46[1];
    v49 = v46[2];
    *v45 = *v46;
    v45[1] = v48;
    v50 = v46[3];
    v51 = v46[4];
    v45[2] = v49;
    v45[3] = v50;
    v45[4] = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v47 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v47;
    v45[4] = v46[4];
  }
  swift_storeEnumTagMultiPayload();
  return v29;
}

uint64_t assignWithCopy for SearchResultItem(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1(result, type metadata accessor for SearchResultItem);
    v2 = (char *)&loc_243260DB0 + 4 * word_243354808[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for SearchResultItem()
{
  char *v0;

  v0 = (char *)sub_243262C64 + 4 * word_243354828[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_OWORD *sub_243262C64()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  v5 = (int *)type metadata accessor for EmailDocument(0);
  v6 = v5[12];
  v7 = (char *)v0 + v6;
  v8 = (char *)v1 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)v0 + v5[13]) = *(_QWORD *)((char *)v1 + v5[13]);
  *(_QWORD *)((char *)v0 + v5[14]) = *(_QWORD *)((char *)v1 + v5[14]);
  *(_QWORD *)((char *)v0 + v5[15]) = *(_QWORD *)((char *)v1 + v5[15]);
  *((_BYTE *)v0 + v5[16]) = *((_BYTE *)v1 + v5[16]);
  v10 = v5[17];
  v11 = (char *)v0 + v10;
  v12 = (char *)v1 + v10;
  v13 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  v15 = v5[18];
  v16 = (char *)v0 + v15;
  v17 = (char *)v1 + v15;
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for SearchResultItem(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1(result, type metadata accessor for SearchResultItem);
    v2 = (char *)&loc_243263FD8 + 4 * word_243354848[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata completion function for SearchResultItem()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  result = type metadata accessor for EmailDocument(319);
  if (v1 <= 0x3F)
  {
    v19 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for MobileSMSDocument(319);
    if (v2 <= 0x3F)
    {
      v20 = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for CalendarEvent(319);
      if (v3 <= 0x3F)
      {
        v21 = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for Photo(319);
        if (v4 <= 0x3F)
        {
          v22 = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for NoteDocument(319);
          if (v5 <= 0x3F)
          {
            v23 = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for FileDocument(319);
            if (v6 <= 0x3F)
            {
              v24 = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for WalletTransaction(319);
              if (v7 <= 0x3F)
              {
                v25 = *(_QWORD *)(result - 8) + 64;
                result = type metadata accessor for WalletPass(319);
                if (v8 <= 0x3F)
                {
                  v26 = *(_QWORD *)(result - 8) + 64;
                  result = type metadata accessor for Contact(319);
                  if (v9 <= 0x3F)
                  {
                    v27 = *(_QWORD *)(result - 8) + 64;
                    result = type metadata accessor for FlightReservation(319);
                    if (v10 <= 0x3F)
                    {
                      swift_getTupleTypeLayout2();
                      v28 = &v18;
                      result = type metadata accessor for HotelReservation(319);
                      if (v11 <= 0x3F)
                      {
                        v29 = *(_QWORD *)(result - 8) + 64;
                        result = type metadata accessor for RestaurantReservation(319);
                        if (v12 <= 0x3F)
                        {
                          v30 = *(_QWORD *)(result - 8) + 64;
                          result = type metadata accessor for GlobalItem();
                          if (v13 <= 0x3F)
                          {
                            swift_getTupleTypeLayout2();
                            v31 = &v17;
                            result = type metadata accessor for AppEntityItem();
                            if (v14 <= 0x3F)
                            {
                              v32 = *(_QWORD *)(result - 8) + 64;
                              result = type metadata accessor for IntentFileItem();
                              if (v15 <= 0x3F)
                              {
                                v33 = *(_QWORD *)(result - 8) + 64;
                                result = type metadata accessor for Answer(319);
                                if (v16 <= 0x3F)
                                {
                                  v34 = *(_QWORD *)(result - 8) + 64;
                                  swift_initEnumMetadataMultiPayload();
                                  return 0;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SearchResultItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 15) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v5 = v6 - 16;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchResultItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_2432655F8 + 4 * byte_24335486D[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_24326562C + 4 * byte_243354868[v4]))();
}

uint64_t sub_24326562C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243265634(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24326563CLL);
  return result;
}

uint64_t sub_243265648(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243265650);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_243265654(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24326565C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchResultItem.CodingKeys()
{
  return &type metadata for SearchResultItem.CodingKeys;
}

void *type metadata accessor for SearchResultItem.EmailCodingKeys()
{
  return &unk_2513CE2C8;
}

void *type metadata accessor for SearchResultItem.MobileSMSCodingKeys()
{
  return &unk_2513CE358;
}

void *type metadata accessor for SearchResultItem.CalendarCodingKeys()
{
  return &unk_2513CE3E8;
}

void *type metadata accessor for SearchResultItem.PhotoCodingKeys()
{
  return &unk_2513CE478;
}

void *type metadata accessor for SearchResultItem.NoteCodingKeys()
{
  return &unk_2513CE508;
}

void *type metadata accessor for SearchResultItem.FileCodingKeys()
{
  return &unk_2513CE598;
}

void *type metadata accessor for SearchResultItem.WalletTransactionCodingKeys()
{
  return &unk_2513CE628;
}

void *type metadata accessor for SearchResultItem.WalletPassCodingKeys()
{
  return &unk_2513CE6B8;
}

void *type metadata accessor for SearchResultItem.ContactCodingKeys()
{
  return &unk_2513CE748;
}

void *type metadata accessor for SearchResultItem.FlightReservationCodingKeys()
{
  return &unk_2513CE7D8;
}

void *type metadata accessor for SearchResultItem.HotelReservationCodingKeys()
{
  return &unk_2513CE868;
}

void *type metadata accessor for SearchResultItem.RestaurantReservationCodingKeys()
{
  return &unk_2513CE8F8;
}

uint64_t storeEnumTagSinglePayload for SearchResult.JSONIntermediate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24326578C + 4 * byte_243354877[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2432657C0 + 4 * byte_243354872[v4]))();
}

uint64_t sub_2432657C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432657C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432657D0);
  return result;
}

uint64_t sub_2432657DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432657E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2432657E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432657F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SearchResultItem.GlobalResultCodingKeys()
{
  return &unk_2513CE988;
}

void *type metadata accessor for SearchResultItem.AppEntityCodingKeys()
{
  return &unk_2513CEA18;
}

void *type metadata accessor for SearchResultItem.IntentFileCodingKeys()
{
  return &unk_2513CEAA8;
}

uint64_t storeEnumTagSinglePayload for SearchResultItem.EmailCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24326586C + 4 * byte_24335487C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24326588C + 4 * byte_243354881[v4]))();
}

_BYTE *sub_24326586C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24326588C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_243265894(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24326589C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2432658A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2432658AC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for SearchResultItem.AnswerCodingKeys()
{
  return &unk_2513CEB38;
}

uint64_t storeEnumTagSinglePayload for SearchResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_243265914 + 4 * byte_24335488B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_243265948 + 4 * byte_243354886[v4]))();
}

uint64_t sub_243265948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243265950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243265958);
  return result;
}

uint64_t sub_243265964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24326596CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_243265970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243265978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SearchResult.CodingKeys()
{
  return &unk_2513CEBC8;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  id v26;
  Swift::String v27;
  Swift::String v28;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  while (1)
  {
    v7 = *(v5 - 3);
    v6 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    v16 = v11;
    if (v10[3] < v15)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v20 = (uint64_t *)(v19[6] + 16 * v12);
    *v20 = v7;
    v20[1] = v6;
    v21 = (_QWORD *)(v19[7] + 16 * v12);
    *v21 = v9;
    v21[1] = v8;
    v22 = v19[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_18;
    v5 += 4;
    v19[2] = v24;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) != (v18 & 1))
    goto LABEL_19;
  v12 = v17;
  if ((v16 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v25 = (void *)swift_allocError();
  swift_willThrow();
  v26 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v27._object = (void *)0x800000024335DB40;
  v27._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)();
  v28._countAndFlagsBits = 39;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_3_16(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_4_25()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_22()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 536), *(_QWORD *)(v1 - 112));
}

void OUTLINED_FUNCTION_6_23()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of SearchResult(v1, *(_QWORD *)(v2 - 104), v0);
}

uint64_t OUTLINED_FUNCTION_7_24()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_8_16@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_9_18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_10_17()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_11_17(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of SearchResult(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_12_20()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_13_22(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of SearchResult(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_14_13()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_15_17()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_16_22(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of SearchResult(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_20_14()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_22_15@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return __swift_getEnumTagSinglePayload(a1, a2, *(_QWORD *)(a3 - 256));
}

uint64_t OUTLINED_FUNCTION_23_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void OUTLINED_FUNCTION_24_12(_QWORD *a1)
{
  void (*v1)(uint64_t);

  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(a1, v1);
}

uint64_t OUTLINED_FUNCTION_27_15()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_28_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void OUTLINED_FUNCTION_29_12(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  outlined destroy of MobileSMSDocument?(*(_QWORD *)(a2 - 256), a1);
}

uint64_t OUTLINED_FUNCTION_30_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_33_10@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t OUTLINED_FUNCTION_36_13()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_37_8()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_38_12()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_40_8(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  outlined init with copy of SearchResult(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

_QWORD *OUTLINED_FUNCTION_41_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return __swift_project_boxed_opaque_existential_1(&a10, a13);
}

uint64_t OUTLINED_FUNCTION_44_13()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_45_11@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 352) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_46_11@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 392) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_47_13@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 480) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_50_11()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void OUTLINED_FUNCTION_51_9(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of SearchResult(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_54_11@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_58_9()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_61_6()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_62_8()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

void OUTLINED_FUNCTION_63_10(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_64_7(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_66_11()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_67_10()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_68_10()
{
  SearchResultItem.associatedValue.getter();
}

void OUTLINED_FUNCTION_69_8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  _s10OmniSearch0B6ResultVWOhTm_1(a1, v1);
}

void OUTLINED_FUNCTION_71_10()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with copy of SearchResult(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_72_7@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_76_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_77_9(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 80) = *(_QWORD *)(v1 + *(int *)(result + 20));
  *(_BYTE *)(v2 - 81) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_80_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for RestaurantReservation(0);
}

uint64_t OUTLINED_FUNCTION_81_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for FileDocument(0);
}

uint64_t OUTLINED_FUNCTION_82_10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for WalletTransaction(0);
}

void OUTLINED_FUNCTION_89_12(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of SearchResult(a1, a2, v2);
}

void OUTLINED_FUNCTION_90_6(_QWORD *a1)
{
  void (*v1)(uint64_t);

  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting(a1, v1);
}

uint64_t OUTLINED_FUNCTION_95_7()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_101_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_105_9()
{
  return swift_retain();
}

unint64_t OUTLINED_FUNCTION_107_5()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(v0, v1);
  return lazy protocol witness table accessor for type SearchResultItem.CodingKeys and conformance SearchResultItem.CodingKeys();
}

uint64_t OUTLINED_FUNCTION_108_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + v1) = a1;
  return v2;
}

void OUTLINED_FUNCTION_109_5()
{
  JUMPOUT(0x2494F62E4);
}

uint64_t Logging.searchSignposter.unsafeMutableAddressor()
{
  return Logging.searchSignposter.unsafeMutableAddressor(&one-time initialization token for searchSignposter, (uint64_t (*)(_QWORD))MEMORY[0x24BEE77F0], (uint64_t)static Logging.searchSignposter);
}

uint64_t Logging.search.unsafeMutableAddressor()
{
  return Logging.searchSignposter.unsafeMutableAddressor(&one-time initialization token for search, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.search);
}

uint64_t Logging.searchSignposter.unsafeMutableAddressor(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = a2(0);
  return __swift_project_value_buffer(v5, a3);
}

uint64_t Logging.stextension.unsafeMutableAddressor()
{
  return Logging.searchSignposter.unsafeMutableAddressor(&one-time initialization token for stextension, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.stextension);
}

uint64_t Logging.memoryCreationQU.unsafeMutableAddressor()
{
  return Logging.searchSignposter.unsafeMutableAddressor(&one-time initialization token for memoryCreationQU, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.memoryCreationQU);
}

uint64_t Logging.utilities.unsafeMutableAddressor()
{
  return Logging.searchSignposter.unsafeMutableAddressor(&one-time initialization token for utilities, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.utilities);
}

uint64_t one-time initialization function for interface(uint64_t a1)
{
  return one-time initialization function for interface(a1, static Logging.interface);
}

uint64_t Logging.interface.unsafeMutableAddressor()
{
  return Logging.searchSignposter.unsafeMutableAddressor(&one-time initialization token for interface, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.interface);
}

uint64_t static Logging.interface.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for interface, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.interface, a1);
}

uint64_t one-time initialization function for search(uint64_t a1)
{
  return one-time initialization function for interface(a1, static Logging.search);
}

uint64_t static Logging.search.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for search, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.search, a1);
}

uint64_t one-time initialization function for utilities(uint64_t a1)
{
  return one-time initialization function for interface(a1, static Logging.utilities);
}

uint64_t static Logging.utilities.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for utilities, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.utilities, a1);
}

uint64_t one-time initialization function for stextension(uint64_t a1)
{
  return one-time initialization function for interface(a1, static Logging.stextension);
}

uint64_t static Logging.stextension.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for stextension, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.stextension, a1);
}

uint64_t one-time initialization function for memoryCreationQU(uint64_t a1)
{
  return one-time initialization function for interface(a1, static Logging.memoryCreationQU);
}

uint64_t one-time initialization function for interface(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logging.memoryCreationQU.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for memoryCreationQU, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logging.memoryCreationQU, a1);
}

uint64_t one-time initialization function for searchSignposter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v4, static Logging.searchSignposter);
  __swift_project_value_buffer(v4, (uint64_t)static Logging.searchSignposter);
  if (one-time initialization token for search != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)static Logging.search);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

uint64_t static Logging.searchSignposter.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for searchSignposter, (uint64_t (*)(_QWORD))MEMORY[0x24BEE77F0], (uint64_t)static Logging.searchSignposter, a1);
}

ValueMetadata *type metadata accessor for Logging()
{
  return &type metadata for Logging;
}

Swift::String __swiftcall Encodable.oms_jsonPrettyPrinted()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v0 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_2();
  if (one-time initialization token for iso8601PrettyPrinted != -1)
    swift_once();
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  static String.Encoding.utf8.getter();
  v1 = String.init(data:encoding:)();
  if (v2)
  {
    v3 = v1;
    v4 = v2;
    OUTLINED_FUNCTION_89_7();
  }
  else
  {
    OUTLINED_FUNCTION_89_7();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  v5 = v3;
  v6 = (void *)v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t one-time initialization function for shared()
{
  uint64_t result;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  result = JSONEncoder.init()();
  static JSONEncoder.shared = result;
  return result;
}

uint64_t *JSONEncoder.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static JSONEncoder.shared;
}

uint64_t static JSONEncoder.shared.getter()
{
  return static JSONEncoder.shared.getter(&one-time initialization token for shared);
}

uint64_t one-time initialization function for iso8601()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  _QWORD v12[2];

  v0 = type metadata accessor for JSONEncoder.KeyEncodingStrategy();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDCB358], v7);
  v12[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [JSONEncoder.OutputFormatting]);
  lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCB2F0], v0);
  result = JSONEncoder.init(dateEncodingStrategy:outputFormatting:keyEncodingStrategy:)((uint64_t)v10, (uint64_t)v6, (uint64_t)v3);
  static JSONEncoder.iso8601 = result;
  return result;
}

uint64_t JSONEncoder.init(dateEncodingStrategy:outputFormatting:keyEncodingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v22;

  v22 = type metadata accessor for JSONEncoder.KeyEncodingStrategy();
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_2_2();
  v7 = v6 - v5;
  v8 = type metadata accessor for JSONEncoder.OutputFormatting();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_2_2();
  v12 = v11 - v10;
  v13 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_2_2();
  v17 = v16 - v15;
  v18 = dispatch thunk of JSONEncoder.__allocating_init()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  swift_retain();
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a3, v22);
  dispatch thunk of JSONEncoder.keyEncodingStrategy.setter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a3, v22);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v18;
}

uint64_t *JSONEncoder.iso8601.unsafeMutableAddressor()
{
  if (one-time initialization token for iso8601 != -1)
    swift_once();
  return &static JSONEncoder.iso8601;
}

uint64_t static JSONEncoder.iso8601.getter()
{
  return static JSONEncoder.shared.getter(&one-time initialization token for iso8601);
}

uint64_t one-time initialization function for iso8601PrettyPrinted()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v0 = type metadata accessor for JSONEncoder.KeyEncodingStrategy();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_2();
  v4 = v3 - v2;
  v5 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_2_2();
  v8 = v7 - v6;
  v9 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_2();
  v13 = v12 - v11;
  type metadata accessor for JSONEncoder();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v13, *MEMORY[0x24BDCB358], v9);
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x24BDCB2F0], v0);
  result = JSONEncoder.init(dateEncodingStrategy:outputFormatting:keyEncodingStrategy:)(v13, v8, v4);
  static JSONEncoder.iso8601PrettyPrinted = result;
  return result;
}

uint64_t *JSONEncoder.iso8601PrettyPrinted.unsafeMutableAddressor()
{
  if (one-time initialization token for iso8601PrettyPrinted != -1)
    swift_once();
  return &static JSONEncoder.iso8601PrettyPrinted;
}

uint64_t static JSONEncoder.iso8601PrettyPrinted.getter()
{
  return static JSONEncoder.shared.getter(&one-time initialization token for iso8601PrettyPrinted);
}

uint64_t static JSONEncoder.shared.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    v1 = type metadata accessor for JSONEncoder.OutputFormatting();
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BDCB2C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [JSONEncoder.OutputFormatting] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [JSONEncoder.OutputFormatting] and conformance [A];
  if (!lazy protocol witness table cache variable for type [JSONEncoder.OutputFormatting] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [JSONEncoder.OutputFormatting]);
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [JSONEncoder.OutputFormatting] and conformance [A]);
  }
  return result;
}

uint64_t KGDocument.init(id:url:description:title:subtitle:thumbnail:attributionTitle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  _QWORD *v25;

  *a9 = a1;
  a9[1] = a2;
  v20 = (int *)OUTLINED_FUNCTION_0_24();
  outlined init with take of URL?(a3, (uint64_t)a9 + v20[5]);
  v21 = (_QWORD *)((char *)a9 + v20[6]);
  *v21 = a4;
  v21[1] = a5;
  v22 = (_QWORD *)((char *)a9 + v20[7]);
  *v22 = a6;
  v22[1] = a7;
  v23 = (_QWORD *)((char *)a9 + v20[8]);
  *v23 = a8;
  v23[1] = a10;
  result = outlined init with take of URL?(a11, (uint64_t)a9 + v20[9]);
  v25 = (_QWORD *)((char *)a9 + v20[10]);
  *v25 = a12;
  v25[1] = a13;
  return result;
}

uint64_t type metadata accessor for KGDocument()
{
  uint64_t result;

  result = type metadata singleton initialization cache for KGDocument;
  if (!type metadata singleton initialization cache for KGDocument)
    return swift_getSingletonMetadata();
  return result;
}

void KGDocument.id.getter()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void KGDocument.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*KGDocument.id.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t KGDocument.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_24();
  return OUTLINED_FUNCTION_11_18(v1 + *(int *)(v3 + 20), a1);
}

uint64_t KGDocument.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_24();
  return OUTLINED_FUNCTION_122_1(a1, v1 + *(int *)(v3 + 20));
}

uint64_t (*KGDocument.url.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_24();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void KGDocument.description.getter()
{
  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void KGDocument.description.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_129_0();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*KGDocument.description.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_24();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void KGDocument.title.getter()
{
  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void KGDocument.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_129_0();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*KGDocument.title.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_24();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void KGDocument.subtitle.getter()
{
  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void KGDocument.subtitle.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_129_0();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*KGDocument.subtitle.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_24();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t KGDocument.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_24();
  return OUTLINED_FUNCTION_11_18(v1 + *(int *)(v3 + 36), a1);
}

uint64_t KGDocument.thumbnail.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_24();
  return OUTLINED_FUNCTION_122_1(a1, v1 + *(int *)(v3 + 36));
}

uint64_t (*KGDocument.thumbnail.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_24();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void KGDocument.attributionTitle.getter()
{
  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void KGDocument.attributionTitle.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_129_0();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*KGDocument.attributionTitle.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_24();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t KGDocument.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v11;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x656C746974627573 && a2 == 0xE800000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x69616E626D756874 && a2 == 0xE90000000000006CLL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x800000024335DBA0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v11 & 1) != 0)
                return 6;
              else
                return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t KGDocument.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_243268054
                                                            + 4 * asc_2433560D8[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_243268054()
{
  return 7107189;
}

uint64_t sub_243268064()
{
  return 0x7470697263736564;
}

uint64_t sub_243268084()
{
  return 0x656C746974;
}

uint64_t sub_243268098()
{
  return 0x656C746974627573;
}

uint64_t sub_2432680B0()
{
  return 0x69616E626D756874;
}

unint64_t sub_2432680CC()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance KGDocument.CodingKeys()
{
  unsigned __int8 *v0;

  return KGDocument.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance KGDocument.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = KGDocument.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance KGDocument.CodingKeys()
{
  lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance KGDocument.CodingKeys()
{
  lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void KGDocument.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<KGDocument.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_1();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_1_7();
  if (!v1)
  {
    v6 = (int *)type metadata accessor for KGDocument();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    OUTLINED_FUNCTION_7_25();
    OUTLINED_FUNCTION_110_2(v6[6]);
    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_110_2(v6[7]);
    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_110_2(v6[8]);
    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_7_25();
    OUTLINED_FUNCTION_110_2(v6[10]);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  OUTLINED_FUNCTION_1_1();
}

unint64_t lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for KGDocument.CodingKeys, &unk_2513CED90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for KGDocument.CodingKeys, &unk_2513CED90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for KGDocument.CodingKeys, &unk_2513CED90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for KGDocument.CodingKeys, &unk_2513CED90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

void KGDocument.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v37 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v36 - v7;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<KGDocument.CodingKeys>);
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_3_1();
  v9 = type metadata accessor for KGDocument();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (uint64_t)v12 + *(int *)(v10 + 20);
  type metadata accessor for URL();
  v44 = v13;
  OUTLINED_FUNCTION_14_14(v13);
  v43 = (char *)v12 + *(int *)(v9 + 36);
  OUTLINED_FUNCTION_14_14((uint64_t)v43);
  v14 = *(int *)(v9 + 40);
  v45 = v12;
  v15 = (char *)v12 + v14;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v40 = (int *)v9;
  v41 = v15;
  v16 = a1[3];
  v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  v17 = (uint64_t)v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    outlined destroy of URL?(v44);
    outlined destroy of URL?((uint64_t)v43);
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = v6;
    v52 = 0;
    v18 = KeyedDecodingContainer.decode(_:forKey:)();
    v19 = v45;
    *v45 = v18;
    v19[1] = v20;
    v51 = 1;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v21 = v40;
    outlined assign with take of URL?((uint64_t)v8, v44);
    v50 = 2;
    v22 = OUTLINED_FUNCTION_9_19();
    v23 = (uint64_t)v45;
    v24 = (uint64_t *)((char *)v45 + v21[6]);
    *v24 = v22;
    v24[1] = v25;
    v49 = 3;
    v26 = OUTLINED_FUNCTION_9_19();
    v27 = (uint64_t *)(v23 + v21[7]);
    *v27 = v26;
    v27[1] = v28;
    v48 = 4;
    v29 = OUTLINED_FUNCTION_9_19();
    v30 = (uint64_t *)(v23 + v21[8]);
    *v30 = v29;
    v30[1] = v31;
    v47 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of URL?((uint64_t)v42, (uint64_t)v43);
    v46 = 6;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v34 = v33;
    OUTLINED_FUNCTION_1_24();
    v35 = (uint64_t *)v41;
    swift_bridgeObjectRelease();
    *v35 = v32;
    v35[1] = v34;
    outlined init with copy of KGDocument(v23, v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    outlined destroy of KGDocument(v23);
  }
  OUTLINED_FUNCTION_1_1();
}

uint64_t outlined init with copy of KGDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KGDocument();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of KGDocument(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KGDocument();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for KGDocument(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type KGDocument and conformance KGDocument, (uint64_t (*)(uint64_t))type metadata accessor for KGDocument, (uint64_t)&protocol conformance descriptor for KGDocument);
  a1[2] = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type KGDocument and conformance KGDocument, (uint64_t (*)(uint64_t))type metadata accessor for KGDocument, (uint64_t)&protocol conformance descriptor for KGDocument);
  result = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type KGDocument and conformance KGDocument, (uint64_t (*)(uint64_t))type metadata accessor for KGDocument, (uint64_t)&protocol conformance descriptor for KGDocument);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance KGDocument(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  KGDocument.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance KGDocument(_QWORD *a1)
{
  KGDocument.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for KGDocument(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (uint64_t *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (uint64_t *)((char *)v4 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[8];
    v23 = a3[9];
    v24 = (uint64_t *)((char *)v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (char *)v4 + v23;
    v28 = (char *)a2 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v28, 1, v11))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v27, v28, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v11);
    }
    v30 = a3[10];
    v31 = (uint64_t *)((char *)v4 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for KGDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 36);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for KGDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (char *)a1 + v21;
  v26 = (char *)a2 + v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v10))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v25, v26, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v10);
  }
  v28 = a3[10];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for KGDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v23, 1, v9);
  v27 = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v9);
  if (!v26)
  {
    v28 = *(_QWORD *)(v9 - 8);
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v24, v25, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v9);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v24, v25, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v9);
LABEL_13:
  v30 = a3[10];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for KGDocument(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v12, 1, v9))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v13, v14, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *assignWithTake for KGDocument(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[9];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v30, 1, v10);
  v34 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v10);
  if (!v33)
  {
    v35 = *(_QWORD *)(v10 - 8);
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v31, v32, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v10);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v31, v32, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v10);
LABEL_13:
  v37 = a3[10];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KGDocument()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2432692F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for KGDocument()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243269374(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    __swift_storeEnumTagSinglePayload(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

void type metadata completion function for KGDocument()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for KGDocument.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_2432694AC + 4 * byte_2433560E4[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2432694E0 + 4 * byte_2433560DF[v4]))();
}

uint64_t sub_2432694E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432694E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432694F0);
  return result;
}

uint64_t sub_2432694FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243269504);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_243269508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243269510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for KGDocument.CodingKeys()
{
  return &unk_2513CED90;
}

uint64_t OUTLINED_FUNCTION_0_24()
{
  return type metadata accessor for KGDocument();
}

uint64_t OUTLINED_FUNCTION_1_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_7_25()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_8_17()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9_19()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_11_18(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of URL?(a1, a2);
}

uint64_t OUTLINED_FUNCTION_14_14(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

void SearchGlobalEntity.asNLGEntity.getter()
{
  SearchNLGEntity.init()();
}

uint64_t sub_243269664()
{
  SearchGlobalEntity.domain.getter();
  return EntityProperty.wrappedValue.setter();
}

void protocol witness for ValidatableEntity.validateParameters() in conformance SearchGlobalEntity()
{
  SearchGlobalEntity.validateParameters()();
}

uint64_t *AnswerSynthesisController.supportedTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedTypes != -1)
    swift_once();
  return &static AnswerSynthesisController.supportedTypes;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_Say10OmniSearch0G6ResultVGs5NeverOTg506_sSa10fg5AA0B6h22VRszlE7chunked4intoSayP18ACGGSi_tFAFSiXEfU_ALSiTf1cn_n(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  BOOL v37;
  uint64_t result;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = a3;
  v7 = a1;
  v8 = specialized StrideTo.underestimatedCount.getter(a1, a2, a3);
  v65 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v65;
    if (v8)
    {
      while (1)
      {
        v10 = v7 <= a2;
        if (v6 > 0)
          v10 = v7 >= a2;
        if (v10)
          break;
        v11 = v6;
        if (__OFADD__(v7, v6))
          v12 = ((v7 + v6) >> 63) ^ 0x8000000000000000;
        else
          v12 = v7 + v6;
        if (__OFADD__(v7, a5))
          goto LABEL_81;
        if (*(_QWORD *)(a4 + 16) >= v7 + a5)
          v13 = v7 + a5;
        else
          v13 = *(_QWORD *)(a4 + 16);
        if (v13 < v7)
          goto LABEL_82;
        if (v7 < 0)
          goto LABEL_83;
        v63 = v9;
        v64 = v13 - v7;
        v14 = v11;
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        v15 = a4;
        v16 = swift_dynamicCastClass();
        if (!v16)
        {
          swift_bridgeObjectRelease();
          v16 = MEMORY[0x24BEE4AF8];
        }
        v17 = *(_QWORD *)(v16 + 16);
        swift_release();
        v26 = v17 == v64;
        v18 = v12;
        a4 = v15;
        if (v26)
        {
          v19 = (_QWORD *)swift_dynamicCastClass();
          v6 = v14;
          v9 = v63;
          if (!v19)
          {
            swift_bridgeObjectRelease();
            v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
          v6 = v14;
          v9 = v63;
          if (v13 != v7)
          {
            v21 = v13 - v7;
            if (v64 < 1)
            {
              if (v64 < 0)
                goto LABEL_92;
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchResult>);
              v22 = *(_QWORD *)(type metadata accessor for SearchResult(0) - 8);
              v23 = *(_QWORD *)(v22 + 72);
              v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
              v19 = (_QWORD *)swift_allocObject();
              v25 = _swift_stdlib_malloc_size(v19);
              if (!v23)
                goto LABEL_88;
              v26 = v25 - v24 == 0x8000000000000000 && v23 == -1;
              if (v26)
                goto LABEL_90;
              v27 = 2 * ((uint64_t)(v25 - v24) / v23);
              v21 = v64;
              v19[2] = v64;
              v19[3] = v27;
            }
            v28 = *(_QWORD *)(type metadata accessor for SearchResult(0) - 8);
            v29 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
            v30 = (char *)v19 + v29;
            v31 = *(_QWORD *)(v28 + 72);
            v32 = a4 + v29 + v31 * v7;
            v33 = v31 * v21;
            v34 = (char *)v19 + v29 + v33;
            v35 = v32 + v33;
            if (v32 < (unint64_t)v34 && (unint64_t)v30 < v35)
              goto LABEL_92;
            swift_arrayInitWithCopy();
          }
        }
        swift_bridgeObjectRelease();
        v20 = *(_QWORD *)(v9 + 16);
        if (v20 >= *(_QWORD *)(v9 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        *(_QWORD *)(v9 + 16) = v20 + 1;
        *(_QWORD *)(v9 + 8 * v20 + 32) = v19;
        v7 = v18;
        if (!--v8)
          goto LABEL_41;
      }
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
    }
    else
    {
      v18 = v7;
LABEL_41:
      v37 = v18 <= a2;
      if (v6 > 0)
        v37 = v18 >= a2;
      if (v37)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        return v9;
      }
      while (1)
      {
        v39 = __OFADD__(v18, v6) ? ((v18 + v6) >> 63) ^ 0x8000000000000000 : v18 + v6;
        if (__OFADD__(v18, a5))
          break;
        if (*(_QWORD *)(a4 + 16) >= v18 + a5)
          v40 = v18 + a5;
        else
          v40 = *(_QWORD *)(a4 + 16);
        v41 = v40 - v18;
        if (v40 < v18)
          goto LABEL_85;
        if (v18 < 0)
          goto LABEL_86;
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        v42 = swift_dynamicCastClass();
        if (!v42)
        {
          swift_bridgeObjectRelease();
          v42 = MEMORY[0x24BEE4AF8];
        }
        v43 = *(_QWORD *)(v42 + 16);
        swift_release();
        if (v43 == v41)
        {
          v44 = (_QWORD *)swift_dynamicCastClass();
          if (!v44)
          {
            swift_bridgeObjectRelease();
            v44 = (_QWORD *)MEMORY[0x24BEE4AF8];
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v44 = (_QWORD *)MEMORY[0x24BEE4AF8];
          if (v40 != v18)
          {
            if (v41 < 1)
            {
              if (v41 < 0)
                goto LABEL_92;
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchResult>);
              v47 = *(_QWORD *)(type metadata accessor for SearchResult(0) - 8);
              v48 = *(_QWORD *)(v47 + 72);
              v49 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
              v44 = (_QWORD *)swift_allocObject();
              v50 = _swift_stdlib_malloc_size(v44);
              if (!v48)
                goto LABEL_89;
              if (v50 - v49 == 0x8000000000000000 && v48 == -1)
                goto LABEL_91;
              v44[2] = v41;
              v44[3] = 2 * ((uint64_t)(v50 - v49) / v48);
            }
            v52 = *(_QWORD *)(type metadata accessor for SearchResult(0) - 8);
            v53 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
            v54 = (char *)v44 + v53;
            v55 = *(_QWORD *)(v52 + 72);
            v56 = a4 + v53 + v55 * v18;
            v57 = v55 * v41;
            v58 = (char *)v44 + v53 + v57;
            v59 = v56 + v57;
            if (v56 < (unint64_t)v58 && (unint64_t)v54 < v59)
              goto LABEL_92;
            swift_arrayInitWithCopy();
          }
        }
        swift_bridgeObjectRelease();
        v45 = *(_QWORD *)(v9 + 16);
        if (v45 >= *(_QWORD *)(v9 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        *(_QWORD *)(v9 + 16) = v45 + 1;
        *(_QWORD *)(v9 + 8 * v45 + 32) = v44;
        v46 = v39 <= a2;
        if (v6 > 0)
          v46 = v39 >= a2;
        v18 = v39;
        if (v46)
          goto LABEL_44;
      }
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
  }
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *one-time initialization function for shared()
{
  void *result;

  type metadata accessor for AnswerSynthesisController();
  result = (void *)AnswerSynthesisController.__allocating_init()();
  static AnswerSynthesisController.shared = result;
  return result;
}

uint64_t AnswerSynthesisController.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  _UNKNOWN **v11;

  OUTLINED_FUNCTION_97_1();
  if (static NSUserDefaults.answerSynthesisModelType.getter() == 0x6563697665446E6FLL && v1 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_36_0();
    if ((v3 & 1) == 0)
    {
      v4 = type metadata accessor for AnswerSynthesisModelServer();
      OUTLINED_FUNCTION_8();
      v10 = v4;
      v11 = &protocol witness table for AnswerSynthesisModelServer;
      v9[0] = AnswerSynthesisModelServer.init()();
      static NSUserDefaults.answerSynthesisTokenLimitServer.getter();
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v0 + 128))(v9, 0, v5);
    }
  }
  v7 = type metadata accessor for AnswerSynthesisModelOnDevice();
  OUTLINED_FUNCTION_8();
  v10 = v7;
  v11 = &protocol witness table for AnswerSynthesisModelOnDevice;
  v9[0] = AnswerSynthesisModelOnDevice.init()();
  static NSUserDefaults.answerSynthesisTokenLimitDevice.getter();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v0 + 128))(v9, 1, v8);
}

uint64_t static AnswerSynthesisController.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t one-time initialization function for supportedTypes()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static AnswerSynthesisController.supportedTypes();
  static AnswerSynthesisController.supportedTypes = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static AnswerSynthesisController.supportedTypes()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, _QWORD, uint64_t);
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE v20[24];
  ValueMetadata *v21;
  unint64_t v22;

  v0 = type metadata accessor for SearchResultType();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v19 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v20[-v4 - 8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchResultType>);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_243351420;
  v9 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v9(v8 + v7, *MEMORY[0x24BE6E208], v0);
  v9(v8 + v7 + v6, *MEMORY[0x24BE6E1D0], v0);
  v9(v8 + v7 + 2 * v6, *MEMORY[0x24BE6E200], v0);
  v9(v8 + v7 + 3 * v6, *MEMORY[0x24BE6E1F8], v0);
  v21 = &type metadata for FeatureFlag;
  v10 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v22 = v10;
  v20[0] = 5;
  v11 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if ((v11 & 1) != 0)
  {
    v9((unint64_t)v5, *MEMORY[0x24BE6E1E0], v0);
    v12 = *(_QWORD *)(v8 + 16);
    if (v12 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v8 = v17;
    }
    *(_QWORD *)(v8 + 16) = v12 + 1;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v1 + 32))(v8 + v7 + v12 * v6, v5, v0);
  }
  v21 = &type metadata for FeatureFlag;
  v22 = v10;
  v20[0] = 6;
  v13 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if ((v13 & 1) != 0)
  {
    v14 = v19;
    v9((unint64_t)v19, *MEMORY[0x24BE6E1D8], v0);
    v15 = *(_QWORD *)(v8 + 16);
    if (v15 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v8 = v18;
    }
    *(_QWORD *)(v8 + 16) = v15 + 1;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v1 + 32))(v8 + v7 + v15 * v6, v14, v0);
  }
  return v8;
}

uint64_t static AnswerSynthesisController.supportedTypes.getter()
{
  return static PostProcessingFilter.allowedList.getter(&one-time initialization token for supportedTypes);
}

uint64_t one-time initialization function for noAnswerLabels()
{
  uint64_t result;

  result = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for noAnswerLabels);
  static AnswerSynthesisController.noAnswerLabels = result;
  return result;
}

uint64_t *AnswerSynthesisController.noAnswerLabels.unsafeMutableAddressor()
{
  if (one-time initialization token for noAnswerLabels != -1)
    swift_once();
  return &static AnswerSynthesisController.noAnswerLabels;
}

uint64_t static AnswerSynthesisController.noAnswerLabels.getter()
{
  return static PostProcessingFilter.allowedList.getter(&one-time initialization token for noAnswerLabels);
}

uint64_t one-time initialization function for noExtractionLabels()
{
  uint64_t result;

  result = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for noExtractionLabels);
  static AnswerSynthesisController.noExtractionLabels = result;
  return result;
}

uint64_t *AnswerSynthesisController.noExtractionLabels.unsafeMutableAddressor()
{
  if (one-time initialization token for noExtractionLabels != -1)
    swift_once();
  return &static AnswerSynthesisController.noExtractionLabels;
}

uint64_t static AnswerSynthesisController.noExtractionLabels.getter()
{
  return static PostProcessingFilter.allowedList.getter(&one-time initialization token for noExtractionLabels);
}

uint64_t AnswerSynthesisController.modelType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t AnswerSynthesisController.answerSynthesisTokenLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

OmniSearch::AnswerSynthesisController::AnswerSynthesisModelType_optional __swiftcall AnswerSynthesisController.AnswerSynthesisModelType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  OmniSearch::AnswerSynthesisController::AnswerSynthesisModelType_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnswerSynthesisController.AnswerSynthesisModelType.init(rawValue:), v2);
  OUTLINED_FUNCTION_6_1();
  if (v3 == 1)
    v4.value = OmniSearch_AnswerSynthesisController_AnswerSynthesisModelType_onDevice;
  else
    v4.value = OmniSearch_AnswerSynthesisController_AnswerSynthesisModelType_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t AnswerSynthesisController.AnswerSynthesisModelType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6563697665446E6FLL;
  else
    return 0x726576726573;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AnswerSynthesisController.AnswerSynthesisModelType(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AnswerSynthesisController.AnswerSynthesisModelType()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnswerSynthesisController.AnswerSynthesisModelType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AnswerSynthesisController.AnswerSynthesisModelType()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::AnswerSynthesisController::AnswerSynthesisModelType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnswerSynthesisController.AnswerSynthesisModelType@<W0>(Swift::String *a1@<X0>, OmniSearch::AnswerSynthesisController::AnswerSynthesisModelType_optional *a2@<X8>)
{
  OmniSearch::AnswerSynthesisController::AnswerSynthesisModelType_optional result;

  result.value = AnswerSynthesisController.AnswerSynthesisModelType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnswerSynthesisController.AnswerSynthesisModelType@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = AnswerSynthesisController.AnswerSynthesisModelType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void AnswerSynthesisController.__allocating_init(answerSynthesisModel:modelType:answerSynthesisTokenLimit:)(__int128 *a1, char a2, uint64_t a3)
{
  char v5;

  v5 = a2 & 1;
  OUTLINED_FUNCTION_8();
  AnswerSynthesisController.init(answerSynthesisModel:modelType:answerSynthesisTokenLimit:)(a1, v5, a3);
  OUTLINED_FUNCTION_12();
}

void AnswerSynthesisController.init(answerSynthesisModel:modelType:answerSynthesisTokenLimit:)(__int128 *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  char v5;

  v5 = a2 & 1;
  outlined init with take of SageSearchClient(a1, v3 + 16);
  *(_BYTE *)(v3 + 56) = v5;
  *(_QWORD *)(v3 + 64) = a3;
  OUTLINED_FUNCTION_12();
}

uint64_t AnswerSynthesisController.createAnswerSynthesisBatchRequests(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  v5 = OUTLINED_FUNCTION_103_3();
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = OUTLINED_FUNCTION_17();
  v4[14] = OUTLINED_FUNCTION_17();
  v4[15] = OUTLINED_FUNCTION_17();
  v4[16] = OUTLINED_FUNCTION_17();
  v4[17] = type metadata accessor for SearchResultItem(0);
  v4[18] = OUTLINED_FUNCTION_18_5();
  v6 = type metadata accessor for SearchResultType();
  v4[19] = v6;
  v4[20] = *(_QWORD *)(v6 - 8);
  v4[21] = OUTLINED_FUNCTION_17();
  v4[22] = OUTLINED_FUNCTION_17();
  v4[23] = *(_QWORD *)(type metadata accessor for SearchResult(0) - 8);
  v4[24] = OUTLINED_FUNCTION_17();
  v4[25] = OUTLINED_FUNCTION_17();
  v7 = OUTLINED_FUNCTION_104_2();
  v4[26] = v7;
  v4[27] = *(_QWORD *)(v7 - 8);
  v4[28] = OUTLINED_FUNCTION_17();
  v4[29] = OUTLINED_FUNCTION_17();
  v4[30] = OUTLINED_FUNCTION_17();
  v4[31] = OUTLINED_FUNCTION_17();
  v4[32] = OUTLINED_FUNCTION_17();
  v4[33] = OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

uint64_t AnswerSynthesisController.createAnswerSynthesisBatchRequests(for:with:)()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  _QWORD *v31;
  uint8_t *v33;
  os_signpost_type_t v34;
  os_signpost_id_t v35;
  NSObject *v36;
  uint64_t v37;
  int *v38;

  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v1 = *(NSObject **)(v0 + 264);
  v2 = OUTLINED_FUNCTION_78_5();
  *(_QWORD *)(v0 + 272) = OUTLINED_FUNCTION_113_4(v2, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_192();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_189_0();
  if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
  {
    v3 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v3);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v4, v5, "AnswerSynthesisController.createAnswerSynthesisBatchRequests", "", v3);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = *(_QWORD *)(v0 + 216);

  OUTLINED_FUNCTION_69_9(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  OUTLINED_FUNCTION_77_2();
  OUTLINED_FUNCTION_27();
  *(_QWORD *)(v0 + 280) = OUTLINED_FUNCTION_44_14();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v0 + 288) = v7;
  OUTLINED_FUNCTION_105_2(v7);
  if (one-time initialization token for search != -1)
    swift_once();
  v8 = *(NSObject **)(v0 + 72);
  v9 = OUTLINED_FUNCTION_13();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Logging.search);
  *(_QWORD *)(v0 + 296) = v10;
  OUTLINED_FUNCTION_4_7();
  v36 = v10;
  OUTLINED_FUNCTION_93();
  v11 = OUTLINED_FUNCTION_106_3();
  v12 = OUTLINED_FUNCTION_65(v11);
  v13 = *(_QWORD *)(v0 + 72);
  if (v12)
  {
    v14 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v14 = 136315394;
    OUTLINED_FUNCTION_53_13((uint64_t)"AnswerSynthesisBatchRequests");
    *(_QWORD *)(v0 + 40) = v15;
    OUTLINED_FUNCTION_217();
    *(_WORD *)(v14 + 12) = 2048;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v13 + 16);
    OUTLINED_FUNCTION_183_1();
    OUTLINED_FUNCTION_56_0();
    _os_log_impl(&dword_24315F000, v8, (os_log_type_t)v10, "%s search result count before being filtered=%ld", (uint8_t *)v14, 0x16u);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_56_0();

  v16 = *(_QWORD *)(v0 + 72);
  OUTLINED_FUNCTION_97_1();
  static NSUserDefaults.answerSynthesisLimit.getter();
  if (*(_QWORD *)(v16 + 16))
  {
    v37 = *(_QWORD *)(v0 + 72)
        + ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 184) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 184) + 80));
    swift_bridgeObjectRetain();
    outlined init with copy of SearchResult(v37, *(_QWORD *)(v0 + 200), type metadata accessor for SearchResult);
    if (one-time initialization token for supportedTypes != -1)
      swift_once();
    outlined init with copy of SearchResult(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 144), type metadata accessor for SearchResultItem);
    OUTLINED_FUNCTION_216();
    v17 = (char *)&loc_24326A828 + dword_24326B0D4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  v18 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
  {
    *(_QWORD *)(v0 + 304) = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_117();
    Logger.logObject.getter();
    v27 = OUTLINED_FUNCTION_106_3();
    if (OUTLINED_FUNCTION_31(v27))
    {
      v28 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v28 = 136315394;
      OUTLINED_FUNCTION_53_13((uint64_t)"AnswerSynthesisBatchRequests");
      *(_QWORD *)(v0 + 16) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2048;
      *(_QWORD *)(v0 + 24) = *(_QWORD *)(v18 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_118_0();
      OUTLINED_FUNCTION_36_12(&dword_24315F000, v36, (os_log_type_t)"createAnswerSynthesisBatchRequests(for:with:)", "%s search result count after being filtered=%ld");
      OUTLINED_FUNCTION_23_19();
      specialized UnsafeMutablePointer.deallocate()();
    }
    OUTLINED_FUNCTION_118_0();

    v30 = *(int **)(**(_QWORD **)(v0 + 80) + 144);
    v38 = (int *)((char *)v30 + *v30);
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 312) = v31;
    *v31 = v0;
    v31[1] = AnswerSynthesisController.createAnswerSynthesisBatchRequests(for:with:);
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v38)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v18);
  }
  else
  {
    OUTLINED_FUNCTION_118_0();
    Logger.logObject.getter();
    v19 = OUTLINED_FUNCTION_106_3();
    if (OUTLINED_FUNCTION_31(v19))
    {
      v20 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v20 = 136315138;
      OUTLINED_FUNCTION_53_13((uint64_t)"AnswerSynthesisBatchRequests");
      *(_QWORD *)(v0 + 32) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_29_2(&dword_24315F000, v36, (os_log_type_t)"createAnswerSynthesisBatchRequests(for:with:)", "%s no results return after being filtered", v20);
      OUTLINED_FUNCTION_23_19();
      specialized UnsafeMutablePointer.deallocate()();
    }

    v22 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
    {
      v23 = *(_QWORD *)(v0 + 128);
      v24 = *(_QWORD *)(v0 + 88);
      v25 = *(_QWORD *)(v0 + 96);
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v25 + 88))(v23, v24) == *MEMORY[0x24BEE7810])
      {
        v26 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 96));
        v26 = "";
      }
      v33 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_55_1(v33);
      OUTLINED_FUNCTION_35_2();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v22, v34, v35, "AnswerSynthesisController.createAnswerSynthesisBatchRequests", v26, v33);
      specialized UnsafeMutablePointer.deallocate()();
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 208));
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_56();
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_91();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_34_3();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_125_3();
  OUTLINED_FUNCTION_124_6();
  *(_QWORD *)(v2 + 320) = v1;
  *(_QWORD *)(v2 + 328) = v0;
  OUTLINED_FUNCTION_128();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  os_signpost_type_t v26;
  os_signpost_id_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v31;
  uint8_t *v32;
  os_signpost_type_t v33;
  os_signpost_id_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (*v39)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  __int128 v40;
  uint64_t v41;
  __int128 v42;

  v2 = *(_QWORD *)(v1 + 320);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v38 = *(_QWORD *)(v1 + 320);
    v39 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v1 + 80) + 168);
    v4 = v2 + 32;
    v0 = *(NSObject **)(v1 + 328);
    OUTLINED_FUNCTION_4_7();
    v5 = 0;
    v6 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v8 = *(_QWORD *)(v1 + 56);
      v7 = *(_QWORD *)(v1 + 64);
      v9 = *(_QWORD *)(v4 + 8 * v5);
      swift_bridgeObjectRetain();
      v39(&v41, v8, v7, v9);
      if (v0)
        break;
      v10 = v41;
      v40 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_130_2();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v18;
      }
      v11 = *(_QWORD *)(v6 + 16);
      v12 = v11 + 1;
      if (v11 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v19;
      }
      v13 = *(NSObject **)(v1 + 296);
      *(_QWORD *)(v6 + 16) = v12;
      v14 = v6 + 32 * v11;
      *(_QWORD *)(v14 + 32) = v10;
      *(_OWORD *)(v14 + 40) = v40;
      *(_QWORD *)(v14 + 56) = v9;
      swift_bridgeObjectRetain();
      Logger.logObject.getter();
      v15 = OUTLINED_FUNCTION_106_3();
      if (OUTLINED_FUNCTION_31(v15))
      {
        v16 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        v41 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_DWORD *)v16 = 136315650;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002DLL, 0x800000024335DC00, &v41);
        *(_QWORD *)(v16 + 4) = v17;
        *(_WORD *)(v16 + 12) = 2048;
        *(_QWORD *)(v16 + 14) = v5;
        *(_WORD *)(v16 + 22) = 2048;
        *(_QWORD *)(v16 + 24) = *(_QWORD *)(v38 + 16);
        OUTLINED_FUNCTION_47_2();
        _os_log_impl(&dword_24315F000, v13, (os_log_type_t)v12, "%s Prepared request #%ld with processedSearchEntities.count=%ld", (uint8_t *)v16, 0x20u);
        swift_arrayDestroy();
        specialized UnsafeMutablePointer.deallocate()();
      }
      OUTLINED_FUNCTION_47_2();

      v0 = 0;
      if (v3 == ++v5)
      {
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_36_0();
        goto LABEL_16;
      }
    }
    OUTLINED_FUNCTION_47_2();
    OUTLINED_FUNCTION_56_0();
    OUTLINED_FUNCTION_102_0();
    OUTLINED_FUNCTION_6_1();
    v20 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v21 = *(_QWORD *)(v1 + 96);
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_109_2();
      OUTLINED_FUNCTION_50();
      if (OUTLINED_FUNCTION_52_5(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 88)) == *MEMORY[0x24BEE7810])
      {
        v22 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 96));
        v22 = "";
      }
      v32 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v32 = 0;
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v20, v33, v34, "AnswerSynthesisController.createAnswerSynthesisBatchRequests", v22, v32);
      specialized UnsafeMutablePointer.deallocate()();
    }
    v31 = *(_QWORD *)(v1 + 224);
    v35 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v36 = *(_QWORD *)(v1 + 208);
    OUTLINED_FUNCTION_108_7();

    v35(v31, v36);
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_89();
    OUTLINED_FUNCTION_71_1();
    OUTLINED_FUNCTION_54_3();
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_87();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_74_2();
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_69_2();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_36_0();
    v6 = MEMORY[0x24BEE4AF8];
LABEL_16:
    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_70_8();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_108() & 1) != 0)
    {
      v23 = *(_QWORD *)(v1 + 96);
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_109_2();
      OUTLINED_FUNCTION_50();
      if (OUTLINED_FUNCTION_52_5(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88)) == *MEMORY[0x24BEE7810])
      {
        v24 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 96));
        v24 = "";
      }
      v25 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_55_1(v25);
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v0, v26, v27, "AnswerSynthesisController.createAnswerSynthesisBatchRequests", v24, v25);
      specialized UnsafeMutablePointer.deallocate()();
    }

    v28 = *(_QWORD *)(v1 + 240);
    OUTLINED_FUNCTION_108_7();
    v29(v28);
    swift_release();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_56();
    OUTLINED_FUNCTION_91();
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_87();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_74_2();
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_71_1();
    OUTLINED_FUNCTION_69_2();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v6);
  }
}

void AnswerSynthesisController.createAnswerSynthesisBatchRequests(for:with:)()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint8_t *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  NSObject *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  swift_bridgeObjectRelease();
  v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_52() & 1) != 0)
  {
    v2 = v0[14];
    v4 = v0[11];
    v3 = v0[12];
    OUTLINED_FUNCTION_75();
    checkForErrorAndConsumeState(state:)();
    OUTLINED_FUNCTION_50();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4) == *MEMORY[0x24BEE7810])
    {
      v5 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(v0[12]);
      v5 = "";
    }
    v7 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_WORD *)v7 = 0;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v8, v9, "AnswerSynthesisController.createAnswerSynthesisBatchRequests", v5, v7);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = v0[29];
  v10 = v1;
  v11 = (void (*)(uint64_t, uint64_t))v0[36];
  v12 = v0[26];

  v11(v6, v12);
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_71_1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_133_1();
  __asm { BR              X0 }
}

uint64_t AnswerSynthesisController.preprocessSearchEntity(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  v5 = OUTLINED_FUNCTION_103_3();
  v4[21] = v5;
  v4[22] = *(_QWORD *)(v5 - 8);
  v4[23] = OUTLINED_FUNCTION_17();
  v4[24] = OUTLINED_FUNCTION_17();
  v6 = OUTLINED_FUNCTION_104_2();
  v4[25] = v6;
  v4[26] = *(_QWORD *)(v6 - 8);
  v4[27] = OUTLINED_FUNCTION_17();
  v4[28] = OUTLINED_FUNCTION_17();
  v4[29] = OUTLINED_FUNCTION_17();
  v4[30] = OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

uint64_t AnswerSynthesisController.preprocessSearchEntity(for:with:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_signpost_type_t v4;
  uint8_t *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;

  v1 = v0 + 56;
  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v2 = *(NSObject **)(v0 + 240);
  v3 = OUTLINED_FUNCTION_78_5();
  *(_QWORD *)(v0 + 248) = OUTLINED_FUNCTION_113_4(v3, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_192();
  OSSignposter.logHandle.getter();
  v4 = OUTLINED_FUNCTION_189_0();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v6 = OUTLINED_FUNCTION_55_1(v5);
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v2, v4, v6, "AnswerSynthesisController.preprocessSearchEntity", "", v5);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v7 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);

  v10 = OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_104_8(v10, v11, v12);
  OUTLINED_FUNCTION_77_2();
  OUTLINED_FUNCTION_27();
  *(_QWORD *)(v0 + 256) = OUTLINED_FUNCTION_44_14();
  v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(_QWORD *)(v0 + 264) = v13;
  v13(v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnySearchEntityPreprocessing>);
  v14 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v0 + 272) = v14;
  *(_OWORD *)(v14 + 16) = xmmword_24334EDD0;
  *(_QWORD *)(v0 + 40) = &type metadata for EmailContentPreprocessing;
  *(_QWORD *)(v0 + 48) = &protocol witness table for EmailContentPreprocessing;
  v15 = OUTLINED_FUNCTION_8();
  outlined init with take of SageSearchClient((__int128 *)(v0 + 16), v15 + 16);
  *(_QWORD *)(v14 + 32) = &async function pointer to partial apply for closure #1 in AnySearchEntityPreprocessing.init(_:);
  *(_QWORD *)(v14 + 40) = v15;
  v16 = OUTLINED_FUNCTION_97_1();
  static NSUserDefaults.answerSynthesisTokenLimitNonUserPrompt.getter();
  v18 = v17;
  v19 = objc_msgSend((id)objc_opt_self(), sel_service);
  type metadata accessor for UniversalEmbeddingModelClient();
  v20 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v0 + 80) = &type metadata for SmartChunkingPreprocessing;
  *(_QWORD *)(v0 + 88) = &protocol witness table for SmartChunkingPreprocessing;
  v21 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v0 + 56) = v21;
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = 0x6173726576696E75;
  *(_QWORD *)(v21 + 32) = 0xE90000000000006CLL;
  *(_BYTE *)(v21 + 40) = 1;
  *(_QWORD *)(v21 + 48) = 700;
  *(_QWORD *)(v21 + 56) = v18;
  *(_QWORD *)(v21 + 64) = 0x3FD5555551C112DALL;
  v22 = OUTLINED_FUNCTION_8();
  outlined init with take of SageSearchClient((__int128 *)(v0 + 56), v22 + 16);
  *(_QWORD *)(v14 + 48) = &closure #1 in AnySearchEntityPreprocessing.init(_:)partial apply;
  *(_QWORD *)(v14 + 56) = v22;
  static NSUserDefaults.answerSynthesisSearchResultsPerRequest.getter();
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v25 + 16);
    OUTLINED_FUNCTION_91_0();
    v1 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_Say10OmniSearch0G6ResultVGs5NeverOTg506_sSa10fg5AA0B6h22VRszlE7chunked4intoSayP18ACGGSi_tFAFSiXEfU_ALSiTf1cn_n(0, v26, v24, v25, v24);
    *(_QWORD *)(v0 + 280) = v1;
    if (one-time initialization token for search == -1)
      goto LABEL_7;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_7:
  v27 = OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_113_4(v27, (uint64_t)static Logging.search);
  OUTLINED_FUNCTION_91_0();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v30 = 136315650;
    OUTLINED_FUNCTION_33_11((uint64_t)"preprocessSearchEntity(for:with:)", v0 + 112, v16);
    *(_QWORD *)(v0 + 112) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2048;
    *(_QWORD *)(v0 + 120) = *(_QWORD *)(v1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_121();
    *(_WORD *)(v30 + 22) = 2048;
    static NSUserDefaults.answerSynthesisSearchResultsPerRequest.getter();
    *(_QWORD *)(v0 + 128) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24315F000, v28, v29, "%s Batched into %ld batch(es) of size=%ld", (uint8_t *)v30, 0x20u);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_121();

  v34 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  (*(void (**)(void))(**(_QWORD **)(v0 + 160) + 160))();
  *(_QWORD *)(v0 + 104) = specialized Array.init(repeating:count:)(0, MEMORY[0x24BEE4AF8], *(_QWORD *)(v1 + 16));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [SearchResult]));
  v35 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v35;
  v35[2] = v1;
  v35[3] = v14;
  v35[4] = v34;
  v35[5] = v33;
  v35[6] = v0 + 104;
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v36;
  *v36 = v0;
  v36[1] = AnswerSynthesisController.preprocessSearchEntity(for:with:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_36_5();
  *v3 = *v2;
  *(_QWORD *)(v0 + 304) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_6_1();
    OUTLINED_FUNCTION_104();
  }
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_42();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  os_signpost_type_t v12;
  os_signpost_id_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  OUTLINED_FUNCTION_65_10();
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_91_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v18;
    v4 = *(_QWORD *)(v18 + 16);
    v5 = 40;
    do
    {
      v6 = *(_QWORD *)(v1 + v5);
      v7 = *(_QWORD *)(v18 + 24);
      OUTLINED_FUNCTION_76_0();
      if (v4 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v18 + 16) = v4 + 1;
      *(_QWORD *)(v18 + 8 * v4 + 32) = v6;
      v5 += 16;
      ++v4;
      --v2;
    }
    while (v2);
    OUTLINED_FUNCTION_102_0();
  }
  else
  {
    OUTLINED_FUNCTION_121();
    v3 = MEMORY[0x24BEE4AF8];
  }
  v8 = OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_45_6();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_52() & 1) != 0)
  {
    v9 = *(_QWORD *)(v0 + 176);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_109_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_52_5(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88)) == *MEMORY[0x24BEE7810])
    {
      v10 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 176));
      v10 = "";
    }
    v11 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v11);
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v8, v12, v13, "AnswerSynthesisController.preprocessSearchEntity", v10, v11);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 200);

  v14(v15, v16);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_89();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t AnswerSynthesisController.preprocessSearchEntity(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  os_signpost_type_t v16;
  os_signpost_id_t v17;
  NSObject *v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_59();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_99();
  swift_bridgeObjectRelease();
  v13 = OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_189_1();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
  {
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_19_5() == *MEMORY[0x24BEE7810])
    {
      v14 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(v12[22]);
      v14 = "";
    }
    v15 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v15);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v13, v16, v17, "AnswerSynthesisController.preprocessSearchEntity", v14, v15);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v18 = v13;
  v19 = (void (*)(uint64_t, uint64_t))v12[33];
  v20 = v12[27];
  v21 = v12[25];

  v19(v20, v21);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_90();
  return v22(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

void Array<A>.chunked(into:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;

  if (a1)
  {
    v4 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_Say10OmniSearch0G6ResultVGs5NeverOTg506_sSa10fg5AA0B6h22VRszlE7chunked4intoSayP18ACGGSi_tFAFSiXEfU_ALSiTf1cn_n(0, v4, a1, a2, a1);
    OUTLINED_FUNCTION_59_0();
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  if (a3 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (taskIndex: Int, preprocessedEntities: [SearchResult]));
      v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnswerSynthesisResult?);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            outlined copy of AnswerSynthesisResult?(a1);
            *v7++ = a1;
            --v6;
          }
          while (v6);
        }
        outlined copy of AnswerSynthesisResult?(a1);
      }
    }
    else
    {
      outlined consume of AnswerSynthesisResult?(a1);
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v7[18] = swift_task_alloc();
  v7[19] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(Int, [SearchResult]), Error>.Iterator);
  v7[20] = v8;
  v7[21] = *(_QWORD *)(v8 - 8);
  v7[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v1 + 16);
  if (v27)
  {
    v26 = v1 + 32;
    v25 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_4_7();
    v2 = 0;
    do
    {
      v4 = *(_QWORD *)(v0 + 144);
      v3 = *(_QWORD *)(v0 + 152);
      v5 = *(_QWORD *)(v0 + 128);
      v28 = *(_QWORD *)(v0 + 120);
      v6 = *(_QWORD *)(v0 + 112);
      v7 = *(_QWORD *)(v26 + 8 * v2);
      OUTLINED_FUNCTION_86_3();
      __swift_storeEnumTagSinglePayload(v8, v9, v10, v25);
      v11 = (_QWORD *)OUTLINED_FUNCTION_8();
      v11[2] = 0;
      v11[3] = 0;
      v11[4] = v6;
      v11[5] = v7;
      v11[6] = v28;
      v11[7] = v5;
      v11[8] = v2;
      v29 = v2;
      outlined init with copy of TaskPriority?(v3, v4);
      LODWORD(v4) = __swift_getEnumTagSinglePayload(v4, 1, v25);
      OUTLINED_FUNCTION_115();
      OUTLINED_FUNCTION_23_0();
      swift_bridgeObjectRetain();
      if ((_DWORD)v4 == 1)
      {
        OUTLINED_FUNCTION_131_3();
      }
      else
      {
        TaskPriority.rawValue.getter();
        v12 = OUTLINED_FUNCTION_180_1();
        v13(v12, v25);
      }
      if (v11[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        v14 = dispatch thunk of Actor.unownedExecutor.getter();
        v16 = v15;
        swift_unknownObjectRelease();
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = **(_QWORD **)(v0 + 96);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [SearchResult]));
      v18 = v16 | v14;
      if (v16 | v14)
      {
        v18 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v14;
        *(_QWORD *)(v0 + 40) = v16;
      }
      ++v2;
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v18;
      *(_QWORD *)(v0 + 64) = v17;
      swift_task_create();
      swift_release();
      OUTLINED_FUNCTION_131_3();
    }
    while (v27 != v29 + 1);
    swift_bridgeObjectRelease();
  }
  v19 = *(uint64_t **)(v0 + 136);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [SearchResult]));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  ThrowingTaskGroup.makeAsyncIterator()();
  v20 = *v19;
  v21 = OUTLINED_FUNCTION_114_2();
  *v19 = v20;
  if ((v21 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v20 = v24;
  }
  **(_QWORD **)(v0 + 136) = v20;
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v22;
  *v22 = v0;
  v22[1] = closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:);
  OUTLINED_FUNCTION_57_7();
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  OUTLINED_FUNCTION_101_1();
  OUTLINED_FUNCTION_16_7();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  OUTLINED_FUNCTION_101_1();
  OUTLINED_FUNCTION_16_7();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_34_3();
  return OUTLINED_FUNCTION_6_13(*(uint64_t (**)(void))(v0 + 8));
}

void closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void (*v10)(void);
  _QWORD *v11;
  uint64_t v12;

  v2 = v0[9];
  v1 = v0[10];
  if (!v1)
  {
    v8 = OUTLINED_FUNCTION_180_1();
    v9(v8);
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_34_3();
    v10 = (void (*)(void))OUTLINED_FUNCTION_27_5();
    v10();
    return;
  }
  v3 = (uint64_t *)v0[17];
  v4 = *v3;
  OUTLINED_FUNCTION_64();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
  else
  {
    v11 = (_QWORD *)v0[17];
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v4 = v12;
    *v11 = v12;
    if ((v2 & 0x8000000000000000) == 0)
    {
LABEL_4:
      if (v2 < *(_QWORD *)(v4 + 16))
      {
        v6 = v4 + 16 * v2;
        *(_QWORD *)(v6 + 32) = v2;
        *(_QWORD *)(v6 + 40) = v1;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_6_1();
        v7 = (_QWORD *)swift_task_alloc();
        v0[24] = v7;
        *v7 = v0;
        v7[1] = closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:);
        OUTLINED_FUNCTION_54();
        _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
        return;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

uint64_t closure #1 in closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a1;
  v8[6] = a4;
  return swift_task_switch();
}

#error "24326CA7C: call analysis failed (funcsize=99)"

uint64_t closure #1 in closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_125_3();
  OUTLINED_FUNCTION_124_6();
  *(_QWORD *)(v1 + 128) = v0;
  OUTLINED_FUNCTION_128();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

#error "24326CC18: call analysis failed (funcsize=103)"

uint64_t AnswerSynthesisController.synthesize(query:searchResults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = OUTLINED_FUNCTION_103_3();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = OUTLINED_FUNCTION_17();
  v5[11] = OUTLINED_FUNCTION_17();
  v5[12] = OUTLINED_FUNCTION_17();
  v5[13] = OUTLINED_FUNCTION_17();
  v7 = OUTLINED_FUNCTION_104_2();
  v5[14] = v7;
  v5[15] = *(_QWORD *)(v7 - 8);
  v5[16] = OUTLINED_FUNCTION_17();
  v5[17] = OUTLINED_FUNCTION_17();
  v5[18] = OUTLINED_FUNCTION_17();
  v5[19] = OUTLINED_FUNCTION_17();
  v5[20] = OUTLINED_FUNCTION_17();
  v5[21] = OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

uint64_t AnswerSynthesisController.synthesize(query:searchResults:)()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD);

  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v1 = v0[21];
  v2 = OUTLINED_FUNCTION_78_5();
  v0[22] = OUTLINED_FUNCTION_113_4(v2, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_192();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_189_0();
  if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
  {
    v3 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v3);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v4, v5, "AnswerSynthesisController.synthesize", "", v3);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = v0[15];

  OUTLINED_FUNCTION_69_9(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  OUTLINED_FUNCTION_77_2();
  OUTLINED_FUNCTION_27();
  v0[23] = OUTLINED_FUNCTION_44_14();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v0[24] = v7;
  OUTLINED_FUNCTION_105_2(v7);
  v8 = (_QWORD *)OUTLINED_FUNCTION_25_5();
  v0[25] = v8;
  *v8 = v0;
  v8[1] = AnswerSynthesisController.synthesize(query:searchResults:);
  return v10(v0[4], v0[5], v0[6]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_125_3();
  OUTLINED_FUNCTION_124_6();
  *(_QWORD *)(v2 + 208) = v1;
  *(_QWORD *)(v2 + 216) = v0;
  OUTLINED_FUNCTION_128();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v7;
  uint8_t *v8;
  os_signpost_type_t v9;
  os_signpost_id_t v10;
  uint64_t (*v11)(void);

  v2 = *(_QWORD *)(v1 + 208);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, AnswerSynthesisResult));
    v4 = swift_task_alloc();
    *(_QWORD *)(v1 + 224) = v4;
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnswerSynthesisResult]);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 232) = v5;
    *v5 = v1;
    v5[1] = AnswerSynthesisController.synthesize(query:searchResults:);
    OUTLINED_FUNCTION_122_3();
    OUTLINED_FUNCTION_90();
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    **(_QWORD **)(v1 + 24) = 0;
    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_45_2();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
    {
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_85_2();
      OUTLINED_FUNCTION_50();
      if (OUTLINED_FUNCTION_19_5() == *MEMORY[0x24BEE7810])
      {
        v7 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 72));
        v7 = "";
      }
      v8 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_55_1(v8);
      OUTLINED_FUNCTION_35_2();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v0, v9, v10, "AnswerSynthesisController.synthesize", v7, v8);
      specialized UnsafeMutablePointer.deallocate()();
    }
    OUTLINED_FUNCTION_135_4();
    OUTLINED_FUNCTION_66_12();
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_84_8();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_56();
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_91();
    v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_5();
    return v11();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_36_5();
  *v3 = *v2;
  *(_QWORD *)(v0 + 240) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_104();
  }
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_42();
}

{
  uint64_t v0;
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_59();
  v1 = *(NSObject **)(v0 + 176);
  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 56) + 192))(*(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_96_0();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_45_2();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
  {
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_19_5() == *MEMORY[0x24BEE7810])
    {
      v2 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 72));
      v2 = "";
    }
    v3 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v3);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v4, v5, "AnswerSynthesisController.synthesize", v2, v3);
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_135_4();
  OUTLINED_FUNCTION_66_12();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_84_8();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_5();
  return OUTLINED_FUNCTION_22(v6);
}

{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint8_t *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;

  OUTLINED_FUNCTION_59();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_45_2();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
  {
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_19_5() == *MEMORY[0x24BEE7810])
    {
      v2 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 72));
      v2 = "";
    }
    v3 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v3);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v0, v4, v5, "AnswerSynthesisController.synthesize", v2, v3);
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_135_4();
  OUTLINED_FUNCTION_66_12();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_71_11();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_104();
  return OUTLINED_FUNCTION_22(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;

  OUTLINED_FUNCTION_59();
  v1 = *(NSObject **)(v0 + 224);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_95();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_45_2();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
  {
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_19_5() == *MEMORY[0x24BEE7810])
    {
      v2 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 72));
      v2 = "";
    }
    v3 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v3);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v4, v5, "AnswerSynthesisController.synthesize", v2, v3);
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_135_4();
  OUTLINED_FUNCTION_66_12();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_71_11();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_104();
  return OUTLINED_FUNCTION_22(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(Int, AnswerSynthesisResult), Error>.Iterator);
  v4[16] = v5;
  v4[17] = *(_QWORD *)(v5 - 8);
  v4[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v1 + 16);
  if (v26)
  {
    v25 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_4_7();
    v2 = 0;
    v3 = (uint64_t *)(v1 + 56);
    do
    {
      v4 = *(_QWORD *)(v0 + 152);
      v5 = *(v3 - 2);
      v27 = *(_QWORD *)(v0 + 120);
      v28 = *(v3 - 3);
      v7 = *(v3 - 1);
      v6 = *v3;
      OUTLINED_FUNCTION_86_3();
      __swift_storeEnumTagSinglePayload(v8, v9, v10, v25);
      v11 = (_QWORD *)OUTLINED_FUNCTION_8();
      v11[2] = 0;
      v29 = v2;
      v11[3] = 0;
      v11[4] = v2;
      v11[5] = v27;
      v11[6] = v28;
      v11[7] = v5;
      v11[8] = v7;
      v11[9] = v6;
      v12 = OUTLINED_FUNCTION_216();
      outlined init with copy of TaskPriority?(v12, v13);
      LODWORD(v4) = OUTLINED_FUNCTION_71_5(v4);
      OUTLINED_FUNCTION_76_0();
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_64();
      OUTLINED_FUNCTION_10_8();
      if ((_DWORD)v4 == 1)
      {
        OUTLINED_FUNCTION_131_3();
      }
      else
      {
        TaskPriority.rawValue.getter();
        v14 = OUTLINED_FUNCTION_180_1();
        v15(v14, v25);
      }
      if (v11[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        v16 = dispatch thunk of Actor.unownedExecutor.getter();
        v18 = v17;
        swift_unknownObjectRelease();
      }
      else
      {
        v16 = 0;
        v18 = 0;
      }
      v19 = **(_QWORD **)(v0 + 104);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, AnswerSynthesisResult));
      v20 = v18 | v16;
      if (v18 | v16)
      {
        v20 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v16;
        *(_QWORD *)(v0 + 40) = v18;
      }
      ++v2;
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v20;
      *(_QWORD *)(v0 + 64) = v19;
      swift_task_create();
      swift_release();
      OUTLINED_FUNCTION_131_3();
      v3 += 4;
    }
    while (v26 != v29 + 1);
    swift_bridgeObjectRelease();
  }
  v21 = specialized Array.init(repeating:count:)(3uLL, v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, AnswerSynthesisResult));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  ThrowingTaskGroup.makeAsyncIterator()();
  if ((OUTLINED_FUNCTION_114_2() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v21 = v24;
  }
  *(_QWORD *)(v0 + 168) = v21;
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v22;
  *v22 = v0;
  v22[1] = closure #1 in AnswerSynthesisController.synthesize(query:searchResults:);
  OUTLINED_FUNCTION_57_7();
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  _QWORD *v1;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_23_8(v1);
  if (v0)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_42();
}

{
  uint64_t v0;
  _QWORD *v1;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_23_8(v1);
  if (v0)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_42();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_34_3();
  return OUTLINED_FUNCTION_6_13(*(uint64_t (**)(void))(v0 + 8));
}

void closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t (*v17)(void);

  v2 = v0[9];
  v1 = v0[10];
  if (v1 == 3)
  {
    v3 = v0[21];
    OUTLINED_FUNCTION_40(v0[17]);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain_n();
      v5 = 0;
      v6 = MEMORY[0x24BEE4AF8];
      do
      {
        v7 = v0[21] + 8 * v5;
        v8 = *(_QWORD *)(v7 + 32);
        if (v8 != 3)
        {
          outlined copy of AnswerSynthesisResult(*(_QWORD *)(v7 + 32));
          if ((OUTLINED_FUNCTION_114_2() & 1) == 0)
          {
            OUTLINED_FUNCTION_151_1();
            v6 = v10;
          }
          v9 = *(_QWORD *)(v6 + 16);
          if (v9 >= *(_QWORD *)(v6 + 24) >> 1)
          {
            OUTLINED_FUNCTION_151_1();
            v6 = v11;
          }
          *(_QWORD *)(v6 + 16) = v9 + 1;
          *(_QWORD *)(v6 + 8 * v9 + 32) = v8;
        }
        ++v5;
      }
      while (v4 != v5);
      OUTLINED_FUNCTION_102_0();
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    v16 = (_QWORD *)v0[12];
    swift_bridgeObjectRelease();
    *v16 = v6;
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_99();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_5();
    OUTLINED_FUNCTION_6_13(v17);
  }
  else
  {
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v12 = v0[21];
      if (v2 < *(_QWORD *)(v12 + 16))
      {
        v13 = v12 + 8 * v2;
        v14 = *(_QWORD *)(v13 + 32);
        *(_QWORD *)(v13 + 32) = v1;
        outlined consume of AnswerSynthesisResult?(v14);
        v15 = (_QWORD *)swift_task_alloc();
        v0[23] = v15;
        *v15 = v0;
        v15[1] = closure #1 in AnswerSynthesisController.synthesize(query:searchResults:);
        OUTLINED_FUNCTION_57_7();
        _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
        return;
      }
    }
    __break(1u);
  }
}

uint64_t closure #1 in closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[12] = a8;
  v8[13] = v10;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  v8[7] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t (*v13)(_QWORD *, uint64_t, _QWORD);
  uint64_t v14;

  if (one-time initialization token for search != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_28(v3, (uint64_t)static Logging.search);
  v4 = OUTLINED_FUNCTION_106_3();
  if (OUTLINED_FUNCTION_31(v4))
  {
    v5 = *(_QWORD *)(v2 + 64);
    v6 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v14 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v6 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000024335DDE0, &v14);
    *(_QWORD *)(v2 + 40) = v7;
    OUTLINED_FUNCTION_217();
    *(_WORD *)(v6 + 12) = 2048;
    *(_QWORD *)(v2 + 48) = v5;
    OUTLINED_FUNCTION_183_1();
    OUTLINED_FUNCTION_36_12(&dword_24315F000, v0, v1, "%s Added task #%ld for synthesis");
    OUTLINED_FUNCTION_23_19();
    specialized UnsafeMutablePointer.deallocate()();
  }

  v8 = *(_QWORD *)(v2 + 80);
  v9 = *(_QWORD **)(v2 + 56);
  v10 = *(_OWORD *)(v2 + 88);
  *v9 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 16) = v8;
  *(_OWORD *)(v2 + 24) = v10;
  v11 = (_QWORD *)OUTLINED_FUNCTION_6();
  *(_QWORD *)(v2 + 112) = v11;
  *v11 = v2;
  v11[1] = closure #1 in closure #1 in AnswerSynthesisController.synthesize(query:searchResults:);
  return v13(v9 + 1, v2 + 16, *(_QWORD *)(v2 + 104));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_101_1();
  v2 = *v1;
  *v3 = v2;
  *(_QWORD *)(v4 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    return OUTLINED_FUNCTION_43(*(uint64_t (**)(void))(v2 + 8));
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_14();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AnswerSynthesisController.prewarmModel()()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  ValueMetadata *v25;
  unint64_t v26;
  NSObject *v27;
  os_signpost_type_t v28;
  uint8_t *v29;
  const char *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  os_signpost_type_t v34;
  uint8_t *v35;
  const char *v36;
  _WORD *v37;
  os_signpost_id_t v38;
  _WORD *v39;
  os_signpost_id_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  ValueMetadata *v49;
  unint64_t v50;

  v0 = OUTLINED_FUNCTION_103_3();
  v45 = *(_QWORD *)(v0 - 8);
  v46 = v0;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_18_1();
  v43 = v2;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v3);
  v42 = (uint8_t *)&v41 - v4;
  v47 = OUTLINED_FUNCTION_104_2();
  v5 = *(_QWORD *)(v47 - 8);
  v6 = MEMORY[0x24BDAC7A8](v47);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v41 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v41 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v41 - v15;
  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v17 = OUTLINED_FUNCTION_78_5();
  __swift_project_value_buffer(v17, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v18 = OUTLINED_FUNCTION_146_3();
  v19 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v20 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_WORD *)v20 = 0;
    v21 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v18, v19, v21, "AnswerSynthesisController.prewarmModel", "", v20);
    specialized UnsafeMutablePointer.deallocate()();
  }

  v22 = v47;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v14, v16, v47);
  OUTLINED_FUNCTION_77_2();
  OUTLINED_FUNCTION_27();
  OSSignpostIntervalState.init(id:isOpen:)();
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v16, v22);
  v49 = &type metadata for FeatureFlag;
  v50 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  LOBYTE(v48[0]) = 1;
  v24 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  if ((v24 & 1) != 0)
  {
    outlined init with copy of IMSPIMessageProtocol(v44 + 16, (uint64_t)v48);
    v25 = v49;
    v26 = v50;
    __swift_project_boxed_opaque_existential_1(v48, (uint64_t)v49);
    (*(void (**)(ValueMetadata *, unint64_t))(v26 + 8))(v25, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    v27 = OUTLINED_FUNCTION_146_3();
    OUTLINED_FUNCTION_45_6();
    v28 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v29 = v42;
      checkForErrorAndConsumeState(state:)();
      OUTLINED_FUNCTION_13_8();
      if (OUTLINED_FUNCTION_86_10() == *MEMORY[0x24BEE7810])
      {
        v30 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_103_7();
        v30 = "";
      }
      v37 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v37);
      v38 = OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v27, v28, v38, "AnswerSynthesisController.prewarmModel", v30, v29);
      goto LABEL_21;
    }
    v8 = v11;
  }
  else
  {
    if (one-time initialization token for search != -1)
      swift_once();
    v31 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v31, (uint64_t)static Logging.search);
    v32 = OUTLINED_FUNCTION_106_3();
    if (OUTLINED_FUNCTION_31(v32))
    {
      v33 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_WORD *)v33 = 0;
      OUTLINED_FUNCTION_19_2(&dword_24315F000, v24, OS_LOG_TYPE_INFO, "Skipping init of answer synthesis model because FF is is disabled", v33);
      specialized UnsafeMutablePointer.deallocate()();
    }

    v27 = OUTLINED_FUNCTION_146_3();
    OUTLINED_FUNCTION_45_6();
    v34 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v35 = v43;
      checkForErrorAndConsumeState(state:)();
      OUTLINED_FUNCTION_13_8();
      if (OUTLINED_FUNCTION_86_10() == *MEMORY[0x24BEE7810])
      {
        v36 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_103_7();
        v36 = "";
      }
      v39 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v39);
      v40 = OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v27, v34, v40, "AnswerSynthesisController.prewarmModel", v36, v35);
LABEL_21:
      specialized UnsafeMutablePointer.deallocate()();
    }
  }

  v23(v8, v47);
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_43_0();
}

OmniSearch::AnswerSynthesisRequest __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnswerSynthesisController.createAnswerSynthesisRequest(for:with:)(Swift::String a1, Swift::OpaquePointer with)
{
  uint64_t *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::Int v11;
  uint64_t v12;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  (*(void (**)(void))(*v2 + 160))();
  v11 = static AnswerSynthesisRequest.calculateCharLimitForUserPrompt(tokenLimit:)(v2[8]);
  if (one-time initialization token for search != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logging.search);
  swift_retain();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = OUTLINED_FUNCTION_190_1();
    v12 = OUTLINED_FUNCTION_190_1();
    *(_DWORD *)v9 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x800000024335DD00, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v9 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24315F000, v7, v8, "%s answerSynthesisTokenLimit=%ld, charLimit=%ld", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }

  swift_release();
  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = countAndFlagsBits;
  v10._object = object;
  return AnswerSynthesisRequest.init(query:documents:charLimit:)(v10, with, v11);
}

uint64_t AnswerSynthesisController.performSynthesisRequest(for:with:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 + 224) = a3;
  *(_QWORD *)(v4 + 232) = v3;
  *(_QWORD *)(v4 + 216) = a1;
  v6 = OUTLINED_FUNCTION_103_3();
  *(_QWORD *)(v4 + 240) = v6;
  *(_QWORD *)(v4 + 248) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 256) = OUTLINED_FUNCTION_17();
  *(_QWORD *)(v4 + 264) = OUTLINED_FUNCTION_17();
  *(_QWORD *)(v4 + 272) = OUTLINED_FUNCTION_17();
  v7 = type metadata accessor for String.Encoding();
  *(_QWORD *)(v4 + 280) = v7;
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 296) = OUTLINED_FUNCTION_18_5();
  v8 = type metadata accessor for PromptTemplate();
  *(_QWORD *)(v4 + 304) = v8;
  *(_QWORD *)(v4 + 312) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 320) = OUTLINED_FUNCTION_18_5();
  v9 = OUTLINED_FUNCTION_104_2();
  *(_QWORD *)(v4 + 328) = v9;
  *(_QWORD *)(v4 + 336) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 344) = OUTLINED_FUNCTION_17();
  *(_QWORD *)(v4 + 352) = OUTLINED_FUNCTION_17();
  *(_QWORD *)(v4 + 360) = OUTLINED_FUNCTION_17();
  *(_QWORD *)(v4 + 368) = OUTLINED_FUNCTION_17();
  v10 = OUTLINED_FUNCTION_17();
  v11 = *a2;
  *(_QWORD *)(v4 + 376) = v10;
  *(_QWORD *)(v4 + 384) = v11;
  *(_OWORD *)(v4 + 392) = *(_OWORD *)(a2 + 1);
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_42();
}

void AnswerSynthesisController.performSynthesisRequest(for:with:)()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  Swift::String v11;
  uint64_t v12;
  NSObject *v13;
  os_signpost_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  _QWORD *v33;
  uint8_t *v35;
  os_signpost_id_t v36;
  uint64_t v37;
  __int128 v39;
  uint64_t v40;
  __int128 v41;

  if (one-time initialization token for searchSignposter != -1)
    swift_once();
  v1 = *(NSObject **)(v0 + 376);
  v2 = OUTLINED_FUNCTION_78_5();
  *(_QWORD *)(v0 + 408) = __swift_project_value_buffer(v2, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_192();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_189_0();
  if ((OUTLINED_FUNCTION_89_0() & 1) != 0)
  {
    v3 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v3);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v1, v4, v5, "AnswerSynthesisController.performSynthesisRequest", "", v3);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v6 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 336);
  v39 = *(_OWORD *)(v0 + 392);

  OUTLINED_FUNCTION_69_9(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  OUTLINED_FUNCTION_77_2();
  OUTLINED_FUNCTION_27();
  *(_QWORD *)(v0 + 416) = OUTLINED_FUNCTION_44_14();
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(_QWORD *)(v0 + 424) = v10;
  v10(v6, v8);
  v40 = v7;
  v41 = v39;
  v11 = AnswerSynthesisRequest.userPrompt()();
  if (v12)
  {
    v13 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v14 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v15 = *(_QWORD *)(v0 + 264);
      v17 = *(_QWORD *)(v0 + 240);
      v16 = *(_QWORD *)(v0 + 248);
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      OUTLINED_FUNCTION_39_0();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17) == *MEMORY[0x24BEE7810])
      {
        v18 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 248));
        v18 = "";
      }
      v35 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      v36 = OUTLINED_FUNCTION_55_1(v35);
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v13, v14, v36, "AnswerSynthesisController.performSynthesisRequest", v18, v35);
      specialized UnsafeMutablePointer.deallocate()();
    }

    v37 = OUTLINED_FUNCTION_216();
    ((void (*)(uint64_t))v10)(v37);
    OUTLINED_FUNCTION_39_0();
    swift_task_dealloc();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_56();
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_91();
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_133_1();
    __asm { BR              X0 }
  }
  v19 = *(_QWORD *)(v0 + 232);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 40));
  OUTLINED_FUNCTION_178_0();
  v21 = v20;
  AnswerSynthesisModelProtocol.fallbackPromptTemplate.getter();
  if (one-time initialization token for search != -1)
    swift_once();
  v22 = OUTLINED_FUNCTION_13();
  *(_QWORD *)(v0 + 432) = OUTLINED_FUNCTION_113_4(v22, (uint64_t)static Logging.search);
  swift_bridgeObjectRetain_n();
  Logger.logObject.getter();
  v23 = OUTLINED_FUNCTION_106_3();
  if (os_log_type_enabled(v21, v23))
  {
    v24 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v40 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v24 = 136315394;
    OUTLINED_FUNCTION_23_0();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11._countAndFlagsBits, (unint64_t)v11._object, &v40);
    *(_QWORD *)(v0 + 200) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_130();
    *(_WORD *)(v24 + 12) = 2080;
    v26 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v40);
    *(_QWORD *)(v0 + 208) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_118_0();
    _os_log_impl(&dword_24315F000, v21, v23, "Calling answer synthesis with user prompt: %s, fallbackPromptTemplate: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_102_0();

  outlined init with copy of IMSPIMessageProtocol(v19 + 16, v0 + 80);
  v29 = *(_QWORD *)(v0 + 104);
  v30 = *(_QWORD *)(v0 + 112);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 80), v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24334DB60;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 40));
  OUTLINED_FUNCTION_178_0();
  *(_QWORD *)(inited + 32) = AnswerSynthesisModelProtocol.templateBindingUserPromptKey.getter();
  *(_QWORD *)(inited + 40) = v32;
  *(Swift::String *)(inited + 48) = v11;
  *(_QWORD *)(v0 + 440) = Dictionary.init(dictionaryLiteral:)();
  outlined init with copy of IMSPIMessageProtocol(v19 + 16, v0 + 120);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144));
  v33 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 448) = v33;
  *v33 = v0;
  v33[1] = AnswerSynthesisController.performSynthesisRequest(for:with:);
  OUTLINED_FUNCTION_133_1();
  __asm { BR              X4 }
}

uint64_t AnswerSynthesisController.performSynthesisRequest(for:with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_36_5();
  v0[57] = v2;
  v0[58] = v3;
  v0[59] = v1;
  OUTLINED_FUNCTION_128();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_42();
}

{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  _BYTE *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  os_signpost_type_t v29;
  os_signpost_id_t v30;
  uint64_t (*v31)(void);
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint8_t *v45;
  os_signpost_type_t v46;
  os_signpost_id_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];

  v2 = *(NSObject **)(v1 + 432);
  __swift_destroy_boxed_opaque_existential_1(v1 + 120);
  OUTLINED_FUNCTION_67_11();
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_106_3();
  if (OUTLINED_FUNCTION_31(v3))
  {
    v5 = *(_QWORD *)(v1 + 456);
    v4 = *(_QWORD *)(v1 + 464);
    v6 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v51[0] = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v6 = 136315138;
    OUTLINED_FUNCTION_115();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, v51);
    *(_QWORD *)(v1 + 192) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_29_2(&dword_24315F000, v2, v0, "Got response from answer synthesis model: %s", v6);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_102_0();

  v9 = *(_QWORD *)(v1 + 288);
  v8 = *(_QWORD *)(v1 + 296);
  v10 = *(_QWORD *)(v1 + 280);
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  v12 = v11;
  OUTLINED_FUNCTION_36_0();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if (v12 >> 60 == 15)
  {
    lazy protocol witness table accessor for type NetworkServiceError and conformance NetworkServiceError();
    v13 = swift_allocError();
    *v14 = 1;
    swift_willThrow();
    v15 = OUTLINED_FUNCTION_216();
    v16(v15);
LABEL_7:
    v18 = v13;
    v19 = v13;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      v23 = (_QWORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v22 = 138412290;
      v24 = v13;
      v25 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v1 + 160) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v23 = v25;
      OUTLINED_FUNCTION_129_3();
      OUTLINED_FUNCTION_129_3();
      OUTLINED_FUNCTION_29_2(&dword_24315F000, v20, v21, "Failed to synthesize with error: %@", v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_178_0();
      OUTLINED_FUNCTION_34_2();
      specialized UnsafeMutablePointer.deallocate()();
    }
    OUTLINED_FUNCTION_129_3();
    OUTLINED_FUNCTION_129_3();

    swift_willThrow();
    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_70_8();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_108() & 1) != 0)
    {
      v26 = *(_QWORD *)(v1 + 248);
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_109_2();
      OUTLINED_FUNCTION_50();
      if (OUTLINED_FUNCTION_52_5(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88)) == *MEMORY[0x24BEE7810])
      {
        v27 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 248));
        v27 = "";
      }
      v28 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_55_1(v28);
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_52_2(&dword_24315F000, v13, v29, v30, "AnswerSynthesisController.performSynthesisRequest", v27, v28);
      specialized UnsafeMutablePointer.deallocate()();
    }
    OUTLINED_FUNCTION_138_1();
    OUTLINED_FUNCTION_148_2();
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_54_12();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_56();
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_91();
    OUTLINED_FUNCTION_95();
    v31 = *(uint64_t (**)(void))(v1 + 8);
    return v31();
  }
  v17 = *(NSObject **)(v1 + 472);
  type metadata accessor for JSONDecoder();
  OUTLINED_FUNCTION_27();
  JSONDecoder.init()();
  lazy protocol witness table accessor for type AnswerSynthesisModelResult and conformance AnswerSynthesisModelResult();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v17)
  {
    v13 = v17;
    OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 312));
    swift_release();
    OUTLINED_FUNCTION_182_0();
    goto LABEL_7;
  }
  v33 = *(NSObject **)(v1 + 432);
  OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 312));
  swift_release();
  OUTLINED_FUNCTION_182_0();
  v34 = *(_QWORD *)(v1 + 168);
  OUTLINED_FUNCTION_67_11();
  Logger.logObject.getter();
  v35 = OUTLINED_FUNCTION_106_3();
  if (OUTLINED_FUNCTION_187_1(v33))
  {
    v36 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v51[0] = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v36 = 136315138;
    *(_QWORD *)(v1 + 176) = v34;
    OUTLINED_FUNCTION_64();
    v37 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v51);
    *(_QWORD *)(v1 + 184) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_102_0();
    OUTLINED_FUNCTION_29_2(&dword_24315F000, v33, v35, "Answer synthesis got response: %s", v36);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_102_0();

  (*(void (**)(uint64_t, _QWORD))(**(_QWORD **)(v1 + 232) + 184))(v34, *(_QWORD *)(v1 + 224));
  OUTLINED_FUNCTION_6_1();
  v40 = OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_189_1();
  static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v41 = *(_QWORD *)(v1 + 272);
    v43 = *(_QWORD *)(v1 + 240);
    v42 = *(_QWORD *)(v1 + 248);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_85_2();
    OUTLINED_FUNCTION_50();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v42 + 88))(v41, v43) == *MEMORY[0x24BEE7810])
    {
      v44 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v1 + 248));
      v44 = "";
    }
    v45 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v45);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v40, v46, v47, "AnswerSynthesisController.performSynthesisRequest", v44, v45);
    specialized UnsafeMutablePointer.deallocate()();
  }
  v48 = *(void (**)(uint64_t, uint64_t))(v1 + 424);
  v49 = *(_QWORD *)(v1 + 360);
  v50 = *(_QWORD *)(v1 + 328);

  v48(v49, v50);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_87();
  v31 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_5();
  return v31();
}

{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  os_signpost_type_t v11;
  os_signpost_id_t v12;

  OUTLINED_FUNCTION_65_10();
  OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 312));
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  v1 = *(NSObject **)(v0 + 472);
  OUTLINED_FUNCTION_103_1();
  OUTLINED_FUNCTION_103_1();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_187_1(v2))
  {
    v4 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v5 = (_QWORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v4 = 138412290;
    OUTLINED_FUNCTION_103_1();
    v6 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 160) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v5 = v6;
    OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_29_2(&dword_24315F000, v2, v3, "Failed to synthesize with error: %@", v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_21_4();

  v7 = v1;
  swift_willThrow();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_70_8();
  static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_108() & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 248);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_109_2();
    OUTLINED_FUNCTION_50();
    if (OUTLINED_FUNCTION_52_5(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88)) == *MEMORY[0x24BEE7810])
    {
      v9 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_40(*(_QWORD *)(v0 + 248));
      v9 = "";
    }
    v10 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    OUTLINED_FUNCTION_55_1(v10);
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_52_2(&dword_24315F000, v7, v11, v12, "AnswerSynthesisController.performSynthesisRequest", v9, v10);
    specialized UnsafeMutablePointer.deallocate()();
  }
  OUTLINED_FUNCTION_138_1();
  OUTLINED_FUNCTION_148_2();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_54_12();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_95();
  return OUTLINED_FUNCTION_10_18(*(uint64_t (**)(void))(v0 + 8));
}

void AnswerSynthesisController.convertSynthesisResultToSearchResultAnswers(synthesisResult:searchResults:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  void **v46;
  void *v47;
  uint64_t v48;
  Swift::String v49;
  unint64_t v50;
  unint64_t v51;
  Swift::String *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  os_log_type_t v90;
  ValueMetadata *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  os_log_type_t v100;
  _BOOL4 v101;
  _WORD *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  int *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  id v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  os_log_type_t v134;
  _BOOL4 v135;
  _WORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  __int128 v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  ValueMetadata *v168;
  unint64_t v169;

  v150 = type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_13_2(v7);
  v148 = type metadata accessor for UUID();
  v147 = *(_QWORD *)(v148 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_0_3();
  v10 = OUTLINED_FUNCTION_13_2(v9);
  v146 = type metadata accessor for Answer(v10);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_0_3();
  v13 = OUTLINED_FUNCTION_13_2(v12);
  v145 = type metadata accessor for SearchResult(v13);
  v162 = *(_QWORD *)(v145 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_18_1();
  v144 = v15;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v16);
  v151 = (uint64_t)&v137 - v17;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v18);
  v155 = (uint64_t)&v137 - v19;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v137 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_0_3();
  v161 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_18_1();
  v160 = v27;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (uint64_t *)((char *)&v137 - v29);
  v31 = MEMORY[0x24BEE4AF8];
  v167 = MEMORY[0x24BEE4AF8];
  v32 = *(_QWORD *)(a1 + 16);
  if (v32)
  {
    v33 = a2;
    OUTLINED_FUNCTION_67_11();
    for (i = 0; i != v32; ++i)
    {
      v35 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    OUTLINED_FUNCTION_102_0();
    v43 = v167;
    v31 = MEMORY[0x24BEE4AF8];
    a2 = v33;
  }
  else
  {
    v43 = MEMORY[0x24BEE4AF8];
  }
  v44 = *(_QWORD *)(v43 + 16);
  v159 = v23;
  v163 = a2;
  v164 = v30;
  v154 = a3;
  if (v44)
  {
    v165 = v22;
    v167 = v31;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
    v45 = v167;
    *(_QWORD *)&v158 = v43;
    v46 = (void **)(v43 + 56);
    do
    {
      v48 = (uint64_t)*(v46 - 1);
      v47 = *v46;
      v49 = String.lowercased()();
      v167 = v45;
      v51 = *(_QWORD *)(v45 + 16);
      v50 = *(_QWORD *)(v45 + 24);
      v43 = v51 + 1;
      OUTLINED_FUNCTION_23_0();
      if (v51 >= v50 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1);
        v45 = v167;
      }
      v46 += 4;
      *(_QWORD *)(v45 + 16) = v43;
      v52 = (Swift::String *)(v45 + 32 * v51);
      v52[2] = v49;
      v52[3]._countAndFlagsBits = v48;
      v52[3]._object = v47;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    v30 = v164;
    v22 = v165;
    a2 = v163;
    v23 = v159;
  }
  else
  {
    OUTLINED_FUNCTION_6_1();
    v45 = MEMORY[0x24BEE4AF8];
  }
  v165 = (char *)specialized Dictionary.init<A>(_:uniquingKeysWith:)(v45);
  v53 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  v54 = 0;
  *(_QWORD *)&v55 = 136315138;
  v158 = v55;
  v157 = MEMORY[0x24BEE4AD8] + 8;
  *(_QWORD *)&v55 = 136315394;
  v153 = v55;
  v143 = xmmword_24334DB60;
  v156 = MEMORY[0x24BEE4AF8];
LABEL_14:
  v56 = v160;
  while (1)
  {
    if (v54 == v53)
    {
      v57 = 1;
      v54 = v53;
    }
    else
    {
      if (v54 >= v53)
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        swift_once();
LABEL_69:
        v133 = OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_28(v133, (uint64_t)static Logging.search);
        v134 = OUTLINED_FUNCTION_66();
        v135 = OUTLINED_FUNCTION_21(v134);
        v132 = v154;
        if (v135)
        {
          v136 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
          OUTLINED_FUNCTION_51(v136);
          OUTLINED_FUNCTION_19_2(&dword_24315F000, v43, (os_log_type_t)v45, "Answer synthesis response: no answer needed", v56);
          specialized UnsafeMutablePointer.deallocate()();
        }

        _s10OmniSearch0B6ResultVWOhTm_0((uint64_t)v22, type metadata accessor for SearchResult);
        v131 = 2;
        goto LABEL_67;
      }
      LOBYTE(v45) = v54 + 1;
      v58 = v161 + *(int *)(v23 + 48);
      OUTLINED_FUNCTION_188_1(v163+ ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80))+ *(_QWORD *)(v162 + 72) * v54, v58);
      v59 = (uint64_t)&v56[*(int *)(v23 + 48)];
      *(_QWORD *)v56 = v54;
      OUTLINED_FUNCTION_137_3(v58, v59);
      v57 = 0;
      ++v54;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v56, v57, 1, v23);
    outlined init with take of (offset: Int, element: SearchResult)?((uint64_t)v56, (uint64_t)v30);
    if (OUTLINED_FUNCTION_71_5((uint64_t)v30) == 1)
      break;
    v43 = *v30;
    OUTLINED_FUNCTION_137_3((uint64_t)v30 + *(int *)(v23 + 48), (uint64_t)v22);
    v60 = keyForSearchResult(_:idx:)((uint64_t)v22, v43);
    if (!v61)
      goto LABEL_54;
    v62 = v60;
    v43 = v61;
    v45 = (uint64_t)v165;
    if (*((_QWORD *)v165 + 2))
    {
      OUTLINED_FUNCTION_64();
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v43);
      if ((v64 & 1) != 0)
      {
        v65 = (uint64_t *)(*(_QWORD *)(v45 + 56) + 16 * v63);
        v66 = *v65;
        v67 = v65[1];
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_102_0();
        goto LABEL_39;
      }
      OUTLINED_FUNCTION_6_1();
    }
    if (v53 != 1)
      goto LABEL_33;
    if (one-time initialization token for search != -1)
      swift_once();
    v68 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v68, (uint64_t)static Logging.search);
    OUTLINED_FUNCTION_67_11();
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_23_5(v70))
    {
      v71 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      v167 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v71 = v158;
      OUTLINED_FUNCTION_64();
      OUTLINED_FUNCTION_116_6();
      *(_QWORD *)(v71 + 4) = v72;
      OUTLINED_FUNCTION_130();
      OUTLINED_FUNCTION_29_2(&dword_24315F000, v69, (os_log_type_t)v30, "Answer synthesis: no answer found for document key: %s in searchResults, falling back to any answer in response", (uint8_t *)v71);
      swift_arrayDestroy();
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_102_0();
    v45 = (uint64_t)v165;
    specialized Dictionary.Values.startIndex.getter((uint64_t)v165);
    if ((v74 & 1) != 0)
      goto LABEL_74;
    if (*(_DWORD *)(v45 + 36) != v73)
      goto LABEL_73;
    OUTLINED_FUNCTION_115_4();
    if (v75 != v77)
    {
      v66 = specialized Dictionary.Values.subscript.getter(v75, v76, 0, v45);
      v67 = v82;
      OUTLINED_FUNCTION_6_1();
LABEL_39:
      v168 = &type metadata for FeatureFlag;
      v169 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
      LOBYTE(v167) = 1;
      v43 = isFeatureEnabled(_:)();
      v83 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
      if ((v43 & 1) != 0
        && (LOBYTE(v45) = OUTLINED_FUNCTION_97_1(), static NSUserDefaults.postProcessingFilter.getter(), (v83 & 1) != 0)
        && (v83 = PostProcessingFilter.apply(text:document:)(v66, v67, (uint64_t)v22, (uint64_t)&outlined read-only object #0 of AnswerSynthesisController.convertSynthesisResultToSearchResultAnswers(synthesisResult:searchResults:)), (v83 & 1) != 0))
      {
        if (one-time initialization token for search != -1)
          swift_once();
        v85 = OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_113_4(v85, (uint64_t)static Logging.search);
        OUTLINED_FUNCTION_188_1((uint64_t)v22, v155);
        OUTLINED_FUNCTION_76_0();
        Logger.logObject.getter();
        v86 = OUTLINED_FUNCTION_66();
        if (OUTLINED_FUNCTION_21(v86))
        {
          v87 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v141 = v43;
          v88 = v87;
          v142 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v166 = v142;
          *(_DWORD *)v88 = v153;
          OUTLINED_FUNCTION_76_0();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v166);
          *(_QWORD *)(v88 + 4) = v89;
          OUTLINED_FUNCTION_130();
          *(_WORD *)(v88 + 12) = 2080;
          v90 = v45;
          SearchResultItem.associatedValue.getter();
          v91 = v168;
          v92 = v169;
          __swift_project_boxed_opaque_existential_1(&v167, (uint64_t)v168);
          v93 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v92 + 56))(v91, v92);
          v95 = v94;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v95, &v166);
          *(_QWORD *)(v88 + 14) = v96;
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_163_0();
          OUTLINED_FUNCTION_36_12(&dword_24315F000, v141, v90, "postProcessingFilter filtering - substring match applied here for answer: %s and document: %s");
          swift_arrayDestroy();
          specialized UnsafeMutablePointer.deallocate()();
        }

        OUTLINED_FUNCTION_163_0();
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_60_8();
        v23 = v159;
        v30 = v164;
      }
      else
      {
        if (one-time initialization token for noAnswerLabels != -1)
          v83 = swift_once();
        OUTLINED_FUNCTION_149_0(v83, v84, static AnswerSynthesisController.noAnswerLabels);
        if ((v97 & 1) == 0)
        {
          if (one-time initialization token for noExtractionLabels != -1)
            v97 = swift_once();
          OUTLINED_FUNCTION_149_0(v97, v98, static AnswerSynthesisController.noExtractionLabels);
          if ((v103 & 1) == 0)
          {
            UUID.init()();
            v140 = UUID.uuidString.getter();
            v139 = v104;
            v105 = OUTLINED_FUNCTION_180_1();
            v106(v105, v148);
            v107 = (int *)v146;
            v108 = v152;
            v137 = type metadata accessor for URL();
            OUTLINED_FUNCTION_86_3();
            __swift_storeEnumTagSinglePayload(v109, v110, v111, v112);
            v138 = Dictionary.init(dictionaryLiteral:)();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchResult>);
            v113 = ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
            v142 = *(_QWORD *)(v162 + 72);
            v114 = swift_allocObject();
            *(_OWORD *)(v114 + 16) = v143;
            v141 = v113;
            OUTLINED_FUNCTION_188_1((uint64_t)v22, (uint64_t)v113 + v114);
            OUTLINED_FUNCTION_86_3();
            __swift_storeEnumTagSinglePayload(v115, v116, v117, v137);
            v118 = v139;
            *v108 = v140;
            v108[1] = v118;
            v119 = (uint64_t *)((char *)v108 + v107[6]);
            *v119 = v66;
            v119[1] = v67;
            *(uint64_t *)((char *)v108 + v107[7]) = v138;
            *(uint64_t *)((char *)v108 + v107[8]) = v114;
            *(uint64_t *)((char *)v108 + v107[9]) = MEMORY[0x24BEE4AF8];
            *((_BYTE *)v108 + v107[11]) = 0;
            v120 = v149;
            outlined init with copy of SearchResult((uint64_t)v108, v149, type metadata accessor for Answer);
            swift_storeEnumTagMultiPayload();
            v45 = v145;
            v121 = *(void **)&v22[*(int *)(v145 + 20)];
            v122 = v144;
            v123 = (_QWORD *)(v144 + *(int *)(v145 + 24));
            *v123 = 0;
            v123[1] = 0;
            outlined init with take of SearchResult(v120, v122, type metadata accessor for SearchResultItem);
            *(_QWORD *)(v122 + *(int *)(v45 + 20)) = v121;
            OUTLINED_FUNCTION_137_3(v122, v151);
            v124 = v121;
            v125 = v156;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_130_2();
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v125 = v129;
            }
            v23 = v159;
            v30 = v164;
            v127 = *(_QWORD *)(v125 + 16);
            v126 = *(_QWORD *)(v125 + 24);
            v156 = v125;
            v43 = v127 + 1;
            if (v127 >= v126 >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v156 = v130;
            }
            v128 = v156;
            *(_QWORD *)(v156 + 16) = v43;
            OUTLINED_FUNCTION_137_3(v151, (uint64_t)v141 + v128 + v127 * v142);
            _s10OmniSearch0B6ResultVWOhTm_0((uint64_t)v152, type metadata accessor for Answer);
            OUTLINED_FUNCTION_60_8();
            goto LABEL_14;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_47();
          if (one-time initialization token for search == -1)
            goto LABEL_69;
          goto LABEL_75;
        }
        OUTLINED_FUNCTION_47();
        if (one-time initialization token for search != -1)
          swift_once();
        v99 = OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_28(v99, (uint64_t)static Logging.search);
        v100 = OUTLINED_FUNCTION_66();
        v101 = OUTLINED_FUNCTION_21(v100);
        v30 = v164;
        if (v101)
        {
          v102 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
          OUTLINED_FUNCTION_51(v102);
          OUTLINED_FUNCTION_19_2(&dword_24315F000, v43, (os_log_type_t)v45, "Answer synthesis response: no answer found in document", v56);
          specialized UnsafeMutablePointer.deallocate()();
        }

LABEL_54:
        OUTLINED_FUNCTION_60_8();
      }
    }
    else
    {
LABEL_33:
      if (one-time initialization token for search != -1)
        swift_once();
      v78 = OUTLINED_FUNCTION_13();
      __swift_project_value_buffer(v78, (uint64_t)static Logging.search);
      OUTLINED_FUNCTION_64();
      v45 = Logger.logObject.getter();
      v79 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_23_5(v79))
      {
        v80 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        v167 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_DWORD *)v80 = v158;
        OUTLINED_FUNCTION_64();
        OUTLINED_FUNCTION_116_6();
        *(_QWORD *)(v80 + 4) = v81;
        OUTLINED_FUNCTION_130();
        OUTLINED_FUNCTION_29_2(&dword_24315F000, v45, (os_log_type_t)v30, "Answer synthesis: no answer found for document: %s in searchResults", (uint8_t *)v80);
        OUTLINED_FUNCTION_34_2();
        specialized UnsafeMutablePointer.deallocate()();
      }
      OUTLINED_FUNCTION_102_0();

      OUTLINED_FUNCTION_60_8();
      v30 = v164;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v131 = v156;
  if (!*(_QWORD *)(v156 + 16))
  {
    swift_bridgeObjectRelease();
    v131 = 1;
  }
  v132 = v154;
LABEL_67:
  *v132 = v131;
  OUTLINED_FUNCTION_43_0();
}

uint64_t specialized Dictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x24BEE4B00];
  }
  v6 = v3;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, 1, &v6);
  v4 = v6;
  if (v1)
    swift_release();
  return v4;
}

uint64_t AnswerSynthesisController.collateNetworkServiceResults(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  if (one-time initialization token for search != -1)
    goto LABEL_48;
  while (1)
  {
    v4 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_113_4(v4, (uint64_t)static Logging.search);
    OUTLINED_FUNCTION_115();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    v40 = a1;
    if (OUTLINED_FUNCTION_187_1(v5))
    {
      v7 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v7 = 134217984;
      v42 = *(_QWORD *)(v40 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_29_2(&dword_24315F000, v5, v6, "Answer synthesis: collating %ld results", v7);
      specialized UnsafeMutablePointer.deallocate()();
    }

    result = OUTLINED_FUNCTION_96_0();
    v9 = *(uint64_t **)(a1 + 16);
    if (!v9)
      break;
    v39 = a2;
    OUTLINED_FUNCTION_115();
    v10 = 0;
    v11 = 0;
    a2 = 0;
    v12 = MEMORY[0x24BEE4AF8];
    v41 = v9;
    while (1)
    {
      v13 = a1 + 8 * (_QWORD)a2;
      v14 = *(_QWORD *)(v13 + 32);
      if (!v14)
      {
        v16 = Logger.logObject.getter();
        v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v42 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          *(_DWORD *)v18 = 136315138;
          v19 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v42);
          *(_QWORD *)(v18 + 4) = v21;
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_29_2(&dword_24315F000, v16, v17, "Answer synthesis: unexpected result type %s during result collation.", (uint8_t *)v18);
          swift_arrayDestroy();
          specialized UnsafeMutablePointer.deallocate()();
        }

LABEL_34:
        v9 = v41;
        goto LABEL_35;
      }
      if (v14 != 1)
        break;
      v15 = __OFADD__(v10++, 1);
      if (v15)
        goto LABEL_43;
LABEL_35:
      a2 = (uint64_t *)((char *)a2 + 1);
      if (v9 == a2)
      {
        result = OUTLINED_FUNCTION_96_0();
        a2 = v39;
        goto LABEL_38;
      }
    }
    if (v14 != 2)
    {
      v22 = *(_QWORD *)(v14 + 16);
      v23 = *(_QWORD *)(v12 + 16);
      if (__OFADD__(v23, v22))
        goto LABEL_44;
      outlined copy of AnswerSynthesisResult(*(_QWORD *)(v13 + 32));
      if (!swift_isUniquelyReferenced_nonNull_native() || v23 + v22 > *(_QWORD *)(v12 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = v24;
      }
      if (*(_QWORD *)(v14 + 16))
      {
        v25 = *(_QWORD *)(v12 + 16);
        v26 = (*(_QWORD *)(v12 + 24) >> 1) - v25;
        v27 = type metadata accessor for SearchResult(0);
        if (v26 < v22)
          goto LABEL_46;
        v28 = *(_QWORD *)(v27 - 8);
        v29 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        v30 = *(_QWORD *)(v28 + 72);
        v31 = v12 + v29 + v30 * v25;
        v32 = v14 + v29;
        v33 = v30 * v22;
        v34 = v31 + v33;
        v35 = v32 + v33;
        if (v32 < v34 && v31 < v35)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v22)
        {
          v37 = *(_QWORD *)(v12 + 16);
          v15 = __OFADD__(v37, v22);
          v38 = v37 + v22;
          if (v15)
            goto LABEL_47;
          *(_QWORD *)(v12 + 16) = v38;
        }
      }
      else if (v22)
      {
        goto LABEL_45;
      }
      outlined consume of AnswerSynthesisResult(v14);
      goto LABEL_34;
    }
    v15 = __OFADD__(v11++, 1);
    if (!v15)
      goto LABEL_35;
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    swift_once();
  }
  v10 = 0;
  v11 = 0;
  v12 = MEMORY[0x24BEE4AF8];
LABEL_38:
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_bridgeObjectRelease();
    if (v10 >= v11)
      v12 = 1;
    else
      v12 = 2;
  }
  *a2 = v12;
  return result;
}

uint64_t AnswerSynthesisController.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t AnswerSynthesisController.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_81_7();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AnswerSynthesisControllerProtocol.synthesize(query:searchResults:) in conformance AnswerSynthesisController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(**(_QWORD **)v4 + 152)
                                                                   + *(_QWORD *)(**(_QWORD **)v4 + 152));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = partial apply for closure #2 in closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  return v12(a1, a2, a3, a4);
}

uint64_t AnswerSynthesisModelResult.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
  GeneratedValues.extract<A>(field:)();
  v1 = type metadata accessor for GeneratedValues();
  if (v0)
    return OUTLINED_FUNCTION_0_18(v1);
  OUTLINED_FUNCTION_0_18(v1);
  return v3;
}

uint64_t AnswerSynthesisModelResult.schema.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for schema != -1)
    swift_once();
  v0 = type metadata accessor for Schema();
  return __swift_project_value_buffer(v0, (uint64_t)static AnswerSynthesisModelResult.schema);
}

uint64_t static AnswerSynthesisModelResult.schema.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for schema != -1)
    swift_once();
  v2 = type metadata accessor for Schema();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static AnswerSynthesisModelResult.schema);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnswerSynthesisModelResult.CodingKeys()
{
  lazy protocol witness table accessor for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnswerSynthesisModelResult.CodingKeys()
{
  lazy protocol witness table accessor for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AnswerSynthesisModelResult.encode(to:)(_QWORD *a1)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnswerSynthesisModelResult.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_32_4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return OUTLINED_FUNCTION_128_3();
}

_QWORD *AnswerSynthesisModelResult.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnswerSynthesisModelResult.CodingKeys>);
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_32_4();
  v4 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_128_3();
    v4 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v4;
}

_QWORD *protocol witness for Decodable.init(from:) in conformance AnswerSynthesisModelResult@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = AnswerSynthesisModelResult.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnswerSynthesisModelResult(_QWORD *a1)
{
  return AnswerSynthesisModelResult.encode(to:)(a1);
}

uint64_t protocol witness for static Generable.schema.getter in conformance AnswerSynthesisModelResult@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for schema != -1)
    swift_once();
  v2 = type metadata accessor for Schema();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static AnswerSynthesisModelResult.schema);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for Generable.init(from:) in conformance AnswerSynthesisModelResult@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = AnswerSynthesisModelResult.init(from:)();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_243270A58()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_243270A7C()
{
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_81_7();
  return swift_deallocObject();
}

uint64_t closure #1 in AnySearchEntityPreprocessing.init(_:)partial apply()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_169_1();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_97_8(v1, (uint64_t)protocol witness for SearchEntityPreprocess.preprocess(data:query:) in conformance SmartChunkingPreprocessing);
  return OUTLINED_FUNCTION_61_7(v2, v3, v4, v5);
}

uint64_t partial apply for closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = swift_task_alloc();
  v7 = (_QWORD *)OUTLINED_FUNCTION_112(v6);
  *v7 = v1;
  v7[1] = partial apply for closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  OUTLINED_FUNCTION_122_3();
  return closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)(v8, v9, v10, v2, v3, v4, v5);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v4 = v2;
  v6 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v39 = a2;
  v7 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_36;
  v38 = v6 + 64;
  OUTLINED_FUNCTION_74_11();
  v36 = v2;
  v37 = v8;
  v9 = v7 + 8;
  OUTLINED_FUNCTION_10_8();
  v10 = 0;
  if (!v3)
    goto LABEL_4;
LABEL_3:
  OUTLINED_FUNCTION_191_1();
  for (i = v11 | (v10 << 6); ; i = v16 + (v10 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    if ((v39 & 1) == 0)
    {
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_76_0();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_134_2();
    v26 = (v25 << v23) & ~v9[v24];
    if (!v26)
    {
      OUTLINED_FUNCTION_179_0();
      while (++v29 != v30 || (v28 & 1) == 0)
      {
        v31 = v29 == v30;
        if (v29 == v30)
          v29 = 0;
        v28 |= v31;
        v32 = v9[v29];
        if (v32 != -1)
        {
          v27 = __clz(__rbit64(~v32)) + (v29 << 6);
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    v27 = __clz(__rbit64(v26)) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_27:
    *(_QWORD *)((char *)v9 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v33 = (_QWORD *)(v7[6] + 16 * v27);
    *v33 = v19;
    v33[1] = v18;
    v34 = (_QWORD *)(v7[7] + 16 * v27);
    *v34 = v21;
    v34[1] = v22;
    ++v7[2];
    if (v3)
      goto LABEL_3;
LABEL_4:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_38;
    if (v13 >= v37)
    {
      OUTLINED_FUNCTION_11_5();
      v4 = v36;
      v14 = (_QWORD *)(v6 + 64);
      goto LABEL_31;
    }
    v14 = (_QWORD *)(v6 + 64);
    ++v10;
    if (!*(_QWORD *)(v38 + 8 * v13))
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v37)
        goto LABEL_29;
      if (!*(_QWORD *)(v38 + 8 * v10))
        break;
    }
LABEL_15:
    OUTLINED_FUNCTION_186_1();
  }
  v15 = v13 + 2;
  if (v15 < v37)
  {
    if (!*(_QWORD *)(v38 + 8 * v15))
    {
      while (1)
      {
        v10 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_39;
        if (v10 >= v37)
          goto LABEL_29;
        ++v15;
        if (*(_QWORD *)(v38 + 8 * v10))
          goto LABEL_15;
      }
    }
    v10 = v15;
    goto LABEL_15;
  }
LABEL_29:
  OUTLINED_FUNCTION_11_5();
  v4 = v36;
LABEL_31:
  if ((v39 & 1) != 0)
  {
    v35 = 1 << *(_BYTE *)(v6 + 32);
    if (v35 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v35 + 63) >> 6, v14);
    else
      *v14 = -1 << v35;
    *(_QWORD *)(v6 + 16) = 0;
  }
LABEL_36:
  OUTLINED_FUNCTION_11_5();
  *v4 = v7;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;

  v5 = v2;
  type metadata accessor for SearchResultType();
  OUTLINED_FUNCTION_51_8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)*v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SearchResultType, [(offset: Int, element: SearchResult)]>);
  v41 = a2;
  v11 = v10;
  v12 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (!v11[2])
    goto LABEL_37;
  OUTLINED_FUNCTION_115_4();
  v39 = v11 + 8;
  OUTLINED_FUNCTION_74_11();
  v37 = v5;
  v38 = v13;
  v14 = v12 + 8;
  OUTLINED_FUNCTION_75();
  v15 = 0;
  v40 = v11;
  if (!v4)
    goto LABEL_4;
LABEL_3:
  OUTLINED_FUNCTION_191_1();
  for (i = v16 | (v15 << 6); ; i = v21 + (v15 << 6))
  {
    v22 = *(_QWORD *)(v3 + 72);
    v23 = v11[6] + v22 * i;
    if ((v41 & 1) != 0)
    {
      OUTLINED_FUNCTION_104_8((uint64_t)v9, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
      v24 = *(_QWORD *)(v11[7] + 8 * i);
    }
    else
    {
      OUTLINED_FUNCTION_104_8((uint64_t)v9, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
      v24 = *(_QWORD *)(v11[7] + 8 * i);
      OUTLINED_FUNCTION_64();
    }
    lazy protocol witness table accessor for type SearchResultType and conformance SearchResultType(&lazy protocol witness table cache variable for type SearchResultType and conformance SearchResultType, MEMORY[0x24BE6E238]);
    OUTLINED_FUNCTION_178_0();
    dispatch thunk of Hashable._rawHashValue(seed:)();
    OUTLINED_FUNCTION_134_2();
    v28 = (v27 << v25) & ~v14[v26];
    if (!v28)
    {
      OUTLINED_FUNCTION_179_0();
      while (++v31 != v32 || (v30 & 1) == 0)
      {
        v33 = v31 == v32;
        if (v31 == v32)
          v31 = 0;
        v30 |= v33;
        v34 = v14[v31];
        if (v34 != -1)
        {
          v29 = __clz(__rbit64(~v34)) + (v31 << 6);
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    v29 = __clz(__rbit64(v28)) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_28:
    *(_QWORD *)((char *)v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    OUTLINED_FUNCTION_104_8(v12[6] + v22 * v29, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    *(_QWORD *)(v12[7] + 8 * v29) = v24;
    ++v12[2];
    v11 = v40;
    if (v4)
      goto LABEL_3;
LABEL_4:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_39;
    if (v18 >= v38)
    {
      OUTLINED_FUNCTION_50();
      v5 = v37;
      v19 = v39;
      goto LABEL_32;
    }
    v19 = v39;
    ++v15;
    if (!v39[v18])
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v38)
        goto LABEL_30;
      if (!v39[v15])
        break;
    }
LABEL_15:
    OUTLINED_FUNCTION_186_1();
  }
  v20 = v18 + 2;
  if (v20 < v38)
  {
    if (!v39[v20])
    {
      while (1)
      {
        v15 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_40;
        if (v15 >= v38)
          goto LABEL_30;
        ++v20;
        if (v39[v15])
          goto LABEL_15;
      }
    }
    v15 = v20;
    goto LABEL_15;
  }
LABEL_30:
  OUTLINED_FUNCTION_50();
  v5 = v37;
LABEL_32:
  if ((v41 & 1) != 0)
  {
    OUTLINED_FUNCTION_115_4();
    if (v35 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v35 + 63) >> 6, v19);
    else
      *v19 = -1 << v35;
    v11[2] = 0;
  }
LABEL_37:
  OUTLINED_FUNCTION_50();
  *v5 = v12;
  OUTLINED_FUNCTION_43_0();
}

uint64_t partial apply for closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_112(v3);
  *v4 = v1;
  v4[1] = partial apply for closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  OUTLINED_FUNCTION_122_3();
  return closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)(v5, v6, v7, v2);
}

unint64_t lazy protocol witness table accessor for type AnswerSynthesisModelResult and conformance AnswerSynthesisModelResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisModelResult and conformance AnswerSynthesisModelResult;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisModelResult and conformance AnswerSynthesisModelResult)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisModelResult, &type metadata for AnswerSynthesisModelResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisModelResult and conformance AnswerSynthesisModelResult);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v28 = v4;
    v8 = *(v6 - 3);
    v7 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    v11 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    v14 = v11[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (v11[3] >= v16)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a2 & 1);
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_18;
      v13 = v18;
    }
    v20 = (_QWORD *)*a3;
    if ((v17 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = (_QWORD *)(v20[7] + 16 * v13);
      swift_bridgeObjectRelease();
      *v21 = v9;
      v21[1] = v10;
    }
    else
    {
      v20[(v13 >> 6) + 8] |= 1 << v13;
      v22 = (uint64_t *)(v20[6] + 16 * v13);
      *v22 = v8;
      v22[1] = v7;
      v23 = (_QWORD *)(v20[7] + 16 * v13);
      *v23 = v9;
      v23[1] = v10;
      v24 = v20[2];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        goto LABEL_17;
      v20[2] = v26;
    }
    v6 += 4;
    a2 = 1;
    --v4;
    if (v28 == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized StrideTo.underestimatedCount.getter(int64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v5;
  BOOL v6;

  result = 0;
  while (1)
  {
    v5 = a1 <= a2;
    if (a3 > 0)
      v5 = a1 >= a2;
    if (v5)
      break;
    v6 = __OFADD__(a1, a3);
    a1 += a3;
    if (v6)
      a1 = (a1 >> 63) ^ 0x8000000000000000;
    v6 = __OFADD__(result++, 1);
    if (v6)
    {
      __break(1u);
      return result;
    }
  }
  return result;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
LABEL_3:
    v3 = __clz(__rbit64(v1)) + v2;
    return OUTLINED_FUNCTION_118_3(v3);
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return OUTLINED_FUNCTION_118_3(v3);
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    goto LABEL_3;
  }
  v2 = 64;
  v7 = 10;
  while (v7 - 8 < (unint64_t)(v3 + 63) >> 6)
  {
    v1 = *(_QWORD *)(a1 + 8 * v7);
    v2 += 64;
    ++v7;
    if (v1)
      goto LABEL_3;
  }
  return OUTLINED_FUNCTION_118_3(v3);
}

uint64_t specialized Dictionary.Values.endIndex.getter(uint64_t a1)
{
  return OUTLINED_FUNCTION_118_3(1 << *(_BYTE *)(a1 + 32));
}

uint64_t specialized Dictionary.Values.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * result);
    OUTLINED_FUNCTION_4_7();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    v2 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BE3BAB0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    _sSDyS2SGSDyxq_GSEsSERzSER_rlWlTm_0(&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    _sSDyS2SGSDyxq_GSEsSERzSER_rlWlTm_0(&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    v3 = v2;
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisModelResult.CodingKeys, &unk_2513CF048);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisModelResult.CodingKeys, &unk_2513CF048);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisModelResult.CodingKeys, &unk_2513CF048);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisModelResult.CodingKeys, &unk_2513CF048);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisModelResult.CodingKeys and conformance AnswerSynthesisModelResult.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnswerSynthesisController.AnswerSynthesisModelType and conformance AnswerSynthesisController.AnswerSynthesisModelType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisController.AnswerSynthesisModelType and conformance AnswerSynthesisController.AnswerSynthesisModelType;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisController.AnswerSynthesisModelType and conformance AnswerSynthesisController.AnswerSynthesisModelType)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisController.AnswerSynthesisModelType, &type metadata for AnswerSynthesisController.AnswerSynthesisModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisController.AnswerSynthesisModelType and conformance AnswerSynthesisController.AnswerSynthesisModelType);
  }
  return result;
}

uint64_t dispatch thunk of AnswerSynthesisControllerProtocol.synthesize(query:searchResults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = OUTLINED_FUNCTION_6();
  v14 = (_QWORD *)OUTLINED_FUNCTION_112(v13);
  *v14 = v6;
  v14[1] = partial apply for closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata accessor for AnswerSynthesisController()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnswerSynthesisController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnswerSynthesisController.__allocating_init(answerSynthesisModel:modelType:answerSynthesisTokenLimit:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 128))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnswerSynthesisController.createAnswerSynthesisBatchRequests(for:with:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_110_1();
  v1 = (_QWORD *)OUTLINED_FUNCTION_25_5();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_96_7(v1, (uint64_t)dispatch thunk of AnswerSynthesisController.createAnswerSynthesisBatchRequests(for:with:));
  return OUTLINED_FUNCTION_0_14(v2, v3, v4, v5);
}

uint64_t dispatch thunk of AnswerSynthesisController.preprocessSearchEntity(for:with:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_110_1();
  v1 = (_QWORD *)OUTLINED_FUNCTION_25_5();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_96_7(v1, (uint64_t)dispatch thunk of AnswerSynthesisController.preprocessSearchEntity(for:with:));
  return OUTLINED_FUNCTION_0_14(v2, v3, v4, v5);
}

uint64_t dispatch thunk of AnswerSynthesisController.preprocessSearchEntity(for:with:)(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_2();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t dispatch thunk of AnswerSynthesisController.synthesize(query:searchResults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = OUTLINED_FUNCTION_6();
  v10 = (_QWORD *)OUTLINED_FUNCTION_112(v9);
  *v10 = v4;
  v10[1] = partial apply for closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AnswerSynthesisController.prewarmModel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AnswerSynthesisController.createAnswerSynthesisRequest(for:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of AnswerSynthesisController.performSynthesisRequest(for:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_110_1();
  v4 = OUTLINED_FUNCTION_25_5();
  v5 = (_QWORD *)OUTLINED_FUNCTION_112(v4);
  *v5 = v2;
  v5[1] = partial apply for closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  return v7(v3, v1, v0);
}

uint64_t dispatch thunk of AnswerSynthesisController.convertSynthesisResultToSearchResultAnswers(synthesisResult:searchResults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of AnswerSynthesisController.collateNetworkServiceResults(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t storeEnumTagSinglePayload for AnswerSynthesisController.AnswerSynthesisModelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2432719AC + 4 * byte_243356335[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2432719E0 + 4 * byte_243356330[v4]))();
}

uint64_t sub_2432719E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432719E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432719F0);
  return result;
}

uint64_t sub_2432719FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243271A04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_243271A08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243271A10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnswerSynthesisController.AnswerSynthesisModelType()
{
  return &type metadata for AnswerSynthesisController.AnswerSynthesisModelType;
}

ValueMetadata *type metadata accessor for AnswerSynthesisModelResult()
{
  return &type metadata for AnswerSynthesisModelResult;
}

uint64_t storeEnumTagSinglePayload for AnswerSynthesisModelResult.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_243271A7C + 4 * byte_24335633A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_243271A9C + 4 * byte_24335633F[v4]))();
}

_BYTE *sub_243271A7C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_243271A9C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_243271AA4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_243271AAC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_243271AB4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_243271ABC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AnswerSynthesisModelResult.CodingKeys()
{
  return &unk_2513CF048;
}

uint64_t sub_243271B98()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_158_1();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)OUTLINED_FUNCTION_112(v1);
  *v2 = v0;
  v2[1] = partial apply for closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  OUTLINED_FUNCTION_68_11();
  OUTLINED_FUNCTION_90();
  return closure #1 in closure #1 in AnswerSynthesisController.synthesize(query:searchResults:)(v3, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t outlined consume of AnswerSynthesisResult?(unint64_t result)
{
  if (result != 3)
    return outlined consume of AnswerSynthesisResult(result);
  return result;
}

unint64_t outlined copy of AnswerSynthesisResult?(unint64_t result)
{
  if (result != 3)
    return outlined copy of AnswerSynthesisResult(result);
  return result;
}

uint64_t sub_243271C64()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_81_7();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_158_1();
  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_112(v3);
  *v4 = v1;
  v4[1] = partial apply for closure #2 in closure #1 in GlobalSearchClient.search(query:sources:allowedTypes:searchOptions:);
  v5 = OUTLINED_FUNCTION_68_11();
  return closure #1 in closure #1 in AnswerSynthesisController.preprocessSearchEntity(for:with:)(v5, v6, v7, v8, v9, v10, v11, v2);
}

uint64_t OUTLINED_FUNCTION_5_23()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t OUTLINED_FUNCTION_10_18(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_23_19()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_33_11(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, (a1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_39_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_44_14()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t OUTLINED_FUNCTION_49_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(v9 + 12) = 2048;
  *(_QWORD *)(v10 + 24) = a9;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_53_13(uint64_t a1@<X8>)
{
  uint64_t v1;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002DLL, a1 | 0x8000000000000000, (uint64_t *)(v1 - 88));
}

uint64_t OUTLINED_FUNCTION_54_12()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_56_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;

  *(_WORD *)(v0 + 22) = v3;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v2 + 16);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_57_7()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_60_8()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  _s10OmniSearch0B6ResultVWOhTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_61_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in AnySearchEntityPreprocessing.init(_:)(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_66_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_67_11()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_68_11()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_69_9@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_70_8()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_71_11()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_81_7()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_82_11(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_84_8()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_86_10()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 144) + 88))(v0, *(_QWORD *)(v1 - 136));
}

void OUTLINED_FUNCTION_95_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 0x20u);
}

uint64_t OUTLINED_FUNCTION_96_7@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_97_8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_103_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_104_8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_113_4(uint64_t a1, uint64_t a2)
{
  return __swift_project_value_buffer(a1, a2);
}

void OUTLINED_FUNCTION_116_6()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_118_3@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void OUTLINED_FUNCTION_124_6()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_125_3()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_128_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void OUTLINED_FUNCTION_129_3()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_130_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_131_3()
{
  uint64_t v0;

  return outlined destroy of TaskPriority?(v0);
}

void OUTLINED_FUNCTION_135_4()
{
  void *v0;

}

void OUTLINED_FUNCTION_137_3(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of SearchResult(a1, a2, v2);
}

void OUTLINED_FUNCTION_138_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_146_3()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OUTLINED_FUNCTION_148_2()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void OUTLINED_FUNCTION_149_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  specialized Set.contains(_:)(v3, v4, a3);
}

void OUTLINED_FUNCTION_150_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_151_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_163_0()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  _s10OmniSearch0B6ResultVWOhTm_0(v1, v0);
}

uint64_t OUTLINED_FUNCTION_170_1()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, _QWORD);

  return v1(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
}

uint64_t OUTLINED_FUNCTION_178_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_180_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_182_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_183_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL OUTLINED_FUNCTION_187_1(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void OUTLINED_FUNCTION_188_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of SearchResult(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_189_1()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_190_1()
{
  return swift_slowAlloc();
}

void ResolvedInfo.init()(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = OUTLINED_FUNCTION_53_6();
  v3 = OUTLINED_FUNCTION_63_6();
  OUTLINED_FUNCTION_16_23(v3);
  *(_QWORD *)((char *)a1 + *(int *)(v2 + 24)) = MEMORY[0x24BEE4B00];
  v4 = type metadata accessor for URL();
  OUTLINED_FUNCTION_16_23(v4);
  *(_QWORD *)((char *)a1 + *(int *)(v2 + 32)) = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_12();
}

uint64_t type metadata accessor for ResolvedInfo()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvedInfo;
  if (!type metadata singleton initialization cache for ResolvedInfo)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t default argument 2 of ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t default argument 4 of ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)()
{
  return MEMORY[0x24BEE4AF8];
}

void ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int *v12;

  *a7 = a1;
  a7[1] = a2;
  v12 = (int *)OUTLINED_FUNCTION_53_6();
  outlined init with take of URL?(a3, (uint64_t)a7 + v12[5], &demangling cache variable for type metadata for SearchResultItem?);
  *(_QWORD *)((char *)a7 + v12[6]) = a4;
  outlined init with take of URL?(a5, (uint64_t)a7 + v12[7], &demangling cache variable for type metadata for URL?);
  *(_QWORD *)((char *)a7 + v12[8]) = a6;
}

void ExtractedResult.buildAnswerResult()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = a1;
  v3 = type metadata accessor for Date();
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  v44 = v4;
  v48 = type metadata accessor for URL();
  v43 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_0_3();
  v42 = v5;
  v49 = type metadata accessor for ExtractedInfo(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_2_2();
  v9 = v8 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_44_11();
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_2_2();
  v15 = v14 - v13;
  v47 = type metadata accessor for ExtractedResult(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_2_2();
  v19 = v18 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_2_2();
  v23 = v22 - v21;
  v24 = (int *)type metadata accessor for Answer(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v25);
  v27 = (uint64_t *)((char *)&v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  SearchResultItem.associatedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchItem);
  v28 = OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_5_24(v23, v28 ^ 1u);
  outlined init with copy of SearchResult(v2, v19, type metadata accessor for ExtractedResult);
  if (__swift_getEnumTagSinglePayload(v23, 1, (uint64_t)v24) == 1)
  {
    UUID.init()();
    v41 = v2;
    v29 = UUID.uuidString.getter();
    v39 = v30;
    v40 = v29;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
    OUTLINED_FUNCTION_42_8(v1, 1, 1);
    v38 = Dictionary.init(dictionaryLiteral:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchResult>);
    v31 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_77_0() - 8) + 80);
    v32 = (v31 + 32) & ~v31;
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_24334DB60;
    v2 = v41;
    outlined init with copy of SearchResult(v19, v33 + v32, type metadata accessor for SearchResult);
    _s10OmniSearch0B6ResultVWOhTm_1(v19, type metadata accessor for ExtractedResult);
    OUTLINED_FUNCTION_42_8((uint64_t)v27 + v24[10], 1, 1);
    v34 = v39;
    *v27 = v40;
    v27[1] = v34;
    outlined init with take of URL?(v1, (uint64_t)v27 + v24[5], &demangling cache variable for type metadata for URL?);
    v35 = (uint64_t *)((char *)v27 + v24[6]);
    *v35 = 0;
    v35[1] = 0xE000000000000000;
    *(uint64_t *)((char *)v27 + v24[7]) = v38;
    *(uint64_t *)((char *)v27 + v24[8]) = v33;
    *(uint64_t *)((char *)v27 + v24[9]) = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v27 + v24[11]) = 0;
    outlined destroy of MobileSMSDocument?(v23, &demangling cache variable for type metadata for Answer?);
  }
  else
  {
    _s10OmniSearch0B6ResultVWOhTm_1(v19, type metadata accessor for ExtractedResult);
    outlined init with take of SearchResult(v23, (uint64_t)v27, type metadata accessor for Answer);
  }
  outlined init with copy of SearchResult(v2 + *(int *)(v47 + 20), v9, type metadata accessor for ExtractedInfo);
  v36 = (char *)&loc_2432726AC + *((int *)qword_2432728F0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_2432726BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *v2;
  v5 = v2[1];
  OUTLINED_FUNCTION_1_4();
  v6 = static ExtractedResult.kExtractedInfoKey[0];
  v7 = static ExtractedResult.kExtractedInfoKey[1];
  v8 = *(int *)(v1 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v0 + v8);
  *(_QWORD *)(v0 + v8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v5, v6, v7, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v0 + v8) = *(_QWORD *)(v3 - 160);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_36_0();
  v10 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  v11 = v10[1];
  v12 = *v10 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v11) & 0xF;
  if (v12)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *v10 = v4;
    v10[1] = v5;
  }
  v13 = *(_QWORD *)(v3 - 168);
  outlined init with copy of SearchResult(v0, v13, type metadata accessor for Answer);
  OUTLINED_FUNCTION_63_6();
  swift_storeEnumTagMultiPayload();
  v14 = OUTLINED_FUNCTION_77_0();
  v15 = (_QWORD *)(v13 + *(int *)(v14 + 24));
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)(v13 + *(int *)(v14 + 20)) = 0;
  _s10OmniSearch0B6ResultVWOhTm_1(v0, type metadata accessor for Answer);
  OUTLINED_FUNCTION_43_0();
}

void ExtractedResult.updateResultWith(_:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[5];

  v48 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  v46 = OUTLINED_FUNCTION_2_20();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_2_2();
  v8 = v7 - v6;
  v9 = OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_15();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v45 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v42 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_2_2();
  v18 = v17 - v16;
  v19 = OUTLINED_FUNCTION_63_6();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_2_2();
  v23 = v22 - v21;
  v24 = (int *)OUTLINED_FUNCTION_53_6();
  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?((uint64_t)a1 + v24[5], v18, &demangling cache variable for type metadata for SearchResultItem?);
  if (__swift_getEnumTagSinglePayload(v18, 1, v19) != 1)
  {
    outlined init with take of SearchResult(v18, v23, type metadata accessor for SearchResultItem);
    outlined init with copy of SearchResult(v47, (uint64_t)v14, type metadata accessor for SearchResult);
    outlined assign with take of SearchResultItem(v23, (uint64_t)v14);
    v39 = (uint64_t)v14;
    v40 = v48;
LABEL_6:
    outlined init with take of SearchResult(v39, v40, type metadata accessor for SearchResult);
    goto LABEL_7;
  }
  v44 = v9;
  outlined destroy of MobileSMSDocument?(v18, &demangling cache variable for type metadata for SearchResultItem?);
  v25 = v45;
  ExtractedResult.buildAnswerResult()(v45);
  SearchResultItem.associatedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchItem);
  v26 = (int *)v46;
  if (!OUTLINED_FUNCTION_7_16())
  {
    v41 = OUTLINED_FUNCTION_29_13(v2, 1);
    OUTLINED_FUNCTION_75_3(v41, &demangling cache variable for type metadata for Answer?);
    v39 = v25;
    v40 = v48;
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_29_13(v2, 0);
  outlined init with take of SearchResult(v2, v8, type metadata accessor for Answer);
  v27 = *(uint64_t *)((char *)a1 + v24[6]);
  v47 = v19;
  v28 = v26[7];
  OUTLINED_FUNCTION_64();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v50[0] = *(_QWORD *)(v8 + v28);
  *(_QWORD *)(v8 + v28) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v27, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, v50);
  *(_QWORD *)(v8 + v28) = v50[0];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_4();
  v30 = unk_25728CE80;
  v43 = static ResolvedInfo.kResolvedAnswerKey;
  v31 = *a1;
  v32 = a1[1];
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_115();
  v33 = swift_isUniquelyReferenced_nonNull_native();
  v49 = *(_QWORD *)(v8 + v28);
  *(_QWORD *)(v8 + v28) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v32, v43, v30, v33);
  *(_QWORD *)(v8 + v28) = v49;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_36_0();
  _s10OmniSearch0B6ResultVWOhTm_1(v25, type metadata accessor for SearchResult);
  v34 = *(uint64_t *)((char *)a1 + v24[8]);
  v35 = v26[9];
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_36_0();
  *(_QWORD *)(v8 + v35) = v34;
  outlined assign with copy of URL?((uint64_t)a1 + v24[7], v8 + v26[10]);
  v36 = v48;
  outlined init with copy of SearchResult(v8, v48, type metadata accessor for Answer);
  swift_storeEnumTagMultiPayload();
  v37 = v44;
  v38 = (_QWORD *)(v36 + *(int *)(v44 + 24));
  *v38 = 0;
  v38[1] = 0;
  *(_QWORD *)(v36 + *(int *)(v37 + 20)) = 0;
  _s10OmniSearch0B6ResultVWOhTm_1(v8, type metadata accessor for Answer);
LABEL_7:
  OUTLINED_FUNCTION_43_0();
}

uint64_t SearchResult.answer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_44_11();
  SearchResultItem.associatedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchItem);
  v2 = type metadata accessor for Answer(0);
  if (OUTLINED_FUNCTION_7_16())
  {
    OUTLINED_FUNCTION_30_15(v0, 0);
    v3 = *(_QWORD *)(v0 + *(int *)(v2 + 24));
    swift_bridgeObjectRetain();
    _s10OmniSearch0B6ResultVWOhTm_1(v0, type metadata accessor for Answer);
  }
  else
  {
    OUTLINED_FUNCTION_30_15(v0, 1);
    outlined destroy of MobileSMSDocument?(v0, &demangling cache variable for type metadata for Answer?);
    return 0;
  }
  return v3;
}

uint64_t *ResolvedInfo.kResolvedAnswerKey.unsafeMutableAddressor()
{
  return &static ResolvedInfo.kResolvedAnswerKey;
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.getter()
{
  return OUTLINED_FUNCTION_17_18(&static ResolvedInfo.kResolvedAnswerKey);
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.setter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_15_18(a1, a2, &static ResolvedInfo.kResolvedAnswerKey);
}

void static ResolvedInfo.kResolvedAnswerKey.modify()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_5();
}

void ResolvedInfo.answer.getter()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_5();
}

void ResolvedInfo.answer.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_12();
}

uint64_t (*ResolvedInfo.answer.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void ResolvedInfo.updatedItem.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_53_6();
  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for SearchResultItem?);
  OUTLINED_FUNCTION_5();
}

void ResolvedInfo.updatedItem.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_53_6();
  outlined assign with take of SearchResult?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for SearchResultItem?);
  OUTLINED_FUNCTION_5();
}

uint64_t (*ResolvedInfo.updatedItem.modify())(_QWORD)
{
  OUTLINED_FUNCTION_53_6();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t ResolvedInfo.metadata.getter()
{
  OUTLINED_FUNCTION_53_6();
  return swift_bridgeObjectRetain();
}

void ResolvedInfo.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_53_6() + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_12();
}

uint64_t (*ResolvedInfo.metadata.modify())(_QWORD)
{
  OUTLINED_FUNCTION_53_6();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void ResolvedInfo.extractedMediaURL.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_53_6();
  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

void ResolvedInfo.extractedMediaURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_53_6();
  outlined assign with take of SearchResult?(a1, v1 + *(int *)(v3 + 28), &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

uint64_t (*ResolvedInfo.extractedMediaURL.modify())(_QWORD)
{
  OUTLINED_FUNCTION_53_6();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t ResolvedInfo.experiences.getter()
{
  OUTLINED_FUNCTION_53_6();
  return swift_bridgeObjectRetain();
}

void ResolvedInfo.experiences.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_53_6() + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_12();
}

uint64_t (*ResolvedInfo.experiences.modify())(_QWORD)
{
  OUTLINED_FUNCTION_53_6();
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t default argument 0 of ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)()
{
  return 0;
}

char *ExtractedResult.kExtractedInfoKey.unsafeMutableAddressor()
{
  return static ExtractedResult.kExtractedInfoKey;
}

uint64_t static ExtractedResult.kExtractedInfoKey.getter()
{
  return OUTLINED_FUNCTION_17_18(static ExtractedResult.kExtractedInfoKey);
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.getter(uint64_t *a1)
{
  uint64_t v2;

  OUTLINED_FUNCTION_1_4();
  v2 = *a1;
  OUTLINED_FUNCTION_64();
  return v2;
}

uint64_t static ExtractedResult.kExtractedInfoKey.setter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_15_18(a1, a2, static ExtractedResult.kExtractedInfoKey);
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.setter(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  OUTLINED_FUNCTION_2_6();
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease();
}

void static ExtractedResult.kExtractedInfoKey.modify()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_5();
}

uint64_t SearchResult.resolvedAnswer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_2_20();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_20();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchItem);
  if (OUTLINED_FUNCTION_13_23())
  {
    OUTLINED_FUNCTION_5_24(v1, 0);
    OUTLINED_FUNCTION_20_15();
    v5 = *(_QWORD *)(v0 + *(int *)(v3 + 28));
    OUTLINED_FUNCTION_1_4();
    v6 = static ResolvedInfo.kResolvedAnswerKey;
    v7 = unk_25728CE80;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_115();
    v8 = specialized Dictionary.subscript.getter(v6, v7, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_32_8();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_5_24(v1, 1);
    OUTLINED_FUNCTION_75_3(v9, &demangling cache variable for type metadata for Answer?);
    return 0;
  }
  return v8;
}

uint64_t SearchResult.isResolved.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_2_20();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_20();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchItem);
  if (OUTLINED_FUNCTION_13_23())
  {
    OUTLINED_FUNCTION_5_24(v1, 0);
    OUTLINED_FUNCTION_20_15();
    v5 = *(_QWORD *)(v0 + *(int *)(v3 + 28));
    OUTLINED_FUNCTION_1_4();
    v6 = static ResolvedInfo.kResolvedAnswerKey;
    v7 = unk_25728CE80;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_115();
    specialized Dictionary.subscript.getter(v6, v7, v5);
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_32_8();
    if (v9)
    {
      OUTLINED_FUNCTION_36_0();
      return 1;
    }
  }
  else
  {
    v11 = OUTLINED_FUNCTION_5_24(v1, 1);
    OUTLINED_FUNCTION_75_3(v11, &demangling cache variable for type metadata for Answer?);
  }
  return 0;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;

  specialized LazyMapSequence.makeIterator()(a1, a2, a3, &v35);
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (v8)
  {
    v11 = v7;
    v12 = v8;
    v13 = v9;
    v14 = v10;
    while (1)
    {
      v15 = (_QWORD *)*a5;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
      v18 = v15[2];
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        break;
      v21 = v16;
      if (v15[3] >= v20)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
        v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_17;
        v17 = v22;
      }
      v24 = (_QWORD *)*a5;
      if ((v21 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v25 = (_QWORD *)(v24[7] + 16 * v17);
        swift_bridgeObjectRelease();
        *v25 = v13;
        v25[1] = v14;
      }
      else
      {
        v24[(v17 >> 6) + 8] |= 1 << v17;
        v26 = (uint64_t *)(v24[6] + 16 * v17);
        *v26 = v11;
        v26[1] = v12;
        v27 = (_QWORD *)(v24[7] + 16 * v17);
        *v27 = v13;
        v27[1] = v14;
        v28 = v24[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (v29)
          goto LABEL_16;
        v24[2] = v30;
      }
      v11 = specialized LazyMapSequence.Iterator.next()();
      v12 = v31;
      v13 = v32;
      v14 = v33;
      a4 = 1;
      if (!v31)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Set<FlightDesignator>.Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(v7, *a1, a1[1], a1[2], a1[3]);
  v4 = v7[0];
  v5 = v7[1];
  *a2 = result;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SearchResultItem(0);
    swift_bridgeObjectRetain();
    if (!__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v14 = (char *)&loc_2432736E8 + 4 * word_243356650[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    v15 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
    }
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ResolvedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int EnumTagSinglePayload;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for SearchResultItem(0);
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9 = (int *)type metadata accessor for EmailDocument(0);
        v10 = v4 + v9[12];
        v11 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v4 + v9[17];
        v13 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v12, 1, v13))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
        v14 = v9[18];
        goto LABEL_23;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = (int *)type metadata accessor for MobileSMSDocument(0);
        v16 = v4 + v15[10];
        v17 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v16, 1, v17))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
        v18 = v4 + v15[11];
        v19 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v18, 1, v19))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
        v20 = v4 + v15[12];
        if (!__swift_getEnumTagSinglePayload(v20, 1, v19))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v20, v19);
        swift_bridgeObjectRelease();
        goto LABEL_22;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = (int *)type metadata accessor for CalendarEvent(0);
        v21 = v4 + v15[7];
        v22 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v21, 1, v22))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
        v23 = v4 + v15[8];
        if (!__swift_getEnumTagSinglePayload(v23, 1, v22))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v23, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24 = v4 + v15[13];
        v25 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v24, 1, v25))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
LABEL_22:
        v14 = v15[14];
LABEL_23:
        if (!*(_QWORD *)(v4 + v14))
          break;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_69;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v26 = type metadata accessor for Photo(0);
        v27 = v4 + *(int *)(v26 + 44);
        v28 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v27, 1, v28))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = *(int *)(v26 + 64);
        goto LABEL_71;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v30 = (int *)type metadata accessor for NoteDocument(0);
        v31 = v4 + v30[8];
        v32 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v31, 1, v32))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
        v33 = v4 + v30[9];
        if (!__swift_getEnumTagSinglePayload(v33, 1, v32))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v33, v32);
        v29 = v30[10];
        goto LABEL_71;
      case 5u:
        swift_bridgeObjectRelease();

        v29 = *(int *)(type metadata accessor for FileDocument(0) + 24);
        goto LABEL_71;
      case 6u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = type metadata accessor for WalletTransaction(0);
        v35 = v4 + *(int *)(v34 + 28);
        v36 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v35, 1, v36))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = *(int *)(v34 + 52);
        goto LABEL_71;
      case 7u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v37 = type metadata accessor for WalletPass(0);
        v38 = v4 + *(int *)(v37 + 28);
        v39 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v38, 1, v39))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
        swift_bridgeObjectRelease();
        v29 = *(int *)(v37 + 36);
        goto LABEL_71;
      case 8u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = *(int *)(type metadata accessor for Contact(0) + 36);
        goto LABEL_71;
      case 9u:
        swift_bridgeObjectRelease();
        v40 = (int *)type metadata accessor for FlightReservation(0);
        v41 = v4 + v40[5];
        v42 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v41, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = v4 + v40[11];
        if (!__swift_getEnumTagSinglePayload(v43, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v43, v42);
        v44 = v4 + v40[12];
        if (!__swift_getEnumTagSinglePayload(v44, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v44, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = v4 + v40[15];
        v46 = type metadata accessor for DateComponents();
        v47 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8);
        v47(v45, v46);
        v47(v4 + v40[16], v46);
        v48 = v4 + v40[17];
        v49 = type metadata accessor for TimeZone();
        if (!__swift_getEnumTagSinglePayload(v48, 1, v49))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
        v50 = v4 + v40[18];
        if (!__swift_getEnumTagSinglePayload(v50, 1, v49))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v50, v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v51 = &demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]);
        goto LABEL_68;
      case 0xAu:
        swift_bridgeObjectRelease();
        v52 = (int *)type metadata accessor for HotelReservation(0);
        v53 = v4 + v52[5];
        v54 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v53, 1, v54))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = v4 + v52[12];
        v56 = type metadata accessor for DateComponents();
        v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8);
        v57(v55, v56);
        v57(v4 + v52[13], v56);
        v58 = v4 + v52[14];
        v59 = type metadata accessor for TimeZone();
        if (!__swift_getEnumTagSinglePayload(v58, 1, v59))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_69;
      case 0xBu:
        swift_bridgeObjectRelease();
        v60 = (int *)type metadata accessor for RestaurantReservation(0);
        v61 = v4 + v60[5];
        v62 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v61, 1, v62))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v61, v62);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v63 = v4 + v60[12];
        v64 = type metadata accessor for DateComponents();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v63, v64);
        swift_bridgeObjectRelease();
        v65 = v4 + v60[14];
        v66 = type metadata accessor for TimeZone();
        if (!__swift_getEnumTagSinglePayload(v65, 1, v66))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v65, v66);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_69;
      case 0xCu:
        swift_bridgeObjectRelease();
        v67 = type metadata accessor for GlobalItem();
        v68 = v4 + *(int *)(v67 + 20);
        v69 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v68, 1, v69))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v68, v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = (uint64_t *)(v4 + *(int *)(v67 + 32));
        v71 = v70[1];
        if (v71 >> 60 != 15)
          outlined consume of Data._Representation(*v70, v71);
        v51 = &demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]);
LABEL_68:
        __swift_instantiateConcreteTypeFromMangledName(v51);
LABEL_69:
        swift_bridgeObjectRelease();
        break;
      case 0xDu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = *(int *)(type metadata accessor for AppEntityItem() + 32);
LABEL_71:
        v72 = v4 + v29;
        v73 = type metadata accessor for URL();
        goto LABEL_72;
      case 0xEu:
        swift_bridgeObjectRelease();
        v74 = type metadata accessor for IntentFileItem();
        v75 = v4 + *(int *)(v74 + 20);
        v76 = type metadata accessor for URL();
        EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v75, 1, v76);
        v78 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8);
        if (!EnumTagSinglePayload)
          v78(v75, v76);
        v78(v4 + *(int *)(v74 + 24), v76);
        break;
      case 0xFu:
        swift_bridgeObjectRelease();
        v79 = type metadata accessor for Answer(0);
        v80 = v4 + *(int *)(v79 + 20);
        v73 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v80, 1, v73))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v80, v73);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v72 = v4 + *(int *)(v79 + 40);
LABEL_72:
        if (!__swift_getEnumTagSinglePayload(v72, 1, v73))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v72, v73);
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ResolvedInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SearchResultItem(0);
  swift_bridgeObjectRetain();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v12 = (char *)&loc_24327623C + 4 * word_243356690[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ResolvedInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SearchResultItem(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      v12 = (char *)&loc_243277F88 + 4 * word_2433566B0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v11)
  {
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v7, type metadata accessor for SearchResultItem);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v7, type metadata accessor for SearchResultItem);
    v14 = (char *)&loc_243278190 + 4 * word_2433566D0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for URL();
  v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v18);
  v20 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18);
  if (!v19)
  {
    v21 = *(_QWORD *)(v18 - 8);
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v16, v17, v18);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
    goto LABEL_14;
  }
  if (v20)
  {
LABEL_14:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
LABEL_15:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ResolvedInfo(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SearchResultItem(0);
  if (!__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v11 = (char *)&loc_24327C1F0 + 4 * word_2433566F0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for ResolvedInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SearchResultItem(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      v13 = (char *)&loc_24327D6F4 + 4 * word_243356710[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v12)
  {
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v8, type metadata accessor for SearchResultItem);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v8, type metadata accessor for SearchResultItem);
    v15 = (char *)&loc_24327D840 + 4 * word_243356730[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for URL();
  v20 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19);
  v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19);
  if (!v20)
  {
    v22 = *(_QWORD *)(v19 - 8);
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v17, v18, v19);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v19);
    goto LABEL_14;
  }
  if (v21)
  {
LABEL_14:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
LABEL_15:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2432802F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v10 = *(int *)(a3 + 28);
    }
    return __swift_getEnumTagSinglePayload(a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2432803A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v10 = *(int *)(a4 + 28);
    }
    __swift_storeEnumTagSinglePayload(a1 + v10, a2, a2, v9);
  }
}

void type metadata completion function for ResolvedInfo()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for SearchResultItem?, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    v0[3] = v4;
    v0[4] = v5;
    v13 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v22[0] = v8;
    v22[1] = v9;
    v22[2] = v11;
    v22[3] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(&v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
  v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v0[1];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        v5 = (v18 - 1) & v18;
        v6 = __clz(__rbit64(v18)) + (v15 << 6);
        v4 = v15;
        goto LABEL_3;
      }
      v19 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          v15 = v19;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            v15 = v3 + 3;
            goto LABEL_7;
          }
          v19 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v19);
            if (v18)
              goto LABEL_10;
            v15 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              v18 = *(_QWORD *)(v17 + 8 * v15);
              if (v18)
                goto LABEL_7;
              v4 = v16 - 1;
              v20 = v3 + 6;
              while (v20 < v16)
              {
                v18 = *(_QWORD *)(v17 + 8 * v20++);
                if (v18)
                {
                  v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_20()
{
  return type metadata accessor for Answer(0);
}

uint64_t OUTLINED_FUNCTION_5_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_9_20()
{
  SearchResultItem.associatedValue.getter();
}

uint64_t OUTLINED_FUNCTION_13_23()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_15_18(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return static ResolvedInfo.kResolvedAnswerKey.setter(a1, a2, a3, a3 + 1);
}

uint64_t OUTLINED_FUNCTION_16_23(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_17_18(uint64_t *a1)
{
  return static ResolvedInfo.kResolvedAnswerKey.getter(a1);
}

void OUTLINED_FUNCTION_20_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of SearchResult(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_29_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_30_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_32_8()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  _s10OmniSearch0B6ResultVWOhTm_1(v0, v1);
}

uint64_t Logging.fedSearch.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for fedSearch != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_13();
  return __swift_project_value_buffer(v0, (uint64_t)static Logging.fedSearch);
}

void static EvalLogging.logFederateSearch(resultsPerSource:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int EnumCaseMultiPayload;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, NSObject *);
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  Swift::Bool v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  char v151;
  Swift::Bool v152;
  unint64_t v153;
  char v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_type_t v161;
  uint8_t *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  _DWORD *v173;
  uint64_t v174;
  unint64_t v175;
  int64_t v176;
  void *v177;
  int64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  Class isa;
  uint64_t v206;
  uint64_t v207;
  NSObject *v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  Swift::String v219;
  Swift::String v220;
  Swift::String v221;

  v217 = *MEMORY[0x24BDAC8D0];
  v208 = type metadata accessor for SearchResultType();
  isa = v208[-1].isa;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_9_2();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_2();
  MEMORY[0x24BDAC7A8](v5);
  v7 = OUTLINED_FUNCTION_13_2((uint64_t)&v174 - v6);
  v8 = type metadata accessor for MobileSMSDocument(v7);
  v9 = OUTLINED_FUNCTION_2_21(v8, (uint64_t)&v215 + 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_2();
  v12 = v11 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_1_2();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v174 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v174 - v17;
  v19 = type metadata accessor for URL();
  v190 = *(_QWORD *)(v19 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_9_2();
  MEMORY[0x24BDAC7A8](v21);
  v23 = OUTLINED_FUNCTION_13_2((uint64_t)&v174 - v22);
  v24 = type metadata accessor for CalendarEvent(v23);
  v25 = OUTLINED_FUNCTION_2_21(v24, (uint64_t)&v215);
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_2_2();
  v28 = v27 - v26;
  v197 = type metadata accessor for CharacterSet();
  v196 = *(_QWORD *)(v197 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_0_3();
  v195 = v30;
  v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
  v193 = *(_QWORD *)(v194 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_0_3();
  v33 = OUTLINED_FUNCTION_13_2(v32);
  v34 = type metadata accessor for EmailDocument(v33);
  v35 = OUTLINED_FUNCTION_2_21(v34, (uint64_t)&v212);
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_0_3();
  v37 = OUTLINED_FUNCTION_13_2(v36);
  v38 = type metadata accessor for SearchResultItem(v37);
  v39 = OUTLINED_FUNCTION_2_21(v38, (uint64_t)&v218);
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_2_2();
  v42 = v41 - v40;
  v181 = *(_QWORD *)(type metadata accessor for SearchResult(0) - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_2_2();
  v46 = v45 - v44;
  type metadata accessor for NSUserDefaults();
  static NSUserDefaults.logForEval.getter();
  if ((v47 & 1) == 0)
  {
    if (one-time initialization token for search != -1)
      goto LABEL_110;
    goto LABEL_87;
  }
  v186 = v18;
  v187 = v16;
  v188 = v12;
  v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v48 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v49 = *(_QWORD *)(a1 + 64);
  v179 = a1 + 64;
  v50 = 1 << *(_BYTE *)(a1 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v51 & v49;
  v178 = (unint64_t)(v50 + 63) >> 6;
  v180 = a1;
  swift_bridgeObjectRetain();
  v53 = 0;
  v177 = 0;
  v201 = xmmword_24334DB60;
  v200 = v19;
  v206 = v28;
  v203 = v42;
  v207 = v46;
  v54 = v28;
  while (1)
  {
LABEL_5:
    if (v52)
    {
      v55 = __clz(__rbit64(v52));
      v52 &= v52 - 1;
      v56 = v55 | (v53 << 6);
      goto LABEL_18;
    }
    v57 = __OFADD__(v53++, 1);
    if (v57)
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (v53 >= v178)
      goto LABEL_90;
    v58 = *(_QWORD *)(v179 + 8 * v53);
    if (!v58)
      break;
LABEL_17:
    v52 = (v58 - 1) & v58;
    v56 = __clz(__rbit64(v58)) + (v53 << 6);
LABEL_18:
    if (*(_BYTE *)(*(_QWORD *)(v180 + 48) + v56) == 1)
    {
      v60 = *(_QWORD *)(*(_QWORD *)(v180 + 56) + 8 * v56);
      v61 = *(_QWORD *)(v60 + 16);
      if (v61)
      {
        v175 = v52;
        v176 = v53;
        v62 = v181;
        v63 = v60 + ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80));
        v174 = v60;
        swift_bridgeObjectRetain();
        v202 = *(_QWORD *)(v62 + 72);
        while (1)
        {
          _s10OmniSearch0B6ResultVWOcTm_0(v63, v46, type metadata accessor for SearchResult);
          _s10OmniSearch0B6ResultVWOcTm_0(v46, v42, type metadata accessor for SearchResultItem);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 2)
            break;
          if (EnumCaseMultiPayload == 1)
          {
            v73 = v188;
            _s10OmniSearch0B6ResultVWObTm_0(v42, v188, type metadata accessor for MobileSMSDocument);
            v74 = (uint64_t)v187;
            outlined init with copy of Date?(v73 + *(int *)(v199 + 44), (uint64_t)v187, &demangling cache variable for type metadata for URL?);
            OUTLINED_FUNCTION_31_15();
            if (v75)
            {
              _s10OmniSearch0B6ResultVWOhTm_1(v73, type metadata accessor for MobileSMSDocument);
              v76 = v74;
              goto LABEL_38;
            }
            v78 = v190;
            v79 = v183;
            OUTLINED_FUNCTION_37_9(v183, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v190 + 32));
            v80 = URL.absoluteString.getter();
            v82 = v81;
            v83 = v79;
            v46 = v207;
            OUTLINED_FUNCTION_36_14(v83, *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8));
            v84 = v73;
            v85 = type metadata accessor for MobileSMSDocument;
            v86 = v80;
LABEL_41:
            _s10OmniSearch0B6ResultVWOhTm_1(v84, v85);
            goto LABEL_57;
          }
          if (EnumCaseMultiPayload)
          {
            _s10OmniSearch0B6ResultVWOhTm_1(v42, type metadata accessor for SearchResultItem);
            goto LABEL_40;
          }
          v65 = v204;
          _s10OmniSearch0B6ResultVWObTm_0(v42, v204, type metadata accessor for EmailDocument);
          *(_QWORD *)&v214 = 0;
          *((_QWORD *)&v214 + 1) = 0xE000000000000000;
          MEMORY[0x2494F5C60](49);
          v209 = v214;
          v66._countAndFlagsBits = 0x203A6D6F7266;
          v66._object = (void *)0xE600000000000000;
          String.append(_:)(v66);
          v67 = *(_QWORD *)(v65 + 72);
          *((_QWORD *)&v215 + 1) = v185;
          lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12F8]);
          v216 = v68;
          *(_QWORD *)&v214 = v67;
          outlined init with copy of Date?((uint64_t)&v214, (uint64_t)&v210, &demangling cache variable for type metadata for CustomStringConvertible?);
          if (v211)
          {
            OUTLINED_FUNCTION_4_26();
            OUTLINED_FUNCTION_24_13();
            OUTLINED_FUNCTION_8_18();
            OUTLINED_FUNCTION_19_17();
            if (v69)
            {
              __swift_project_boxed_opaque_existential_1(&v212, v213);
              OUTLINED_FUNCTION_5_25();
              MEMORY[0x24BDAC7A8](v70);
              OUTLINED_FUNCTION_0_25(v71, v72, v174);
              v219._countAndFlagsBits = OUTLINED_FUNCTION_9_21();
              OUTLINED_FUNCTION_10_19(v219);
              OUTLINED_FUNCTION_121();
            }
            OUTLINED_FUNCTION_39_14();
          }
          else
          {
            OUTLINED_FUNCTION_4_7();
            OUTLINED_FUNCTION_218((uint64_t)&v210);
          }
          OUTLINED_FUNCTION_218((uint64_t)&v214);
          v93._countAndFlagsBits = 544497952;
          v93._object = (void *)0xE400000000000000;
          String.append(_:)(v93);
          v94 = v204 + *(int *)(v191 + 48);
          v95 = type metadata accessor for Date();
          *((_QWORD *)&v215 + 1) = v95;
          v216 = lazy protocol witness table accessor for type Date and conformance Date();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v214);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(boxed_opaque_existential_1, v94, v95);
          OUTLINED_FUNCTION_26_12();
          if (v211)
          {
            outlined init with take of SageSearchClient(&v210, (uint64_t)&v212);
            __swift_project_boxed_opaque_existential_1(&v212, v213);
            OUTLINED_FUNCTION_24_13();
            OUTLINED_FUNCTION_8_18();
            OUTLINED_FUNCTION_19_17();
            if (v97)
            {
              __swift_project_boxed_opaque_existential_1(&v212, v213);
              OUTLINED_FUNCTION_5_25();
              MEMORY[0x24BDAC7A8](v98);
              OUTLINED_FUNCTION_0_25(v99, v100, v174);
              v220._countAndFlagsBits = OUTLINED_FUNCTION_9_21();
              OUTLINED_FUNCTION_10_19(v220);
              OUTLINED_FUNCTION_121();
            }
            OUTLINED_FUNCTION_39_14();
          }
          else
          {
            OUTLINED_FUNCTION_218((uint64_t)&v210);
          }
          OUTLINED_FUNCTION_218((uint64_t)&v214);
          v101._countAndFlagsBits = 0x7463656A62757320;
          v101._object = (void *)0xE90000000000003ALL;
          String.append(_:)(v101);
          v102 = *(_QWORD *)(v204 + 40);
          if (v102)
          {
            v103 = *(_QWORD *)(v204 + 32);
            *((_QWORD *)&v215 + 1) = MEMORY[0x24BEE0D00];
            v216 = MEMORY[0x24BEE0D70];
            *(_QWORD *)&v214 = v103;
            *((_QWORD *)&v214 + 1) = v102;
          }
          else
          {
            v216 = 0;
            v214 = 0u;
            v215 = 0u;
          }
          OUTLINED_FUNCTION_26_12();
          if (v211)
          {
            OUTLINED_FUNCTION_4_26();
            OUTLINED_FUNCTION_24_13();
            OUTLINED_FUNCTION_8_18();
            OUTLINED_FUNCTION_19_17();
            if (v104)
            {
              __swift_project_boxed_opaque_existential_1(&v212, v213);
              OUTLINED_FUNCTION_5_25();
              MEMORY[0x24BDAC7A8](v105);
              OUTLINED_FUNCTION_0_25(v106, v107, v174);
              v221._countAndFlagsBits = OUTLINED_FUNCTION_9_21();
              OUTLINED_FUNCTION_10_19(v221);
              OUTLINED_FUNCTION_121();
            }
            OUTLINED_FUNCTION_39_14();
          }
          else
          {
            OUTLINED_FUNCTION_4_7();
            OUTLINED_FUNCTION_218((uint64_t)&v210);
          }
          OUTLINED_FUNCTION_218((uint64_t)&v214);
          v212 = v209;
          v108 = v192;
          Regex.init(_regexString:version:)();
          *(_QWORD *)&v210 = 32;
          *((_QWORD *)&v210 + 1) = 0xE100000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>, &demangling cache variable for type metadata for Regex<Substring>, MEMORY[0x24BEE7460]);
          RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
          OUTLINED_FUNCTION_36_14(v108, *(uint64_t (**)(uint64_t, uint64_t))(v193 + 8));
          v212 = v214;
          v109 = v195;
          static CharacterSet.whitespaces.getter();
          lazy protocol witness table accessor for type String and conformance String();
          v86 = StringProtocol.trimmingCharacters(in:)();
          v82 = v110;
          (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v109, v197);
          OUTLINED_FUNCTION_121();
          swift_bridgeObjectRelease();
          _s10OmniSearch0B6ResultVWOhTm_1(v204, type metadata accessor for EmailDocument);
          v46 = v207;
LABEL_57:
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_27_16();
          v111 = OUTLINED_FUNCTION_38_13();
          v113 = v112;
          v114 = (void (*)(uint64_t, NSObject *))*((_QWORD *)isa + 1);
          OUTLINED_FUNCTION_21_14();
          if (!v48[2])
          {
            OUTLINED_FUNCTION_6_1();
            OUTLINED_FUNCTION_121();
LABEL_73:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
            v143 = swift_allocObject();
            *(_OWORD *)(v143 + 16) = v201;
            *(_QWORD *)(v143 + 32) = v86;
            *(_QWORD *)(v143 + 40) = v82;
            SearchResultItem.type.getter();
            v144 = OUTLINED_FUNCTION_38_13();
            v146 = v145;
            OUTLINED_FUNCTION_21_14();
            v147 = OUTLINED_FUNCTION_35_9();
            *(_QWORD *)&v214 = v48;
            OUTLINED_FUNCTION_29_14(v144, v146);
            OUTLINED_FUNCTION_34_10();
            if (v57)
              goto LABEL_105;
            v150 = v148;
            v151 = v149;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
            v152 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v147, (Swift::Int)v48);
            v42 = v203;
            if (v152)
            {
              v153 = specialized __RawDictionaryStorage.find<A>(_:)(v144, v146);
              if ((v151 & 1) != (v154 & 1))
              {
LABEL_112:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x243281B98);
              }
              v150 = v153;
            }
            v48 = (_QWORD *)v214;
            if ((v151 & 1) != 0)
            {
              *(_QWORD *)(*(_QWORD *)(v214 + 56) + 8 * v150) = v143;
            }
            else
            {
              *(_QWORD *)(v214 + 8 * (v150 >> 6) + 64) |= 1 << v150;
              v155 = (uint64_t *)(v48[6] + 16 * v150);
              *v155 = v144;
              v155[1] = v146;
              *(_QWORD *)(v48[7] + 8 * v150) = v143;
              v156 = v48[2];
              v57 = __OFADD__(v156, 1);
              v157 = v156 + 1;
              if (v57)
                goto LABEL_106;
              v48[2] = v157;
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_82;
          }
          OUTLINED_FUNCTION_29_14(v111, v113);
          v116 = v115;
          OUTLINED_FUNCTION_6_1();
          OUTLINED_FUNCTION_121();
          if ((v116 & 1) == 0)
            goto LABEL_73;
          OUTLINED_FUNCTION_27_16();
          v117 = OUTLINED_FUNCTION_38_13();
          v119 = v118;
          OUTLINED_FUNCTION_21_14();
          if (!v48[2] || (v120 = OUTLINED_FUNCTION_29_14(v117, v119), (v121 & 1) == 0))
          {
            OUTLINED_FUNCTION_121();
            __break(1u);
          }
          v122 = *(_QWORD *)(v48[7] + 8 * v120);
          OUTLINED_FUNCTION_4_7();
          OUTLINED_FUNCTION_121();
          v123 = *(_QWORD *)(v122 + 16);
          swift_bridgeObjectRelease();
          v54 = v206;
          if (v123 > 2)
          {
            swift_bridgeObjectRelease();
            v42 = v203;
            goto LABEL_83;
          }
          v189 = v82;
          v124 = v86;
          v125 = v63;
          v126 = v184;
          SearchResultItem.type.getter();
          v127 = SearchResultType.rawValue.getter();
          v129 = v128;
          v114(v126, v208);
          swift_bridgeObjectRetain();
          v130 = OUTLINED_FUNCTION_35_9();
          *(_QWORD *)&v214 = v48;
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_29_14(v127, v129);
          OUTLINED_FUNCTION_34_10();
          if (v57)
            goto LABEL_108;
          v133 = v131;
          v134 = v132;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
          v135 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v130, (Swift::Int)v48);
          v63 = v125;
          v136 = v124;
          v137 = v189;
          if (v135)
          {
            v138 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v129);
            if ((v134 & 1) != (v139 & 1))
              goto LABEL_112;
            v133 = v138;
          }
          if ((v134 & 1) == 0)
            goto LABEL_109;
          v140 = *(_QWORD *)(*(_QWORD *)(v214 + 56) + 8 * v133);
          if ((OUTLINED_FUNCTION_35_9() & 1) == 0)
          {
            OUTLINED_FUNCTION_15_16();
            v140 = v158;
          }
          v42 = v203;
          v141 = *(_QWORD *)(v140 + 16);
          if (v141 >= *(_QWORD *)(v140 + 24) >> 1)
          {
            OUTLINED_FUNCTION_15_16();
            v140 = v159;
          }
          *(_QWORD *)(v140 + 16) = v141 + 1;
          v142 = v140 + 16 * v141;
          *(_QWORD *)(v142 + 32) = v136;
          *(_QWORD *)(v142 + 40) = v137;
          *(_QWORD *)(*(_QWORD *)(v214 + 56) + 8 * v133) = v140;
          swift_bridgeObjectRelease();
          v48 = (_QWORD *)v214;
          swift_bridgeObjectRelease();
LABEL_82:
          swift_bridgeObjectRelease();
          v54 = v206;
          v46 = v207;
LABEL_83:
          _s10OmniSearch0B6ResultVWOhTm_1(v46, type metadata accessor for SearchResult);
          v63 += v202;
          if (!--v61)
          {
            swift_bridgeObjectRelease();
            v53 = v176;
            v52 = v175;
            goto LABEL_5;
          }
        }
        _s10OmniSearch0B6ResultVWObTm_0(v42, v54, type metadata accessor for CalendarEvent);
        v77 = (uint64_t)v186;
        outlined init with copy of Date?(v54 + *(int *)(v198 + 52), (uint64_t)v186, &demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_31_15();
        if (v75)
        {
          _s10OmniSearch0B6ResultVWOhTm_1(v54, type metadata accessor for CalendarEvent);
          v76 = v77;
LABEL_38:
          outlined destroy of MobileSMSDocument?(v76, &demangling cache variable for type metadata for URL?);
LABEL_40:
          v86 = 0;
          v82 = 0xE000000000000000;
          goto LABEL_57;
        }
        v87 = v190;
        v88 = v63;
        v89 = v54;
        v90 = v182;
        OUTLINED_FUNCTION_37_9(v182, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v190 + 32));
        v91 = URL.absoluteString.getter();
        v82 = v92;
        OUTLINED_FUNCTION_36_14(v90, *(uint64_t (**)(uint64_t, uint64_t))(v87 + 8));
        v84 = v89;
        v63 = v88;
        v86 = v91;
        v85 = type metadata accessor for CalendarEvent;
        goto LABEL_41;
      }
    }
  }
  v59 = v53 + 1;
  if (v53 + 1 >= v178)
    goto LABEL_90;
  v58 = *(_QWORD *)(v179 + 8 * v59);
  if (v58)
    goto LABEL_16;
  v59 = v53 + 2;
  if (v53 + 2 >= v178)
    goto LABEL_90;
  v58 = *(_QWORD *)(v179 + 8 * v59);
  if (v58)
    goto LABEL_16;
  v59 = v53 + 3;
  if (v53 + 3 >= v178)
  {
LABEL_90:
    swift_release();
    if (one-time initialization token for encoder != -1)
      swift_once();
    *(_QWORD *)&v214 = v48;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
    lazy protocol witness table accessor for type [String : [String]] and conformance <> [A : B]();
    v163 = v177;
    dispatch thunk of JSONEncoder.encode<A>(_:)();
    if (v163)
    {

      OUTLINED_FUNCTION_6_1();
      if (one-time initialization token for search != -1)
        swift_once();
      v165 = OUTLINED_FUNCTION_13();
      __swift_project_value_buffer(v165, (uint64_t)static Logging.search);
      v166 = Logger.logObject.getter();
      v167 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v166, v167))
      {
        v168 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_WORD *)v168 = 0;
        _os_log_impl(&dword_24315F000, v166, v167, "Failed to encode FederateSearch result", v168, 2u);
        specialized UnsafeMutablePointer.deallocate()();
      }

    }
    else
    {
      v169 = v164;
      OUTLINED_FUNCTION_6_1();
      if (one-time initialization token for fedSearch != -1)
        swift_once();
      v170 = OUTLINED_FUNCTION_13();
      __swift_project_value_buffer(v170, (uint64_t)static Logging.fedSearch);
      OUTLINED_FUNCTION_7_26();
      OUTLINED_FUNCTION_7_26();
      v171 = Logger.logObject.getter();
      v172 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v171, v172))
      {
        v173 = (_DWORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_QWORD *)&v212 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        *v173 = 136315138;
        __asm { BR              X9 }
      }
      OUTLINED_FUNCTION_89_7();
      OUTLINED_FUNCTION_89_7();
      OUTLINED_FUNCTION_89_7();

    }
    OUTLINED_FUNCTION_6_1();
    return;
  }
  v58 = *(_QWORD *)(v179 + 8 * v59);
  if (v58)
  {
LABEL_16:
    v53 = v59;
    goto LABEL_17;
  }
  while (1)
  {
    v53 = v59 + 1;
    if (__OFADD__(v59, 1))
      break;
    if (v53 >= v178)
      goto LABEL_90;
    v58 = *(_QWORD *)(v179 + 8 * v53);
    ++v59;
    if (v58)
      goto LABEL_17;
  }
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  swift_once();
LABEL_87:
  v160 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v160, (uint64_t)static Logging.search);
  v208 = Logger.logObject.getter();
  v161 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v208, v161))
  {
    v162 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_WORD *)v162 = 0;
    _os_log_impl(&dword_24315F000, v208, v161, "Skip extra logging for eval", v162, 2u);
    specialized UnsafeMutablePointer.deallocate()();
  }

}

uint64_t one-time initialization function for fedSearch()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_13();
  __swift_allocate_value_buffer(v0, static Logging.fedSearch);
  __swift_project_value_buffer(v0, (uint64_t)static Logging.fedSearch);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logging.fedSearch.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for fedSearch != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_13();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logging.fedSearch);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *EvalLogging.maxItem.unsafeMutableAddressor()
{
  return &static EvalLogging.maxItem;
}

uint64_t static EvalLogging.maxItem.getter()
{
  return 3;
}

uint64_t one-time initialization function for encoder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = type metadata accessor for JSONEncoder.KeyEncodingStrategy();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v4 = JSONEncoder.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCB2F8], v0);
  result = dispatch thunk of JSONEncoder.keyEncodingStrategy.setter();
  static EvalLogging.encoder = v4;
  return result;
}

uint64_t *EvalLogging.encoder.unsafeMutableAddressor()
{
  if (one-time initialization token for encoder != -1)
    swift_once();
  return &static EvalLogging.encoder;
}

uint64_t static EvalLogging.encoder.getter()
{
  if (one-time initialization token for encoder != -1)
    swift_once();
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BDCE988], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v2 = MEMORY[0x24BEE0D08];
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

ValueMetadata *type metadata accessor for EvalLogging()
{
  return &type metadata for EvalLogging;
}

uint64_t OUTLINED_FUNCTION_0_25@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
}

uint64_t OUTLINED_FUNCTION_2_21@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_26()
{
  uint64_t v0;

  outlined init with take of SageSearchClient((__int128 *)(v0 - 224), v0 - 184);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 160));
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_7_26()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9_21()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_10_19(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_21_14()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(v0, *(_QWORD *)(v2 - 256));
}

uint64_t OUTLINED_FUNCTION_24_13()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_26_12()
{
  uint64_t *v0;
  uint64_t v1;

  outlined init with copy of Date?(v1 - 144, v1 - 224, v0);
}

void OUTLINED_FUNCTION_27_16()
{
  SearchResultItem.type.getter();
}

unint64_t OUTLINED_FUNCTION_29_14(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_31_15()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v0, 1, *(_QWORD *)(v1 - 360));
}

uint64_t OUTLINED_FUNCTION_35_9()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_36_14@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_37_9@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_38_13()
{
  return SearchResultType.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_39_14()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 - 184);
}

void FlightSnippet.flight.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FlightSnippet(0);
  OUTLINED_FUNCTION_154_1(v1 + *(int *)(v6 + 40));
  v7 = type metadata accessor for FlightSnippet.Flight(0);
  v8 = OUTLINED_FUNCTION_22_2((uint64_t)v5, 1, v7);
  if (v10)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v7 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(a1 + v11) = static FlightSnippet.Flight._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of MobileSMSDocument?((uint64_t)v5, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  }
  else
  {
    OUTLINED_FUNCTION_151_2(v8, v9, type metadata accessor for FlightSnippet.Flight);
  }
  OUTLINED_FUNCTION_12();
}

void FlightSnippet.Leg.arrivalTerminal.getter()
{
  FlightSnippet.Leg.arrivalTerminal.getter();
}

{
  type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_1_4();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departureTerminal.getter()
{
  FlightSnippet.Leg.departureTerminal.getter(type metadata accessor for FlightSnippet.Leg);
}

uint64_t FlightSnippet.flight.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;

  v1 = v0 + *(int *)(OUTLINED_FUNCTION_148_3() + 40);
  outlined destroy of MobileSMSDocument?(v1, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  v2 = OUTLINED_FUNCTION_6_5();
  outlined init with take of FlightSnippet.Flight(v2, v3, v4);
  v5 = type metadata accessor for FlightSnippet.Flight(0);
  return OUTLINED_FUNCTION_81_8(v1, 0, 1, v5);
}

uint64_t FlightSnippet.Flight.init()@<X0>(uint64_t a1@<X8>)
{
  return FlightSnippet.Flight.init()(type metadata accessor for FlightSnippet.Flight, &one-time initialization token for defaultInstance, &static FlightSnippet.Flight._StorageClass.defaultInstance, a1);
}

uint64_t type metadata accessor for FlightSnippet(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet);
}

uint64_t type metadata accessor for FlightSnippet.Flight(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Flight);
}

void FlightSnippet.flight.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = OUTLINED_FUNCTION_122_4();
  v5 = OUTLINED_FUNCTION_91_5(v4);
  v3[1] = v5;
  v6 = type metadata accessor for FlightSnippet.Flight(0);
  v3[2] = v6;
  v3[3] = OUTLINED_FUNCTION_86_11();
  v7 = (char *)OUTLINED_FUNCTION_86_11();
  v3[4] = v7;
  v8 = *(int *)(type metadata accessor for FlightSnippet(0) + 40);
  *((_DWORD *)v3 + 10) = v8;
  outlined init with copy of Date?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  v9 = OUTLINED_FUNCTION_22_2((uint64_t)v5, 1, v6);
  if (v11)
  {
    UnknownStorage.init()();
    v12 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v7[v12] = static FlightSnippet.Flight._StorageClass.defaultInstance;
    v13 = swift_retain();
    OUTLINED_FUNCTION_85_3(v13, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  }
  else
  {
    OUTLINED_FUNCTION_89_13(v9, v10, type metadata accessor for FlightSnippet.Flight);
  }
  OUTLINED_FUNCTION_63();
}

void FlightSnippet.flight.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  OUTLINED_FUNCTION_22_16();
  v1 = *(void **)v0;
  v2 = *(void **)(*(_QWORD *)v0 + 24);
  v3 = *(void **)(*(_QWORD *)v0 + 32);
  v4 = *(void **)(*(_QWORD *)v0 + 8);
  v5 = **(_QWORD **)v0 + *(int *)(*(_QWORD *)v0 + 40);
  if ((v6 & 1) != 0)
  {
    _s10OmniSearch0B6ResultVWOcTm_0(*(_QWORD *)(*(_QWORD *)v0 + 32), (uint64_t)v2, type metadata accessor for FlightSnippet.Flight);
    OUTLINED_FUNCTION_145_2(v7, &demangling cache variable for type metadata for FlightSnippet.Flight?);
    outlined init with take of FlightSnippet.Flight((uint64_t)v2, v5, type metadata accessor for FlightSnippet.Flight);
    OUTLINED_FUNCTION_105_10();
    OUTLINED_FUNCTION_120_5((uint64_t)v3);
  }
  else
  {
    OUTLINED_FUNCTION_145_2(v0, &demangling cache variable for type metadata for FlightSnippet.Flight?);
    outlined init with take of FlightSnippet.Flight((uint64_t)v3, v5, type metadata accessor for FlightSnippet.Flight);
    OUTLINED_FUNCTION_105_10();
  }
  free(v3);
  free(v2);
  free(v4);
  OUTLINED_FUNCTION_0_13(v1);
}

void FlightSnippet.hasFlight.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_2_2();
  v4 = v3 - v2;
  v5 = type metadata accessor for FlightSnippet(0);
  outlined init with copy of Date?(v0 + *(int *)(v5 + 40), v4, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  v6 = type metadata accessor for FlightSnippet.Flight(0);
  OUTLINED_FUNCTION_22_2(v4, 1, v6);
  outlined destroy of MobileSMSDocument?(v4, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  OUTLINED_FUNCTION_12();
}

Swift::Void __swiftcall FlightSnippet.clearFlight()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for FlightSnippet(0);
  OUTLINED_FUNCTION_85_3(v0, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  type metadata accessor for FlightSnippet.Flight(0);
  v1 = OUTLINED_FUNCTION_20_13();
  OUTLINED_FUNCTION_81_8(v1, v2, v3, v4);
}

uint64_t FlightSnippet.isCardSearch.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FlightSnippet.isCardSearch.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*FlightSnippet.isCardSearch.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.isIcaoSearch.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FlightSnippet.isIcaoSearch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*FlightSnippet.isIcaoSearch.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.queryIntendedFlightInfo.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.queryIntendedFlightInfo.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.queryIntendedFlightInfo.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.selectedLegIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t FlightSnippet.selectedLegIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*FlightSnippet.selectedLegIndex.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.searchTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t FlightSnippet.searchTimestamp.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*FlightSnippet.searchTimestamp.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for FlightSnippet(0);
  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_6_5();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t FlightSnippet.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_148_3();
  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_232();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t (*FlightSnippet.unknownFields.modify())(_QWORD)
{
  type metadata accessor for FlightSnippet(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.Status.init()()
{
  return 0;
}

void protocol witness for Enum.init() in conformance FlightSnippet.Status(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void protocol witness for Enum.init(rawValue:) in conformance FlightSnippet.Status(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  FlightSnippet.Status.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance FlightSnippet.Status()
{
  uint64_t v0;

  return FlightSnippet.Status.rawValue.getter(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8));
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance FlightSnippet.Status(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  FlightSnippet.Status.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FlightSnippet.Status(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = FlightSnippet.Status.rawValue.getter(*(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
  OUTLINED_FUNCTION_5();
}

void protocol witness for Hashable.hashValue.getter in conformance FlightSnippet.Status()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Status()
{
  lazy protocol witness table accessor for type FlightSnippet.Status and conformance FlightSnippet.Status();
  return Enum.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance FlightSnippet.Status()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FlightSnippet.Status(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void FlightSnippet.Flight.id.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.id : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.id.setter();
}

void FlightSnippet.Flight.id.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

uint64_t FlightSnippet.Flight._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for FlightSnippet.Flight(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for FlightSnippet.Flight._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    swift_release();
  }
  return swift_retain();
}

void FlightSnippet.Flight.id.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 16) = v2;
    *(_QWORD *)(v7 + 24) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 16) = v2;
    *(_QWORD *)(v9 + 24) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.contentHash.getter()
{
  FlightSnippet.Flight.contentHash.getter(type metadata accessor for FlightSnippet.Flight);
}

void key path setter for FlightSnippet.Flight.contentHash : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.contentHash.setter();
}

void FlightSnippet.Flight.contentHash.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v2 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_19_18(v2);
    OUTLINED_FUNCTION_8_19();
  }
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.contentHash.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_163_1();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v7 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v7);
      OUTLINED_FUNCTION_8_19();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v8 + 32) = v2;
    *(_QWORD *)(v8 + 40) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.carrierIata.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.carrierIata : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.carrierIata.setter();
}

void FlightSnippet.Flight.carrierIata.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 48) = v1;
  *(_QWORD *)(v5 + 56) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.carrierIata.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 48) = v2;
    *(_QWORD *)(v7 + 56) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 48) = v2;
    *(_QWORD *)(v9 + 56) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.carrierIcao.getter()
{
  FlightSnippet.Leg.departureTerminal.getter(type metadata accessor for FlightSnippet.Flight);
}

void FlightSnippet.Leg.departureTerminal.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_75_10();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.carrierIcao : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.carrierIcao.setter();
}

void FlightSnippet.Flight.carrierIcao.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v2 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_19_18(v2);
    OUTLINED_FUNCTION_8_19();
  }
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_157_1();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.carrierIcao.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_158_2();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v7 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v7);
      OUTLINED_FUNCTION_8_19();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v8 + 64) = v2;
    *(_QWORD *)(v8 + 72) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.carrierFs.getter()
{
  FlightSnippet.Flight.carrierFs.getter(type metadata accessor for FlightSnippet.Flight);
}

void key path setter for FlightSnippet.Flight.carrierFs : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.carrierFs.setter();
}

void FlightSnippet.Flight.carrierFs.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v2 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_19_18(v2);
    OUTLINED_FUNCTION_8_19();
  }
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.carrierFs.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_153_1();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v7 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v7);
      OUTLINED_FUNCTION_8_19();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v8 + 80) = v2;
    *(_QWORD *)(v8 + 88) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.carrierName.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.carrierName : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.carrierName.setter();
}

void FlightSnippet.Flight.carrierName.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 96) = v1;
  *(_QWORD *)(v5 + 104) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.carrierName.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 96) = v2;
    *(_QWORD *)(v7 + 104) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 96) = v2;
    *(_QWORD *)(v9 + 104) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.carrierPhoneNumber.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.carrierPhoneNumber : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.carrierPhoneNumber.setter();
}

void FlightSnippet.Flight.carrierPhoneNumber.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 112) = v1;
  *(_QWORD *)(v5 + 120) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.carrierPhoneNumber.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 112) = v2;
    *(_QWORD *)(v7 + 120) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 112) = v2;
    *(_QWORD *)(v9 + 120) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.flightNumber.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.flightNumber : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.flightNumber.setter();
}

void FlightSnippet.Flight.flightNumber.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 128) = v1;
  *(_QWORD *)(v5 + 136) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.flightNumber.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 128) = v2;
    *(_QWORD *)(v7 + 136) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 128) = v2;
    *(_QWORD *)(v9 + 136) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.flightDepartureScheduled.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.flightDepartureScheduled.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 144) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.flightDepartureScheduled.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_20_16((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 144);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_17_19();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_54_13(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_94_6();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Flight.flightArrivalScheduled.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.flightArrivalScheduled.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 152) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.flightArrivalScheduled.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_20_16((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 152);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_17_19();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_54_13(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_94_6();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Flight.legs.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.legs : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.legs.setter();
}

void FlightSnippet.Flight.legs.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 160) = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.legs.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_20_16((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_71_12();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v3 = *(int *)(v0 + 88);
      v4 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v5 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v5);
      OUTLINED_FUNCTION_8_19();
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v6 + 160) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v7 = *(int *)(v0 + 88);
      v8 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v9 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_19_18(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v10 + 160) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.codeShares.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.codeShares : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.codeShares.setter();
}

void FlightSnippet.Flight.codeShares.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 168) = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.codeShares.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_20_16((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_71_12();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v3 = *(int *)(v0 + 88);
      v4 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v5 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v5);
      OUTLINED_FUNCTION_8_19();
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v6 + 168) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v7 = *(int *)(v0 + 88);
      v8 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v9 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_19_18(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v10 + 168) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.legIndex.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.legIndex.setter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_DWORD *)(v5 + 176) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.legIndex.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_52_12((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 176);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_45_12();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 84);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_54_13(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Flight.operatorCarrierCode.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.operatorCarrierCode : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.operatorCarrierCode.setter();
}

void FlightSnippet.Flight.operatorCarrierCode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 184) = v1;
  *(_QWORD *)(v5 + 192) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.operatorCarrierCode.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 184) = v2;
    *(_QWORD *)(v7 + 192) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 184) = v2;
    *(_QWORD *)(v9 + 192) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.operatorFlightNumber.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.operatorFlightNumber : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.operatorFlightNumber.setter();
}

void FlightSnippet.Flight.operatorFlightNumber.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 200) = v1;
  *(_QWORD *)(v5 + 208) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.operatorFlightNumber.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 200) = v2;
    *(_QWORD *)(v7 + 208) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 200) = v2;
    *(_QWORD *)(v9 + 208) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.website.getter()
{
  OUTLINED_FUNCTION_53_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.website : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.website.setter();
}

void FlightSnippet.Flight.website.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  if ((OUTLINED_FUNCTION_12_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_19_18(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 216) = v1;
  *(_QWORD *)(v5 + 224) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.website.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_13_24((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v6);
      OUTLINED_FUNCTION_8_19();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v7 + 216) = v2;
    *(_QWORD *)(v7 + 224) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      OUTLINED_FUNCTION_10_20();
      OUTLINED_FUNCTION_5_26();
      v8 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v8);
      OUTLINED_FUNCTION_8_19();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v9 + 216) = v2;
    *(_QWORD *)(v9 + 224) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.lastUpdated.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.lastUpdated.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 232) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.lastUpdated.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_20_16((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 232);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_17_19();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_54_13(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_94_6();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Flight.legsNotUpdated.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.legsNotUpdated.setter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_DWORD *)(v5 + 240) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.legsNotUpdated.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_52_12((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 240);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_45_12();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 84);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_54_13(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Flight.departureUtcVariance.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.departureUtcVariance.setter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_DWORD *)(v5 + 244) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.departureUtcVariance.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_52_12((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 244);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_45_12();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 84);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_54_13(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Flight.totalLegs.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.totalLegs.setter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_DWORD *)(v5 + 248) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.totalLegs.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_52_12((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 248);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_45_12();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 84);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_54_13(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Flight.legFlightScheduleIds.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.legFlightScheduleIds : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.legFlightScheduleIds.setter();
}

void FlightSnippet.Flight.legFlightScheduleIds.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 256) = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.legFlightScheduleIds.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_20_16((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_71_12();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v3 = *(int *)(v0 + 88);
      v4 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v5 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v5);
      OUTLINED_FUNCTION_8_19();
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v6 + 256) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v7 = *(int *)(v0 + 88);
      v8 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v9 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_19_18(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v10 + 256) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Flight.legFlightUpdateIds.getter()
{
  OUTLINED_FUNCTION_38_14();
  OUTLINED_FUNCTION_1_4();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Flight.legFlightUpdateIds : FlightSnippet.Flight()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Flight.legFlightUpdateIds.setter();
}

void FlightSnippet.Flight.legFlightUpdateIds.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  if ((OUTLINED_FUNCTION_21_15() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_15();
    OUTLINED_FUNCTION_5_26();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_54_13(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 264) = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Flight.legFlightUpdateIds.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_20_16((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 264);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_71_12();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v3 = *(int *)(v0 + 88);
      v4 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v5 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_19_18(v5);
      OUTLINED_FUNCTION_8_19();
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v6 + 264) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v7 = *(int *)(v0 + 88);
      v8 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_14_15();
      OUTLINED_FUNCTION_5_26();
      v9 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_19_18(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v10 + 264) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

uint64_t (*FlightSnippet.Flight.unknownFields.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t (*FlightSnippet.Airport.code.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t (*FlightSnippet.Airport.name.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t (*FlightSnippet.Airport.city.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t (*FlightSnippet.Airport.physicalCity.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.mapsID.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.mapsID.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.mapsID.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

double FlightSnippet.Airport.latitude.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

void FlightSnippet.Airport.latitude.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 80) = a1;
}

uint64_t (*FlightSnippet.Airport.latitude.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

double FlightSnippet.Airport.longitude.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

void FlightSnippet.Airport.longitude.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 88) = a1;
}

uint64_t (*FlightSnippet.Airport.longitude.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.timeZoneName.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.timeZoneName.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 104) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.timeZoneName.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.street.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.street.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = v2;
  *(_QWORD *)(v1 + 120) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.street.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.district.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.district.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 128) = v2;
  *(_QWORD *)(v1 + 136) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.district.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.state.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.state.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 144) = v2;
  *(_QWORD *)(v1 + 152) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.state.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.postalCode.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.postalCode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 160) = v2;
  *(_QWORD *)(v1 + 168) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.postalCode.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.countryCode.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.countryCode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 176) = v2;
  *(_QWORD *)(v1 + 184) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.countryCode.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.country.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.Airport.country.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 192) = v2;
  *(_QWORD *)(v1 + 200) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.Airport.country.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.Airport.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_6_5();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t FlightSnippet.Airport.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_232();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t (*FlightSnippet.Airport.unknownFields.modify())(_QWORD)
{
  type metadata accessor for FlightSnippet.Airport(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.Airport.init()(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_114_7(a1);
  v1[8] = 0;
  v1[9] = v2;
  v1[10] = 0;
  v1[11] = 0;
  v1[12] = 0;
  v1[13] = v2;
  v1[14] = 0;
  v1[15] = v2;
  v1[16] = 0;
  v1[17] = v2;
  v1[18] = 0;
  v1[19] = v2;
  v1[20] = 0;
  v1[21] = v2;
  v1[22] = 0;
  v1[23] = v2;
  v1[24] = 0;
  v1[25] = v2;
  type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_164_1();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.FlightInfo.carrier.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.FlightInfo.carrier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.FlightInfo.carrier.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.FlightInfo.carrierFs.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.FlightInfo.carrierFs.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.FlightInfo.carrierFs.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.FlightInfo.flightNumber.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.FlightInfo.flightNumber.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.FlightInfo.flightNumber.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.FlightInfo.relationship.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void FlightSnippet.FlightInfo.relationship.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_106();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v0;
  OUTLINED_FUNCTION_12();
}

uint64_t (*FlightSnippet.FlightInfo.relationship.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.FlightInfo.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for FlightSnippet.FlightInfo(0);
  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_6_5();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t FlightSnippet.FlightInfo.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for FlightSnippet.FlightInfo(0);
  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_232();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t (*FlightSnippet.FlightInfo.unknownFields.modify())(_QWORD)
{
  type metadata accessor for FlightSnippet.FlightInfo(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void FlightSnippet.FlightInfo.init()(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_114_7(a1);
  type metadata accessor for FlightSnippet.FlightInfo(0);
  OUTLINED_FUNCTION_164_1();
  OUTLINED_FUNCTION_5();
}

uint64_t FlightSnippet.Leg.status.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  return *(_QWORD *)(v0 + 16);
}

uint64_t key path getter for FlightSnippet.Leg.status : FlightSnippet.Leg@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = FlightSnippet.Leg.status.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

void key path setter for FlightSnippet.Leg.status : FlightSnippet.Leg()
{
  FlightSnippet.Leg.status.setter();
}

void FlightSnippet.Leg.status.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  v5 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_32_9() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v6 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_67_12(v6);
    OUTLINED_FUNCTION_8_19();
  }
  v7 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v7 + 16) = v5;
  *(_BYTE *)(v7 + 24) = v3 & 1;
  OUTLINED_FUNCTION_29_0();
}

uint64_t FlightSnippet.Leg._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for FlightSnippet.Leg._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    swift_release();
  }
  return swift_retain();
}

void FlightSnippet.Leg.status.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = OUTLINED_FUNCTION_28_13();
  *v0 = v2;
  v2[11] = v1;
  v3 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  *((_DWORD *)v2 + 21) = v3;
  v4 = *(_QWORD *)(v1 + v3);
  OUTLINED_FUNCTION_1_4();
  v5 = *(_BYTE *)(v4 + 24);
  v2[9] = *(_QWORD *)(v4 + 16);
  *((_BYTE *)v2 + 80) = v5;
  OUTLINED_FUNCTION_12();
}

{
  char v0;
  char v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  v1 = v0;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *(_BYTE *)(*v2 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((v1 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    OUTLINED_FUNCTION_4_27();
    v9 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_56_7(v9);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = v5;
  OUTLINED_FUNCTION_0_13((void *)v3);
}

void FlightSnippet.Leg.enRoute.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.enRoute.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_BYTE *)(v5 + 25) = v3 & 1;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.enRoute.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_51_10((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_BYTE *)(v1 + 84) = *(_BYTE *)(v0 + 25);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_49_14();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_149_1();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Leg.departureDelayed.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departureDelayed.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_BYTE *)(v5 + 26) = v3 & 1;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.departureDelayed.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_51_10((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_BYTE *)(v1 + 84) = *(_BYTE *)(v0 + 26);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_49_14();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_149_1();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Leg.arrivalDelayed.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.arrivalDelayed.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_BYTE *)(v5 + 27) = v3 & 1;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.arrivalDelayed.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_51_10((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_BYTE *)(v1 + 84) = *(_BYTE *)(v0 + 27);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_49_14();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_149_1();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Leg.title.getter()
{
  FlightSnippet.Flight.contentHash.getter(type metadata accessor for FlightSnippet.Leg);
}

void FlightSnippet.Flight.contentHash.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_75_10();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Leg.title : FlightSnippet.Leg()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Leg.title.setter();
}

void FlightSnippet.Leg.title.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_10();
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_32_9() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v2 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_67_12(v2);
    OUTLINED_FUNCTION_8_19();
  }
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.title.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_73_8((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v4 = *(int *)(v0 + 96);
      v5 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_4_27();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v5 + v4) = OUTLINED_FUNCTION_67_12(v6);
      OUTLINED_FUNCTION_8_19();
    }
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_163_1();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v7 = *(int *)(v0 + 96);
      v8 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_4_27();
      v9 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_67_12(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Leg.departurePublishedTime.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departurePublishedTime.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 48) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.departurePublishedTime.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_28_13();
  *v0 = v2;
  v2[10] = v1;
  v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_48_9(v3);
  OUTLINED_FUNCTION_1_4();
  v2[9] = v0[6];
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_17_19();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_94_6();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Leg.departureActualTime.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departureActualTime.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 56) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.departureActualTime.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_28_13();
  *v0 = v2;
  v2[10] = v1;
  v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_48_9(v3);
  OUTLINED_FUNCTION_1_4();
  v2[9] = v0[7];
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_17_19();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_94_6();
  OUTLINED_FUNCTION_0_13(v6);
}

void key path setter for FlightSnippet.Leg.departureTerminal : FlightSnippet.Leg()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Leg.departureTerminal.setter();
}

void FlightSnippet.Leg.departureTerminal.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_10();
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_32_9() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v2 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_67_12(v2);
    OUTLINED_FUNCTION_8_19();
  }
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_157_1();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.departureTerminal.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_73_8((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v4 = *(int *)(v0 + 96);
      v5 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_4_27();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v5 + v4) = OUTLINED_FUNCTION_67_12(v6);
      OUTLINED_FUNCTION_8_19();
    }
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_158_2();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v7 = *(int *)(v0 + 96);
      v8 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_4_27();
      v9 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_67_12(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v10 + 64) = v2;
    *(_QWORD *)(v10 + 72) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Leg.departureGate.getter()
{
  FlightSnippet.Flight.carrierFs.getter(type metadata accessor for FlightSnippet.Leg);
}

void FlightSnippet.Flight.carrierFs.getter(uint64_t (*a1)(_QWORD))
{
  OUTLINED_FUNCTION_24_11(a1);
  OUTLINED_FUNCTION_75_10();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_56_1();
}

void key path setter for FlightSnippet.Leg.departureGate : FlightSnippet.Leg()
{
  swift_bridgeObjectRetain();
  FlightSnippet.Leg.departureGate.setter();
}

void FlightSnippet.Leg.departureGate.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_10();
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_32_9() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v2 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_67_12(v2);
    OUTLINED_FUNCTION_8_19();
  }
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.departureGate.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_73_8((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  v3 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_16();
  OUTLINED_FUNCTION_15_19();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_17();
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v4 = *(int *)(v0 + 96);
      v5 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_4_27();
      v6 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v5 + v4) = OUTLINED_FUNCTION_67_12(v6);
      OUTLINED_FUNCTION_8_19();
    }
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_153_1();
  }
  else
  {
    if ((OUTLINED_FUNCTION_26_13() & 1) == 0)
    {
      v7 = *(int *)(v0 + 96);
      v8 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_4_27();
      v9 = OUTLINED_FUNCTION_6_24();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_67_12(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_6();
    *(_QWORD *)(v10 + 80) = v2;
    *(_QWORD *)(v10 + 88) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13((void *)v0);
}

void FlightSnippet.Leg.departureGateClosed.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departureGateClosed.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 96) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.departureGateClosed.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_28_13();
  *v0 = v2;
  v2[10] = v1;
  v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_48_9(v3);
  OUTLINED_FUNCTION_1_4();
  v2[9] = v0[12];
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_17_19();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_94_6();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Leg.departureRunway.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departureRunway.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_QWORD *)(v5 + 104) = v3;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.departureRunway.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_28_13();
  *v0 = v2;
  v2[10] = v1;
  v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_48_9(v3);
  OUTLINED_FUNCTION_1_4();
  v2[9] = v0[13];
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_17_19();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_94_6();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Leg.isTaxiing.getter()
{
  OUTLINED_FUNCTION_46_12();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.isTaxiing.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_24_14() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v4 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_56_7(v4);
    OUTLINED_FUNCTION_8_19();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_6();
  *(_BYTE *)(v5 + 112) = v3 & 1;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.isTaxiing.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_63_11();
  OUTLINED_FUNCTION_51_10((uint64_t)v2);
  OUTLINED_FUNCTION_1_4();
  *(_BYTE *)(v1 + 84) = *(_BYTE *)(v0 + 112);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  OUTLINED_FUNCTION_22_16();
  v2 = OUTLINED_FUNCTION_49_14();
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v2 & 1) == 0)
  {
LABEL_3:
    v3 = *(int *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 72);
    OUTLINED_FUNCTION_4_27();
    v5 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v4 + v3) = OUTLINED_FUNCTION_56_7(v5);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_2_6();
  v6 = (void *)OUTLINED_FUNCTION_149_1();
  OUTLINED_FUNCTION_0_13(v6);
}

void FlightSnippet.Leg.departureAirport.getter(_QWORD *a1@<X8>)
{
  FlightSnippet.Leg.departureAirport.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport, a1);
}

void key path setter for FlightSnippet.flight : FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v9 = a5(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v12 - v10;
  _s10OmniSearch0B6ResultVWOcTm_0(a1, (uint64_t)&v12 - v10, a5);
  a6(v11);
  OUTLINED_FUNCTION_63();
}

uint64_t FlightSnippet.Leg.departureAirport.setter()
{
  return FlightSnippet.Leg.departureAirport.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_22_16();
  v15 = v2;
  v16 = v3;
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_65_11();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - v8;
  v10 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v11 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v1 + v10) = FlightSnippet.Leg._StorageClass.init(copying:)(v11);
    OUTLINED_FUNCTION_8_19();
  }
  outlined init with take of FlightSnippet.Flight(v5, (uint64_t)v9, type metadata accessor for FlightSnippet.Airport);
  v12 = type metadata accessor for FlightSnippet.Airport(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v12);
  outlined init with take of FlightSnippet.Airport?((uint64_t)v9, v0);
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_146_4();
  swift_endAccess();
  return OUTLINED_FUNCTION_50();
}

void FlightSnippet.Leg.departureAirport.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = OUTLINED_FUNCTION_108_8();
  OUTLINED_FUNCTION_123_5((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_122_4();
  v5 = OUTLINED_FUNCTION_91_5(v4);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_64_8((uint64_t)v5);
  v6 = OUTLINED_FUNCTION_86_11();
  OUTLINED_FUNCTION_84_9((uint64_t)v6);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_90_7();
  v7 = OUTLINED_FUNCTION_22_2(v0, 1, v1);
  if (v9)
  {
    v10 = OUTLINED_FUNCTION_31_16();
    OUTLINED_FUNCTION_85_3(v10, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    OUTLINED_FUNCTION_89_13(v7, v8, type metadata accessor for FlightSnippet.Airport);
  }
  OUTLINED_FUNCTION_63();
}

{
  FlightSnippet.Leg.departureAirport.modify();
}

{
  uint64_t v0;
  void (*v1)(void *);
  void (*v2)(void *);
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  OUTLINED_FUNCTION_22_16();
  v2 = v1;
  v3 = *(void **)v0;
  v4 = *(void **)(*(_QWORD *)v0 + 40);
  v5 = *(void **)(*(_QWORD *)v0 + 48);
  v6 = *(void **)(*(_QWORD *)v0 + 32);
  if ((v7 & 1) != 0)
  {
    _s10OmniSearch0B6ResultVWOcTm_0(*(_QWORD *)(*(_QWORD *)v0 + 48), (uint64_t)v4, type metadata accessor for FlightSnippet.Airport);
    v2(v4);
    OUTLINED_FUNCTION_120_5((uint64_t)v5);
  }
  else
  {
    v1(*(void **)(*(_QWORD *)v0 + 48));
  }
  free(v5);
  free(v4);
  free(v6);
  OUTLINED_FUNCTION_0_13(v3);
}

void FlightSnippet.Leg.hasDepartureAirport.getter()
{
  FlightSnippet.Leg.hasDepartureAirport.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport);
}

Swift::Void __swiftcall FlightSnippet.Leg.clearDepartureAirport()()
{
  FlightSnippet.Leg.clearDepartureAirport()();
}

void FlightSnippet.Leg.arrivalPublishedTime.getter()
{
  FlightSnippet.Leg.arrivalPublishedTime.getter();
}

{
  type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.arrivalPublishedTime.setter()
{
  FlightSnippet.Leg.arrivalPublishedTime.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  OUTLINED_FUNCTION_35_10();
  v3 = v2;
  v5 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_32_9() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v6 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_67_12(v6);
    OUTLINED_FUNCTION_8_19();
  }
  v7 = (_QWORD *)(*(_QWORD *)(v0 + v1) + *v3);
  OUTLINED_FUNCTION_2_6();
  *v7 = v5;
  OUTLINED_FUNCTION_29_0();
}

void FlightSnippet.Leg.arrivalPublishedTime.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_34_11((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_102_6();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalPublishedTime.modify();
}

{
  _QWORD *v0;
  _QWORD *v1;
  char v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  OUTLINED_FUNCTION_22_16();
  v1 = v0;
  v3 = v2;
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((v3 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    OUTLINED_FUNCTION_4_27();
    v10 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v9 + v8) = OUTLINED_FUNCTION_67_12(v10);
    OUTLINED_FUNCTION_8_19();
  }
LABEL_4:
  OUTLINED_FUNCTION_66_13();
  v12 = (_QWORD *)(v11 + *v1);
  OUTLINED_FUNCTION_2_6();
  *v12 = v6;
  OUTLINED_FUNCTION_0_13((void *)v5);
}

void FlightSnippet.Leg.arrivalActualTime.getter()
{
  FlightSnippet.Leg.arrivalPublishedTime.getter();
}

void FlightSnippet.Leg.arrivalActualTime.setter()
{
  FlightSnippet.Leg.arrivalPublishedTime.setter();
}

void FlightSnippet.Leg.arrivalActualTime.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_34_11((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_102_6();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalPublishedTime.modify();
}

uint64_t key path setter for FlightSnippet.Leg.arrivalTerminal : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.arrivalTerminal.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.arrivalTerminal.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
}

void FlightSnippet.Leg.arrivalTerminal.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_50_12((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_139_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalTerminal.modify();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  OUTLINED_FUNCTION_18_2();
  v1 = v0;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *(_QWORD *)(*v2 + 80);
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v7 = *(int *)(v3 + 96);
      v8 = *(_QWORD *)(v3 + 88);
      OUTLINED_FUNCTION_4_27();
      v9 = OUTLINED_FUNCTION_75();
      *(_QWORD *)(v8 + v7) = OUTLINED_FUNCTION_138_2(v9);
      OUTLINED_FUNCTION_8_19();
    }
    v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 96)) + *v1);
    OUTLINED_FUNCTION_2_6();
    *v10 = v4;
    v10[1] = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v11 = *(int *)(v3 + 96);
      v12 = *(_QWORD *)(v3 + 88);
      OUTLINED_FUNCTION_4_27();
      v13 = OUTLINED_FUNCTION_75();
      *(_QWORD *)(v12 + v11) = OUTLINED_FUNCTION_138_2(v13);
      OUTLINED_FUNCTION_8_19();
    }
    v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 96)) + *v1);
    OUTLINED_FUNCTION_2_6();
    *v14 = v4;
    v14[1] = v5;
  }
  swift_bridgeObjectRelease();
  free((void *)v3);
}

void FlightSnippet.Leg.arrivalGate.getter()
{
  FlightSnippet.Leg.arrivalTerminal.getter();
}

uint64_t key path setter for FlightSnippet.Leg.arrivalGate : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.arrivalGate.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.arrivalGate.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
}

uint64_t FlightSnippet.Leg.arrivalTerminal.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v8 = OUTLINED_FUNCTION_75();
    *(_QWORD *)(v3 + v7) = OUTLINED_FUNCTION_138_2(v8);
    OUTLINED_FUNCTION_8_19();
  }
  v9 = (_QWORD *)(*(_QWORD *)(v3 + v7) + *a3);
  OUTLINED_FUNCTION_2_6();
  *v9 = a1;
  v9[1] = a2;
  return swift_bridgeObjectRelease();
}

void FlightSnippet.Leg.arrivalGate.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_50_12((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_139_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalTerminal.modify();
}

void FlightSnippet.Leg.gateArrival.getter()
{
  FlightSnippet.Leg.arrivalPublishedTime.getter();
}

void FlightSnippet.Leg.gateArrival.setter()
{
  FlightSnippet.Leg.arrivalPublishedTime.setter();
}

void FlightSnippet.Leg.gateArrival.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_34_11((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_102_6();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalPublishedTime.modify();
}

void FlightSnippet.Leg.arrivalRunway.getter()
{
  FlightSnippet.Leg.arrivalPublishedTime.getter();
}

void FlightSnippet.Leg.arrivalRunway.setter()
{
  FlightSnippet.Leg.arrivalPublishedTime.setter();
}

void FlightSnippet.Leg.arrivalRunway.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_34_11((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_102_6();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalPublishedTime.modify();
}

void FlightSnippet.Leg.arrivalAirport.getter(_QWORD *a1@<X8>)
{
  FlightSnippet.Leg.departureAirport.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport, a1);
}

uint64_t FlightSnippet.Leg.arrivalAirport.setter()
{
  return FlightSnippet.Leg.departureAirport.setter();
}

void FlightSnippet.Leg.arrivalAirport.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = OUTLINED_FUNCTION_108_8();
  OUTLINED_FUNCTION_123_5((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_122_4();
  v5 = OUTLINED_FUNCTION_91_5(v4);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_64_8((uint64_t)v5);
  v6 = OUTLINED_FUNCTION_86_11();
  OUTLINED_FUNCTION_84_9((uint64_t)v6);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_90_7();
  v7 = OUTLINED_FUNCTION_22_2(v0, 1, v1);
  if (v9)
  {
    v10 = OUTLINED_FUNCTION_31_16();
    OUTLINED_FUNCTION_85_3(v10, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    OUTLINED_FUNCTION_89_13(v7, v8, type metadata accessor for FlightSnippet.Airport);
  }
  OUTLINED_FUNCTION_63();
}

{
  FlightSnippet.Leg.departureAirport.modify();
}

void FlightSnippet.Leg.hasArrivalAirport.getter()
{
  FlightSnippet.Leg.hasDepartureAirport.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport);
}

void FlightSnippet.Leg.hasDepartureAirport.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20)) + *a1;
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_154_1(v6);
  v7 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_22_2((uint64_t)v5, 1, v7);
  outlined destroy of MobileSMSDocument?((uint64_t)v5, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_12();
}

Swift::Void __swiftcall FlightSnippet.Leg.clearArrivalAirport()()
{
  FlightSnippet.Leg.clearDepartureAirport()();
}

void FlightSnippet.Leg.clearDepartureAirport()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_2();
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_32_9() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_27();
    v3 = OUTLINED_FUNCTION_6_24();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_67_12(v3);
    OUTLINED_FUNCTION_8_19();
  }
  type metadata accessor for FlightSnippet.Airport(0);
  v4 = OUTLINED_FUNCTION_20_13();
  __swift_storeEnumTagSinglePayload(v4, v5, v6, v7);
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_146_4();
  swift_endAccess();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_63();
}

void FlightSnippet.Leg.baggageClaim.getter()
{
  FlightSnippet.Leg.arrivalTerminal.getter();
}

uint64_t key path setter for FlightSnippet.Leg.baggageClaim : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.baggageClaim.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.baggageClaim.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
}

void FlightSnippet.Leg.baggageClaim.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_50_12((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_139_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalTerminal.modify();
}

void FlightSnippet.Leg.updatedAt.getter()
{
  FlightSnippet.Leg.arrivalPublishedTime.getter();
}

void FlightSnippet.Leg.updatedAt.setter()
{
  FlightSnippet.Leg.arrivalPublishedTime.setter();
}

void FlightSnippet.Leg.updatedAt.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_34_11((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_102_6();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalPublishedTime.modify();
}

void FlightSnippet.Leg.divertedAirport.getter(_QWORD *a1@<X8>)
{
  FlightSnippet.Leg.departureAirport.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport, a1);
}

void FlightSnippet.Leg.departureAirport.getter(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20)) + *a1;
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_116_7(v8, (uint64_t)v7);
  v9 = type metadata accessor for FlightSnippet.Airport(0);
  v10 = OUTLINED_FUNCTION_22_2((uint64_t)v7, 1, v9);
  if (v12)
  {
    FlightSnippet.Airport.init()(a2);
    outlined destroy of MobileSMSDocument?((uint64_t)v7, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    OUTLINED_FUNCTION_151_2(v10, v11, type metadata accessor for FlightSnippet.Airport);
  }
  OUTLINED_FUNCTION_63();
}

uint64_t FlightSnippet.Leg.divertedAirport.setter()
{
  return FlightSnippet.Leg.departureAirport.setter();
}

void FlightSnippet.Leg.divertedAirport.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = OUTLINED_FUNCTION_108_8();
  OUTLINED_FUNCTION_123_5((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_122_4();
  v5 = OUTLINED_FUNCTION_91_5(v4);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_64_8((uint64_t)v5);
  v6 = OUTLINED_FUNCTION_86_11();
  OUTLINED_FUNCTION_84_9((uint64_t)v6);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_90_7();
  v7 = OUTLINED_FUNCTION_22_2(v0, 1, v1);
  if (v9)
  {
    v10 = OUTLINED_FUNCTION_31_16();
    OUTLINED_FUNCTION_85_3(v10, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    OUTLINED_FUNCTION_89_13(v7, v8, type metadata accessor for FlightSnippet.Airport);
  }
  OUTLINED_FUNCTION_63();
}

{
  FlightSnippet.Leg.departureAirport.modify();
}

void FlightSnippet.Leg.hasDivertedAirport.getter()
{
  FlightSnippet.Leg.hasDepartureAirport.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport);
}

Swift::Void __swiftcall FlightSnippet.Leg.clearDivertedAirport()()
{
  FlightSnippet.Leg.clearDepartureAirport()();
}

void FlightSnippet.Leg.uid.getter()
{
  FlightSnippet.Leg.arrivalTerminal.getter();
}

uint64_t key path setter for FlightSnippet.Leg.uid : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.uid.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.uid.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
}

void FlightSnippet.Leg.uid.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_29_15();
  OUTLINED_FUNCTION_50_12((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_139_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_105_3();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalTerminal.modify();
}

void FlightSnippet.Leg.feedUpdateTime.getter()
{
  FlightSnippet.Leg.arrivalPublishedTime.getter();
}

void FlightSnippet.Leg.feedUpdateTime.setter()
{
  FlightSnippet.Leg.arrivalPublishedTime.setter();
}

void FlightSnippet.Leg.feedUpdateTime.modify()
{
  void *v0;

  v0 = OUTLINED_FUNCTION_28_13();
  OUTLINED_FUNCTION_34_11((uint64_t)v0);
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_102_6();
  OUTLINED_FUNCTION_12();
}

{
  FlightSnippet.Leg.arrivalPublishedTime.modify();
}

uint64_t FlightSnippet.Flight.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_6_5();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t FlightSnippet.Flight.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_37_10();
  v0 = OUTLINED_FUNCTION_232();
  return OUTLINED_FUNCTION_57_6(v0, v1, v2, v3);
}

uint64_t (*FlightSnippet.Leg.unknownFields.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t FlightSnippet.Leg.init()@<X0>(uint64_t a1@<X8>)
{
  return FlightSnippet.Flight.init()(type metadata accessor for FlightSnippet.Leg, &one-time initialization token for defaultInstance, &static FlightSnippet.Leg._StorageClass.defaultInstance, a1);
}

uint64_t FlightSnippet.Flight.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  UnknownStorage.init()();
  v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t FlightSnippet.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  type metadata accessor for FlightSnippet(0);
  OUTLINED_FUNCTION_164_1();
  type metadata accessor for FlightSnippet.Flight(0);
  v1 = OUTLINED_FUNCTION_20_13();
  return OUTLINED_FUNCTION_81_8(v1, v2, v3, v4);
}

void one-time initialization function for allCases()
{
  static FlightSnippet.Status.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *FlightSnippet.Status.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static FlightSnippet.Status.allCases;
}

void static FlightSnippet.Status.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_1_4();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
}

uint64_t static FlightSnippet.Status.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_2_6();
  static FlightSnippet.Status.allCases = a1;
  return swift_bridgeObjectRelease();
}

void static FlightSnippet.Status.allCases.modify()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_5();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance FlightSnippet.Status@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  *a1 = static FlightSnippet.Status.allCases;
  return swift_bridgeObjectRetain();
}

const char *FlightSnippet.protoMessageName.unsafeMutableAddressor()
{
  return "FlightSnippet";
}

uint64_t static FlightSnippet.protoMessageName.getter()
{
  return 0x6E53746867696C46;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243351440;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "flight";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "is_card_search";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "is_icao_search";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "query_intended_flight_info";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "selected_leg_index";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "search_timestamp";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243350D30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ACTIVE";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CANCELED";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "DIVERTED";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "DATA_SOURCE_NEEDED";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "LANDED";
  *((_QWORD *)v19 + 1) = 6;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "NOT_OPERATIONAL";
  *((_QWORD *)v21 + 1) = 15;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "REDIRECTED";
  *((_QWORD *)v23 + 1) = 10;
  v23[16] = 2;
  v10();
  v24 = (_QWORD *)(v6 + 8 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "SCHEDULED";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  uint64_t v51;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Flight._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Flight._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_2433567C0;
  v5 = v51 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v51 + v4) = 1;
  *(_QWORD *)v5 = "id";
  *(_QWORD *)(v5 + 8) = 2;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  v8 = *(void (**)(void))(*(_QWORD *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  v9 = v51 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v51 + v4 + v3) = 2;
  *(_QWORD *)v9 = "content_hash";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v8();
  v10 = (_QWORD *)(v51 + v4 + 2 * v3);
  v11 = (char *)v10 + *(int *)(v1 + 48);
  *v10 = 3;
  *(_QWORD *)v11 = "carrier_iata";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  v12 = (_QWORD *)(v51 + v4 + 3 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "carrier_icao";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  v14 = (_QWORD *)(v51 + v4 + 4 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "carrier_fs";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  v16 = (_QWORD *)(v51 + v4 + 5 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 6;
  *(_QWORD *)v17 = "carrier_name";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  v18 = (_QWORD *)(v51 + v4 + 6 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 7;
  *(_QWORD *)v19 = "carrier_phone_number";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v8();
  v20 = (_QWORD *)(v51 + v4 + 7 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 8;
  *(_QWORD *)v21 = "flight_number";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  v22 = (_QWORD *)(v51 + v4 + 8 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 9;
  *(_QWORD *)v23 = "flight_departure_scheduled";
  *((_QWORD *)v23 + 1) = 26;
  v23[16] = 2;
  v8();
  v24 = (_QWORD *)(v51 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "flight_arrival_scheduled";
  *((_QWORD *)v25 + 1) = 24;
  v25[16] = 2;
  v8();
  v26 = (_QWORD *)(v51 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "legs";
  *((_QWORD *)v27 + 1) = 4;
  v27[16] = 2;
  v8();
  v28 = (_QWORD *)(v51 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "code_shares";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v8();
  v30 = (_QWORD *)(v51 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "leg_index";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v8();
  v32 = (_QWORD *)(v51 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "operator_carrier_code";
  *((_QWORD *)v33 + 1) = 21;
  v33[16] = 2;
  v8();
  v34 = (_QWORD *)(v51 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "operator_flight_number";
  *((_QWORD *)v35 + 1) = 22;
  v35[16] = 2;
  v8();
  v36 = (_QWORD *)(v51 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "website";
  *((_QWORD *)v37 + 1) = 7;
  v37[16] = 2;
  v8();
  v38 = (_QWORD *)(v51 + v4 + 16 * v3);
  v39 = (char *)v38 + *(int *)(v1 + 48);
  *v38 = 20;
  *(_QWORD *)v39 = "last_updated";
  *((_QWORD *)v39 + 1) = 12;
  v39[16] = 2;
  v8();
  v40 = (_QWORD *)(v51 + v4 + 17 * v3);
  v41 = (char *)v40 + *(int *)(v1 + 48);
  *v40 = 21;
  *(_QWORD *)v41 = "legs_not_updated";
  *((_QWORD *)v41 + 1) = 16;
  v41[16] = 2;
  v8();
  v42 = (_QWORD *)(v51 + v4 + 18 * v3);
  v43 = (char *)v42 + *(int *)(v1 + 48);
  *v42 = 22;
  *(_QWORD *)v43 = "departure_UTC_variance";
  *((_QWORD *)v43 + 1) = 22;
  v43[16] = 2;
  v8();
  v44 = (_QWORD *)(v51 + v4 + 19 * v3);
  v45 = (char *)v44 + *(int *)(v1 + 48);
  *v44 = 23;
  *(_QWORD *)v45 = "total_legs";
  *((_QWORD *)v45 + 1) = 10;
  v45[16] = 2;
  v8();
  v46 = (_QWORD *)(v51 + v4 + 20 * v3);
  v47 = (char *)v46 + *(int *)(v1 + 48);
  *v46 = 24;
  *(_QWORD *)v47 = "leg_flight_schedule_ids";
  *((_QWORD *)v47 + 1) = 23;
  v47[16] = 2;
  v8();
  v48 = (_QWORD *)(v51 + v4 + 21 * v3);
  v49 = (char *)v48 + *(int *)(v1 + 48);
  *v48 = 25;
  *(_QWORD *)v49 = "leg_flight_update_ids";
  *((_QWORD *)v49 + 1) = 21;
  v49[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v36;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Airport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Airport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_2433567D0;
  v5 = v36 + v4;
  v6 = v36 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v36 + v4) = 1;
  *(_QWORD *)v6 = "code";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "name";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "city";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "physicalCity";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "maps_id";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "latitude";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "longitude";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "time_zone_name";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  v23 = (_QWORD *)(v5 + 8 * v3);
  v24 = (char *)v23 + *(int *)(v1 + 48);
  *v23 = 9;
  *(_QWORD *)v24 = "street";
  *((_QWORD *)v24 + 1) = 6;
  v24[16] = 2;
  v9();
  v25 = (_QWORD *)(v5 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "district";
  *((_QWORD *)v26 + 1) = 8;
  v26[16] = 2;
  v9();
  v27 = (_QWORD *)(v5 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 11;
  *(_QWORD *)v28 = "state";
  *((_QWORD *)v28 + 1) = 5;
  v28[16] = 2;
  v9();
  v29 = (_QWORD *)(v5 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 12;
  *(_QWORD *)v30 = "postal_code";
  *((_QWORD *)v30 + 1) = 11;
  v30[16] = 2;
  v9();
  v31 = (_QWORD *)(v5 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 13;
  *(_QWORD *)v32 = "country_code";
  *((_QWORD *)v32 + 1) = 12;
  v32[16] = 2;
  v9();
  v33 = (_QWORD *)(v5 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 14;
  *(_QWORD *)v34 = "country";
  *((_QWORD *)v34 + 1) = 7;
  v34[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.FlightInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.FlightInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243351420;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "carrier";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "carrier_fs";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "flight_number";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "relationship";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v57;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Leg._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Leg._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_2433567E0;
  v5 = v57 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v57 + v4) = 1;
  *(_QWORD *)v5 = "status";
  *(_QWORD *)(v5 + 8) = 6;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  v8 = *(void (**)(void))(*(_QWORD *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  v9 = v57 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v57 + v4 + v3) = 2;
  *(_QWORD *)v9 = "en_route";
  *(_QWORD *)(v9 + 8) = 8;
  *(_BYTE *)(v9 + 16) = 2;
  v8();
  v10 = (_QWORD *)(v57 + v4 + 2 * v3);
  v11 = (char *)v10 + *(int *)(v1 + 48);
  *v10 = 3;
  *(_QWORD *)v11 = "departure_delayed";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v8();
  v12 = (_QWORD *)(v57 + v4 + 3 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "arrival_delayed";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  v14 = (_QWORD *)(v57 + v4 + 4 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "title";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v8();
  v16 = (_QWORD *)(v57 + v4 + 5 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 6;
  *(_QWORD *)v17 = "departure_published_time";
  *((_QWORD *)v17 + 1) = 24;
  v17[16] = 2;
  v8();
  v18 = (_QWORD *)(v57 + v4 + 6 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 7;
  *(_QWORD *)v19 = "departure_actual_time";
  *((_QWORD *)v19 + 1) = 21;
  v19[16] = 2;
  v8();
  v20 = (_QWORD *)(v57 + v4 + 7 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 8;
  *(_QWORD *)v21 = "departure_terminal";
  *((_QWORD *)v21 + 1) = 18;
  v21[16] = 2;
  v8();
  v22 = (_QWORD *)(v57 + v4 + 8 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 9;
  *(_QWORD *)v23 = "departure_gate";
  *((_QWORD *)v23 + 1) = 14;
  v23[16] = 2;
  v8();
  v24 = (_QWORD *)(v57 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "departure_gate_closed";
  *((_QWORD *)v25 + 1) = 21;
  v25[16] = 2;
  v8();
  v26 = (_QWORD *)(v57 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "departure_runway";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v8();
  v28 = (_QWORD *)(v57 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "is_taxiing";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v8();
  v30 = (_QWORD *)(v57 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "departure_airport";
  *((_QWORD *)v31 + 1) = 17;
  v31[16] = 2;
  v8();
  v32 = (_QWORD *)(v57 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "arrival_published_time";
  *((_QWORD *)v33 + 1) = 22;
  v33[16] = 2;
  v8();
  v34 = (_QWORD *)(v57 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "arrival_actual_time";
  *((_QWORD *)v35 + 1) = 19;
  v35[16] = 2;
  v8();
  v36 = (_QWORD *)(v57 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "arrival_terminal";
  *((_QWORD *)v37 + 1) = 16;
  v37[16] = 2;
  v8();
  v38 = (_QWORD *)(v57 + v4 + 16 * v3);
  v39 = (char *)v38 + *(int *)(v1 + 48);
  *v38 = 17;
  *(_QWORD *)v39 = "arrival_gate";
  *((_QWORD *)v39 + 1) = 12;
  v39[16] = 2;
  v8();
  v40 = (_QWORD *)(v57 + v4 + 17 * v3);
  v41 = (char *)v40 + *(int *)(v1 + 48);
  *v40 = 18;
  *(_QWORD *)v41 = "gate_arrival";
  *((_QWORD *)v41 + 1) = 12;
  v41[16] = 2;
  v8();
  v42 = (_QWORD *)(v57 + v4 + 18 * v3);
  v43 = (char *)v42 + *(int *)(v1 + 48);
  *v42 = 19;
  *(_QWORD *)v43 = "arrival_runway";
  *((_QWORD *)v43 + 1) = 14;
  v43[16] = 2;
  v8();
  v44 = (_QWORD *)(v57 + v4 + 19 * v3);
  v45 = (char *)v44 + *(int *)(v1 + 48);
  *v44 = 20;
  *(_QWORD *)v45 = "arrival_airport";
  *((_QWORD *)v45 + 1) = 15;
  v45[16] = 2;
  v8();
  v46 = (_QWORD *)(v57 + v4 + 20 * v3);
  v47 = (char *)v46 + *(int *)(v1 + 48);
  *v46 = 21;
  *(_QWORD *)v47 = "baggage_claim";
  *((_QWORD *)v47 + 1) = 13;
  v47[16] = 2;
  v8();
  v48 = (_QWORD *)(v57 + v4 + 21 * v3);
  v49 = (char *)v48 + *(int *)(v1 + 48);
  *v48 = 22;
  *(_QWORD *)v49 = "updated_at";
  *((_QWORD *)v49 + 1) = 10;
  v49[16] = 2;
  v8();
  v50 = (_QWORD *)(v57 + v4 + 22 * v3);
  v51 = (char *)v50 + *(int *)(v1 + 48);
  *v50 = 23;
  *(_QWORD *)v51 = "diverted_airport";
  *((_QWORD *)v51 + 1) = 16;
  v51[16] = 2;
  v8();
  v52 = (_QWORD *)(v57 + v4 + 23 * v3);
  v53 = (char *)v52 + *(int *)(v1 + 48);
  *v52 = 24;
  *(_QWORD *)v53 = "uid";
  *((_QWORD *)v53 + 1) = 3;
  v53[16] = 2;
  v8();
  v54 = (_QWORD *)(v57 + v4 + 24 * v3);
  v55 = (char *)v54 + *(int *)(v1 + 48);
  *v54 = 25;
  *(_QWORD *)v55 = "feed_update_time";
  *((_QWORD *)v55 + 1) = 16;
  v55[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t FlightSnippet._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet._protobuf_nameMap);
}

uint64_t static FlightSnippet._protobuf_nameMap.getter()
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap);
}

void FlightSnippet.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_69_10();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          closure #1 in FlightSnippet.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 3:
          OUTLINED_FUNCTION_142_2();
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 4:
          OUTLINED_FUNCTION_68_12();
          break;
        case 5:
          OUTLINED_FUNCTION_142_2();
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          OUTLINED_FUNCTION_143_2();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_104_9();
    }
  }
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in FlightSnippet.decodeMessage<A>(decoder:)()
{
  type metadata accessor for FlightSnippet(0);
  type metadata accessor for FlightSnippet.Flight(0);
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

void FlightSnippet.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  closure #1 in FlightSnippet.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    if (*(_BYTE *)v0 == 1)
      OUTLINED_FUNCTION_100_6();
    if (*(_BYTE *)(v0 + 1) == 1)
      OUTLINED_FUNCTION_100_6();
    OUTLINED_FUNCTION_16_24();
    if (v2)
      OUTLINED_FUNCTION_25_12();
    if (*(_DWORD *)(v0 + 24))
    {
      OUTLINED_FUNCTION_134_3();
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v0 + 32))
    {
      OUTLINED_FUNCTION_134_3();
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    }
    type metadata accessor for FlightSnippet(0);
    OUTLINED_FUNCTION_128_4();
  }
}

void closure #1 in FlightSnippet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FlightSnippet.Flight(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FlightSnippet(0);
  outlined init with copy of Date?(a1 + *(int *)(v8 + 40), (uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of MobileSMSDocument?((uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  }
  else
  {
    outlined init with take of FlightSnippet.Flight((uint64_t)v4, (uint64_t)v7, type metadata accessor for FlightSnippet.Flight);
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v7, type metadata accessor for FlightSnippet.Flight);
  }
}

#error "2432882E0: call analysis failed (funcsize=214)"

Swift::Int FlightSnippet.hashValue.getter()
{
  return FlightSnippet.hashValue.getter(type metadata accessor for FlightSnippet, &lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet()
{
  return 0x6E53746867696C46;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance FlightSnippet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance FlightSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance FlightSnippet())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet()
{
  FlightSnippet.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet()
{
  FlightSnippet.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, type metadata accessor for FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(a1, a2, &one-time initialization token for _protobuf_nameMap);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, type metadata accessor for FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, type metadata accessor for FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
  return Message.hash(into:)();
}

uint64_t FlightSnippet.Status._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Status._protobuf_nameMap);
}

uint64_t static FlightSnippet.Status._protobuf_nameMap.getter()
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Status(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(a1, a2, &one-time initialization token for _protobuf_nameMap);
}

void *FlightSnippet.Flight.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.Flight.protoMessageName;
}

unint64_t static FlightSnippet.Flight.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_30_11(20);
}

uint64_t FlightSnippet.Flight._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Flight._protobuf_nameMap);
}

uint64_t static FlightSnippet.Flight._protobuf_nameMap.getter()
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap);
}

void one-time initialization function for defaultInstance()
{
  OUTLINED_FUNCTION_14_15();
  OUTLINED_FUNCTION_5_26();
  static FlightSnippet.Flight._StorageClass.defaultInstance = FlightSnippet.Flight._StorageClass.init()();
  OUTLINED_FUNCTION_5();
}

uint64_t type metadata accessor for FlightSnippet.Leg(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Leg);
}

uint64_t type metadata accessor for FlightSnippet.Flight._StorageClass()
{
  return objc_opt_self();
}

uint64_t FlightSnippet.Flight._StorageClass.init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0xE000000000000000;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0xE000000000000000;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xE000000000000000;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0xE000000000000000;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0xE000000000000000;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = 0xE000000000000000;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 160) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 168) = v2;
  *(_DWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 192) = 0xE000000000000000;
  *(_QWORD *)(v0 + 200) = 0;
  *(_QWORD *)(v0 + 208) = 0xE000000000000000;
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0xE000000000000000;
  *(_DWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 256) = v2;
  *(_QWORD *)(v0 + 264) = v2;
  return result;
}

uint64_t FlightSnippet.Flight._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 40) = 0xE000000000000000;
  *(_QWORD *)(v1 + 56) = 0xE000000000000000;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0xE000000000000000;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  *(_QWORD *)(v1 + 104) = 0xE000000000000000;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0xE000000000000000;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 136) = 0xE000000000000000;
  *(_QWORD *)(v1 + 144) = 0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 160) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 168) = v3;
  *(_DWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0xE000000000000000;
  *(_QWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0xE000000000000000;
  *(_QWORD *)(v1 + 216) = 0;
  *(_QWORD *)(v1 + 224) = 0xE000000000000000;
  *(_DWORD *)(v1 + 248) = 0;
  *(_QWORD *)(v1 + 240) = 0;
  *(_QWORD *)(v1 + 256) = v3;
  *(_QWORD *)(v1 + 264) = v3;
  *(_QWORD *)(v1 + 232) = 0;
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v8;
  *(_QWORD *)(v1 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = v10;
  *(_QWORD *)(v1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  swift_beginAccess();
  *(_QWORD *)(v1 + 80) = v12;
  *(_QWORD *)(v1 + 88) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = v14;
  *(_QWORD *)(v1 + 104) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120);
  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = v17;
  *(_QWORD *)(v1 + 120) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 136);
  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = v19;
  *(_QWORD *)(v1 + 136) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 144);
  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = v20;
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 152);
  swift_beginAccess();
  *(_QWORD *)(v1 + 152) = v21;
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 160);
  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v23 = *(_QWORD *)(a1 + 168);
  swift_beginAccess();
  *(_QWORD *)(v1 + 168) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v23) = *(_DWORD *)(a1 + 176);
  swift_beginAccess();
  *(_DWORD *)(v1 + 176) = v23;
  swift_beginAccess();
  v25 = *(_QWORD *)(a1 + 184);
  v24 = *(_QWORD *)(a1 + 192);
  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = v25;
  *(_QWORD *)(v1 + 192) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v27 = *(_QWORD *)(a1 + 200);
  v26 = *(_QWORD *)(a1 + 208);
  swift_beginAccess();
  *(_QWORD *)(v1 + 200) = v27;
  *(_QWORD *)(v1 + 208) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v29 = *(_QWORD *)(a1 + 216);
  v28 = *(_QWORD *)(a1 + 224);
  swift_beginAccess();
  *(_QWORD *)(v1 + 216) = v29;
  *(_QWORD *)(v1 + 224) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30 = *(_QWORD *)(a1 + 232);
  swift_beginAccess();
  *(_QWORD *)(v1 + 232) = v30;
  swift_beginAccess();
  LODWORD(v30) = *(_DWORD *)(a1 + 240);
  swift_beginAccess();
  *(_DWORD *)(v1 + 240) = v30;
  swift_beginAccess();
  LODWORD(v30) = *(_DWORD *)(a1 + 244);
  swift_beginAccess();
  *(_DWORD *)(v1 + 244) = v30;
  swift_beginAccess();
  LODWORD(v30) = *(_DWORD *)(a1 + 248);
  swift_beginAccess();
  *(_DWORD *)(v1 + 248) = v30;
  swift_beginAccess();
  v31 = *(_QWORD *)(a1 + 256);
  swift_beginAccess();
  *(_QWORD *)(v1 + 256) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v32 = *(_QWORD *)(a1 + 264);
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v1 + 264) = v32;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t type metadata accessor for FlightSnippet.Airport(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Airport);
}

uint64_t type metadata accessor for FlightSnippet.FlightInfo(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.FlightInfo);
}

uint64_t type metadata accessor for FlightSnippet.Leg._StorageClass(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Leg._StorageClass);
}

uint64_t FlightSnippet.Flight._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FlightSnippet.Flight._StorageClass.__deallocating_deinit()
{
  FlightSnippet.Flight._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t FlightSnippet.Flight.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))FlightSnippet.Flight._uniqueStorage(), (void (*)(_QWORD))type metadata accessor for FlightSnippet.Flight, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:));
}

void closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          closure #1 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 20:
          closure #17 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 21:
          closure #18 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 22:
          closure #19 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 23:
          closure #20 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 24:
          closure #21 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 25:
          closure #22 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
}

uint64_t closure #1 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for FlightSnippet.Leg(0);
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for FlightSnippet.FlightInfo(0);
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #19 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #20 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #21 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #22 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
  return swift_endAccess();
}

uint64_t FlightSnippet.Flight.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for FlightSnippet.Flight, (void (*)(void))closure #1 in FlightSnippet.Flight.traverse<A>(visitor:));
}

uint64_t closure #1 in FlightSnippet.Flight.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 56);
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 72);
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 88);
  v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v12 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 104);
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = *(_QWORD *)(a1 + 96) & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 120);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = *(_QWORD *)(a1 + 112) & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (!v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_36:
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 136);
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = *(_QWORD *)(a1 + 128) & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 144) || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
  {
    swift_beginAccess();
    if (!*(_QWORD *)(a1 + 152)
      || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 16))
      {
        type metadata accessor for FlightSnippet.Leg(0);
        lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        if (v1)
          return swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16)
        || (type metadata accessor for FlightSnippet.FlightInfo(0),
            lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), result = swift_bridgeObjectRelease(), !v1))
      {
        swift_beginAccess();
        if (!*(_DWORD *)(a1 + 176)
          || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
        {
          swift_beginAccess();
          v20 = *(_QWORD *)(a1 + 192);
          v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0)
            v21 = *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFLL;
          if (!v21
            || (swift_bridgeObjectRetain(),
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                result = swift_bridgeObjectRelease(),
                !v1))
          {
            swift_beginAccess();
            v22 = *(_QWORD *)(a1 + 208);
            v23 = HIBYTE(v22) & 0xF;
            if ((v22 & 0x2000000000000000) == 0)
              v23 = *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFLL;
            if (!v23
              || (swift_bridgeObjectRetain(),
                  dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                  result = swift_bridgeObjectRelease(),
                  !v1))
            {
              swift_beginAccess();
              v24 = *(_QWORD *)(a1 + 224);
              v25 = HIBYTE(v24) & 0xF;
              if ((v24 & 0x2000000000000000) == 0)
                v25 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFLL;
              if (!v25
                || (swift_bridgeObjectRetain(),
                    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                    result = swift_bridgeObjectRelease(),
                    !v1))
              {
                swift_beginAccess();
                if (!*(_QWORD *)(a1 + 232)
                  || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
                {
                  swift_beginAccess();
                  if (!*(_DWORD *)(a1 + 240)
                    || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                  {
                    swift_beginAccess();
                    if (!*(_DWORD *)(a1 + 244)
                      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                    {
                      swift_beginAccess();
                      if (!*(_DWORD *)(a1 + 248)
                        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                      {
                        swift_beginAccess();
                        if (!*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16)
                          || (swift_bridgeObjectRetain(),
                              dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(),
                              result = swift_bridgeObjectRelease(),
                              !v1))
                        {
                          result = swift_beginAccess();
                          if (*(_QWORD *)(*(_QWORD *)(a1 + 264) + 16))
                          {
                            swift_bridgeObjectRetain();
                            dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
                            return swift_bridgeObjectRelease();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void static FlightSnippet.Flight.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  static FlightSnippet.Flight.== infix(_:_:)(a1, a2, (uint64_t)type metadata accessor for FlightSnippet.Flight, (uint64_t)closure #1 in static FlightSnippet.Flight.== infix(_:_:), a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(_QWORD);
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t, uint64_t);
  void (*v41)(uint64_t);
  uint64_t v42;

  OUTLINED_FUNCTION_18_2();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v31 = OUTLINED_FUNCTION_37_10();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_65_11();
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&a9 - v34;
  v36 = *(int *)(v26(0) + 20);
  v37 = *(_QWORD *)(v30 + v36);
  v38 = *(_QWORD *)(v28 + v36);
  if (v37 == v38
    || (swift_retain(), swift_retain(), v39 = v24(v37, v38), swift_release(), swift_release(), (v39 & 1) != 0))
  {
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
    v40(v35, v30, v31);
    v40(v20, v28, v31);
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    OUTLINED_FUNCTION_82_12();
    v41 = *(void (**)(uint64_t))(v32 + 8);
    v42 = OUTLINED_FUNCTION_6_5();
    v41(v42);
    ((void (*)(char *, uint64_t))v41)(v35, v31);
  }
  OUTLINED_FUNCTION_43_0();
}

uint64_t closure #1 in static FlightSnippet.Flight.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  _QWORD *v53;
  char v54;
  _QWORD *v55;
  char v56;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v6 = v4 == *(_QWORD *)(a2 + 16) && v5 == *(_QWORD *)(a2 + 24);
  if (v6 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_beginAccess();
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    swift_beginAccess();
    v10 = v8 == *(_QWORD *)(a2 + 32) && v9 == *(_QWORD *)(a2 + 40);
    if (v10 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_beginAccess();
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 56);
      swift_beginAccess();
      v13 = v11 == *(_QWORD *)(a2 + 48) && v12 == *(_QWORD *)(a2 + 56);
      if (v13 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_beginAccess();
        v14 = *(_QWORD *)(a1 + 64);
        v15 = *(_QWORD *)(a1 + 72);
        swift_beginAccess();
        v16 = v14 == *(_QWORD *)(a2 + 64) && v15 == *(_QWORD *)(a2 + 72);
        if (v16 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          swift_beginAccess();
          v17 = *(_QWORD *)(a1 + 80);
          v18 = *(_QWORD *)(a1 + 88);
          swift_beginAccess();
          v19 = v17 == *(_QWORD *)(a2 + 80) && v18 == *(_QWORD *)(a2 + 88);
          if (v19 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            swift_beginAccess();
            v20 = *(_QWORD *)(a1 + 96);
            v21 = *(_QWORD *)(a1 + 104);
            swift_beginAccess();
            v22 = v20 == *(_QWORD *)(a2 + 96) && v21 == *(_QWORD *)(a2 + 104);
            if (v22 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              swift_beginAccess();
              v23 = *(_QWORD *)(a1 + 112);
              v24 = *(_QWORD *)(a1 + 120);
              swift_beginAccess();
              v25 = v23 == *(_QWORD *)(a2 + 112) && v24 == *(_QWORD *)(a2 + 120);
              if (v25 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
                swift_beginAccess();
                v26 = *(_QWORD *)(a1 + 128);
                v27 = *(_QWORD *)(a1 + 136);
                swift_beginAccess();
                v28 = v26 == *(_QWORD *)(a2 + 128) && v27 == *(_QWORD *)(a2 + 136);
                if (v28 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                {
                  swift_beginAccess();
                  v29 = *(_QWORD *)(a1 + 144);
                  swift_beginAccess();
                  if (v29 == *(_QWORD *)(a2 + 144))
                  {
                    swift_beginAccess();
                    v30 = *(_QWORD *)(a1 + 152);
                    swift_beginAccess();
                    if (v30 == *(_QWORD *)(a2 + 152))
                    {
                      swift_beginAccess();
                      v31 = *(_QWORD *)(a1 + 160);
                      swift_beginAccess();
                      v32 = *(_QWORD *)(a2 + 160);
                      swift_retain();
                      swift_retain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      specialized static Array<A>.== infix(_:_:)(v31, v32);
                      v34 = v33;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v34 & 1) == 0)
                        goto LABEL_68;
                      swift_beginAccess();
                      v35 = *(_QWORD *)(a1 + 168);
                      swift_beginAccess();
                      v36 = *(_QWORD *)(a2 + 168);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      specialized static Array<A>.== infix(_:_:)(v35, v36);
                      v38 = v37;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v38 & 1) == 0)
                        goto LABEL_68;
                      swift_beginAccess();
                      v39 = *(_DWORD *)(a1 + 176);
                      swift_beginAccess();
                      if (v39 != *(_DWORD *)(a2 + 176))
                        goto LABEL_68;
                      swift_beginAccess();
                      v40 = *(_QWORD *)(a1 + 184);
                      v41 = *(_QWORD *)(a1 + 192);
                      swift_beginAccess();
                      if (v40 != *(_QWORD *)(a2 + 184) || v41 != *(_QWORD *)(a2 + 192))
                      {
                        v7 = 0;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                          goto LABEL_69;
                      }
                      swift_beginAccess();
                      v43 = *(_QWORD *)(a1 + 200);
                      v44 = *(_QWORD *)(a1 + 208);
                      swift_beginAccess();
                      if (v43 != *(_QWORD *)(a2 + 200) || v44 != *(_QWORD *)(a2 + 208))
                      {
                        v7 = 0;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                          goto LABEL_69;
                      }
                      swift_beginAccess();
                      v46 = *(_QWORD *)(a1 + 216);
                      v47 = *(_QWORD *)(a1 + 224);
                      swift_beginAccess();
                      if (v46 != *(_QWORD *)(a2 + 216) || v47 != *(_QWORD *)(a2 + 224))
                      {
                        v7 = 0;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                          goto LABEL_69;
                      }
                      swift_beginAccess();
                      v49 = *(_QWORD *)(a1 + 232);
                      swift_beginAccess();
                      if (v49 != *(_QWORD *)(a2 + 232))
                        goto LABEL_68;
                      swift_beginAccess();
                      v50 = *(_DWORD *)(a1 + 240);
                      swift_beginAccess();
                      if (v50 != *(_DWORD *)(a2 + 240))
                        goto LABEL_68;
                      swift_beginAccess();
                      v51 = *(_DWORD *)(a1 + 244);
                      swift_beginAccess();
                      if (v51 != *(_DWORD *)(a2 + 244))
                        goto LABEL_68;
                      swift_beginAccess();
                      v52 = *(_DWORD *)(a1 + 248);
                      swift_beginAccess();
                      if (v52 == *(_DWORD *)(a2 + 248)
                        && (swift_beginAccess(),
                            v53 = *(_QWORD **)(a1 + 256),
                            swift_beginAccess(),
                            specialized static Array<A>.== infix(_:_:)(v53, *(_QWORD **)(a2 + 256)),
                            (v54 & 1) != 0))
                      {
                        swift_beginAccess();
                        v55 = *(_QWORD **)(a1 + 264);
                        swift_beginAccess();
                        specialized static Array<A>.== infix(_:_:)(v55, *(_QWORD **)(a2 + 264));
                        v7 = v56;
                      }
                      else
                      {
LABEL_68:
                        v7 = 0;
                      }
LABEL_69:
                      swift_release();
                      swift_release();
                      return v7 & 1;
                    }
                  }
                  v7 = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return v7 & 1;
}

Swift::Int FlightSnippet.Flight.hashValue.getter()
{
  return FlightSnippet.hashValue.getter(type metadata accessor for FlightSnippet.Flight, &lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.Flight()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.Flight()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Flight(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(a1, a2, &one-time initialization token for _protobuf_nameMap);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.Flight()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Flight()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
  return Message.hash(into:)();
}

void *FlightSnippet.Airport.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.Airport.protoMessageName;
}

unint64_t static FlightSnippet.Airport.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_30_11(21);
}

uint64_t FlightSnippet.Airport._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Airport._protobuf_nameMap);
}

uint64_t static FlightSnippet.Airport._protobuf_nameMap.getter()
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap);
}

uint64_t FlightSnippet.Airport.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = OUTLINED_FUNCTION_69_10();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
          OUTLINED_FUNCTION_68_12();
          break;
        case 6:
        case 7:
          OUTLINED_FUNCTION_142_2();
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      result = OUTLINED_FUNCTION_104_9();
    }
  }
  return result;
}

void FlightSnippet.Airport.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_16_24();
  if (!v2 || (OUTLINED_FUNCTION_25_12(), !v1))
  {
    OUTLINED_FUNCTION_16_24();
    if (!v3 || (OUTLINED_FUNCTION_25_12(), !v1))
    {
      OUTLINED_FUNCTION_16_24();
      if (!v4 || (OUTLINED_FUNCTION_25_12(), !v1))
      {
        OUTLINED_FUNCTION_16_24();
        if (!v5 || (OUTLINED_FUNCTION_25_12(), !v1))
        {
          OUTLINED_FUNCTION_16_24();
          if (!v6 || (OUTLINED_FUNCTION_25_12(), !v1))
          {
            if (*(double *)(v0 + 80) == 0.0 || (OUTLINED_FUNCTION_125_4(), !v1))
            {
              if (*(double *)(v0 + 88) == 0.0 || (OUTLINED_FUNCTION_125_4(), !v1))
              {
                OUTLINED_FUNCTION_16_24();
                if (!v7 || (OUTLINED_FUNCTION_25_12(), !v1))
                {
                  OUTLINED_FUNCTION_16_24();
                  if (!v8 || (OUTLINED_FUNCTION_25_12(), !v1))
                  {
                    OUTLINED_FUNCTION_16_24();
                    if (!v9 || (OUTLINED_FUNCTION_25_12(), !v1))
                    {
                      OUTLINED_FUNCTION_16_24();
                      if (!v10 || (OUTLINED_FUNCTION_25_12(), !v1))
                      {
                        OUTLINED_FUNCTION_16_24();
                        if (!v11 || (OUTLINED_FUNCTION_25_12(), !v1))
                        {
                          OUTLINED_FUNCTION_16_24();
                          if (!v12 || (OUTLINED_FUNCTION_25_12(), !v1))
                          {
                            OUTLINED_FUNCTION_16_24();
                            if (!v13 || (OUTLINED_FUNCTION_25_12(), !v1))
                            {
                              OUTLINED_FUNCTION_155_2();
                              OUTLINED_FUNCTION_147_0();
                              UnknownStorage.traverse<A>(visitor:)();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  OUTLINED_FUNCTION_121_4();
}

void static FlightSnippet.Airport.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;

  OUTLINED_FUNCTION_22_16();
  v1 = v0;
  v3 = v2;
  OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_133_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_65_11();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_101_7();
  v8 = v8 && v6 == v7;
  if (v8 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 16) == *(_QWORD *)(v1 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(v1 + 24);
    if (v9 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
    {
      v10 = *(_QWORD *)(v3 + 32) == *(_QWORD *)(v1 + 32) && *(_QWORD *)(v3 + 40) == *(_QWORD *)(v1 + 40);
      if (v10 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        v11 = *(_QWORD *)(v3 + 48) == *(_QWORD *)(v1 + 48) && *(_QWORD *)(v3 + 56) == *(_QWORD *)(v1 + 56);
        if (v11 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
        {
          v12 = *(_QWORD *)(v3 + 64) == *(_QWORD *)(v1 + 64) && *(_QWORD *)(v3 + 72) == *(_QWORD *)(v1 + 72);
          if ((v12 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
            && *(double *)(v3 + 80) == *(double *)(v1 + 80)
            && *(double *)(v3 + 88) == *(double *)(v1 + 88))
          {
            v13 = *(_QWORD *)(v3 + 96) == *(_QWORD *)(v1 + 96) && *(_QWORD *)(v3 + 104) == *(_QWORD *)(v1 + 104);
            if (v13 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
            {
              v14 = *(_QWORD *)(v3 + 112) == *(_QWORD *)(v1 + 112) && *(_QWORD *)(v3 + 120) == *(_QWORD *)(v1 + 120);
              if (v14 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
              {
                v15 = *(_QWORD *)(v3 + 128) == *(_QWORD *)(v1 + 128) && *(_QWORD *)(v3 + 136) == *(_QWORD *)(v1 + 136);
                if (v15 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                {
                  v16 = *(_QWORD *)(v3 + 144) == *(_QWORD *)(v1 + 144) && *(_QWORD *)(v3 + 152) == *(_QWORD *)(v1 + 152);
                  if (v16 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                  {
                    v17 = *(_QWORD *)(v3 + 160) == *(_QWORD *)(v1 + 160)
                       && *(_QWORD *)(v3 + 168) == *(_QWORD *)(v1 + 168);
                    if (v17 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                    {
                      v18 = *(_QWORD *)(v3 + 176) == *(_QWORD *)(v1 + 176)
                         && *(_QWORD *)(v3 + 184) == *(_QWORD *)(v1 + 184);
                      if (v18 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                      {
                        v19 = *(_QWORD *)(v3 + 192) == *(_QWORD *)(v1 + 192)
                           && *(_QWORD *)(v3 + 200) == *(_QWORD *)(v1 + 200);
                        if (v19 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                        {
                          v20 = type metadata accessor for FlightSnippet.Airport(0);
                          OUTLINED_FUNCTION_111_5(*(int *)(v20 + 72));
                          OUTLINED_FUNCTION_127_2(*(int *)(v20 + 72));
                          lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
                          OUTLINED_FUNCTION_82_12();
                          OUTLINED_FUNCTION_110_5();
                          OUTLINED_FUNCTION_161_2();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  OUTLINED_FUNCTION_12_0();
}

Swift::Int FlightSnippet.Airport.hashValue.getter()
{
  return FlightSnippet.hashValue.getter(type metadata accessor for FlightSnippet.Airport, &lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.Airport()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance FlightSnippet.Airport@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 72);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance FlightSnippet.Airport(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 72);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance FlightSnippet.Airport())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.Airport()
{
  return FlightSnippet.Airport.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.Airport()
{
  FlightSnippet.Airport.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.Airport()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Airport(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(a1, a2, &one-time initialization token for _protobuf_nameMap);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.Airport()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Airport()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
  return Message.hash(into:)();
}

void *FlightSnippet.FlightInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.FlightInfo.protoMessageName;
}

unint64_t static FlightSnippet.FlightInfo.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_30_11(24);
}

uint64_t FlightSnippet.FlightInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.FlightInfo._protobuf_nameMap);
}

uint64_t static FlightSnippet.FlightInfo._protobuf_nameMap.getter()
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap);
}

uint64_t FlightSnippet.FlightInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = OUTLINED_FUNCTION_69_10();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          OUTLINED_FUNCTION_68_12();
          break;
        default:
          break;
      }
      result = OUTLINED_FUNCTION_104_9();
    }
  }
  return result;
}

void FlightSnippet.FlightInfo.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_16_24();
  if (!v1 || (OUTLINED_FUNCTION_33_12(), !v0))
  {
    OUTLINED_FUNCTION_16_24();
    if (!v2 || (OUTLINED_FUNCTION_33_12(), !v0))
    {
      OUTLINED_FUNCTION_16_24();
      if (!v3 || (OUTLINED_FUNCTION_33_12(), !v0))
      {
        OUTLINED_FUNCTION_16_24();
        if (!v4 || (OUTLINED_FUNCTION_33_12(), !v0))
        {
          type metadata accessor for FlightSnippet.FlightInfo(0);
          OUTLINED_FUNCTION_147_0();
          UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  OUTLINED_FUNCTION_121_4();
}

void static FlightSnippet.FlightInfo.== infix(_:_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;

  OUTLINED_FUNCTION_22_16();
  v1 = v0;
  v3 = v2;
  OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_133_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_65_11();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_101_7();
  v8 = v8 && v6 == v7;
  if (v8 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
  {
    v9 = v3[2] == v1[2] && v3[3] == v1[3];
    if (v9 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
    {
      v10 = v3[4] == v1[4] && v3[5] == v1[5];
      if (v10 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        v11 = v3[6] == v1[6] && v3[7] == v1[7];
        if (v11 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
        {
          v12 = type metadata accessor for FlightSnippet.FlightInfo(0);
          OUTLINED_FUNCTION_111_5(*(int *)(v12 + 32));
          OUTLINED_FUNCTION_127_2(*(int *)(v12 + 32));
          lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          OUTLINED_FUNCTION_82_12();
          OUTLINED_FUNCTION_110_5();
          OUTLINED_FUNCTION_161_2();
        }
      }
    }
  }
  OUTLINED_FUNCTION_12_0();
}

Swift::Int FlightSnippet.FlightInfo.hashValue.getter()
{
  return FlightSnippet.hashValue.getter(type metadata accessor for FlightSnippet.FlightInfo, &lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.FlightInfo()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance FlightSnippet.FlightInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance FlightSnippet.FlightInfo())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.FlightInfo()
{
  return FlightSnippet.FlightInfo.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.FlightInfo()
{
  FlightSnippet.FlightInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.FlightInfo()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(a1, a2, &one-time initialization token for _protobuf_nameMap);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.FlightInfo()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.FlightInfo()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
  return Message.hash(into:)();
}

void *FlightSnippet.Leg.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.Leg.protoMessageName;
}

unint64_t static FlightSnippet.Leg.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_30_11(17);
}

uint64_t FlightSnippet.Leg._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Leg._protobuf_nameMap);
}

uint64_t FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_156_1();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static FlightSnippet.Leg._protobuf_nameMap.getter()
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap);
}

uint64_t static FlightSnippet._protobuf_nameMap.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  if (*a1 != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_156_1();
  v2 = OUTLINED_FUNCTION_31_10(v1);
  return OUTLINED_FUNCTION_20_10(v2, v3, v4, v5);
}

uint64_t one-time initialization function for defaultInstance()
{
  uint64_t result;

  type metadata accessor for FlightSnippet.Leg._StorageClass(0);
  swift_allocObject();
  result = FlightSnippet.Leg._StorageClass.init()();
  static FlightSnippet.Leg._StorageClass.defaultInstance = result;
  return result;
}

uint64_t FlightSnippet.Leg._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_WORD *)(v0 + 25) = 0;
  *(_BYTE *)(v0 + 27) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0xE000000000000000;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xE000000000000000;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  v1 = v0
     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  *(_BYTE *)(v0 + 112) = 0;
  v2 = type metadata accessor for FlightSnippet.Airport(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime) = 0;
  v3 = (_QWORD *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway) = 0;
  __swift_storeEnumTagSinglePayload(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport, 1, 1, v2);
  v5 = (_QWORD *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt) = 0;
  __swift_storeEnumTagSinglePayload(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport, 1, 1, v2);
  v6 = (_QWORD *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime) = 0;
  return v0;
}

uint64_t FlightSnippet.Leg._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _BYTE *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  MEMORY[0x24BDAC7A8](v3);
  v84 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 25) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_BYTE *)(v1 + 27) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  v77 = (_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 56) = 0;
  v76 = (_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 48) = 0;
  v74 = v1 + 26;
  v75 = (_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 40) = 0xE000000000000000;
  *(_QWORD *)(v1 + 72) = 0xE000000000000000;
  *(_QWORD *)(v1 + 80) = 0;
  v78 = (_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  *(_BYTE *)(v1 + 112) = 0;
  v81 = (_BYTE *)(v1 + 112);
  *(_QWORD *)(v1 + 104) = 0;
  v80 = (_QWORD *)(v1 + 104);
  v5 = v1
     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  v82 = v1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  *(_QWORD *)(v1 + 96) = 0;
  v79 = (_QWORD *)(v1 + 96);
  v6 = type metadata accessor for FlightSnippet.Airport(0);
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v6);
  v83 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime) = 0;
  v85 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime) = 0;
  v7 = (_QWORD *)(v1
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  v86 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = (_QWORD *)(v1
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  v87 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  *v8 = 0;
  v8[1] = 0xE000000000000000;
  v88 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival) = 0;
  v89 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway) = 0;
  v90 = v1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
  __swift_storeEnumTagSinglePayload(v1+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport, 1, 1, v6);
  v9 = (_QWORD *)(v1
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  v91 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  v92 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt) = 0;
  v93 = v1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
  __swift_storeEnumTagSinglePayload(v1+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport, 1, 1, v6);
  v10 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  v94 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  v95 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime) = 0;
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 16);
  LOBYTE(v6) = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v11;
  *(_BYTE *)(v1 + 24) = v6;
  swift_beginAccess();
  v12 = *(_BYTE *)(a1 + 25);
  swift_beginAccess();
  *(_BYTE *)(v1 + 25) = v12;
  swift_beginAccess();
  v13 = *(_BYTE *)(a1 + 26);
  swift_beginAccess();
  *(_BYTE *)(v1 + 26) = v13;
  swift_beginAccess();
  v14 = *(_BYTE *)(a1 + 27);
  swift_beginAccess();
  *(_BYTE *)(v1 + 27) = v14;
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v16;
  *(_QWORD *)(v1 + 40) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 48);
  v18 = v75;
  swift_beginAccess();
  *v18 = v17;
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 56);
  v20 = v76;
  swift_beginAccess();
  *v20 = v19;
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v23 = v77;
  swift_beginAccess();
  *v23 = v22;
  *(_QWORD *)(v1 + 72) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v25 = *(_QWORD *)(a1 + 80);
  v24 = *(_QWORD *)(a1 + 88);
  v26 = v78;
  swift_beginAccess();
  *v26 = v25;
  *(_QWORD *)(v1 + 88) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v27 = *(_QWORD *)(a1 + 96);
  v28 = v79;
  swift_beginAccess();
  *v28 = v27;
  swift_beginAccess();
  v29 = *(_QWORD *)(a1 + 104);
  v30 = v80;
  swift_beginAccess();
  *v30 = v29;
  swift_beginAccess();
  LOBYTE(v29) = *(_BYTE *)(a1 + 112);
  v31 = v81;
  swift_beginAccess();
  *v31 = v29;
  v32 = a1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  swift_beginAccess();
  v33 = v84;
  outlined init with copy of Date?(v32, v84, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  v34 = v82;
  swift_beginAccess();
  outlined assign with take of FlightSnippet.Airport?(v33, v34);
  swift_endAccess();
  v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime);
  swift_beginAccess();
  v36 = *v35;
  v37 = v83;
  swift_beginAccess();
  *v37 = v36;
  v38 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime);
  swift_beginAccess();
  v39 = *v38;
  v40 = v85;
  swift_beginAccess();
  *v40 = v39;
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  swift_beginAccess();
  v43 = *v41;
  v42 = v41[1];
  v44 = v86;
  swift_beginAccess();
  *v44 = v43;
  v44[1] = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  swift_beginAccess();
  v47 = *v45;
  v46 = v45[1];
  v48 = v87;
  swift_beginAccess();
  *v48 = v47;
  v48[1] = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival);
  swift_beginAccess();
  v50 = *v49;
  v51 = v88;
  swift_beginAccess();
  *v51 = v50;
  v52 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway);
  swift_beginAccess();
  v53 = *v52;
  v54 = v89;
  swift_beginAccess();
  *v54 = v53;
  v55 = a1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
  swift_beginAccess();
  outlined init with copy of Date?(v55, v33, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  v56 = v90;
  swift_beginAccess();
  outlined assign with take of FlightSnippet.Airport?(v33, v56);
  swift_endAccess();
  v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  swift_beginAccess();
  v59 = *v57;
  v58 = v57[1];
  v60 = v91;
  swift_beginAccess();
  *v60 = v59;
  v60[1] = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
  swift_beginAccess();
  v62 = *v61;
  v63 = v92;
  swift_beginAccess();
  *v63 = v62;
  v64 = a1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
  swift_beginAccess();
  outlined init with copy of Date?(v64, v33, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  v65 = v93;
  swift_beginAccess();
  outlined assign with take of FlightSnippet.Airport?(v33, v65);
  swift_endAccess();
  v66 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  swift_beginAccess();
  v68 = *v66;
  v67 = v66[1];
  v69 = v94;
  swift_beginAccess();
  *v69 = v68;
  v69[1] = v67;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime);
  swift_beginAccess();
  v71 = *v70;
  swift_release();
  v72 = v95;
  swift_beginAccess();
  *v72 = v71;
  return v1;
}

void outlined init with take of FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_76(a1, a2, a3);
  OUTLINED_FUNCTION_85_8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  OUTLINED_FUNCTION_5();
}

uint64_t outlined init with take of FlightSnippet.Airport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of FlightSnippet.Airport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t FlightSnippet.Leg._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MobileSMSDocument?(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MobileSMSDocument?(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  swift_bridgeObjectRelease();
  outlined destroy of MobileSMSDocument?(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FlightSnippet.Leg._StorageClass.__deallocating_deinit()
{
  FlightSnippet.Leg._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t FlightSnippet.Leg.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))FlightSnippet.Leg._uniqueStorage(), (void (*)(_QWORD))type metadata accessor for FlightSnippet.Leg, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:));
}

uint64_t FlightSnippet.Flight.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(_QWORD), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;

  a4();
  swift_release();
  a5(0);
  OUTLINED_FUNCTION_75_10();
  v11 = OUTLINED_FUNCTION_75();
  a6(v11, a1, a2, a3);
  return swift_release();
}

void closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          closure #1 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #2 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #4 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #5 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 13:
        case 20:
        case 23:
          closure #13 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 14:
        case 15:
        case 18:
        case 19:
        case 22:
        case 25:
          closure #14 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        case 16:
        case 17:
        case 21:
        case 24:
          closure #16 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
}

uint64_t closure #1 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type FlightSnippet.Status and conformance FlightSnippet.Status();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

void closure #2 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  OUTLINED_FUNCTION_95_9();
  OUTLINED_FUNCTION_47_14();
  OUTLINED_FUNCTION_68_12();
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_55_6();
}

uint64_t closure #6 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

void closure #4 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  OUTLINED_FUNCTION_95_9();
  OUTLINED_FUNCTION_47_14();
  OUTLINED_FUNCTION_68_12();
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_55_6();
}

void closure #5 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  OUTLINED_FUNCTION_95_9();
  OUTLINED_FUNCTION_47_14();
  OUTLINED_FUNCTION_68_12();
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_55_6();
}

uint64_t closure #10 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  OUTLINED_FUNCTION_47_14();
  OUTLINED_FUNCTION_155_2();
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  return OUTLINED_FUNCTION_77_10();
}

void closure #16 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  OUTLINED_FUNCTION_47_14();
  OUTLINED_FUNCTION_68_12();
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_55_6();
}

void closure #14 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  OUTLINED_FUNCTION_47_14();
  OUTLINED_FUNCTION_143_2();
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_55_6();
}

uint64_t FlightSnippet.Leg.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for FlightSnippet.Leg, (void (*)(void))closure #1 in FlightSnippet.Leg.traverse<A>(visitor:));
}

uint64_t FlightSnippet.Flight.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(void))
{
  uint64_t v5;
  uint64_t result;

  a4(0);
  swift_retain();
  OUTLINED_FUNCTION_142_2();
  a5();
  result = swift_release();
  if (!v5)
    return OUTLINED_FUNCTION_128_4();
  return result;
}

void closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  swift_beginAccess();
  if (!FlightSnippet.Status.rawValue.getter(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24))
    || (lazy protocol witness table accessor for type FlightSnippet.Status and conformance FlightSnippet.Status(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    swift_beginAccess();
    if (*(_BYTE *)(a1 + 25) != 1 || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      swift_beginAccess();
      if (*(_BYTE *)(a1 + 26) != 1 || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
      {
        swift_beginAccess();
        if (*(_BYTE *)(a1 + 27) != 1 || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
        {
          swift_beginAccess();
          v9 = *(_QWORD *)(a1 + 40);
          v10 = HIBYTE(v9) & 0xF;
          if ((v9 & 0x2000000000000000) == 0)
            v10 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
          if (v10)
          {
            swift_bridgeObjectRetain();
            dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
            if (v4)
            {
LABEL_13:
              swift_bridgeObjectRelease();
              return;
            }
            swift_bridgeObjectRelease();
          }
          swift_beginAccess();
          if (!*(_QWORD *)(a1 + 48) || (dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
          {
            swift_beginAccess();
            if (!*(_QWORD *)(a1 + 56) || (dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
            {
              swift_beginAccess();
              v11 = *(_QWORD *)(a1 + 72);
              v12 = HIBYTE(v11) & 0xF;
              if ((v11 & 0x2000000000000000) == 0)
                v12 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
              if (v12)
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                if (v4)
                  goto LABEL_13;
                swift_bridgeObjectRelease();
              }
              swift_beginAccess();
              v13 = *(_QWORD *)(a1 + 88);
              v14 = HIBYTE(v13) & 0xF;
              if ((v13 & 0x2000000000000000) == 0)
                v14 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFLL;
              if (v14)
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                if (v4)
                  goto LABEL_13;
                swift_bridgeObjectRelease();
              }
              swift_beginAccess();
              if (!*(_QWORD *)(a1 + 96)
                || (dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
              {
                swift_beginAccess();
                if (!*(_QWORD *)(a1 + 104)
                  || (dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
                {
                  swift_beginAccess();
                  if (*(_BYTE *)(a1 + 112) != 1
                    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
                  {
                    closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport);
                    if (!v4)
                    {
                      v15 = (_QWORD *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime);
                      swift_beginAccess();
                      if (*v15)
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      v16 = (_QWORD *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime);
                      swift_beginAccess();
                      if (*v16)
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      v17 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
                      swift_beginAccess();
                      v18 = *v17;
                      v19 = v17[1];
                      v20 = HIBYTE(v19) & 0xF;
                      if ((v19 & 0x2000000000000000) == 0)
                        v20 = v18 & 0xFFFFFFFFFFFFLL;
                      if (v20)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      v21 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
                      swift_beginAccess();
                      v22 = *v21;
                      v23 = v21[1];
                      v24 = HIBYTE(v23) & 0xF;
                      if ((v23 & 0x2000000000000000) == 0)
                        v24 = v22 & 0xFFFFFFFFFFFFLL;
                      if (v24)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      v25 = (_QWORD *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival);
                      swift_beginAccess();
                      if (*v25)
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      v26 = (_QWORD *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway);
                      swift_beginAccess();
                      if (*v26)
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport);
                      v27 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
                      swift_beginAccess();
                      v28 = *v27;
                      v29 = v27[1];
                      v30 = HIBYTE(v29) & 0xF;
                      if ((v29 & 0x2000000000000000) == 0)
                        v30 = v28 & 0xFFFFFFFFFFFFLL;
                      if (v30)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      v31 = (_QWORD *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
                      swift_beginAccess();
                      if (*v31)
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport);
                      v32 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
                      swift_beginAccess();
                      v33 = *v32;
                      v34 = v32[1];
                      v35 = HIBYTE(v34) & 0xF;
                      if ((v34 & 0x2000000000000000) == 0)
                        v35 = v33 & 0xFFFFFFFFFFFFLL;
                      if (v35)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      v36 = (_QWORD *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime);
                      swift_beginAccess();
                      if (*v36)
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_62_1();
  v10 = OUTLINED_FUNCTION_155_2();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_79_4();
  v12 = a1 + *a5;
  swift_beginAccess();
  outlined init with copy of Date?(v12, v6, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  if (__swift_getEnumTagSinglePayload(v6, 1, v10) == 1)
  {
    outlined destroy of MobileSMSDocument?(v6, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    outlined init with take of FlightSnippet.Flight(v6, v5, type metadata accessor for FlightSnippet.Airport);
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    _s10OmniSearch0B6ResultVWOhTm_1(v5, type metadata accessor for FlightSnippet.Airport);
  }
  OUTLINED_FUNCTION_1_1();
}

void static FlightSnippet.Leg.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  static FlightSnippet.Flight.== infix(_:_:)(a1, a2, (uint64_t)type metadata accessor for FlightSnippet.Leg, (uint64_t)closure #1 in static FlightSnippet.Leg.== infix(_:_:), a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void closure #1 in static FlightSnippet.Leg.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  BOOL v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  BOOL v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  OUTLINED_FUNCTION_18_2();
  v2 = v1;
  v4 = v3;
  v109 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_2_2();
  v107 = v7 - v6;
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FlightSnippet.Airport?, FlightSnippet.Airport?));
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_112_3();
  MEMORY[0x24BDAC7A8](v9);
  v106 = (uint64_t)&v101 - v10;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v101 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_18_1();
  v104 = v15;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v16);
  v105 = (uint64_t)&v101 - v17;
  OUTLINED_FUNCTION_17_1();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v101 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v101 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v101 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v101 - v28;
  OUTLINED_FUNCTION_1_4();
  v30 = *(_QWORD *)(v4 + 16);
  OUTLINED_FUNCTION_1_4();
  v31 = *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v2 + 24) == 1)
    __asm { BR              X10 }
  if (v30 == v31)
  {
    OUTLINED_FUNCTION_1_4();
    v32 = *(unsigned __int8 *)(v4 + 25);
    OUTLINED_FUNCTION_1_4();
    if (v32 == *(unsigned __int8 *)(v2 + 25))
    {
      OUTLINED_FUNCTION_1_4();
      v33 = *(unsigned __int8 *)(v4 + 26);
      OUTLINED_FUNCTION_1_4();
      if (v33 == *(unsigned __int8 *)(v2 + 26))
      {
        OUTLINED_FUNCTION_1_4();
        v34 = *(unsigned __int8 *)(v4 + 27);
        OUTLINED_FUNCTION_1_4();
        if (v34 == *(unsigned __int8 *)(v2 + 27))
        {
          v103 = v0;
          OUTLINED_FUNCTION_1_4();
          v35 = *(_QWORD *)(v4 + 32);
          v36 = *(_QWORD *)(v4 + 40);
          OUTLINED_FUNCTION_1_4();
          v37 = v35 == *(_QWORD *)(v2 + 32) && v36 == *(_QWORD *)(v2 + 40);
          if (v37 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
          {
            OUTLINED_FUNCTION_1_4();
            v38 = *(_QWORD *)(v4 + 48);
            OUTLINED_FUNCTION_1_4();
            if (v38 == *(_QWORD *)(v2 + 48))
            {
              OUTLINED_FUNCTION_1_4();
              v39 = *(_QWORD *)(v4 + 56);
              OUTLINED_FUNCTION_1_4();
              if (v39 == *(_QWORD *)(v2 + 56))
              {
                OUTLINED_FUNCTION_1_4();
                v40 = *(_QWORD *)(v4 + 64);
                v41 = *(_QWORD *)(v4 + 72);
                OUTLINED_FUNCTION_1_4();
                v42 = v40 == *(_QWORD *)(v2 + 64) && v41 == *(_QWORD *)(v2 + 72);
                if (v42 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                {
                  OUTLINED_FUNCTION_1_4();
                  v43 = *(_QWORD *)(v4 + 80);
                  v44 = *(_QWORD *)(v4 + 88);
                  OUTLINED_FUNCTION_1_4();
                  v45 = v43 == *(_QWORD *)(v2 + 80) && v44 == *(_QWORD *)(v2 + 88);
                  if (v45 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                  {
                    OUTLINED_FUNCTION_1_4();
                    v46 = *(_QWORD *)(v4 + 96);
                    OUTLINED_FUNCTION_1_4();
                    if (v46 == *(_QWORD *)(v2 + 96))
                    {
                      OUTLINED_FUNCTION_1_4();
                      v47 = *(_QWORD *)(v4 + 104);
                      OUTLINED_FUNCTION_1_4();
                      if (v47 == *(_QWORD *)(v2 + 104))
                      {
                        OUTLINED_FUNCTION_1_4();
                        v48 = *(unsigned __int8 *)(v4 + 112);
                        OUTLINED_FUNCTION_1_4();
                        if (v48 == *(unsigned __int8 *)(v2 + 112))
                        {
                          v49 = v4
                              + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
                          OUTLINED_FUNCTION_1_4();
                          outlined init with copy of Date?(v49, (uint64_t)v29, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                          v50 = v2
                              + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
                          OUTLINED_FUNCTION_1_4();
                          v51 = (uint64_t)&v13[*(int *)(v108 + 48)];
                          outlined init with copy of Date?((uint64_t)v29, (uint64_t)v13, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                          v102 = v51;
                          outlined init with copy of Date?(v50, v51, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                          v52 = v109;
                          OUTLINED_FUNCTION_22_2((uint64_t)v13, 1, v109);
                          if (v37)
                          {
                            OUTLINED_FUNCTION_10_8();
                            OUTLINED_FUNCTION_75();
                            outlined destroy of MobileSMSDocument?((uint64_t)v29, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            v53 = OUTLINED_FUNCTION_22_2(v102, 1, v52);
                            if (v37)
                            {
                              OUTLINED_FUNCTION_145_2(v53, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                              goto LABEL_39;
                            }
                          }
                          else
                          {
                            outlined init with copy of Date?((uint64_t)v13, (uint64_t)v27, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            v54 = v102;
                            OUTLINED_FUNCTION_22_2(v102, 1, v52);
                            if (!v55)
                            {
                              v57 = v107;
                              outlined init with take of FlightSnippet.Flight(v54, v107, type metadata accessor for FlightSnippet.Airport);
                              OUTLINED_FUNCTION_10_8();
                              OUTLINED_FUNCTION_75();
                              static FlightSnippet.Airport.== infix(_:_:)();
                              v59 = v58;
                              _s10OmniSearch0B6ResultVWOhTm_1(v57, type metadata accessor for FlightSnippet.Airport);
                              outlined destroy of MobileSMSDocument?((uint64_t)v29, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                              _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v27, type metadata accessor for FlightSnippet.Airport);
                              OUTLINED_FUNCTION_93_6((uint64_t)v13);
                              if ((v59 & 1) == 0)
                                goto LABEL_89;
LABEL_39:
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_150_2();
                              if (!v37)
                                goto LABEL_89;
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_150_2();
                              if (!v37)
                                goto LABEL_89;
                              v60 = (uint64_t *)(v4
                                              + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
                              OUTLINED_FUNCTION_1_4();
                              v61 = *v60;
                              v62 = v60[1];
                              v63 = (_QWORD *)(v2
                                             + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
                              OUTLINED_FUNCTION_1_4();
                              v64 = v61 == *v63 && v62 == v63[1];
                              if (!v64 && (OUTLINED_FUNCTION_18_7() & 1) == 0)
                                goto LABEL_89;
                              v65 = (uint64_t *)(v4
                                              + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
                              OUTLINED_FUNCTION_1_4();
                              v66 = *v65;
                              v67 = v65[1];
                              v68 = (_QWORD *)(v2
                                             + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
                              OUTLINED_FUNCTION_1_4();
                              v69 = v66 == *v68 && v67 == v68[1];
                              if (!v69 && (OUTLINED_FUNCTION_18_7() & 1) == 0)
                                goto LABEL_89;
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_150_2();
                              if (!v37)
                                goto LABEL_89;
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_150_2();
                              if (!v37)
                                goto LABEL_89;
                              v70 = v4
                                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
                              OUTLINED_FUNCTION_1_4();
                              OUTLINED_FUNCTION_141_2(v70, (uint64_t)v24);
                              v71 = v2
                                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
                              OUTLINED_FUNCTION_1_4();
                              v72 = v106;
                              v73 = v106 + *(int *)(v108 + 48);
                              OUTLINED_FUNCTION_141_2((uint64_t)v24, v106);
                              OUTLINED_FUNCTION_141_2(v71, v73);
                              OUTLINED_FUNCTION_22_2(v72, 1, v109);
                              if (v37)
                              {
                                outlined destroy of MobileSMSDocument?((uint64_t)v24, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                OUTLINED_FUNCTION_22_2(v73, 1, v109);
                                if (v37)
                                {
                                  outlined destroy of MobileSMSDocument?(v106, &demangling cache variable for type metadata for FlightSnippet.Airport?);
LABEL_67:
                                  v78 = (uint64_t *)(v4
                                                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
                                  OUTLINED_FUNCTION_1_4();
                                  v79 = *v78;
                                  v80 = v78[1];
                                  v81 = (_QWORD *)(v2
                                                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
                                  OUTLINED_FUNCTION_1_4();
                                  v82 = v79 == *v81 && v80 == v81[1];
                                  if (!v82 && (OUTLINED_FUNCTION_18_7() & 1) == 0)
                                    goto LABEL_89;
                                  v83 = (uint64_t *)(v4
                                                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
                                  OUTLINED_FUNCTION_1_4();
                                  v84 = *v83;
                                  v85 = (_QWORD *)(v2
                                                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
                                  OUTLINED_FUNCTION_1_4();
                                  if (v84 != *v85)
                                    goto LABEL_89;
                                  v86 = v4
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
                                  OUTLINED_FUNCTION_1_4();
                                  v87 = v105;
                                  OUTLINED_FUNCTION_116_7(v86, v105);
                                  v88 = v2
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
                                  OUTLINED_FUNCTION_1_4();
                                  v89 = v103;
                                  v90 = v103 + *(int *)(v108 + 48);
                                  OUTLINED_FUNCTION_116_7(v87, v103);
                                  OUTLINED_FUNCTION_116_7(v88, v90);
                                  OUTLINED_FUNCTION_22_2(v89, 1, v109);
                                  if (v37)
                                  {
                                    outlined destroy of MobileSMSDocument?(v105, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                    OUTLINED_FUNCTION_22_2(v90, 1, v109);
                                    if (v37)
                                    {
                                      outlined destroy of MobileSMSDocument?(v103, &demangling cache variable for type metadata for FlightSnippet.Airport?);
LABEL_83:
                                      v96 = (uint64_t *)(v4
                                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
                                      OUTLINED_FUNCTION_1_4();
                                      v97 = *v96;
                                      v98 = v96[1];
                                      v99 = (_QWORD *)(v2
                                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
                                      OUTLINED_FUNCTION_1_4();
                                      v100 = v97 == *v99 && v98 == v99[1];
                                      if (v100 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
                                      {
                                        OUTLINED_FUNCTION_1_4();
                                        swift_release();
                                        OUTLINED_FUNCTION_1_4();
                                        OUTLINED_FUNCTION_50();
                                        goto LABEL_32;
                                      }
LABEL_89:
                                      swift_release();
                                      OUTLINED_FUNCTION_50();
                                      goto LABEL_32;
                                    }
                                  }
                                  else
                                  {
                                    outlined init with copy of Date?(v103, v104, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                    OUTLINED_FUNCTION_22_2(v90, 1, v109);
                                    if (!v91)
                                    {
                                      v92 = v107;
                                      outlined init with take of FlightSnippet.Flight(v90, v107, type metadata accessor for FlightSnippet.Airport);
                                      v93 = v104;
                                      static FlightSnippet.Airport.== infix(_:_:)();
                                      v95 = v94;
                                      _s10OmniSearch0B6ResultVWOhTm_1(v92, type metadata accessor for FlightSnippet.Airport);
                                      outlined destroy of MobileSMSDocument?(v105, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                      _s10OmniSearch0B6ResultVWOhTm_1(v93, type metadata accessor for FlightSnippet.Airport);
                                      outlined destroy of MobileSMSDocument?(v103, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                      if ((v95 & 1) == 0)
                                        goto LABEL_89;
                                      goto LABEL_83;
                                    }
                                    outlined destroy of MobileSMSDocument?(v105, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                    _s10OmniSearch0B6ResultVWOhTm_1(v104, type metadata accessor for FlightSnippet.Airport);
                                  }
                                  v56 = v103;
LABEL_37:
                                  outlined destroy of MobileSMSDocument?(v56, &demangling cache variable for type metadata for (FlightSnippet.Airport?, FlightSnippet.Airport?));
                                  goto LABEL_89;
                                }
                              }
                              else
                              {
                                outlined init with copy of Date?(v106, (uint64_t)v21, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                OUTLINED_FUNCTION_22_2(v73, 1, v109);
                                if (!v74)
                                {
                                  v75 = v107;
                                  outlined init with take of FlightSnippet.Flight(v73, v107, type metadata accessor for FlightSnippet.Airport);
                                  static FlightSnippet.Airport.== infix(_:_:)();
                                  v77 = v76;
                                  OUTLINED_FUNCTION_120_5(v75);
                                  OUTLINED_FUNCTION_93_6((uint64_t)v24);
                                  OUTLINED_FUNCTION_120_5((uint64_t)v21);
                                  OUTLINED_FUNCTION_93_6(v106);
                                  if ((v77 & 1) == 0)
                                    goto LABEL_89;
                                  goto LABEL_67;
                                }
                                outlined destroy of MobileSMSDocument?((uint64_t)v24, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v21, type metadata accessor for FlightSnippet.Airport);
                              }
                              v56 = v106;
                              goto LABEL_37;
                            }
                            OUTLINED_FUNCTION_10_8();
                            OUTLINED_FUNCTION_75();
                            outlined destroy of MobileSMSDocument?((uint64_t)v29, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v27, type metadata accessor for FlightSnippet.Airport);
                          }
                          v56 = (uint64_t)v13;
                          goto LABEL_37;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_32:
  OUTLINED_FUNCTION_43_0();
}

Swift::Int FlightSnippet.Leg.hashValue.getter()
{
  return FlightSnippet.hashValue.getter(type metadata accessor for FlightSnippet.Leg, &lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
}

Swift::Int FlightSnippet.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.Leg()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.Leg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Leg.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.Leg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.Leg()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Leg(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(a1, a2, &one-time initialization token for _protobuf_nameMap);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  if (*a3 != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_156_1();
  v4 = OUTLINED_FUNCTION_31_10(v3);
  return OUTLINED_FUNCTION_20_10(v4, v5, v6, v7);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.Leg()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Leg()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlightSnippet()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type [FlightSnippet.Status] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [FlightSnippet.Status] and conformance [A];
  if (!lazy protocol witness table cache variable for type [FlightSnippet.Status] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FlightSnippet.Status]);
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [FlightSnippet.Status] and conformance [A]);
  }
  return result;
}

void base witness table accessor for CustomDebugStringConvertible in FlightSnippet()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, type metadata accessor for FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
}

void base witness table accessor for Message in FlightSnippet()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, type metadata accessor for FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
}

void base witness table accessor for Hashable in FlightSnippet()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, type metadata accessor for FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
}

void base witness table accessor for Equatable in FlightSnippet()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, type metadata accessor for FlightSnippet, (uint64_t)&protocol conformance descriptor for FlightSnippet);
}

void base witness table accessor for CustomDebugStringConvertible in FlightSnippet.Flight()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
}

void base witness table accessor for Message in FlightSnippet.Flight()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
}

void base witness table accessor for Hashable in FlightSnippet.Flight()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
}

void base witness table accessor for Equatable in FlightSnippet.Flight()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, type metadata accessor for FlightSnippet.Flight, (uint64_t)&protocol conformance descriptor for FlightSnippet.Flight);
}

void base witness table accessor for CustomDebugStringConvertible in FlightSnippet.Airport()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
}

void base witness table accessor for Message in FlightSnippet.Airport()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
}

void base witness table accessor for Hashable in FlightSnippet.Airport()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
}

void base witness table accessor for Equatable in FlightSnippet.Airport()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, type metadata accessor for FlightSnippet.Airport, (uint64_t)&protocol conformance descriptor for FlightSnippet.Airport);
}

void base witness table accessor for CustomDebugStringConvertible in FlightSnippet.FlightInfo()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
}

void base witness table accessor for Message in FlightSnippet.FlightInfo()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
}

void base witness table accessor for Hashable in FlightSnippet.FlightInfo()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
}

void base witness table accessor for Equatable in FlightSnippet.FlightInfo()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, type metadata accessor for FlightSnippet.FlightInfo, (uint64_t)&protocol conformance descriptor for FlightSnippet.FlightInfo);
}

void base witness table accessor for CustomDebugStringConvertible in FlightSnippet.Leg()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
}

void base witness table accessor for Message in FlightSnippet.Leg()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
}

void base witness table accessor for Hashable in FlightSnippet.Leg()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
}

void base witness table accessor for Equatable in FlightSnippet.Leg()
{
  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, type metadata accessor for FlightSnippet.Leg, (uint64_t)&protocol conformance descriptor for FlightSnippet.Leg);
}

void sub_243290048(uint64_t a1@<X8>)
{
  FlightSnippet.flight.getter(a1);
  OUTLINED_FUNCTION_5();
}

void sub_243290064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Flight, (void (*)(char *))FlightSnippet.flight.setter);
}

void sub_243290088()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.id.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432900AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.contentHash.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432900D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.carrierIata.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432900F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.carrierIcao.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290118()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.carrierFs.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_24329013C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.carrierName.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290160()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.carrierPhoneNumber.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290184()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.flightNumber.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432901A8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.flightDepartureScheduled.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_2432901C8(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Flight.flightDepartureScheduled.setter();
  OUTLINED_FUNCTION_5();
}

void sub_2432901E4()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.flightArrivalScheduled.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290204(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Flight.flightArrivalScheduled.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290220()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.legs.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290244()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.codeShares.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290268()
{
  _DWORD *v0;
  int v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.legIndex.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290288(unsigned int *a1)
{
  OUTLINED_FUNCTION_137_4(a1);
  FlightSnippet.Flight.legIndex.setter();
  OUTLINED_FUNCTION_5();
}

void sub_2432902A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.operatorCarrierCode.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432902C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.operatorFlightNumber.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432902EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.website.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290310()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.lastUpdated.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290330(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Flight.lastUpdated.setter();
  OUTLINED_FUNCTION_5();
}

void sub_24329034C()
{
  _DWORD *v0;
  int v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.legsNotUpdated.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_24329036C(unsigned int *a1)
{
  OUTLINED_FUNCTION_137_4(a1);
  FlightSnippet.Flight.legsNotUpdated.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290388()
{
  _DWORD *v0;
  int v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.departureUtcVariance.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_2432903A8(unsigned int *a1)
{
  OUTLINED_FUNCTION_137_4(a1);
  FlightSnippet.Flight.departureUtcVariance.setter();
  OUTLINED_FUNCTION_5();
}

void sub_2432903C4()
{
  _DWORD *v0;
  int v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.totalLegs.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_2432903E4(unsigned int *a1)
{
  OUTLINED_FUNCTION_137_4(a1);
  FlightSnippet.Flight.totalLegs.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290400()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.legFlightScheduleIds.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290424()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Flight.legFlightUpdateIds.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290450()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.enRoute.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243290470(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  FlightSnippet.Leg.enRoute.setter();
  OUTLINED_FUNCTION_5();
}

void sub_24329048C()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.departureDelayed.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_2432904AC(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  FlightSnippet.Leg.departureDelayed.setter();
  OUTLINED_FUNCTION_5();
}

void sub_2432904C8()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.arrivalDelayed.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_2432904E8(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  FlightSnippet.Leg.arrivalDelayed.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290504()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.title.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290528()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.departurePublishedTime.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290548(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.departurePublishedTime.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290564()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.departureActualTime.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290584(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.departureActualTime.setter();
  OUTLINED_FUNCTION_5();
}

void sub_2432905A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.departureTerminal.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432905C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.departureGate.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_2432905E8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.departureGateClosed.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290608(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.departureGateClosed.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290624()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.departureRunway.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290644(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.departureRunway.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290660()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.isTaxiing.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243290680(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  FlightSnippet.Leg.isTaxiing.setter();
  OUTLINED_FUNCTION_5();
}

void sub_24329069C(_QWORD *a1@<X8>)
{
  FlightSnippet.Leg.departureAirport.getter(a1);
  OUTLINED_FUNCTION_5();
}

void sub_2432906B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Airport, (void (*)(char *))FlightSnippet.Leg.departureAirport.setter);
}

void sub_2432906DC()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.arrivalPublishedTime.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_2432906FC(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.arrivalPublishedTime.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290718()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.arrivalActualTime.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290738(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.arrivalActualTime.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290754()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.arrivalTerminal.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290778()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.arrivalGate.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_24329079C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.gateArrival.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_2432907BC(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.gateArrival.setter();
  OUTLINED_FUNCTION_5();
}

void sub_2432907D8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.arrivalRunway.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_2432907F8(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.arrivalRunway.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243290814(_QWORD *a1@<X8>)
{
  FlightSnippet.Leg.arrivalAirport.getter(a1);
  OUTLINED_FUNCTION_5();
}

void sub_243290830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Airport, (void (*)(char *))FlightSnippet.Leg.arrivalAirport.setter);
}

void sub_243290854()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.baggageClaim.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290878()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.updatedAt.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290898(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.updatedAt.setter();
  OUTLINED_FUNCTION_5();
}

void sub_2432908B4(_QWORD *a1@<X8>)
{
  FlightSnippet.Leg.divertedAirport.getter(a1);
  OUTLINED_FUNCTION_5();
}

void sub_2432908D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Airport, (void (*)(char *))FlightSnippet.Leg.divertedAirport.setter);
}

void sub_2432908F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.uid.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243290918()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  FlightSnippet.Leg.feedUpdateTime.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243290938(uint64_t a1)
{
  OUTLINED_FUNCTION_72_8(a1);
  FlightSnippet.Leg.feedUpdateTime.setter();
  OUTLINED_FUNCTION_5();
}

_QWORD *initializeBufferWithCopyOfBuffer for FlightSnippet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    v8 = *(int *)(a3 + 36);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 32) = a2[4];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 40);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for FlightSnippet.Flight(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v12((uint64_t)v14, (uint64_t)v15, v11);
      *(_QWORD *)&v14[*(int *)(v16 + 20)] = *(_QWORD *)&v15[*(int *)(v16 + 20)];
      swift_retain();
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for FlightSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 40);
  v8 = type metadata accessor for FlightSnippet.Flight(0);
  result = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for FlightSnippet.Flight(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v13, (uint64_t)v14, v10);
    *(_QWORD *)&v13[*(int *)(v15 + 20)] = *(_QWORD *)&v14[*(int *)(v15 + 20)];
    swift_retain();
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int EnumTagSinglePayload;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for FlightSnippet.Flight(0);
  LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!EnumTagSinglePayload)
    {
      v11((uint64_t)v13, (uint64_t)v14, v9);
      *(_QWORD *)&v13[*(int *)(v15 + 20)] = *(_QWORD *)&v14[*(int *)(v15 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v13, type metadata accessor for FlightSnippet.Flight);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  *(_QWORD *)&v13[*(int *)(v15 + 20)] = *(_QWORD *)&v14[*(int *)(v15 + 20)];
  swift_retain();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 40);
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for FlightSnippet.Flight(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int EnumTagSinglePayload;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 40);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for FlightSnippet.Flight(0);
  LODWORD(v9) = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!EnumTagSinglePayload)
    {
      v12((uint64_t)v14, (uint64_t)v15, v10);
      *(_QWORD *)&v14[*(int *)(v16 + 20)] = *(_QWORD *)&v15[*(int *)(v16 + 20)];
      swift_release();
      return a1;
    }
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v14, type metadata accessor for FlightSnippet.Flight);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  *(_QWORD *)&v14[*(int *)(v16 + 20)] = *(_QWORD *)&v15[*(int *)(v16 + 20)];
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_243291090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_46_9();
  if (v3)
  {
    OUTLINED_FUNCTION_102_2(*(_QWORD *)(v0 + 16));
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v4 = v2;
    v5 = v1;
    v6 = OUTLINED_FUNCTION_37_10();
    if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v5)
    {
      v7 = v6;
      v8 = *(int *)(v4 + 36);
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
      v8 = *(int *)(v4 + 40);
    }
    OUTLINED_FUNCTION_33_2(v0 + v8, v5, v7);
  }
}

uint64_t storeEnumTagSinglePayload for FlightSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243291110()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_28_11();
  if (v4)
  {
    *(_QWORD *)(v1 + 16) = (v0 - 1);
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v5 = v3;
    if (*(_DWORD *)(*(_QWORD *)(OUTLINED_FUNCTION_37_10() - 8) + 84) == v2)
    {
      v6 = *(int *)(v5 + 36);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
      v6 = *(int *)(v5 + 40);
    }
    v7 = OUTLINED_FUNCTION_45_10(v6);
    OUTLINED_FUNCTION_32_2(v7, v8, v9, v10);
  }
}

void type metadata completion function for FlightSnippet()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for FlightSnippet.Flight?, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Status(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Status(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for FlightSnippet.Status(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for FlightSnippet.Status(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for FlightSnippet.Status()
{
  return &type metadata for FlightSnippet.Status;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Flight()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Flight()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for FlightSnippet.Airport(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v19 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v19 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v9 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    v10 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v10;
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v11;
    v12 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v12;
    v13 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v13;
    v14 = a2[21];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_QWORD *)(a1 + 168) = v14;
    v15 = a2[23];
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_QWORD *)(a1 + 184) = v15;
    v16 = a2[25];
    v17 = *(int *)(a3 + 72);
    v23 = (uint64_t)a2 + v17;
    v22 = a1 + v17;
    *(_QWORD *)(a1 + 192) = a2[24];
    *(_QWORD *)(a1 + 200) = v16;
    v18 = type metadata accessor for UnknownStorage();
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v22, v23, v18);
  }
  return v3;
}

uint64_t destroy for FlightSnippet.Airport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 72);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for FlightSnippet.Airport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v13;
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v14;
  v15 = *(_QWORD *)(a2 + 200);
  v16 = *(int *)(a3 + 72);
  v21 = a2 + v16;
  v20 = a1 + v16;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v15;
  v17 = type metadata accessor for UnknownStorage();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v20, v21, v17);
  return a1;
}

_QWORD *assignWithCopy for FlightSnippet.Airport(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 72);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for FlightSnippet.Airport(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  v10 = *(int *)(a3 + 72);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  a1[12] = a2[12];
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for FlightSnippet.Airport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v17;
  swift_bridgeObjectRelease();
  v18 = *(int *)(a3 + 72);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Airport()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_243291A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_46_9();
  if (v3)
  {
    OUTLINED_FUNCTION_102_2(*(_QWORD *)(v0 + 8));
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v4 = v2;
    v5 = v1;
    v6 = OUTLINED_FUNCTION_37_10();
    OUTLINED_FUNCTION_33_2(v0 + *(int *)(v4 + 72), v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Airport()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243291AB8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_28_11();
  if (v3)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v4 = v2;
    OUTLINED_FUNCTION_37_10();
    v5 = OUTLINED_FUNCTION_45_10(*(int *)(v4 + 72));
    OUTLINED_FUNCTION_32_2(v5, v6, v7, v8);
  }
}

uint64_t type metadata completion function for FlightSnippet.Airport()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FlightSnippet.FlightInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    v9 = *(int *)(a3 + 32);
    v10 = (char *)a2 + v9;
    v11 = (char *)a1 + v9;
    a1[6] = a2[6];
    a1[7] = v8;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for FlightSnippet.FlightInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  v8 = *(int *)(a3 + 32);
  v9 = (char *)a2 + v8;
  v10 = (char *)a1 + v8;
  a1[6] = a2[6];
  a1[7] = v7;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  return a1;
}

_QWORD *assignWithCopy for FlightSnippet.FlightInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for FlightSnippet.FlightInfo(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for FlightSnippet.FlightInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.FlightInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_243291F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_46_9();
  if (v3)
  {
    OUTLINED_FUNCTION_102_2(*(_QWORD *)(v0 + 8));
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v4 = v2;
    v5 = v1;
    v6 = OUTLINED_FUNCTION_37_10();
    OUTLINED_FUNCTION_33_2(v0 + *(int *)(v4 + 32), v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.FlightInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_243291FC0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_28_11();
  if (v3)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v4 = v2;
    OUTLINED_FUNCTION_37_10();
    v5 = OUTLINED_FUNCTION_45_10(*(int *)(v4 + 32));
    OUTLINED_FUNCTION_32_2(v5, v6, v7, v8);
  }
}

uint64_t type metadata completion function for FlightSnippet.FlightInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void initializeBufferWithCopyOfBuffer for FlightSnippet.Flight(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  if ((*(_DWORD *)(*(_QWORD *)(a3 - 8) + 80) & 0x20000) != 0)
  {
    *a1 = *a2;
  }
  else
  {
    v6 = OUTLINED_FUNCTION_37_10();
    OUTLINED_FUNCTION_23_3(v6);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  OUTLINED_FUNCTION_12();
}

uint64_t destroy for FlightSnippet.Flight(uint64_t a1)
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_37_10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

void initializeWithCopy for FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_85_8(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  OUTLINED_FUNCTION_12();
}

void assignWithCopy for FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_85_8(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  OUTLINED_FUNCTION_12();
}

void initializeWithTake for FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_85_8(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  OUTLINED_FUNCTION_12();
}

void assignWithTake for FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_85_8(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  OUTLINED_FUNCTION_12();
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Leg()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_index_95Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_37_10();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    OUTLINED_FUNCTION_33_2(a1, a2, v6);
  }
  else
  {
    OUTLINED_FUNCTION_102_2(*(_QWORD *)(a1 + *(int *)(a3 + 20)));
    OUTLINED_FUNCTION_12();
  }
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Leg()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_96Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_37_10();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    OUTLINED_FUNCTION_32_2(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_12();
  }
}

uint64_t type metadata completion function for FlightSnippet.Flight()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for FlightSnippet.Leg._StorageClass()
{
  return type metadata accessor for FlightSnippet.Leg._StorageClass(0);
}

void type metadata completion function for FlightSnippet.Leg._StorageClass()
{
  unint64_t v0;

  type metadata accessor for SearchResult?(319, &lazy cache variable for type metadata for FlightSnippet.Airport?, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t OUTLINED_FUNCTION_4_27()
{
  type metadata accessor for FlightSnippet.Leg._StorageClass(0);
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_5_26()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_6_24()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_8_19()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_10_20()
{
  return type metadata accessor for FlightSnippet.Flight._StorageClass();
}

uint64_t OUTLINED_FUNCTION_12_21()
{
  type metadata accessor for FlightSnippet.Flight(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_13_24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 88) = v2;
  result = type metadata accessor for FlightSnippet.Flight(0);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_14_15()
{
  return type metadata accessor for FlightSnippet.Flight._StorageClass();
}

uint64_t OUTLINED_FUNCTION_17_19()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_19_18(uint64_t a1)
{
  return FlightSnippet.Flight._StorageClass.init(copying:)(a1);
}

uint64_t OUTLINED_FUNCTION_20_16(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 80) = v2;
  result = type metadata accessor for FlightSnippet.Flight(0);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_21_15()
{
  type metadata accessor for FlightSnippet.Flight(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_24_14()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_25_12()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t OUTLINED_FUNCTION_26_13()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_27_17()
{
  return swift_bridgeObjectRetain();
}

void *OUTLINED_FUNCTION_28_13()
{
  return malloc(0x60uLL);
}

void *OUTLINED_FUNCTION_29_15()
{
  return malloc(0x68uLL);
}

uint64_t OUTLINED_FUNCTION_31_16()
{
  _QWORD *v0;

  *v0 = 0;
  v0[1] = 0xE000000000000000;
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
  v0[6] = 0;
  v0[7] = 0xE000000000000000;
  v0[8] = 0;
  v0[9] = 0xE000000000000000;
  v0[10] = 0;
  v0[11] = 0;
  v0[12] = 0;
  v0[13] = 0xE000000000000000;
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  v0[16] = 0;
  v0[17] = 0xE000000000000000;
  v0[18] = 0;
  v0[19] = 0xE000000000000000;
  v0[20] = 0;
  v0[21] = 0xE000000000000000;
  v0[22] = 0;
  v0[23] = 0xE000000000000000;
  v0[24] = 0;
  v0[25] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t OUTLINED_FUNCTION_32_9()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_33_12()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t OUTLINED_FUNCTION_34_11(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 80) = v2;
  result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_37_10()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t OUTLINED_FUNCTION_38_14()
{
  return type metadata accessor for FlightSnippet.Flight(0);
}

uint64_t OUTLINED_FUNCTION_45_12()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_46_12()
{
  return type metadata accessor for FlightSnippet.Leg(0);
}

uint64_t OUTLINED_FUNCTION_47_14()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_48_9(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_49_14()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_50_12(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 88) = v2;
  result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_51_10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 72) = v2;
  result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_52_12(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 72) = v2;
  result = type metadata accessor for FlightSnippet.Flight(0);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_53_14()
{
  return type metadata accessor for FlightSnippet.Flight(0);
}

uint64_t OUTLINED_FUNCTION_54_13(uint64_t a1)
{
  return FlightSnippet.Flight._StorageClass.init(copying:)(a1);
}

uint64_t OUTLINED_FUNCTION_56_7(uint64_t a1)
{
  return FlightSnippet.Leg._StorageClass.init(copying:)(a1);
}

void *OUTLINED_FUNCTION_63_11()
{
  return malloc(0x58uLL);
}

void *OUTLINED_FUNCTION_64_8(uint64_t a1)
{
  uint64_t v1;
  size_t v2;

  *(_QWORD *)(v1 + 32) = a1;
  v2 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for FlightSnippet.Airport(0) - 8) + 64);
  return malloc(v2);
}

uint64_t OUTLINED_FUNCTION_67_12(uint64_t a1)
{
  return FlightSnippet.Leg._StorageClass.init(copying:)(a1);
}

uint64_t OUTLINED_FUNCTION_68_12()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t OUTLINED_FUNCTION_69_10()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t OUTLINED_FUNCTION_72_8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_73_8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 88) = v2;
  result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_77_10()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_81_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_82_12()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_84_9(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  return type metadata accessor for FlightSnippet.Leg(0);
}

uint64_t OUTLINED_FUNCTION_85_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void *OUTLINED_FUNCTION_86_11()
{
  size_t v0;

  return malloc(v0);
}

void OUTLINED_FUNCTION_89_13(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of FlightSnippet.Flight(v3, v4, a3);
}

void OUTLINED_FUNCTION_90_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of Date?(v1, v0, v2);
}

void *OUTLINED_FUNCTION_91_5(uint64_t a1)
{
  return malloc(*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

void OUTLINED_FUNCTION_93_6(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of MobileSMSDocument?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_94_6()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  return v0;
}

uint64_t OUTLINED_FUNCTION_100_6()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t OUTLINED_FUNCTION_101_7()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void OUTLINED_FUNCTION_102_6()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = *v0;
}

uint64_t OUTLINED_FUNCTION_104_9()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t OUTLINED_FUNCTION_105_10()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

void *OUTLINED_FUNCTION_108_8()
{
  return malloc(0x38uLL);
}

uint64_t OUTLINED_FUNCTION_110_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_111_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3 + a1, v1);
}

void OUTLINED_FUNCTION_114_7(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
}

void OUTLINED_FUNCTION_116_7(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Date?(a1, a2, v2);
}

void OUTLINED_FUNCTION_120_5(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  _s10OmniSearch0B6ResultVWOhTm_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_122_4()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_123_5(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = result;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_125_4()
{
  return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
}

void OUTLINED_FUNCTION_126_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Date?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_127_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v1, v3 + a1, v2);
}

uint64_t OUTLINED_FUNCTION_128_4()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t OUTLINED_FUNCTION_135_5(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t OUTLINED_FUNCTION_136_2(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_137_4(unsigned int *a1)
{
  return *a1;
}

uint64_t OUTLINED_FUNCTION_138_2(uint64_t a1)
{
  return FlightSnippet.Leg._StorageClass.init(copying:)(a1);
}

uint64_t OUTLINED_FUNCTION_139_2()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  result = v0[1];
  *(_QWORD *)(v1 + 72) = *v0;
  *(_QWORD *)(v1 + 80) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_140_0()
{
  uint64_t v0;
  _DWORD *v1;
  int v2;

  *v1 = v2;
  return v0;
}

void OUTLINED_FUNCTION_141_2(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Date?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_143_2()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

void OUTLINED_FUNCTION_145_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of MobileSMSDocument?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_146_4()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of FlightSnippet.Airport?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_147_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_148_3()
{
  return type metadata accessor for FlightSnippet(0);
}

uint64_t OUTLINED_FUNCTION_149_1()
{
  uint64_t v0;
  _BYTE *v1;
  char v2;

  *v1 = v2;
  return v0;
}

void OUTLINED_FUNCTION_151_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of FlightSnippet.Flight(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_152_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_153_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = v1;
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_154_1(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  outlined init with copy of Date?(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_155_2()
{
  return type metadata accessor for FlightSnippet.Airport(0);
}

uint64_t OUTLINED_FUNCTION_156_1()
{
  return type metadata accessor for _NameMap();
}

uint64_t OUTLINED_FUNCTION_157_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_158_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)(v0 + 72) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_161_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_162_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_163_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_164_1()
{
  return UnknownStorage.init()();
}

double SearchContext.latitude.getter()
{
  double result;

  OUTLINED_FUNCTION_20_17();
  OUTLINED_FUNCTION_2_5();
  return result;
}

void SearchContext.latitude.setter()
{
  OUTLINED_FUNCTION_41_11();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.latitude.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$latitude.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

double SearchContext.longitude.getter()
{
  double result;

  OUTLINED_FUNCTION_20_17();
  OUTLINED_FUNCTION_2_5();
  return result;
}

void SearchContext.longitude.setter()
{
  OUTLINED_FUNCTION_41_11();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.longitude.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$longitude.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.onScreenEntities.getter()
{
  OUTLINED_FUNCTION_20_17();
  OUTLINED_FUNCTION_2_5();
}

void key path setter for SearchContext.onScreenEntities : SearchContext()
{
  swift_bridgeObjectRetain();
  SearchContext.onScreenEntities.setter();
}

void SearchContext.onScreenEntities.setter()
{
  OUTLINED_FUNCTION_17_20();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.onScreenEntities.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$onScreenEntities.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.asrSpeechPackageData.getter()
{
  EntityProperty.wrappedValue.getter();
  OUTLINED_FUNCTION_5();
}

void key path setter for SearchContext.asrSpeechPackageData : SearchContext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of IntentFile?(a1, (uint64_t)v4);
  SearchContext.asrSpeechPackageData.setter((uint64_t)v4);
}

void SearchContext.asrSpeechPackageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_61_0();
  outlined init with copy of IntentFile?(a1, v1);
  EntityProperty.wrappedValue.setter();
  outlined destroy of IntentFile?(a1);
  OUTLINED_FUNCTION_12();
}

uint64_t outlined destroy of IntentFile?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void SearchContext.asrSpeechPackageData.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$asrSpeechPackageData.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.assistantId.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void key path setter for SearchContext.assistantId : SearchContext()
{
  swift_bridgeObjectRetain();
  SearchContext.assistantId.setter();
}

void SearchContext.assistantId.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.assistantId.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$assistantId.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.responseMode.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.responseMode.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.responseMode.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$responseMode.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.deviceRestrictionsRawValue.getter()
{
  OUTLINED_FUNCTION_20_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.deviceRestrictionsRawValue.setter()
{
  OUTLINED_FUNCTION_17_20();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.deviceRestrictionsRawValue.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$deviceRestrictionsRawValue.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.isEyesFree.getter()
{
  OUTLINED_FUNCTION_22_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isEyesFree.setter()
{
  OUTLINED_FUNCTION_12_22();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isEyesFree.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$isEyesFree.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.isMultiUser.getter()
{
  OUTLINED_FUNCTION_22_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isMultiUser.setter()
{
  OUTLINED_FUNCTION_12_22();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isMultiUser.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$isMultiUser.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.isVoiceTriggerEnabled.getter()
{
  OUTLINED_FUNCTION_22_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isVoiceTriggerEnabled.setter()
{
  OUTLINED_FUNCTION_12_22();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isVoiceTriggerEnabled.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$isVoiceTriggerEnabled.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.isTextToSpeechEnabled.getter()
{
  OUTLINED_FUNCTION_22_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isTextToSpeechEnabled.setter()
{
  OUTLINED_FUNCTION_12_22();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isTextToSpeechEnabled.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$isTextToSpeechEnabled.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.isTriggerlessFollowup.getter()
{
  OUTLINED_FUNCTION_22_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isTriggerlessFollowup.setter()
{
  OUTLINED_FUNCTION_12_22();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isTriggerlessFollowup.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$isTriggerlessFollowup.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.inputOriginName.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.inputOriginName.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.inputOriginName.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$inputOriginName.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.bargeInModes.getter()
{
  OUTLINED_FUNCTION_20_17();
  OUTLINED_FUNCTION_2_5();
}

void key path setter for SearchContext.bargeInModes : SearchContext()
{
  swift_bridgeObjectRetain();
  SearchContext.bargeInModes.setter();
}

void SearchContext.bargeInModes.setter()
{
  OUTLINED_FUNCTION_17_20();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.bargeInModes.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$bargeInModes.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.isOnlyUserInHome.getter()
{
  OUTLINED_FUNCTION_22_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isOnlyUserInHome.setter()
{
  OUTLINED_FUNCTION_12_22();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.isOnlyUserInHome.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$isOnlyUserInHome.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.sharedUserId.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.sharedUserId.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.sharedUserId.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$sharedUserId.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.userIdentityClassificationValue.getter()
{
  OUTLINED_FUNCTION_20_17();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.userIdentityClassificationValue.setter()
{
  OUTLINED_FUNCTION_17_20();
  OUTLINED_FUNCTION_2_5();
}

void SearchContext.userIdentityClassificationValue.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchContext.$userIdentityClassificationValue.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchContext.init()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[35];

  v8[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  OUTLINED_FUNCTION_15();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v8[5] = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v8[4] = (char *)v8 - v5;
  type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_61_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Double>);
  OUTLINED_FUNCTION_10_4();
  v8[19] = MEMORY[0x2494F42E0](v1);
  swift_retain();
  OUTLINED_FUNCTION_29_16();
  v8[18] = MEMORY[0x2494F42E0](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[EntityMatch]>);
  OUTLINED_FUNCTION_15_5();
  OUTLINED_FUNCTION_17_3();
  v7 = lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  v8[10] = MEMORY[0x2494F42A4](v1, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  OUTLINED_FUNCTION_44_15();
  OUTLINED_FUNCTION_10_4();
  v8[9] = MEMORY[0x2494F42B0](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  OUTLINED_FUNCTION_44_15();
  LocalizedStringResource.init(stringLiteral:)();
  v8[16] = MEMORY[0x2494F42C8](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String?>);
  swift_retain();
  OUTLINED_FUNCTION_10_4();
  OUTLINED_FUNCTION_23_20();
}

void sub_243293A18(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Int>);
  OUTLINED_FUNCTION_15_5();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_33_13();
}

void sub_243293A48(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Bool>);
  OUTLINED_FUNCTION_15_5();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_34_12();
}

void sub_243293A8C(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_15_20(a1, v1 - 96);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_30_16();
}

void sub_243293ABC(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_15_20(a1, v1 - 48);
  OUTLINED_FUNCTION_13_25();
  OUTLINED_FUNCTION_30_16();
}

void sub_243293AD4(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_15_20(a1, v1 - 32);
  OUTLINED_FUNCTION_13_25();
  OUTLINED_FUNCTION_30_16();
}

void sub_243293AEC(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_15_20(a1, v1 - 56);
  OUTLINED_FUNCTION_13_25();
  OUTLINED_FUNCTION_30_16();
}

void sub_243293B04(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_15_20(a1, v1 - 24);
  OUTLINED_FUNCTION_17_3();
  OUTLINED_FUNCTION_23_20();
}

void sub_243293B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]>);
  *(_QWORD *)(v2 - 344) = a1;
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v4 = MEMORY[0x2494F42C8](v1);
  OUTLINED_FUNCTION_15_20(v4, v2 - 80);
  OUTLINED_FUNCTION_10_4();
  OUTLINED_FUNCTION_34_12();
}

void sub_243293B94(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_15_20(a1, v1 - 144);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_23_20();
}

void sub_243293BC8(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_15_20(a1, v1 - 136);
  OUTLINED_FUNCTION_10_4();
  OUTLINED_FUNCTION_33_13();
}

uint64_t sub_243293BE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v5 - 384) = a1;
  v6 = *(_QWORD *)(v5 - 256);
  *(_QWORD *)(v5 - 224) = *(_QWORD *)(v5 - 248);
  *(_QWORD *)(v5 - 216) = v6;
  v7 = *(_QWORD *)(v5 - 328);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v5 - 320);
  *(_QWORD *)(v5 - 200) = v7;
  v8 = *(_QWORD *)(v5 - 264);
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 272);
  *(_QWORD *)(v5 - 184) = v8;
  v9 = *(_QWORD *)(v5 - 352);
  *(_QWORD *)(v5 - 176) = *(_QWORD *)(v5 - 296);
  *(_QWORD *)(v5 - 168) = v9;
  v10 = *(_QWORD *)(v5 - 288);
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(v5 - 304);
  *(_QWORD *)(v5 - 152) = v10;
  v11 = *(_QWORD *)(v5 - 280);
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v5 - 312);
  *(_QWORD *)(v5 - 136) = v11;
  *(_QWORD *)(v5 - 128) = v4;
  *(_QWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 96) = a1;
  *(_QWORD *)(v5 - 240) = 0;
  swift_retain();
  OUTLINED_FUNCTION_6_25();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_QWORD *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_6_25();
  OUTLINED_FUNCTION_36_15();
  OUTLINED_FUNCTION_5_27();
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 - 240) = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_6_25();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  v13 = type metadata accessor for IntentFile();
  v14 = *(_QWORD *)(v5 - 368);
  OUTLINED_FUNCTION_49(v14, v15, v16, v13);
  outlined init with copy of IntentFile?(v14, *(_QWORD *)(v5 - 360));
  OUTLINED_FUNCTION_6_25();
  EntityProperty.wrappedValue.setter();
  outlined destroy of IntentFile?(v14);
  OUTLINED_FUNCTION_5_27();
  *(_QWORD *)(v5 - 240) = 0;
  *(_QWORD *)(v5 - 232) = 0xE000000000000000;
  OUTLINED_FUNCTION_6_25();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_QWORD *)(v5 - 240) = 0;
  *(_QWORD *)(v5 - 232) = 0;
  OUTLINED_FUNCTION_6_25();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_QWORD *)(v5 - 240) = 1;
  OUTLINED_FUNCTION_6_25();
  v17 = *(_QWORD *)(v5 - 296);
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_BYTE *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_6_25();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_BYTE *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_6_25();
  v18 = *(_QWORD *)(v5 - 304);
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_BYTE *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_6_25();
  OUTLINED_FUNCTION_38_15();
  OUTLINED_FUNCTION_5_27();
  *(_BYTE *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_6_25();
  v19 = *(_QWORD *)(v5 - 312);
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_BYTE *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_6_25();
  OUTLINED_FUNCTION_38_15();
  OUTLINED_FUNCTION_5_27();
  *(_BYTE *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_6_25();
  v20 = *(_QWORD *)(v5 - 400);
  OUTLINED_FUNCTION_36_15();
  OUTLINED_FUNCTION_5_27();
  *(_QWORD *)(v5 - 240) = 0;
  *(_QWORD *)(v5 - 232) = 0;
  OUTLINED_FUNCTION_6_25();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_QWORD *)(v5 - 240) = v12;
  OUTLINED_FUNCTION_6_25();
  v21 = *(_QWORD *)(v5 - 336);
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_5_27();
  *(_QWORD *)(v5 - 240) = 0;
  *(_QWORD *)(v5 - 232) = 0;
  OUTLINED_FUNCTION_6_25();
  OUTLINED_FUNCTION_38_15();
  OUTLINED_FUNCTION_5_27();
  OUTLINED_FUNCTION_6_25();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v22 = v17;
  swift_release();
  v23 = *(_QWORD *)(v5 - 352);
  swift_release();
  v24 = v18;
  swift_release();
  v25 = *(_QWORD *)(v5 - 288);
  swift_release();
  v26 = v19;
  swift_release();
  v27 = *(_QWORD *)(v5 - 280);
  swift_release();
  swift_release();
  swift_release();
  v28 = v20;
  swift_release();
  swift_release();
  v29 = *(_QWORD *)(v5 - 384);
  swift_release();
  *(_QWORD *)(v5 - 240) = 0;
  OUTLINED_FUNCTION_36_15();
  result = OUTLINED_FUNCTION_5_27();
  v31 = *(_QWORD **)(v5 - 376);
  v32 = *(_QWORD *)(v5 - 256);
  *v31 = *(_QWORD *)(v5 - 248);
  v31[1] = v32;
  v33 = *(_QWORD *)(v5 - 328);
  v31[2] = *(_QWORD *)(v5 - 320);
  v31[3] = v33;
  v34 = *(_QWORD *)(v5 - 264);
  v31[4] = *(_QWORD *)(v5 - 272);
  v31[5] = v34;
  v31[6] = v22;
  v31[7] = v23;
  v31[8] = v24;
  v31[9] = v25;
  v31[10] = v26;
  v31[11] = v27;
  v35 = *(_QWORD *)(v5 - 336);
  v31[12] = *(_QWORD *)(v5 - 344);
  v31[13] = v35;
  v31[14] = v28;
  v31[15] = v21;
  v31[16] = v29;
  return result;
}

uint64_t outlined retain of SearchContext(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of SearchContext(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  return static TransientAppEntity.defaultQuery.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  return UUID.init()();
}

void static SearchContext.typeDisplayRepresentation.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_28_1();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchContext.typeDisplayRepresentation);
  OUTLINED_FUNCTION_2_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
  OUTLINED_FUNCTION_51_0();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  return static AppEntity.defaultResolverSpecification.getter();
}

uint64_t SearchContext.displayRepresentation.getter()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v16;
  _BYTE v17[32];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_61_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_2_2();
  v6 = v5 - v4;
  v7 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_2_2();
  type metadata accessor for String.LocalizationValue.StringInterpolation();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_24_15(v17, v0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v10);
  outlined retain of SearchContext((uint64_t)v17);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v17);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v16);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  LocalizedStringResource.init(stringInterpolation:)();
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
  v12 = type metadata accessor for DisplayRepresentation.Image();
  OUTLINED_FUNCTION_49(v1, v13, v14, v12);
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  return InstanceDisplayRepresentable.localizedStringResource.getter();
}

void static SearchContext.typeDisplayRepresentation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_28_1();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchContext.typeDisplayRepresentation);
  OUTLINED_FUNCTION_2_6();
  v4 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
  OUTLINED_FUNCTION_51_0();
}

uint64_t (*static SearchContext.typeDisplayRepresentation.modify())()
{
  uint64_t v0;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_28_1();
  __swift_project_value_buffer(v0, (uint64_t)static SearchContext.typeDisplayRepresentation);
  OUTLINED_FUNCTION_2_6();
  return static UTType.searchToolExportedExperiences.modify;
}

id SearchContext.location.getter()
{
  const void *v0;
  void *v1;
  uint64_t v2;
  double v4;
  uint64_t v5;

  v1 = OUTLINED_FUNCTION_24_15(&v5, v0);
  OUTLINED_FUNCTION_40_9((uint64_t)v1);
  OUTLINED_FUNCTION_11_3();
  v2 = OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_39_15(v2);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFA80]), sel_initWithLatitude_longitude_, v4, v4);
}

uint64_t SearchContext.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[96];

  OUTLINED_FUNCTION_24_15(v8, v1);
  outlined retain of SearchContext((uint64_t)v8);
  OUTLINED_FUNCTION_20_17();
  outlined release of SearchContext((uint64_t)v8);
  if (v7)
    return InputOrigin.init(rawValue:)();
  v4 = type metadata accessor for InputOrigin();
  return OUTLINED_FUNCTION_49(a1, v5, v6, v4);
}

uint64_t SearchContext.deviceRestrictions.getter()
{
  const void *v0;
  void *v1;
  uint64_t v2;
  _BYTE v4[48];

  v1 = OUTLINED_FUNCTION_24_15(v4, v0);
  OUTLINED_FUNCTION_40_9((uint64_t)v1);
  v2 = OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_39_15(v2);
  return DeviceRestrictions.init(rawValue:)();
}

uint64_t SearchContext.userIdentityClassification.getter()
{
  const void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[128];

  v1 = OUTLINED_FUNCTION_24_15(v5, v0);
  OUTLINED_FUNCTION_40_9((uint64_t)v1);
  v2 = OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_39_15(v2);
  return v4;
}

uint64_t SearchContext.afSpeechPacakge.getter()
{
  return 0;
}

void associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in SearchContext()
{
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<SearchContext> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<SearchContext>, MEMORY[0x24BDB4B08]);
}

void associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchContext()
{
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<SearchContext> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<SearchContext>, MEMORY[0x24BDB6250]);
}

void sub_243294AC0()
{
  double *v0;

  OUTLINED_FUNCTION_12_4();
  *v0 = SearchContext.latitude.getter();
  OUTLINED_FUNCTION_5();
}

void sub_243294AE0()
{
  SearchContext.latitude.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294B00()
{
  double *v0;

  OUTLINED_FUNCTION_12_4();
  *v0 = SearchContext.longitude.getter();
  OUTLINED_FUNCTION_5();
}

void sub_243294B20()
{
  SearchContext.longitude.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294B40()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  SearchContext.onScreenEntities.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243294B64()
{
  SearchContext.asrSpeechPackageData.getter();
  OUTLINED_FUNCTION_5();
}

void sub_243294B84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  SearchContext.assistantId.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243294BA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  SearchContext.responseMode.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243294BC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))SearchContext.responseMode.setter);
}

void sub_243294BE4()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  SearchContext.deviceRestrictionsRawValue.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243294C04()
{
  SearchContext.deviceRestrictionsRawValue.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294C24()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  SearchContext.isEyesFree.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243294C44(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  SearchContext.isEyesFree.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294C60()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  SearchContext.isMultiUser.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243294C80(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  SearchContext.isMultiUser.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294C9C()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  SearchContext.isVoiceTriggerEnabled.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243294CBC(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  SearchContext.isVoiceTriggerEnabled.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294CD8()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  SearchContext.isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243294CF8(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  SearchContext.isTextToSpeechEnabled.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294D14()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  SearchContext.isTriggerlessFollowup.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243294D34(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  SearchContext.isTriggerlessFollowup.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294D50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  SearchContext.inputOriginName.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243294D70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))SearchContext.inputOriginName.setter);
}

void sub_243294D8C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  SearchContext.bargeInModes.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243294DB0()
{
  uint64_t v0;

  OUTLINED_FUNCTION_12_4();
  SearchContext.isOnlyUserInHome.getter();
  OUTLINED_FUNCTION_136_2(v0);
  OUTLINED_FUNCTION_5();
}

void sub_243294DD0(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_135_5(a1);
  SearchContext.isOnlyUserInHome.setter();
  OUTLINED_FUNCTION_5();
}

void sub_243294DEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_12_4();
  SearchContext.sharedUserId.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_5();
}

void sub_243294E0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))SearchContext.sharedUserId.setter);
}

void sub_243294E28()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_12_4();
  SearchContext.userIdentityClassificationValue.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_5();
}

void sub_243294E48()
{
  SearchContext.userIdentityClassificationValue.setter();
  OUTLINED_FUNCTION_5();
}

uint64_t destroy for SearchContext()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for SearchContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  a1[16] = a2[16];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SearchContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  a1[13] = a2[13];
  swift_retain();
  swift_release();
  a1[14] = a2[14];
  swift_retain();
  swift_release();
  a1[15] = a2[15];
  swift_retain();
  swift_release();
  a1[16] = a2[16];
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy136_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

uint64_t assignWithTake for SearchContext(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 136))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchContext()
{
  return &type metadata for SearchContext;
}

uint64_t OUTLINED_FUNCTION_5_27()
{
  uint64_t v0;

  return outlined release of SearchContext(v0 - 224);
}

uint64_t OUTLINED_FUNCTION_6_25()
{
  uint64_t v0;

  return outlined retain of SearchContext(v0 - 224);
}

uint64_t OUTLINED_FUNCTION_12_22()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_13_25()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_15_20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_17_20()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_20_17()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_22_17()
{
  return EntityProperty.wrappedValue.getter();
}

void OUTLINED_FUNCTION_23_20()
{
  JUMPOUT(0x2494F42C8);
}

void *OUTLINED_FUNCTION_24_15(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

uint64_t OUTLINED_FUNCTION_29_16()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void OUTLINED_FUNCTION_30_16()
{
  JUMPOUT(0x2494F42D4);
}

void OUTLINED_FUNCTION_33_13()
{
  JUMPOUT(0x2494F42ECLL);
}

void OUTLINED_FUNCTION_34_12()
{
  JUMPOUT(0x2494F42D4);
}

uint64_t OUTLINED_FUNCTION_36_15()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_38_15()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_39_15(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return outlined release of SearchContext((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_40_9(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return outlined retain of SearchContext((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_41_11()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_44_15()
{
  return swift_retain();
}

uint64_t SearchItem.source.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t countAndFlagsBits;

  swift_getDynamicType();
  swift_getMetatypeMetadata();
  v0 = String.init<A>(describing:)();
  v2 = v1;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v0, v2);
  v4 = v3;
  result = swift_bridgeObjectRelease();
  if (v4)
  {
    countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    OUTLINED_FUNCTION_121();
    specialized Collection.dropFirst(_:)(1uLL, v0, v2);
    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain();
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return countAndFlagsBits;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static SearchItem.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[5];

  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_18_1();
  v40 = v8;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v36 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v36 - v16;
  v41[3] = v18;
  v41[4] = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
  OUTLINED_FUNCTION_3_15((uint64_t)boxed_opaque_existential_1, a2);
  SearchItem.matchesAsset(_:)(v41, a3, a4);
  v22 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  OUTLINED_FUNCTION_3_15((uint64_t)v17, a1);
  OUTLINED_FUNCTION_3_15((uint64_t)v15, a2);
  v39 = a1;
  if ((v22 & 1) != 0)
  {
    v37 = a2;
    v38 = v12;
    v23 = OUTLINED_FUNCTION_6_26();
    v25 = v24;
    if (v23 == OUTLINED_FUNCTION_6_26() && v25 == v26)
      v28 = 1;
    else
      v28 = OUTLINED_FUNCTION_18_7();
    OUTLINED_FUNCTION_121();
    swift_bridgeObjectRelease();
    a2 = v37;
    v12 = v38;
  }
  else
  {
    v28 = 0;
  }
  OUTLINED_FUNCTION_12_8((uint64_t)v15);
  OUTLINED_FUNCTION_12_8((uint64_t)v17);
  OUTLINED_FUNCTION_3_15((uint64_t)v12, v39);
  v29 = v40;
  OUTLINED_FUNCTION_3_15(v40, a2);
  if ((v28 & 1) != 0)
  {
    v30 = v12;
    v31 = OUTLINED_FUNCTION_7_27();
    v33 = v32;
    if (v31 != OUTLINED_FUNCTION_7_27() || v33 != v34)
      OUTLINED_FUNCTION_18_7();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_121();
    v12 = v30;
  }
  OUTLINED_FUNCTION_12_8(v29);
  OUTLINED_FUNCTION_12_8((uint64_t)v12);
  OUTLINED_FUNCTION_43_0();
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
    {
      v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

void SearchItem.matchesAsset(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  v47 = type metadata accessor for URL();
  v42 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_0_3();
  v40 = v6;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_0_3();
  v46 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_18_1();
  v41 = v9;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v45 = (char *)&v40 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v48 = (uint64_t)&v40 - v14;
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 32);
  v43 = a3;
  v19 = v18(a2, a3);
  v21 = v20;
  v22 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  if (v19 == (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23) && v21 == v24)
  {
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_2_22();
    OUTLINED_FUNCTION_10_21();
    v27 = v15;
LABEL_8:
    v28 = v48;
    (*(void (**)(uint64_t))(v43 + 40))(a2);
    v29 = v50;
    v30 = v51;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    v31 = (uint64_t)v45;
    (*(void (**)(uint64_t, uint64_t))(v30 + 40))(v29, v30);
    v32 = v46;
    v33 = v46 + *(int *)(v44 + 48);
    outlined init with copy of URL?(v28, v46);
    outlined init with copy of URL?(v31, v33);
    v34 = v47;
    if (__swift_getEnumTagSinglePayload(v32, 1, v47) == 1)
    {
      OUTLINED_FUNCTION_4_28(v31);
      OUTLINED_FUNCTION_4_28(v28);
      OUTLINED_FUNCTION_1_25(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      if (__swift_getEnumTagSinglePayload(v33, 1, v34) == 1)
      {
        outlined destroy of URL?(v32, &demangling cache variable for type metadata for URL?);
        goto LABEL_16;
      }
    }
    else
    {
      v35 = v41;
      outlined init with copy of URL?(v32, v41);
      if (__swift_getEnumTagSinglePayload(v33, 1, v34) != 1)
      {
        v36 = v42;
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
        v44 = v27;
        v38 = v40;
        v37(v40, v33, v34);
        lazy protocol witness table accessor for type URL and conformance URL();
        dispatch thunk of static Equatable.== infix(_:_:)();
        v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v39(v38, v34);
        OUTLINED_FUNCTION_4_28(v31);
        OUTLINED_FUNCTION_4_28(v48);
        OUTLINED_FUNCTION_1_25(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
        v39(v35, v34);
        OUTLINED_FUNCTION_4_28(v32);
        goto LABEL_16;
      }
      outlined destroy of URL?(v31, &demangling cache variable for type metadata for URL?);
      outlined destroy of URL?(v48, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_1_25(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v35, v34);
    }
    outlined destroy of URL?(v32, &demangling cache variable for type metadata for (URL?, URL?));
    goto LABEL_16;
  }
  v26 = OUTLINED_FUNCTION_18_7();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_22();
  OUTLINED_FUNCTION_10_21();
  v27 = v15;
  if ((v26 & 1) != 0)
    goto LABEL_8;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a2);
LABEL_16:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  OUTLINED_FUNCTION_43_0();
}

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x2494F6CA4](MEMORY[0x24BDCDB00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t dispatch thunk of SearchItem.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SearchItem.url.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SearchItem.source.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SearchItem.llmConsumableDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

void protocol witness for SearchItem.source.getter in conformance GeoLocation()
{
  const void *v0;
  _BYTE v1[157];

  memcpy(v1, v0, sizeof(v1));
  specialized SearchItem.source.getter();
}

uint64_t OUTLINED_FUNCTION_1_25@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_4_28(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of URL?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_6_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_7_27()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_10_21()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of IMSPIMessageProtocol(v0, v1 - 120);
}

uint64_t static AnswerSynthesisRequest.calculateCharLimitForUserPrompt(tokenLimit:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for NSUserDefaults();
  static NSUserDefaults.answerSynthesisTokenLimitNonUserPrompt.getter();
  v3 = a1 - v2;
  if (__OFSUB__(a1, v2))
  {
    __break(1u);
    goto LABEL_9;
  }
  static NSUserDefaults.answerSynthesisTokenLimitOutput.getter();
  v5 = v3 - v4;
  if (__OFSUB__(v3, v4))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = 3 * v5;
  if ((unsigned __int128)(v5 * (__int128)3) >> 64 == (3 * v5) >> 63)
  {
    if (one-time initialization token for search == -1)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_once();
LABEL_5:
  v6 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v6, (uint64_t)static Logging.search);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v11 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    *(_DWORD *)v9 = 136316418;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x800000024335E9F0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2048;
    OUTLINED_FUNCTION_5_28();
    *(_WORD *)(v9 + 22) = 2048;
    static NSUserDefaults.answerSynthesisTokenLimitNonUserPrompt.getter();
    OUTLINED_FUNCTION_6_27();
    *(_WORD *)(v9 + 32) = 2048;
    static NSUserDefaults.answerSynthesisTokenLimitOutput.getter();
    OUTLINED_FUNCTION_6_27();
    *(_WORD *)(v9 + 42) = 2048;
    OUTLINED_FUNCTION_5_28();
    *(_WORD *)(v9 + 52) = 2048;
    OUTLINED_FUNCTION_5_28();
    _os_log_impl(&dword_24315F000, v7, v8, "%s\ntokenLimit=%ld\ntokenLimitNonUserPrompt=%ld\ntokenLimitOutput=%ld\ntokenCharMultiplier=%ld\n-> charLimitForUserPrompt=%ld\")", (uint8_t *)v9, 0x3Eu);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }

  return v3;
}

OmniSearch::AnswerSynthesisRequest __swiftcall AnswerSynthesisRequest.init(query:documents:charLimit:)(Swift::String query, Swift::OpaquePointer documents, Swift::Int charLimit)
{
  uint64_t *v3;
  void *object;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int *v18;
  uint64_t v19;
  uint64_t *v20;
  Swift::Int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  unint64_t v43;
  Swift::Int v44;
  Swift::Int v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t countAndFlagsBits;
  uint64_t *v57;
  void *rawValue;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;
  OmniSearch::AnswerSynthesisRequest result;

  object = query._object;
  countAndFlagsBits = query._countAndFlagsBits;
  v57 = v3;
  v7 = type metadata accessor for SearchResult(0);
  v61 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_2_2();
  v10 = v9 - v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_2_2();
  v60 = v14 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
  OUTLINED_FUNCTION_15();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v20 = (uint64_t *)((char *)&v51 - v19);
  v21 = *((_QWORD *)documents._rawValue + 2);
  if (!v21)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (one-time initialization token for search != -1)
LABEL_21:
    swift_once();
  v22 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v22, (uint64_t)static Logging.search);
  swift_bridgeObjectRetain();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  v59 = v23;
  LODWORD(v53) = v24;
  v25 = os_log_type_enabled(v23, v24);
  v55 = (uint64_t)object;
  rawValue = documents._rawValue;
  v54 = charLimit / v21;
  if (v25)
  {
    v26 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v52 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v63[0] = v52;
    *(_DWORD *)v26 = 136315906;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000024335EA20, v63);
    v62 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 2048;
    v62 = charLimit;
    OUTLINED_FUNCTION_7_28();
    *(_WORD *)(v26 + 22) = 2048;
    v62 = v21;
    OUTLINED_FUNCTION_7_28();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2048;
    v62 = charLimit / v21;
    OUTLINED_FUNCTION_7_28();
    _os_log_impl(&dword_24315F000, v59, (os_log_type_t)v53, "%s charLimit=%ld, documents.count=%ld charLimitPerDocument=%ld", (uint8_t *)v26, 0x2Au);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }

  swift_bridgeObjectRelease();
  v21 = 0;
  object = (void *)*((_QWORD *)documents._rawValue + 2);
  v59 = MEMORY[0x24BEE4AF8];
  v53 = xmmword_24334DB60;
  while (1)
  {
    if ((void *)v21 == object)
    {
      v28 = 1;
      v21 = (Swift::Int)object;
    }
    else
    {
      if ((unint64_t)v21 >= *((_QWORD *)documents._rawValue + 2))
      {
        __break(1u);
        goto LABEL_20;
      }
      v29 = v60 + *(int *)(v11 + 48);
      outlined init with copy of SearchResult((uint64_t)documents._rawValue+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v21, v29);
      v30 = (uint64_t)v18 + *(int *)(v11 + 48);
      *v18 = v21;
      outlined init with take of SearchResult(v29, v30);
      v28 = 0;
      ++v21;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v18, v28, 1, v11);
    outlined init with take of (offset: Int, element: SearchResult)?((uint64_t)v18, (uint64_t)v20);
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v11) == 1)
      break;
    v31 = *v20;
    outlined init with take of SearchResult((uint64_t)v20 + *(int *)(v11 + 48), v10);
    v32 = keyForSearchResult(_:idx:)(v10, v31);
    if (v33)
    {
      v34 = v32;
      v35 = v33;
      SearchResultItem.associatedValue.getter();
      v37 = v64;
      v36 = v65;
      __swift_project_boxed_opaque_existential_1(v63, v64);
      (*(void (**)(uint64_t, uint64_t))(v36 + 56))(v37, v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      v38 = specialized Collection.prefix(_:)(v54);
      v52 = MEMORY[0x2494F5C48](v38);
      v40 = v39;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v53;
      *(_QWORD *)(inited + 32) = v34;
      *(_QWORD *)(inited + 40) = v35;
      *(_QWORD *)(inited + 48) = v52;
      *(_QWORD *)(inited + 56) = v40;
      v42 = Dictionary.init(dictionaryLiteral:)();
      charLimit = (Swift::Int)v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_17_21();
        charLimit = v44;
      }
      v43 = *(_QWORD *)(charLimit + 16);
      if (v43 >= *(_QWORD *)(charLimit + 24) >> 1)
      {
        OUTLINED_FUNCTION_17_21();
        charLimit = v45;
      }
      *(_QWORD *)(charLimit + 16) = v43 + 1;
      v59 = charLimit;
      *(_QWORD *)(charLimit + 8 * v43 + 32) = v42;
      outlined destroy of SearchResult(v10);
      documents._rawValue = rawValue;
    }
    else
    {
      outlined destroy of SearchResult(v10);
    }
  }
  v46 = swift_bridgeObjectRelease();
  v49 = v57;
  v50 = v55;
  *v57 = countAndFlagsBits;
  v49[1] = v50;
  v49[2] = (uint64_t)v59;
  result.personal_data_sources._rawValue = v48;
  result.query._object = v47;
  result.query._countAndFlagsBits = v46;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnswerSynthesisRequest.userPrompt()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String result;

  v1 = v0;
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_2();
  v5 = v4 - v3;
  type metadata accessor for JSONEncoder.OutputFormatting();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_79_4();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  lazy protocol witness table accessor for type AnswerSynthesisRequest and conformance AnswerSynthesisRequest();
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v0)
  {
    OUTLINED_FUNCTION_13_8();
  }
  else
  {
    static String.Encoding.utf8.getter();
    v7 = String.init(data:encoding:)();
    if (v8)
    {
      v5 = v7;
      v1 = v8;
      OUTLINED_FUNCTION_109_1();
      OUTLINED_FUNCTION_13_8();
    }
    else
    {
      OUTLINED_FUNCTION_109_1();
      OUTLINED_FUNCTION_13_8();
      v5 = 0;
      v1 = 0xE000000000000000;
    }
  }
  v9 = v5;
  v10 = (void *)v1;
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t keyForSearchResult(_:idx:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;

  type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_3_1();
  v6 = type metadata accessor for SearchResultType();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v28 - v11;
  v13 = __OFADD__(a2, 1);
  v14 = a2 + 1;
  if (v13)
  {
    __break(1u);
LABEL_22:
    swift_once();
    goto LABEL_18;
  }
  SearchResultItem.type.getter();
  v15 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v12, v6);
  if (v15 == *MEMORY[0x24BE6E1E0])
  {
    v16 = 0x5F6567616D69;
LABEL_6:
    v17 = 0xE600000000000000;
LABEL_7:
    v31[0] = v16;
    v31[1] = v17;
    v32 = v14;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    return v31[0];
  }
  if (v15 == *MEMORY[0x24BE6E1D0])
  {
    v16 = 0x5F6C69616D65;
    goto LABEL_6;
  }
  if (v15 == *MEMORY[0x24BE6E200])
  {
    v16 = 0x5F6567617373656DLL;
LABEL_10:
    v17 = 0xE800000000000000;
    goto LABEL_7;
  }
  if (v15 == *MEMORY[0x24BE6E208])
  {
    v16 = 0x7261646E656C6163;
    v17 = 0xE90000000000005FLL;
    goto LABEL_7;
  }
  if (v15 == *MEMORY[0x24BE6E1D8])
  {
    v16 = 0x5F65746F6ELL;
    v17 = 0xE500000000000000;
    goto LABEL_7;
  }
  if (v15 == *MEMORY[0x24BE6E1F8])
  {
    v16 = 0x5F746361746E6F63;
    goto LABEL_10;
  }
  if (one-time initialization token for search != -1)
    goto LABEL_22;
LABEL_18:
  v20 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v20, (uint64_t)static Logging.search);
  outlined init with copy of SearchResult(a1, v2);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v30 = specialized static UnsafeMutablePointer.allocate(capacity:)();
    v31[0] = v30;
    *(_DWORD *)v23 = 136315138;
    v28 = v23 + 4;
    v29 = v23;
    SearchResultItem.type.getter();
    v24 = SearchResultType.rawValue.getter();
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v31);
    v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SearchResult(v2);
    _os_log_impl(&dword_24315F000, v21, v22, "Search result type not supported for answer synthesis: %s", v29, 0xCu);
    OUTLINED_FUNCTION_34_2();
    specialized UnsafeMutablePointer.deallocate()();
  }
  outlined destroy of SearchResult(v2);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  return 0;
}

uint64_t AnswerSynthesisRequest.query.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_4_7();
  return v1;
}

uint64_t AnswerSynthesisRequest.query.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AnswerSynthesisRequest.query.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

uint64_t AnswerSynthesisRequest.personal_data_sources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnswerSynthesisRequest.personal_data_sources.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AnswerSynthesisRequest.personal_data_sources.modify())()
{
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

void *AnswerSynthesisRequest.tokenCharMultiplier.unsafeMutableAddressor()
{
  return &static AnswerSynthesisRequest.tokenCharMultiplier;
}

uint64_t static AnswerSynthesisRequest.tokenCharMultiplier.getter()
{
  return 3;
}

uint64_t AnswerSynthesisRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024335EA50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AnswerSynthesisRequest.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000015;
  else
    return 0x7972657571;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnswerSynthesisRequest.CodingKeys()
{
  char *v0;

  return AnswerSynthesisRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnswerSynthesisRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AnswerSynthesisRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnswerSynthesisRequest.CodingKeys()
{
  lazy protocol witness table accessor for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnswerSynthesisRequest.CodingKeys()
{
  lazy protocol witness table accessor for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AnswerSynthesisRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnswerSynthesisRequest.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_1();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  OUTLINED_FUNCTION_1_1();
}

void AnswerSynthesisRequest.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnswerSynthesisRequest.CodingKeys>);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_79_4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    OUTLINED_FUNCTION_2_17();
  }
  else
  {
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_0_20();
    *a2 = v6;
    a2[1] = v8;
    a2[2] = v9;
    OUTLINED_FUNCTION_4_7();
    OUTLINED_FUNCTION_2_17();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_1_1();
}

void protocol witness for Decodable.init(from:) in conformance AnswerSynthesisRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  AnswerSynthesisRequest.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AnswerSynthesisRequest(_QWORD *a1)
{
  AnswerSynthesisRequest.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type AnswerSynthesisRequest and conformance AnswerSynthesisRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisRequest and conformance AnswerSynthesisRequest;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisRequest and conformance AnswerSynthesisRequest)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisRequest, &type metadata for AnswerSynthesisRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisRequest and conformance AnswerSynthesisRequest);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisRequest.CodingKeys, &unk_2513CFAE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisRequest.CodingKeys, &unk_2513CFAE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisRequest.CodingKeys, &unk_2513CFAE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys)
  {
    result = MEMORY[0x2494F6CA4](&protocol conformance descriptor for AnswerSynthesisRequest.CodingKeys, &unk_2513CFAE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerSynthesisRequest.CodingKeys and conformance AnswerSynthesisRequest.CodingKeys);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnswerSynthesisRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_4_7();
  return a1;
}

ValueMetadata *type metadata accessor for AnswerSynthesisRequest()
{
  return &type metadata for AnswerSynthesisRequest;
}

uint64_t storeEnumTagSinglePayload for AnswerSynthesisRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_243297060 + 4 * byte_243357545[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_243297094 + 4 * byte_243357540[v4]))();
}

uint64_t sub_243297094(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24329709C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432970A4);
  return result;
}

uint64_t sub_2432970B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432970B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2432970BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432970C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AnswerSynthesisRequest.CodingKeys()
{
  return &unk_2513CFAE8;
}

uint64_t OUTLINED_FUNCTION_5_28()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_6_27()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_7_28()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_17_21()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static OmniSearchError.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OmniSearchError(uint64_t a1, uint64_t a2)
{
  return static OmniSearchError.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t outlined copy of OmniSearchError()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for OmniSearchError()
{
  return OUTLINED_FUNCTION_79_1();
}

uint64_t initializeBufferWithCopyOfBuffer for OmniSearchError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of OmniSearchError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OmniSearchError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of OmniSearchError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  OUTLINED_FUNCTION_79_1();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for OmniSearchError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  OUTLINED_FUNCTION_79_1();
  return a1;
}

uint64_t getEnumTagSinglePayload for OmniSearchError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OmniSearchError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for OmniSearchError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for OmniSearchError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for OmniSearchError()
{
  return &type metadata for OmniSearchError;
}

void specialized Array.init<A>(_:)(uint64_t a1)
{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_5();
}

void specialized Array.subscript.getter(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a1)
  {
    OUTLINED_FUNCTION_4_7();
    OUTLINED_FUNCTION_5();
    return;
  }
  __break(1u);
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Photo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Photo(0);
  v23 = *(_QWORD *)(v26 - 8);
  v7 = MEMORY[0x24BDAC7A8](v26);
  v25 = (uint64_t)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v22 = (uint64_t)v21 - v9;
  if (a1 >> 62)
    goto LABEL_18;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    v21[1] = v2;
    v11 = MEMORY[0x24BEE4AF8];
    v24 = a1 & 0xC000000000000001;
    v12 = 4;
    v13 = (id *)a1;
    while (1)
    {
      v2 = v12 - 4;
      v14 = v24 ? (id *)MEMORY[0x2494F62E4](v12 - 4, a1) : (id *)*(id *)(a1 + 8 * v12);
      a1 = (unint64_t)v14;
      v15 = v12 - 3;
      if (__OFADD__(v2, 1))
        break;
      LocalIndexClient.constructPhotoDocument(item:)(v14, (uint64_t)v6);

      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v26) == 1)
      {
        outlined destroy of MobileSMSDocument?((uint64_t)v6, &demangling cache variable for type metadata for Photo?);
      }
      else
      {
        v16 = v22;
        outlined init with take of SearchResult((uint64_t)v6, v22, type metadata accessor for Photo);
        outlined init with take of SearchResult(v16, v25, type metadata accessor for Photo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v11 = v18;
        }
        v17 = *(_QWORD *)(v11 + 16);
        if (v17 >= *(_QWORD *)(v11 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v11 = v19;
        }
        *(_QWORD *)(v11 + 16) = v17 + 1;
        outlined init with take of SearchResult(v25, v11+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v17, type metadata accessor for Photo);
      }
      a1 = (unint64_t)v13;
      ++v12;
      if (v15 == v10)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = MEMORY[0x24BEE4AF8];
    v4 = 4;
    v17 = v2;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2494F62E4](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(objc_msgSend(v5, sel_attributeSet), (SEL *)&selRef_eventMessageIdentifier);
      v9 = v8;
      v11 = v10;

      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v3 = v14;
        }
        v12 = *(_QWORD *)(v3 + 16);
        if (v12 >= *(_QWORD *)(v3 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v3 = v15;
        }
        *(_QWORD *)(v3 + 16) = v12 + 1;
        v13 = v3 + 16 * v12;
        *(_QWORD *)(v13 + 32) = v9;
        *(_QWORD *)(v13 + 40) = v11;
        v2 = v17;
      }
      ++v4;
      if (v7 == v2)
        goto LABEL_19;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  v3 = MEMORY[0x24BEE4AF8];
LABEL_19:
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = MEMORY[0x24BEE4AF8];
    v4 = 4;
    v16 = v2;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2494F62E4](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.mailMessageID.getter(objc_msgSend(v5, sel_attributeSet));
      v10 = v9;

      if (v10)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v3 = v13;
        }
        v11 = *(_QWORD *)(v3 + 16);
        if (v11 >= *(_QWORD *)(v3 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v3 = v14;
        }
        *(_QWORD *)(v3 + 16) = v11 + 1;
        v12 = v3 + 16 * v11;
        *(_QWORD *)(v12 + 32) = v8;
        *(_QWORD *)(v12 + 40) = v10;
        v2 = v16;
      }
      ++v4;
      if (v7 == v2)
        goto LABEL_19;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  v3 = MEMORY[0x24BEE4AF8];
LABEL_19:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x2494F62E4](v3, a1);
LABEL_7:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        if (CSSearchableItem.isEventTypeItem.getter())
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v3;
        if (v6 == v2)
        {
          v7 = v9;
          goto LABEL_18;
        }
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        goto LABEL_17;
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_7;
  }
LABEL_17:
  v7 = MEMORY[0x24BEE4AF8];
LABEL_18:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v8 = swift_bridgeObjectRetain() + 40;
    do
    {
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_retain();
      v9(a2, a3, a4);
      swift_release();
      v8 += 16;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static LocalIndexClient.displayName(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;

  v4 = Dictionary.init(dictionaryLiteral:)();
  if (a2)
  {
    OUTLINED_FUNCTION_204_0();
    v5 = specialized Dictionary.subscript.getter(a1, a2, v4);
    v7 = v6;
    OUTLINED_FUNCTION_80_0();
    v8 = OUTLINED_FUNCTION_36_0();
    if (v7)
    {
      v8 = OUTLINED_FUNCTION_80_0();
    }
    else
    {
      v5 = a1;
      v7 = a2;
    }
    OUTLINED_FUNCTION_93_1(v8, &lazy cache variable for type metadata for LSBundleRecord);
    OUTLINED_FUNCTION_23_0();
    v9 = @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(v5, v7, 0);
    v10 = OUTLINED_FUNCTION_56_0();
    v11 = OUTLINED_FUNCTION_12_7(v10, sel_localizedName);
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    OUTLINED_FUNCTION_36_0();
  }
  return a1;
}

unint64_t static LocalIndexClient.results(for:)(unint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  char v29;
  uint64_t ObjCClassFromMetadata;
  os_log_type_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  os_log_type_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  NSObject *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_44:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
LABEL_45:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_45;
LABEL_3:
  v3 = 0;
  v55 = *MEMORY[0x24BDC22E8];
  v54 = *MEMORY[0x24BDC1BF8];
  v51 = v2;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = (id)MEMORY[0x2494F62E4](v3, a1);
    }
    else
    {
      if (v3 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_43;
      v4 = *(id *)(a1 + 32 + 8 * v3);
    }
    v5 = v4;
    v6 = __OFADD__(v3, 1);
    v7 = v3 + 1;
    if (v6)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (one-time initialization token for search != -1)
      swift_once();
    v8 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_113_4(v8, (uint64_t)static Logging.search);
    v9 = v5;
    v61 = v1;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    v58 = v9;
    if (os_log_type_enabled(v10, v11))
    {
      v12 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_QWORD *)&v62 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v12 = 136315138;
      v13 = v9;
      v14 = objc_msgSend(v13, sel_description);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)&v62);
      *(_QWORD *)(v12 + 4) = v18;

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_29_2(&dword_24315F000, v10, v11, "Found section: %s", (uint8_t *)v12);
      swift_arrayDestroy();
      specialized UnsafeMutablePointer.deallocate()();
    }

    result = outlined bridged method (pb) of @objc SFResultSection.results.getter(v9, (SEL *)&selRef_results, &lazy cache variable for type metadata for SFSearchResult);
    if (!result)
      break;
    v20 = result;
    v52 = v7;
    if (result >> 62)
    {
      v21 = _CocoaArrayWrapper.endIndex.getter();
      if (!v21)
        goto LABEL_39;
    }
    else
    {
      v21 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v21)
        goto LABEL_39;
    }
    if (v21 < 1)
      goto LABEL_42;
    v22 = 0;
    v60 = v20 & 0xC000000000000001;
    v56 = v21;
    v57 = v20;
    do
    {
      if (v60)
        v23 = (id)MEMORY[0x2494F62E4](v22, v20);
      else
        v23 = *(id *)(v20 + 8 * v22 + 32);
      v24 = v23;
      objc_opt_self();
      v25 = (void *)swift_dynamicCastObjCClass();
      v26 = v24;
      v27 = v26;
      if (v25)
      {
        v28 = v26;
        MEMORY[0x2494F5E10]();
        OUTLINED_FUNCTION_273_0();
        if (v29)
          OUTLINED_FUNCTION_176();
        OUTLINED_FUNCTION_291_0();
        specialized Array._endMutation()();
        type metadata accessor for IMSPIMessage(0, &lazy cache variable for type metadata for NSString);
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        if (objc_msgSend(v25, sel_valueForAttribute_withType_, v55, ObjCClassFromMetadata))
        {
          _bridgeAnyObjectToAny(_:)();
          OUTLINED_FUNCTION_23_16();
        }
        else
        {
          v62 = 0u;
          v63 = 0u;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        v59 = OUTLINED_FUNCTION_270_0();
        v35 = v34;
        if (objc_msgSend(v25, sel_valueForAttribute_withType_, v54, ObjCClassFromMetadata))
        {
          _bridgeAnyObjectToAny(_:)();
          OUTLINED_FUNCTION_13_12();
        }
        else
        {
          v62 = 0u;
          v63 = 0u;
        }
        v36 = OUTLINED_FUNCTION_270_0();
        v38 = v37;
        v39 = v28;
        OUTLINED_FUNCTION_91_0();
        OUTLINED_FUNCTION_76_0();
        v1 = v61;
        Logger.logObject.getter();
        v40 = OUTLINED_FUNCTION_51_2();
        if (OUTLINED_FUNCTION_269_0(v61))
        {
          v41 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          *(_QWORD *)&v62 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          *(_DWORD *)v41 = 136315650;
          v42 = v39;
          v43 = objc_msgSend(v25, sel_description);
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v53 = v36;
          v46 = v45;

          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)&v62);
          *(_QWORD *)(v41 + 4) = v47;

          OUTLINED_FUNCTION_80_0();
          *(_WORD *)(v41 + 12) = 2080;
          OUTLINED_FUNCTION_91_0();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v35, (uint64_t *)&v62);
          *(_QWORD *)(v41 + 14) = v48;
          OUTLINED_FUNCTION_130();
          *(_WORD *)(v41 + 22) = 2080;
          OUTLINED_FUNCTION_76_0();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v38, (uint64_t *)&v62);
          *(_QWORD *)(v41 + 24) = v49;
          OUTLINED_FUNCTION_130();
          OUTLINED_FUNCTION_267_0(&dword_24315F000, v61, v40, "Found result: %s, uniqueId:%s, domainId: %s", (uint8_t *)v41);
          OUTLINED_FUNCTION_266_0();
          specialized UnsafeMutablePointer.deallocate()();
        }

        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_102_0();

        v20 = v57;
        v9 = v58;
        v21 = v56;
      }
      else
      {
        v1 = v61;
        Logger.logObject.getter();
        v31 = OUTLINED_FUNCTION_48_1();
        if (OUTLINED_FUNCTION_21(v31))
        {
          v32 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v33 = (_QWORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
          *(_DWORD *)v32 = 138412290;
          *(_QWORD *)(v32 + 4) = v27;
          *v33 = v27;
          OUTLINED_FUNCTION_29_2(&dword_24315F000, 0, (os_log_type_t)v61, "Failed to cast search result to spotlightExtras: %@", (uint8_t *)v32);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_34_2();
          specialized UnsafeMutablePointer.deallocate()();
        }

      }
      ++v22;
    }
    while (v21 != v22);
LABEL_39:

    OUTLINED_FUNCTION_47();
    v3 = v52;
    if (v52 == v51)
    {
      swift_bridgeObjectRelease();
      return v64;
    }
  }
  __break(1u);
  return result;
}

void static LocalIndexClient.searchableItems(for:)()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *isa;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  NSArray v41;
  uint64_t v42;
  NSArray v43;
  void *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  id v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  OUTLINED_FUNCTION_18_2();
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_2();
  v5 = v4 - v3;
  v6 = type metadata accessor for UTType();
  v59 = *(_QWORD *)(v6 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_18_1();
  v58 = v8;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_34_1();
  v57 = v10;
  if (v1 >> 62)
    goto LABEL_69;
  v11 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  OUTLINED_FUNCTION_23_0();
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    v13 = 0;
    v65 = *MEMORY[0x24BDC1DE8];
    v62 = *MEMORY[0x24BDC1B90];
    v61 = *MEMORY[0x24BDC1B98];
    v60 = *MEMORY[0x24BDC1BF8];
    *(_QWORD *)&v12 = 138412290;
    v56 = v12;
    v63 = v6;
    v64 = v5;
    v66 = v11;
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v14 = OUTLINED_FUNCTION_248_0();
        v15 = (id)MEMORY[0x2494F62E4](v14);
      }
      else
      {
        if (v13 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_68;
        v15 = *(id *)(v1 + 32 + 8 * v13);
      }
      v16 = __OFADD__(v13, 1);
      v17 = v13 + 1;
      if (v16)
        break;
      v69 = v15;
      outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(v69, (SEL *)&selRef_contentType);
      v68 = v17;
      if (!v19)
      {
        if (one-time initialization token for search != -1)
          swift_once();
        v24 = OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_113_4(v24, (uint64_t)static Logging.search);
        v25 = v69;
        v26 = Logger.logObject.getter();
        v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v29 = (_QWORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
          *(_DWORD *)v28 = v56;
          *(_QWORD *)(v28 + 4) = v25;
          *v29 = v25;
          OUTLINED_FUNCTION_29_2(&dword_24315F000, v26, v27, "Failed to synthesize searchable item from result: %@", (uint8_t *)v28);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_34_2();
          specialized UnsafeMutablePointer.deallocate()();
        }

        v37 = v25;
        goto LABEL_65;
      }
      v20 = v18;
      v21 = v19;
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      OUTLINED_FUNCTION_22_2(v5, 1, v6);
      v67 = v20;
      if (v22)
      {
        outlined destroy of MobileSMSDocument?(v5, &demangling cache variable for type metadata for UTType?);
        type metadata accessor for IMSPIMessage(0, &lazy cache variable for type metadata for CSSearchableItemAttributeSet);
        OUTLINED_FUNCTION_64();
        v23._countAndFlagsBits = v20;
        v23._object = v21;
        isa = CSSearchableItemAttributeSet.__allocating_init(itemContentType:)(v23).super.isa;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v57, v5, v6);
        type metadata accessor for IMSPIMessage(0, &lazy cache variable for type metadata for CSSearchableItemAttributeSet);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v58, v57, v6);
        isa = CSSearchableItemAttributeSet.__allocating_init(contentType:)(v58);
        OUTLINED_FUNCTION_4_18(v57, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
      }
      if (one-time initialization token for fetchAttributes != -1)
        swift_once();
      if (*(_QWORD *)(static LocalIndexClient.fetchAttributes + 16))
      {
        type metadata accessor for IMSPIMessage(0, &lazy cache variable for type metadata for NSObject);
        swift_getObjCClassFromMetadata();
        OUTLINED_FUNCTION_91_0();
        OUTLINED_FUNCTION_46_0();
        OUTLINED_FUNCTION_284_0();
      }
      v31 = v69;
      outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(v31, (SEL *)&selRef_resultBundleId);
      if (!v33)
      {
LABEL_26:
        outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(v31, (SEL *)&selRef_identifier);
        if (v35)
        {
          v36 = MEMORY[0x2494F5BB8]();
          OUTLINED_FUNCTION_96_0();
        }
        else
        {
          v36 = 0;
        }
        objc_msgSend(isa, sel_setAttribute_forKey_, v36, v65, v56);
        swift_unknownObjectRelease();
        goto LABEL_31;
      }
      if (v32 == 0xD000000000000013 && v33 == 0x800000024335DA00)
      {
        OUTLINED_FUNCTION_80_0();
      }
      else
      {
        v34 = OUTLINED_FUNCTION_18_7();
        OUTLINED_FUNCTION_80_0();
        if ((v34 & 1) == 0)
          goto LABEL_26;
      }
LABEL_31:
      v38 = (void *)MEMORY[0x2494F5BB8](v67, v21);
      OUTLINED_FUNCTION_6_1();
      objc_msgSend(isa, sel_setAttribute_forKey_, v38, v62);

      v39 = v31;
      outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v39, (SEL *)&selRef_contentTypeTree);
      if (v40)
      {
        v41.super.isa = Array._bridgeToObjectiveC()().super.isa;
        OUTLINED_FUNCTION_80_0();
      }
      else
      {
        v41.super.isa = 0;
      }
      objc_msgSend(isa, sel_setAttribute_forKey_, v41.super.isa, v61, (_QWORD)v56);
      OUTLINED_FUNCTION_23_16();
      outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v39, (SEL *)&selRef_answerAttributes);
      if (v42)
      {
        v43.super.isa = Array._bridgeToObjectiveC()().super.isa;
        OUTLINED_FUNCTION_80_0();
      }
      else
      {
        v43.super.isa = 0;
      }
      v44 = (void *)MEMORY[0x2494F5BB8](0xD000000000000025, 0x800000024335EA90);
      objc_msgSend(isa, sel_setAttribute_forKey_, v43.super.isa, v44);
      OUTLINED_FUNCTION_23_16();

      if (objc_msgSend(isa, sel_attributeForKey_, v65))
      {
        _bridgeAnyObjectToAny(_:)();
        OUTLINED_FUNCTION_23_16();
      }
      else
      {
        OUTLINED_FUNCTION_147_1();
      }
      OUTLINED_FUNCTION_124_7();
      if (v72)
      {
        v45 = OUTLINED_FUNCTION_7_16();
        if (v45)
          v46 = v70;
        else
          v46 = 0;
        if (v45)
          v47 = v71;
        else
          v47 = 0;
      }
      else
      {
        OUTLINED_FUNCTION_182_1();
        v46 = 0;
        v47 = 0;
      }
      if (objc_msgSend(isa, sel_attributeForKey_, v60))
      {
        OUTLINED_FUNCTION_203_0();
        OUTLINED_FUNCTION_208_0();
      }
      else
      {
        OUTLINED_FUNCTION_147_1();
      }
      OUTLINED_FUNCTION_124_7();
      if (v72)
      {
        v48 = OUTLINED_FUNCTION_7_16();
        if (v48)
          v49 = v70;
        else
          v49 = 0;
        if (v48)
          v50 = v71;
        else
          v50 = 0;
      }
      else
      {
        OUTLINED_FUNCTION_182_1();
        v49 = 0;
        v50 = 0;
      }
      objc_allocWithZone(MEMORY[0x24BDC2478]);
      v37 = isa;
      v51 = @nonobjc CSSearchableItem.init(uniqueIdentifier:domainIdentifier:attributeSet:)(v46, v47, v49, v50, v37);
      outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(v39, (SEL *)&selRef_resultBundleId);
      if (v52)
      {
        v53 = (void *)MEMORY[0x2494F5BB8]();
        OUTLINED_FUNCTION_121();
      }
      else
      {
        v53 = 0;
      }
      v6 = v63;
      objc_msgSend(v51, sel_setBundleID_, v53);

      v54 = v51;
      MEMORY[0x2494F5E10]();
      OUTLINED_FUNCTION_273_0();
      if (v55)
        OUTLINED_FUNCTION_176();
      OUTLINED_FUNCTION_291_0();
      specialized Array._endMutation()();

      v5 = v64;
LABEL_65:

      v13 = v68;
      if (v68 == v66)
        goto LABEL_70;
    }
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    OUTLINED_FUNCTION_23_0();
  }
LABEL_70:
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_43_0();
}

uint64_t LocalIndexClient.__allocating_init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  __int128 v6;
  uint64_t v7;
  _UNKNOWN **v8;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  if (one-time initialization token for shared != -1)
    swift_once();
  v0 = (void *)static LocalSearchManager.shared;
  v1 = type metadata accessor for ItemFetcher();
  v2 = OUTLINED_FUNCTION_8();
  v3 = OUTLINED_FUNCTION_8();
  v10 = type metadata accessor for LocalSearchManager();
  v11 = &protocol witness table for LocalSearchManager;
  v8 = &protocol witness table for ItemFetcher;
  *(_QWORD *)&v9 = v0;
  v7 = v1;
  *(_QWORD *)&v6 = v2;
  outlined init with take of SageSearchClient(&v9, v3 + 16);
  outlined init with take of SageSearchClient(&v6, v3 + 56);
  v4 = v0;
  return v3;
}

Swift::Void __swiftcall LocalIndexClient.prewarm()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  uint64_t v4;
  uint64_t v5;

  outlined init with copy of SearchResultRanking(v0 + 16, (uint64_t)v3);
  v1 = v4;
  v2 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v3);
}

void LocalIndexClient.search(spotlightRequest:completion:)()
{
  LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

void specialized Encodable.oms_jsonPrettyPrinted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_22_16();
  v1 = v0;
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_44_11();
  if (one-time initialization token for iso8601PrettyPrinted != -1)
    swift_once();
  OUTLINED_FUNCTION_298_0();
  OUTLINED_FUNCTION_196_1();
  OUTLINED_FUNCTION_193_0();
  if (v1)
  {
    OUTLINED_FUNCTION_46_1();
  }
  else
  {
    OUTLINED_FUNCTION_225_0();
    OUTLINED_FUNCTION_241_0();
    OUTLINED_FUNCTION_89_7();
  }
  OUTLINED_FUNCTION_12_0();
}

void *LocalIndexClient.keyAttributeResultRetrievalType.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributeResultRetrievalType;
}

unint64_t static LocalIndexClient.keyAttributeResultRetrievalType.getter()
{
  return OUTLINED_FUNCTION_30_11(27);
}

void *LocalIndexClient.keyAttributePersonalAnswerAttributes.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributePersonalAnswerAttributes;
}

unint64_t static LocalIndexClient.keyAttributePersonalAnswerAttributes.getter()
{
  return OUTLINED_FUNCTION_30_11(37);
}

void *LocalIndexClient.keyAttributeResultEmbeddingDistances.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributeResultEmbeddingDistances;
}

unint64_t static LocalIndexClient.keyAttributeResultEmbeddingDistances.getter()
{
  return OUTLINED_FUNCTION_30_11(32);
}

uint64_t one-time initialization function for keyAttributeItemAppEntityTypeIdentifier()
{
  return one-time initialization function for keyAttributeItemAppEntityTypeIdentifier();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  OUTLINED_FUNCTION_22_16();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = type metadata accessor for SpotlightKeys();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_2_2();
  v10 = v9 - v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9 - v8, *v5, v6);
  v11 = SpotlightKeys.description.getter();
  v13 = v12;
  result = OUTLINED_FUNCTION_4_18(v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  *v3 = v11;
  *v1 = v13;
  return result;
}

uint64_t *LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for keyAttributeItemAppEntityTypeIdentifier != -1)
    swift_once();
  return &static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier;
}

void static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.getter()
{
  OUTLINED_FUNCTION_192_0(&one-time initialization token for keyAttributeItemAppEntityTypeIdentifier);
}

uint64_t one-time initialization function for keyAItemAppEntityInstanceIdentifier()
{
  return one-time initialization function for keyAttributeItemAppEntityTypeIdentifier();
}

uint64_t *LocalIndexClient.keyAItemAppEntityInstanceIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for keyAItemAppEntityInstanceIdentifier != -1)
    swift_once();
  return &static LocalIndexClient.keyAItemAppEntityInstanceIdentifier;
}

void static LocalIndexClient.keyAItemAppEntityInstanceIdentifier.getter()
{
  OUTLINED_FUNCTION_192_0(&one-time initialization token for keyAItemAppEntityInstanceIdentifier);
}

void static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_5();
}

void *LocalIndexClient.kLocalIndexClientSearchTimeout.unsafeMutableAddressor()
{
  return &static LocalIndexClient.kLocalIndexClientSearchTimeout;
}

uint64_t static LocalIndexClient.kLocalIndexClientSearchTimeout.getter()
{
  return 5;
}

uint64_t *LocalIndexClient.fetchAttributes.unsafeMutableAddressor()
{
  if (one-time initialization token for fetchAttributes != -1)
    swift_once();
  return &static LocalIndexClient.fetchAttributes;
}

uint64_t static LocalIndexClient.fetchAttributes.getter()
{
  if (one-time initialization token for fetchAttributes != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t ItemFetcher.__allocating_init()()
{
  return swift_allocObject();
}

void LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)()
{
  LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_18_2();
  v2 = v1;
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v6 + 32);
  v10 = __swift_mutable_project_boxed_opaque_existential_1(v6, v8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_2_2();
  v13 = v12 - v11;
  (*(void (**)(uint64_t))(v14 + 16))(v12 - v11);
  v15 = *(_QWORD *)(v5 + 24);
  v16 = *(_QWORD *)(v5 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(v5, v15);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_2_2();
  v20 = v19 - v18;
  (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
  v2(v13, v20, v3, v8, v15, v9, v16);
  __swift_destroy_boxed_opaque_existential_0Tm(v5);
  __swift_destroy_boxed_opaque_existential_0Tm(v7);
  OUTLINED_FUNCTION_43_0();
}

void LocalIndexClient.init(searchAgent:itemFetcher:)()
{
  LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)();
}

void LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t isa;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)();
  uint64_t v126;
  uint64_t (*v127)();
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)();
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  Swift::String v162;
  Swift::String v163;
  Swift::String v164;
  Swift::String v165;
  Swift::String v166;
  Swift::String v167;
  uint64_t v168;
  Class v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(id, uint64_t, uint64_t);
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)();
  uint64_t v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  void (*v200)(_QWORD);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint8_t *v224;
  id v225;
  uint64_t v226;
  uint8_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t (*v230)();
  NSObject *v231;
  NSObject *v232;
  uint64_t (*v233)();
  uint8_t *v234;
  uint64_t v235;
  uint8_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint8_t *v239;
  NSObject *v240;
  uint64_t v241;
  NSObject *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint8_t *v253;
  uint64_t v254;
  uint64_t (*v255)(uint64_t, uint64_t);
  NSObject *v256;
  uint64_t v257;
  void *v258;
  id v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  NSObject *v277;
  _QWORD *v278;
  NSObject *v279;
  NSObject *v280;
  uint8_t *v281;
  uint8_t *v282;
  uint64_t v283;
  uint64_t (*v284)();
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void (*v290)(uint64_t);
  NSObject *v291;
  uint64_t v292;
  void *v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t (*v297)();
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint8_t *v302;
  uint64_t (*v303)();
  uint64_t v304;
  _QWORD *v305;
  uint64_t *v306;
  uint64_t v307;
  NSObject *v308;
  void *v309;
  NSObject *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  id v320;
  uint64_t v321;
  uint64_t v322;
  uint8_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint8_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  NSObject *v334;
  _QWORD *v335;
  NSObject *v336;
  uint64_t v337;
  NSObject *v338;
  uint64_t v339;
  uint8_t *v340;
  NSObject *v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  NSObject *v345;
  uint64_t v346;
  uint8_t *v347;
  uint8_t *v348;
  NSObject *v349;
  uint64_t v350;
  NSObject *v351;
  uint64_t v352;
  NSObject *v353;
  void (*v354)(uint64_t, NSObject *);
  uint64_t v355;
  uint64_t v356;
  NSObject *v357;
  uint64_t v358;
  uint64_t v359;
  id v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  NSObject *v375;
  NSObject *v376;
  uint8_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  BOOL v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  NSObject *v395;
  void *v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  id v402;
  NSObject *v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint8_t *v407;
  uint64_t v408;
  id v409;
  void *v410;
  uint64_t v411;
  uint64_t (*v412)(uint64_t, uint64_t);
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  NSObject *v420;
  uint64_t v421;
  uint8_t *v422;
  uint64_t v423;
  NSObject *v424;
  uint64_t v425;
  char v427;
  uint64_t v428;
  char v430;
  uint64_t v431;
  char v433;
  NSObject *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  uint8_t *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  id v468;
  void *v469;
  uint64_t v470;
  NSObject *v471;
  uint64_t v472;
  uint64_t v473;
  char *v474;
  char *v475;
  const char *v476;
  const char *v477;
  uint64_t v478;
  uint64_t v479;
  const char *v480;
  const char *v481;
  void *v482;
  void *v483;
  uint64_t v484;
  __int128 *v485;
  uint64_t v486;
  uint64_t v487;
  __int128 *v488;
  NSObject *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _QWORD *v500;
  uint8_t *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t (*v504)(uint64_t);
  uint64_t v505;
  uint64_t v506;
  uint64_t (*v507)();
  id v508;
  uint64_t v509;
  uint64_t v510;
  id v511;
  uint64_t v512;
  NSObject *v513;
  NSObject *v514;
  uint64_t v515;
  void *v516;
  NSObject *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  const char *v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  NSObject *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  Swift::String v529;
  Swift::String v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  void *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  id v543;
  void *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  id v551;
  void *v552;
  const char *v553;
  uint64_t v554;
  uint64_t v555;
  void *v556;
  __int128 *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  NSObject *v564;
  os_log_type_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  _QWORD *v571;
  uint64_t v572;
  uint8_t *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  NSObject *v577;
  NSObject *v578;
  id v579;
  NSObject *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  NSObject *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  uint8_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  NSObject *v597;
  id v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  NSObject *v606;
  uint64_t v607;
  id v608;
  NSObject *v609;
  uint64_t v610;
  uint64_t v611;
  id v612;
  void *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  NSObject *v618;
  id v619;
  NSObject *v620;
  uint64_t v621;
  id v622;
  id v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  id v628;
  void *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  id v635;
  void *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  _QWORD *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  _QWORD *v652;
  uint8_t *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  NSObject *v659;
  uint64_t v660;
  uint64_t v661;
  NSObject *v662;
  uint64_t v663;
  uint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  uint64_t v667;
  os_log_type_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  _QWORD *v674;
  uint64_t v675;
  uint8_t *v676;
  uint64_t v677;
  NSObject *v678;
  uint64_t v679;
  uint64_t v680;
  NSObject *v681;
  uint64_t v682;
  uint64_t v683;
  id v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  void *v689;
  BOOL v690;
  uint64_t v691;
  void *v692;
  uint64_t v693;
  uint64_t v694;
  Swift::String v695;
  uint64_t v696;
  id v697;
  NSObject *v698;
  void *v699;
  NSObject *v700;
  uint64_t v701;
  uint64_t v702;
  uint8_t *v703;
  uint64_t v704;
  uint64_t v705;
  id v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  NSObject *v713;
  uint64_t v714;
  NSObject *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  _QWORD *v731;
  uint8_t *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  _QWORD *v736;
  uint64_t v737;
  int v738;
  uint64_t v739;
  void *v740;
  uint64_t v741;
  uint64_t v742;
  void *v743;
  uint64_t v744;
  uint8_t *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unsigned __int8 v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  NSObject *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  _QWORD *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  _QWORD *v770;
  uint8_t *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  BOOL v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  id v781;
  void *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  _QWORD *v798;
  uint64_t v799;
  uint64_t v800;
  int v801;
  NSObject *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  _QWORD *v816;
  uint8_t *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  char v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  NSObject *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  _QWORD *v833;
  uint8_t *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  NSObject *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  _QWORD *v845;
  uint8_t *v846;
  uint64_t v847;
  uint64_t v848;
  char *v849;
  uint64_t v850;
  os_log_type_t v851;
  uint64_t v852;
  uint64_t v853;
  uint8_t *v854;
  uint64_t v855;
  uint64_t (*i)();
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint8_t *v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  void *v866;
  char *v867;
  const char *v868;
  uint64_t (*v869)();
  const char *v870;
  void *v871;
  __int128 *v872;
  __int128 *v873;
  uint64_t v874;
  uint64_t (*v875)();
  char *v876;
  uint64_t (*v877)();
  char *v878;
  unint64_t v879;
  unint64_t v880;
  char *v881;
  const char *v882;
  unint64_t v883;
  uint64_t v884;
  const char *v885;
  unint64_t v886;
  void *v887;
  uint64_t v888;
  uint64_t v889;
  const char *v890;
  const char *v891;
  unint64_t v892;
  unint64_t v893;
  uint64_t v894;
  const char *v895;
  unint64_t v896;
  NSObject *v897;
  _QWORD *v898;
  NSObject *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t (*v907)();
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t (*v911)();
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t (*v915)();
  uint64_t v916;
  uint64_t v917;
  NSObject *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t (*v924)();
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t (*v930)();
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t (*v937)();
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  const char *v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  __int128 *v951;
  uint64_t (*v952)();
  uint64_t v953;
  const char *v954;
  unint64_t v955;
  uint64_t (*v956)();
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  NSObject *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  void *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  id v978;
  uint64_t v979;
  uint64_t v980;
  const char *v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  NSObject *v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  NSObject *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  void (*v1004)(_QWORD);
  uint64_t v1005;
  uint8_t *v1006;
  uint64_t v1007;
  id v1008;
  uint64_t v1009;
  uint64_t (*v1010)();
  uint8_t *v1011;
  NSObject *v1012;
  uint64_t v1013;
  void *v1014;
  NSObject *v1015;
  NSObject *v1016;
  NSObject *v1017;
  uint64_t (*v1018)();
  NSObject *v1019;
  uint64_t (*v1020)();
  NSObject *v1021;
  NSObject *v1022;
  unsigned int v1023;
  _QWORD v1024[5];
  uint64_t v1025;
  _QWORD v1026[4];
  _QWORD v1027[7];
  uint64_t v1028;
  uint64_t v1029[2];
  char *v1030;
  __int128 v1031;
  __int128 v1032;
  uint64_t v1033;
  Swift::String v1034;
  Swift::String v1035;
  Swift::String v1036;

  OUTLINED_FUNCTION_18_2();
  v1 = v0;
  v979 = v2;
  v980 = v3;
  v5 = v4;
  v7 = v6;
  type metadata accessor for AppEntityItem();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_0_3();
  v898 = v9;
  v10 = OUTLINED_FUNCTION_23_2();
  v905 = *(_QWORD *)(type metadata accessor for Contact(v10) - 8);
  OUTLINED_FUNCTION_150_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_39_16();
  v903 = v12;
  v904 = v13;
  OUTLINED_FUNCTION_216_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_34_1();
  v910 = v15;
  v16 = OUTLINED_FUNCTION_23_2();
  v902 = *(_QWORD *)(type metadata accessor for WalletPass(v16) - 8);
  OUTLINED_FUNCTION_150_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_39_16();
  v900 = v18;
  v901 = v19;
  OUTLINED_FUNCTION_216_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_34_1();
  v906 = v21;
  v22 = OUTLINED_FUNCTION_23_2();
  v914 = *(_QWORD *)(type metadata accessor for WalletTransaction(v22) - 8);
  OUTLINED_FUNCTION_150_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_39_16();
  v912 = v24;
  v913 = v25;
  OUTLINED_FUNCTION_216_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_34_1();
  v918 = v27;
  v28 = OUTLINED_FUNCTION_23_2();
  v922 = *(_QWORD *)(type metadata accessor for FileDocument(v28) - 8);
  OUTLINED_FUNCTION_150_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_39_16();
  v920 = v30;
  v921 = v31;
  OUTLINED_FUNCTION_216_0();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_34_1();
  v925 = v33;
  v34 = OUTLINED_FUNCTION_23_2();
  v929 = *(_QWORD *)(type metadata accessor for NoteDocument(v34) - 8);
  OUTLINED_FUNCTION_150_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_39_16();
  v927 = v36;
  v928 = v37;
  OUTLINED_FUNCTION_216_0();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_34_1();
  v932 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Photo?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_0_3();
  v941 = v41;
  v42 = OUTLINED_FUNCTION_23_2();
  v940 = type metadata accessor for Photo(v42);
  v936 = *(_QWORD *)(v940 - 8);
  OUTLINED_FUNCTION_150_3();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_39_16();
  v934 = v44;
  v935 = v45;
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_34_1();
  v939 = v47;
  v48 = OUTLINED_FUNCTION_23_2();
  v950 = *(_QWORD *)(type metadata accessor for CalendarEvent(v48) - 8);
  OUTLINED_FUNCTION_150_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_39_16();
  v948 = v50;
  v949 = v51;
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_34_1();
  v960 = v53;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v54);
  OUTLINED_FUNCTION_18_1();
  v909 = v55;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_31_0();
  v908 = v57;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_31_0();
  v917 = v59;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_31_0();
  v916 = v61;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v62);
  OUTLINED_FUNCTION_31_0();
  v931 = v63;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v64);
  OUTLINED_FUNCTION_31_0();
  v933 = v65;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v66);
  OUTLINED_FUNCTION_31_0();
  v947 = v67;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v68);
  OUTLINED_FUNCTION_31_0();
  v991 = v69;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v70);
  OUTLINED_FUNCTION_34_1();
  v954 = v71;
  v72 = OUTLINED_FUNCTION_23_2();
  type metadata accessor for MobileSMSDocument(v72);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v73);
  OUTLINED_FUNCTION_0_3();
  v953 = v74;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v75);
  OUTLINED_FUNCTION_18_1();
  v919 = v76;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v77);
  OUTLINED_FUNCTION_31_0();
  v923 = v78;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v79);
  OUTLINED_FUNCTION_31_0();
  v926 = v80;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v81);
  OUTLINED_FUNCTION_31_0();
  v951 = (__int128 *)v82;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v83);
  OUTLINED_FUNCTION_31_0();
  v944 = v84;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v85);
  OUTLINED_FUNCTION_31_0();
  v952 = (uint64_t (*)())v86;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v87);
  OUTLINED_FUNCTION_34_1();
  v957 = v88;
  v89 = OUTLINED_FUNCTION_23_2();
  type metadata accessor for EmailDocument(v89);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v90);
  OUTLINED_FUNCTION_0_3();
  v967 = v91;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RestaurantReservation?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v92);
  OUTLINED_FUNCTION_0_3();
  v943 = v93;
  v942 = OUTLINED_FUNCTION_259_0();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v94);
  OUTLINED_FUNCTION_0_3();
  v938 = v95;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v96);
  OUTLINED_FUNCTION_0_3();
  v959 = v97;
  v958 = OUTLINED_FUNCTION_258();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v98);
  OUTLINED_FUNCTION_0_3();
  v946 = v99;
  v100 = OUTLINED_FUNCTION_23_2();
  v977 = type metadata accessor for SearchResultItem(v100);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v101);
  OUTLINED_FUNCTION_0_3();
  v976 = v102;
  v103 = OUTLINED_FUNCTION_23_2();
  type metadata accessor for SearchResult(v103);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v104);
  OUTLINED_FUNCTION_0_3();
  v975 = v105;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightReservation?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v106);
  OUTLINED_FUNCTION_0_3();
  v972 = v107;
  v108 = OUTLINED_FUNCTION_23_2();
  v971 = type metadata accessor for FlightReservation(v108);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v109);
  OUTLINED_FUNCTION_0_3();
  v966 = v110;
  v111 = OUTLINED_FUNCTION_13();
  isa = (uint64_t)v111[-1].isa;
  MEMORY[0x24BDAC7A8](v111);
  OUTLINED_FUNCTION_18_1();
  v992 = v113;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v114);
  OUTLINED_FUNCTION_31_0();
  v899 = v115;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v116);
  OUTLINED_FUNCTION_31_0();
  v911 = (uint64_t (*)())v117;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v118);
  OUTLINED_FUNCTION_31_0();
  v897 = v119;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v120);
  OUTLINED_FUNCTION_31_0();
  v907 = (uint64_t (*)())v121;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v122);
  OUTLINED_FUNCTION_31_0();
  v915 = (uint64_t (*)())v123;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v124);
  OUTLINED_FUNCTION_31_0();
  v924 = v125;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v126);
  OUTLINED_FUNCTION_31_0();
  v930 = v127;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v128);
  OUTLINED_FUNCTION_31_0();
  v990 = v129;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v130);
  OUTLINED_FUNCTION_31_0();
  v956 = v131;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v132);
  OUTLINED_FUNCTION_31_0();
  v945 = v133;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v134);
  OUTLINED_FUNCTION_31_0();
  v970 = v135;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v136);
  OUTLINED_FUNCTION_31_0();
  v986 = v137;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v138);
  OUTLINED_FUNCTION_31_0();
  v937 = (uint64_t (*)())v139;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v140);
  OUTLINED_FUNCTION_31_0();
  v963 = v141;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v142);
  OUTLINED_FUNCTION_31_0();
  v962 = v143;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v144);
  OUTLINED_FUNCTION_31_0();
  v997 = v145;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v146);
  OUTLINED_FUNCTION_31_0();
  v996 = v147;
  OUTLINED_FUNCTION_17_1();
  v149 = MEMORY[0x24BDAC7A8](v148);
  v151 = ((char *)&v866 - v150);
  OUTLINED_FUNCTION_93_1(v149, &lazy cache variable for type metadata for SPSearchQueryContext);
  OUTLINED_FUNCTION_4_7();
  v152 = SPSearchQueryContext.__allocating_init(search:)(v7, v5);
  OUTLINED_FUNCTION_187_2((uint64_t)objc_msgSend(v152, sel_setWhyQuery_, 23), sel_setFetchL2Signals_);
  objc_msgSend(v152, sel_setQueryKind_, 11);
  v153 = objc_msgSend(v152, sel_setCurrentTime_, CFAbsoluteTimeGetCurrent());
  v154 = OUTLINED_FUNCTION_279_0((uint64_t)v153, sel_setAllowInternet_);
  v155 = OUTLINED_FUNCTION_187_2((uint64_t)v154, sel_setRetainBackendData_);
  v156 = OUTLINED_FUNCTION_187_2((uint64_t)v155, sel_setEnablePersonalAnswers_);
  OUTLINED_FUNCTION_279_0((uint64_t)v156, sel_setIsAppEntitySearch_);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v157 = OUTLINED_FUNCTION_8();
  v158 = specialized static Array._adoptStorage(_:count:)(v157, 1);
  v160 = v159;
  *(_QWORD *)&v1031 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *((_QWORD *)&v1031 + 1) = v161;
  v162._countAndFlagsBits = 40;
  v162._object = (void *)0xE100000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v162);
  v1034._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_317(v1034);
  OUTLINED_FUNCTION_96_0();
  v163._countAndFlagsBits = 2243873;
  v163._object = (void *)0xE300000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v163);
  v974 = (unint64_t)"yInstanceIdentifier";
  v164._object = (void *)0x800000024335AD70;
  v164._countAndFlagsBits = 0xD000000000000014;
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v164);
  v165._countAndFlagsBits = 0x207C7C2022;
  v165._object = (void *)0xE500000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v165);
  v1035._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_317(v1035);
  OUTLINED_FUNCTION_96_0();
  v166._countAndFlagsBits = 0x22203D2120;
  v166._object = (void *)0xE500000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v166);
  v1036._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_317(v1036);
  OUTLINED_FUNCTION_96_0();
  v167._countAndFlagsBits = 10530;
  v167._object = (void *)0xE200000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v167);
  *v160 = OUTLINED_FUNCTION_175_0();
  v160[1] = v168;
  destructiveProjectEnumData for GlobalSearchClient.QueryType(v158);
  v169 = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_249(v152, sel_setFilterQueries_);

  outlined init with copy of SearchResultRanking((uint64_t)v1 + 16, (uint64_t)&v1031);
  v170 = *((_QWORD *)&v1032 + 1);
  v171 = v1033;
  __swift_project_boxed_opaque_existential_1(&v1031, *((uint64_t *)&v1032 + 1));
  v172 = *(uint64_t (**)(id, uint64_t, uint64_t))(v171 + 24);
  v978 = v152;
  v173 = v172(v152, v170, v171);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v1031);
  specialized Array.count.getter(v173);
  if (!v174)
  {
    OUTLINED_FUNCTION_36_0();
    v850 = Logging.search.unsafeMutableAddressor();
    (*(void (**)(NSObject *, uint64_t, NSObject *))(isa + 16))(v151, v850, v111);
    Logger.logObject.getter();
    v851 = OUTLINED_FUNCTION_51_2();
    specialized static Array._allocateUninitialized(_:)(0);
    v853 = v852;
    if (OUTLINED_FUNCTION_269_0(v151))
    {
      v854 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      v1027[0] = 0;
      v1026[0] = 0;
      OUTLINED_FUNCTION_277_0(v854);
      specialized Sequence.forEach(_:)(v853, v855, (uint64_t)v1027, (uint64_t)v1026);
      OUTLINED_FUNCTION_56_0();
      OUTLINED_FUNCTION_19_2(&dword_24315F000, v151, v851, "LocalIndexClient.findMatches - Returning early. No sections found!", v854);
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_56_0();
    OUTLINED_FUNCTION_36_14((uint64_t)v151, *(uint64_t (**)(uint64_t, uint64_t))(isa + 8));
    OUTLINED_FUNCTION_299_0();
    OUTLINED_FUNCTION_263_0();

    OUTLINED_FUNCTION_121();
    goto LABEL_319;
  }
  v1018 = (uint64_t (*)())isa;
  v1019 = v111;
  static LocalIndexClient.results(for:)(v173);
  OUTLINED_FUNCTION_36_0();
  static LocalIndexClient.searchableItems(for:)();
  v176 = v175;
  OUTLINED_FUNCTION_121();
  v177 = OUTLINED_FUNCTION_46_0();
  v178 = specialized _ArrayProtocol.filter(_:)(v177);
  v179 = specialized Sequence.compactMap<A>(_:)(v178);
  v180 = specialized Set.init<A>(_:)(v179);
  v181 = specialized Sequence.compactMap<A>(_:)(v178);
  v1020 = 0;
  OUTLINED_FUNCTION_36_0();
  v182 = specialized Set.init<A>(_:)(v181);
  v969 = v1;
  outlined init with copy of SearchResultRanking((uint64_t)v1 + 56, (uint64_t)&v1031);
  v183 = v1033;
  __swift_project_boxed_opaque_existential_1(&v1031, *((uint64_t *)&v1032 + 1));
  specialized Set.union<A>(_:)(v180, v182);
  v184 = (*(uint64_t (**)(void))(v183 + 8))();
  OUTLINED_FUNCTION_56_0();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v1031);
  v1030 = (char *)OUTLINED_FUNCTION_299_0();
  v1029[1] = OUTLINED_FUNCTION_299_0();
  specialized static Array._allocateUninitialized(_:)(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  OUTLINED_FUNCTION_248_0();
  v961 = v185;
  v1029[0] = Dictionary.init(dictionaryLiteral:)();
  specialized static Array._allocateUninitialized(_:)(0);
  OUTLINED_FUNCTION_93_1(v186, (unint64_t *)&lazy cache variable for type metadata for CSSearchableItem);
  OUTLINED_FUNCTION_248_0();
  v187 = Dictionary.init(dictionaryLiteral:)();
  v1027[6] = 0;
  v1028 = v187;
  v1027[4] = v176;
  v1027[5] = 0;
  specialized EnumeratedSequence.Iterator.next()();
  if (!v188)
    goto LABEL_315;
  OUTLINED_FUNCTION_274_0();
  v973 = v184;
  v988 = 0x800000024335EA70;
  v987 = *MEMORY[0x24BDC2378];
  v965 = 0x800000024335EA90;
  v888 = *MEMORY[0x24BDC1F68];
  v189 = *MEMORY[0x24BDC1E68];
  v873 = (__int128 *)*MEMORY[0x24BDC2000];
  v874 = v189;
  v872 = (__int128 *)*MEMORY[0x24BDC2008];
  v884 = *MEMORY[0x24BDC1F80];
  v983 = *MEMORY[0x24BDC1D38];
  v964 = *MEMORY[0x24BDC1930];
  v894 = *MEMORY[0x24BDC1938];
  v889 = *MEMORY[0x24BDC1940];
  v871 = (void *)0x800000024335EB10;
  v887 = (void *)0x800000024335EB60;
  v968 = MEMORY[0x24BEE4AD8] + 8;
  v981 = "com.apple.omniSearch";
  v982 = 0x800000024335DA40;
  v955 = v974 | 0x8000000000000000;
  v895 = "sms://open?message-guid=";
  v896 = 0x800000024335EB80;
  v890 = "com.apple.MobileAddressBook";
  v892 = 0x800000024335DA00;
  v885 = "encodedCSSearchableItem";
  v886 = 0x800000024335BCA0;
  v882 = "com.apple.MobileSMS";
  v883 = 0x800000024335BD00;
  v878 = "ch-3400.85.1\n";
  v879 = 0x800000024335EB40;
  v880 = 0x800000024335A900;
  v881 = "tion?transactionIdentifier=";
  v876 = "ocs.iCloudDriveFileProvider";
  v877 = (uint64_t (*)())0x800000024335A930;
  v875 = (uint64_t (*)())0x800000024335BCC0;
  v866 = (void *)0x800000024335EAF0;
  v867 = "beddingDistances";
  v868 = "v20@?0i8@\"NSError\"12";
  v869 = (uint64_t (*)())0x800000024335D9E0;
  v870 = "com.apple.mobileslideshow";
  v891 = "com.apple.Passbook";
  v893 = 0x800000024335BCE0;
  v190 = v1018;
  v191 = v992;
  do
  {
    v192 = objc_msgSend((id)isa, sel_uniqueIdentifier, v866);
    OUTLINED_FUNCTION_137_5();
    OUTLINED_FUNCTION_128_5();
    *(_QWORD *)&v1031 = v176;
    *((_QWORD *)&v1031 + 1) = v187;
    v1027[0] = 1096110926;
    v1027[1] = 0xE400000000000000;
    v176 = lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    v193 = BidirectionalCollection<>.starts<A>(with:)();
    OUTLINED_FUNCTION_56_0();
    if ((v193 & 1) != 0)
    {

      goto LABEL_155;
    }
    outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter((void *)isa);
    if (v195)
    {
      v196 = v194;
      v197 = v195;
      v198 = objc_msgSend((id)isa, sel_attributeSet);
      v199 = Logging.search.unsafeMutableAddressor();
      v200 = (void (*)(_QWORD))*((_QWORD *)v190 + 2);
      v1003 = v199;
      v1004 = v200;
      v200(v996);
      v201 = v196;
      v202 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v202 + 16) = v111;
      v203 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v203 + 16) = isa;
      v204 = OUTLINED_FUNCTION_8();
      v1013 = v201;
      *(_QWORD *)(v204 + 16) = v201;
      *(_QWORD *)(v204 + 24) = v197;
      v205 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v205 + 16) = v198;
      v995 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v995 + 16) = v198;
      v1015 = v198;
      v989 = isa;
      v994 = (id)isa;
      v1014 = (void *)v197;
      OUTLINED_FUNCTION_115();
      v1012 = Logger.logObject.getter();
      LODWORD(v1002) = static os_log_type_t.info.getter();
      v1007 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v1007 + 16) = 0;
      v1006 = (uint8_t *)OUTLINED_FUNCTION_8();
      v1006[16] = 8;
      v206 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v206 + 16) = partial apply for implicit closure #2 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v206 + 24) = v202;
      v207 = (_QWORD *)OUTLINED_FUNCTION_8();
      v1008 = v207;
      v207[2] = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
      v207[3] = v206;
      v998 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v998 + 16) = 32;
      v1011 = (uint8_t *)OUTLINED_FUNCTION_8();
      v1011[16] = 8;
      v208 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v208 + 16) = partial apply for implicit closure #3 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v208 + 24) = v203;
      v209 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v209 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v209 + 24) = v208;
      v210 = v209;
      v1010 = (uint64_t (*)())v209;
      v211 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v211 + 16) = 32;
      v212 = v211;
      v1009 = v211;
      v1005 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v1005 + 16) = 8;
      v213 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v213 + 16) = partial apply for implicit closure #7 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v213 + 24) = v204;
      v214 = OUTLINED_FUNCTION_8();
      v1000 = v214;
      *(_QWORD *)(v214 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v214 + 24) = v213;
      v215 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v215 + 16) = 32;
      v999 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v999 + 16) = 8;
      v216 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v216 + 16) = partial apply for implicit closure #5 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v216 + 24) = v205;
      v217 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v217 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v217 + 24) = v216;
      v1017 = OUTLINED_FUNCTION_8();
      LOBYTE(v1017[2].isa) = 32;
      v1016 = OUTLINED_FUNCTION_8();
      LOBYTE(v1016[2].isa) = 8;
      v218 = OUTLINED_FUNCTION_8();
      v219 = v995;
      *(_QWORD *)(v218 + 16) = partial apply for implicit closure #6 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v218 + 24) = v219;
      v220 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v220 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v220 + 24) = v218;
      v1001 = v215;
      v995 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
      v221 = OUTLINED_FUNCTION_8();
      v993 = specialized static Array._adoptStorage(_:count:)(v221, 15);
      v222 = v1007;
      *v223 = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[1] = v222;
      v224 = v1006;
      v223[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[3] = v224;
      v225 = v1008;
      v223[4] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
      v223[5] = v225;
      v226 = v998;
      v223[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[7] = v226;
      v227 = v1011;
      v223[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[9] = v227;
      v223[10] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[11] = v210;
      v223[12] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[13] = v212;
      v228 = v1005;
      v223[14] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[15] = v228;
      v229 = v1000;
      v223[16] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[17] = v229;
      v223[18] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[19] = v215;
      v230 = (uint64_t (*)())v999;
      v223[20] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[21] = v230;
      v223[22] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[23] = v217;
      v231 = v1017;
      v223[24] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[25] = v231;
      v232 = v1016;
      v223[26] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[27] = v232;
      v223[28] = closure #1 in OSLogArguments.append(_:)partial apply;
      v223[29] = v220;
      swift_retain();
      OUTLINED_FUNCTION_10_8();
      swift_retain();
      OUTLINED_FUNCTION_5_9();
      swift_retain();
      swift_retain();
      swift_retain();
      v233 = v230;
      swift_retain();
      OUTLINED_FUNCTION_0_11();
      OUTLINED_FUNCTION_1_11();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_12_9();
      swift_retain();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_18_8();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v1012, (os_log_type_t)v1002))
      {
        v234 = v1006;
        v235 = v1005;
        v985 = v217;
        v993 = v220;
        v236 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v237 = specialized static UnsafeMutablePointer.allocate(capacity:)();
        v1026[0] = 0;
        v984 = v237;
        v1024[0] = v237;
        *(_WORD *)v236 = 1282;
        v1027[0] = v236 + 2;
        *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)&v1031 + 1) = v1007;
        OUTLINED_FUNCTION_144_2();
        if (!v230)
        {
          OUTLINED_FUNCTION_9_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v234;
          OUTLINED_FUNCTION_5_29();
          OUTLINED_FUNCTION_50();
          *(_QWORD *)&v1031 = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
          *((_QWORD *)&v1031 + 1) = v1008;
          OUTLINED_FUNCTION_5_29();
          v238 = v1009;
          OUTLINED_FUNCTION_13_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v998;
          OUTLINED_FUNCTION_5_29();
          v239 = v1011;
          OUTLINED_FUNCTION_13_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v239;
          OUTLINED_FUNCTION_5_29();
          OUTLINED_FUNCTION_75_0();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1010;
          OUTLINED_FUNCTION_5_29();
          v1011 = v236;
          OUTLINED_FUNCTION_75_0();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v238;
          OUTLINED_FUNCTION_5_29();
          OUTLINED_FUNCTION_50();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v235;
          OUTLINED_FUNCTION_5_29();
          v240 = v1016;
          v241 = v999;
          OUTLINED_FUNCTION_9_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1000;
          OUTLINED_FUNCTION_5_29();
          OUTLINED_FUNCTION_9_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1001;
          OUTLINED_FUNCTION_5_29();
          OUTLINED_FUNCTION_9_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v241;
          OUTLINED_FUNCTION_5_29();
          v242 = v1017;
          OUTLINED_FUNCTION_3_6();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v985;
          OUTLINED_FUNCTION_5_29();
          OUTLINED_FUNCTION_9_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v242;
          OUTLINED_FUNCTION_5_29();
          OUTLINED_FUNCTION_13_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v240;
          OUTLINED_FUNCTION_5_29();
          v243 = v993;
          OUTLINED_FUNCTION_75_0();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v243;
          OUTLINED_FUNCTION_5_29();
          v1020 = 0;
          OUTLINED_FUNCTION_13_8();
          _os_log_impl(&dword_24315F000, v1012, (os_log_type_t)v1002, "Result Rank %ld: id:%s, bundle:%s, L2:%s, L1:%s", v1011, 0x34u);
          swift_arrayDestroy();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_320;
      }

      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_13_8();
      OUTLINED_FUNCTION_11_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_3_6();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_50();
      swift_release();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_289_0();
      OUTLINED_FUNCTION_36_14(v996, v255);
      v256 = v1015;
      OUTLINED_FUNCTION_62_9();
      v258 = (void *)MEMORY[0x2494F5BB8](v257 + 7, v988);
      v259 = -[NSObject attributeForKey:](v256, sel_attributeForKey_, v258);

      if (v259)
      {
        _bridgeAnyObjectToAny(_:)();
        OUTLINED_FUNCTION_13_12();
      }
      else
      {
        v1031 = 0u;
        v1032 = 0u;
      }
      v260 = v1013;
      OUTLINED_FUNCTION_139_3((uint64_t)&v1031, (uint64_t)v1027);
      if (-[NSObject attributeForKey:](v256, sel_attributeForKey_, v987))
      {
        _bridgeAnyObjectToAny(_:)();
        OUTLINED_FUNCTION_13_12();
      }
      else
      {
        v1031 = 0u;
        v1032 = 0u;
      }
      OUTLINED_FUNCTION_139_3((uint64_t)&v1031, (uint64_t)v1026);
      OUTLINED_FUNCTION_49_15();
      v261 = OUTLINED_FUNCTION_8();
      v262 = (uint64_t)v1014;
      *(_QWORD *)(v261 + 16) = v260;
      *(_QWORD *)(v261 + 24) = v262;
      OUTLINED_FUNCTION_264_0((uint64_t)v1027);
      v263 = OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_139_3((uint64_t)&v1031, v263 + 16);
      OUTLINED_FUNCTION_264_0((uint64_t)v1026);
      v264 = OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_139_3((uint64_t)&v1031, v264 + 16);
      OUTLINED_FUNCTION_4_7();
      v1011 = (uint8_t *)Logger.logObject.getter();
      LODWORD(v1016) = static os_log_type_t.info.getter();
      v1017 = OUTLINED_FUNCTION_8();
      LOBYTE(v1017[2].isa) = 32;
      v1010 = (uint64_t (*)())OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_56_8((uint64_t)v1010);
      v265 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v265 + 16) = partial apply for implicit closure #7 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v265 + 24) = v261;
      v266 = OUTLINED_FUNCTION_8();
      v266[2].isa = (Class)implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v266[3].isa = (Class)v265;
      v267 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v267 + 16) = 32;
      v268 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v268 + 16) = 8;
      v269 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v269 + 16) = partial apply for implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v269 + 24) = v263;
      v270 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v270 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v270 + 24) = v269;
      v271 = v267;
      v272 = OUTLINED_FUNCTION_8();
      *(_BYTE *)(v272 + 16) = 32;
      v273 = OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_56_8(v273);
      v274 = OUTLINED_FUNCTION_8();
      *(_QWORD *)(v274 + 16) = partial apply for implicit closure #9 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
      *(_QWORD *)(v274 + 24) = v264;
      v275 = (_QWORD *)OUTLINED_FUNCTION_8();
      v275[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v275[3] = v274;
      v276 = OUTLINED_FUNCTION_8();
      specialized static Array._adoptStorage(_:count:)(v276, 9);
      v277 = v1017;
      *v278 = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[1] = v277;
      v233 = v1010;
      v278[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[3] = v233;
      v278[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[5] = v266;
      v278[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[7] = v271;
      v278[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[9] = v268;
      v278[10] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[11] = v270;
      v278[12] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[13] = v272;
      v278[14] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[15] = v273;
      v278[16] = closure #1 in OSLogArguments.append(_:)partial apply;
      v278[17] = v275;
      swift_retain();
      OUTLINED_FUNCTION_10_8();
      v1012 = v266;
      OUTLINED_FUNCTION_12_9();
      OUTLINED_FUNCTION_2_8();
      OUTLINED_FUNCTION_18_8();
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_0_11();
      OUTLINED_FUNCTION_1_11();
      v279 = v1011;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v279, (os_log_type_t)v1016))
      {
        v1007 = v270;
        v280 = v1012;
        v1008 = v275;
        v1009 = v271;
        v281 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v282 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v1021 = 0;
        v1006 = v282;
        v1025 = (uint64_t)v282;
        *(_WORD *)v281 = 770;
        v1024[0] = v281 + 2;
        *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)&v1031 + 1) = v1017;
        OUTLINED_FUNCTION_4_29();
        if (!v233)
        {
          swift_release();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = 0;
          OUTLINED_FUNCTION_1_26();
          v1020 = (uint64_t (*)())v272;
          OUTLINED_FUNCTION_69();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v280;
          OUTLINED_FUNCTION_1_26();
          OUTLINED_FUNCTION_50();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1009;
          OUTLINED_FUNCTION_1_26();
          OUTLINED_FUNCTION_9_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v268;
          OUTLINED_FUNCTION_1_26();
          OUTLINED_FUNCTION_4_12();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1007;
          OUTLINED_FUNCTION_1_26();
          OUTLINED_FUNCTION_9_8();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1020;
          OUTLINED_FUNCTION_1_26();
          OUTLINED_FUNCTION_3_6();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v273;
          OUTLINED_FUNCTION_1_26();
          OUTLINED_FUNCTION_3_6();
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1008;
          OUTLINED_FUNCTION_1_26();
          OUTLINED_FUNCTION_9_8();
          OUTLINED_FUNCTION_267_0(&dword_24315F000, v279, (os_log_type_t)v1016, "Fetched result from bundleId %s with result retrieval type: %s, embedding distance for item: %s", v281);
          OUTLINED_FUNCTION_266_0();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_320;
      }

      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_50();
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_4_12();
      OUTLINED_FUNCTION_313_0();
      OUTLINED_FUNCTION_11_5();
      swift_release();
      v111 = *((_QWORD *)v1018 + 1);
      v283 = (uint64_t)v1019;
      OUTLINED_FUNCTION_224_1(v997);
      v187 = v990;
      isa = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
      v284 = v1020;
      v176 = v1013;
      OUTLINED_FUNCTION_62_9();
      v286 = v991;
      v287 = (uint64_t)v1014;
      if (v176 == v285 + 6 && v1014 == (void *)v982 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        OUTLINED_FUNCTION_36_0();
        isa = (uint64_t)v1015;
        if (-[NSObject attributeForKey:](v1015, sel_attributeForKey_, v983))
        {
          OUTLINED_FUNCTION_129_4();
          OUTLINED_FUNCTION_13_12();
        }
        else
        {
          OUTLINED_FUNCTION_59_10();
        }
        v291 = v986;
        OUTLINED_FUNCTION_139_3((uint64_t)v1024, (uint64_t)&v1031);
        if (!*((_QWORD *)&v1032 + 1))
        {
          v1020 = v284;
          OUTLINED_FUNCTION_97_9((uint64_t)&v1031);
LABEL_42:
          OUTLINED_FUNCTION_49_15();
          Logger.logObject.getter();
          LOBYTE(v187) = OUTLINED_FUNCTION_80();
          specialized static Array._allocateUninitialized(_:)(0);
          v176 = v301;
          v187 = v187;
          if (os_log_type_enabled(v291, (os_log_type_t)v187))
          {
            v302 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
            v1024[0] = 0;
            v1021 = 0;
            OUTLINED_FUNCTION_277_0(v302);
            v303 = v1020;
            specialized Sequence.forEach(_:)(v176, v304, (uint64_t)v1024, (uint64_t)&v1021);
            v1020 = v303;
            OUTLINED_FUNCTION_80_0();
            OUTLINED_FUNCTION_19_2(&dword_24315F000, v291, (os_log_type_t)v187, "LocalIndexClient: InstantAnswer has no eventType", v302);
            specialized UnsafeMutablePointer.deallocate()();
          }
          OUTLINED_FUNCTION_77_11();

          OUTLINED_FUNCTION_80_0();
          OUTLINED_FUNCTION_224_1((uint64_t)v291);
          goto LABEL_67;
        }
        OUTLINED_FUNCTION_96_8();
        if ((OUTLINED_FUNCTION_7_16() & 1) == 0)
        {
          v1020 = v284;
          goto LABEL_42;
        }
        v1017 = v1021;
        v187 = (uint64_t)v1022;
        OUTLINED_FUNCTION_62_9();
        v293 = (void *)MEMORY[0x2494F5BB8](v292 + 17, v965);
        v294 = objc_msgSend((id)isa, sel_attributeForKey_, v293);

        if (v294)
        {
          _bridgeAnyObjectToAny(_:)();
          OUTLINED_FUNCTION_13_12();
        }
        else
        {
          OUTLINED_FUNCTION_59_10();
        }
        v176 = (uint64_t)v994;
        OUTLINED_FUNCTION_139_3((uint64_t)v1024, (uint64_t)&v1031);
        if (*((_QWORD *)&v1032 + 1))
        {
          OUTLINED_FUNCTION_96_8();
          if (OUTLINED_FUNCTION_7_16())
          {
            v1014 = v1021;
            goto LABEL_52;
          }
        }
        else
        {
          OUTLINED_FUNCTION_97_9((uint64_t)&v1031);
        }
        specialized static Array._allocateUninitialized(_:)(0);
        v1014 = (void *)v307;
LABEL_52:
        outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.mailMessageID.getter(objc_msgSend((id)v176, sel_attributeSet));
        OUTLINED_FUNCTION_115();
        v308 = OUTLINED_FUNCTION_247_0();
        OUTLINED_FUNCTION_47();
        if (v308)
        {
          v1016 = v308;
          v1020 = v284;
          v309 = (void *)v176;
        }
        else
        {
          outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(objc_msgSend((id)v176, (SEL)&stru_2513D54F8.name), (SEL *)&selRef_eventMessageIdentifier);
          OUTLINED_FUNCTION_115();
          v310 = OUTLINED_FUNCTION_247_0();
          v1020 = v284;
          OUTLINED_FUNCTION_47();
          v309 = (void *)v176;
          if (v310)
          {
            v1016 = v310;
          }
          else
          {
            OUTLINED_FUNCTION_37_11(v962);
            v358 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v358 + 16) = v1017;
            *(_QWORD *)(v358 + 24) = v187;
            v359 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v359 + 16) = v309;
            v1009 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v1009 + 16) = v309;
            v360 = v309;
            v1010 = (uint64_t (*)())v187;
            OUTLINED_FUNCTION_23_0();
            v1016 = OUTLINED_FUNCTION_84_10();
            LODWORD(v1011) = static os_log_type_t.error.getter();
            v1013 = OUTLINED_FUNCTION_8();
            *(_BYTE *)(v1013 + 16) = 32;
            v1012 = OUTLINED_FUNCTION_8();
            LOBYTE(v1012[2].isa) = 8;
            v361 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v361 + 16) = partial apply for implicit closure #12 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
            *(_QWORD *)(v361 + 24) = v358;
            v362 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v362 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(_QWORD *)(v362 + 24) = v361;
            v363 = OUTLINED_FUNCTION_8();
            *(_BYTE *)(v363 + 16) = 32;
            v364 = OUTLINED_FUNCTION_8();
            *(_BYTE *)(v364 + 16) = 8;
            v365 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v365 + 16) = partial apply for implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
            *(_QWORD *)(v365 + 24) = v359;
            v366 = (_QWORD *)OUTLINED_FUNCTION_8();
            v366[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            v366[3] = v365;
            v367 = OUTLINED_FUNCTION_8();
            *(_BYTE *)(v367 + 16) = 32;
            v368 = OUTLINED_FUNCTION_8();
            *(_BYTE *)(v368 + 16) = 8;
            v369 = OUTLINED_FUNCTION_8();
            v370 = v1009;
            *(_QWORD *)(v369 + 16) = partial apply for implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
            *(_QWORD *)(v369 + 24) = v370;
            v371 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v371 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(_QWORD *)(v371 + 24) = v369;
            v372 = OUTLINED_FUNCTION_8();
            v1009 = specialized static Array._adoptStorage(_:count:)(v372, 9);
            v373 = v1013;
            *v374 = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[1] = v373;
            v375 = v1012;
            v374[2] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[3] = v375;
            v374[4] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[5] = v362;
            v374[6] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[7] = v363;
            v374[8] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[9] = v364;
            v374[10] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[11] = v366;
            v374[12] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[13] = v367;
            v374[14] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[15] = v368;
            v374[16] = closure #1 in OSLogArguments.append(_:)partial apply;
            v374[17] = v371;
            v233 = (uint64_t (*)())v362;
            swift_retain();
            swift_retain();
            OUTLINED_FUNCTION_10_8();
            OUTLINED_FUNCTION_7_12();
            OUTLINED_FUNCTION_18_8();
            OUTLINED_FUNCTION_0_11();
            OUTLINED_FUNCTION_2_8();
            OUTLINED_FUNCTION_1_11();
            OUTLINED_FUNCTION_75();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v1016, (os_log_type_t)v1011))
            {
              v376 = v1012;
              v1007 = v363;
              v1008 = v366;
              v1009 = v371;
              v377 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
              v378 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              v1021 = 0;
              v1005 = v378;
              v1025 = v378;
              v1006 = v377;
              *(_WORD *)v377 = 770;
              v1024[0] = v377 + 2;
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v1013;
              OUTLINED_FUNCTION_4_29();
              if (!v362)
              {
                OUTLINED_FUNCTION_50();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v376;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_75_0();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = 0;
                OUTLINED_FUNCTION_1_26();
                v379 = v1007;
                OUTLINED_FUNCTION_17_9();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v379;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_9_8();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v364;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_50();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v1008;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_69();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v367;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_50();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v368;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_9_8();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v1009;
                OUTLINED_FUNCTION_1_26();
                v1020 = 0;
                OUTLINED_FUNCTION_9_8();
                OUTLINED_FUNCTION_267_0(&dword_24315F000, v1016, (os_log_type_t)v1011, "InstantAnswer has no source email: eventType: %s, mailMessageId: %s, , eventMessageId: %s", v1006);
                OUTLINED_FUNCTION_266_0();
                specialized UnsafeMutablePointer.deallocate()();
              }
              goto LABEL_320;
            }
            OUTLINED_FUNCTION_122_5();
            OUTLINED_FUNCTION_50();
            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_4_12();
            OUTLINED_FUNCTION_3_6();
            OUTLINED_FUNCTION_13_8();
            OUTLINED_FUNCTION_9_8();
            OUTLINED_FUNCTION_11_5();
            OUTLINED_FUNCTION_313_0();
            swift_release();
            OUTLINED_FUNCTION_289_0();
            OUTLINED_FUNCTION_294_0(v962, v412);
            v309 = v994;
            v187 = (uint64_t)v1010;
            OUTLINED_FUNCTION_49_15();
            v413 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v413 + 16) = v973;
            v176 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v176 + 16) = partial apply for implicit closure #17 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
            *(_QWORD *)(v176 + 24) = v413;
            OUTLINED_FUNCTION_115();
            v1016 = OUTLINED_FUNCTION_84_10();
            v233 = (uint64_t (*)())static os_log_type_t.error.getter();
            v414 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_74_12(v414);
            v415 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_56_8(v415);
            v416 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v416 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
            *(_QWORD *)(v416 + 24) = v176;
            v417 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v417 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(_QWORD *)(v417 + 24) = v416;
            v418 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_70_9(v418);
            *v419 = closure #1 in OSLogArguments.append(_:)partial apply;
            v419[1] = v414;
            v419[2] = closure #1 in OSLogArguments.append(_:)partial apply;
            v419[3] = v415;
            v419[4] = closure #1 in OSLogArguments.append(_:)partial apply;
            v419[5] = v417;
            OUTLINED_FUNCTION_18_8();
            OUTLINED_FUNCTION_5_9();
            OUTLINED_FUNCTION_0_11();
            v420 = v1016;
            v421 = swift_bridgeObjectRelease();
            LODWORD(v1013) = (_DWORD)v233;
            if (OUTLINED_FUNCTION_91_6(v421, (os_log_type_t)v233))
            {
              v422 = (uint8_t *)OUTLINED_FUNCTION_73_9();
              v423 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              v1021 = 0;
              v1025 = v423;
              OUTLINED_FUNCTION_50_13(v422);
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v414;
              OUTLINED_FUNCTION_4_29();
              if (!v233)
              {
                OUTLINED_FUNCTION_17_9();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v415;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_75_0();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v417;
                OUTLINED_FUNCTION_1_26();
                v1020 = 0;
                OUTLINED_FUNCTION_3_6();
                OUTLINED_FUNCTION_29_2(&dword_24315F000, v1016, (os_log_type_t)v1013, "InstantAnswer Source Email Mapping Keys: %s", v422);
                OUTLINED_FUNCTION_34_2();
                specialized UnsafeMutablePointer.deallocate()();
              }
              goto LABEL_320;
            }

            OUTLINED_FUNCTION_3_6();
            OUTLINED_FUNCTION_75_0();
            OUTLINED_FUNCTION_17_9();
            v111 = v1012;
            ((void (*)(uint64_t, NSObject *))v1012)(v963, v1019);
            v1016 = 0;
            isa = (uint64_t)v1015;
          }
        }
        v424 = v1017;
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v424 && v425 == v187)
        {
          OUTLINED_FUNCTION_56_0();
        }
        else
        {
          v427 = OUTLINED_FUNCTION_18_7();
          OUTLINED_FUNCTION_36_0();
          if ((v427 & 1) == 0)
          {
            if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v424 && v428 == v187)
            {
              OUTLINED_FUNCTION_56_0();
            }
            else
            {
              v430 = OUTLINED_FUNCTION_18_7();
              OUTLINED_FUNCTION_36_0();
              if ((v430 & 1) == 0)
              {
                if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v424 && v431 == v187)
                {
                  OUTLINED_FUNCTION_56_0();
                }
                else
                {
                  v433 = OUTLINED_FUNCTION_18_7();
                  OUTLINED_FUNCTION_36_0();
                  if ((v433 & 1) == 0)
                  {
                    v1012 = v111;
                    OUTLINED_FUNCTION_272_0();
                    v434 = v424;
                    v233 = v937;
                    OUTLINED_FUNCTION_37_11((uint64_t)v937);
                    v435 = OUTLINED_FUNCTION_8();
                    *(_QWORD *)(v435 + 16) = v434;
                    *(_QWORD *)(v435 + 24) = v187;
                    v176 = OUTLINED_FUNCTION_84_10();
                    LODWORD(v434) = static os_log_type_t.error.getter();
                    v436 = OUTLINED_FUNCTION_8();
                    OUTLINED_FUNCTION_74_12(v436);
                    v437 = OUTLINED_FUNCTION_8();
                    OUTLINED_FUNCTION_56_8(v437);
                    v438 = OUTLINED_FUNCTION_8();
                    *(_QWORD *)(v438 + 16) = partial apply for implicit closure #7 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
                    *(_QWORD *)(v438 + 24) = v435;
                    v439 = OUTLINED_FUNCTION_8();
                    *(_QWORD *)(v439 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                    *(_QWORD *)(v439 + 24) = v438;
                    v440 = OUTLINED_FUNCTION_8();
                    v111 = OUTLINED_FUNCTION_70_9(v440);
                    v187 = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    *v441 = closure #1 in OSLogArguments.append(_:)partial apply;
                    v441[1] = v436;
                    v441[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                    v441[3] = v437;
                    v441[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                    v441[5] = v439;
                    OUTLINED_FUNCTION_2_8();
                    OUTLINED_FUNCTION_5_9();
                    OUTLINED_FUNCTION_1_11();
                    v442 = OUTLINED_FUNCTION_26_0();
                    LODWORD(v1017) = (_DWORD)v434;
                    if (OUTLINED_FUNCTION_300_0(v442, (os_log_type_t)v434))
                    {
                      v443 = (uint8_t *)OUTLINED_FUNCTION_73_9();
                      v444 = specialized static UnsafeMutablePointer.allocate(capacity:)();
                      v1021 = 0;
                      v1025 = v444;
                      OUTLINED_FUNCTION_50_13(v443);
                      *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                      *((_QWORD *)&v1031 + 1) = v436;
                      OUTLINED_FUNCTION_4_29();
                      if (!v233)
                      {
                        OUTLINED_FUNCTION_4_12();
                        *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                        *((_QWORD *)&v1031 + 1) = v437;
                        OUTLINED_FUNCTION_1_26();
                        OUTLINED_FUNCTION_75_0();
                        *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                        *((_QWORD *)&v1031 + 1) = v439;
                        OUTLINED_FUNCTION_1_26();
                        v1020 = 0;
                        OUTLINED_FUNCTION_69();
                        OUTLINED_FUNCTION_29_2(&dword_24315F000, v176, (os_log_type_t)v1017, "LocalIndexClient: Found instant answer of unknown type: %s", v443);
                        OUTLINED_FUNCTION_34_2();
                        specialized UnsafeMutablePointer.deallocate()();
                      }
                      goto LABEL_320;
                    }
                    OUTLINED_FUNCTION_77_11();

                    OUTLINED_FUNCTION_4_12();
                    OUTLINED_FUNCTION_75_0();
                    OUTLINED_FUNCTION_69();

                    OUTLINED_FUNCTION_122_5();
                    v600 = (uint64_t)v233;
LABEL_192:
                    OUTLINED_FUNCTION_41_12(v600);
                    goto LABEL_44;
                  }
                }
                OUTLINED_FUNCTION_56_0();
                v462 = v943;
                OUTLINED_FUNCTION_141_3();
                static LocalIndexClient.restaurantReservation(from:answerAttributes:)();
                OUTLINED_FUNCTION_121();
                v518 = OUTLINED_FUNCTION_245();
                OUTLINED_FUNCTION_22_2(v518, v519, v942);
                if (v385)
                {

                  OUTLINED_FUNCTION_122_5();
                  OUTLINED_FUNCTION_97_9((uint64_t)v1026);
                  OUTLINED_FUNCTION_97_9((uint64_t)v1027);
                  v460 = (_QWORD *)v462;
                  v461 = &demangling cache variable for type metadata for RestaurantReservation?;
                }
                else
                {
                  v465 = v938;
                  outlined init with take of SearchResult(v462, v938, type metadata accessor for RestaurantReservation);
                  OUTLINED_FUNCTION_198_1();
                  OUTLINED_FUNCTION_90_8();
LABEL_153:
                  swift_storeEnumTagMultiPayload();
                  v187 = v975;
                  SearchResult.init(_:csItem:)(v462, (uint64_t)v1016, v975);
                  specialized Array.append(_:)(v187);

                  OUTLINED_FUNCTION_120_5(v465);
                  OUTLINED_FUNCTION_97_9((uint64_t)v1026);
                  v460 = v1027;
                  v461 = &demangling cache variable for type metadata for Any?;
                }
                goto LABEL_154;
              }
            }
            OUTLINED_FUNCTION_56_0();
            v462 = v959;
            OUTLINED_FUNCTION_141_3();
            static LocalIndexClient.hotelReservation(from:answerAttributes:)();
            OUTLINED_FUNCTION_121();
            v463 = OUTLINED_FUNCTION_245();
            OUTLINED_FUNCTION_22_2(v463, v464, v958);
            if (!v385)
            {
              v465 = v946;
              outlined init with take of SearchResult(v462, v946, type metadata accessor for HotelReservation);
              OUTLINED_FUNCTION_198_1();
              OUTLINED_FUNCTION_90_8();
              goto LABEL_153;
            }

            OUTLINED_FUNCTION_122_5();
            OUTLINED_FUNCTION_97_9((uint64_t)v1026);
            OUTLINED_FUNCTION_97_9((uint64_t)v1027);
            v460 = (_QWORD *)v462;
            v461 = &demangling cache variable for type metadata for HotelReservation?;
LABEL_154:
            outlined destroy of MobileSMSDocument?((uint64_t)v460, v461);
            v191 = v992;
            v190 = v1018;
            goto LABEL_155;
          }
        }
        OUTLINED_FUNCTION_56_0();
        v445 = v972;
        v446 = OUTLINED_FUNCTION_141_3();
        static LocalIndexClient.flightReservation(from:answerAttributes:)(v446, v447, v448, v449, v450, v451, v452, v453, (uint64_t)v866, (uint64_t)v867, (uint64_t)v868, (uint64_t)v869, (uint64_t)v870, (uint64_t)v871, (uint64_t)v872, (uint64_t)v873, v874, (uint64_t)v875, (uint64_t)v876,
          (uint64_t)v877);
        OUTLINED_FUNCTION_121();
        v454 = OUTLINED_FUNCTION_245();
        OUTLINED_FUNCTION_22_2(v454, v455, v971);
        if (v385)
        {

          OUTLINED_FUNCTION_122_5();
          OUTLINED_FUNCTION_97_9((uint64_t)v1026);
          OUTLINED_FUNCTION_97_9((uint64_t)v1027);
          v460 = (_QWORD *)v445;
          v461 = &demangling cache variable for type metadata for FlightReservation?;
        }
        else
        {
          v456 = v966;
          v176 = isa;
          isa = (uint64_t)type metadata accessor for FlightReservation;
          outlined init with take of SearchResult(v445, v966, type metadata accessor for FlightReservation);
          v457 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]))
                        + 48);
          v458 = v976;
          outlined init with copy of SearchResult(v456, v976, type metadata accessor for FlightReservation);
          *(_QWORD *)(v458 + v457) = MEMORY[0x24BEE4AF8];
          swift_storeEnumTagMultiPayload();
          v459 = v975;
          SearchResult.init(_:csItem:)(v458, v989, v975);
          v187 = v309;
          specialized Array.append(_:)(v459);

          OUTLINED_FUNCTION_122_5();
          _s10OmniSearch0B6ResultVWOhTm_1(v456, type metadata accessor for FlightReservation);
          outlined destroy of MobileSMSDocument?((uint64_t)v1026, &demangling cache variable for type metadata for Any?);
          v460 = v1027;
          v461 = &demangling cache variable for type metadata for Any?;
        }
        goto LABEL_154;
      }
      v1020 = v284;
      OUTLINED_FUNCTION_62_9();
      if (v176 == v295 && v287 == v955 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        OUTLINED_FUNCTION_36_0();
        v187 = (uint64_t)v1015;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v1015, (SEL *)&selRef_contentType);
        v297 = v1018;
        if (!v296)
          goto LABEL_64;
        v298 = v296;
        OUTLINED_FUNCTION_62_9();
        if (v299 == v300 && v298 == v896)
        {
          OUTLINED_FUNCTION_36_0();
        }
        else
        {
          v176 = OUTLINED_FUNCTION_18_7();
          OUTLINED_FUNCTION_36_0();
          if ((v176 & 1) == 0)
          {
LABEL_64:
            OUTLINED_FUNCTION_77_11();

            OUTLINED_FUNCTION_76_1((uint64_t)v1026);
            OUTLINED_FUNCTION_76_1((uint64_t)v1027);
            v191 = v992;
            v190 = v297;
            goto LABEL_155;
          }
        }
        OUTLINED_FUNCTION_49_15();
        v314 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v314 + 16) = v187;
        v315 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v315 + 16) = v187;
        v316 = (void *)v187;
        v317 = OUTLINED_FUNCTION_8();
        v318 = v969;
        *(_QWORD *)(v317 + 16) = v969;
        *(_QWORD *)(v317 + 24) = v316;
        v319 = OUTLINED_FUNCTION_8();
        v1007 = v319;
        *(_QWORD *)(v319 + 16) = v318;
        *(_QWORD *)(v319 + 24) = v316;
        v320 = v316;
        swift_retain_n();
        v1008 = v320;
        v1009 = OUTLINED_FUNCTION_84_10();
        LODWORD(v1010) = static os_log_type_t.debug.getter();
        v1015 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_74_12((uint64_t)v1015);
        v1012 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_56_8((uint64_t)v1012);
        v321 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v321 + 16) = partial apply for implicit closure #19 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v321 + 24) = v314;
        v322 = OUTLINED_FUNCTION_8();
        v1014 = (void *)v322;
        *(_QWORD *)(v322 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v322 + 24) = v321;
        v1016 = OUTLINED_FUNCTION_8();
        LOBYTE(v1016[2].isa) = 32;
        v323 = (uint8_t *)OUTLINED_FUNCTION_8();
        v323[16] = 8;
        v324 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v324 + 16) = partial apply for implicit closure #20 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v324 + 24) = v315;
        v325 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v325 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v325 + 24) = v324;
        v1013 = OUTLINED_FUNCTION_8();
        *(_BYTE *)(v1013 + 16) = 32;
        v1006 = (uint8_t *)OUTLINED_FUNCTION_8();
        v1006[16] = 8;
        v326 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v326 + 16) = partial apply for implicit closure #21 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v326 + 24) = v317;
        v327 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v327 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v327 + 24) = v326;
        v1017 = OUTLINED_FUNCTION_8();
        LOBYTE(v1017[2].isa) = 32;
        v328 = OUTLINED_FUNCTION_8();
        *(_BYTE *)(v328 + 16) = 8;
        v329 = v323;
        v1011 = v323;
        v330 = OUTLINED_FUNCTION_8();
        v331 = v1007;
        *(_QWORD *)(v330 + 16) = partial apply for implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v330 + 24) = v331;
        v332 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v332 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v332 + 24) = v330;
        v333 = OUTLINED_FUNCTION_8();
        v1005 = specialized static Array._adoptStorage(_:count:)(v333, 12);
        v334 = v1015;
        *v335 = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[1] = v334;
        v336 = v1012;
        v335[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[3] = v336;
        v337 = (uint64_t)v1014;
        v335[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[5] = v337;
        v338 = v1016;
        v335[6] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[7] = v338;
        v335[8] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[9] = v329;
        v335[10] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[11] = v325;
        isa = v325;
        v339 = v1013;
        v335[12] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[13] = v339;
        v340 = v1006;
        v335[14] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[15] = v340;
        v335[16] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[17] = v327;
        v341 = v1017;
        v335[18] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[19] = v341;
        v335[20] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[21] = v328;
        v335[22] = closure #1 in OSLogArguments.append(_:)partial apply;
        v335[23] = v332;
        swift_retain();
        OUTLINED_FUNCTION_10_8();
        OUTLINED_FUNCTION_12_9();
        OUTLINED_FUNCTION_7_12();
        swift_retain();
        v1007 = isa;
        OUTLINED_FUNCTION_18_8();
        OUTLINED_FUNCTION_0_11();
        OUTLINED_FUNCTION_75();
        OUTLINED_FUNCTION_2_8();
        v233 = (uint64_t (*)())v1017;
        swift_retain();
        OUTLINED_FUNCTION_5_9();
        OUTLINED_FUNCTION_1_11();
        v342 = (void *)v1009;
        v343 = swift_bridgeObjectRelease();
        if (OUTLINED_FUNCTION_300_0(v343, (os_log_type_t)v1010))
        {
          v344 = (uint64_t)v1014;
          v345 = v1012;
          v1003 = v327;
          v1004 = (void (*)(_QWORD))v332;
          v346 = v1007;
          v347 = v1011;
          v348 = v340;
          v1005 = v328;
          v349 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v350 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v1021 = 0;
          v1002 = v350;
          v1025 = v350;
          LOWORD(v349->isa) = 1026;
          v1024[0] = (char *)&v349->isa + 2;
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v1015;
          OUTLINED_FUNCTION_4_29();
          if (!v233)
          {
            OUTLINED_FUNCTION_50();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v345;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_13_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v344;
            OUTLINED_FUNCTION_1_26();
            v351 = v1016;
            v1015 = v349;
            OUTLINED_FUNCTION_9_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v351;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_13_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v347;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_4_12();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v346;
            OUTLINED_FUNCTION_1_26();
            v352 = v1013;
            OUTLINED_FUNCTION_3_6();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v352;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_50();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v348;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_69();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v1003;
            OUTLINED_FUNCTION_1_26();
            v353 = v1009;
            OUTLINED_FUNCTION_69();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v1017;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_9_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v1005;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_69();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v1004;
            OUTLINED_FUNCTION_1_26();
            v1020 = 0;
            OUTLINED_FUNCTION_69();
            _os_log_impl(&dword_24315F000, v353, (os_log_type_t)v1010, "Email found: %s, subject: %s, authors:%s, recipients: %s", (uint8_t *)v1015, 0x2Au);
            swift_arrayDestroy();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_320;
        }

        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_11_5();
        OUTLINED_FUNCTION_4_12();
        OUTLINED_FUNCTION_50();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_313_0();
        swift_release();
        OUTLINED_FUNCTION_289_0();
        v354(v970, v1019);
        v176 = v989;
        v187 = v967;
        v111 = v994;
        static LocalIndexClient.emailDocument(from:)();
        v355 = OUTLINED_FUNCTION_53_15();
        OUTLINED_FUNCTION_207_0(v355, v356);
        OUTLINED_FUNCTION_90_8();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_172_0();
        v357 = v111;
        OUTLINED_FUNCTION_25_13();

LABEL_66:
        OUTLINED_FUNCTION_120_5(v187);
LABEL_67:
        OUTLINED_FUNCTION_97_9((uint64_t)v1026);
        v305 = v1027;
        v306 = &demangling cache variable for type metadata for Any?;
LABEL_68:
        outlined destroy of MobileSMSDocument?((uint64_t)v305, v306);
        v190 = v1018;
LABEL_69:
        v191 = v992;
        goto LABEL_155;
      }
      outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v994);
      if (!v312)
        goto LABEL_87;
      v313 = v312;
      if (v311 == 0xD000000000000013 && v312 == v893)
      {
        OUTLINED_FUNCTION_272_0();
        v1014 = (void *)v313;
        goto LABEL_74;
      }
      v176 = OUTLINED_FUNCTION_18_7();
      OUTLINED_FUNCTION_36_0();
      if ((v176 & 1) != 0)
      {
LABEL_74:
        OUTLINED_FUNCTION_272_0();
        isa = (uint64_t)v1015;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v1015, (SEL *)&selRef_contentType);
        v380 = v989;
        if (v381)
        {
          OUTLINED_FUNCTION_288_0();
          v385 = v384 == (v383 & 0xFFFFFFFFFFFFLL | 0x6D2E000000000000) && v382 == 0xEE00656761737365;
          if (v385)
          {
            v386 = OUTLINED_FUNCTION_36_0();
LABEL_138:
            v508 = OUTLINED_FUNCTION_36_10(v386, sel_uniqueIdentifier);
            OUTLINED_FUNCTION_137_5();
            OUTLINED_FUNCTION_128_5();
            outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter((void *)isa, (SEL *)&selRef_attachmentNames);
            if (!v509)
              specialized static Array._allocateUninitialized(_:)(0);
            v510 = specialized Dictionary.subscript.setter(v509, v176, v187);
            v511 = OUTLINED_FUNCTION_36_10(v510, sel_uniqueIdentifier);
            v512 = OUTLINED_FUNCTION_137_5();
            v514 = v513;

            if (objc_msgSend((id)isa, sel_attributeForKey_, v888))
            {
              OUTLINED_FUNCTION_129_4();
              OUTLINED_FUNCTION_13_12();
            }
            else
            {
              OUTLINED_FUNCTION_59_10();
            }
            v521 = v954;
            v522 = OUTLINED_FUNCTION_190_2();
            outlined init with take of URL?(v522, v523, &demangling cache variable for type metadata for Any?);
            v1012 = v111;
            if (*((_QWORD *)&v1032 + 1))
            {
              OUTLINED_FUNCTION_96_8();
              v524 = OUTLINED_FUNCTION_7_16();
              v525 = v1021;
              if (!v524)
                v525 = 0;
              v1016 = v525;
              if (v524)
                v526 = (uint64_t)v1022;
              else
                v526 = 0;
              v1014 = (void *)v526;
            }
            else
            {
              OUTLINED_FUNCTION_76_1((uint64_t)&v1031);
              v1016 = 0;
              v1014 = 0;
            }
            *(_QWORD *)&v1031 = OUTLINED_FUNCTION_228_1();
            *((_QWORD *)&v1031 + 1) = v527;
            OUTLINED_FUNCTION_62_9();
            v529._countAndFlagsBits = v528 + 4;
            v529._object = v887;
            DefaultStringInterpolation.appendLiteral(_:)(v529);
            v530._countAndFlagsBits = v512;
            v1017 = v514;
            v530._object = v514;
            specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v530);
            OUTLINED_FUNCTION_133_3();
            OUTLINED_FUNCTION_175_0();
            URL.init(string:)();
            OUTLINED_FUNCTION_36_0();
            outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter((void *)isa, (SEL *)&selRef_displayName);
            v1013 = v531;
            v533 = v532;
            outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter((void *)isa, (SEL *)&selRef_contentSnippet);
            v535 = v534;
            v536 = (void *)isa;
            v538 = v537;
            outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v536, (SEL *)&selRef_authorNames);
            if (!v539)
              specialized static Array._allocateUninitialized(_:)(0);
            v540 = v539;
            outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v1015, (SEL *)&selRef_recipientNames);
            if (!v541)
              specialized static Array._allocateUninitialized(_:)(0);
            v542 = (char *)v541;
            v543 = OUTLINED_FUNCTION_181_1(v541, sel_contentCreationDate);
            if (v543)
            {
              v544 = v543;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              v545 = (uint64_t)v521;
              v546 = 0;
            }
            else
            {
              v545 = (uint64_t)v521;
              v546 = 1;
            }
            v547 = OUTLINED_FUNCTION_78_10();
            v548 = 1;
            OUTLINED_FUNCTION_45_4(v545, v546, v549, v547);
            outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v957, (uint64_t)v952, &demangling cache variable for type metadata for URL?);
            v551 = OUTLINED_FUNCTION_181_1(v550, sel_URL);
            if (v551)
            {
              v552 = v551;
              v553 = v944;
              static URL._unconditionallyBridgeFromObjectiveC(_:)();

              v548 = 0;
            }
            else
            {
              v553 = v944;
            }
            v554 = OUTLINED_FUNCTION_5_2();
            OUTLINED_FUNCTION_45_4((uint64_t)v553, v548, v555, v554);
            specialized static Array._allocateUninitialized(_:)(0);
            OUTLINED_FUNCTION_210_0();
            v871 = v556;
            v872 = v557;
            v870 = v553;
            v869 = v952;
            v867 = v542;
            v868 = v954;
            v866 = (void *)v540;
            v558 = OUTLINED_FUNCTION_236();
            MobileSMSDocument.init(id:chatId:displayName:body:from:to:date:url:contentURL:photoAttachments:dataDetectorResults:)(v558, v559, v560, v561, v562, v533, v535, v538, (uint64_t)v866, (uint64_t)v867, (uint64_t)v868, (uint64_t)v869, (uint64_t)v870, (uint64_t)v871, v872);
            isa = (uint64_t)v1019;
            OUTLINED_FUNCTION_49_15();
            v563 = OUTLINED_FUNCTION_8();
            v564 = v994;
            *(_QWORD *)(v563 + 16) = v994;
            v1017 = v564;
            v176 = Logger.logObject.getter();
            v565 = static os_log_type_t.info.getter();
            v566 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_74_12(v566);
            v567 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_56_8(v567);
            v568 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v568 + 16) = partial apply for implicit closure #1 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
            *(_QWORD *)(v568 + 24) = v563;
            v569 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v569 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(_QWORD *)(v569 + 24) = v568;
            v570 = OUTLINED_FUNCTION_8();
            v111 = OUTLINED_FUNCTION_70_9(v570);
            v233 = closure #1 in OSLogArguments.append(_:)partial apply;
            *v571 = closure #1 in OSLogArguments.append(_:)partial apply;
            v571[1] = v566;
            v571[2] = closure #1 in OSLogArguments.append(_:)partial apply;
            v571[3] = v567;
            v571[4] = closure #1 in OSLogArguments.append(_:)partial apply;
            v571[5] = v569;
            OUTLINED_FUNCTION_2_8();
            OUTLINED_FUNCTION_1_11();
            OUTLINED_FUNCTION_5_9();
            v572 = OUTLINED_FUNCTION_26_0();
            if (OUTLINED_FUNCTION_300_0(v572, v565))
            {
              v573 = (uint8_t *)OUTLINED_FUNCTION_73_9();
              v574 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              v1021 = 0;
              v1025 = v574;
              OUTLINED_FUNCTION_50_13(v573);
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v566;
              OUTLINED_FUNCTION_4_29();
              if (!closure #1 in OSLogArguments.append(_:)partial apply)
              {
                OUTLINED_FUNCTION_4_12();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v567;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_69();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v569;
                OUTLINED_FUNCTION_1_26();
                v1020 = closure #1 in OSLogArguments.append(_:)partial apply;
                OUTLINED_FUNCTION_75_0();
                OUTLINED_FUNCTION_29_2(&dword_24315F000, v176, v565, "Message found: %s", v573);
                OUTLINED_FUNCTION_34_2();
                specialized UnsafeMutablePointer.deallocate()();
              }
              goto LABEL_320;
            }

            OUTLINED_FUNCTION_75_0();
            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_4_12();
            OUTLINED_FUNCTION_63_12();
            v187 = v953;
            v575 = OUTLINED_FUNCTION_53_15();
            OUTLINED_FUNCTION_207_0(v575, v576);
            OUTLINED_FUNCTION_90_8();
            swift_storeEnumTagMultiPayload();
            OUTLINED_FUNCTION_68_13();
            v577 = v1017;
            OUTLINED_FUNCTION_25_13();

            OUTLINED_FUNCTION_85_9();
            OUTLINED_FUNCTION_120_5(v187);
            outlined destroy of MobileSMSDocument?(v957, &demangling cache variable for type metadata for URL?);
            goto LABEL_67;
          }
          OUTLINED_FUNCTION_303();
          v176 = OUTLINED_FUNCTION_18_7();
          v386 = OUTLINED_FUNCTION_36_0();
          if ((v176 & 1) != 0)
            goto LABEL_138;
        }
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter((void *)isa, (SEL *)&selRef_contentType);
        v111 = v1018;
        if (!v387)
          goto LABEL_86;
        OUTLINED_FUNCTION_288_0();
        if (v390 == (v389 & 0xFFFFFFFFFFFFLL | 0x682E000000000000) && v388 == 0xEB00000000636965)
        {
          v392 = OUTLINED_FUNCTION_36_0();
        }
        else
        {
          OUTLINED_FUNCTION_303();
          v176 = OUTLINED_FUNCTION_18_7();
          v392 = OUTLINED_FUNCTION_36_0();
          if ((v176 & 1) == 0)
          {
LABEL_86:
            OUTLINED_FUNCTION_77_11();
LABEL_182:

            OUTLINED_FUNCTION_76_1((uint64_t)v1026);
            OUTLINED_FUNCTION_76_1((uint64_t)v1027);
            v191 = v992;
            v190 = (uint64_t (*)())v111;
            goto LABEL_155;
          }
        }
        v578 = v994;
        v579 = OUTLINED_FUNCTION_36_10(v392, sel_uniqueIdentifier);
        OUTLINED_FUNCTION_137_5();
        OUTLINED_FUNCTION_128_5();
        v580 = v578;
        specialized Dictionary.subscript.setter(v380, v176, v187);

        goto LABEL_182;
      }
LABEL_87:
      v393 = v1013;
      v394 = (uint64_t)v1014;
      if (v1013 == 0xD000000000000013 && v1014 == (void *)v892 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        OUTLINED_FUNCTION_36_0();
        v395 = v1015;
        outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v1015, (SEL *)&selRef_authorNames);
        if (!v396)
          specialized static Array._allocateUninitialized(_:)(0);
        v397 = v396;
        outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v395, (SEL *)&selRef_recipientNames);
        v1012 = v111;
        if (!v398)
          specialized static Array._allocateUninitialized(_:)(0);
        v399 = v398;
        v400 = specialized Set.init<A>(_:)((uint64_t)v397);
        v401 = specialized Set.init<A>(_:)(v399);
        v402 = OUTLINED_FUNCTION_242_0(v401, sel_uniqueIdentifier);
        v1017 = OUTLINED_FUNCTION_137_5();
        v1016 = v403;

        v404 = (void *)OUTLINED_FUNCTION_220_0();
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v404, (SEL *)&selRef_title);
        v1014 = (void *)v405;
        v1013 = v406;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v397, (SEL *)&selRef_contentDescription);
        v1011 = v407;
        v1010 = (uint64_t (*)())v408;
        v409 = OUTLINED_FUNCTION_12_7((uint64_t)v407, sel_startDate);
        if (v409)
        {
          v410 = v409;
          OUTLINED_FUNCTION_268_0();

          v411 = 0;
        }
        else
        {
          v411 = 1;
        }
        OUTLINED_FUNCTION_78_10();
        v466 = 1;
        v467 = OUTLINED_FUNCTION_30_15(v286, v411);
        v468 = OUTLINED_FUNCTION_181_1(v467, sel_endDate);
        if (v468)
        {
          v469 = v468;
          v470 = v947;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v466 = 0;
        }
        else
        {
          v470 = v947;
        }
        OUTLINED_FUNCTION_30_15(v470, v466);
        v471 = v1015;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v1015, (SEL *)&selRef_namedLocation);
        v473 = v472;
        v475 = v474;
        specialized Array.init<A>(_:)(v400);
        v477 = v476;
        specialized Array.init<A>(_:)(v401);
        v479 = v478;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v471, (SEL *)&selRef_comment);
        v481 = v480;
        v483 = v482;
        v484 = OUTLINED_FUNCTION_5_2();
        v485 = v951;
        OUTLINED_FUNCTION_49((uint64_t)v951, v486, v487, v484);
        OUTLINED_FUNCTION_210_0();
        v872 = v485;
        v873 = v488;
        v870 = v481;
        v871 = v483;
        v868 = v477;
        v869 = (uint64_t (*)())v479;
        v866 = (void *)v473;
        v867 = v475;
        v489 = v960;
        v490 = OUTLINED_FUNCTION_316();
        CalendarEvent.init(id:title:contentDescription:startDate:endDate:locationName:organizerNames:participantNames:notes:url:dataDetectorResults:)(v490, v491, v492, v493, (uint64_t)v1011, (uint64_t)v1010, v991, v470, (uint64_t)v866, (uint64_t)v867, (uint64_t)v868, (uint64_t)v869, (uint64_t)v870, (uint64_t)v871, (uint64_t)v872, v873);
        v233 = v956;
        v111 = v1019;
        OUTLINED_FUNCTION_49_15();
        OUTLINED_FUNCTION_106_2((uint64_t)v489, v948);
        OUTLINED_FUNCTION_82_13();
        OUTLINED_FUNCTION_162_2();
        v494 = swift_allocObject();
        OUTLINED_FUNCTION_43_12(v494);
        OUTLINED_FUNCTION_84_10();
        v176 = OUTLINED_FUNCTION_51_2();
        v495 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_64_9(v495);
        v496 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_56_8(v496);
        v497 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v497 + 16) = partial apply for implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v497 + 24) = v483;
        v498 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v498 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v498 + 24) = v497;
        v499 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_70_9(v499);
        isa = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        *v500 = closure #1 in OSLogArguments.append(_:)partial apply;
        v500[1] = v470;
        v500[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v500[3] = v496;
        v500[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v500[5] = v498;
        OUTLINED_FUNCTION_5_9();
        OUTLINED_FUNCTION_12_9();
        OUTLINED_FUNCTION_1_11();
        OUTLINED_FUNCTION_118_0();
        if (OUTLINED_FUNCTION_75_11())
        {
          v501 = (uint8_t *)OUTLINED_FUNCTION_73_9();
          v502 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v1021 = 0;
          v1025 = v502;
          *(_WORD *)v501 = 258;
          v1024[0] = v501 + 2;
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v470;
          OUTLINED_FUNCTION_4_29();
          if (!v233)
          {
            OUTLINED_FUNCTION_75_0();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v496;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_13_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v498;
            OUTLINED_FUNCTION_1_26();
            v1020 = 0;
            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_29_2(&dword_24315F000, v489, (os_log_type_t)v176, "Calendar event found: %s", v501);
            OUTLINED_FUNCTION_26_14();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_320;
        }

        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_13_8();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_63_12();
        OUTLINED_FUNCTION_257_0();
        v187 = (uint64_t)v960;
        v503 = OUTLINED_FUNCTION_53_15();
        v504 = type metadata accessor for CalendarEvent;
        OUTLINED_FUNCTION_123_6(v503, v505);
        OUTLINED_FUNCTION_90_8();
LABEL_134:
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_173_0();
        OUTLINED_FUNCTION_186_2();
        OUTLINED_FUNCTION_25_13();

        goto LABEL_135;
      }
      OUTLINED_FUNCTION_62_9();
      v385 = v393 == v515 + 5;
      v233 = (uint64_t (*)())v394;
      v516 = v969;
      v176 = v941;
      if (v385 && v233 == (uint64_t (*)())v886 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        OUTLINED_FUNCTION_121();
        v517 = v994;
        LocalIndexClient.constructPhotoDocument(item:)(v994, v176);
        OUTLINED_FUNCTION_22_2(v176, 1, v940);
        if (v385)
        {

          OUTLINED_FUNCTION_85_9();
          OUTLINED_FUNCTION_71_3((uint64_t)v1026);
          OUTLINED_FUNCTION_71_3((uint64_t)v1027);
          v305 = (_QWORD *)v176;
          v306 = &demangling cache variable for type metadata for Photo?;
          goto LABEL_68;
        }
        v581 = v939;
        outlined init with take of SearchResult(v176, v939, type metadata accessor for Photo);
        OUTLINED_FUNCTION_49_15();
        v582 = v934;
        OUTLINED_FUNCTION_310_0(v581, v934);
        OUTLINED_FUNCTION_82_13();
        OUTLINED_FUNCTION_162_2();
        v583 = swift_allocObject();
        outlined init with take of SearchResult(v582, v583 + v581, type metadata accessor for Photo);
        v584 = v187;
        Logger.logObject.getter();
        v233 = (uint64_t (*)())OUTLINED_FUNCTION_51_2();
        v585 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_64_9(v585);
        v586 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_56_8(v586);
        v176 = v283;
        v587 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v587 + 16) = partial apply for implicit closure #30 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v587 + 24) = v583;
        v588 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v588 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v588 + 24) = v587;
        v589 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_70_9(v589);
        *v590 = closure #1 in OSLogArguments.append(_:)partial apply;
        v590[1] = v279;
        v590[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v590[3] = v586;
        v590[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v590[5] = v588;
        OUTLINED_FUNCTION_5_9();
        OUTLINED_FUNCTION_12_9();
        OUTLINED_FUNCTION_1_11();
        v591 = OUTLINED_FUNCTION_118_0();
        LODWORD(v1017) = (_DWORD)v233;
        if (OUTLINED_FUNCTION_91_6(v591, (os_log_type_t)v233))
        {
          v1012 = v111;
          v593 = (uint8_t *)OUTLINED_FUNCTION_73_9();
          v594 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v1021 = 0;
          v1025 = v594;
          *(_WORD *)v593 = 258;
          v1024[0] = v593 + 2;
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v279;
          OUTLINED_FUNCTION_4_29();
          if (!v233)
          {
            OUTLINED_FUNCTION_75_0();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v586;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_13_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v588;
            OUTLINED_FUNCTION_1_26();
            v1020 = 0;
            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_29_2(&dword_24315F000, v584, (os_log_type_t)v1017, "Photo found: %s", v593);
            OUTLINED_FUNCTION_26_14();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_320;
        }

        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_13_8();
        OUTLINED_FUNCTION_75_0();
        ((void (*)(uint64_t, uint64_t))v111)(v990, v176);
        OUTLINED_FUNCTION_257_0();
        v190 = v1018;
        v187 = v939;
        v601 = OUTLINED_FUNCTION_53_15();
        OUTLINED_FUNCTION_123_6(v601, v602);
        OUTLINED_FUNCTION_90_8();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_173_0();
        OUTLINED_FUNCTION_186_2();
        OUTLINED_FUNCTION_25_13();

        OUTLINED_FUNCTION_202_1();
        OUTLINED_FUNCTION_71_3((uint64_t)v1026);
        OUTLINED_FUNCTION_71_3((uint64_t)v1027);
        goto LABEL_69;
      }
      OUTLINED_FUNCTION_62_9();
      v596 = v1013;
      if (v1013 == v595 + 1 && v233 == (uint64_t (*)())v883 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        OUTLINED_FUNCTION_121();
        v597 = v1015;
        v598 = -[NSObject attributeForKey:](v1015, sel_attributeForKey_, v884);
        v599 = v933;
        if (v598)
        {
          OUTLINED_FUNCTION_129_4();
          OUTLINED_FUNCTION_13_12();
        }
        else
        {
          OUTLINED_FUNCTION_59_10();
        }
        v603 = OUTLINED_FUNCTION_190_2();
        outlined init with take of URL?(v603, v604, &demangling cache variable for type metadata for Any?);
        if (*((_QWORD *)&v1032 + 1))
        {
          OUTLINED_FUNCTION_96_8();
          v605 = OUTLINED_FUNCTION_7_16();
          if ((v605 & 1) != 0)
          {
            v176 = (uint64_t)v1021;
            v606 = v1022;
            OUTLINED_FUNCTION_62_9();
            if (v176 == v607 - 4 && v606 == v879 || (v605 = OUTLINED_FUNCTION_18_7(), (v605 & 1) != 0))
            {

              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_77_11();
              goto LABEL_44;
            }
            goto LABEL_202;
          }
        }
        else
        {
          OUTLINED_FUNCTION_71_3((uint64_t)&v1031);
        }
        v606 = 0;
LABEL_202:
        v1012 = v111;
        v608 = OUTLINED_FUNCTION_184_0(v605, sel_uniqueIdentifier);
        v1017 = OUTLINED_FUNCTION_281_0();
        v1016 = v609;

        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v597, (SEL *)&selRef_title);
        v1014 = (void *)v610;
        v1013 = v611;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v597, (SEL *)&selRef_contentSnippet);
        OUTLINED_FUNCTION_274_0();
        v612 = -[NSObject contentCreationDate](v597, sel_contentCreationDate);
        if (v612)
        {
          v613 = v612;
          OUTLINED_FUNCTION_268_0();

          v614 = 0;
        }
        else
        {
          v614 = 1;
        }
        OUTLINED_FUNCTION_78_10();
        v626 = 1;
        v627 = OUTLINED_FUNCTION_86_12(v599, v614);
        v628 = OUTLINED_FUNCTION_181_1(v627, sel_lastUsedDate);
        if (v628)
        {
          v629 = v628;
          v630 = v931;
          OUTLINED_FUNCTION_268_0();

          v631 = v630;
          v626 = 0;
        }
        else
        {
          v631 = v931;
        }
        v632 = v926;
        v633 = 1;
        v634 = OUTLINED_FUNCTION_86_12(v631, v626);
        v635 = OUTLINED_FUNCTION_181_1(v634, sel_URL);
        if (v635)
        {
          v636 = v635;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v633 = 0;
        }
        v637 = v933;
        v638 = OUTLINED_FUNCTION_5_2();
        OUTLINED_FUNCTION_45_4(v632, v633, v639, v638);
        v862 = v637;
        v863 = v931;
        v640 = v932;
        v641 = OUTLINED_FUNCTION_316();
        NoteDocument.init(id:title:contentSnippet:folderName:creationDate:lastUsedDate:url:)(v641, v642, v643, v644, (uint64_t)v111, (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply, v645, v862, v863);
        v233 = v930;
        v111 = v1019;
        OUTLINED_FUNCTION_49_15();
        OUTLINED_FUNCTION_106_2(v640, v927);
        OUTLINED_FUNCTION_82_13();
        OUTLINED_FUNCTION_162_2();
        v646 = swift_allocObject();
        OUTLINED_FUNCTION_43_12(v646);
        OUTLINED_FUNCTION_84_10();
        v176 = OUTLINED_FUNCTION_51_2();
        v647 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_64_9(v647);
        v648 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_56_8(v648);
        v649 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v649 + 16) = partial apply for implicit closure #31 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v649 + 24) = v632;
        v650 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v650 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v650 + 24) = v649;
        v651 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_70_9(v651);
        isa = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        *v652 = closure #1 in OSLogArguments.append(_:)partial apply;
        v652[1] = v633;
        v652[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v652[3] = v648;
        v652[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v652[5] = v650;
        OUTLINED_FUNCTION_5_9();
        OUTLINED_FUNCTION_12_9();
        OUTLINED_FUNCTION_1_11();
        OUTLINED_FUNCTION_118_0();
        if (OUTLINED_FUNCTION_75_11())
        {
          v653 = (uint8_t *)OUTLINED_FUNCTION_73_9();
          v654 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v1021 = 0;
          v1025 = v654;
          *(_WORD *)v653 = 258;
          v1024[0] = v653 + 2;
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v633;
          OUTLINED_FUNCTION_4_29();
          if (!v233)
          {
            OUTLINED_FUNCTION_75_0();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v648;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_13_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v650;
            OUTLINED_FUNCTION_1_26();
            v1020 = 0;
            OUTLINED_FUNCTION_257_0();
            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_29_2(&dword_24315F000, v606, (os_log_type_t)v176, "Note found: %s", v653);
            OUTLINED_FUNCTION_26_14();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_320;
        }

        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_13_8();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_63_12();
        OUTLINED_FUNCTION_257_0();
        v187 = v932;
        v655 = OUTLINED_FUNCTION_53_15();
        v504 = type metadata accessor for NoteDocument;
        OUTLINED_FUNCTION_123_6(v655, v656);
        OUTLINED_FUNCTION_90_8();
        goto LABEL_134;
      }
      OUTLINED_FUNCTION_62_9();
      v1012 = v111;
      if (v596 == v615 + 23 && v233 == (uint64_t (*)())v880
        || (OUTLINED_FUNCTION_18_7() & 1) != 0
        || (OUTLINED_FUNCTION_62_9(), v596 == v616 + 15) && v233 == v877
        || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      {
        v617 = OUTLINED_FUNCTION_121();
        v618 = v994;
        v619 = OUTLINED_FUNCTION_285_0(v617, sel_uniqueIdentifier);
        v620 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        v622 = OUTLINED_FUNCTION_285_0(v621, sel_attributeSet);
        v623 = objc_msgSend(v622, sel_URL);

        v233 = v924;
        if (v623)
        {
          v624 = v923;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v625 = 0;
        }
        else
        {
          v625 = 1;
          v624 = v923;
        }
        v657 = OUTLINED_FUNCTION_5_2();
        OUTLINED_FUNCTION_45_4(v624, v625, v658, v657);
        v659 = v618;
        v660 = v925;
        v661 = OUTLINED_FUNCTION_248_0();
        v1017 = v662;
        FileDocument.init(id:item:url:)(v661, v663, (uint64_t)v662, v664, v665);
        OUTLINED_FUNCTION_49_15();
        v666 = v920;
        OUTLINED_FUNCTION_123_6(v660, v920);
        OUTLINED_FUNCTION_82_13();
        OUTLINED_FUNCTION_162_2();
        v667 = swift_allocObject();
        outlined init with take of SearchResult(v666, (uint64_t)v620 + v667, type metadata accessor for FileDocument);
        OUTLINED_FUNCTION_84_10();
        v668 = OUTLINED_FUNCTION_51_2();
        isa = v283;
        v669 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_74_12(v669);
        v670 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_56_8(v670);
        v671 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v671 + 16) = partial apply for implicit closure #33 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v671 + 24) = v667;
        v672 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v672 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v672 + 24) = v671;
        v673 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_70_9(v673);
        *v674 = closure #1 in OSLogArguments.append(_:)partial apply;
        v674[1] = v669;
        v674[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v674[3] = v670;
        v674[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v674[5] = v672;
        OUTLINED_FUNCTION_2_8();
        OUTLINED_FUNCTION_1_11();
        OUTLINED_FUNCTION_5_9();
        v675 = OUTLINED_FUNCTION_26_0();
        if (OUTLINED_FUNCTION_91_6(v675, v668))
        {
          v676 = (uint8_t *)OUTLINED_FUNCTION_73_9();
          v677 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          v1021 = 0;
          v1025 = v677;
          OUTLINED_FUNCTION_50_13(v676);
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v669;
          OUTLINED_FUNCTION_4_29();
          if (!v233)
          {
            OUTLINED_FUNCTION_4_12();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v670;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_69();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v672;
            OUTLINED_FUNCTION_1_26();
            v1020 = 0;
            OUTLINED_FUNCTION_75_0();
            OUTLINED_FUNCTION_29_2(&dword_24315F000, v620, v668, "File SearchResult found: %s", v676);
            OUTLINED_FUNCTION_34_2();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_320;
        }

        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_4_12();
        OUTLINED_FUNCTION_63_12();
        v176 = v989;
        v111 = v1015;
        v678 = v1017;
        v187 = v925;
        v679 = OUTLINED_FUNCTION_53_15();
        OUTLINED_FUNCTION_207_0(v679, v680);
        OUTLINED_FUNCTION_90_8();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_172_0();
        v681 = v678;
        OUTLINED_FUNCTION_25_13();

        goto LABEL_66;
      }
      OUTLINED_FUNCTION_62_9();
      if ((v596 != v682 - 2 || v233 != v875) && (OUTLINED_FUNCTION_18_7() & 1) == 0)
      {
        OUTLINED_FUNCTION_62_9();
        if ((v596 != v704 + 7 || v233 != v869) && (OUTLINED_FUNCTION_18_7() & 1) == 0)
        {
          v787 = CSSearchableItem.associatedAppEntityId.getter();
          if (v788)
          {
            v789 = v787;
            v176 = v788;
            v790 = CSSearchableItem.associatedAppEntityTypeId.getter();
            if (v791)
            {
              v792 = v790;
              v793 = v791;
              v794 = OUTLINED_FUNCTION_5_2();
              v795 = (uint64_t)v951;
              OUTLINED_FUNCTION_49((uint64_t)v951, v796, v797, v794);
              v864 = v795;
              v798 = v898;
              AppEntityItem.init(id:bundleId:typeId:protocolId:url:)(v789, v176, v1013, (uint64_t)v1014, v792, v793, 0, 0, v898, v864);
              v187 = (uint64_t)type metadata accessor for AppEntityItem;
              OUTLINED_FUNCTION_106_2((uint64_t)v798, v976);
              OUTLINED_FUNCTION_90_8();
              swift_storeEnumTagMultiPayload();
              OUTLINED_FUNCTION_68_13();
              OUTLINED_FUNCTION_186_2();
              OUTLINED_FUNCTION_25_13();

              OUTLINED_FUNCTION_85_9();
              v506 = (uint64_t)v798;
              v507 = type metadata accessor for AppEntityItem;
              goto LABEL_136;
            }
            OUTLINED_FUNCTION_80_0();
          }
          v826 = v899;
          OUTLINED_FUNCTION_37_11((uint64_t)v899);
          v827 = OUTLINED_FUNCTION_8();
          v828 = (uint64_t)v1014;
          *(_QWORD *)(v827 + 16) = v1013;
          *(_QWORD *)(v827 + 24) = v828;
          Logger.logObject.getter();
          v176 = OUTLINED_FUNCTION_80();
          v829 = OUTLINED_FUNCTION_8();
          OUTLINED_FUNCTION_64_9(v829);
          v830 = OUTLINED_FUNCTION_8();
          OUTLINED_FUNCTION_56_8(v830);
          v831 = OUTLINED_FUNCTION_8();
          *(_QWORD *)(v831 + 16) = partial apply for implicit closure #7 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
          *(_QWORD *)(v831 + 24) = v827;
          v187 = OUTLINED_FUNCTION_8();
          *(_QWORD *)(v187 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(_QWORD *)(v187 + 24) = v831;
          v832 = OUTLINED_FUNCTION_8();
          OUTLINED_FUNCTION_70_9(v832);
          *v833 = closure #1 in OSLogArguments.append(_:)partial apply;
          v833[1] = v279;
          v833[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v833[3] = v830;
          v833[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v833[5] = v187;
          OUTLINED_FUNCTION_5_9();
          OUTLINED_FUNCTION_1_11();
          OUTLINED_FUNCTION_12_9();
          OUTLINED_FUNCTION_118_0();
          if (OUTLINED_FUNCTION_75_11())
          {
            v834 = (uint8_t *)OUTLINED_FUNCTION_73_9();
            v835 = specialized static UnsafeMutablePointer.allocate(capacity:)();
            OUTLINED_FUNCTION_22_18(v835);
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v279;
            OUTLINED_FUNCTION_4_29();
            if (!v233)
            {
              OUTLINED_FUNCTION_75_0();
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v830;
              OUTLINED_FUNCTION_1_26();
              OUTLINED_FUNCTION_69();
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v187;
              OUTLINED_FUNCTION_1_26();
              v1020 = 0;
              OUTLINED_FUNCTION_13_8();
              OUTLINED_FUNCTION_29_2(&dword_24315F000, v826, (os_log_type_t)v176, "Item found with un-handled bundleId: %s", v834);
              OUTLINED_FUNCTION_26_14();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_320;
          }
          OUTLINED_FUNCTION_77_11();
          OUTLINED_FUNCTION_85_9();
          OUTLINED_FUNCTION_75_0();
          OUTLINED_FUNCTION_69();
          OUTLINED_FUNCTION_13_8();

          v600 = (uint64_t)v899;
          goto LABEL_192;
        }
        v705 = OUTLINED_FUNCTION_121();
        v706 = OUTLINED_FUNCTION_184_0(v705, sel_uniqueIdentifier);
        OUTLINED_FUNCTION_281_0();
        OUTLINED_FUNCTION_283_0();
        v707 = (void *)OUTLINED_FUNCTION_220_0();
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v707, (SEL *)&selRef_displayName);
        v709 = v708;
        outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v516, (SEL *)&selRef_phoneNumbers);
        if (!v710)
          specialized static Array._allocateUninitialized(_:)(0);
        v711 = v710;
        outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v1015, (SEL *)&selRef_emailAddresses);
        if (!v712)
          specialized static Array._allocateUninitialized(_:)(0);
        outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v1015, (SEL *)&selRef_authorAddresses);
        if (!v713)
          specialized static Array._allocateUninitialized(_:)(0);
        v111 = v713;
        v714 = OUTLINED_FUNCTION_5_2();
        v715 = v951;
        OUTLINED_FUNCTION_49((uint64_t)v951, v716, v717, v714);
        isa = v910;
        v718 = OUTLINED_FUNCTION_160_2();
        Contact.init(id:name:phoneNumbers:emailAddresses:physicalAddresses:url:)(v718, v719, v720, v721, v722, v723, (uint64_t)v715, v724);
        v233 = v911;
        OUTLINED_FUNCTION_37_11((uint64_t)v911);
        OUTLINED_FUNCTION_106_2(isa, v903);
        OUTLINED_FUNCTION_82_13();
        OUTLINED_FUNCTION_162_2();
        v725 = swift_allocObject();
        OUTLINED_FUNCTION_43_12(v725);
        OUTLINED_FUNCTION_84_10();
        v176 = OUTLINED_FUNCTION_51_2();
        v726 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_64_9(v726);
        v727 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_56_8(v727);
        v728 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v728 + 16) = partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
        *(_QWORD *)(v728 + 24) = v709;
        v729 = OUTLINED_FUNCTION_8();
        *(_QWORD *)(v729 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v729 + 24) = v728;
        v730 = OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_70_9(v730);
        *v731 = closure #1 in OSLogArguments.append(_:)partial apply;
        v731[1] = v711;
        v731[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v731[3] = v727;
        v731[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v731[5] = v729;
        OUTLINED_FUNCTION_5_9();
        OUTLINED_FUNCTION_12_9();
        OUTLINED_FUNCTION_1_11();
        OUTLINED_FUNCTION_118_0();
        if (OUTLINED_FUNCTION_75_11())
        {
          v732 = (uint8_t *)OUTLINED_FUNCTION_73_9();
          v733 = specialized static UnsafeMutablePointer.allocate(capacity:)();
          OUTLINED_FUNCTION_22_18(v733);
          *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
          *((_QWORD *)&v1031 + 1) = v711;
          OUTLINED_FUNCTION_4_29();
          if (!v233)
          {
            OUTLINED_FUNCTION_75_0();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v727;
            OUTLINED_FUNCTION_1_26();
            OUTLINED_FUNCTION_13_8();
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v729;
            OUTLINED_FUNCTION_1_26();
            v1020 = 0;
            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_29_2(&dword_24315F000, v715, (os_log_type_t)v176, "Contact found: %s", v732);
            OUTLINED_FUNCTION_26_14();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_320;
        }

        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_13_8();
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_41_12((uint64_t)v911);
        v187 = v910;
        v776 = OUTLINED_FUNCTION_53_15();
        v504 = type metadata accessor for Contact;
        OUTLINED_FUNCTION_123_6(v776, v777);
        OUTLINED_FUNCTION_90_8();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_68_13();
        OUTLINED_FUNCTION_186_2();
        OUTLINED_FUNCTION_25_13();

        OUTLINED_FUNCTION_85_9();
LABEL_135:
        v506 = v187;
        v507 = (uint64_t (*)())v504;
LABEL_136:
        _s10OmniSearch0B6ResultVWOhTm_1(v506, (uint64_t (*)(_QWORD))v507);
LABEL_44:
        OUTLINED_FUNCTION_71_3((uint64_t)v1026);
        v305 = v1027;
        v306 = &demangling cache variable for type metadata for Any?;
        goto LABEL_68;
      }
      v683 = OUTLINED_FUNCTION_121();
      v684 = OUTLINED_FUNCTION_184_0(v683, sel_uniqueIdentifier);
      OUTLINED_FUNCTION_137_5();
      OUTLINED_FUNCTION_128_5();
      *(_QWORD *)&v1031 = v596;
      *((_QWORD *)&v1031 + 1) = v187;
      v685 = lazy protocol witness table accessor for type String and conformance String();
      v686 = MEMORY[0x2494F61F4](45, 0xE100000000000000, 1, 1, MEMORY[0x24BEE0D00], v685);
      OUTLINED_FUNCTION_56_0();
      v233 = v1020;
      v687 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D153OIegnrzr_TR129_s10OmniSearch14ResultHydratorC32fetchFullContentForPhotosResults33_4DC86B6DF70367122DAA7E88D902EF60LLySayAA0bC0VGAHYaKFSSSshcfu_Tf3nnnpf_nTf1cn_n(v686);
      v1020 = v233;
      OUTLINED_FUNCTION_36_0();
      specialized Array.subscript.getter(0, v687);
      v690 = v688 == 0x746361736E617274 && v689 == (void *)0xEB000000006E6F69;
      if (v690 || (v691 = v688, v692 = v689, (OUTLINED_FUNCTION_18_7() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        *(_QWORD *)&v1031 = OUTLINED_FUNCTION_228_1();
        *((_QWORD *)&v1031 + 1) = v693;
        OUTLINED_FUNCTION_62_9();
        v695._countAndFlagsBits = v694 + 23;
        v695._object = v871;
        DefaultStringInterpolation.appendLiteral(_:)(v695);
        OUTLINED_FUNCTION_189_2();
        OUTLINED_FUNCTION_80_0();
        OUTLINED_FUNCTION_201_1();
        OUTLINED_FUNCTION_96_0();
        OUTLINED_FUNCTION_133_3();
        OUTLINED_FUNCTION_175_0();
        OUTLINED_FUNCTION_287();
        v696 = OUTLINED_FUNCTION_36_0();
        v697 = OUTLINED_FUNCTION_184_0(v696, sel_uniqueIdentifier);
        OUTLINED_FUNCTION_137_5();
        v1017 = v698;

        v699 = (void *)OUTLINED_FUNCTION_220_0();
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v699, (SEL *)&selRef_displayName);
        v1016 = v700;
        v1014 = (void *)v701;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(&v1031, (SEL *)&selRef_contentDescription);
        v1013 = v702;
        v1011 = v703;
        if (OUTLINED_FUNCTION_308_0(v702, sel_attributeForKey_))
        {
          OUTLINED_FUNCTION_129_4();
          OUTLINED_FUNCTION_13_12();
        }
        else
        {
          OUTLINED_FUNCTION_59_10();
        }
        v734 = OUTLINED_FUNCTION_190_2();
        outlined init with take of URL?(v734, v735, &demangling cache variable for type metadata for Any?);
        if (*((_QWORD *)&v1032 + 1))
        {
          v736 = (_QWORD *)OUTLINED_FUNCTION_78_10();
          v737 = v917;
          v738 = OUTLINED_FUNCTION_7_16();
          __swift_storeEnumTagSinglePayload(v737, v738 ^ 1u, 1, (uint64_t)v736);
          OUTLINED_FUNCTION_22_2(v737, 1, (uint64_t)v736);
          if (!v385)
          {
            v739 = v916;
            (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(v736 - 1) + 32))(v916, v917, v736);
            OUTLINED_FUNCTION_30_15(v739, 0);
            goto LABEL_257;
          }
        }
        else
        {
          outlined destroy of MobileSMSDocument?((uint64_t)&v1031, &demangling cache variable for type metadata for Any?);
          v736 = (_QWORD *)OUTLINED_FUNCTION_78_10();
          OUTLINED_FUNCTION_30_15(v917, 1);
        }
        OUTLINED_FUNCTION_78_10();
        OUTLINED_FUNCTION_30_15(v916, 1);
        outlined destroy of MobileSMSDocument?(v917, &demangling cache variable for type metadata for Date?);
LABEL_257:
        v740 = (void *)OUTLINED_FUNCTION_220_0();
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v740, (SEL *)&selRef_city);
        v1010 = (uint64_t (*)())v741;
        v1009 = v742;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v736, (SEL *)&selRef_stateOrProvince);
        v1008 = v743;
        v1007 = v744;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v736, (SEL *)&selRef_country);
        v1006 = v745;
        v747 = v746;
        if (objc_msgSend(v736, sel_attributeForKey_, v873))
        {
          OUTLINED_FUNCTION_129_4();
          swift_unknownObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_59_10();
        }
        v748 = OUTLINED_FUNCTION_190_2();
        outlined init with take of URL?(v748, v749, &demangling cache variable for type metadata for Any?);
        if (*((_QWORD *)&v1032 + 1))
        {
          type metadata accessor for NSDecimal(0);
          OUTLINED_FUNCTION_96_8();
          if (OUTLINED_FUNCTION_7_16())
          {
            v750 = 0;
            isa = v1023;
            v111 = v1022;
            v751 = (uint64_t)v1021;
            goto LABEL_265;
          }
        }
        else
        {
          outlined destroy of MobileSMSDocument?((uint64_t)&v1031, &demangling cache variable for type metadata for Any?);
        }
        v751 = 0;
        v111 = 0;
        isa = 0;
        v750 = 1;
LABEL_265:
        if (-[NSObject attributeForKey:](v1015, sel_attributeForKey_, v872))
        {
          OUTLINED_FUNCTION_129_4();
          swift_unknownObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_59_10();
        }
        v752 = OUTLINED_FUNCTION_190_2();
        outlined init with take of URL?(v752, v753, &demangling cache variable for type metadata for Any?);
        if (*((_QWORD *)&v1032 + 1))
        {
          OUTLINED_FUNCTION_96_8();
          if (OUTLINED_FUNCTION_7_16())
          {
            v754 = (uint64_t)v1021;
            v755 = (uint64_t)v1022;
LABEL_273:
            v756 = (uint64_t)v951;
            outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v919, (uint64_t)v951, &demangling cache variable for type metadata for URL?);
            LOBYTE(v1031) = v750;
            v861 = isa | ((unint64_t)v750 << 32);
            v860 = v1006;
            v859 = v1007;
            v858 = (uint64_t)v1008;
            v857 = v1009;
            v757 = v918;
            v758 = OUTLINED_FUNCTION_236();
            WalletTransaction.init(id:title:description:date:city:stateOrProvince:country:amount:currencyCode:url:)(v758, v759, v760, v761, v762, (uint64_t)v1011, v916, (uint64_t)v1010, v763, v857, v858, v859, (uint64_t)v860, v747, v751, (uint64_t)v111, v861, SBYTE4(v861), v754,
              v755,
              v756);
            v233 = v915;
            OUTLINED_FUNCTION_37_11((uint64_t)v915);
            OUTLINED_FUNCTION_106_2((uint64_t)v757, v912);
            OUTLINED_FUNCTION_82_13();
            OUTLINED_FUNCTION_162_2();
            v764 = swift_allocObject();
            OUTLINED_FUNCTION_43_12(v764);
            OUTLINED_FUNCTION_84_10();
            v176 = OUTLINED_FUNCTION_51_2();
            v765 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_64_9(v765);
            v766 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_56_8(v766);
            v767 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v767 + 16) = partial apply for implicit closure #38 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
            *(_QWORD *)(v767 + 24) = v747;
            v768 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v768 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(_QWORD *)(v768 + 24) = v767;
            v769 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_70_9(v769);
            *v770 = closure #1 in OSLogArguments.append(_:)partial apply;
            v770[1] = v754;
            v770[2] = closure #1 in OSLogArguments.append(_:)partial apply;
            v770[3] = v766;
            v770[4] = closure #1 in OSLogArguments.append(_:)partial apply;
            v770[5] = v768;
            OUTLINED_FUNCTION_5_9();
            OUTLINED_FUNCTION_12_9();
            OUTLINED_FUNCTION_1_11();
            OUTLINED_FUNCTION_118_0();
            if (OUTLINED_FUNCTION_75_11())
            {
              v771 = (uint8_t *)OUTLINED_FUNCTION_73_9();
              v772 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              OUTLINED_FUNCTION_22_18(v772);
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v754;
              OUTLINED_FUNCTION_4_29();
              if (!v233)
              {
                OUTLINED_FUNCTION_75_0();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v766;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_13_8();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v768;
                OUTLINED_FUNCTION_1_26();
                v1020 = 0;
                OUTLINED_FUNCTION_69();
                OUTLINED_FUNCTION_29_2(&dword_24315F000, v757, (os_log_type_t)v176, "Wallet transaction found: %s", v771);
                OUTLINED_FUNCTION_26_14();
                specialized UnsafeMutablePointer.deallocate()();
              }
              goto LABEL_320;
            }

            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_13_8();
            OUTLINED_FUNCTION_75_0();
            OUTLINED_FUNCTION_41_12((uint64_t)v915);
            v187 = (uint64_t)v918;
            v773 = OUTLINED_FUNCTION_53_15();
            OUTLINED_FUNCTION_123_6(v773, v774);
            OUTLINED_FUNCTION_90_8();
LABEL_277:
            swift_storeEnumTagMultiPayload();
            OUTLINED_FUNCTION_68_13();
            OUTLINED_FUNCTION_186_2();
            OUTLINED_FUNCTION_25_13();

            OUTLINED_FUNCTION_85_9();
            OUTLINED_FUNCTION_202_1();
LABEL_278:
            outlined destroy of MobileSMSDocument?(v919, &demangling cache variable for type metadata for URL?);
            goto LABEL_44;
          }
        }
        else
        {
          outlined destroy of MobileSMSDocument?((uint64_t)&v1031, &demangling cache variable for type metadata for Any?);
        }
        v754 = 0;
        v755 = 0;
        goto LABEL_273;
      }
      v775 = v691 == 1936941424 && v692 == (void *)0xE400000000000000;
      if (!v775 && (OUTLINED_FUNCTION_18_7() & 1) == 0)
      {
        OUTLINED_FUNCTION_62_9();
        if (v691 == v821 - 4 && v692 == v866)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v822 = OUTLINED_FUNCTION_18_7();
          OUTLINED_FUNCTION_36_0();
          if ((v822 & 1) == 0)
          {
            v836 = OUTLINED_FUNCTION_5_2();
            OUTLINED_FUNCTION_49(v919, v837, v838, v836);
            v839 = v897;
            OUTLINED_FUNCTION_37_11((uint64_t)v897);
            v840 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v840 + 16) = v687;
            Logger.logObject.getter();
            v176 = OUTLINED_FUNCTION_80();
            v841 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_64_9(v841);
            v842 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_56_8(v842);
            v843 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v843 + 16) = partial apply for implicit closure #41 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
            *(_QWORD *)(v843 + 24) = v840;
            v187 = OUTLINED_FUNCTION_8();
            *(_QWORD *)(v187 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(_QWORD *)(v187 + 24) = v843;
            v844 = OUTLINED_FUNCTION_8();
            OUTLINED_FUNCTION_70_9(v844);
            *v845 = closure #1 in OSLogArguments.append(_:)partial apply;
            v845[1] = v279;
            v845[2] = closure #1 in OSLogArguments.append(_:)partial apply;
            v845[3] = v842;
            v845[4] = closure #1 in OSLogArguments.append(_:)partial apply;
            v845[5] = v187;
            OUTLINED_FUNCTION_5_9();
            OUTLINED_FUNCTION_1_11();
            OUTLINED_FUNCTION_12_9();
            OUTLINED_FUNCTION_118_0();
            if (OUTLINED_FUNCTION_75_11())
            {
              v846 = (uint8_t *)OUTLINED_FUNCTION_73_9();
              v847 = specialized static UnsafeMutablePointer.allocate(capacity:)();
              OUTLINED_FUNCTION_22_18(v847);
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v279;
              OUTLINED_FUNCTION_4_29();
              if (!v233)
              {
                OUTLINED_FUNCTION_75_0();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v842;
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_69();
                *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
                *((_QWORD *)&v1031 + 1) = v187;
                OUTLINED_FUNCTION_1_26();
                v1020 = 0;
                OUTLINED_FUNCTION_13_8();
                OUTLINED_FUNCTION_29_2(&dword_24315F000, v839, (os_log_type_t)v176, "Wallet document found with unrecognized type: %s", v846);
                OUTLINED_FUNCTION_26_14();
                specialized UnsafeMutablePointer.deallocate()();
              }
              goto LABEL_320;
            }
            OUTLINED_FUNCTION_77_11();
            OUTLINED_FUNCTION_85_9();
            OUTLINED_FUNCTION_75_0();
            OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_13_8();

            OUTLINED_FUNCTION_41_12((uint64_t)v897);
            goto LABEL_278;
          }
        }
        v823 = OUTLINED_FUNCTION_228_1();
        OUTLINED_FUNCTION_87_8(v823, v824);
        OUTLINED_FUNCTION_189_2();
        v187 = v825;
        OUTLINED_FUNCTION_80_0();
        OUTLINED_FUNCTION_201_1();
        OUTLINED_FUNCTION_96_0();
        OUTLINED_FUNCTION_133_3();
        OUTLINED_FUNCTION_175_0();
        v176 = (uint64_t)v951;
        URL.init(string:)();
        OUTLINED_FUNCTION_77_11();
        OUTLINED_FUNCTION_85_9();
        OUTLINED_FUNCTION_36_0();
        OUTLINED_FUNCTION_71_3((uint64_t)v1026);
        OUTLINED_FUNCTION_71_3((uint64_t)v1027);
        v305 = (_QWORD *)v176;
        v306 = &demangling cache variable for type metadata for URL?;
        goto LABEL_68;
      }
      swift_bridgeObjectRelease();
      v778 = OUTLINED_FUNCTION_228_1();
      OUTLINED_FUNCTION_87_8(v778, v779);
      OUTLINED_FUNCTION_189_2();
      OUTLINED_FUNCTION_80_0();
      OUTLINED_FUNCTION_201_1();
      OUTLINED_FUNCTION_96_0();
      OUTLINED_FUNCTION_133_3();
      OUTLINED_FUNCTION_175_0();
      OUTLINED_FUNCTION_287();
      v780 = OUTLINED_FUNCTION_36_0();
      v781 = OUTLINED_FUNCTION_184_0(v780, sel_uniqueIdentifier);
      OUTLINED_FUNCTION_281_0();
      OUTLINED_FUNCTION_283_0();
      v782 = (void *)OUTLINED_FUNCTION_220_0();
      outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v782, (SEL *)&selRef_displayName);
      v784 = v783;
      outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v692, (SEL *)&selRef_contentDescription);
      v786 = v785;
      if (OUTLINED_FUNCTION_308_0(v785, sel_attributeForKey_))
      {
        OUTLINED_FUNCTION_129_4();
        swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_59_10();
      }
      v799 = OUTLINED_FUNCTION_190_2();
      outlined init with take of URL?(v799, v800, &demangling cache variable for type metadata for Any?);
      if (*((_QWORD *)&v1032 + 1))
      {
        v111 = OUTLINED_FUNCTION_78_10();
        isa = v909;
        v801 = OUTLINED_FUNCTION_7_16();
        OUTLINED_FUNCTION_88_0(isa, v801 ^ 1u);
        OUTLINED_FUNCTION_22_2(isa, 1, (uint64_t)v111);
        if (!v385)
        {
          isa = v908;
          (*((void (**)(uint64_t, uint64_t, NSObject *))v111[-1].isa + 4))(v908, v909, v111);
          OUTLINED_FUNCTION_88_0(isa, 0);
LABEL_297:
          outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v1015, (SEL *)&selRef_creator);
          OUTLINED_FUNCTION_274_0();
          v802 = v951;
          outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v919, (uint64_t)v951, &demangling cache variable for type metadata for URL?);
          v865 = isa;
          isa = v906;
          v803 = OUTLINED_FUNCTION_160_2();
          WalletPass.init(id:title:description:creationDate:creator:url:)(v803, v804, v805, v806, v807, v808, (uint64_t)v111, v809, v865, (uint64_t)v802);
          v233 = v907;
          OUTLINED_FUNCTION_37_11((uint64_t)v907);
          OUTLINED_FUNCTION_106_2(isa, v900);
          OUTLINED_FUNCTION_82_13();
          OUTLINED_FUNCTION_162_2();
          v810 = swift_allocObject();
          OUTLINED_FUNCTION_43_12(v810);
          OUTLINED_FUNCTION_84_10();
          v176 = OUTLINED_FUNCTION_51_2();
          v811 = OUTLINED_FUNCTION_8();
          OUTLINED_FUNCTION_64_9(v811);
          v812 = OUTLINED_FUNCTION_8();
          OUTLINED_FUNCTION_56_8(v812);
          v813 = OUTLINED_FUNCTION_8();
          *(_QWORD *)(v813 + 16) = partial apply for implicit closure #40 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
          *(_QWORD *)(v813 + 24) = v784;
          v814 = OUTLINED_FUNCTION_8();
          *(_QWORD *)(v814 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(_QWORD *)(v814 + 24) = v813;
          v815 = OUTLINED_FUNCTION_8();
          OUTLINED_FUNCTION_70_9(v815);
          *v816 = closure #1 in OSLogArguments.append(_:)partial apply;
          v816[1] = v786;
          v816[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v816[3] = v812;
          v816[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v816[5] = v814;
          OUTLINED_FUNCTION_5_9();
          OUTLINED_FUNCTION_12_9();
          OUTLINED_FUNCTION_1_11();
          OUTLINED_FUNCTION_118_0();
          if (OUTLINED_FUNCTION_75_11())
          {
            v817 = (uint8_t *)OUTLINED_FUNCTION_73_9();
            v818 = specialized static UnsafeMutablePointer.allocate(capacity:)();
            OUTLINED_FUNCTION_22_18(v818);
            *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
            *((_QWORD *)&v1031 + 1) = v786;
            OUTLINED_FUNCTION_4_29();
            if (!v233)
            {
              OUTLINED_FUNCTION_75_0();
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v812;
              OUTLINED_FUNCTION_1_26();
              OUTLINED_FUNCTION_13_8();
              *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
              *((_QWORD *)&v1031 + 1) = v814;
              OUTLINED_FUNCTION_1_26();
              v1020 = 0;
              OUTLINED_FUNCTION_69();
              OUTLINED_FUNCTION_29_2(&dword_24315F000, v802, (os_log_type_t)v176, "Wallet pass found: %s", v817);
              OUTLINED_FUNCTION_26_14();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_320;
          }

          OUTLINED_FUNCTION_69();
          OUTLINED_FUNCTION_13_8();
          OUTLINED_FUNCTION_75_0();
          OUTLINED_FUNCTION_41_12((uint64_t)v907);
          v187 = v906;
          v819 = OUTLINED_FUNCTION_53_15();
          OUTLINED_FUNCTION_123_6(v819, v820);
          OUTLINED_FUNCTION_90_8();
          goto LABEL_277;
        }
      }
      else
      {
        outlined destroy of MobileSMSDocument?((uint64_t)&v1031, &demangling cache variable for type metadata for Any?);
        v111 = OUTLINED_FUNCTION_78_10();
        OUTLINED_FUNCTION_88_0(v909, 1);
      }
      OUTLINED_FUNCTION_78_10();
      OUTLINED_FUNCTION_88_0(v908, 1);
      outlined destroy of MobileSMSDocument?(v909, &demangling cache variable for type metadata for Date?);
      goto LABEL_297;
    }
    v244 = Logging.search.unsafeMutableAddressor();
    v187 = (uint64_t)v1019;
    (*((void (**)(uint64_t, uint64_t, NSObject *))v190 + 2))(v191, v244, v1019);
    v245 = OUTLINED_FUNCTION_8();
    *(_QWORD *)(v245 + 16) = isa;
    v1017 = (id)isa;
    OUTLINED_FUNCTION_84_10();
    isa = OUTLINED_FUNCTION_80();
    v233 = v190;
    v246 = OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_74_12(v246);
    v247 = OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_56_8(v247);
    v248 = OUTLINED_FUNCTION_8();
    *(_QWORD *)(v248 + 16) = partial apply for implicit closure #1 in LocalIndexClient.findMatches(for:maxItemCount:completion:);
    *(_QWORD *)(v248 + 24) = v245;
    v249 = OUTLINED_FUNCTION_8();
    *(_QWORD *)(v249 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v249 + 24) = v248;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
    v250 = OUTLINED_FUNCTION_8();
    v111 = OUTLINED_FUNCTION_70_9(v250);
    v176 = (uint64_t)partial apply for closure #1 in OSLogArguments.append(_:);
    *v251 = partial apply for closure #1 in OSLogArguments.append(_:);
    v251[1] = v246;
    v251[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v251[3] = v247;
    v251[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v251[5] = v249;
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_5_9();
    v252 = OUTLINED_FUNCTION_26_0();
    LODWORD(v1016) = isa;
    if (OUTLINED_FUNCTION_91_6(v252, (os_log_type_t)isa))
    {
      v253 = (uint8_t *)OUTLINED_FUNCTION_73_9();
      v254 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      v1026[0] = 0;
      v1024[0] = v254;
      *(_WORD *)v253 = 258;
      v1027[0] = v253 + 2;
      *(_QWORD *)&v1031 = partial apply for closure #1 in OSLogArguments.append(_:);
      *((_QWORD *)&v1031 + 1) = v246;
      OUTLINED_FUNCTION_144_2();
      if (!v233)
      {
        OUTLINED_FUNCTION_4_12();
        *(_QWORD *)&v1031 = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)&v1031 + 1) = v247;
        OUTLINED_FUNCTION_5_29();
        OUTLINED_FUNCTION_69();
        *(_QWORD *)&v1031 = partial apply for closure #1 in OSLogArguments.append(_:);
        *((_QWORD *)&v1031 + 1) = v249;
        OUTLINED_FUNCTION_5_29();
        v1020 = 0;
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_29_2(&dword_24315F000, v193, (os_log_type_t)v1016, "Skipping item with missing bundleID: %s", v253);
        swift_arrayDestroy();
        specialized UnsafeMutablePointer.deallocate()();
      }
LABEL_320:
      for (i = v233; ; i = v1020)
      {

        __break(1u);
      }
    }

    OUTLINED_FUNCTION_75_0();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_4_12();

    v288 = v992;
    v289 = OUTLINED_FUNCTION_248_0();
    v290(v289);
    v190 = v233;
    v191 = v288;
LABEL_155:
    specialized EnumeratedSequence.Iterator.next()();
    OUTLINED_FUNCTION_274_0();
  }
  while (v520);
  v187 = v1028;
LABEL_315:
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_36_0();
  v848 = OUTLINED_FUNCTION_47_8();
  specialized static Array.+ infix(_:_:)();
  v849 = (char *)v848;
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_121();
  v1030 = v849;
  LocalIndexClient.populateMobileSMSDocumentPhotos(results:messageIdToPhotoAttachmentIds:photoAttachmentIdToPhotoItem:)(&v1030, v1029[0], v187);
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_263_0();
  OUTLINED_FUNCTION_121();

LABEL_319:
  OUTLINED_FUNCTION_43_0();
}

id CSSearchableItemAttributeSet.__allocating_init(contentType:)(uint64_t a1)
{
  id v2;
  Class isa;
  id v4;
  uint64_t v5;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = UTType._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, sel_initWithContentType_, isa);

  v5 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

CSSearchableItemAttributeSet __swiftcall CSSearchableItemAttributeSet.__allocating_init(itemContentType:)(Swift::String itemContentType)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;
  id v5;

  object = itemContentType._object;
  countAndFlagsBits = itemContentType._countAndFlagsBits;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)MEMORY[0x2494F5BB8](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithItemContentType_, v4);

  return (CSSearchableItemAttributeSet)v5;
}

BOOL CSSearchableItem.isEventTypeItem.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = objc_msgSend(objc_msgSend(v0, sel_attributeSet), sel_eventType);
  OUTLINED_FUNCTION_17_4();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  OUTLINED_FUNCTION_121();
  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  return v5 != 0;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int *v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (Swift::Int *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t implicit closure #5 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(void *a1)
{
  id v1;
  uint64_t v2;
  _BYTE v4[40];

  v1 = objc_msgSend(a1, sel_attributeDictionary);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)v4, v2);
  OUTLINED_FUNCTION_121();
  outlined destroy of AnyHashable((uint64_t)v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(uint64_t a1)
{
  uint64_t v2;

  OUTLINED_FUNCTION_206(a1, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  return OUTLINED_FUNCTION_275_0();
}

void *_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSS_s5NeverOSo16CSSearchableItemCTg5055_s10OmniSearch16LocalIndexClientC11findMatches3for12maxf48Count10completionySS_SiySayAA0B6ResultVGctFSo012E13J0CSgSSXEfU2_SDySSAGGTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  void *v8;
  id v9;

  if (!a2 || !*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_36_0();
    return 0;
  }
  swift_bridgeObjectRetain_n();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) == 0)
  {
    OUTLINED_FUNCTION_36_0();
    OUTLINED_FUNCTION_301();
    return 0;
  }
  v8 = *(void **)(*(_QWORD *)(a3 + 56) + 8 * v6);
  v9 = v8;
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_301();
  return v8;
}

uint64_t implicit closure #12 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(void *a1)
{
  uint64_t result;
  uint64_t v2;

  result = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.mailMessageID.getter(objc_msgSend(a1, sel_attributeSet));
  if (!v2)
    return 0;
  return result;
}

void implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(void *a1)
{
  outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(objc_msgSend(a1, sel_attributeSet), (SEL *)&selRef_eventMessageIdentifier);
}

_QWORD *implicit closure #17 in LocalIndexClient.findMatches(for:maxItemCount:completion:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  v2 = swift_bridgeObjectRetain();
  result = specialized Set.init<A>(_:)(v2);
  *a1 = result;
  return result;
}

void static LocalIndexClient.flightReservation(from:answerAttributes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  void *v87;
  char v88;
  uint64_t v89;
  _QWORD *v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_log_type_t v103;
  int v104;
  _WORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  os_log_type_t v109;
  _WORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t);
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t v123;
  int v124;
  _WORD *v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, char *);
  uint64_t v129;
  char *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  int *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  os_log_type_t v234;
  int v235;
  _WORD *v236;
  uint64_t v237;
  uint64_t v238;
  const char *v239;
  uint64_t v240;
  os_log_type_t v241;
  int v242;
  _WORD *v243;
  uint64_t v244;
  os_log_type_t v245;
  int v246;
  _WORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251[2];
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int *v312;
  id v313;
  uint64_t v314;
  uint64_t v315;

  OUTLINED_FUNCTION_18_2();
  a19 = v21;
  a20 = v22;
  v285 = v23;
  v25 = v24;
  v27 = v26;
  v312 = (int *)type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_18_1();
  v287 = v29;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_31_0();
  v286 = v31;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_34_1();
  v288 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_18_1();
  v295 = v35;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_31_0();
  v290 = v37;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_31_0();
  v294 = v39;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_31_0();
  v300 = v41;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_34_1();
  v297 = v43;
  v44 = OUTLINED_FUNCTION_168_0();
  v301 = *(_QWORD *)(v44 - 8);
  v302 = v44;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_18_1();
  v293 = v46;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_31_0();
  v292 = v48;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v49);
  v296 = (uint64_t)v251 - v50;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v51);
  v307 = (uint64_t)v251 - v52;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_18_1();
  v291 = v54;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_31_0();
  v289 = v56;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v57);
  OUTLINED_FUNCTION_31_0();
  v298 = v58;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v59);
  v61 = (char *)v251 - v60;
  v308 = type metadata accessor for TimeZone();
  v303 = *(_QWORD *)(v308 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v62);
  v299 = (char *)v251 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17_1();
  v65 = MEMORY[0x24BDAC7A8](v64);
  v67 = (char *)v251 - v66;
  MEMORY[0x24BDAC7A8](v65);
  v306 = (uint64_t)v251 - v68;
  v69 = OUTLINED_FUNCTION_167_0();
  v304 = *(_QWORD *)(v69 - 8);
  v305 = v69;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v70);
  OUTLINED_FUNCTION_171_0(v71, v251[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v72);
  OUTLINED_FUNCTION_170_2();
  MEMORY[0x24BDAC7A8](v73);
  v75 = (char *)v251 - v74;
  v76 = OUTLINED_FUNCTION_78_10();
  v77 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_18_1();
  v310 = v78;
  OUTLINED_FUNCTION_17_1();
  v80 = MEMORY[0x24BDAC7A8](v79);
  v82 = (char *)v251 - v81;
  v83 = MEMORY[0x24BDAC7A8](v80);
  v85 = (char *)v251 - v84;
  v284 = v25;
  v313 = OUTLINED_FUNCTION_285_0(v83, sel_attributeSet);
  v86 = objc_msgSend(v313, sel_startDate);
  if (!v86)
  {
    OUTLINED_FUNCTION_5_24((uint64_t)v75, 1);
    v20 = (uint64_t)v75;
    goto LABEL_6;
  }
  v87 = v86;
  v311 = v27;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_212_1((uint64_t)v75, (uint64_t)v82);
  OUTLINED_FUNCTION_5_24((uint64_t)v75, 0);
  OUTLINED_FUNCTION_22_2((uint64_t)v75, 1, v76);
  if (v88)
  {
    v20 = (uint64_t)v75;
    v27 = v311;
LABEL_6:
    v90 = v313;
LABEL_18:
    outlined destroy of MobileSMSDocument?(v20, &demangling cache variable for type metadata for Date?);
    if (one-time initialization token for search != -1)
      swift_once();
    v108 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v108, (uint64_t)static Logging.search);
    v109 = OUTLINED_FUNCTION_80();
    if (OUTLINED_FUNCTION_31(v109))
    {
      v110 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_188_2(v110);
      OUTLINED_FUNCTION_44_16(&dword_24315F000, v111, v112, "LocalIndexClient.foundInstantAnswersHandler rejecting flight reservation missing date[s]");
      specialized UnsafeMutablePointer.deallocate()();
    }

    v113 = 1;
    goto LABEL_23;
  }
  v283 = v77;
  v89 = OUTLINED_FUNCTION_212_1((uint64_t)v85, (uint64_t)v75);
  v90 = v313;
  v91 = OUTLINED_FUNCTION_242_0(v89, sel_endDate);
  if (!v91)
  {
    OUTLINED_FUNCTION_5_24(v20, 1);
    goto LABEL_17;
  }
  v92 = v91;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_212_1(v20, (uint64_t)v82);
  OUTLINED_FUNCTION_5_24(v20, 0);
  OUTLINED_FUNCTION_22_2(v20, 1, v76);
  if (v88)
  {
LABEL_17:
    OUTLINED_FUNCTION_4_18((uint64_t)v85, *(uint64_t (**)(uint64_t, uint64_t))(v283 + 8));
    v27 = v311;
    goto LABEL_18;
  }
  v282 = v85;
  v281 = v76;
  OUTLINED_FUNCTION_212_1(v310, v20);
  v93 = v309;
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v94 = *(_QWORD *)(OUTLINED_FUNCTION_297() - 8);
  v95 = *(_QWORD *)(v94 + 72);
  v96 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
  v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_243351440;
  OUTLINED_FUNCTION_156_2(v97 + v96, *MEMORY[0x24BDCF240]);
  OUTLINED_FUNCTION_156_2(v97 + v96 + v95, *MEMORY[0x24BDCF250]);
  OUTLINED_FUNCTION_156_2(v97 + v96 + 2 * v95, *MEMORY[0x24BDCF220]);
  OUTLINED_FUNCTION_156_2(v97 + v96 + 3 * v95, *MEMORY[0x24BDCF230]);
  OUTLINED_FUNCTION_156_2(v97 + v96 + 4 * v95, *MEMORY[0x24BDCF258]);
  OUTLINED_FUNCTION_156_2(v97 + v96 + 5 * v95, *MEMORY[0x24BDCF260]);
  v98 = specialized Set.init(_nonEmptyArrayLiteral:)(v97);
  OUTLINED_FUNCTION_20_18(v98, (SEL *)&selRef_flightDepartureTimeZone);
  TimeZone.init(identifier:)();
  OUTLINED_FUNCTION_47();
  v99 = OUTLINED_FUNCTION_245();
  v100 = v308;
  OUTLINED_FUNCTION_22_2(v99, v101, v308);
  if (v88)
  {
    OUTLINED_FUNCTION_118_0();
    outlined destroy of MobileSMSDocument?((uint64_t)v61, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for search != -1)
      swift_once();
    v102 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v102, (uint64_t)static Logging.search);
    v103 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_31(v103);
    OUTLINED_FUNCTION_250_0();
    if (v104)
    {
      v105 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_188_2(v105);
      OUTLINED_FUNCTION_44_16(&dword_24315F000, v106, v107, "LocalIndexClient.foundInstantAnswersHandler could not initialize valid depature timezone");
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_113_5();
    goto LABEL_34;
  }
  v114 = v303;
  v95 = *(_QWORD *)(v303 + 32);
  v115 = v306;
  OUTLINED_FUNCTION_211_1(v306, (uint64_t)v61);
  v116 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 16);
  v90 = v313;
  v116(v67, v115, v100);
  OUTLINED_FUNCTION_295();
  v117 = Calendar.dateComponents(_:from:)();
  OUTLINED_FUNCTION_20_18(v117, (SEL *)&selRef_flightArrivalTimeZone);
  if (v118)
    v119 = v118;
  else
    v119 = (void *)0xE300000000000000;
  v120 = v298;
  TimeZone.init(identifier:)();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_22_2(v120, 1, v100);
  if (v88)
  {
    OUTLINED_FUNCTION_118_0();
    outlined destroy of MobileSMSDocument?(v120, &demangling cache variable for type metadata for TimeZone?);
    v121 = v302;
    if (one-time initialization token for search != -1)
      swift_once();
    v122 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v122, (uint64_t)static Logging.search);
    v123 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_31(v123);
    OUTLINED_FUNCTION_250_0();
    if (v124)
    {
      v125 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_188_2(v125);
      OUTLINED_FUNCTION_44_16(&dword_24315F000, v126, v127, "LocalIndexClient.foundInstantAnswersHandler could not initialize valid arrival timezone");
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_113_5();
    (*(void (**)(uint64_t, uint64_t))(v301 + 8))(v307, v121);
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v306, v100);
LABEL_34:
    (*(void (**)(uint64_t, uint64_t))(v304 + 8))(v93, v305);
    v128 = *(void (**)(uint64_t, char *))(v95 + 8);
    OUTLINED_FUNCTION_239(v310);
    v129 = (uint64_t)v282;
    v130 = (char *)v90;
LABEL_64:
    v128(v129, v130);
    v113 = 1;
    v27 = v311;
LABEL_23:
    __swift_storeEnumTagSinglePayload(v27, v113, 1, (uint64_t)v312);
    OUTLINED_FUNCTION_43_0();
    return;
  }
  v131 = v299;
  v132 = OUTLINED_FUNCTION_47_8();
  OUTLINED_FUNCTION_211_1(v132, v133);
  v116(v67, (uint64_t)v131, v100);
  OUTLINED_FUNCTION_295();
  v134 = v296;
  Calendar.dateComponents(_:from:)();
  v135 = OUTLINED_FUNCTION_118_0();
  OUTLINED_FUNCTION_20_18(v135, (SEL *)&selRef_flightCheckInUrl);
  if (v136)
  {
    v131 = v136;
    v137 = v297;
    URL.init(string:)();
    v138 = OUTLINED_FUNCTION_36_0();
  }
  else
  {
    v139 = OUTLINED_FUNCTION_5_2();
    v137 = v297;
    v138 = OUTLINED_FUNCTION_49(v297, v140, v141, v139);
  }
  v142 = v295;
  v143 = v294;
  OUTLINED_FUNCTION_20_18(v138, (SEL *)&selRef_flightBookingInfoUrl);
  if (v144)
  {
    v131 = v144;
    URL.init(string:)();
    v145 = OUTLINED_FUNCTION_36_0();
  }
  else
  {
    v146 = OUTLINED_FUNCTION_5_2();
    v145 = OUTLINED_FUNCTION_49(v300, v147, v148, v146);
  }
  OUTLINED_FUNCTION_20_18(v145, (SEL *)&selRef_uniqueIdentifier);
  if (!v150)
  {
    if (one-time initialization token for search != -1)
      swift_once();
    v233 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v233, (uint64_t)static Logging.search);
    v234 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_31(v234);
    OUTLINED_FUNCTION_138_3();
    if (v235)
    {
      v236 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_188_2(v236);
      v239 = "LocalIndexClient.foundInstantAnswersHandler rejecting flight reservation missing identifier";
      goto LABEL_61;
    }
LABEL_62:

    OUTLINED_FUNCTION_113_5();
    OUTLINED_FUNCTION_111_6(v300);
    OUTLINED_FUNCTION_111_6(v137);
    OUTLINED_FUNCTION_163_2();
    OUTLINED_FUNCTION_83_4();
    OUTLINED_FUNCTION_251_0();
    OUTLINED_FUNCTION_146_5(v306);
    (*(void (**)(uint64_t, uint64_t))(v304 + 8))(v93, v305);
LABEL_63:
    v128 = (void (*)(uint64_t, char *))v90[1];
    v128(v310, v67);
    v129 = (uint64_t)v282;
    v130 = v67;
    goto LABEL_64;
  }
  v67 = v150;
  v298 = v149;
  OUTLINED_FUNCTION_20_18(v149, (SEL *)&selRef_mailMessageID);
  if (!v152)
  {
    OUTLINED_FUNCTION_96_0();
    if (one-time initialization token for search != -1)
      swift_once();
    v240 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v240, (uint64_t)static Logging.search);
    v241 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_31(v241);
    OUTLINED_FUNCTION_138_3();
    if (v242)
    {
      v243 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_188_2(v243);
      v239 = "LocalIndexClient.foundInstantAnswersHandler rejecting flight reservation missing mailMessageID";
LABEL_61:
      OUTLINED_FUNCTION_44_16(&dword_24315F000, v237, v238, v239);
      specialized UnsafeMutablePointer.deallocate()();
    }
    goto LABEL_62;
  }
  v153 = v152;
  v270 = v151;
  OUTLINED_FUNCTION_20_18(v151, (SEL *)&selRef_flightNumber);
  if (!v155)
  {
    OUTLINED_FUNCTION_96_0();
    OUTLINED_FUNCTION_36_0();
    if (one-time initialization token for search != -1)
      swift_once();
    v244 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v244, (uint64_t)static Logging.search);
    v245 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_31(v245);
    OUTLINED_FUNCTION_138_3();
    if (v246)
    {
      v247 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_188_2(v247);
      OUTLINED_FUNCTION_44_16(&dword_24315F000, v248, v249, "LocalIndexClient.foundInstantAnswersHandler rejecting flight reservation flightNumber");
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_113_5();
    OUTLINED_FUNCTION_111_6(v300);
    OUTLINED_FUNCTION_111_6(v137);
    OUTLINED_FUNCTION_163_2();
    OUTLINED_FUNCTION_83_4();
    OUTLINED_FUNCTION_251_0();
    OUTLINED_FUNCTION_146_5(v306);
    (*(void (**)(uint64_t, uint64_t))(v304 + 8))(v309, v305);
    goto LABEL_63;
  }
  v259 = v67;
  v260 = v155;
  v265 = (uint64_t)v153;
  v269 = v154;
  v156 = OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_49(v143, v157, v158, v156);
  OUTLINED_FUNCTION_206(v137, v290);
  OUTLINED_FUNCTION_206(v300, v142);
  OUTLINED_FUNCTION_20_18(v159, (SEL *)&selRef_flightCarrier);
  v268 = v160;
  v267 = v161;
  OUTLINED_FUNCTION_20_18(v160, (SEL *)&selRef_flightCarrierCode);
  v266 = v162;
  v280 = v163;
  OUTLINED_FUNCTION_211_1(v292, v307);
  OUTLINED_FUNCTION_211_1(v293, v134);
  v164 = v289;
  v165 = v308;
  v116((char *)v289, v306, v308);
  OUTLINED_FUNCTION_14_9(v164);
  v166 = v291;
  v116((char *)v291, (uint64_t)v299, v165);
  v167 = OUTLINED_FUNCTION_14_9(v166);
  OUTLINED_FUNCTION_20_18(v167, (SEL *)&selRef_flightArrivalAirportCode);
  v264 = v168;
  v263 = v169;
  OUTLINED_FUNCTION_20_18(v168, (SEL *)&selRef_flightDepartureAirportCode);
  v262 = v170;
  v261 = v171;
  OUTLINED_FUNCTION_20_18(v170, (SEL *)&selRef_flightArrivalAirportName);
  v274 = v172;
  v276 = v173;
  OUTLINED_FUNCTION_20_18(v172, (SEL *)&selRef_flightDepartureAirportName);
  v279 = v174;
  v278 = v175;
  OUTLINED_FUNCTION_20_18(v174, (SEL *)&selRef_flightConfirmationNumber);
  v277 = v176;
  v272 = v177;
  OUTLINED_FUNCTION_119_4(v176, (SEL *)&selRef_flightPassengerNames);
  v179 = v178;
  OUTLINED_FUNCTION_119_4(v178, (SEL *)&selRef_flightPassengerSeatNumbers);
  v181 = v180;
  OUTLINED_FUNCTION_20_18(v180, (SEL *)&selRef_flightArrivalTerminal);
  v275 = v182;
  v273 = v183;
  OUTLINED_FUNCTION_20_18(v182, (SEL *)&selRef_flightDepartureTerminal);
  v271 = v184;
  v186 = v185;
  outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v284);
  v258 = v187;
  v257 = v188;
  if (v188)
  {
    v189 = MEMORY[0x24BEE4AF8];
    if (!v181)
      v181 = MEMORY[0x24BEE4AF8];
    v252 = v181;
    if (v179)
      v189 = v179;
    v256 = v189;
    v190 = v285;
    OUTLINED_FUNCTION_117();
    v284 = (void *)dateString(fromDateComponents:timezone:)();
    v192 = v191;
    v193 = dateString(fromDateComponents:timezone:)();
    v253 = v193;
    v195 = v194;
    v255 = v186;
    swift_bridgeObjectRetain();
    v251[1] = v192;
    swift_bridgeObjectRetain();
    v254 = v195;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v196 = v260;
    OUTLINED_FUNCTION_4_7();
    v197 = v272;
    OUTLINED_FUNCTION_76_0();
    v198 = v276;
    swift_bridgeObjectRetain();
    v199 = v278;
    OUTLINED_FUNCTION_91_0();
    swift_bridgeObjectRetain();
    v200 = swift_bridgeObjectRetain();
    v250 = v186;
    v201 = v192;
    v202 = v195;
    v203 = v266;
    v204 = (uint64_t)v280;
    v205 = v269;
    v206 = specialized Sequence.compactMap<A>(_:)(v190, (uint64_t)v284, v201, v193, v202, v266, v280, v269, v196, v277, v197, v274, v198, v279, v199, v181, v275, v200, v271,
             v250);
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v206);
    v208 = v207;
    v209 = (uint64_t)v288;
    v210 = v259;
    *v288 = v298;
    *(_QWORD *)(v209 + 8) = v210;
    v211 = v312;
    OUTLINED_FUNCTION_164_2(v209 + v312[5], (uint64_t)&a17);
    *(_QWORD *)(v209 + v211[6]) = v208;
    *(_QWORD *)(v209 + v211[7]) = v190;
    v212 = (_QWORD *)(v209 + v211[8]);
    v213 = v257;
    *v212 = v258;
    v212[1] = v213;
    v214 = (uint64_t *)(v209 + v211[9]);
    v215 = v265;
    *v214 = v270;
    v214[1] = v215;
    v216 = (uint64_t *)(v209 + v211[10]);
    *v216 = v205;
    v216[1] = (uint64_t)v196;
    OUTLINED_FUNCTION_164_2(v209 + v211[11], (uint64_t)&a13);
    OUTLINED_FUNCTION_164_2(v209 + v211[12], (uint64_t)&a18);
    v217 = (uint64_t *)(v209 + v211[13]);
    v218 = v267;
    *v217 = v268;
    v217[1] = v218;
    v219 = (uint64_t *)(v209 + v211[14]);
    *v219 = v203;
    v219[1] = v204;
    OUTLINED_FUNCTION_304_0(v209 + v211[15], (uint64_t)&a15);
    OUTLINED_FUNCTION_304_0(v209 + v211[16], (uint64_t)&a16);
    OUTLINED_FUNCTION_252_0(v209 + v211[17], (uint64_t)&a12);
    OUTLINED_FUNCTION_252_0(v209 + v211[18], (uint64_t)&a14);
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[19]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[20]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[21]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[22]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[23]));
    *(_QWORD *)(v209 + v211[24]) = v256;
    *(_QWORD *)(v209 + v211[25]) = v252;
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[26]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[27]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[28]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v209 + v211[29]));
    v220 = (_QWORD *)(v209 + v211[30]);
    *v220 = 0;
    v220[1] = 0;
    if (one-time initialization token for search != -1)
      swift_once();
    v221 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_113_4(v221, (uint64_t)static Logging.search);
    v222 = v286;
    OUTLINED_FUNCTION_310_0(v209, v286);
    v223 = v287;
    OUTLINED_FUNCTION_310_0(v209, v287);
    v224 = Logger.logObject.getter();
    v225 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_269_0(v224))
    {
      v226 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      v315 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v226 = 136315394;
      specialized Encodable.oms_jsonPrettyPrinted()();
      OUTLINED_FUNCTION_68_0(v227, v228);
      v314 = v229;
      OUTLINED_FUNCTION_226_1();
      OUTLINED_FUNCTION_36_0();
      OUTLINED_FUNCTION_69_8(v222);
      *(_WORD *)(v226 + 12) = 2080;
      FlightReservation.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_68_0(v230, v231);
      v314 = v232;
      OUTLINED_FUNCTION_226_1();
      OUTLINED_FUNCTION_36_0();
      OUTLINED_FUNCTION_69_8(v223);
      OUTLINED_FUNCTION_17_2(&dword_24315F000, v224, v225, "LocalIndexClient.foundInstantAnswersHandler found flight reservation: %s ; %s",
        (uint8_t *)v226);
      OUTLINED_FUNCTION_15_1();
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_113_5();
    OUTLINED_FUNCTION_6_7(v223);
    OUTLINED_FUNCTION_6_7(v222);
    OUTLINED_FUNCTION_111_6(v300);
    OUTLINED_FUNCTION_111_6(v297);
    OUTLINED_FUNCTION_239(v296);
    OUTLINED_FUNCTION_83_4();
    OUTLINED_FUNCTION_239(v307);
    OUTLINED_FUNCTION_146_5(v306);
    (*(void (**)(uint64_t, uint64_t))(v304 + 8))(v309, v305);
    OUTLINED_FUNCTION_105_11(v310);
    OUTLINED_FUNCTION_105_11((uint64_t)v282);
    v27 = v311;
    outlined init with take of SearchResult(v209, v311, type metadata accessor for FlightReservation);
    v113 = 0;
    goto LABEL_23;
  }
  __break(1u);
}

void static LocalIndexClient.hotelReservation(from:answerAttributes:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  char v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  os_log_type_t v74;
  _WORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, void *);
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_type_t v161;
  _BOOL4 v162;
  uint64_t v163;
  _WORD *v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  os_log_type_t v169;
  _BOOL4 v170;
  _WORD *v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  uint64_t (*v176)(uint64_t, _QWORD);
  uint64_t v177[4];
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  NSObject *v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  id v221;
  uint64_t v222;
  uint64_t v223;

  OUTLINED_FUNCTION_18_2();
  v200 = v2;
  v4 = v3;
  v219 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_0_3();
  v207 = v7;
  v220 = (int *)OUTLINED_FUNCTION_258();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_18_1();
  v202 = v9;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_31_0();
  v201 = v11;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_34_1();
  v203 = v13;
  v14 = OUTLINED_FUNCTION_168_0();
  v208 = *(_QWORD *)(v14 - 8);
  v209 = v14;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_18_1();
  v206 = v16;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_31_0();
  v205 = v18;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_31_0();
  v212 = v20;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v21);
  v213 = (uint64_t)v177 - v22;
  v216 = (_QWORD *)OUTLINED_FUNCTION_260();
  v210 = *(v216 - 1);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_71();
  v26 = v24 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v214 = (uint64_t)v177 - v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_18_1();
  v204 = v30;
  OUTLINED_FUNCTION_17_1();
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)v177 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v215 = (uint64_t)v177 - v35;
  v36 = OUTLINED_FUNCTION_167_0();
  v211 = *(_QWORD *)(v36 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_171_0(v38, v177[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_170_2();
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)v177 - v41;
  v43 = OUTLINED_FUNCTION_78_10();
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_18_1();
  v46 = v45;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_262_0();
  MEMORY[0x24BDAC7A8](v48);
  v218 = (uint64_t)v177 - v49;
  v199 = v4;
  v221 = objc_msgSend(v4, sel_attributeSet);
  v50 = objc_msgSend(v221, sel_startDate);
  if (!v50)
  {
    OUTLINED_FUNCTION_86_12((uint64_t)v42, 1);
    goto LABEL_8;
  }
  v4 = v50;
  v198 = v36;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_231_0((uint64_t)v42, v0);
  OUTLINED_FUNCTION_86_12((uint64_t)v42, 0);
  OUTLINED_FUNCTION_22_2((uint64_t)v42, 1, v43);
  if (v51)
  {
LABEL_8:
    v1 = (uint64_t)v42;
LABEL_11:
    v62 = v221;
    outlined destroy of MobileSMSDocument?(v1, &demangling cache variable for type metadata for Date?);
    if (one-time initialization token for search != -1)
      swift_once();
    v63 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v63, (uint64_t)static Logging.search);
    v64 = OUTLINED_FUNCTION_48_1();
    v65 = OUTLINED_FUNCTION_21(v64);
    v66 = v219;
    if (v65)
    {
      v67 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v67);
      OUTLINED_FUNCTION_7(&dword_24315F000, v68, v69, "LocalIndexClient.foundInstantAnswersHandler rejecting hotel reservation missing date[s]");
      specialized UnsafeMutablePointer.deallocate()();
    }

    goto LABEL_16;
  }
  v197 = v44;
  OUTLINED_FUNCTION_231_0(v218, (uint64_t)v42);
  v52 = objc_msgSend(v221, sel_endDate);
  if (!v52)
  {
    OUTLINED_FUNCTION_86_12(v1, 1);
    goto LABEL_10;
  }
  v4 = v52;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_231_0(v1, v0);
  OUTLINED_FUNCTION_86_12(v1, 0);
  OUTLINED_FUNCTION_22_2(v1, 1, v43);
  if (v51)
  {
LABEL_10:
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v218, v43);
    goto LABEL_11;
  }
  v196 = v43;
  OUTLINED_FUNCTION_231_0(v46, v1);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v53 = *(_QWORD *)(OUTLINED_FUNCTION_297() - 8);
  v54 = *(_QWORD *)(v53 + 72);
  v55 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_243351440;
  OUTLINED_FUNCTION_142_3(v56 + v55, *MEMORY[0x24BDCF240]);
  OUTLINED_FUNCTION_142_3(v56 + v55 + v54, *MEMORY[0x24BDCF250]);
  OUTLINED_FUNCTION_142_3(v56 + v55 + 2 * v54, *MEMORY[0x24BDCF220]);
  OUTLINED_FUNCTION_142_3(v56 + v55 + 3 * v54, *MEMORY[0x24BDCF230]);
  OUTLINED_FUNCTION_142_3(v56 + v55 + 4 * v54, *MEMORY[0x24BDCF258]);
  OUTLINED_FUNCTION_142_3(v56 + v55 + 5 * v54, *MEMORY[0x24BDCF260]);
  v57 = specialized Set.init(_nonEmptyArrayLiteral:)(v56);
  v58 = v221;
  OUTLINED_FUNCTION_20_18(v57, (SEL *)&selRef_hotelTimeZone);
  v60 = v46;
  v61 = v215;
  if (v59)
  {
    TimeZone.init(identifier:)();
    OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_223_1();
  }
  v71 = v198;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v61, (uint64_t)v34, &demangling cache variable for type metadata for TimeZone?);
  v72 = v216;
  OUTLINED_FUNCTION_22_2((uint64_t)v34, 1, (uint64_t)v216);
  v66 = v219;
  if (v51)
  {
    OUTLINED_FUNCTION_80_0();
    outlined destroy of MobileSMSDocument?((uint64_t)v34, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for search != -1)
      swift_once();
    v73 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v73, (uint64_t)static Logging.search);
    v74 = OUTLINED_FUNCTION_48_1();
    if (OUTLINED_FUNCTION_21(v74))
    {
      v75 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v75);
      OUTLINED_FUNCTION_7(&dword_24315F000, v76, v77, "LocalIndexClient.foundInstantAnswersHandler could not initialize valid timezone");
      specialized UnsafeMutablePointer.deallocate()();
    }

    outlined destroy of MobileSMSDocument?(v61, &demangling cache variable for type metadata for TimeZone?);
    v78 = OUTLINED_FUNCTION_209_0();
    v79(v78, v71);
    OUTLINED_FUNCTION_244_0();
    v80 = v60;
    goto LABEL_51;
  }
  v81 = v210;
  v82 = v214;
  OUTLINED_FUNCTION_280_0(v214, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v210 + 32));
  v83 = *(void (**)(uint64_t, uint64_t, void *))(v81 + 16);
  v83(v26, v82, v72);
  v84 = v217;
  Calendar.timeZone.setter();
  Calendar.dateComponents(_:from:)();
  v85 = v60;
  Calendar.dateComponents(_:from:)();
  v86 = OUTLINED_FUNCTION_80_0();
  OUTLINED_FUNCTION_20_18(v86, (SEL *)&selRef_hotelReservationForName);
  if (v88)
  {
    v89 = v88;
    v195 = v87;
    v90 = v207;
  }
  else
  {
    OUTLINED_FUNCTION_20_18(v87, (SEL *)&selRef_hotelProvider);
    v89 = v91;
    v90 = v207;
    v195 = v87;
    if (v91)
    {
      if (one-time initialization token for search != -1)
        swift_once();
      v92 = OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_28(v92, (uint64_t)static Logging.search);
      v93 = OUTLINED_FUNCTION_51_2();
      if (os_log_type_enabled(v84, v93))
      {
        v94 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        *(_WORD *)v94 = 0;
        OUTLINED_FUNCTION_19_2(&dword_24315F000, v84, v93, "LocalIndexClient.foundInstantAnswersHandler: hotelReservationForName is nil, using hotelProvider to populate hotelReservationForName", v94);
        specialized UnsafeMutablePointer.deallocate()();
      }

    }
  }
  OUTLINED_FUNCTION_20_18(v87, (SEL *)&selRef_uniqueIdentifier);
  if (!v96)
  {
    OUTLINED_FUNCTION_118_0();
    if (one-time initialization token for search != -1)
      swift_once();
    v160 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v160, (uint64_t)static Logging.search);
    v161 = OUTLINED_FUNCTION_48_1();
    v162 = OUTLINED_FUNCTION_21(v161);
    v163 = v198;
    if (v162)
    {
      v164 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v164);
      v167 = "LocalIndexClient.foundInstantAnswersHandler rejecting hotel reservation missing identifier";
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  v97 = v96;
  v193 = v95;
  OUTLINED_FUNCTION_20_18(v95, (SEL *)&selRef_mailMessageID);
  if (!v99)
  {
    OUTLINED_FUNCTION_36_0();
    OUTLINED_FUNCTION_118_0();
    if (one-time initialization token for search != -1)
      swift_once();
    v168 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v168, (uint64_t)static Logging.search);
    v169 = OUTLINED_FUNCTION_48_1();
    v170 = OUTLINED_FUNCTION_21(v169);
    v163 = v198;
    if (v170)
    {
      v171 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v171);
      v167 = "LocalIndexClient.foundInstantAnswersHandler rejecting hotel reservation missing mailMessageID";
LABEL_49:
      OUTLINED_FUNCTION_7(&dword_24315F000, v165, v166, v167);
      specialized UnsafeMutablePointer.deallocate()();
    }
LABEL_50:

    OUTLINED_FUNCTION_105_11(v212);
    OUTLINED_FUNCTION_105_11(v213);
    OUTLINED_FUNCTION_179_1();
    outlined destroy of MobileSMSDocument?(v61, &demangling cache variable for type metadata for TimeZone?);
    v172 = OUTLINED_FUNCTION_209_0();
    v173(v172, v163);
    OUTLINED_FUNCTION_244_0();
    v80 = v85;
LABEL_51:
    OUTLINED_FUNCTION_105_11(v80);
    OUTLINED_FUNCTION_105_11(v218);
LABEL_16:
    v70 = 1;
LABEL_17:
    __swift_storeEnumTagSinglePayload(v66, v70, 1, (uint64_t)v220);
    OUTLINED_FUNCTION_43_0();
    return;
  }
  v180 = v97;
  v192 = v89;
  v189 = v99;
  v190 = v98;
  v191 = v85;
  v100 = OUTLINED_FUNCTION_5_2();
  v103 = OUTLINED_FUNCTION_49(v90, v101, v102, v100);
  OUTLINED_FUNCTION_20_18(v103, (SEL *)&selRef_hotelReservationId);
  v106 = OUTLINED_FUNCTION_271_0(v104, v105);
  OUTLINED_FUNCTION_20_18(v106, (SEL *)&selRef_hotelUnderName);
  v186 = v107;
  v185 = v108;
  v109 = v72;
  OUTLINED_FUNCTION_230_0(v205, v213);
  OUTLINED_FUNCTION_230_0(v206, v212);
  v110 = v204;
  v83(v204, v214, v109);
  v111 = OUTLINED_FUNCTION_5_24(v110, 0);
  OUTLINED_FUNCTION_292_0(v111, (SEL *)&selRef_hotelModifyReservationUrl);
  v184 = v112;
  v183 = v113;
  OUTLINED_FUNCTION_292_0(v112, (SEL *)&selRef_hotelReservationForTelephone);
  v182 = v114;
  v181 = v115;
  OUTLINED_FUNCTION_292_0(v114, (SEL *)&selRef_hotelReservationForAddress);
  v194 = v116;
  v118 = v117;
  outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v199);
  v199 = v119;
  v179 = v120;
  if (v120)
  {
    v121 = v200;
    OUTLINED_FUNCTION_46_0();
    v122 = dateString(fromDateComponents:timezone:)();
    v177[3] = v122;
    v124 = v123;
    v125 = dateString(fromDateComponents:timezone:)();
    v127 = v126;
    v128 = v187;
    OUTLINED_FUNCTION_115();
    v177[2] = v124;
    swift_bridgeObjectRetain();
    v129 = v127;
    v178 = v127;
    swift_bridgeObjectRetain();
    v130 = v192;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_23_0();
    v131 = v118;
    v177[1] = v118;
    v132 = v188;
    v133 = v122;
    v134 = v195;
    v135 = specialized Sequence.compactMap<A>(_:)(v121, v133, v124, v125, v129, v195, v130, v194, v131, v188, v128);
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v135);
    v137 = v136;
    v138 = (uint64_t)v203;
    v139 = v180;
    *v203 = v193;
    *(_QWORD *)(v138 + 8) = v139;
    v140 = v220;
    outlined init with take of URL?(v207, v138 + v220[5], &demangling cache variable for type metadata for URL?);
    *(_QWORD *)(v138 + v140[6]) = v137;
    *(_QWORD *)(v138 + v140[7]) = v121;
    OUTLINED_FUNCTION_42_9((_QWORD *)(v138 + v140[8]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v138 + v140[9]));
    v141 = (uint64_t *)(v138 + v140[10]);
    *v141 = v132;
    v141[1] = v128;
    OUTLINED_FUNCTION_42_9((_QWORD *)(v138 + v140[11]));
    v142 = v208;
    v143 = v209;
    OUTLINED_FUNCTION_230_0(v138 + v140[12], v205);
    OUTLINED_FUNCTION_230_0(v138 + v140[13], v206);
    outlined init with take of URL?(v204, v138 + v140[14], &demangling cache variable for type metadata for TimeZone?);
    v144 = (uint64_t *)(v138 + v140[15]);
    *v144 = v134;
    v144[1] = v130;
    OUTLINED_FUNCTION_42_9((_QWORD *)(v138 + v140[16]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v138 + v140[17]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v138 + v140[18]));
    OUTLINED_FUNCTION_42_9((_QWORD *)(v138 + v140[19]));
    v145 = (uint64_t *)(v138 + v140[20]);
    v146 = v178;
    *v145 = v125;
    v145[1] = v146;
    v147 = v142;
    if (one-time initialization token for search != -1)
      swift_once();
    v148 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_113_4(v148, (uint64_t)static Logging.search);
    v149 = v201;
    OUTLINED_FUNCTION_13_7(v138, v201);
    v150 = v202;
    OUTLINED_FUNCTION_13_7(v138, v202);
    v151 = Logger.logObject.getter();
    v152 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v151, v152))
    {
      v153 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      v223 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v153 = 136315394;
      specialized Encodable.oms_jsonPrettyPrinted()();
      OUTLINED_FUNCTION_68_0(v154, v155);
      v222 = v156;
      OUTLINED_FUNCTION_227_1();
      OUTLINED_FUNCTION_36_0();
      _s10OmniSearch0B6ResultVWOhTm_1(v149, type metadata accessor for HotelReservation);
      *(_WORD *)(v153 + 12) = 2080;
      HotelReservation.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_68_0(v157, v158);
      v222 = v159;
      OUTLINED_FUNCTION_227_1();
      OUTLINED_FUNCTION_36_0();
      OUTLINED_FUNCTION_202_1();
      OUTLINED_FUNCTION_17_2(&dword_24315F000, v151, v152, "LocalIndexClient.foundInstantAnswersHandler found hotel reservation: %s ;  %s",
        (uint8_t *)v153);
      OUTLINED_FUNCTION_15_1();
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_113_5();
    OUTLINED_FUNCTION_6_7(v150);
    OUTLINED_FUNCTION_6_7(v149);
    v174 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
    OUTLINED_FUNCTION_239(v212);
    v174(v213, v143);
    OUTLINED_FUNCTION_179_1();
    outlined destroy of MobileSMSDocument?(v215, &demangling cache variable for type metadata for TimeZone?);
    v175 = OUTLINED_FUNCTION_209_0();
    OUTLINED_FUNCTION_177_0(v175, v176);
    OUTLINED_FUNCTION_244_0();
    OUTLINED_FUNCTION_105_11(v191);
    OUTLINED_FUNCTION_105_11(v218);
    outlined init with take of SearchResult(v138, v66, type metadata accessor for HotelReservation);
    v70 = 0;
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  __break(1u);
}

void static LocalIndexClient.restaurantReservation(from:answerAttributes:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  void (*v44)(void *, uint64_t, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  int v134;
  _BOOL4 v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  os_log_type_t v148;
  _BOOL4 v149;
  _WORD *v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  os_log_type_t v155;
  _BOOL4 v156;
  _WORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  void *v182;
  char *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  OUTLINED_FUNCTION_18_2();
  v179 = v2;
  v4 = v3;
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_0_3();
  v186 = v8;
  v197 = OUTLINED_FUNCTION_259_0();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_18_1();
  v181 = v10;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v11);
  v180 = (char *)&v160 - v12;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_34_1();
  v184 = v14;
  v189 = OUTLINED_FUNCTION_168_0();
  v192 = *(_QWORD *)(v189 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_18_1();
  v185 = v16;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_34_1();
  v188 = v18;
  v195 = OUTLINED_FUNCTION_260();
  v190 = *(_QWORD *)(v195 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_18_1();
  v187 = v20;
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_34_1();
  v193 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v23);
  v183 = (char *)&v160 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17_1();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_262_0();
  MEMORY[0x24BDAC7A8](v26);
  v194 = (char *)&v160 - v27;
  v28 = OUTLINED_FUNCTION_167_0();
  v191 = *(_QWORD *)(v28 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_0_3();
  v196 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_44_11();
  v32 = OUTLINED_FUNCTION_78_10();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_71();
  v36 = v34 - v35;
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_34_1();
  v39 = v38;
  v182 = v4;
  v41 = OUTLINED_FUNCTION_242_0(v40, sel_attributeSet);
  v42 = objc_msgSend(v41, sel_startDate);
  if (!v42)
  {
    OUTLINED_FUNCTION_30_15((uint64_t)v0, 1);
    goto LABEL_6;
  }
  v43 = v42;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v178 = v33;
  v44 = *(void (**)(void *, uint64_t, uint64_t))(v33 + 32);
  v44(v0, v36, v32);
  OUTLINED_FUNCTION_30_15((uint64_t)v0, 0);
  OUTLINED_FUNCTION_22_2((uint64_t)v0, 1, v32);
  if (v45)
  {
LABEL_6:
    outlined destroy of MobileSMSDocument?((uint64_t)v0, &demangling cache variable for type metadata for Date?);
    v53 = v6;
    if (one-time initialization token for search != -1)
      swift_once();
    v54 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v54, (uint64_t)static Logging.search);
    v55 = OUTLINED_FUNCTION_48_1();
    if (OUTLINED_FUNCTION_21(v55))
    {
      v56 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v56);
      OUTLINED_FUNCTION_7(&dword_24315F000, v57, v58, "LocalIndexClient.foundInstantAnswersHandler rejecting restaurant reservation missing date");
      specialized UnsafeMutablePointer.deallocate()();
    }

    goto LABEL_37;
  }
  v177 = v28;
  v175 = v6;
  v176 = v39;
  v174 = v32;
  v44((void *)v39, (uint64_t)v0, v32);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v46 = *(_QWORD *)(OUTLINED_FUNCTION_297() - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_243351440;
  OUTLINED_FUNCTION_159_2(v49 + v48, *MEMORY[0x24BDCF240]);
  OUTLINED_FUNCTION_159_2(v49 + v48 + v47, *MEMORY[0x24BDCF250]);
  OUTLINED_FUNCTION_159_2(v49 + v48 + 2 * v47, *MEMORY[0x24BDCF220]);
  OUTLINED_FUNCTION_159_2(v49 + v48 + 3 * v47, *MEMORY[0x24BDCF230]);
  OUTLINED_FUNCTION_159_2(v49 + v48 + 4 * v47, *MEMORY[0x24BDCF258]);
  OUTLINED_FUNCTION_159_2(v49 + v48 + 5 * v47, *MEMORY[0x24BDCF260]);
  v50 = (void *)specialized Set.init(_nonEmptyArrayLiteral:)(v49);
  OUTLINED_FUNCTION_20_18((uint64_t)v50, (SEL *)&selRef_restaurantTimeZone);
  v52 = (uint64_t)v194;
  if (v51)
  {
    TimeZone.init(identifier:)();
    OUTLINED_FUNCTION_96_0();
  }
  else
  {
    OUTLINED_FUNCTION_223_1();
  }
  v59 = v195;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v52, v1, &demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_22_2(v1, 1, v59);
  v53 = v175;
  v60 = (int *)v197;
  v61 = v177;
  v62 = v41;
  if (v45)
  {
    OUTLINED_FUNCTION_6_1();
    outlined destroy of MobileSMSDocument?(v1, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for search != -1)
      swift_once();
    v63 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v63, (uint64_t)static Logging.search);
    v64 = OUTLINED_FUNCTION_48_1();
    v65 = OUTLINED_FUNCTION_21(v64);
    v66 = v178;
    if (v65)
    {
      v67 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v67);
      OUTLINED_FUNCTION_7(&dword_24315F000, v68, v69, "LocalIndexClient.foundInstantAnswersHandler could not initialize valid timezone");
      specialized UnsafeMutablePointer.deallocate()();
    }

    goto LABEL_36;
  }
  v70 = v190;
  v71 = v193;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 32))(v193, v1, v59);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16);
  v72(v187, v71, v59);
  Calendar.timeZone.setter();
  v73 = v188;
  Calendar.dateComponents(_:from:)();
  v74 = OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_117_2(v74, (SEL *)&selRef_uniqueIdentifier);
  if (!v76)
  {
    v146 = v189;
    if (one-time initialization token for search != -1)
      swift_once();
    v147 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v147, (uint64_t)static Logging.search);
    v148 = OUTLINED_FUNCTION_48_1();
    v149 = OUTLINED_FUNCTION_21(v148);
    v66 = v178;
    if (v149)
    {
      v150 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v150);
      v153 = "LocalIndexClient.foundInstantAnswersHandler rejecting restaurant reservation missing messageID";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  v77 = v76;
  v173 = v75;
  OUTLINED_FUNCTION_117_2(v75, (SEL *)&selRef_mailMessageID);
  v50 = (void *)v189;
  v80 = v192;
  if (!v79)
  {
    v146 = v189;
    OUTLINED_FUNCTION_36_0();
    if (one-time initialization token for search != -1)
      swift_once();
    v154 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_28(v154, (uint64_t)static Logging.search);
    v155 = OUTLINED_FUNCTION_48_1();
    v156 = OUTLINED_FUNCTION_21(v155);
    v66 = v178;
    if (v156)
    {
      v157 = (_WORD *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      OUTLINED_FUNCTION_51(v157);
      v153 = "LocalIndexClient.foundInstantAnswersHandler rejecting restaurant reservation missing mailMessageID";
LABEL_34:
      OUTLINED_FUNCTION_7(&dword_24315F000, v151, v152, v153);
      specialized UnsafeMutablePointer.deallocate()();
    }
LABEL_35:

    (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v73, v146);
    OUTLINED_FUNCTION_100_7();
LABEL_36:
    outlined destroy of MobileSMSDocument?(v52, &demangling cache variable for type metadata for TimeZone?);
    (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v196, v61);
    OUTLINED_FUNCTION_177_0(v176, *(uint64_t (**)(uint64_t, _QWORD))(v66 + 8));
LABEL_37:
    v158 = 1;
LABEL_38:
    OUTLINED_FUNCTION_88_0(v53, v158);
    OUTLINED_FUNCTION_43_0();
    return;
  }
  v163 = v77;
  v170 = v79;
  v171 = v78;
  v81 = OUTLINED_FUNCTION_5_2();
  v84 = OUTLINED_FUNCTION_49(v186, v82, v83, v81);
  OUTLINED_FUNCTION_117_2(v84, (SEL *)&selRef_restaurantReservationId);
  v169 = v85;
  v87 = v86;
  OUTLINED_FUNCTION_117_2(v85, (SEL *)&selRef_restaurantUnderName);
  v168 = v88;
  v167 = v89;
  v90 = OUTLINED_FUNCTION_280_0(v185, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 16));
  OUTLINED_FUNCTION_117_2(v90, (SEL *)&selRef_restaurantPartySize);
  v166 = v91;
  v165 = v92;
  v93 = (uint64_t)v183;
  v72((uint64_t)v183, v193, v195);
  v94 = OUTLINED_FUNCTION_14_9(v93);
  OUTLINED_FUNCTION_117_2(v94, (SEL *)&selRef_restaurantReservationForName);
  v187 = v95;
  v164 = v96;
  OUTLINED_FUNCTION_117_2(v95, (SEL *)&selRef_restaurantReservationForTelephone);
  v99 = OUTLINED_FUNCTION_271_0(v97, v98);
  v172 = v62;
  OUTLINED_FUNCTION_117_2(v99, (SEL *)&selRef_restaurantReservationForAddress);
  v101 = v100;
  v103 = v102;
  outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v182);
  v182 = v104;
  v162 = v105;
  if (v105)
  {
    v106 = v179;
    OUTLINED_FUNCTION_117();
    v107 = dateString(fromDateComponents:timezone:)();
    v161 = v107;
    v109 = v108;
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_64();
    v110 = v164;
    OUTLINED_FUNCTION_4_7();
    OUTLINED_FUNCTION_46_0();
    v159 = v87;
    v111 = v101;
    v160 = v101;
    v112 = v87;
    v113 = v169;
    v114 = specialized Sequence.compactMap<A>(_:)(v106, v107, v109, v187, v110, v111, v103, v169, v159);
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v114);
    v116 = v115;
    v117 = (uint64_t)v184;
    v118 = v163;
    *v184 = v173;
    *(_QWORD *)(v117 + 8) = v118;
    outlined init with take of URL?(v186, v117 + v60[5], &demangling cache variable for type metadata for URL?);
    *(_QWORD *)(v117 + v60[6]) = v116;
    *(_QWORD *)(v117 + v60[7]) = v106;
    v119 = (_QWORD *)(v117 + v60[8]);
    v120 = v162;
    *v119 = v182;
    v119[1] = v120;
    v121 = (_QWORD *)(v117 + v60[9]);
    v122 = v170;
    *v121 = v171;
    v121[1] = v122;
    v123 = (uint64_t *)(v117 + v60[10]);
    *v123 = v113;
    v123[1] = v112;
    OUTLINED_FUNCTION_42_9((_QWORD *)(v117 + v60[11]));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 32))(v117 + v60[12], v185, v189);
    v124 = (_QWORD *)(v117 + v60[13]);
    v125 = v165;
    *v124 = v166;
    v124[1] = v125;
    outlined init with take of URL?(v93, v117 + v60[14], &demangling cache variable for type metadata for TimeZone?);
    v126 = (_QWORD *)(v117 + v60[15]);
    *v126 = v187;
    v126[1] = v110;
    OUTLINED_FUNCTION_42_9((_QWORD *)(v117 + v60[16]));
    v127 = (uint64_t *)(v117 + v60[17]);
    *v127 = v160;
    v127[1] = v103;
    v128 = (uint64_t *)(v117 + v60[18]);
    *v128 = v161;
    v128[1] = v109;
    v129 = (uint64_t)v180;
    if (one-time initialization token for search != -1)
      swift_once();
    v130 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_113_4(v130, (uint64_t)static Logging.search);
    OUTLINED_FUNCTION_13_7(v117, v129);
    v131 = v181;
    OUTLINED_FUNCTION_13_7(v117, v181);
    v132 = Logger.logObject.getter();
    v133 = static os_log_type_t.info.getter();
    v134 = v133;
    v135 = os_log_type_enabled(v132, v133);
    v136 = (uint64_t)v194;
    v137 = v172;
    v53 = v175;
    if (v135)
    {
      v138 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      LODWORD(v187) = v134;
      v139 = v138;
      v199 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v139 = 136315394;
      specialized Encodable.oms_jsonPrettyPrinted()();
      OUTLINED_FUNCTION_68_0(v140, v141);
      v198 = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_36_0();
      OUTLINED_FUNCTION_69_8(v129);
      *(_WORD *)(v139 + 12) = 2080;
      RestaurantReservation.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_68_0(v143, v144);
      v198 = v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_36_0();
      OUTLINED_FUNCTION_69_8(v131);
      OUTLINED_FUNCTION_17_2(&dword_24315F000, v132, (os_log_type_t)v187, "LocalIndexClient.foundInstantAnswersHandler found restaurant reservation: %s ; %s",
        (uint8_t *)v139);
      OUTLINED_FUNCTION_15_1();
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_6_7(v131);
    OUTLINED_FUNCTION_6_7(v129);
    OUTLINED_FUNCTION_215_0();
    OUTLINED_FUNCTION_100_7();
    outlined destroy of MobileSMSDocument?(v136, &demangling cache variable for type metadata for TimeZone?);
    (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v196, v177);
    OUTLINED_FUNCTION_177_0(v176, *(uint64_t (**)(uint64_t, _QWORD))(v178 + 8));
    outlined init with take of SearchResult(v117, v53, type metadata accessor for RestaurantReservation);
    v158 = 0;
    goto LABEL_38;
  }
  __break(1u);
}

uint64_t implicit closure #19 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(void *a1, SEL *a2)
{
  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return OUTLINED_FUNCTION_275_0();
}

uint64_t LocalIndexClient.formatStringArray(stringArray:)(uint64_t a1)
{
  if (!a1)
    return 7104878;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  return BidirectionalCollection<>.joined(separator:)();
}

void implicit closure #21 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(uint64_t a1, void *a2, SEL *a3)
{
  uint64_t v3;

  outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(a2, a3);
  LocalIndexClient.formatStringArray(stringArray:)(v3);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_47_8();
  OUTLINED_FUNCTION_12();
}

void static LocalIndexClient.emailDocument(from:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  unsigned int v18;
  int v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  char v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE v79[24];
  uint64_t v80;

  OUTLINED_FUNCTION_18_2();
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_2();
  v5 = v4 - v3;
  v6 = OUTLINED_FUNCTION_78_10();
  v75 = *(_QWORD *)(v6 - 8);
  v76 = v6;
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_71();
  v10 = v8 - v9;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v65 - v13;
  v15 = OUTLINED_FUNCTION_36_10(v12, sel_attributeSet);
  v16 = objc_msgSend(v15, sel_mailRead);
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, sel_BOOLValue);

    v19 = v18 ^ 1;
  }
  else
  {
    v19 = 2;
  }
  v74 = v19;
  v20 = OUTLINED_FUNCTION_36_10((uint64_t)v16, sel_uniqueIdentifier);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v72 = v22;
  v73 = v21;

  if (OUTLINED_FUNCTION_256_0())
  {
    OUTLINED_FUNCTION_203_0();
    v23 = OUTLINED_FUNCTION_208_0();
  }
  else
  {
    OUTLINED_FUNCTION_147_1();
  }
  OUTLINED_FUNCTION_253_0(v23, v24, &demangling cache variable for type metadata for Any?);
  if (v80)
  {
    v25 = OUTLINED_FUNCTION_7_16();
    if ((_DWORD)v25)
    {
      v71 = v77;
      v26 = v78;
      goto LABEL_12;
    }
  }
  else
  {
    outlined destroy of MobileSMSDocument?((uint64_t)v79, &demangling cache variable for type metadata for Any?);
  }
  v71 = 0;
  v26 = 0xE000000000000000;
LABEL_12:
  v70 = v26;
  OUTLINED_FUNCTION_20_18(v25, (SEL *)&selRef_subject);
  v68 = v28;
  v69 = v27;
  OUTLINED_FUNCTION_20_18(v27, (SEL *)&selRef_contentSnippet);
  v67 = v29;
  v66 = v30;
  OUTLINED_FUNCTION_119_4(v29, (SEL *)&selRef_authorNames);
  v32 = v31;
  OUTLINED_FUNCTION_119_4(v31, (SEL *)&selRef_authorEmailAddresses);
  v34 = v33;
  if (OUTLINED_FUNCTION_256_0())
  {
    OUTLINED_FUNCTION_203_0();
    v35 = OUTLINED_FUNCTION_208_0();
  }
  else
  {
    OUTLINED_FUNCTION_147_1();
  }
  OUTLINED_FUNCTION_253_0(v35, v36, &demangling cache variable for type metadata for Any?);
  if (v80)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v37 = OUTLINED_FUNCTION_7_16();
    if ((_DWORD)v37)
    {
      v65 = v77;
      v38 = v14;
      goto LABEL_20;
    }
  }
  else
  {
    outlined destroy of MobileSMSDocument?((uint64_t)v79, &demangling cache variable for type metadata for Any?);
  }
  v38 = v14;
  v65 = MEMORY[0x24BEE4AF8];
LABEL_20:
  OUTLINED_FUNCTION_119_4(v37, (SEL *)&selRef_recipientEmailAddresses);
  v40 = v39;
  v41 = OUTLINED_FUNCTION_242_0(v39, sel_mailDateReceived);
  if (v41)
  {
    v42 = v41;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v43 = v76;
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32);
    v44(v5, v10, v76);
    __swift_storeEnumTagSinglePayload(v5, 0, 1, v43);
    OUTLINED_FUNCTION_22_2(v5, 1, v43);
    if (!v45)
    {
      v46 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v38, v5, v76);
      goto LABEL_25;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v5, 1, 1, v76);
  }
  static Date.now.getter();
  outlined destroy of MobileSMSDocument?(v5, &demangling cache variable for type metadata for Date?);
LABEL_25:
  v47 = v38;
  OUTLINED_FUNCTION_119_4(v46, (SEL *)&selRef_attachmentNames);
  v49 = v48;
  OUTLINED_FUNCTION_119_4(v48, (SEL *)&selRef_attachmentTypes);
  v51 = v50;
  OUTLINED_FUNCTION_119_4(v50, (SEL *)&selRef_attachmentPaths);
  v53 = v52;

  if (!v53)
    v53 = MEMORY[0x24BEE4AF8];
  if (!v51)
    v51 = MEMORY[0x24BEE4AF8];
  if (v49)
    v54 = v49;
  else
    v54 = MEMORY[0x24BEE4AF8];
  if (!v40)
    v40 = MEMORY[0x24BEE4AF8];
  if (!v34)
    v34 = MEMORY[0x24BEE4AF8];
  if (!v32)
    v32 = MEMORY[0x24BEE4AF8];
  v55 = (int *)type metadata accessor for EmailDocument(0);
  v56 = (uint64_t)&v1[v55[17]];
  v57 = OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_49(v56, v58, v59, v57);
  v60 = &v1[v55[18]];
  v61 = v72;
  *(_QWORD *)v1 = v73;
  *((_QWORD *)v1 + 1) = v61;
  v62 = v70;
  *((_QWORD *)v1 + 2) = v71;
  *((_QWORD *)v1 + 3) = v62;
  v63 = v68;
  *((_QWORD *)v1 + 4) = v69;
  *((_QWORD *)v1 + 5) = v63;
  v64 = v66;
  *((_QWORD *)v1 + 6) = v67;
  *((_QWORD *)v1 + 7) = v64;
  *((_QWORD *)v1 + 8) = v32;
  *((_QWORD *)v1 + 9) = v34;
  *((_QWORD *)v1 + 10) = v65;
  *((_QWORD *)v1 + 11) = v40;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v1[v55[12]], v47, v76);
  *(_QWORD *)&v1[v55[13]] = v54;
  *(_QWORD *)&v1[v55[14]] = v51;
  *(_QWORD *)&v1[v55[15]] = v53;
  v1[v55[16]] = v74;
  *(_OWORD *)v60 = 0u;
  *((_OWORD *)v60 + 1) = 0u;
  *((_QWORD *)v60 + 4) = 0;
  OUTLINED_FUNCTION_43_0();
}

void implicit closure #1 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_uniqueIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_314_0();
  OUTLINED_FUNCTION_47_8();
  OUTLINED_FUNCTION_12();
}

uint64_t LocalIndexClient.constructPhotoDocument(item:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v71 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, sel_attributeSet);
  if (objc_msgSend(v9, sel_attributeForKey_, *MEMORY[0x24BDC2068]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v73 = 0u;
    v74 = 0u;
  }
  outlined init with take of URL?((uint64_t)&v73, (uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  if (v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      v10 = v72;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of MobileSMSDocument?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  }
  v10 = MEMORY[0x24BEE4AF8];
LABEL_9:
  v11 = outlined bridged method (pb) of @objc SFResultSection.results.getter(v9, (SEL *)&selRef_photosSceneClassifications, &lazy cache variable for type metadata for CSSceneClassification);
  v69 = v10;
  v70 = a2;
  v68 = v6;
  if (v11)
  {
    v12 = v11;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v13 = result;
    }
    else
    {
      v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
    }
    v63 = v9;
    v67 = a1;
    if (v13)
    {
      if (v13 < 1)
      {
        __break(1u);
        return result;
      }
      v15 = 0;
      v16 = MEMORY[0x24BEE4AF8];
      do
      {
        if ((v12 & 0xC000000000000001) != 0)
          v17 = (id)MEMORY[0x2494F62E4](v15, v12);
        else
          v17 = *(id *)(v12 + 8 * v15 + 32);
        v18 = v17;
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v17, (SEL *)&selRef_label);
        v20 = v19;
        v22 = v21;

        if (v22)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v16 = v25;
          }
          v23 = *(_QWORD *)(v16 + 16);
          if (v23 >= *(_QWORD *)(v16 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v16 = v26;
          }
          *(_QWORD *)(v16 + 16) = v23 + 1;
          v24 = v16 + 16 * v23;
          *(_QWORD *)(v24 + 32) = v20;
          *(_QWORD *)(v24 + 40) = v22;
        }
        ++v15;
      }
      while (v13 != v15);
    }
    else
    {
      v16 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease_n();
    v9 = v63;
    a1 = v67;
  }
  else
  {
    v16 = 0;
  }
  if (objc_msgSend(v9, sel_attributeForKey_, *MEMORY[0x24BDC2090], v63))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v73 = 0u;
    v74 = 0u;
  }
  outlined init with take of URL?((uint64_t)&v73, (uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  if (v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      v27 = v72;
      goto LABEL_37;
    }
  }
  else
  {
    outlined destroy of MobileSMSDocument?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  }
  v27 = MEMORY[0x24BEE4AF8];
LABEL_37:
  v66 = v27;
  if (objc_msgSend(v9, sel_attributeForKey_, *MEMORY[0x24BDC2088]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v73 = 0u;
    v74 = 0u;
  }
  outlined init with take of URL?((uint64_t)&v73, (uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  if (v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      v28 = v72;
      goto LABEL_45;
    }
  }
  else
  {
    outlined destroy of MobileSMSDocument?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  }
  v28 = MEMORY[0x24BEE4AF8];
LABEL_45:
  v65 = v28;
  if (objc_msgSend(v9, sel_attributeForKey_, *MEMORY[0x24BDC20A0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v73 = 0u;
    v74 = 0u;
  }
  outlined init with take of URL?((uint64_t)&v73, (uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  if (!v77)
  {
    outlined destroy of MobileSMSDocument?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
    goto LABEL_52;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast())
  {
LABEL_52:
    v29 = MEMORY[0x24BEE4AF8];
    goto LABEL_53;
  }
  v29 = v72;
LABEL_53:
  v64 = v29;
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v75 = 0xD000000000000014;
  v76 = 0x800000024335EC50;
  v30 = objc_msgSend(a1, sel_uniqueIdentifier);
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v33 = v32;

  v34._countAndFlagsBits = v31;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  v35 = objc_msgSend(a1, sel_uniqueIdentifier);
  v67 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v9, (SEL *)&selRef_photosContentDescription);
  v38 = v9;
  v40 = v39;
  v42 = v41;
  outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v38, (SEL *)&selRef_photosSeasons);
  v44 = v43;
  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v38, (SEL *)&selRef_contentSnippet);
  v46 = v45;
  v48 = v47;
  v49 = v38;
  v50 = objc_msgSend(v38, sel_contentCreationDate);
  if (v50)
  {
    v51 = v50;
    v52 = (uint64_t)v68;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v53 = 0;
  }
  else
  {
    v53 = 1;
    v52 = (uint64_t)v68;
  }
  v54 = type metadata accessor for Date();
  __swift_storeEnumTagSinglePayload(v52, v53, 1, v54);
  outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v49, (SEL *)&selRef_photosBusinessNames);
  v56 = v55;

  if (v56)
    v57 = v56;
  else
    v57 = MEMORY[0x24BEE4AF8];
  if (v16)
    v58 = v16;
  else
    v58 = MEMORY[0x24BEE4AF8];
  if (v44)
    v59 = v44;
  else
    v59 = MEMORY[0x24BEE4AF8];
  v62 = v48;
  v60 = v70;
  Photo.init(id:photoDescription:locationKeywords:season:sceneClassificationLabels:snippet:ocrString:date:businessNames:peopleNames:peopleContactIdentifiers:peoplePersonIdentifiers:url:)((uint64_t)v67, v37, v40, v42, v69, v59, v58, v46, v70, v62, 0, v52, v57, v66, v65, v64);
  v61 = type metadata accessor for Photo(0);
  return __swift_storeEnumTagSinglePayload(v60, 0, 1, v61);
}

void implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_22_16();
  v1 = v0;
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_44_11();
  if (one-time initialization token for iso8601PrettyPrinted != -1)
    swift_once();
  OUTLINED_FUNCTION_298_0();
  OUTLINED_FUNCTION_196_1();
  OUTLINED_FUNCTION_193_0();
  if (v1)
  {
    OUTLINED_FUNCTION_46_1();
  }
  else
  {
    OUTLINED_FUNCTION_225_0();
    OUTLINED_FUNCTION_241_0();
    OUTLINED_FUNCTION_89_7();
  }
  OUTLINED_FUNCTION_12_0();
}

uint64_t implicit closure #41 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 16))
  {
    v1 = *(_QWORD *)(result + 32);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized static Array.+ infix(_:_:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
}

uint64_t LocalIndexClient.populateMobileSMSDocumentPhotos(results:messageIdToPhotoAttachmentIds:photoAttachmentIdToPhotoItem:)(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  char v61;
  char **v62;
  char *v63;
  char *v64;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char **v86;
  char *v87;
  char *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;

  v68 = a3;
  v93 = type metadata accessor for SearchResultItem(0);
  MEMORY[0x24BDAC7A8](v93);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for MobileSMSDocument(0);
  v7 = MEMORY[0x24BDAC7A8](v72);
  v85 = (uint64_t *)((char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v92 = (uint64_t *)((char *)&v67 - v9);
  v97 = type metadata accessor for SearchResult(0);
  v91 = *(_QWORD *)(v97 - 8);
  v10 = MEMORY[0x24BDAC7A8](v97);
  v84 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v67 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  MEMORY[0x24BDAC7A8](v14);
  v87 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (unint64_t *)((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v17);
  v21 = (uint64_t *)((char *)&v67 - v20);
  v86 = a1;
  v22 = *a1;
  v94 = *((_QWORD *)v22 + 2);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v88 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_30:
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v22 = v66;
  }
  v24 = 0;
  v71 = 0;
  *v86 = v22;
  v25 = v94;
  v73 = a2;
  v74 = v6;
  v95 = v19;
  v70 = v14;
  v69 = v21;
  while (1)
  {
    if (v24 == v25)
    {
      v26 = 1;
      v24 = v25;
    }
    else
    {
      if ((v24 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v24 >= *((_QWORD *)v88 + 2))
        goto LABEL_27;
      v27 = (uint64_t)&v87[*(int *)(v14 + 48)];
      outlined init with copy of SearchResult((uint64_t)&v88[((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(_QWORD *)(v91 + 72) * v24], v27, type metadata accessor for SearchResult);
      v28 = (uint64_t)v19 + *(int *)(v14 + 48);
      *v19 = v24;
      v29 = v27;
      v25 = v94;
      outlined init with take of SearchResult(v29, v28, type metadata accessor for SearchResult);
      v26 = 0;
      ++v24;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v19, v26, 1, v14);
    outlined init with take of URL?((uint64_t)v19, (uint64_t)v21, &demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v14) == 1)
      return swift_bridgeObjectRelease();
    v96 = *v21;
    outlined init with take of SearchResult((uint64_t)v21 + *(int *)(v14 + 48), (uint64_t)v13, type metadata accessor for SearchResult);
    v30 = *(void **)&v13[*(int *)(v97 + 20)];
    if (!v30)
    {
      v42 = (uint64_t)v13;
      v43 = type metadata accessor for SearchResult;
      goto LABEL_16;
    }
    outlined init with copy of SearchResult((uint64_t)v13, (uint64_t)v6, type metadata accessor for SearchResultItem);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SearchResult((uint64_t)v6, (uint64_t)v92, type metadata accessor for MobileSMSDocument);
      v90 = v30;
      v31 = objc_msgSend(v90, sel_uniqueIdentifier);
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v34 = v33;

      if (*(_QWORD *)(a2 + 16) && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v34), (v36 & 1) != 0))
      {
        v37 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v35);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v38 = v68;
        swift_bridgeObjectRetain();
        v39 = v71;
        v40 = specialized Sequence.compactMap<A>(_:)(v37, v38);
        swift_bridgeObjectRelease();
        swift_retain();
        v41 = specialized Sequence.compactMap<A>(_:)(v40);
        v71 = v39;
      }
      else
      {
        v41 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v41 + 16))
      {
        v44 = v92;
        v45 = v92[1];
        v77 = *v92;
        v46 = v92[3];
        v81 = v92[2];
        v82 = v45;
        v83 = v46;
        v47 = v92[4];
        v89 = v92[5];
        v79 = v92[6];
        v80 = v47;
        v78 = v92[7];
        v48 = (int *)v72;
        v49 = *(int *)(v72 + 40);
        v50 = v85;
        v75 = v92[8];
        v76 = v92[9];
        outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?((uint64_t)v92 + v49, (uint64_t)v85 + v49, &demangling cache variable for type metadata for Date?);
        outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?((uint64_t)v44 + v48[11], (uint64_t)v50 + v48[11], &demangling cache variable for type metadata for URL?);
        outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?((uint64_t)v44 + v48[12], (uint64_t)v50 + v48[12], &demangling cache variable for type metadata for URL?);
        v51 = (char *)v50 + v48[14];
        *v50 = v77;
        v50[1] = v45;
        v52 = v86;
        v50[2] = v81;
        v50[3] = v46;
        v53 = v89;
        v50[4] = v80;
        v50[5] = v53;
        v54 = v78;
        v50[6] = v79;
        v50[7] = v54;
        v55 = v76;
        v50[8] = v75;
        v50[9] = v55;
        *(_QWORD *)((char *)v50 + v48[13]) = v41;
        *((_QWORD *)v51 + 4) = 0;
        *(_OWORD *)v51 = 0u;
        *((_OWORD *)v51 + 1) = 0u;
        v56 = (uint64_t)v50;
        v57 = v84;
        outlined init with copy of SearchResult(v56, v84, type metadata accessor for MobileSMSDocument);
        swift_storeEnumTagMultiPayload();
        v58 = v97;
        v59 = (_QWORD *)(v57 + *(int *)(v97 + 24));
        *v59 = 0;
        v59[1] = 0;
        *(_QWORD *)(v57 + *(int *)(v58 + 20)) = v30;
        v6 = *v52;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60 = v90;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v61 = swift_isUniquelyReferenced_nonNull_native();
        *v52 = v6;
        if ((v61 & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          v6 = v64;
          *v86 = v64;
        }
        a2 = v73;
        v19 = v95;
        v14 = v70;
        v21 = v69;
        if ((v96 & 0x8000000000000000) != 0)
          goto LABEL_28;
        if (v96 >= *((_QWORD *)v6 + 2))
          goto LABEL_29;
        outlined assign with take of SearchResult(v84, (uint64_t)&v6[((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(_QWORD *)(v91 + 72) * v96]);
        v62 = v86;
        v63 = *v86;

        *v62 = v63;
        _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v85, type metadata accessor for MobileSMSDocument);
        _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v92, type metadata accessor for MobileSMSDocument);
        _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v13, type metadata accessor for SearchResult);
        v6 = v74;
        v25 = v94;
      }
      else
      {
        swift_bridgeObjectRelease();

        _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v92, type metadata accessor for MobileSMSDocument);
        _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v13, type metadata accessor for SearchResult);
        v6 = v74;
        v25 = v94;
        v19 = v95;
      }
    }
    else
    {
      _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v13, type metadata accessor for SearchResult);
      v42 = (uint64_t)v6;
      v43 = type metadata accessor for SearchResultItem;
LABEL_16:
      _s10OmniSearch0B6ResultVWOhTm_1(v42, v43);
      v19 = v95;
    }
  }
}

uint64_t MobileSMSDocument.withUpdatedPhotoAttachments(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = v2[1];
  v6 = v2[3];
  v16 = v2[2];
  v17 = *v2;
  v13 = v2[5];
  v7 = v2[7];
  v14 = v2[6];
  v15 = v2[4];
  v9 = v2[8];
  v8 = v2[9];
  v10 = (int *)type metadata accessor for MobileSMSDocument(0);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?((uint64_t)v2 + v10[10], (uint64_t)a2 + v10[10], &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_206((uint64_t)v2 + v10[11], (uint64_t)a2 + v10[11]);
  OUTLINED_FUNCTION_206((uint64_t)v2 + v10[12], (uint64_t)a2 + v10[12]);
  v11 = (char *)a2 + v10[14];
  *a2 = v17;
  a2[1] = v5;
  a2[2] = v16;
  a2[3] = v6;
  a2[4] = v15;
  a2[5] = v13;
  a2[6] = v14;
  a2[7] = v7;
  a2[8] = v9;
  a2[9] = v8;
  *(_QWORD *)((char *)a2 + v10[13]) = a1;
  *((_QWORD *)v11 + 4) = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_115();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_117();
  return swift_bridgeObjectRetain();
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x2494F5BB8]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t LocalIndexClient.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  return v0;
}

uint64_t LocalIndexClient.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  return swift_deallocClassInstance();
}

Swift::String_optional __swiftcall ItemFetcher.queryStringForSourceEmails(mailMessageIds:)(Swift::OpaquePointer mailMessageIds)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  Swift::String_optional result;
  void **v53;
  uint64_t v54;
  char v55;

  v1 = *((_QWORD *)mailMessageIds._rawValue + 2);
  if (v1)
  {
    v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    v3 = MEMORY[0x24BEE4AF8];
    do
    {
      v5 = *(v2 - 1);
      v4 = *v2;
      v6 = HIBYTE(*v2) & 0xF;
      if ((*v2 & 0x2000000000000000) == 0)
        v6 = v5 & 0xFFFFFFFFFFFFLL;
      if (v6)
      {
        OUTLINED_FUNCTION_46_0();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = *(_QWORD *)(v3 + 16);
        if (v7 >= *(_QWORD *)(v3 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        *(_QWORD *)(v3 + 16) = v7 + 1;
        v8 = v3 + 16 * v7;
        *(_QWORD *)(v8 + 32) = v5;
        *(_QWORD *)(v8 + 40) = v4;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
    OUTLINED_FUNCTION_121();
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  v54 = *(_QWORD *)(v3 + 16);
  if (v54)
  {
    v9 = 0;
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
    v53 = (void **)(v3 + 40);
    do
    {
      v55 = v9;
      v12 = (char *)&outlined read-only object #0 of ItemFetcher.queryStringForSourceEmails(mailMessageIds:) + 16 * v10;
      v13 = *((_QWORD *)v12 + 4);
      v14 = *((_QWORD *)v12 + 5);
      OUTLINED_FUNCTION_115();
      OUTLINED_FUNCTION_18_8();
      v15 = v53;
      v16 = v54;
      v17 = MEMORY[0x24BEE4AF8];
      do
      {
        v19 = (uint64_t)*(v15 - 1);
        v18 = *v15;
        v20 = ((unint64_t)*v15 >> 56) & 0xF;
        if (((unint64_t)*v15 & 0x2000000000000000) == 0)
          v20 = v19 & 0xFFFFFFFFFFFFLL;
        if (v20)
        {
          OUTLINED_FUNCTION_115();
          OUTLINED_FUNCTION_76_0();
          v21._countAndFlagsBits = 572538144;
          v21._object = (void *)0xE400000000000000;
          String.append(_:)(v21);
          v22._countAndFlagsBits = v19;
          v22._object = v18;
          String.append(_:)(v22);
          v23._countAndFlagsBits = 34;
          v23._object = (void *)0xE100000000000000;
          String.append(_:)(v23);
          OUTLINED_FUNCTION_47();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_265_0();
            v17 = v26;
          }
          v24 = *(_QWORD *)(v17 + 16);
          if (v24 >= *(_QWORD *)(v17 + 24) >> 1)
          {
            OUTLINED_FUNCTION_265_0();
            v17 = v27;
          }
          *(_QWORD *)(v17 + 16) = v24 + 1;
          v25 = v17 + 16 * v24;
          *(_QWORD *)(v25 + 32) = v13;
          *(_QWORD *)(v25 + 40) = v14;
        }
        v15 += 2;
        --v16;
      }
      while (v16);
      OUTLINED_FUNCTION_96_0();
      OUTLINED_FUNCTION_17_9();
      v28 = *(_QWORD *)(v17 + 16);
      v29 = *(_QWORD *)(v11 + 16);
      v30 = v29 + v28;
      if (__OFADD__(v29, v28))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (!swift_isUniquelyReferenced_nonNull_native()
        || (int64_t)v30 > *(_QWORD *)(v11 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v11 = v31;
      }
      if (*(_QWORD *)(v17 + 16))
      {
        v32 = *(_QWORD *)(v11 + 16);
        if ((*(_QWORD *)(v11 + 24) >> 1) - v32 < v28)
          goto LABEL_50;
        v33 = v11 + 16 * v32 + 32;
        if (v17 + 32 < v33 + 16 * v28 && v33 < v17 + 32 + 16 * v28)
        {
          v50 = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          goto LABEL_53;
        }
        swift_arrayInitWithCopy();
        if (v28)
        {
          v35 = *(_QWORD *)(v11 + 16);
          v36 = __OFADD__(v35, v28);
          v37 = v35 + v28;
          if (v36)
            goto LABEL_51;
          *(_QWORD *)(v11 + 16) = v37;
        }
      }
      else if (v28)
      {
        goto LABEL_49;
      }
      OUTLINED_FUNCTION_56_0();
      v9 = 1;
      v10 = 1;
    }
    while ((v55 & 1) == 0);
    OUTLINED_FUNCTION_17_9();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v39 = v38;
    v30 = *(_QWORD *)(v38 + 16);
    v28 = v30 + 1;
    if (v30 < *(_QWORD *)(v38 + 24) >> 1)
      goto LABEL_43;
LABEL_52:
    OUTLINED_FUNCTION_145_3();
    v39 = v48;
LABEL_43:
    *(_QWORD *)(v39 + 16) = v28;
    v40 = v39 + 16 * v30;
    *(_QWORD *)(v40 + 32) = 0xD000000000000029;
    *(_QWORD *)(v40 + 40) = 0x800000024335EBA0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v41 = OUTLINED_FUNCTION_221_0();
    v43 = v42;
    OUTLINED_FUNCTION_121();
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_91_0();
    v45._countAndFlagsBits = 41;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    OUTLINED_FUNCTION_121();
    v46 = *(_QWORD *)(v39 + 16);
    if (v46 >= *(_QWORD *)(v39 + 24) >> 1)
    {
      OUTLINED_FUNCTION_145_3();
      v39 = v49;
    }
    *(_QWORD *)(v39 + 16) = v46 + 1;
    v47 = v39 + 16 * v46;
    *(_QWORD *)(v47 + 32) = 40;
    *(_QWORD *)(v47 + 40) = 0xE100000000000000;
    OUTLINED_FUNCTION_221_0();
    OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_17_9();
  }
  v50 = OUTLINED_FUNCTION_47_8();
LABEL_53:
  result.value._object = v51;
  result.value._countAndFlagsBits = v50;
  return result;
}

uint64_t ItemFetcher.fetchSourceEmailItems(for:)(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  Class v20;
  id v21;
  id v22;
  id v23;
  dispatch_semaphore_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char aBlock[8];
  uint64_t v57;
  uint64_t v58;
  Swift::Int (*v59)();
  uint64_t v60;

  v4 = OUTLINED_FUNCTION_8();
  *(_QWORD *)(v4 + 16) = MEMORY[0x24BEE4B00];
  v5 = OUTLINED_FUNCTION_46_0();
  specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  v7 = v6;
  OUTLINED_FUNCTION_80_0();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 80))(v7);
  v10 = v9;
  OUTLINED_FUNCTION_13_8();
  if (v10)
  {
    v46 = (uint64_t)v8;
    if (one-time initialization token for search != -1)
      swift_once();
    v11 = OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_113_4(v11, (uint64_t)static Logging.search);
    OUTLINED_FUNCTION_204_0();
    swift_bridgeObjectRetain_n();
    v43 = (uint64_t)v8;
    Logger.logObject.getter();
    v12 = OUTLINED_FUNCTION_51_2();
    if (OUTLINED_FUNCTION_131_4(v12))
    {
      v13 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_QWORD *)aBlock = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v13 = 136315394;
      OUTLINED_FUNCTION_46_0();
      v14 = Set.description.getter();
      v16 = v15;
      OUTLINED_FUNCTION_80_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, (uint64_t *)aBlock);
      OUTLINED_FUNCTION_237_0();
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_96_0();
      *(_WORD *)(v13 + 12) = 2080;
      OUTLINED_FUNCTION_76_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v8, v10, (uint64_t *)aBlock);
      OUTLINED_FUNCTION_237_0();
      OUTLINED_FUNCTION_130();
      OUTLINED_FUNCTION_17_2(&dword_24315F000, v8, v2, "Fetching InstantAnswer source emails for %s, query: %s", (uint8_t *)v13);
      OUTLINED_FUNCTION_15_1();
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_102_0();
    OUTLINED_FUNCTION_102_0();
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2468]), sel_init);
    if (one-time initialization token for fetchAttributes != -1)
      swift_once();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, sel_setFetchAttributes_, isa);

    objc_msgSend(v18, sel_setMaxRankedResultCount_, OUTLINED_FUNCTION_12_7((uint64_t)objc_msgSend(v18, sel_setMaxCount_, *(_QWORD *)(a1 + 16)), sel_maxCount));
    v20 = Array._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_249(v18, sel_setFetchAttributes_);

    outlined bridged method (mbnn) of @objc CSSearchQueryContext.bundleIDs.setter((uint64_t)&outlined read-only object #0 of ItemFetcher.fetchSourceEmailItems(for:), v18);
    v21 = objc_allocWithZone(MEMORY[0x24BDC2460]);
    v22 = v18;
    v23 = @nonobjc CSSearchQuery.init(queryString:queryContext:)(v46, v10, v18);
    v24 = dispatch_semaphore_create(0);
    v25 = MEMORY[0x24BDAC760];
    v26 = OUTLINED_FUNCTION_282_0((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> (), v41, v43, v4 + 16, v46, v48, v50, v52, v54, MEMORY[0x24BDAC760], 1107296256, v57, v58);
    swift_retain();
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_249(v23, sel_setFoundItemsHandler_);
    _Block_release(v26);
    v27 = OUTLINED_FUNCTION_8();
    *(_QWORD *)(v27 + 16) = v24;
    v59 = partial apply for closure #2 in ItemFetcher.fetchSourceEmailItems(for:);
    v60 = v27;
    v28 = OUTLINED_FUNCTION_282_0((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> (), v42, v44, v45, v47, v49, v51, v53, v55, v25, 1107296256, v57, v58);
    v29 = v24;
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_249(v23, sel_setCompletionHandler_);
    _Block_release(v28);
    objc_msgSend(v23, sel_start);
    OS_dispatch_semaphore.wait()();
    OUTLINED_FUNCTION_204_0();
    swift_retain_n();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_131_4(v31))
    {
      v32 = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_QWORD *)aBlock = specialized static UnsafeMutablePointer.allocate(capacity:)();
      *(_DWORD *)v32 = 136315394;
      OUTLINED_FUNCTION_229_0();
      v33 = swift_bridgeObjectRetain();
      specialized Set.init<A>(_:)(v33);
      v34 = Set.description.getter();
      v36 = v35;
      OUTLINED_FUNCTION_118_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, (uint64_t *)aBlock);
      OUTLINED_FUNCTION_222_0();
      OUTLINED_FUNCTION_312_0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      OUTLINED_FUNCTION_46_0();
      v37 = Set.description.getter();
      v39 = v38;
      OUTLINED_FUNCTION_80_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)aBlock);
      OUTLINED_FUNCTION_222_0();
      OUTLINED_FUNCTION_102_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_17_2(&dword_24315F000, v30, v2, "Finished fetching InstantAnswer source emails with %s for %s", (uint8_t *)v32);
      OUTLINED_FUNCTION_15_1();
      specialized UnsafeMutablePointer.deallocate()();
    }

    OUTLINED_FUNCTION_102_0();
    OUTLINED_FUNCTION_312_0();

    OUTLINED_FUNCTION_229_0();
    v17 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    v17 = MEMORY[0x24BEE4B00];
  }
  OUTLINED_FUNCTION_4_7();
  swift_release();
  return v17;
}

uint64_t closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(unint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  type metadata accessor for IMSPIMessage(0, (unint64_t *)&lazy cache variable for type metadata for CSSearchableItem);
  v3 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  if (a1 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(a2 + 16) = v3;
    return swift_bridgeObjectRelease();
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_20;
LABEL_3:
  v31 = a1;
  v32 = a1 & 0xC000000000000001;
  v5 = 4;
  v30 = v4;
  while (1)
  {
    if (v32)
      v6 = (id)MEMORY[0x2494F62E4](v5 - 4, a1);
    else
      v6 = *(id *)(a1 + 8 * v5);
    v7 = v6;
    v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v9 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.mailMessageID.getter(objc_msgSend(v6, sel_attributeSet));
    if (!v10)
    {

      goto LABEL_19;
    }
    v11 = v9;
    v12 = v10;
    v13 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
    v17 = v3[2];
    v18 = (v16 & 1) == 0;
    a1 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_22;
    v19 = v15;
    v20 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CSSearchableItem>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, a1))
      break;
LABEL_13:
    if ((v20 & 1) != 0)
    {
      v23 = v3[7];

      *(_QWORD *)(v23 + 8 * v19) = v13;
    }
    else
    {
      v3[(v19 >> 6) + 8] |= 1 << v19;
      v24 = (uint64_t *)(v3[6] + 16 * v19);
      *v24 = v11;
      v24[1] = v12;
      *(_QWORD *)(v3[7] + 8 * v19) = v13;
      v25 = v3[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_23;
      v3[2] = v27;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v30;
    a1 = v31;
LABEL_19:
    ++v5;
    if (v8 == v4)
      goto LABEL_20;
  }
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v19 = v21;
    goto LABEL_13;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for IMSPIMessage(0, (unint64_t *)&lazy cache variable for type metadata for CSSearchableItem);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t ItemFetcher.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ItemFetcher.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ItemFetcher.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for ItemFetcherProtocol.fetchSourceEmailItems(for:) in conformance ItemFetcher()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

double EmailDocument.init(from:)@<D0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double result;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE v87[24];
  uint64_t v88;
  uint64_t v89;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_62_1();
  v89 = type metadata accessor for Date();
  v83 = *(_QWORD *)(v89 - 8);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_71();
  v9 = v7 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v84 = (char *)&v70 - v11;
  v12 = objc_msgSend(a1, sel_uniqueIdentifier);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v81 = v14;
  v82 = v13;

  v15 = OUTLINED_FUNCTION_23_21();
  v16 = objc_msgSend(v15, sel_attributeForKey_, *MEMORY[0x24BDC2348]);

  if (v16)
  {
    OUTLINED_FUNCTION_255_0();
    v17 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_147_1();
  }
  OUTLINED_FUNCTION_253_0(v17, v18, &demangling cache variable for type metadata for Any?);
  if (v88)
  {
    if (OUTLINED_FUNCTION_183_2())
    {
      v80 = v85;
      v19 = v86;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of MobileSMSDocument?((uint64_t)v87, &demangling cache variable for type metadata for Any?);
  }
  v80 = 0;
  v19 = 0xE000000000000000;
LABEL_9:
  v79 = v19;
  v20 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.subject.getter(v20);
  v77 = v22;
  v78 = v21;
  v23 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(v23, (SEL *)&selRef_contentSnippet);
  v76 = v24;
  v75 = v25;
  v26 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.authorNames.getter(v26);
  v74 = v27;
  v28 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v28, (SEL *)&selRef_authorEmailAddresses);
  v73 = v29;
  v30 = OUTLINED_FUNCTION_23_21();
  v31 = objc_msgSend(v30, sel_attributeForKey_, *MEMORY[0x24BDC20E8]);

  if (v31)
  {
    OUTLINED_FUNCTION_255_0();
    v32 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_147_1();
  }
  OUTLINED_FUNCTION_253_0(v32, v33, &demangling cache variable for type metadata for Any?);
  if (v88)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_183_2())
    {
      v34 = v85;
      goto LABEL_17;
    }
  }
  else
  {
    outlined destroy of MobileSMSDocument?((uint64_t)v87, &demangling cache variable for type metadata for Any?);
  }
  v34 = MEMORY[0x24BEE4AF8];
LABEL_17:
  v72 = v34;
  v35 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v35, (SEL *)&selRef_recipientEmailAddresses);
  v37 = v36;
  v38 = OUTLINED_FUNCTION_23_21();
  v39 = objc_msgSend(v38, sel_mailDateReceived);

  if (v39)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32);
    v41 = v9;
    v42 = v89;
    v40(v2, v41, v89);
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v42);
    if (__swift_getEnumTagSinglePayload(v2, 1, v42) != 1)
    {
      v40((uint64_t)v84, v2, v89);
      goto LABEL_22;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v89);
  }
  static Date.now.getter();
  outlined destroy of MobileSMSDocument?(v2, &demangling cache variable for type metadata for Date?);
LABEL_22:
  v43 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v43, (SEL *)&selRef_attachmentNames);
  v45 = v44;
  v46 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v46, (SEL *)&selRef_attachmentTypes);
  v48 = v47;
  v49 = OUTLINED_FUNCTION_23_21();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v49, (SEL *)&selRef_attachmentPaths);
  v51 = v50;
  v52 = OUTLINED_FUNCTION_23_21();
  v53 = objc_msgSend(v52, sel_mailRead);

  if (v53)
  {
    v54 = objc_msgSend(v53, sel_BOOLValue);

    v55 = v54 ^ 1;
  }
  else
  {

    v55 = 1;
  }
  v71 = v55;
  if (v51)
    v56 = v51;
  else
    v56 = MEMORY[0x24BEE4AF8];
  if (v48)
    v57 = v48;
  else
    v57 = MEMORY[0x24BEE4AF8];
  if (v45)
    v58 = v45;
  else
    v58 = MEMORY[0x24BEE4AF8];
  if (!v37)
    v37 = MEMORY[0x24BEE4AF8];
  if (v73)
    v59 = v73;
  else
    v59 = MEMORY[0x24BEE4AF8];
  if (v74)
    v60 = v74;
  else
    v60 = MEMORY[0x24BEE4AF8];
  v61 = (int *)type metadata accessor for EmailDocument(0);
  v62 = (uint64_t)&a2[v61[17]];
  v63 = type metadata accessor for URL();
  __swift_storeEnumTagSinglePayload(v62, 1, 1, v63);
  v64 = &a2[v61[18]];
  v65 = v81;
  *(_QWORD *)a2 = v82;
  *((_QWORD *)a2 + 1) = v65;
  v66 = v79;
  *((_QWORD *)a2 + 2) = v80;
  *((_QWORD *)a2 + 3) = v66;
  v67 = v77;
  *((_QWORD *)a2 + 4) = v78;
  *((_QWORD *)a2 + 5) = v67;
  v68 = v75;
  *((_QWORD *)a2 + 6) = v76;
  *((_QWORD *)a2 + 7) = v68;
  *((_QWORD *)a2 + 8) = v60;
  *((_QWORD *)a2 + 9) = v59;
  *((_QWORD *)a2 + 10) = v72;
  *((_QWORD *)a2 + 11) = v37;
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(&a2[v61[12]], v84, v89);
  *(_QWORD *)&a2[v61[13]] = v58;
  *(_QWORD *)&a2[v61[14]] = v57;
  *(_QWORD *)&a2[v61[15]] = v56;
  a2[v61[16]] = v71;
  *((_QWORD *)v64 + 4) = 0;
  result = 0.0;
  *(_OWORD *)v64 = 0u;
  *((_OWORD *)v64 + 1) = 0u;
  return result;
}

id @nonobjc CSSearchableItem.init(uniqueIdentifier:domainIdentifier:attributeSet:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v5;
  void *v9;
  void *v10;
  id v11;

  if (!a2)
  {
    v9 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  v9 = (void *)MEMORY[0x2494F5BB8]();
  swift_bridgeObjectRelease();
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v10 = (void *)MEMORY[0x2494F5BB8](a3, a4);
  swift_bridgeObjectRelease();
LABEL_6:
  v11 = objc_msgSend(v5, sel_initWithUniqueIdentifier_domainIdentifier_attributeSet_, v9, v10, a5);

  return v11;
}

id @nonobjc CSSearchQuery.init(queryString:queryContext:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v5;
  id v6;

  v5 = (void *)MEMORY[0x2494F5BB8]();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_initWithQueryString_queryContext_, v5, a3);

  return v6;
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  uint64_t v3;

  a1(&v3);
  v1 = Set.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

void outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(void *a1)
{
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(a1, (SEL *)&selRef_attachmentPaths);
}

void outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentTypes.getter(void *a1)
{
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(a1, (SEL *)&selRef_attachmentTypes);
}

void outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentNames.getter(void *a1)
{
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(a1, (SEL *)&selRef_attachmentNames);
}

void outlined bridged method (mbnn) of @objc CSSearchQueryContext.bundleIDs.setter(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setBundleIDs_, isa);

}

uint64_t outlined bridged method (pb) of @objc SFResultSection.results.getter(void *a1, SEL *a2, unint64_t *a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = OUTLINED_FUNCTION_174_0(a1, a2);
  if (!v4)
    return 0;
  v5 = v4;
  type metadata accessor for IMSPIMessage(0, a3);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(void *a1, SEL *a2)
{
  if (OUTLINED_FUNCTION_174_0(a1, a2))
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_17_4();
  }
  OUTLINED_FUNCTION_5();
}

void outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = OUTLINED_FUNCTION_174_0(a1, a2);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  OUTLINED_FUNCTION_12();
}

void outlined bridged method (ob) of @objc SFSearchResult.contentType.getter(void *a1, SEL *a2)
{
  id v3;

  v3 = OUTLINED_FUNCTION_174_0(a1, a2);

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_314_0();
  }
  OUTLINED_FUNCTION_47_8();
  OUTLINED_FUNCTION_12();
}

void outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(void *a1, SEL *a2)
{
  id v3;

  v3 = OUTLINED_FUNCTION_174_0(a1, a2);

  if (v3)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_17_4();
  }
  OUTLINED_FUNCTION_5();
}

void specialized protocol witness for Collection.subscript.read in conformance [A]()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_104_10();
  v2 = OUTLINED_FUNCTION_149_2((uint64_t)v1);
  specialized Array.subscript.read(v2, v3);
  *(_QWORD *)(v0 + 32) = v4;
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_104_10();
  v2 = OUTLINED_FUNCTION_149_2((uint64_t)v1);
  specialized Array.subscript.read(v2, v3);
  *(_QWORD *)(v0 + 32) = v4;
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_104_10();
  v2 = OUTLINED_FUNCTION_149_2((uint64_t)v1);
  specialized Array.subscript.read(v2, v3);
  *(_QWORD *)(v0 + 32) = v4;
  OUTLINED_FUNCTION_12();
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void specialized Array.subscript.read(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = OUTLINED_FUNCTION_94_7(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, v5, v6);
  if (v3)
    OUTLINED_FUNCTION_197_1();
  *v2 = swift_retain();
  OUTLINED_FUNCTION_12();
}

{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = OUTLINED_FUNCTION_94_7(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, v5, v6);
  if (v3)
    OUTLINED_FUNCTION_197_1();
  *v2 = OUTLINED_FUNCTION_261_0();
  OUTLINED_FUNCTION_12();
}

{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = OUTLINED_FUNCTION_94_7(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, v5, v6);
  if (v3)
    OUTLINED_FUNCTION_197_1();
  *v2 = OUTLINED_FUNCTION_261_0();
  OUTLINED_FUNCTION_12();
}

uint64_t type metadata accessor for ItemFetcher()
{
  return objc_opt_self();
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return OUTLINED_FUNCTION_169_2();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t specialized LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a7;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v12);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v25 - v20;
  (*(void (**)(char *))(v16 + 32))((char *)&v25 - v20);
  v22 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, a5);
  v23 = specialized LocalIndexClient.init(searchAgent:itemFetcher:)((uint64_t)v19, (uint64_t)v14, v22, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a4);
  return v23;
}

uint64_t specialized LocalIndexClient.init(searchAgent:itemFetcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a4;
  v21 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  v17 = a5;
  v18 = a7;
  v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v14, a2, a5);
  outlined init with take of SageSearchClient(&v19, a3 + 16);
  outlined init with take of SageSearchClient(&v16, a3 + 56);
  return a3;
}

uint64_t sub_2432A6308()
{
  uint64_t v0;

  return swift_deallocObject();
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_2432A634C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void partial apply for implicit closure #3 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  implicit closure #1 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(void **)(v0 + 16));
}

uint64_t partial apply for implicit closure #5 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #5 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(void **)(v0 + 16));
}

uint64_t partial apply for implicit closure #6 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #5 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(void **)(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

void partial apply for specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  specialized closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_2432A63F4()
{
  swift_release();
  OUTLINED_FUNCTION_246_0();
  return swift_deallocObject();
}

uint64_t sub_2432A6410()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_246_0();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(v0 + 16);
}

uint64_t objectdestroy_111Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_2432A6498()
{
  uint64_t v0;

  type metadata accessor for Contact(0);
  OUTLINED_FUNCTION_106_8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = OUTLINED_FUNCTION_5_2();
  if (!OUTLINED_FUNCTION_31_17(v0))
    OUTLINED_FUNCTION_28_14();
  return OUTLINED_FUNCTION_125_5();
}

void partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

{
  OUTLINED_FUNCTION_298_0();
  implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
  OUTLINED_FUNCTION_12();
}

uint64_t sub_2432A6528()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #41 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #41 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2432A655C()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_22_16();
  type metadata accessor for WalletPass(0);
  OUTLINED_FUNCTION_15_21();
  OUTLINED_FUNCTION_166_1();
  OUTLINED_FUNCTION_165_1();
  v0 = OUTLINED_FUNCTION_78_10();
  if (!OUTLINED_FUNCTION_72_9(v0))
    OUTLINED_FUNCTION_66_14();
  OUTLINED_FUNCTION_65_12();
  v1 = OUTLINED_FUNCTION_5_2();
  if (!OUTLINED_FUNCTION_31_17(v1))
    OUTLINED_FUNCTION_28_14();
  OUTLINED_FUNCTION_108_9();
  return OUTLINED_FUNCTION_17_22();
}

void partial apply for implicit closure #40 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

uint64_t sub_2432A65EC()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_22_16();
  type metadata accessor for WalletTransaction(0);
  OUTLINED_FUNCTION_15_21();
  OUTLINED_FUNCTION_166_1();
  OUTLINED_FUNCTION_165_1();
  v0 = OUTLINED_FUNCTION_78_10();
  if (!OUTLINED_FUNCTION_72_9(v0))
    OUTLINED_FUNCTION_66_14();
  OUTLINED_FUNCTION_65_12();
  OUTLINED_FUNCTION_65_12();
  OUTLINED_FUNCTION_65_12();
  OUTLINED_FUNCTION_65_12();
  v1 = OUTLINED_FUNCTION_5_2();
  if (!OUTLINED_FUNCTION_31_17(v1))
    OUTLINED_FUNCTION_28_14();
  OUTLINED_FUNCTION_108_9();
  return OUTLINED_FUNCTION_17_22();
}

void partial apply for implicit closure #38 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

uint64_t sub_2432A6694()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for FileDocument(0);
  OUTLINED_FUNCTION_106_8();

  v1 = OUTLINED_FUNCTION_5_2();
  if (!OUTLINED_FUNCTION_31_17(v1))
    OUTLINED_FUNCTION_28_14();
  return OUTLINED_FUNCTION_125_5();
}

void partial apply for implicit closure #33 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

uint64_t sub_2432A670C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_22_16();
  type metadata accessor for NoteDocument(0);
  OUTLINED_FUNCTION_15_21();
  OUTLINED_FUNCTION_166_1();
  OUTLINED_FUNCTION_165_1();
  swift_bridgeObjectRelease();
  v2 = v1 + *(int *)(v0 + 32);
  OUTLINED_FUNCTION_78_10();
  if (!OUTLINED_FUNCTION_112_2(v2))
    OUTLINED_FUNCTION_67_13();
  if (!OUTLINED_FUNCTION_112_2(v1 + *(int *)(v0 + 36)))
    OUTLINED_FUNCTION_67_13();
  v3 = OUTLINED_FUNCTION_5_2();
  if (!OUTLINED_FUNCTION_31_17(v3))
    OUTLINED_FUNCTION_28_14();
  OUTLINED_FUNCTION_108_9();
  return OUTLINED_FUNCTION_17_22();
}

void partial apply for implicit closure #31 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

uint64_t sub_2432A67BC()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_22_16();
  type metadata accessor for Photo(0);
  OUTLINED_FUNCTION_15_21();
  OUTLINED_FUNCTION_166_1();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_165_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = OUTLINED_FUNCTION_78_10();
  if (!OUTLINED_FUNCTION_72_9(v0))
    OUTLINED_FUNCTION_66_14();
  OUTLINED_FUNCTION_140_1();
  OUTLINED_FUNCTION_140_1();
  OUTLINED_FUNCTION_140_1();
  OUTLINED_FUNCTION_140_1();
  v1 = OUTLINED_FUNCTION_5_2();
  if (!OUTLINED_FUNCTION_31_17(v1))
    OUTLINED_FUNCTION_28_14();
  OUTLINED_FUNCTION_108_9();
  return OUTLINED_FUNCTION_17_22();
}

void partial apply for implicit closure #30 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

uint64_t sub_2432A6884()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_22_16();
  type metadata accessor for CalendarEvent(0);
  OUTLINED_FUNCTION_15_21();
  OUTLINED_FUNCTION_166_1();
  OUTLINED_FUNCTION_165_1();
  v2 = v1 + v0[7];
  OUTLINED_FUNCTION_78_10();
  if (!OUTLINED_FUNCTION_112_2(v2))
    OUTLINED_FUNCTION_67_13();
  if (!OUTLINED_FUNCTION_112_2(v1 + v0[8]))
    OUTLINED_FUNCTION_67_13();
  OUTLINED_FUNCTION_65_12();
  OUTLINED_FUNCTION_140_1();
  OUTLINED_FUNCTION_140_1();
  OUTLINED_FUNCTION_65_12();
  v3 = OUTLINED_FUNCTION_5_2();
  if (!OUTLINED_FUNCTION_72_9(v3))
    OUTLINED_FUNCTION_66_14();
  if (*(_QWORD *)(v1 + v0[14]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_108_9();
  return OUTLINED_FUNCTION_17_22();
}

void partial apply for implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:completion:)();
}

uint64_t partial apply for implicit closure #19 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #19 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(void **)(v0 + 16), (SEL *)&selRef_contentSnippet);
}

uint64_t partial apply for implicit closure #20 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #19 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(void **)(v0 + 16), (SEL *)&selRef_subject);
}

void partial apply for implicit closure #21 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  implicit closure #21 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (SEL *)&selRef_authorNames);
}

uint64_t objectdestroy_361Tm()
{
  uint64_t v0;

  swift_release();

  OUTLINED_FUNCTION_246_0();
  return swift_deallocObject();
}

void partial apply for implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  implicit closure #21 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (SEL *)&selRef_recipientNames);
}

uint64_t partial apply for implicit closure #12 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #12 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  return implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(void **)(v0 + 16));
}

void partial apply for implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:completion:)()
{
  uint64_t v0;

  implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(*(void **)(v0 + 16));
}

_QWORD *partial apply for implicit closure #17 in LocalIndexClient.findMatches(for:maxItemCount:completion:)@<X0>(_QWORD *a1@<X8>)
{
  return implicit closure #17 in LocalIndexClient.findMatches(for:maxItemCount:completion:)(a1);
}

uint64_t partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v0;

  return specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t partial apply for closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(unint64_t a1)
{
  uint64_t v1;

  return closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(a1, v1);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

Swift::Int partial apply for closure #2 in ItemFetcher.fetchSourceEmailItems(for:)()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t dispatch thunk of LocalIndexSearchAgent.activate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LocalIndexSearchAgent.deactivate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocalIndexSearchAgent.search(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ItemFetcherProtocol.fetchSourceEmailItems(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for LocalIndexClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for LocalIndexClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for ItemFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ItemFetcher.queryStringForSourceEmails(mailMessageIds:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of ItemFetcher.fetchSourceEmailItems(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of ItemFetcher.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t OUTLINED_FUNCTION_0_26()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  uint64_t v0;
  uint64_t v1;

  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 - 144), v0 + 1280, v0 + 1256, v0 + 1320);
}

uint64_t OUTLINED_FUNCTION_4_29()
{
  uint64_t v0;
  uint64_t v1;

  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 - 144), v0 + 1280, v0 + 1256, v0 + 1320);
}

uint64_t OUTLINED_FUNCTION_5_29()
{
  uint64_t v0;
  uint64_t v1;

  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 - 144), v1 - 240, v0 + 1328, v0 + 1280);
}

uint64_t OUTLINED_FUNCTION_15_21()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_17_22()
{
  return swift_deallocObject();
}

void OUTLINED_FUNCTION_20_18(uint64_t a1, SEL *a2)
{
  void *v2;

  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v2, a2);
}

uint64_t OUTLINED_FUNCTION_22_18(uint64_t result)
{
  _QWORD *v1;
  _WORD *v2;

  v1[157] = 0;
  v1[165] = result;
  *v2 = 258;
  v1[160] = v2 + 1;
  return result;
}

id OUTLINED_FUNCTION_23_21()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 1280));
}

void OUTLINED_FUNCTION_25_13()
{
  uint64_t v0;

  specialized Array.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_26_14()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_28_14()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_31_17(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_37_11(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 + 1104))(a1, *(_QWORD *)(v1 + 1096), *(_QWORD *)(v1 + 1224));
}

uint64_t OUTLINED_FUNCTION_41_12(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 1168))(a1, *(_QWORD *)(v1 + 1224));
}

void OUTLINED_FUNCTION_42_9(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 256);
  *a1 = v2;
  a1[1] = v3;
}

void OUTLINED_FUNCTION_43_12(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  outlined init with take of SearchResult(v2, a1 + v1, v3);
}

void OUTLINED_FUNCTION_44_16(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_49_15()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1104))();
}

void OUTLINED_FUNCTION_50_13(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 258;
  *(_QWORD *)(v1 + 1280) = a1 + 1;
}

uint64_t OUTLINED_FUNCTION_53_15()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_56_8(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

double OUTLINED_FUNCTION_59_10()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 1296) = 0u;
  *(_OWORD *)(v0 + 1280) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_63_12()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1168))();
}

uint64_t OUTLINED_FUNCTION_64_9(uint64_t result)
{
  *(_BYTE *)(result + 16) = 32;
  return result;
}

uint64_t OUTLINED_FUNCTION_65_12()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_66_14()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_67_13()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void OUTLINED_FUNCTION_68_13()
{
  uint64_t v0;
  uint64_t v1;

  SearchResult.init(_:csItem:)(v1, *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 872));
}

uint64_t OUTLINED_FUNCTION_70_9(uint64_t a1)
{
  return specialized static Array._adoptStorage(_:count:)(a1, 3);
}

uint64_t OUTLINED_FUNCTION_72_9(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_73_9()
{
  return specialized static UnsafeMutablePointer.allocate(capacity:)();
}

uint64_t OUTLINED_FUNCTION_74_12(uint64_t result)
{
  *(_BYTE *)(result + 16) = 32;
  return result;
}

BOOL OUTLINED_FUNCTION_75_11()
{
  NSObject *v0;
  os_log_type_t v1;

  return os_log_type_enabled(v0, v1);
}

void OUTLINED_FUNCTION_77_11()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_83_4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 200) + 8))(*(_QWORD *)(v0 - 232), *(_QWORD *)(v0 - 160));
}

uint64_t OUTLINED_FUNCTION_84_10()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_85_9()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_86_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_87_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::String v3;

  *(_QWORD *)(v2 - 144) = a1;
  *(_QWORD *)(v2 - 136) = a2;
  v3._countAndFlagsBits = 0x2F3A74656C6C6177;
  v3._object = (void *)0xEE002F647261632FLL;
  DefaultStringInterpolation.appendLiteral(_:)(v3);
}

uint64_t OUTLINED_FUNCTION_90_8()
{
  uint64_t v0;

  return v0;
}

BOOL OUTLINED_FUNCTION_91_6(uint64_t a1, os_log_type_t a2)
{
  NSObject *v2;

  return os_log_type_enabled(v2, a2);
}

uint64_t OUTLINED_FUNCTION_94_7(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_96_8()
{
  uint64_t v0;

  return v0 + 1256;
}

void OUTLINED_FUNCTION_97_9(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of MobileSMSDocument?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_100_7()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 176) + 8))(*(_QWORD *)(v0 - 152), *(_QWORD *)(v0 - 136));
}

void *OUTLINED_FUNCTION_104_10()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_105_11(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_106_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_108_9()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_111_6(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of MobileSMSDocument?(a1, v1);
}

void OUTLINED_FUNCTION_112_4()
{
  specialized UnsafeMutablePointer.deallocate()();
}

void OUTLINED_FUNCTION_113_5()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_117_2(uint64_t a1, SEL *a2)
{
  void *v2;

  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v2, a2);
}

void OUTLINED_FUNCTION_119_4(uint64_t a1, SEL *a2)
{
  void *v2;

  outlined bridged method (pb) of @objc SFSearchResult_SpotlightExtras.answerAttributes.getter(v2, a2);
}

void OUTLINED_FUNCTION_122_5()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_123_6(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of SearchResult(a1, a2, v2);
}

void OUTLINED_FUNCTION_124_7()
{
  uint64_t *v0;
  uint64_t v1;

  outlined init with take of URL?(v1 - 160, v1 - 128, v0);
}

uint64_t OUTLINED_FUNCTION_125_5()
{
  return swift_deallocObject();
}

void OUTLINED_FUNCTION_128_5()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_129_4()
{
  return _bridgeAnyObjectToAny(_:)();
}

BOOL OUTLINED_FUNCTION_131_4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_133_3()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_137_5()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void OUTLINED_FUNCTION_139_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of URL?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_140_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_141_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_142_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_144_2()
{
  uint64_t v0;
  uint64_t v1;

  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 - 144), v1 - 240, v0 + 1328, v0 + 1280);
}

void OUTLINED_FUNCTION_145_3()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_146_5(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

double OUTLINED_FUNCTION_147_1()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_149_2(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_156_2(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_159_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_160_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_163_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 216) + 8))(v0, v1);
}

void OUTLINED_FUNCTION_164_2(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  outlined init with take of URL?(*(_QWORD *)(a2 - 256), a1, v2);
}

uint64_t OUTLINED_FUNCTION_165_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_166_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_167_0()
{
  return type metadata accessor for Calendar();
}

uint64_t OUTLINED_FUNCTION_168_0()
{
  return type metadata accessor for DateComponents();
}

uint64_t OUTLINED_FUNCTION_169_2()
{
  return swift_release();
}

void OUTLINED_FUNCTION_171_0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_172_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  SearchResult.init(_:csItem:)(v1, v2, *(_QWORD *)(v0 + 872));
}

void OUTLINED_FUNCTION_173_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  SearchResult.init(_:csItem:)(v1, v2, *(_QWORD *)(v0 + 872));
}

id OUTLINED_FUNCTION_174_0(void *a1, SEL *a2)
{
  return objc_msgSend(a1, *a2);
}

uint64_t OUTLINED_FUNCTION_175_0()
{
  return String.init(stringInterpolation:)();
}

uint64_t OUTLINED_FUNCTION_176()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_177_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 304));
}

uint64_t OUTLINED_FUNCTION_179_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 208) + 8))(*(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 160));
}

id OUTLINED_FUNCTION_181_1(uint64_t a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 + 1192), a2);
}

void OUTLINED_FUNCTION_182_1()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of MobileSMSDocument?(v1 - 128, v0);
}

uint64_t OUTLINED_FUNCTION_183_2()
{
  return swift_dynamicCast();
}

id OUTLINED_FUNCTION_184_0(uint64_t a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 + 1024), a2);
}

id OUTLINED_FUNCTION_186_2()
{
  uint64_t v0;

  return *(id *)(v0 + 1024);
}

id OUTLINED_FUNCTION_187_2(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 1);
}

_WORD *OUTLINED_FUNCTION_188_2(_WORD *result)
{
  *result = 0;
  return result;
}

void OUTLINED_FUNCTION_189_2()
{
  uint64_t v0;

  specialized Array.subscript.getter(1uLL, v0);
}

uint64_t OUTLINED_FUNCTION_190_2()
{
  uint64_t v0;

  return v0 + 1280;
}

void OUTLINED_FUNCTION_192_0(_QWORD *a1)
{
  static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.getter(a1);
}

uint64_t OUTLINED_FUNCTION_193_0()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

void OUTLINED_FUNCTION_196_1()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  unint64_t *v2;

  lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(v2, v1, v0);
}

void OUTLINED_FUNCTION_197_1()
{
  JUMPOUT(0x2494F62E4);
}

void OUTLINED_FUNCTION_198_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with copy of SearchResult(v1, *(_QWORD *)(v0 + 880), v2);
}

void OUTLINED_FUNCTION_201_1()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v2);
}

void OUTLINED_FUNCTION_202_1()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  _s10OmniSearch0B6ResultVWOhTm_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_203_0()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t OUTLINED_FUNCTION_204_0()
{
  return swift_bridgeObjectRetain_n();
}

void OUTLINED_FUNCTION_206(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a1, a2, v2);
}

void OUTLINED_FUNCTION_207_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of SearchResult(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_209_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 152);
}

double OUTLINED_FUNCTION_210_0()
{
  uint64_t v0;
  _OWORD *v1;
  double result;

  *(_QWORD *)(v0 - 112) = 0;
  v1 = (_OWORD *)(v0 - 144);
  result = 0.0;
  *v1 = 0u;
  v1[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_211_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_212_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_215_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 160) + 8))(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 184));
}

void OUTLINED_FUNCTION_219_0()
{
  specialized UnsafeMutablePointer.deallocate()();
}

uint64_t OUTLINED_FUNCTION_220_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1192);
}

uint64_t OUTLINED_FUNCTION_221_0()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_222_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_223_1()
{
  return TimeZone.init(abbreviation:)();
}

uint64_t OUTLINED_FUNCTION_224_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_225_0()
{
  return static String.Encoding.utf8.getter();
}

uint64_t OUTLINED_FUNCTION_226_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_227_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_228_1()
{
  return DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t OUTLINED_FUNCTION_229_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_230_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_231_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_236()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_237_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_239(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_241_0()
{
  return String.init(data:encoding:)();
}

id OUTLINED_FUNCTION_242_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_245()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_246_0()
{
  uint64_t v0;

  return v0;
}

void *OUTLINED_FUNCTION_247_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSS_s5NeverOSo16CSSearchableItemCTg5055_s10OmniSearch16LocalIndexClientC11findMatches3for12maxf48Count10completionySS_SiySayAA0B6ResultVGctFSo012E13J0CSgSSXEfU2_SDySSAGGTf1cn_nTm(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_248_0()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_249(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_251_0()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 168), v1);
}

void OUTLINED_FUNCTION_252_0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  outlined init with take of URL?(*(_QWORD *)(a2 - 256), a1, v2);
}

void OUTLINED_FUNCTION_253_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of URL?(v3 - 160, v3 - 120, a3);
}

uint64_t OUTLINED_FUNCTION_255_0()
{
  return _bridgeAnyObjectToAny(_:)();
}

id OUTLINED_FUNCTION_256_0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 999));
}

uint64_t OUTLINED_FUNCTION_258()
{
  return type metadata accessor for HotelReservation(0);
}

uint64_t OUTLINED_FUNCTION_259_0()
{
  return type metadata accessor for RestaurantReservation(0);
}

uint64_t OUTLINED_FUNCTION_260()
{
  return type metadata accessor for TimeZone();
}

id OUTLINED_FUNCTION_261_0()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t OUTLINED_FUNCTION_263_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 912))();
}

void OUTLINED_FUNCTION_264_0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a1, v2 - 144, v1);
}

void OUTLINED_FUNCTION_265_0()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_266_0()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_267_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_268_0()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL OUTLINED_FUNCTION_269_0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_270_0()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_271_0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 384) = result;
  *(_QWORD *)(v2 - 392) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_272_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_275_0()
{
  return String.init<A>(describing:)();
}

_WORD *OUTLINED_FUNCTION_277_0(_WORD *result)
{
  uint64_t v1;

  *result = 0;
  *(_QWORD *)(v1 - 144) = result + 1;
  return result;
}

id OUTLINED_FUNCTION_279_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t OUTLINED_FUNCTION_280_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_281_0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void *OUTLINED_FUNCTION_282_0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char aBlock, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  a12 = a1;
  a13 = v13;
  return _Block_copy(&aBlock);
}

void OUTLINED_FUNCTION_283_0()
{
  void *v0;

}

void OUTLINED_FUNCTION_284_0()
{
  JUMPOUT(0x2494F5BB8);
}

id OUTLINED_FUNCTION_285_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_287()
{
  return URL.init(string:)();
}

uint64_t OUTLINED_FUNCTION_291_0()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

void OUTLINED_FUNCTION_292_0(uint64_t a1, SEL *a2)
{
  void *v2;

  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.flightDepartureTimeZone.getter(v2, a2);
}

uint64_t OUTLINED_FUNCTION_294_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 1168) = a2;
  return a2(a1, v3);
}

uint64_t OUTLINED_FUNCTION_295()
{
  return Calendar.timeZone.setter();
}

uint64_t OUTLINED_FUNCTION_297()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t OUTLINED_FUNCTION_298_0()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t OUTLINED_FUNCTION_299_0()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

BOOL OUTLINED_FUNCTION_300_0(uint64_t a1, os_log_type_t a2)
{
  NSObject *v2;

  return os_log_type_enabled(v2, a2);
}

uint64_t OUTLINED_FUNCTION_301()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_302_0()
{
  specialized UnsafeMutablePointer.deallocate()();
}

uint64_t OUTLINED_FUNCTION_304_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;

  return v2(a1, *(_QWORD *)(a2 - 256), v3);
}

id OUTLINED_FUNCTION_308_0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, *(_QWORD *)(v2 + 64));
}

void OUTLINED_FUNCTION_310_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of SearchResult(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_312_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_313_0()
{
  return swift_release();
}

void OUTLINED_FUNCTION_314_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_316()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1208);
}

void OUTLINED_FUNCTION_317(Swift::String a1)
{
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(a1);
}

uint64_t FeatureToggle<>.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v6[5];

  v3 = a1;
  v6[3] = a1;
  v6[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v2, v3);
  LOBYTE(v3) = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v3 & 1;
}

void FeatureFlag.domain.getter()
{
  OUTLINED_FUNCTION_0_27();
}

uint64_t FeatureFlag.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_2432A7880 + 4 * byte_243357840[a1]))("albusSearch", 11);
}

void sub_2432A7880()
{
  OUTLINED_FUNCTION_0_27();
}

BOOL static FeatureFlag.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FeatureFlag.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

void FeatureFlag.hashValue.getter(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_4_13();
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  OUTLINED_FUNCTION_107();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FeatureFlag(char *a1, char *a2)
{
  return static FeatureFlag.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance FeatureFlag()
{
  unsigned __int8 *v0;

  FeatureFlag.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FeatureFlag(uint64_t a1)
{
  unsigned __int8 *v1;

  FeatureFlag.hash(into:)(a1, *v1);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance FeatureFlag()
{
  return "OmniSearch";
}

uint64_t protocol witness for FeatureFlagsKey.feature.getter in conformance FeatureFlag()
{
  unsigned __int8 *v0;

  return FeatureFlag.feature.getter(*v0);
}

void protocol witness for FeatureToggle.isEnabled.getter in conformance FeatureFlag()
{
  char *v0;

  specialized FeatureToggle<>.isEnabled.getter(*v0);
}

void PhotosFeatureFlag.domain.getter()
{
  OUTLINED_FUNCTION_0_27();
}

void PhotosFeatureFlag.feature.getter()
{
  OUTLINED_FUNCTION_0_27();
}

uint64_t static PhotosFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void PhotosFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

void PhotosFeatureFlag.hashValue.getter()
{
  OUTLINED_FUNCTION_4_13();
  Hasher._combine(_:)(0);
  Hasher._finalize()();
  OUTLINED_FUNCTION_107();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PhotosFeatureFlag()
{
  return "Photos";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance PhotosFeatureFlag()
{
  return "MemoryCreation";
}

BOOL FeatureToggle<>.isDisabled.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a1, a3) & 1) == 0;
}

uint64_t FeatureToggle<>.domainFeatureName.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  dispatch thunk of FeatureFlagsKey.domain.getter();
  v3 = StaticString.description.getter();
  v0._countAndFlagsBits = 47;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  dispatch thunk of FeatureFlagsKey.feature.getter();
  v1._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t dispatch thunk of FeatureToggle.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for FeatureFlag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_2432A7BC0 + 4 * byte_24335784C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2432A7BF4 + 4 * byte_243357847[v4]))();
}

uint64_t sub_2432A7BF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432A7BFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2432A7C04);
  return result;
}

uint64_t sub_2432A7C10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2432A7C18);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2432A7C1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2432A7C24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureFlag()
{
  return &type metadata for FeatureFlag;
}

uint64_t storeEnumTagSinglePayload for PhotosFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2432A7C80 + 4 * byte_243357851[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2432A7CA0 + 4 * byte_243357856[v4]))();
}

_BYTE *sub_2432A7C80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2432A7CA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2432A7CA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2432A7CB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2432A7CB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2432A7CC0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PhotosFeatureFlag()
{
  return &type metadata for PhotosFeatureFlag;
}

uint64_t CSSearchableItem.associatedAppEntityId.getter()
{
  return OUTLINED_FUNCTION_0_28(35, 0x800000024335AD40);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CSSearchableItem.associatedAppEntityTypeId.getter()
{
  return OUTLINED_FUNCTION_0_28(31, 0x800000024335ED10);
}

uint64_t CSSearchableItem.associatedAppEntityId.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  id v7;
  uint64_t v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v5 = objc_msgSend(v2, sel_attributeSet);
  v6 = (void *)MEMORY[0x2494F5BB8](a1, a2);
  v7 = objc_msgSend(v5, sel_attributeForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    if (swift_dynamicCast())
      return v9;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11);
    return 0;
  }
}

uint64_t CSSearchableItem.associatedAppEntityProtocolId.getter()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_0_28(uint64_t a1, uint64_t a2)
{
  return CSSearchableItem.associatedAppEntityId.getter(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

void SearchAnswerEntity.SourceDocument.init(bundleId:documentId:url:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v8 = type metadata accessor for SearchAnswerEntity.SourceDocument(0);
  outlined init with take of URL?(a5, (uint64_t)a6 + *(int *)(v8 + 24), &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

uint64_t type metadata accessor for SearchAnswerEntity.SourceDocument(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for SearchAnswerEntity.SourceDocument);
}

void SearchAnswerEntity.answer.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.documentSource.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.supportedTypeIdentifiersForExport.setter()
{
  OUTLINED_FUNCTION_42_10();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_2_5();
}

uint64_t type metadata accessor for SearchAnswerEntity(uint64_t a1)
{
  return type metadata accessor for SearchAppEntity(a1, (uint64_t *)&type metadata singleton initialization cache for SearchAnswerEntity);
}

void SearchAnswerEntity.experienceFile.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_63_13();
  OUTLINED_FUNCTION_113_6(a1, v1);
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_76_1(a1);
  OUTLINED_FUNCTION_12();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchAnswerEntity.validateParameters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24[4];

  v2 = v0;
  v3 = type metadata accessor for SearchAnswerEntity(0);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_60_9();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v24 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v24 - v9;
  EntityProperty.wrappedValue.getter();
  v12 = v24[0];
  v11 = v24[1];
  swift_bridgeObjectRelease();
  v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v13 = v12 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
    outlined init with copy of SearchResult(v2, (uint64_t)v10, type metadata accessor for SearchAnswerEntity);
    if (v14)
    {
      _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v10, type metadata accessor for SearchAnswerEntity);
      goto LABEL_12;
    }
    v15 = v10[*(int *)(v3 + 56)];
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v10, type metadata accessor for SearchAnswerEntity);
    if ((v15 & 1) != 0)
      goto LABEL_12;
  }
  if (one-time initialization token for search != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logging.search);
  outlined init with copy of SearchResult(v2, (uint64_t)v8, type metadata accessor for SearchAnswerEntity);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)v19 = 136315138;
    outlined init with copy of SearchResult((uint64_t)v8, v1, type metadata accessor for SearchAnswerEntity);
    v20 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v24);
    v24[3] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v8, type metadata accessor for SearchAnswerEntity);
    _os_log_impl(&dword_24315F000, v17, v18, "SearchAnswerEntity missing required fields: %s", v19, 0xCu);
    swift_arrayDestroy();
    specialized UnsafeMutablePointer.deallocate()();
  }
  _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v8, type metadata accessor for SearchAnswerEntity);

  lazy protocol witness table accessor for type SearchToolError and conformance SearchToolError();
  swift_allocError();
  *v23 = xmmword_24334E620;
  swift_willThrow();
LABEL_12:
  OUTLINED_FUNCTION_1_1();
}

void SearchAnswerEntity.answer.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void key path setter for SearchAnswerEntity.answer : SearchAnswerEntity()
{
  swift_bridgeObjectRetain();
  SearchAnswerEntity.answer.setter();
}

void SearchAnswerEntity.answer.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchAnswerEntity.$answer.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchAnswerEntity.documentSource.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void key path setter for SearchAnswerEntity.documentSource : SearchAnswerEntity()
{
  swift_bridgeObjectRetain();
  SearchAnswerEntity.documentSource.setter();
}

void SearchAnswerEntity.documentSource.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchAnswerEntity.$documentSource.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchAnswerEntity.title.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.title.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.title.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchAnswerEntity.$title.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

uint64_t SearchAnswerEntity.sourceDocuments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SearchAnswerEntity.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

void SearchAnswerEntity.SourceDocument.bundleId.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void SearchAnswerEntity.SourceDocument.documentId.getter()
{
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_5();
}

void SearchAnswerEntity.SourceDocument.url.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_83();
  v2 = type metadata accessor for SearchAnswerEntity.SourceDocument(v1);
  OUTLINED_FUNCTION_107_1(v0 + *(int *)(v2 + 24), v3, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5();
}

void static SearchAnswerEntity.SourceDocument.== infix(_:_:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_18_2();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_2_2();
  v13 = v12 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_71();
  v17 = v15 - v16;
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_76_10();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v33 - v20;
  v22 = v4[1];
  v23 = v2[1];
  if (!v22)
  {
    if (v23)
      goto LABEL_28;
LABEL_10:
    v25 = v4[3];
    v26 = v2[3];
    if (v25)
    {
      if (!v26)
        goto LABEL_28;
      v27 = v4[2] == v2[2] && v25 == v26;
      if (!v27 && (OUTLINED_FUNCTION_18_7() & 1) == 0)
        goto LABEL_28;
    }
    else if (v26)
    {
      goto LABEL_28;
    }
    v34 = v6;
    v28 = type metadata accessor for SearchAnswerEntity.SourceDocument(0);
    OUTLINED_FUNCTION_44_17((uint64_t)v4 + *(int *)(v28 + 24), (uint64_t)v21);
    OUTLINED_FUNCTION_44_17((uint64_t)v2 + *(int *)(v28 + 24), v0);
    v29 = v13 + *(int *)(v9 + 48);
    OUTLINED_FUNCTION_44_17((uint64_t)v21, v13);
    OUTLINED_FUNCTION_44_17(v0, v29);
    OUTLINED_FUNCTION_22_2(v13, 1, v5);
    if (v24)
    {
      OUTLINED_FUNCTION_76_1(v0);
      OUTLINED_FUNCTION_76_1((uint64_t)v21);
      OUTLINED_FUNCTION_22_2(v29, 1, v5);
      if (v24)
      {
        outlined destroy of MobileSMSDocument?(v13, &demangling cache variable for type metadata for URL?);
        goto LABEL_28;
      }
    }
    else
    {
      outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(v13, v17, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_22_2(v29, 1, v5);
      if (!v30)
      {
        v31 = v34;
        OUTLINED_FUNCTION_89_11((uint64_t)v8, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32));
        lazy protocol witness table accessor for type URL and conformance URL((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
        dispatch thunk of static Equatable.== infix(_:_:)();
        v32 = *(void (**)(char *, uint64_t))(v31 + 8);
        v32(v8, v5);
        OUTLINED_FUNCTION_76_1(v0);
        OUTLINED_FUNCTION_76_1((uint64_t)v21);
        v32((char *)v17, v5);
        OUTLINED_FUNCTION_76_1(v13);
        goto LABEL_28;
      }
      OUTLINED_FUNCTION_76_1(v0);
      OUTLINED_FUNCTION_76_1((uint64_t)v21);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v17, v5);
    }
    outlined destroy of MobileSMSDocument?(v13, &demangling cache variable for type metadata for (URL?, URL?));
    goto LABEL_28;
  }
  if (v23)
  {
    v24 = *v4 == *v2 && v22 == v23;
    if (v24 || (OUTLINED_FUNCTION_18_7() & 1) != 0)
      goto LABEL_10;
  }
LABEL_28:
  OUTLINED_FUNCTION_43_0();
}

uint64_t SearchAnswerEntity.SourceDocument.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x746E656D75636F64 && a2 == 0xEA00000000006449;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 7107189 && a2 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t SearchAnswerEntity.SourceDocument.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6449656C646E7562;
  if (a1 == 1)
    return 0x746E656D75636F64;
  return 7107189;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchAnswerEntity.SourceDocument.CodingKeys()
{
  char *v0;

  return SearchAnswerEntity.SourceDocument.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SearchAnswerEntity.SourceDocument.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SearchAnswerEntity.SourceDocument.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchAnswerEntity.SourceDocument.CodingKeys()
{
  lazy protocol witness table accessor for type SearchAnswerEntity.SourceDocument.CodingKeys and conformance SearchAnswerEntity.SourceDocument.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchAnswerEntity.SourceDocument.CodingKeys()
{
  lazy protocol witness table accessor for type SearchAnswerEntity.SourceDocument.CodingKeys and conformance SearchAnswerEntity.SourceDocument.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SearchAnswerEntity.SourceDocument.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchAnswerEntity.SourceDocument.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchAnswerEntity.SourceDocument.CodingKeys and conformance SearchAnswerEntity.SourceDocument.CodingKeys();
  OUTLINED_FUNCTION_61_6();
  OUTLINED_FUNCTION_21_12();
  if (!v1)
  {
    OUTLINED_FUNCTION_21_12();
    type metadata accessor for SearchAnswerEntity.SourceDocument(0);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type URL and conformance URL((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
    OUTLINED_FUNCTION_65_3();
  }
  return OUTLINED_FUNCTION_38_2(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
}

void SearchAnswerEntity.SourceDocument.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_63_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SearchAnswerEntity.SourceDocument.CodingKeys>);
  OUTLINED_FUNCTION_81_9();
  MEMORY[0x24BDAC7A8](v6);
  v7 = OUTLINED_FUNCTION_91_2();
  v8 = type metadata accessor for SearchAnswerEntity.SourceDocument(v7);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_2();
  v12 = (uint64_t *)(v11 - v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchAnswerEntity.SourceDocument.CodingKeys and conformance SearchAnswerEntity.SourceDocument.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    OUTLINED_FUNCTION_300();
  }
  else
  {
    *v12 = OUTLINED_FUNCTION_95_10();
    v12[1] = v13;
    v12[2] = OUTLINED_FUNCTION_95_10();
    v12[3] = v14;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type URL and conformance URL((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_35_11();
    outlined init with take of URL?(v3, (uint64_t)v12 + *(int *)(v8 + 24), &demangling cache variable for type metadata for URL?);
    outlined init with copy of SearchResult((uint64_t)v12, a2, type metadata accessor for SearchAnswerEntity.SourceDocument);
    OUTLINED_FUNCTION_300();
    _s10OmniSearch0B6ResultVWOhTm_1((uint64_t)v12, type metadata accessor for SearchAnswerEntity.SourceDocument);
  }
  OUTLINED_FUNCTION_1_1();
}

void protocol witness for Decodable.init(from:) in conformance SearchAnswerEntity.SourceDocument(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchAnswerEntity.SourceDocument.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SearchAnswerEntity.SourceDocument(_QWORD *a1)
{
  return SearchAnswerEntity.SourceDocument.encode(to:)(a1);
}

void SearchAnswerEntity.experienceFile.getter()
{
  EntityProperty.wrappedValue.getter();
  OUTLINED_FUNCTION_5();
}

void key path setter for SearchAnswerEntity.experienceFile : SearchAnswerEntity(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?(a1, (uint64_t)v4, &demangling cache variable for type metadata for IntentFile?);
  SearchAnswerEntity.experienceFile.setter((uint64_t)v4);
}

void SearchAnswerEntity.experienceFile.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchAnswerEntity.$experienceFile.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

uint64_t SearchAnswerEntity.experienceSourceType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BE6E1E8];
  v3 = type metadata accessor for SearchResultType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

void SearchAnswerEntity.globalSearchSummary.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.globalSearchSummary.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.globalSearchSummary.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchAnswerEntity.$globalSearchSummary.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchAnswerEntity.description.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.description.setter()
{
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.description.modify()
{
  uint64_t v0;
  void *v1;

  v1 = OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_8_4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  OUTLINED_FUNCTION_12();
}

void SearchAnswerEntity.$description.getter()
{
  EntityProperty.projectedValue.getter();
  OUTLINED_FUNCTION_5();
}

void SearchAnswerEntity.summary.getter()
{
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_2_5();
}

void SearchAnswerEntity.sourceResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_83();
  v2 = type metadata accessor for SearchAnswerEntity(v1);
  OUTLINED_FUNCTION_107_1(v0 + *(int *)(v2 + 48), v3, &demangling cache variable for type metadata for SearchResult?);
  OUTLINED_FUNCTION_5();
}

void SearchAnswerEntity.sourceResult.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_67_14();
  OUTLINED_FUNCTION_128_0(v1, v0 + *(int *)(v1 + 48), &demangling cache variable for type metadata for SearchResult?);
  OUTLINED_FUNCTION_5();
}

uint64_t (*SearchAnswerEntity.sourceResult.modify())(_QWORD)
{
  type metadata accessor for SearchAnswerEntity(0);
  return destructiveProjectEnumData for GlobalSearchClient.QueryType;
}

id SearchAnswerEntity.card.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  type metadata accessor for SFCard();
  v1 = (uint64_t *)(v0 + *(int *)(OUTLINED_FUNCTION_67_14() + 52));
  v2 = *v1;
  v3 = v1[1];
  outlined copy of Data?(*v1, v3);
  return SFCard.init(data:)(v2, v3);
}

void key path setter for SearchAnswerEntity.card : SearchAnswerEntity(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  SearchAnswerEntity.card.setter((uint64_t)v1);
}

void SearchAnswerEntity.card.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1;
  if (a1)
  {
    OUTLINED_FUNCTION_84_2();
    OUTLINED_FUNCTION_82_3();
  }
  else
  {
    v1 = 0;
    v2 = 0xF000000000000000;
  }
  v4 = v3 + *(int *)(type metadata accessor for SearchAnswerEntity(0) + 52);
  outlined consume of Data?(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = v2;
  OUTLINED_FUNCTION_12();
}

void SearchAnswerEntity.card.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 8) = v1;
  type metadata accessor for SFCard();
  v3 = *(int *)(type metadata accessor for SearchAnswerEntity(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data?(*v4, v6);
  *(_QWORD *)a1 = SFCard.init(data:)(v5, v6);
  OUTLINED_FUNCTION_12();
}

{
  void *v1;
  char v2;
  id v3;
  id v4;
  id v5;

  v1 = (void *)OUTLINED_FUNCTION_89_4(a1);
  if ((v2 & 1) != 0)
  {
    v4 = v1;
    if (v1)
    {
      v3 = v1;
      OUTLINED_FUNCTION_84_2();
      OUTLINED_FUNCTION_82_3();
    }
    OUTLINED_FUNCTION_74_3();

  }
  else
  {
    if (v1)
    {
      v5 = v1;
      SFCard.data.getter();

    }
    OUTLINED_FUNCTION_74_3();
  }
}

void SearchAnswerEntity.init()()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_83();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_81_9();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_63_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  OUTLINED_FUNCTION_58_10();
  OUTLINED_FUNCTION_54_4();
}

void sub_2432A92C4(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_54_4();
}

void sub_2432A92D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_56_2();
  OUTLINED_FUNCTION_120_6();
}

void sub_2432A92F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  OUTLINED_FUNCTION_135();
  *(_QWORD *)(v1 + 40) = MEMORY[0x2494F42B0](v2);
  OUTLINED_FUNCTION_79_8();
  OUTLINED_FUNCTION_120_6();
}

void sub_2432A9348(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  OUTLINED_FUNCTION_135();
  OUTLINED_FUNCTION_54_4();
}

void sub_2432A9368(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 56) = a1;
  v2 = (int *)type metadata accessor for SearchAnswerEntity(0);
  v3 = v1 + v2[12];
  v4 = OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_49(v3, v5, v6, v4);
  *(_OWORD *)(v1 + v2[13]) = xmmword_24334E610;
  *(_BYTE *)(v1 + v2[14]) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]>);
  OUTLINED_FUNCTION_79_8();
  OUTLINED_FUNCTION_54_4();
}

void sub_2432A93D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  *(_QWORD *)(v1 + v6) = a1;
  UUID.init()();
  v8 = UUID.uuidString.getter();
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  v11 = (uint64_t *)(v1 + *(int *)(v4 + 60));
  *v11 = v8;
  v11[1] = v10;
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v7 - 96) = 0;
  *(_QWORD *)(v7 - 88) = 0xE000000000000000;
  OUTLINED_FUNCTION_114_1();
  *(_QWORD *)(v7 - 96) = 0;
  *(_QWORD *)(v7 - 88) = 0xE000000000000000;
  OUTLINED_FUNCTION_114_1();
  OUTLINED_FUNCTION_43_0();
}

void SearchAnswerEntity.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_OWORD *);
  void (*v24)(_OWORD *);
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  OUTLINED_FUNCTION_18_2();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchAnswerEntity?);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v25);
  v26 = OUTLINED_FUNCTION_44_4();
  v27 = (int *)type metadata accessor for SearchAnswerEntity.Builder(v26);
  OUTLINED_FUNCTION_15();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_76_10();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v32 = (_OWORD *)((char *)&a9 - v31);
  v32[2] = 0u;
  v32[3] = 0u;
  *v32 = 0u;
  v32[1] = 0u;
  v33 = (char *)&a9 + *(int *)(v30 + 36) - v31;
  v34 = OUTLINED_FUNCTION_53_4();
  OUTLINED_FUNCTION_49((uint64_t)v33, v35, v36, v34);
  v37 = (uint64_t)v32 + v27[10];
  v38 = OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_49(v37, v39, v40, v38);
  *(_QWORD *)((char *)v32 + v27[11]) = 0;
  v41 = (_QWORD *)((char *)v32 + v27[12]);
  *v41 = 0;
  v41[1] = 0;
  v42 = (_QWORD *)((char *)v32 + v27[13]);
  *v42 = 0;
  v42[1] = 0;
  *((_BYTE *)v32 + v27[14]) = 0;
  v24(v32);
  outlined init with copy of SearchResult((uint64_t)v32, v20, type metadata accessor for SearchAnswerEntity.Builder);
  SearchAnswerEntity.init(builder:)();
}

void sub_2432A9564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  _s10OmniSearch0B6ResultVWOhTm_1(v3, v2);
  v4 = type metadata accessor for SearchAnswerEntity(0);
  if (__swift_getEnumTagSinglePayload(v1, 1, v4))
  {
    outlined destroy of MobileSMSDocument?(v1, &demangling cache variable for type metadata for SearchAnswerEntity?);
    v5 = 1;
  }
  else
  {
    outlined init with take of SearchResult(v1, v0, type metadata accessor for SearchAnswerEntity);
    v5 = 0;
  }
  __swift_storeEnumTagSinglePayload(v0, v5, 1, v4);
  OUTLINED_FUNCTION_43_0();
}

void SearchAnswerEntity.Builder.init()()
{
  _OWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (int *)OUTLINED_FUNCTION_56_9();
  *v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  v2 = (uint64_t)v0 + v1[9];
  v3 = OUTLINED_FUNCTION_53_4();
  OUTLINED_FUNCTION_49(v2, v4, v5, v3);
  v6 = (uint64_t)v0 + v1[10];
  v7 = OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_49(v6, v8, v9, v7);
  *(_QWORD *)((char *)v0 + v1[11]) = 0;
  v10 = (_QWORD *)((char *)v0 + v1[12]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)((char *)v0 + v1[13]);
  *v11 = 0;
  v11[1] = 0;
  *((_BYTE *)v0 + v1[14]) = 0;
  OUTLINED_FUNCTION_12();
}

