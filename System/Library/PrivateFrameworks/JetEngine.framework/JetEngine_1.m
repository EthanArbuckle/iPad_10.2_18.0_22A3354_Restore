uint64_t sub_19CD480E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2F50);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

_QWORD *sub_19CD481F0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CED560C(a1, a2, a3, a4, &qword_1ECEB2508);
}

_QWORD *sub_19CD481FC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CED560C(a1, a2, a3, a4, &qword_1ECEB2F38);
}

uint64_t sub_19CD48208()
{
  __darwin_time_t *v0;

  return sub_19CD48210(*v0, v0[1]);
}

uint64_t sub_19CD48210(__darwin_time_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __darwin_time_t v20;
  uint64_t v21;
  uint64_t v22;
  __darwin_time_t v23;
  NSObject *v24;
  __darwin_time_t v25;
  void *v26;
  dispatch_group_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  __darwin_time_t v31;
  uint64_t v32;
  __darwin_time_t tv_sec;
  _QWORD *v34;
  NSObject *v35;
  id v36;
  NSObject *v37;
  char *v38;
  __darwin_time_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  NSObject *v47;
  __darwin_time_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  unint64_t v54;
  NSObject *v55;
  NSObject *v56;
  id v57;
  NSObject *v58;
  uint64_t tv_nsec;
  __darwin_time_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  __darwin_time_t v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  dispatch_group_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *__return_ptr, timespec *);
  id v76;
  NSObject *v77;
  char *v78;
  NSObject *v79;
  unint64_t v80;
  uint64_t v81;
  dispatch_group_t v82;
  char *v83;
  void *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __darwin_time_t v92;
  timespec aBlock;
  void *v94;
  void *v95;
  void (*v96)();
  _QWORD *v97;
  char v98;
  _QWORD v99[6];

  v92 = a1;
  v99[5] = *MEMORY[0x1E0C80C00];
  v79 = sub_19CFDE87C();
  MEMORY[0x1E0C80A78](v79, v3);
  v78 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19CFDF2D8();
  v91 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19CFDFD88();
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = sub_19CFDF308();
  v90 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_19CFDFDAC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2EF0);
    v50 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB2570);
    v51 = swift_allocObject();
    *(_DWORD *)(v51 + 16) = 0;
    *(_QWORD *)(v50 + 16) = v51;
    *(_QWORD *)(v50 + 24) = v92;
    *(_BYTE *)(v50 + 32) = 1;
    swift_retain();
    return v50;
  }
  v80 = *(_QWORD *)(a2 + 16);
  v20 = v92;
  v87 = v11;
  v85 = v8;
  v88 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2EF0);
  v21 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB2570);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v23 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v21 + 16) = v22;
  *(_QWORD *)(v21 + 24) = v23;
  v86 = v21;
  *(_BYTE *)(v21 + 32) = 0;
  v24 = sub_19CD48F8C();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, *MEMORY[0x1E0DEF8D8], v15);
  sub_19CFDF2F0();
  aBlock.tv_sec = v23;
  sub_19CCC5C88(qword_1ECEB3068, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB3050);
  sub_19CD09F78((unint64_t *)&qword_1ECEB3058, &qword_1ECEB3050);
  v25 = v23;
  sub_19CFE0070();
  v83 = v14;
  v77 = v24;
  v26 = (void *)sub_19CFDFDDC();
  v27 = dispatch_group_create();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v25;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v25;
  v30 = swift_allocObject();
  if (qword_1ECEB1330 != -1)
    swift_once();
  v31 = v20;
  aBlock.tv_sec = v20;
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  swift_task_localValuePush();
  v32 = swift_bridgeObjectRetain();
  sub_19CD4A298(v32, (void (**)(uint64_t))&aBlock);
  swift_bridgeObjectRelease();
  swift_task_localValuePop();
  tv_sec = aBlock.tv_sec;
  if (!aBlock.tv_sec)
    tv_sec = v25;
  v30[2].isa = (Class)tv_sec;
  v34 = (_QWORD *)swift_allocObject();
  v34[2] = v27;
  v34[3] = v20;
  v34[4] = v30;
  v34[5] = v28;
  v34[6] = v29;
  v34[7] = v26;
  v84 = v26;
  v82 = v27;
  v81 = v29;
  if (v80 >= 2)
  {
    swift_retain_n();
    v35 = v27;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v36 = v26;
    v37 = v35;
    v78 = (char *)v36;
    dispatch_group_enter(v37);
    v38 = v83;
    v80 = v28;
    v79 = v30;
    v39 = v20;
    if (qword_1ECEB2F90 != -1)
      swift_once();
    v76 = (id)qword_1ECEB5308;
    v40 = (_QWORD *)swift_allocObject();
    v41 = v89;
    v40[2] = v89;
    v40[3] = sub_19CCF11FC;
    v40[4] = v34;
    v40[5] = v37;
    v96 = sub_19CD1839C;
    v97 = v40;
    aBlock.tv_sec = MEMORY[0x1E0C809B0];
    aBlock.tv_nsec = 1107296256;
    v94 = sub_19CD0C78C;
    v95 = &block_descriptor_24_1;
    v42 = _Block_copy(&aBlock);
    v77 = v37;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_19CFDF2F0();
    v99[0] = v25;
    sub_19CCC5C88(qword_1ECEB3100, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB3198);
    sub_19CD09F78((unint64_t *)&qword_1ECEB31A0, &qword_1ECEB3198);
    v43 = v85;
    v44 = v88;
    sub_19CFE0070();
    MEMORY[0x1A1AD9FF4](0, v38, v43, v42);
    _Block_release(v42);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v38, v87);

    v45 = v81;
    swift_release();
    v46 = v80;
    swift_release();
    v47 = v79;
    swift_release();
    swift_release();

    v48 = MEMORY[0x1E0C809B0];
    swift_release();
    swift_release();
    v49 = v45;
    goto LABEL_15;
  }
  v52 = v30;
  v53 = v89;
  v54 = *(_QWORD *)(v89 + 40);
  v75 = *(void (**)(_QWORD *__return_ptr, timespec *))(v89 + 32);
  v80 = v54;
  swift_retain();
  swift_retain_n();
  v55 = v27;
  v56 = v52;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  v57 = v26;
  v58 = v55;
  v76 = v57;
  swift_bridgeObjectRetain();
  dispatch_group_enter(v58);
  aBlock.tv_sec = 0;
  aBlock.tv_nsec = 0;
  if (!clock_gettime(_CLOCK_MONOTONIC_RAW, &aBlock) || !clock_gettime(_CLOCK_MONOTONIC_RAW, &aBlock))
  {
    v60 = aBlock.tv_sec;
    tv_nsec = aBlock.tv_nsec;
    aBlock.tv_sec = v31;
    v75(v99, &aBlock);
    v61 = (_QWORD *)swift_allocObject();
    v61[2] = v60;
    v61[3] = tv_nsec;
    v61[4] = v56;
    v61[5] = v28;
    v61[6] = v58;
    v62 = swift_allocObject();
    v63 = v81;
    *(_QWORD *)(v62 + 16) = v81;
    *(_QWORD *)(v62 + 24) = v58;
    v99[3] = v77;
    v99[4] = &protocol witness table for OS_dispatch_queue;
    v64 = v76;
    v99[0] = v76;
    aBlock.tv_sec = (__darwin_time_t)sub_19CD18434;
    aBlock.tv_nsec = (uint64_t)v61;
    v94 = sub_19CEBE33C;
    v95 = (void *)v62;
    sub_19CCD5B84((uint64_t)v99, (uint64_t)&v96);
    v98 = 0;
    v79 = v58;
    swift_retain();
    swift_retain();
    swift_retain();
    v65 = v64;
    swift_retain();
    swift_retain();
    sub_19CD48FC8();
    sub_19CCECFE4((uint64_t)&aBlock, &qword_1ECEB29C0);
    swift_release();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v99);
    swift_release();

    v49 = v63;
    v47 = v56;
    swift_release();
    swift_release();
    swift_release();
    v66 = v92;
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    v46 = v28;
    v43 = v85;
    v41 = v53;
    v39 = v66;
    v38 = v83;
    v48 = MEMORY[0x1E0C809B0];
LABEL_15:
    swift_release();
    v67 = (_QWORD *)swift_allocObject();
    v67[2] = v49;
    v67[3] = v46;
    v67[4] = v47;
    v67[5] = v39;
    v50 = v86;
    v67[6] = v41;
    v67[7] = v50;
    v96 = sub_19CD0C7B8;
    v97 = v67;
    aBlock.tv_sec = v48;
    aBlock.tv_nsec = 1107296256;
    v94 = sub_19CD0C78C;
    v95 = &block_descriptor_20;
    v68 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_19CFDF2F0();
    v99[0] = MEMORY[0x1E0DEE9D8];
    sub_19CCC5C88(qword_1ECEB3100, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB3198);
    sub_19CD09F78((unint64_t *)&qword_1ECEB31A0, &qword_1ECEB3198);
    v69 = v88;
    sub_19CFE0070();
    v70 = v84;
    v71 = v82;
    sub_19CFDFD70();
    _Block_release(v68);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v43, v69);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v38, v87);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v50;
  }
  v73 = sub_19CFDF224();
  if ((v73 & 0x100000000) != 0)
    LODWORD(v99[0]) = 16;
  else
    LODWORD(v99[0]) = v73;
  sub_19CE07B90(MEMORY[0x1E0DEE9D8]);
  sub_19CCC5C88((unint64_t *)&qword_1EE436CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE90], MEMORY[0x1E0CADE88]);
  sub_19CFDEC84();
  v99[0] = 0;
  v99[1] = 0xE000000000000000;
  sub_19CFE010C();
  sub_19CFDF698();
  sub_19CFE02E0();
  result = sub_19CFE0340();
  __break(1u);
  return result;
}

uint64_t sub_19CD48E18(void (*a1)(uint64_t), int a2, dispatch_group_t group, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  timespec v22;
  void (*v23)(void *);
  uint64_t v24;
  _BYTE v25[48];
  _QWORD v26[5];

  dispatch_group_enter(group);
  static MonotonicTime.now.getter(&v22);
  tv_sec = v22.tv_sec;
  tv_nsec = v22.tv_nsec;
  a1(a4);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = tv_sec;
  v17[3] = tv_nsec;
  v17[4] = a5;
  v17[5] = a6;
  v17[6] = group;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a7;
  *(_QWORD *)(v18 + 24) = group;
  v26[3] = sub_19CD48F8C();
  v26[4] = &protocol witness table for OS_dispatch_queue;
  v26[0] = a8;
  v22.tv_sec = (__darwin_time_t)sub_19CD18434;
  v22.tv_nsec = (uint64_t)v17;
  v23 = sub_19CEBEF98;
  v24 = v18;
  sub_19CCD5B84((uint64_t)v26, (uint64_t)v25);
  v25[40] = 0;
  v19 = group;
  swift_retain();
  swift_retain();
  swift_retain();
  v20 = a8;
  swift_retain();
  swift_retain();
  sub_19CD48FC8();
  sub_19CCECFE4((uint64_t)&v22, &qword_1ECEB29C0);
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
}

unint64_t sub_19CD48F8C()
{
  unint64_t result;

  result = qword_1ECEB31B0;
  if (!qword_1ECEB31B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECEB31B0);
  }
  return result;
}

void sub_19CD48FC8()
{
  uint64_t v0;
  _BYTE v1[48];

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v0 + 16) + 16));
  swift_beginAccess();
  sub_19CCF8C5C(v0 + 24, (uint64_t)v1, &qword_1ECEB2EE0);
  __asm { BR              X10 }
}

void sub_19CD49038(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  os_unfair_lock_s *v36;
  uint64_t v37;
  void *v38;

  v38 = *(void **)(v37 - 104);
  os_unfair_lock_unlock(v36);
  sub_19CEBDA54(v38);

}

uint64_t sub_19CD49180(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void (*v13)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  _OWORD v14[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  __int128 v20;
  char v21;

  sub_19CCF8C5C(v1, (uint64_t)v19, &qword_1ECEB29C0);
  v3 = v19[0];
  if ((v21 & 1) != 0)
  {
    sub_19CD41714(a1, &v16);
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v5 = v18;
    v6 = v17;
    *(_OWORD *)v4 = v16;
    *(_OWORD *)(v4 + 16) = v6;
    *(_QWORD *)(v4 + 32) = v5;
    return swift_continuation_throwingResume();
  }
  else
  {
    v8 = v19[1];
    swift_release();
    sub_19CCD14C4(&v20, (uint64_t)&v16);
    v9 = *((_QWORD *)&v17 + 1);
    v10 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, *((uint64_t *)&v17 + 1));
    sub_19CD41714(a1, v14);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v3;
    *(_QWORD *)(v11 + 24) = v8;
    v12 = v14[1];
    *(_OWORD *)(v11 + 32) = v14[0];
    *(_OWORD *)(v11 + 48) = v12;
    *(_QWORD *)(v11 + 64) = v15;
    v13 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v10 + 8);
    swift_retain();
    v13(sub_19CD17114, v11, v9, v10);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
  }
}

uint64_t sub_19CD492B8(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t sub_19CD492F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_19CD5F4A4(a1, *(uint64_t (**)(_QWORD))(v2 + 16), a2);
}

uint64_t sub_19CD492F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t *sub_19CD49324(uint64_t a1)
{
  uint64_t *v1;

  return sub_19CD49330(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t *sub_19CD49330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD v20[6];

  if (qword_1ECEB1330 != -1)
    swift_once();
  v20[0] = a1;
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  swift_task_localValuePush();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_19CD49828(v8);
  swift_bridgeObjectRelease();
  v10 = swift_task_localValuePop();
  if (v9)
  {
    swift_retain();
    v12 = sub_19CD49C64(a2);
    v10 = swift_release();
    if (v12)
    {
      swift_retain();
      sub_19CFDF29C();
      v10 = swift_release();
    }
  }
  else
  {
    v12 = 0;
  }
  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for Promise(0, a5, v13, v14);
  sub_19CD4972C();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a5;
  v15[3] = v12;
  v15[4] = v9;
  v15[5] = a2;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v12;
  v20[3] = &type metadata for SyncTaskScheduler;
  v20[4] = &protocol witness table for SyncTaskScheduler;
  swift_retain_n();
  swift_retain();
  Promise.then(perform:orCatchError:on:)((uint64_t)sub_19CD458FC, (uint64_t)v15, (uint64_t)sub_19CDB7810, v16, (uint64_t)v20);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a5;
  *(_QWORD *)(v17 + 24) = a2;
  sub_19CD0C424((uint64_t)v20);
  v18 = Promise.map<A>(on:_:)((uint64_t)v20, (uint64_t)sub_19CD44C70, v17, (uint64_t)&type metadata for Dependency);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  return v18;
}

uint64_t type metadata accessor for BaseObjectGraph()
{
  return objc_opt_self();
}

uint64_t inject<A, B>(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return BaseObjectGraph._inject<A>(_:)(a1, a2, a3);
}

uint64_t BaseObjectGraph._inject<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_19CFDFF5C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v13 - v9;
  BaseObjectGraph._injectIfAvailable<A>(_:)();
  v11 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    sub_19CF51FB0(a1, a2);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v10, a2);
}

uint64_t BaseObjectGraph._injectIfAvailable<A>(_:)()
{
  sub_19CFDFF5C();
  return sub_19CD4972C();
}

uint64_t sub_19CD4972C()
{
  if (qword_1ECEB1330 != -1)
    swift_once();
  return sub_19CFE0A78();
}

uint64_t getEnumTagSinglePayload for MetricsPipeline(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 177))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19CD49828(uint64_t a1)
{
  uint64_t started;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _OWORD v10[2];
  _OWORD v11[2];

  started = type metadata accessor for StartUpPerformanceEvent();
  if (!*(_QWORD *)(a1 + 16) || (v3 = sub_19CD4B638(started), (v4 & 1) == 0))
  {
    v6 = sub_19CD49AD0((uint64_t *)&unk_1ECEB2590);
    if (v6)
    {
      sub_19CD257E8(a1, v6, v7, (uint64_t)v11);
      return *(_QWORD *)&v11[0];
    }
    return 0;
  }
  sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v3, (uint64_t)v10);
  sub_19CD433C0(v10, v11);
  sub_19CD436B0((uint64_t)v11, (uint64_t)v10);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    v5 = v9;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return v5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DCF8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v5 = sub_19CDAC9D8((uint64_t (*)(_QWORD))type metadata accessor for StartUpPerformanceEvent, (uint64_t (*)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t))sub_19CDB53B4);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE43DD00);
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_19CFB30A8((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v9);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return 0;
  }
  sub_19CFE010C();
  sub_19CFDF698();
  sub_19CFE02E0();
  sub_19CFDF698();
  sub_19CFDF698();
  sub_19CFDF698();
  result = sub_19CFE0340();
  __break(1u);
  return result;
}

uint64_t sub_19CD49AD0(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (qword_1ECEB25A0 != -1)
    swift_once();
  v2 = off_1ECEB2560;
  v3 = *((_QWORD *)off_1ECEB2560 + 2);
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (1)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2558);
    __swift_instantiateConcreteTypeFromMangledName(a1);
    if ((swift_dynamicCast() & 1) != 0)
      break;
    v7 = 0;
    swift_bridgeObjectRelease();
LABEL_6:
    if (v3 == ++v4)
      goto LABEL_10;
  }
  result = swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_6;
  if (v3 == v4)
  {
LABEL_10:
    v6 = 0;
LABEL_11:
    swift_bridgeObjectRelease();
    return v6;
  }
  if (v4 >= v2[2])
  {
    __break(1u);
  }
  else
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      v6 = v7;
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for StartUpPerformanceEvent()
{
  return objc_opt_self();
}

uint64_t sub_19CD49C64(uint64_t a1)
{
  char v1;

  sub_19CD49C8C(a1);
  if ((v1 & 1) != 0)
    return 0;
  else
    return sub_19CCCCA74();
}

uint64_t sub_19CD49C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_conformsToProtocol2();
  if (v2)
    v3 = v2;
  else
    v3 = 0;
  if (v2)
    v4 = a1;
  else
    v4 = 0;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(v4);
  else
    return 0;
}

id sub_19CD49CE0(id result, char a2)
{
  switch(a2)
  {
    case 0:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 1:
    case 2:
    case 3:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

id sub_19CD49D18(id result, char a2)
{
  switch(a2)
  {
    case 0:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 1:
    case 2:
    case 3:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

void sub_19CD49D50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2208);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2430);
  MEMORY[0x1E0C80A78](v3, v4);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v11 - v7;
  os_unfair_lock_lock((os_unfair_lock_t)(v0[2] + 16));
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 96);
  swift_beginAccess();
  sub_19CCF8C5C(v9, (uint64_t)v8, &qword_1ECEB2430);
  v10 = (char *)sub_19CD49E70 + 4 * byte_19D052744[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_19CD49E70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  os_unfair_lock_s *v20;
  void **v21;
  void *v22;

  v22 = *v21;
  os_unfair_lock_unlock(v20);
  sub_19CEBDD2C(v22);

}

_QWORD *sub_19CD49FD0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 80);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[10 * v11 + 4])
          memmove(v15, a4 + 4, 80 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_19CD4A0F8(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CD4A0F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 80 * a1 + 32;
    v7 = a3 + 80 * v5;
    if (v6 >= v7 || v6 + 80 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

void sub_19CD4A200(id a1, char a2)
{
  switch(a2)
  {
    case 0:
      swift_bridgeObjectRelease();
      break;
    case 1:
    case 2:
    case 3:

      break;
    default:
      return;
  }
}

void sub_19CD4A238(id a1, char a2)
{
  switch(a2)
  {
    case 0:
      swift_bridgeObjectRelease();
      break;
    case 1:
    case 2:
    case 3:

      break;
    default:
      return;
  }
}

_QWORD *sub_19CD4A270(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, &qword_1ECEB1318, &qword_1ECEB12A0);
}

_QWORD *sub_19CD4A284(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, &qword_1ECEB12F0, &qword_1ECEB1278);
}

uint64_t sub_19CD4A298@<X0>(uint64_t a1@<X0>, void (**a2)(uint64_t)@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_19CD4B638((uint64_t)&type metadata for AsyncObjectGraphMetrics), (v5 & 1) != 0))
  {
    sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v9);
    sub_19CD433C0(v9, v10);
    sub_19CD436B0((uint64_t)v10, (uint64_t)v9);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      *a2 = (void (*)(uint64_t))v8;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DCD0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_19CDA9918(a2);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DCD8);
        if (!swift_dynamicCast())
        {
          sub_19CFE010C();
          sub_19CFDF698();
          sub_19CFE02E0();
          sub_19CFDF698();
          sub_19CFDF698();
          sub_19CFDF698();
          result = sub_19CFE0340();
          __break(1u);
          return result;
        }
        swift_retain();
        sub_19CFB15C4((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v8);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
        swift_release();
        *a2 = 0;
      }
    }
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
  }
  else
  {
    result = sub_19CD49AD0(&qword_1ECEB2008);
    if (result)
      return sub_19CD257E8(a1, result, v7, (uint64_t)a2);
    else
      *a2 = 0;
  }
  return result;
}

uint64_t initializeWithCopy for SentryConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19CD4A5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DiskJetPackResourceBundle()
{
  uint64_t result;

  result = qword_1EE43B960;
  if (!qword_1EE43B960)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *initializeWithCopy for DiskJetPackResourceBundle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_19CFDEDE0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10(v7, 1, v8))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3030);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_19CD4A728(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD4A81C(uint64_t a1)
{
  uint64_t v1;

  return sub_19CD4A828(a1, *(_QWORD *)(v1 + 24));
}

uint64_t sub_19CD4A828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  void (*v8)(_QWORD, double);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8(*v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 56))(v6, 0, 1);
  Promise.resolve(_:)((uint64_t)v6, v9, v10, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

unint64_t sub_19CD4A8D4(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB0840);
  v6 = (_QWORD *)sub_19CFE03AC();
  if (*(_QWORD *)(v5 + 16))
  {
    v24 = v3;
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_22;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_22;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_22:
              swift_release();
              v3 = v24;
              if ((a2 & 1) != 0)
              {
                v23 = 1 << *(_BYTE *)(v5 + 32);
                if (v23 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v23;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_29;
                if (v13 >= v11)
                  goto LABEL_22;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_19;
              }
            }
            v13 = v18;
          }
        }
LABEL_19:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
      v20 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v15);
      v21 = *v20;
      v22 = v20[1];
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_19CD3BE5C(v21, v22);
      }
      result = sub_19CD4AAD8(v19, v21, v22, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t sub_19CD4AAD8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  _QWORD *v11;

  sub_19CFE08C8();
  sub_19CFE08D4();
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_19CFDF650();
      swift_bridgeObjectRelease();
      v9 += 16;
      --v8;
    }
    while (v8);
  }
  sub_19CFE0910();
  result = sub_19CFE0088();
  *(_QWORD *)((char *)a4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a1;
  v11 = (_QWORD *)(a4[7] + 16 * result);
  *v11 = a2;
  v11[1] = a3;
  ++a4[2];
  return result;
}

void sub_19CD4ABD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  __asm { BR              X10 }
}

uint64_t sub_19CD4AC28()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_19CD4AC40()
{
  swift_bridgeObjectRelease();
  return sub_19CD4AC28();
}

uint64_t sub_19CD4AC4C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_19CD4AC28();
}

void sub_19CD4AC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  swift_bridgeObjectRelease();

}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_19CD4AD00(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_19CD427F4(a1, a2, a3, &qword_1EE440518);
}

uint64_t sub_19CD4AD14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t DependencyDictionary.replace<A>(dependencies:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v29 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_19CFDF770();
  swift_getAssociatedConformanceWitness();
  sub_19CFDFFBC();
  if (!(_QWORD)v35)
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, AssociatedTypeWitness);
  while (1)
  {
    v33[0] = v35;
    v33[1] = v36;
    v34 = v37;
    v13 = v35;
    sub_19CD436B0((uint64_t)v33 + 8, (uint64_t)v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = (_QWORD *)*v3;
    v15 = v30;
    *v3 = 0x8000000000000000;
    v17 = sub_19CD4B638(v13);
    v18 = v15[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      break;
    v21 = v16;
    if (v15[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v24 = v30;
        if ((v16 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_19CD43200();
        v24 = v30;
        if ((v21 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_19CD4BA3C(v20, isUniquelyReferenced_nonNull_native);
      v22 = sub_19CD4B638(v13);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_19;
      v17 = v22;
      v24 = v30;
      if ((v21 & 1) != 0)
      {
LABEL_3:
        sub_19CD433C0((_OWORD *)(v24[7] + 32 * v17), v32);
        sub_19CD433C0(v31, (_OWORD *)(v24[7] + 32 * v17));
        goto LABEL_4;
      }
    }
    v24[(v17 >> 6) + 8] |= 1 << v17;
    *(_QWORD *)(v24[6] + 8 * v17) = v13;
    sub_19CD433C0(v31, (_OWORD *)(v24[7] + 32 * v17));
    v25 = v24[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_18;
    v24[2] = v27;
    memset(v32, 0, sizeof(v32));
LABEL_4:
    *v3 = v24;
    swift_bridgeObjectRelease();
    sub_19CD3F190((uint64_t)v32);
    sub_19CD4C098((uint64_t)v33);
    sub_19CFDFFBC();
    if (!(_QWORD)v35)
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, AssociatedTypeWitness);
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_19CFE082C();
  __break(1u);
  return result;
}

_OWORD *sub_19CD4B0E0@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_19CD4B638(a2);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        sub_19CD433C0((_OWORD *)(v18[7] + 32 * v12), a4);
        return sub_19CD433C0(a1, (_OWORD *)(v18[7] + 32 * v12));
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a3 & 1) == 0)
    {
      sub_19CD43200();
      goto LABEL_7;
    }
    sub_19CD4BA3C(v15, a3 & 1);
    v20 = sub_19CD4B638(a2);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      result = sub_19CD4B9D8(v12, a2, a1, v18);
      *a4 = 0u;
      a4[1] = 0u;
      return result;
    }
  }
  result = (_OWORD *)sub_19CFE082C();
  __break(1u);
  return result;
}

uint64_t sub_19CD4B214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return DependencyDictionary.subscript.getter(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t DependencyDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _OWORD v26[2];
  _OWORD v27[2];

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_19CD4B638(a1), (v12 & 1) != 0))
  {
    sub_19CD436B0(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)v26);
    sub_19CD433C0(v26, v27);
    sub_19CD436B0((uint64_t)v27, (uint64_t)v26);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, a2);
LABEL_10:
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    }
    type metadata accessor for DependencyCell(0, a2, v13, v14);
    if (swift_dynamicCast())
    {
      sub_19CEE6858();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
      goto LABEL_10;
    }
    type metadata accessor for DependencyPromise(0, a2, v18, v19);
    v20 = swift_dynamicCast();
    if ((_DWORD)v20)
    {
      v22 = v25[0];
      MEMORY[0x1E0C80A78](v20, v21);
      v23 = v22;
      v24 = a1;
      requirementFailure(_:file:line:)(sub_19CEB08B0, (uint64_t)&v25[-4], (uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    }
    v25[0] = 0;
    v25[1] = 0xE000000000000000;
    sub_19CFE010C();
    sub_19CFDF698();
    sub_19CFE02E0();
    sub_19CFDF698();
    sub_19CFE0A90();
    sub_19CFDF698();
    swift_bridgeObjectRelease();
    sub_19CFDF698();
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v15 = sub_19CD4B690(a1, a2);
    if (v15)
      return sub_19CD257E8(v15, v10, a2, v15, v16);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
  }
  return result;
}

unint64_t sub_19CD4B59C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_19CD4B638(uint64_t a1)
{
  uint64_t v2;

  sub_19CFE08C8();
  sub_19CFE08D4();
  v2 = sub_19CFE0910();
  return sub_19CD4B59C(a1, v2);
}

uint64_t sub_19CD4B690(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (qword_1ECEB25A0 != -1)
    swift_once();
  *(_QWORD *)(swift_allocObject() + 16) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1FA0);
  *(_QWORD *)&v16 = a2;
  swift_getExtendedExistentialTypeMetadata_unique();
  sub_19CD05BA0((unint64_t *)&unk_1ECEB1FE0, &qword_1ECEB1FA0, MEMORY[0x1E0DEC330]);
  sub_19CFE03F4();
  swift_release();
  swift_bridgeObjectRelease();
  v11 = v16;
  v12 = v17;
  v13 = v18;
  v14 = v19;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECEB2010);
  sub_19CFDFF5C();
  sub_19CD05BA0(&qword_1ECEB2018, &qword_1ECEB2010, MEMORY[0x1E0DEAF38]);
  v3 = sub_19CFE02C8();
  MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DEC858], v3);
  v4 = sub_19CFE0388();
  MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DECCA8], v4);
  v5 = sub_19CFE02C8();
  v10 = sub_19CD05BA0(&qword_1ECEB2020, &qword_1ECEB2010, MEMORY[0x1E0DEAF50]);
  v6 = MEMORY[0x1E0DEC860];
  v9 = MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DEC860], v3, &v10);
  v8 = MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DECCB0], v4, &v9);
  MEMORY[0x1A1ADBD7C](v6, v5, &v8);
  sub_19CFDFC38();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t storeEnumTagSinglePayload for MetricsPipeline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 177) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_19CD4B968(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t storeEnumTagSinglePayload for PathExpression.MatchResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_OWORD *sub_19CD4B9D8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_19CD433C0(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_19CD4BA3C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v31[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2D18);
  result = sub_19CFE03AC();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
      if ((a2 & 1) != 0)
        sub_19CD433C0(v21, v31);
      else
        sub_19CD436B0((uint64_t)v21, (uint64_t)v31);
      sub_19CFE08C8();
      sub_19CFE08D4();
      result = sub_19CFE0910();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = (uint64_t)sub_19CD433C0(v31, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_19CD4BD10(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD v21[2];
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return result;
  v3 = v1;
  v4 = (_QWORD *)(result + 32);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_19CD41714(v4, &v23);
    v5 = v23;
    sub_19CD436B0((uint64_t)&v24, (uint64_t)v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = (_QWORD *)*v3;
    v20 = (_QWORD *)*v3;
    *v3 = 0x8000000000000000;
    v9 = sub_19CD4B638(v5);
    v10 = v7[2];
    v11 = (v8 & 1) == 0;
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      break;
    v13 = v8;
    if (v7[3] >= v12)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v16 = v20;
        if ((v8 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_19CD43200();
        v16 = v20;
        if ((v13 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_19CD4BA3C(v12, isUniquelyReferenced_nonNull_native);
      v14 = sub_19CD4B638(v5);
      if ((v13 & 1) != (v15 & 1))
        goto LABEL_20;
      v9 = v14;
      v16 = v20;
      if ((v13 & 1) != 0)
      {
LABEL_3:
        sub_19CD433C0((_OWORD *)(v16[7] + 32 * v9), v22);
        sub_19CD433C0(v21, (_OWORD *)(v16[7] + 32 * v9));
        goto LABEL_4;
      }
    }
    v16[(v9 >> 6) + 8] |= 1 << v9;
    *(_QWORD *)(v16[6] + 8 * v9) = v5;
    sub_19CD433C0(v21, (_OWORD *)(v16[7] + 32 * v9));
    v17 = v16[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_19;
    v16[2] = v19;
    memset(v22, 0, sizeof(v22));
LABEL_4:
    *v3 = v16;
    swift_bridgeObjectRelease();
    sub_19CCECFE4((uint64_t)v22, &qword_1ECEB3370);
    sub_19CD4C098((uint64_t)&v23);
    v4 += 5;
    if (!--v2)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = sub_19CFE082C();
  __break(1u);
  return result;
}

uint64_t sub_19CD4BEFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[5];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_19CD41714(v2, v9);
      sub_19CFE0A90();
      sub_19CFDF698();
      swift_bridgeObjectRelease();
      sub_19CFDF698();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_19CD4D730(0, v3[2] + 1, 1, v3);
      v5 = v3[2];
      v4 = v3[3];
      if (v5 >= v4 >> 1)
        v3 = sub_19CD4D730((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
      v3[2] = v5 + 1;
      v6 = &v3[2 * v5];
      v6[4] = 60;
      v6[5] = 0xE100000000000000;
      sub_19CD4C098((uint64_t)v9);
      v2 += 5;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v9[0] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB32D0);
  sub_19CD05BA0((unint64_t *)&qword_1ECEB32D8, &qword_1ECEB32D0, MEMORY[0x1E0DEAF20]);
  v7 = sub_19CFDF4F4();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_19CD4C098(uint64_t a1)
{
  destroy for Dependency(a1);
  return a1;
}

uint64_t destroy for Dependency(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
}

uint64_t sub_19CD4C0D4(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
      return result;
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return sub_19CD3BE18(result, a2);
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

id getMTStandardIDServiceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMTStandardIDServiceClass_softClass;
  v7 = getMTStandardIDServiceClass_softClass;
  if (!getMTStandardIDServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getMTStandardIDServiceClass_block_invoke;
    v3[3] = &unk_1E3DDF190;
    v3[4] = &v4;
    __getMTStandardIDServiceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19CD4C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void destroy for JSBytecodeSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19CFDEDE0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

double static AutomationSemantics.page(name:id:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t inited;
  double result;
  double v11[5];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3320);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_19D0522A0;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0468);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19D0522A0;
  sub_19CD40794(a3, (uint64_t)v11);
  swift_bridgeObjectRetain();
  sub_19CD4C788(0, (uint64_t)v11, (uint64_t *)(inited + 32));
  *(_QWORD *)&v11[0] = v8;
  *(_QWORD *)&v11[1] = MEMORY[0x1E0DEE9D8];
  sub_19CD4C984(inited);
  result = v11[0];
  *a4 = *(_OWORD *)v11;
  return result;
}

double static AutomationSemantics.offerButton(id:parentId:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t inited;
  double result;
  double v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0468);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19D052350;
  sub_19CD40794(a1, (uint64_t)v8);
  AutomationAttribute.init(key:value:)(25705, 0xE200000000000000, (uint64_t)v8, (_QWORD *)(inited + 32));
  sub_19CD40794(a2, (uint64_t)v8);
  AutomationAttribute.init(key:value:)(0x6449746E65726170, 0xE800000000000000, (uint64_t)v8, (_QWORD *)(inited + 64));
  *(_QWORD *)&v8[0] = &unk_1E3DCF5E8;
  *(_QWORD *)&v8[1] = MEMORY[0x1E0DEE9D8];
  sub_19CD4C984(inited);
  result = v8[0];
  *a3 = *(_OWORD *)v8;
  return result;
}

uint64_t sub_19CD4C788@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;

  if ((a1 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE200000000000000;
  sub_19CD40794(a2, (uint64_t)&v14);
  if (v15)
  {
    sub_19CD433C0(&v14, v13);
    sub_19CD436B0((uint64_t)v13, (uint64_t)v12);
    swift_bridgeObjectRetain();
    v7 = _sSS9JetEngineE11_unwrappingSSyp_tcfC_0((uint64_t)v12);
    v9 = v8;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    v9 = 0;
  }
  if ((a1 & 1) != 0)
    v10 = 0x6449746E65726170;
  else
    v10 = 25705;
  sub_19CCECFE4(a2, &qword_1ECEB3370);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a3 = v10;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double AutomationSemantics.attribute(key:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  double *v4;
  double v9;
  double v10;
  uint64_t inited;
  double result;
  double v13[5];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = *v4;
  v10 = v4[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0468);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19D0522A0;
  sub_19CD40794(a3, (uint64_t)v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AutomationAttribute.init(key:value:)(a1, a2, (uint64_t)v13, (_QWORD *)(inited + 32));
  v13[0] = v9;
  v13[1] = v10;
  sub_19CD4C984(inited);
  result = v13[0];
  *a4 = *(_OWORD *)v13;
  return result;
}

uint64_t sub_19CD4C984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_19CD4CAD4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

_QWORD *sub_19CD4CAD4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0468);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19CD3CDEC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t AutomationAttribute.init(key:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;

  sub_19CD40794(a3, (uint64_t)&v14);
  if (v15)
  {
    sub_19CD433C0(&v14, v13);
    sub_19CD436B0((uint64_t)v13, (uint64_t)v12);
    swift_bridgeObjectRetain();
    v8 = _sSS9JetEngineE11_unwrappingSSyp_tcfC_0((uint64_t)v12);
    v10 = v9;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = 0;
    v10 = 0;
  }
  sub_19CCECFE4(a3, &qword_1ECEB3370);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v8;
  a4[3] = v10;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _sSS9JetEngineE11_unwrappingSSyp_tcfC_0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[4];
  _QWORD v9[4];

  sub_19CD436B0(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43B430);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_19CCD14C4(&v5, (uint64_t)v9);
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    *((_QWORD *)&v6 + 1) = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_2Tm((uint64_t *)&v5);
    sub_19CFDF7F4();
    sub_19CFE02E0();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v5);
    v2 = v8[0];
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v3 = v9;
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    sub_19CD4CE18((uint64_t)&v5);
    v9[0] = 0;
    v9[1] = 0xE000000000000000;
    sub_19CFE02E0();
    v2 = v9[0];
    v3 = (_QWORD *)a1;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  return v2;
}

uint64_t sub_19CD4CE18(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43B438);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19CD4CE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  int64_t v8;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(_QWORD *__return_ptr, _OWORD *);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30[3];

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)*v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v13 = v6[3] >> 1, v13 < v8))
  {
    if (v7 <= v8)
      v14 = v7 + v5;
    else
      v14 = v7;
    v6 = sub_19CD4D730(isUniquelyReferenced_nonNull_native, v14, 1, v6);
    v13 = v6[3] >> 1;
  }
  v15 = v6[2];
  v16 = (_QWORD *)(v13 - v15);
  v17 = sub_19CD4D0C0(v30, &v6[2 * v15 + 4], v13 - v15, a1, (void (*)(_QWORD *__return_ptr, _OWORD *))a2, a3);
  if ((uint64_t)v17 < v5)
    goto LABEL_15;
  if (v17)
  {
    v18 = v6[2];
    v19 = __OFADD__(v18, v17);
    v20 = (char *)v17 + v18;
    if (v19)
    {
      __break(1u);
      goto LABEL_28;
    }
    v6[2] = v20;
  }
  if (v17 == v16)
  {
LABEL_16:
    a2 = v6[2];
    v22 = sub_19CD4D00C();
    if (!v23)
      goto LABEL_13;
    while (1)
    {
      v24 = v6[3];
      v25 = (void (*)(_QWORD *__return_ptr, _OWORD *))(v24 >> 1);
      if ((uint64_t)(v24 >> 1) < a2 + 1)
      {
        v27 = v22;
        v28 = v23;
        v29 = sub_19CD4D730((_QWORD *)(v24 > 1), a2 + 1, 1, v6);
        v23 = v28;
        v6 = v29;
        v22 = v27;
        v25 = (void (*)(_QWORD *__return_ptr, _OWORD *))(v6[3] >> 1);
        if (a2 < (uint64_t)v25)
        {
LABEL_21:
          v26 = &v6[2 * a2 + 5];
          while (1)
          {
            *(v26 - 1) = v22;
            *v26 = v23;
            ++a2;
            v22 = sub_19CD4D00C();
            if (!v23)
              break;
            v26 += 2;
            if (v25 == (void (*)(_QWORD *__return_ptr, _OWORD *))a2)
            {
              a2 = (uint64_t)v25;
              goto LABEL_18;
            }
          }
LABEL_28:
          v6[2] = a2;
          break;
        }
      }
      else if (a2 < (uint64_t)v25)
      {
        goto LABEL_21;
      }
LABEL_18:
      v6[2] = a2;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease();
  result = swift_release();
  *v4 = v6;
  return result;
}

uint64_t sub_19CD4D00C()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  void (*v3)(uint64_t *__return_ptr, _OWORD *);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];

  v1 = v0[1];
  v2 = *(_QWORD *)(*v0 + 16);
  if (v1 == v2)
  {
    memset(v10, 0, sizeof(v10));
  }
  else
  {
    if (v1 >= v2)
    {
      __break(1u);
      return result;
    }
    sub_19CD436B0(*v0 + 32 * v1 + 32, (uint64_t)v10);
    v0[1] = v1 + 1;
  }
  v3 = (void (*)(uint64_t *__return_ptr, _OWORD *))v0[2];
  sub_19CCC290C((uint64_t)v10, (uint64_t)&v8, &qword_1ECEB3370);
  if (!v9)
    return 0;
  sub_19CD433C0(&v8, v7);
  v3(&v6, v7);
  v4 = v6;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  return v4;
}

_QWORD *sub_19CD4D0C0(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, _OWORD *), uint64_t a6)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[2];
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];

  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_16:
    *result = a4;
    result[1] = v11;
    result[2] = a5;
    result[3] = a6;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_16;
  }
  if (a3 < 0)
    goto LABEL_18;
  v10 = a2;
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)(a4 + 16);
  v16 = result;
  v17 = a4 + 32;
  while (1)
  {
    if (v11 == v13)
    {
      memset(v22, 0, sizeof(v22));
      v11 = v13;
      goto LABEL_9;
    }
    if (v11 >= *(_QWORD *)(a4 + 16))
      break;
    sub_19CD436B0(v17 + 32 * v11++, (uint64_t)v22);
LABEL_9:
    sub_19CCC290C((uint64_t)v22, (uint64_t)&v20, &qword_1ECEB3370);
    if (!v21)
    {
      v9 = v12;
LABEL_15:
      result = v16;
      goto LABEL_16;
    }
    ++v12;
    sub_19CD433C0(&v20, v19);
    a5(v18, v19);
    v15 = v18[0];
    v14 = v18[1];
    result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
    *v10 = v15;
    v10[1] = v14;
    v10 += 2;
    if (v9 == v12)
      goto LABEL_15;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_19CD4D1F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _BYTE v5[32];

  sub_19CD436B0(a1, (uint64_t)v5);
  result = _sSS9JetEngineE11_unwrappingSSyp_tcfC_0((uint64_t)v5);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_19CD4D228@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;
  id v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  id v62;
  char *v63;
  uint64_t v64;

  v52[0] = a1;
  v1 = sub_19CFDF0F8();
  MEMORY[0x1E0C80A78](v1, v2);
  v57 = (char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19CFDF110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v56 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3030);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v55 = (char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v52 - v13;
  v15 = sub_19CFDEDE0();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v59 = (char *)v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)v52 - v22;
  MEMORY[0x1E0C80A78](v21, v24);
  v58 = (char *)v52 - v25;
  v26 = sub_19CFDED08();
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
  {
    v63 = v23;
    v53 = v5;
    v54 = v4;
    v62 = (id)objc_opt_self();
    v52[2] = v26;
    v28 = (uint64_t *)(v26 + 40);
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v60 = v14;
    v61 = v16;
    while (1)
    {
      v30 = *(v28 - 1);
      v31 = *v28;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v29 = sub_19CD4D730(0, v29[2] + 1, 1, v29);
      v32 = v63;
      v34 = v29[2];
      v33 = v29[3];
      if (v34 >= v33 >> 1)
        v29 = sub_19CD4D730((_QWORD *)(v33 > 1), v34 + 1, 1, v29);
      v29[2] = v34 + 1;
      v35 = &v29[2 * v34];
      v35[4] = v30;
      v35[5] = v31;
      v36 = (void *)sub_19CFDF854();
      swift_bridgeObjectRelease();
      v37 = objc_msgSend(v62, sel_fileURLWithPathComponents_, v36);

      if (!v37)
        break;
      sub_19CFDED74();

      v38 = (uint64_t)v60;
      v16 = v61;
      v39 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
      v39(v60, v32, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v38, 0, 1, v15);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v38, 1, v15) == 1)
        goto LABEL_13;
      v28 += 2;
      v64 = v27;
      v40 = v58;
      v39(v58, (char *)v38, v15);
      v41 = v59;
      sub_19CFDECE4();
      sub_19CFDED44();
      v42 = *(void (**)(char *, uint64_t))(v16 + 8);
      v42(v41, v15);
      v29 = (_QWORD *)sub_19CFDED08();
      v42(v32, v15);
      v43 = v40;
      v44 = v64;
      v42(v43, v15);
      v27 = v44 - 1;
      if (!v27)
      {
        swift_bridgeObjectRelease();
        v5 = v53;
        v4 = v54;
        v23 = v63;
        goto LABEL_14;
      }
    }
    v38 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v60, 1, 1, v15);
LABEL_13:
    swift_bridgeObjectRelease();
    v5 = v53;
    v4 = v54;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_14:
  v45 = (void *)objc_opt_self();
  v46 = (void *)sub_19CFDF854();
  swift_bridgeObjectRelease();
  v47 = objc_msgSend(v45, sel_fileURLWithPathComponents_, v46);

  if (!v47)
  {
    v38 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v55, 1, 1, v15);
    goto LABEL_18;
  }
  sub_19CFDED74();

  v48 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v49 = v55;
  v48(v55, v23, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v49, 1, v15) == 1)
  {
    v38 = (uint64_t)v49;
LABEL_18:
    v50 = v56;
    sub_19CD3BBD0(v38);
    sub_19CFDF0EC();
    sub_19CE07B90(MEMORY[0x1E0DEE9D8]);
    sub_19CF2CB18();
    sub_19CFDEC84();
    sub_19CFDF104();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v50, v4);
    return swift_willThrow();
  }
  return ((uint64_t (*)(_QWORD, char *, uint64_t))v48)(v52[0], v49, v15);
}

_QWORD *sub_19CD4D730(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3320);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19CD4D83C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CD4D83C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD4D92C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80);
  v2 = v0 + ((v1 + 56) & ~v1);
  v3 = (void (*)(uint64_t))(*(uint64_t (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
  v3(v2);
  return swift_release();
}

unint64_t sub_19CD4D97C()
{
  unint64_t result;

  result = qword_1EE43D080;
  if (!qword_1EE43D080)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for PageMetrics.InvocationPoint, &type metadata for PageMetrics.InvocationPoint);
    atomic_store(result, (unint64_t *)&qword_1EE43D080);
  }
  return result;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

id JEGestaltGetSystemVersion()
{
  void *v0;
  void *v1;
  __int128 v3;

  v3 = 0uLL;
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    objc_msgSend(v0, "operatingSystemVersion");
  else
    v3 = 0uLL;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld.%ld.%ld"), v3, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

__CFString *JEGestaltGetProductType()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;

  v0 = (__CFString *)MGGetStringAnswer();
  v1 = v0;
  if (!v0)
    v0 = CFSTR("Unknown");
  v2 = v0;

  return v2;
}

__CFString *JEGestaltGetDeviceClass()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;

  v0 = (__CFString *)MGGetStringAnswer();
  v1 = v0;
  if (!v0)
    v0 = CFSTR("Unknown");
  v2 = v0;

  return v2;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_19CD4DBD4()
{
  return sub_19CD45B20((uint64_t (*)(_QWORD))type metadata accessor for DiskJetPackResourceBundle);
}

uint64_t sub_19CD4DBE0(uint64_t a1)
{
  uint64_t *v1;

  return sub_19CD4DBEC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_19CD4DBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = type metadata accessor for JSResponse();
    sub_19CD4DE68(*(_QWORD *)(a1 + *(int *)(v10 + 28)), a3, a4, a5);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CD4DE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[8];
  uint64_t v92;

  v6 = v5;
  v67 = a2;
  v10 = sub_19CFDEFA8();
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v64 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for SentryEvent();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (uint64_t *)((char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = v4;
  sub_19CCF8C5C(v4 + 40, (uint64_t)&v78, &qword_1ECEB1F70);
  if (!*((_QWORD *)&v79 + 1))
    return sub_19CCECFE4((uint64_t)&v78, &qword_1ECEB1F70);
  v88 = v82;
  v89 = v83;
  v90 = v84;
  v85[0] = v78;
  v85[1] = v79;
  v86 = v80;
  v87 = v81;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v63 = a3;
    swift_bridgeObjectRetain();
    v18 = 0;
    v62 = xmmword_19D0522A0;
    v60 = a1;
    v61 = a4;
    do
    {
      v69 = v17;
      v92 = v6;
      v19 = a1 + v18;
      v20 = *(_QWORD *)(a1 + v18 + 104);
      v21 = *(_BYTE *)(a1 + v18 + 96);
      v22 = *(_QWORD *)(a1 + v18 + 80);
      v23 = *(_QWORD *)(a1 + v18 + 88);
      v25 = *(_QWORD *)(a1 + v18 + 64);
      v24 = *(_QWORD *)(v19 + 72);
      v27 = *(_QWORD *)(v19 + 48);
      v26 = *(_QWORD *)(v19 + 56);
      v28 = *(_QWORD *)(v19 + 40);
      LOBYTE(v78) = *(_BYTE *)(v19 + 32);
      *((_QWORD *)&v78 + 1) = v28;
      *(_QWORD *)&v79 = v27;
      *((_QWORD *)&v79 + 1) = v26;
      *(_QWORD *)&v80 = v25;
      *((_QWORD *)&v80 + 1) = v24;
      *(_QWORD *)&v81 = v22;
      *((_QWORD *)&v81 + 1) = v23;
      LOBYTE(v82) = v21;
      *((_QWORD *)&v82 + 1) = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_19CE77E3C((unsigned __int8 *)&v78, (uint64_t)v91);
      v29 = v87;
      v71 = *((_QWORD *)&v86 + 1);
      v30 = v89;
      v73 = *((_QWORD *)&v88 + 1);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE436ED8);
      v31 = (_OWORD *)swift_allocObject();
      v32 = v91[4];
      v33 = v91[6];
      v34 = v91[7];
      v31[7] = v91[5];
      v31[8] = v33;
      v31[9] = v34;
      v35 = v91[0];
      v36 = v91[1];
      v31[1] = v62;
      v31[2] = v35;
      v37 = v91[2];
      v38 = v91[3];
      v31[3] = v36;
      v31[4] = v37;
      v31[5] = v38;
      v31[6] = v32;
      v70 = v29;
      swift_bridgeObjectRetain();
      v72 = v30;
      swift_bridgeObjectRetain();
      v39 = v63;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v64;
      sub_19CFDEF9C();
      v41 = sub_19CFDEF90();
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v40, v66);
      *(_QWORD *)&v78 = v41;
      *((_QWORD *)&v78 + 1) = v43;
      v76 = 45;
      v77 = 0xE100000000000000;
      v74 = 0;
      v75 = 0xE000000000000000;
      sub_19CD41144();
      sub_19CFE0004();
      swift_bridgeObjectRelease();
      v44 = sub_19CFDF5F0();
      v46 = v45;
      swift_bridgeObjectRelease();
      sub_19CFDEF78();
      if (qword_1EE436E78 != -1)
        swift_once();
      v48 = qword_1EE465AC8;
      v47 = unk_1EE465AD0;
      *(uint64_t *)((char *)v16 + v13[15]) = 1;
      *v16 = v44;
      v16[1] = v46;
      v49 = v70;
      v16[2] = v71;
      v16[3] = v49;
      v50 = (uint64_t *)((char *)v16 + v13[7]);
      *v50 = 0x697263736176616ALL;
      v50[1] = 0xEA00000000007470;
      v51 = (uint64_t *)((char *)v16 + v13[8]);
      *v51 = v73;
      v51[1] = v72;
      v52 = (uint64_t *)((char *)v16 + v13[9]);
      *v52 = 0;
      v52[1] = 0;
      v53 = (uint64_t *)((char *)v16 + v13[10]);
      *v53 = 0;
      v53[1] = 0;
      *(uint64_t *)((char *)v16 + v13[11]) = 0;
      *(uint64_t *)((char *)v16 + v13[12]) = (uint64_t)v31;
      v54 = qword_1EE465AD8;
      v55 = unk_1EE465AE0;
      v56 = (uint64_t *)((char *)v16 + v13[13]);
      *v56 = v67;
      v56[1] = v39;
      v56[2] = v61;
      v57 = (uint64_t *)((char *)v16 + v13[14]);
      *v57 = v48;
      v57[1] = v47;
      v57[2] = v54;
      v57[3] = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58 = v92;
      sub_19CE52740();
      v6 = v58;
      sub_19CCEACE4((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SentryEvent);
      if (v58)
        break;
      v18 += 80;
      v17 = v69 - 1;
      a1 = v60;
    }
    while (v69 != 1);
    swift_bridgeObjectRelease();
  }
  return sub_19CD4E2C8((uint64_t)v85);
}

uint64_t sub_19CD4E2C8(uint64_t a1)
{
  destroy for SentryConfiguration(a1);
  return a1;
}

uint64_t type metadata accessor for SentryEvent()
{
  uint64_t result;

  result = qword_1EE43B000;
  if (!qword_1EE43B000)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19CD4E338(void *a1, uint64_t a2)
{
  return sub_19CD4E340(a1, a2);
}

uint64_t sub_19CD4E340(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v20[5];

  v20[4] = *(id *)MEMORY[0x1E0C80C00];
  v4 = sub_19CFDEDE0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DiskJetPackResourceBundle();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v20[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_projectBox();
  swift_beginAccess();
  sub_19CD4A5D4(v13, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, *((_QWORD *)v12 + 1) + OBJC_IVAR____TtC9JetEngine33JetPackResourceBundleDiskLocation_url, v4);
  sub_19CD5536C((uint64_t)v12);
  sub_19CFDED8C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v14 = (void *)sub_19CFDF554();
  swift_bridgeObjectRelease();
  v20[0] = 0;
  LODWORD(a1) = objc_msgSend(a1, sel_writeStream_toDirectory_error_, a2, v14, v20);

  v15 = v20[0];
  if (!(_DWORD)a1)
  {
    v16 = v15;
    v17 = (void *)sub_19CFDEC9C();

    swift_willThrow();
  }
  return 1;
}

uint64_t storeEnumTagSinglePayload for MetricsData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_19CD4E618(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2B80);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD4E724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_19CD4E744(a1, *(_QWORD *)(v1 + 40), v1 + ((v3 + 48) & ~v3), v2);
}

uint64_t sub_19CD4E744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v13 = (char *)&v20 - v12;
  v15 = (char *)&v20 + *(int *)(v14 + 48) - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a4 - 8) + 16))((char *)&v20 - v12, a3, a4, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v15, a1, AssociatedTypeWitness);
  Promise.resolve(_:)((uint64_t)v13, v16, v17, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, TupleTypeMetadata2);
}

uint64_t sub_19CD4E850(uint64_t a1)
{
  uint64_t *v1;

  return sub_19CD4E860(a1, v1[5], v1[6], v1[2], v1[3], v1[4]);
}

uint64_t sub_19CD4E860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  _BYTE *v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  void (*v17)(uint64_t (*)(uint64_t), char *, uint64_t (*)(), _QWORD *, _BYTE *, uint64_t, uint64_t);
  _BYTE v20[24];
  ValueMetadata *v21;
  _UNKNOWN **v22;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](a1, a1);
  v13 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, double))(v10 + 16))(v13, v12);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a4;
  *((_QWORD *)v15 + 3) = a5;
  *((_QWORD *)v15 + 4) = a6;
  *((_QWORD *)v15 + 5) = a3;
  (*(void (**)(char *, _BYTE *, uint64_t))(v10 + 32))(&v15[v14], v13, a4);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a3;
  v21 = &type metadata for SyncTaskScheduler;
  v22 = &protocol witness table for SyncTaskScheduler;
  v17 = *(void (**)(uint64_t (*)(uint64_t), char *, uint64_t (*)(), _QWORD *, _BYTE *, uint64_t, uint64_t))(a6 + 16);
  swift_retain_n();
  v17(sub_19CD4E724, v15, sub_19CD180A4, v16, v20, a5, a6);
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
}

_QWORD *sub_19CD4E9B8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, (uint64_t *)&unk_1ECEB19D8, &qword_1ECEB29C0);
}

uint64_t sub_19CD4E9CC(void *a1)
{
  return sub_19CD4E9E8(a1, qword_1ECEB1C80, (uint64_t)&unk_1E3DEE0C8, (uint64_t)sub_19CD1895C);
}

uint64_t sub_19CD4E9E8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  id v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(uint64_t, _QWORD *, uint64_t, uint64_t);
  id v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  __int128 v21;
  char v22;

  v6 = v4;
  sub_19CCF8C5C(v6, (uint64_t)v20, a2);
  v8 = v20[0];
  if ((v22 & 1) != 0)
  {
    **(_QWORD **)(*(_QWORD *)(v20[0] + 64) + 40) = a1;
    v9 = a1;
    return swift_continuation_throwingResume();
  }
  else
  {
    v11 = v20[1];
    swift_release();
    sub_19CCD14C4(&v21, (uint64_t)v17);
    v12 = v18;
    v13 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v8;
    v14[3] = v11;
    v14[4] = a1;
    v15 = *(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v13 + 8);
    v16 = a1;
    swift_retain();
    v15(a4, v14, v12, v13);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  }
}

void sub_19CD4EAF4(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t initializeWithCopy for NetResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = a3[9];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_19CFDEDE0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3030);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[10];
  v15 = a3[11];
  v16 = (_QWORD *)(a1 + v14);
  v17 = (_QWORD *)(a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19CD50688(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD5077C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  id v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  char v17;

  sub_19CCF8C5C(v1, (uint64_t)v15, &qword_1ECEAFFD0);
  v3 = v15[0];
  if ((v17 & 1) != 0)
  {
    **(_QWORD **)(*(_QWORD *)(v15[0] + 64) + 40) = a1;
    v4 = a1;
    return swift_continuation_throwingResume();
  }
  else
  {
    v6 = v15[1];
    swift_release();
    sub_19CCD14C4(&v16, (uint64_t)v12);
    v7 = v13;
    v8 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v3;
    v9[3] = v6;
    v9[4] = a1;
    v10 = *(void (**)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v8 + 8);
    swift_retain();
    v11 = a1;
    v10(sub_19CD1895C, v9, v7, v8);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
}

uint64_t sub_19CD50888(__int128 *a1)
{
  uint64_t v1;

  return sub_19CD50894(a1, *(void (**)(uint64_t *__return_ptr, __int128 *))(v1 + 16));
}

uint64_t sub_19CD50894(__int128 *a1, void (*a2)(uint64_t *__return_ptr, __int128 *))
{
  uint64_t v3[2];
  __int128 v4;

  v4 = *a1;
  a2(v3, &v4);
  sub_19CD1946C(v3[0], v3[1]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *PageRenderMetricsPresenter.init(eventID:topic:pipeline:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  void *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  void (*v37)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _QWORD aBlock[20];

  v6 = v5;
  v55 = a5;
  v48 = a4;
  v47 = a3;
  v54 = sub_19CFDF2D8();
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v9);
  v52 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_19CFDF308();
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v11);
  v49 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for PageRenderMetricsPresenter.State();
  MEMORY[0x1E0C80A78](v46, v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_19CFDFDF4();
  v45 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PageRenderEvent();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[2] = 0x3FF0000000000000;
  swift_bridgeObjectRetain();
  sub_19CD511E0(a1, a2, (uint64_t)v23);
  if (qword_1EE43BB80 != -1)
    swift_once();
  v24 = qword_1EE465C60 + 16;
  v25 = (os_unfair_lock_s *)(qword_1EE465C60 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_1EE465C60 + 40));
  sub_19CD0ED00(v24, a1, a2, 0, 0, 1);
  os_unfair_lock_unlock(v25);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB01C0);
  swift_allocObject();
  v6[5] = sub_19CD51798();
  v6[3] = objc_msgSend(objc_allocWithZone((Class)_JEAtomicFlag), sel_initWithInitialValue_, 1);
  sub_19CCE5204(0, (unint64_t *)&qword_1ECEB0400);
  sub_19CCE5204(0, (unint64_t *)&qword_1ECEB31B0);
  v26 = (void *)sub_19CFDFDB8();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_19CCC5C88(&qword_1ECEB03F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938], MEMORY[0x1E0DEF948]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB03E0);
  sub_19CD09F78((unint64_t *)&unk_1ECEB03E8, &qword_1ECEB03E0);
  sub_19CFE0070();
  v27 = sub_19CFDFE00();

  (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v16);
  v28 = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB0260);
  v29 = (uint64_t)&v15[v28[12]];
  v30 = &v15[v28[16]];
  v31 = v28[20];
  sub_19CCFECEC((uint64_t)v23, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PageRenderEvent);
  sub_19CD50F74(v55, (uint64_t)aBlock);
  v56 = 2;
  sub_19CE2AA78(v47, v48, (uint64_t)aBlock, &v56, 0, v29);
  *v30 = 0;
  *((_QWORD *)v30 + 2) = 0;
  *((_QWORD *)v30 + 3) = 0;
  *((_QWORD *)v30 + 1) = 0;
  *(_QWORD *)&v15[v31] = v27;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0428);
  v32 = swift_allocObject();
  *(_DWORD *)(v32 + ((*(unsigned int *)(*(_QWORD *)v32 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_19CCFECEC((uint64_t)v15, v32 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v32 + 16), (uint64_t (*)(_QWORD))type metadata accessor for PageRenderMetricsPresenter.State);
  v6[4] = v32;
  v33 = qword_1EE43C258;
  swift_unknownObjectRetain();
  v34 = (uint64_t)v23;
  if (v33 != -1)
    swift_once();
  if (qword_1EE465C70)
  {
    v35 = qword_1EE465C78;
    ObjectType = swift_getObjectType();
    v37 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v35 + 16);
    v38 = swift_retain();
    v37(v38, &protocol witness table for PageRenderMetricsPresenter, ObjectType, v35);
    swift_release();
  }
  swift_getObjectType();
  v39 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_19CE2F7A8;
  aBlock[5] = v39;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19CD0C78C;
  aBlock[3] = &block_descriptor_8;
  v40 = _Block_copy(aBlock);
  swift_retain();
  v41 = v49;
  sub_19CFDF2F0();
  v42 = v52;
  sub_19CD51134();
  sub_19CFDFE3C();
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v54);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v41, v51);
  swift_release();
  swift_release();
  sub_19CFDFE54();
  swift_unknownObjectRelease();
  sub_19CD510B0(v55);
  sub_19CCEACE4((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PageRenderMetricsPresenter.State);
  sub_19CCEACE4(v34, (uint64_t (*)(_QWORD))type metadata accessor for PageRenderEvent);
  return v6;
}

uint64_t sub_19CD50F74(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MetricsPipeline(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for MetricsPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2 + 32;
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 32, v5, v7);
  v9 = (_OWORD *)(a1 + 72);
  v10 = (_OWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 96);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 88);
    *v9 = *v10;
    *(_OWORD *)(a1 + 88) = v13;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 112, a2 + 112);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v15;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_19CD510B0(uint64_t a1)
{
  destroy for MetricsPipeline(a1);
  return a1;
}

uint64_t destroy for MetricsPipeline(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
  if (*(_QWORD *)(a1 + 96))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 72);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 112);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_19CD51134()
{
  sub_19CFDF2D8();
  sub_19CCC5C88(qword_1ECEB3100, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB3198);
  sub_19CD09F78((unint64_t *)&qword_1ECEB31A0, &qword_1ECEB3198);
  return sub_19CFE0070();
}

uint64_t sub_19CD511E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  timespec v17;
  BOOL v18;
  double v19;
  double v20;
  uint64_t result;
  _QWORD *v22;
  timespec v23;

  v6 = type metadata accessor for MonotonicTimeReference();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v23 - v12;
  v14 = type metadata accessor for PageRenderEvent();
  *(_QWORD *)(a3 + *(int *)(v14 + 20)) = 0;
  if (qword_1ECEB0250 != -1)
    swift_once();
  v15 = (void *)qword_1ECEB0240;
  objc_msgSend((id)qword_1ECEB0240, sel_lock);
  if (qword_1ECEB0238 != -1)
    swift_once();
  v16 = xmmword_1ECEB0148;
  objc_msgSend(v15, sel_unlock);
  sub_19CFDEF78();
  static MonotonicTime.now.getter(&v23);
  v17 = v23;
  *(timespec *)&v13[*(int *)(v6 + 20)] = v23;
  v18 = (uint64_t)v16 < v17.tv_sec;
  if ((_QWORD)v16 == v17.tv_sec)
    v18 = *((_QWORD *)&v16 + 1) < v17.tv_nsec;
  if (v18)
  {
    if (qword_1ECEB2F88 != -1)
      swift_once();
    v19 = (double)v17.tv_nsec / *(double *)&qword_1ECEB2D50 + (double)v17.tv_sec;
    v20 = v19 - ((double)*((uint64_t *)&v16 + 1) / *(double *)&qword_1ECEB2D50 + (double)(uint64_t)v16);
    sub_19CFDEF30();
    MonotonicTime.init(timeInterval:)(v19 - v20);
    *(timespec *)&v9[*(int *)(v6 + 20)] = v23;
    sub_19CD17A60((uint64_t)v13);
    sub_19CD513F8((uint64_t)v9, (uint64_t)v13);
  }
  result = sub_19CD513F8((uint64_t)v13, a3);
  v22 = (_QWORD *)(a3 + *(int *)(v14 + 24));
  *v22 = a1;
  v22[1] = a2;
  return result;
}

uint64_t sub_19CD513F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MonotonicTimeReference();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

JetEngine::MonotonicTime __swiftcall MonotonicTime.init(timeInterval:)(Swift::Double timeInterval)
{
  _QWORD *v1;
  double v2;
  _QWORD *v4;
  double v5;
  Swift::Int v6;
  Swift::Int v7;
  JetEngine::MonotonicTime result;

  v4 = v1;
  if ((~*(_QWORD *)&timeInterval & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (timeInterval <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (timeInterval < 9.22337204e18)
  {
    v2 = timeInterval - trunc(timeInterval);
    if (qword_1ECEB2F88 == -1)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  v6 = swift_once();
LABEL_5:
  v5 = round(v2 * *(double *)&qword_1ECEB2D50);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *v4 = (uint64_t)timeInterval;
  v4[1] = (uint64_t)v5;
LABEL_16:
  result.nanoseconds = v7;
  result.seconds = v6;
  return result;
}

uint64_t sub_19CD51530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v1 = sub_19CFDFDAC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_19CFDF308();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = sub_19CFDFD88();
  MEMORY[0x1E0C80A78](v8, v9);
  sub_19CD48F8C();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB2F40);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_19D0522A0;
  sub_19CFDFD7C();
  v14[1] = v10;
  sub_19CD51704();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB3050);
  sub_19CD5174C();
  sub_19CFE0070();
  sub_19CFDF2F0();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0DEF8D0], v1);
  v11 = sub_19CFDFDDC();
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = v11;
  *(_QWORD *)(v0 + 24) = v12;
  return v0;
}

unint64_t sub_19CD51704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECEB3068[0];
  if (!qword_1ECEB3068[0])
  {
    v1 = sub_19CFDFD88();
    result = MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, qword_1ECEB3068);
  }
  return result;
}

unint64_t sub_19CD5174C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECEB3058;
  if (!qword_1ECEB3058)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECEB3050);
    result = MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ECEB3058);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PageIntentInstrumentation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v7 = sub_19CFDEF84();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for MonotonicTimeReference();
    *(_OWORD *)((char *)a1 + *(int *)(v8 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v8 + 20));
    v9 = type metadata accessor for PageRenderEvent();
    v10 = *(int *)(v9 + 20);
    v11 = *(void **)((char *)a2 + v10);
    v12 = v11;
    *(uint64_t *)((char *)a1 + v10) = (uint64_t)v11;
    v13 = *(int *)(v9 + 24);
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_19CD51928(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[5];
  v6 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v5);
  v8 = *a1;
  return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(&v8, v3, v4, v5, v6);
}

void *sub_19CD519B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CompoundTreatmentFilter.treat(_:on:)(*(JetEngine::LintedMetricsEvent *)&a1, *(Swift::String_optional *)&a3).fields._rawValue;
}

JetEngine::LintedMetricsEvent __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CompoundTreatmentFilter.treat(_:on:)(JetEngine::LintedMetricsEvent _, Swift::String_optional on)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *rawValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  JetEngine::LintedMetricsEvent result;
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t countAndFlagsBits;

  v5 = v4;
  countAndFlagsBits = on.value._countAndFlagsBits;
  v6 = v2;
  v7 = *(_QWORD *)_.fields._rawValue;
  v8 = *((_QWORD *)_.fields._rawValue + 1);
  v9 = *v3;
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    rawValue = _.issues._rawValue;
    v18 = v2;
    v12 = v9 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_19CCD5B84(v12, (uint64_t)v21);
      v13 = v22;
      v14 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      v19[0] = v7;
      v19[1] = v8;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, void *, uint64_t, uint64_t, uint64_t))(v14 + 8))(v20, v19, rawValue, countAndFlagsBits, v13, v14);
      if (v5)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v20[0];
      v8 = v20[1];
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
      v12 += 40;
      if (!--v10)
      {
        v15 = (void *)swift_bridgeObjectRelease();
        v6 = v18;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = (void *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  }
  else
  {
    swift_bridgeObjectRetain();
    v15 = (void *)swift_bridgeObjectRetain();
LABEL_7:
    *v6 = v7;
    v6[1] = v8;
  }
  result.issues._rawValue = v16;
  result.fields._rawValue = v15;
  return result;
}

uint64_t destroy for SentryRequest()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s9JetEngine28AllowedFieldsTreatmentFilterV10DefinitionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_19CD51B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AllowedFieldsTreatmentFilter.treat(_:on:)(*(JetEngine::LintedMetricsEvent *)&a1, *(Swift::String_optional *)&a3).fields._rawValue;
}

JetEngine::LintedMetricsEvent __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AllowedFieldsTreatmentFilter.treat(_:on:)(JetEngine::LintedMetricsEvent _, Swift::String_optional on)
{
  _QWORD *v2;
  unint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  _OWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  void *v37;
  JetEngine::LintedMetricsEvent result;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = v2;
  v6 = *(_QWORD *)_.fields._rawValue;
  v5 = *((_QWORD *)_.fields._rawValue + 1);
  if (!*(_QWORD *)(*(_QWORD *)_.fields._rawValue + 16))
    goto LABEL_27;
  v7 = *v3;
  v8 = v3[1];
  v41 = v3[2];
  v9 = sub_19CD3FD1C(0x707954746E657665, 0xE900000000000065);
  if ((v10 & 1) == 0)
    goto LABEL_27;
  sub_19CD436B0(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v44);
  v11 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_27;
  v42 = v6;
  if (v43[0] != __PAIR128__(v8, v7) && (sub_19CFE06A0() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_27:
    *v4 = v6;
    v4[1] = v5;
    swift_bridgeObjectRetain();
    goto LABEL_28;
  }
  v40 = v4;
  v45 = v11;
  v44 = v43[0];
  sub_19CD433C0(&v44, v43);
  v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v46 = v12;
  sub_19CD13D40(v43, 0x707954746E657665, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  v14 = v46;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v41 + 16);
  if (!v15)
  {
LABEL_25:
    *v40 = v14;
    v40[1] = v5;
LABEL_28:
    v36 = (void *)swift_bridgeObjectRetain();
    goto LABEL_32;
  }
  v39 = v5;
  v16 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v17 = v6;
  while (1)
  {
    if (!*(_QWORD *)(v17 + 16))
      goto LABEL_9;
    v19 = *(v16 - 1);
    v18 = *v16;
    swift_bridgeObjectRetain();
    v20 = sub_19CD3FD1C(v19, v18);
    if ((v21 & 1) != 0)
      break;
    swift_bridgeObjectRelease();
LABEL_9:
    v16 += 2;
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      v5 = v39;
      goto LABEL_25;
    }
  }
  sub_19CD436B0(*(_QWORD *)(v17 + 56) + 32 * v20, (uint64_t)v43);
  sub_19CD433C0(v43, &v44);
  sub_19CD436B0((uint64_t)&v44, (uint64_t)v43);
  v22 = swift_isUniquelyReferenced_nonNull_native();
  v46 = v14;
  v24 = sub_19CD3FD1C(v19, v18);
  v25 = v14[2];
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (!__OFADD__(v25, v26))
  {
    v28 = v23;
    if (v14[3] >= v27)
    {
      if ((v22 & 1) != 0)
      {
        v14 = v46;
        if ((v23 & 1) == 0)
          goto LABEL_21;
      }
      else
      {
        sub_19CD141BC();
        v14 = v46;
        if ((v28 & 1) == 0)
          goto LABEL_21;
      }
    }
    else
    {
      sub_19CD13ED8(v27, v22);
      v29 = sub_19CD3FD1C(v19, v18);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_31;
      v24 = v29;
      v14 = v46;
      if ((v28 & 1) == 0)
      {
LABEL_21:
        v14[(v24 >> 6) + 8] |= 1 << v24;
        v32 = (uint64_t *)(v14[6] + 16 * v24);
        *v32 = v19;
        v32[1] = v18;
        sub_19CD433C0(v43, (_OWORD *)(v14[7] + 32 * v24));
        v33 = v14[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
          goto LABEL_30;
        v14[2] = v35;
        swift_bridgeObjectRetain();
        goto LABEL_23;
      }
    }
    v31 = (_OWORD *)(v14[7] + 32 * v24);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    sub_19CD433C0(v43, v31);
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v44);
    v17 = v42;
    goto LABEL_9;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  v36 = (void *)sub_19CFE082C();
  __break(1u);
LABEL_32:
  result.issues._rawValue = v37;
  result.fields._rawValue = v36;
  return result;
}

void sub_19CD51EE4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_19CD51EF8(a1, a2, a3, a4);
}

void sub_19CD51EF8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v25;
  _QWORD v26[4];

  if (!a3)
  {
    sub_19CDC2424();
    swift_allocError();
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
LABEL_11:
    *(_BYTE *)(v21 + 16) = 5;
    swift_willThrow();
    return;
  }
  v7 = *a1;
  v8 = a1[1];
  v9 = *v4;
  v26[0] = *v4;
  swift_unknownObjectRetain();
  v10 = sub_19CD52A88(0xD000000000000011, 0x800000019D078CD0, a2, a3);
  swift_unknownObjectRelease();
  if (!v10)
    goto LABEL_13;
  v26[0] = v9;
  swift_unknownObjectRetain();
  sub_19CD52404(0xD000000000000018, 0x800000019D078CF0, a2, a3);
  v12 = v11;
  swift_unknownObjectRelease();
  if (!v12)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    *a4 = v7;
    a4[1] = v8;
    swift_bridgeObjectRetain();
LABEL_16:
    swift_bridgeObjectRetain();
    return;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_19CF84CB0(v12, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    *a4 = v7;
    a4[1] = v8;
    goto LABEL_16;
  }
  v23 = v8;
  v25 = (id)objc_opt_self();
  v15 = v13 + 32;
  while (1)
  {
    sub_19CD436B0(v15, (uint64_t)v26);
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    swift_bridgeObjectRetain();
    v16 = sub_19CFE0688();
    v17 = (void *)sub_19CFDF554();
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v25, sel_treatmentProfileWithConfiguration_topic_, v16, v17);
    swift_unknownObjectRelease();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    if (!v18)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19CDC2424();
      swift_allocError();
      *(_OWORD *)v21 = xmmword_19D04BBA0;
      goto LABEL_11;
    }
    v19 = (void *)sub_19CFDF3B0();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v18, sel_performTreatments_, v19);

    if (!v20)
      break;
    v7 = sub_19CFDF3C8();

    v15 += 32;
    if (!--v14)
    {
      swift_bridgeObjectRelease();
      v8 = v23;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  sub_19CDC2424();
  swift_allocError();
  *(_OWORD *)v22 = xmmword_19D053D40;
  *(_BYTE *)(v22 + 16) = 5;
  swift_willThrow();

}

uint64_t sub_19CD5227C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19CD52298(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19CD52298(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2BA0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

void sub_19CD52404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;

  v5 = *v4;
  v6 = sub_19CD52C60(a1, a2, a3, a4);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_unknownObjectRetain();
    v8 = 0;
    while (1)
    {
      v9 = v6 + 8 * v8;
      v14 = *(id *)(v9 + 32);
      v10 = v14;
      swift_bridgeObjectRetain();
      v11 = v10;
      sub_19CD5251C((uint64_t *)&v14, v5, &v15);
      swift_bridgeObjectRelease();

      v12 = v15;
      swift_bridgeObjectRelease();
      if (v12)
        break;
      if (v7 == ++v8)
        goto LABEL_10;
    }
    if (v7 == v8)
    {
LABEL_10:
      swift_unknownObjectRelease();
      goto LABEL_11;
    }
    if (v8 >= *(_QWORD *)(v6 + 16))
    {
      __break(1u);
    }
    else
    {
      v14 = *(id *)(v9 + 32);
      v13 = v14;
      sub_19CD5251C((uint64_t *)&v14, v5, &v15);

      if (v15)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_19CD5251C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  id v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  Swift::String v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t result;
  __int128 v34;
  __int128 v35;
  _BYTE v36[32];
  __int128 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;

  v5 = *a1;
  swift_unknownObjectRetain();
  v6 = objc_msgSend(a2, sel_arrayForKey_, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1B78);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v6;
  v7[3] = sub_19CD042B4;
  v7[4] = 0;
  swift_unknownObjectRelease();
  if (qword_1EE43BE78 != -1)
    swift_once();
  v8 = (void *)qword_1EE43BE68;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB31C0);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_19D0522A0;
  v10 = v8;
  v42 = sub_19CD40918(0, 27, 0, MEMORY[0x1E0DEE9D8]);
  v11._object = (void *)0x800000019D076A50;
  v11._countAndFlagsBits = 0xD00000000000001ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  *((_QWORD *)&v41 + 1) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE43BBB0);
  *(_QWORD *)&v40 = v7;
  sub_19CD40794((uint64_t)&v40, (uint64_t)v36);
  v34 = 0u;
  v35 = 0u;
  swift_retain();
  sub_19CD40658((uint64_t)v36, (uint64_t)&v34);
  v39 = 0;
  v37 = v34;
  v38 = v35;
  v12 = v42;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = sub_19CD40918(0, v12[2] + 1, 1, v12);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = sub_19CD40918((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[5 * v14];
  v16 = v37;
  v17 = v38;
  *((_BYTE *)v15 + 64) = v39;
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  v42 = v12;
  sub_19CD3F190((uint64_t)&v40);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  *(_QWORD *)(v9 + 32) = v42;
  *(_QWORD *)&v37 = v10;
  LOBYTE(v34) = 3;
  OSLogger.log(contentsOf:withLevel:)((Swift::OpaquePointer)v9, (JetEngine::LogMessageLevel)&v34);

  swift_bridgeObjectRelease();
  v19 = sub_19CD52A84(v7);
  v20 = (void *)qword_1EE43BE68;
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_19D0522A0;
  v22 = v20;
  v42 = sub_19CD40918(0, 38, 0, MEMORY[0x1E0DEE9D8]);
  v23._countAndFlagsBits = 0xD000000000000025;
  v23._object = (void *)0x800000019D076A70;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  if (v19)
  {
    *((_QWORD *)&v41 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0758);
    *(_QWORD *)&v40 = v19;
    v24 = v19;
  }
  else
  {
    v24 = 0;
    v40 = 0u;
    v41 = 0u;
  }
  sub_19CD40794((uint64_t)&v40, (uint64_t)v36);
  v34 = 0u;
  v35 = 0u;
  swift_bridgeObjectRetain();
  sub_19CD40658((uint64_t)v36, (uint64_t)&v34);
  v39 = 0;
  v37 = v34;
  v38 = v35;
  v25 = v42;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v25 = sub_19CD40918(0, v25[2] + 1, 1, v25);
  v27 = v25[2];
  v26 = v25[3];
  if (v27 >= v26 >> 1)
    v25 = sub_19CD40918((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
  v25[2] = v27 + 1;
  v28 = &v25[5 * v27];
  v29 = v37;
  v30 = v38;
  *((_BYTE *)v28 + 64) = v39;
  *((_OWORD *)v28 + 2) = v29;
  *((_OWORD *)v28 + 3) = v30;
  v42 = v25;
  sub_19CD3F190((uint64_t)&v40);
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  *(_QWORD *)(v21 + 32) = v42;
  *(_QWORD *)&v37 = v22;
  LOBYTE(v34) = 3;
  OSLogger.log(contentsOf:withLevel:)((Swift::OpaquePointer)v21, (JetEngine::LogMessageLevel)&v34);

  swift_bridgeObjectRelease();
  if (v19)
  {
    v32 = sub_19CD52940(v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = 0;
  }
  result = swift_release();
  *a3 = v32;
  return result;
}

uint64_t sub_19CD52940(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  sub_19CD3C8F8(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_19CD436B0(i, (uint64_t)v11);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19CD3C8F8(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_19CD3C8F8(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = v3 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_19CD52A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  _QWORD *v20;

  v5 = *v4;
  v6 = sub_19CD52C60(a1, a2, a3, a4);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_unknownObjectRetain();
    v8 = 0;
    while (1)
    {
      v9 = v6 + 8 * v8;
      v10 = *(void **)(v9 + 32);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v11 = v10;
      v12 = objc_msgSend(v5, sel_dictionaryForKey_, v11);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1FF0);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v12;
      v13[3] = sub_19CD04508;
      v13[4] = 0;
      swift_unknownObjectRelease();
      v14 = sub_19CD2CC30((uint64_t)v13);
      swift_bridgeObjectRelease();

      swift_release();
      result = swift_bridgeObjectRelease();
      if (v14)
        break;
      if (v7 == ++v8)
        goto LABEL_8;
    }
    if (v7 == v8)
    {
LABEL_8:
      v16 = 0;
LABEL_11:
      swift_unknownObjectRelease();
      goto LABEL_12;
    }
    if (v8 >= *(_QWORD *)(v6 + 16))
    {
      __break(1u);
    }
    else
    {
      v17 = *(void **)(v9 + 32);
      swift_unknownObjectRetain();
      v18 = v17;
      v19 = objc_msgSend(v5, sel_dictionaryForKey_, v18);
      v20 = (_QWORD *)swift_allocObject();
      v20[2] = v19;
      v20[3] = sub_19CD04508;
      v20[4] = 0;
      swift_unknownObjectRelease();
      v16 = sub_19CD2CC30((uint64_t)v20);

      result = swift_release();
      if (v16)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    v16 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v16;
  }
  return result;
}

uint64_t sub_19CD52C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;

  sub_19CFDF698();
  v5 = sub_19CFDF554();
  swift_bridgeObjectRelease();
  if (a4)
  {
    sub_19CFDF698();
    sub_19CFDF698();
    sub_19CFDF698();
    v6 = sub_19CFDF554();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0858);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_19D052350;
    *(_QWORD *)(result + 32) = v6;
    v8 = (uint64_t *)(result + 40);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0858);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_19D0522A0;
    v8 = (uint64_t *)(result + 32);
  }
  *v8 = v5;
  return result;
}

id JEGestaltGetTotalSystemCapacity()
{
  void *v0;
  void *v1;
  id v2;

  JEGestaltDiskUsageForKey(*MEMORY[0x1E0DE2CD0]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (!v0)
    v0 = &unk_1E3DFBE10;
  v2 = v0;

  return v2;
}

id JEGestaltGetTotalSystemAvailable()
{
  void *v0;
  void *v1;
  id v2;

  JEGestaltDiskUsageForKey(*MEMORY[0x1E0DE2CC8]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (!v0)
    v0 = &unk_1E3DFBE10;
  v2 = v0;

  return v2;
}

id JEGestaltGetTotalDiskCapacity()
{
  void *v0;
  void *v1;
  id v2;

  JEGestaltDiskUsageForKey(*MEMORY[0x1E0DE2CC0]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (!v0)
    v0 = &unk_1E3DFBE28;
  v2 = v0;

  return v2;
}

id JEGestaltGetTotalDataCapacity()
{
  void *v0;
  void *v1;
  id v2;

  JEGestaltDiskUsageForKey(*MEMORY[0x1E0DE2CB8]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (!v0)
    v0 = &unk_1E3DFBE10;
  v2 = v0;

  return v2;
}

id JEGestaltGetTotalDataAvailable()
{
  void *v0;
  void *v1;
  id v2;

  JEGestaltDiskUsageForKey(*MEMORY[0x1E0DE2CB0]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (!v0)
    v0 = &unk_1E3DFBE10;
  v2 = v0;

  return v2;
}

id JEGestaltDiskUsageForKey(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)MGCopyAnswer();
  objc_msgSend(v2, "objectForKey:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

double JEGestaltGetProcessLaunchTimeInterval()
{
  return *(double *)&gProcessLaunchTimeInterval;
}

double JEGestaltGetMainScreenSize()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  double v5;

  v0 = (void *)MGCopyAnswer();
  v1 = v0;
  if (v0
    && (v2 = objc_retainAutorelease(v0), v3 = objc_msgSend(v2, "bytes"), v4 = objc_msgSend(v2, "length"), v4 >= 0x10))
  {
    v5 = *(double *)((v4 & 0xFFFFFFFFFFFFFFF0) + v3 - 16);
  }
  else
  {
    v5 = (double)(int)MGGetSInt32Answer();
    MGGetSInt32Answer();
  }

  return v5;
}

double JEGestaltGetMainScreenScale()
{
  float v0;

  MGGetFloat32Answer();
  return v0;
}

_QWORD *sub_19CD53358(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, qword_1EE43A720, &qword_1ECEAFFD0);
}

_QWORD *sub_19CD5336C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, (uint64_t *)&unk_1ECEB1308, (uint64_t *)&unk_1ECEB1290);
}

_QWORD *sub_19CD53380(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, (uint64_t *)&unk_1ECEB12F8, (uint64_t *)&unk_1ECEB1280);
}

char *sub_19CD53394(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_19CFE03C4();
  __break(1u);
  return result;
}

void *sub_19CD5347C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_19CFE00DC();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v14)
      goto LABEL_28;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_28;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
      {
        v10 = v21 + 2;
        if (v21 + 2 >= v14)
          goto LABEL_28;
        v22 = *(_QWORD *)(v7 + 8 * v10);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    v19 = v18[1];
    v20 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v20 = *v18;
    v20[1] = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 3;
  if (v23 >= v14)
    goto LABEL_28;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

double sub_19CD53624@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  double result;
  uint64_t v11;
  _BYTE v12[24];
  __int128 v13;
  char v14;
  __int128 v15;
  double v16[3];

  sub_19CCF8C5C(a1, (uint64_t)&v13, &qword_1ECEB1328);
  v6 = v15;
  if ((_QWORD)v15)
  {
    v7 = *((_QWORD *)&v15 + 1);
    __swift_project_boxed_opaque_existential_1(&v13, v15);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 104))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v13);
    if ((v8 & 1) == 0)
    {
      sub_19CD3E448(a1, (uint64_t)v12);
      v11 = a2;
      swift_bridgeObjectRetain();
      PageMetrics.Instruction.init(deserializing:using:)((uint64_t)v12, &v11, (uint64_t)&v13);
      sub_19CD3E3F8(a1);
      swift_bridgeObjectRelease();
      v9 = v14;
      *(_OWORD *)a3 = v13;
      *(_BYTE *)(a3 + 16) = v9;
      *(_OWORD *)(a3 + 24) = v15;
      result = v16[0];
      *(_OWORD *)(a3 + 40) = *(_OWORD *)v16;
      return result;
    }
  }
  else
  {
    sub_19CCECFE4((uint64_t)&v13, &qword_1ECEB1328);
  }
  sub_19CD3E3F8(a1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

uint64_t PageMetrics.Instruction.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[40];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *a2;
  JSONObject.subscript.getter(1635017060, 0xE400000000000000, (uint64_t)v28);
  *(_QWORD *)&v25 = v6;
  MetricsData.init(deserializing:using:)((uint64_t)v28, (uint64_t *)&v25, (uint64_t)&v29);
  if (!v3)
  {
    v33 = *((_QWORD *)&v29 + 1);
    v20 = v29;
    v19 = v30;
    v7 = v31;
    v21 = *((_QWORD *)&v30 + 1);
    v8 = v32;
    JSONObject.subscript.getter(0xD000000000000010, 0x800000019D06C820, (uint64_t)v28);
    sub_19CCF8C5C((uint64_t)v28, (uint64_t)v22, &qword_1ECEB1328);
    v9 = v23;
    if (v23)
    {
      v10 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 120))(&v25, v9, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
      v11 = *((_QWORD *)&v26 + 1);
      sub_19CD3E3F8((uint64_t)v28);
      if (v11)
      {
        v29 = v25;
        v30 = v26;
        v12 = v27;
        v31 = v27;
        v13 = *((_QWORD *)&v26 + 1);
        __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v26 + 1));
        v14 = (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), _QWORD, ValueMetadata *, uint64_t, uint64_t))(v12 + 56))(sub_19CE05258, 0, &type metadata for PageMetrics.InvocationPoint, v13, v12);
        v15 = sub_19CD4275C(v14, (void (*)(void))sub_19CD4D97C, (uint64_t)&type metadata for PageMetrics.InvocationPoint, (void (*)(_BYTE *, uint64_t, uint64_t))sub_19CD4AD00);
        swift_bridgeObjectRelease();
        sub_19CD3E3F8(a1);
        result = sub_19CE07F20((uint64_t)&v29);
        v17 = v33;
        *(_QWORD *)a3 = v20;
        *(_QWORD *)(a3 + 8) = v17;
        *(_BYTE *)(a3 + 16) = v19;
        *(_QWORD *)(a3 + 24) = v21;
        *(_QWORD *)(a3 + 32) = v7;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)(a3 + 48) = v15;
        return result;
      }
    }
    else
    {
      sub_19CCECFE4((uint64_t)v22, &qword_1ECEB1328);
      v25 = 0u;
      v26 = 0u;
      v27 = 0;
      sub_19CD3E3F8((uint64_t)v28);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_19CCECFE4((uint64_t)&v25, &qword_1EE43D068);
    sub_19CDC5494();
    swift_allocError();
    *v18 = 0xD000000000000010;
    v18[1] = 0x800000019D06C820;
    v18[2] = 0x20000001E3DC9B08uLL;
    v18[3] = 0;
    swift_willThrow();
  }
  return sub_19CD3E3F8(a1);
}

_QWORD *sub_19CD53AAC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43CDB0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_19CD53BD4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CD53BD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD53CC8()
{
  return sub_19CD45B20((uint64_t (*)(_QWORD))type metadata accessor for InMemoryJetPackResourceBundle);
}

uint64_t sub_19CD53CD4(_QWORD *a1)
{
  uint64_t v1;

  return sub_19CD53CE0(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_19CD53CE0(_QWORD *a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  void *v5;
  id v6;

  v5 = (void *)*a1;
  if (a2)
    a2(*a1);
  **(_QWORD **)(*(_QWORD *)(a4 + 64) + 40) = v5;
  v6 = v5;
  return swift_continuation_throwingResume();
}

uint64_t storeEnumTagSinglePayload for JSManagedSourceProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_19CD53D7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return MetricsData.init(deserializing:using:)(a1, a2, a3);
}

void sub_19CD53D90(uint64_t a1)
{
  uint64_t v1;

  sub_19CD53D98(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_19CD53D98(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  sub_19CD5407C(a2);
  if (a3)
  {
    v7 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2BA0);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_19D0522A0;
    *(_QWORD *)(v5 + 56) = sub_19CCE5204(0, (unint64_t *)&qword_1ECEB2900);
    *(_QWORD *)(v5 + 32) = v7;
    v8 = v7;
    v6 = (void *)sub_19CFDF854();
    swift_bridgeObjectRelease();

    v4 = v8;
  }

}

void sub_19CD5407C(void *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3030);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_19CFDEDE0();
  v9 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v10);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_valueWithNewObjectInContext_, a1);
  if (!v14)
    goto LABEL_22;
  v15 = v14;
  v16 = objc_msgSend(v13, sel_valueWithBool_inContext_, *v3, a1);
  if (!v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v17 = v16;
  v18 = (void *)sub_19CFDF554();
  objc_msgSend(v15, sel_setValue_forProperty_, v17, v18);

  v19 = *((_QWORD *)v3 + 1);
  if (v19 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v19 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v59 = v9;
  v20 = objc_msgSend(v13, sel_valueWithInt32_inContext_);
  if (!v20)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v21 = v20;
  v22 = (void *)sub_19CFDF554();
  objc_msgSend(v15, sel_setValue_forProperty_, v21, v22);

  v23 = *((_QWORD *)v3 + 3);
  v61 = *((_QWORD *)v3 + 2);
  v62 = v23;
  swift_bridgeObjectRetain();
  v24 = a1;
  v25 = objc_msgSend(v13, sel_valueWithObject_inContext_, sub_19CFE0808(), v24);
  swift_unknownObjectRelease();

  if (!v25)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v26 = v25;
  v27 = (void *)sub_19CFDF554();
  objc_msgSend(v15, sel_setValue_forProperty_, v26, v27);

  v61 = *((_QWORD *)v3 + 4);
  v28 = v24;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0750);
  v29 = objc_msgSend(v13, sel_valueWithObject_inContext_, sub_19CFE0808(), v28);
  swift_unknownObjectRelease();

  if (!v29)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v30 = v29;
  v31 = (void *)sub_19CFDF554();
  objc_msgSend(v15, sel_setValue_forProperty_, v30, v31);

  v32 = v3[40];
  v60 = v13;
  v33 = objc_msgSend(v13, sel_valueWithBool_inContext_, v32, v28);
  if (!v33)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v34 = v33;
  v35 = (void *)sub_19CFDF554();
  objc_msgSend(v15, sel_setValue_forProperty_, v34, v35);

  v36 = type metadata accessor for NetResponse();
  sub_19CD3BB88((uint64_t)&v3[*(int *)(v36 + 36)], (uint64_t)v8);
  v37 = v59;
  v38 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v8, 1, v63) == 1)
  {
    sub_19CD3BBD0((uint64_t)v8);
    v39 = &selRef_removeObserver_;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v12, v8, v38);
    v61 = sub_19CFDECFC();
    v62 = v40;
    v41 = v28;
    v42 = objc_msgSend(v60, sel_valueWithObject_inContext_, sub_19CFE0808(), v41);
    swift_unknownObjectRelease();

    if (!v42)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v43 = v42;
    v44 = (void *)sub_19CFDF554();
    v39 = &selRef_removeObserver_;
    objc_msgSend(v15, sel_setValue_forProperty_, v43, v44);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v63);
  }
  v45 = (uint64_t *)&v3[*(int *)(v36 + 40)];
  v46 = v45[1];
  if (!v46)
    goto LABEL_16;
  v61 = *v45;
  v62 = v46;
  v47 = v28;
  swift_bridgeObjectRetain();
  v48 = objc_msgSend(v60, sel_valueWithObject_inContext_, sub_19CFE0808(), v47);
  swift_unknownObjectRelease();

  if (!v48)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v49 = v48;
  v50 = (void *)sub_19CFDF554();
  objc_msgSend(v15, v39[4], v49, v50);

LABEL_16:
  v51 = v28;
  v52 = swift_bridgeObjectRetain();
  v53 = sub_19CEB33D4(v52, v51);
  swift_bridgeObjectRelease();
  if (v2)
  {

    return;
  }

  v61 = v53;
  v54 = v51;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43CD80);
  v55 = objc_msgSend(v60, sel_valueWithObject_inContext_, sub_19CFE0808(), v54);
  swift_unknownObjectRelease();

  if (v55)
  {
    v56 = v55;
    v57 = (void *)sub_19CFDF554();
    objc_msgSend(v15, v39[4], v56, v57);

    return;
  }
LABEL_30:
  __break(1u);
}

uint64_t kBucketItemComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("start"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("start"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "compare:", v6);
  return v7;
}

uint64_t sub_19CD54C1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  unsigned int v44;
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  void *v61;
  unsigned __int8 v62;
  id v63;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int *v71;
  char *v72;
  void (*v73)(char *, unint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  _QWORD aBlock[6];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;

  v69 = (uint64_t *)a5;
  LODWORD(v73) = a4;
  v75 = (char *)a3;
  v66 = a6;
  v81 = *MEMORY[0x1E0C80C00];
  v71 = (int *)type metadata accessor for DiskJetPackResourceBundle();
  MEMORY[0x1E0C80A78](v71, v9);
  v11 = (unint64_t *)((char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_19CFDEDE0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v72 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v66 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3030);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v66 - v26;
  v68 = *a1;
  sub_19CCD5B84(a2, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F78);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F80);
  v28 = swift_dynamicCast();
  v67 = v6;
  if ((v28 & 1) != 0)
  {
    v30 = *((_QWORD *)&v78 + 1);
    v29 = v79;
    __swift_project_boxed_opaque_existential_1(&v77, *((uint64_t *)&v78 + 1));
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v77);
  }
  else
  {
    *(_QWORD *)&v79 = 0;
    v77 = 0u;
    v78 = 0u;
    sub_19CCECFE4((uint64_t)&v77, (uint64_t *)&unk_1EE43CAE0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v27, 1, 1, v12);
  }
  v31 = v71;
  v74 = swift_allocBox();
  v70 = v32;
  v33 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v33(v19, v75, v12);
  v75 = v27;
  sub_19CCF8C5C((uint64_t)v27, (uint64_t)v23, (uint64_t *)&unk_1ECEB3030);
  *v11 = sub_19CCD3DDC(MEMORY[0x1E0DEE9D8]);
  sub_19CCF8C5C((uint64_t)v23, (uint64_t)v11 + v31[6], (uint64_t *)&unk_1ECEB3030);
  v34 = v72;
  v33(v72, v19, v12);
  type metadata accessor for JetPackResourceBundleDiskLocation();
  swift_allocObject();
  v35 = sub_19CCE0CF4(v34, v73 & 1);
  sub_19CCECFE4((uint64_t)v23, (uint64_t *)&unk_1ECEB3030);
  v36 = v12;
  v37 = *(void (**)(char *, uint64_t))(v13 + 8);
  v37(v19, v36);
  v11[1] = v35;
  v38 = v70;
  sub_19CD61DA8((uint64_t)v11, v70);
  v71 = (int *)objc_opt_self();
  v39 = objc_msgSend(v71, sel_defaultManager);
  sub_19CD4A5D4(v38, (uint64_t)v11);
  v40 = v11[1] + OBJC_IVAR____TtC9JetEngine33JetPackResourceBundleDiskLocation_url;
  v73 = (void (*)(char *, unint64_t, uint64_t))v33;
  v33(v19, (char *)v40, v36);
  sub_19CD5536C((uint64_t)v11);
  sub_19CFDED8C();
  v72 = (char *)v37;
  v37(v19, v36);
  v41 = (void *)sub_19CFDF554();
  swift_bridgeObjectRelease();
  LOBYTE(v34) = objc_msgSend(v39, sel_fileExistsAtPath_, v41);

  if ((v34 & 1) != 0)
    goto LABEL_6;
  v42 = objc_msgSend(v71, sel_defaultManager, v66);
  sub_19CD4A5D4(v38, (uint64_t)v11);
  v73(v19, v11[1] + OBJC_IVAR____TtC9JetEngine33JetPackResourceBundleDiskLocation_url, v36);
  sub_19CD5536C((uint64_t)v11);
  v43 = (void *)sub_19CFDED2C();
  ((void (*)(char *, uint64_t))v72)(v19, v36);
  *(_QWORD *)&v77 = 0;
  v44 = objc_msgSend(v42, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v43, 1, 0, &v77);

  v45 = (id)v77;
  if (v44)
  {
LABEL_6:
    v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D41878]), sel_init);
    v47 = v69;
    sub_19CCD6834((uint64_t)v69, (uint64_t)&v77);
    v48 = swift_allocObject();
    v49 = v78;
    *(_OWORD *)(v48 + 16) = v77;
    *(_OWORD *)(v48 + 32) = v49;
    *(_OWORD *)(v48 + 48) = v79;
    *(_QWORD *)(v48 + 64) = v80;
    aBlock[4] = sub_19CD61BE4;
    aBlock[5] = v48;
    v50 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_19CCF48DC;
    aBlock[3] = &block_descriptor_30;
    v51 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v46, sel_setKeyForIdentifier_, v51);
    _Block_release(v51);
    v52 = v74;
    *(_QWORD *)&v79 = sub_19CD4E338;
    *((_QWORD *)&v79 + 1) = v74;
    *(_QWORD *)&v77 = v50;
    *((_QWORD *)&v77 + 1) = 1107296256;
    *(_QWORD *)&v78 = sub_19CD3BC10;
    *((_QWORD *)&v78 + 1) = &block_descriptor_13_0;
    v53 = _Block_copy(&v77);
    swift_retain();
    swift_release();
    objc_msgSend(v46, sel_setFileEntryFound_, v53);
    _Block_release(v53);
    *(_QWORD *)&v79 = sub_19CD61E70;
    *((_QWORD *)&v79 + 1) = v52;
    *(_QWORD *)&v77 = v50;
    *((_QWORD *)&v77 + 1) = 1107296256;
    *(_QWORD *)&v78 = sub_19CCE2730;
    *((_QWORD *)&v78 + 1) = &block_descriptor_16;
    v54 = _Block_copy(&v77);
    swift_retain();
    swift_release();
    objc_msgSend(v46, sel_setDataSegmentFound_, v54);
    _Block_release(v54);
    v55 = *v47;
    v56 = v47[1];
    *(_QWORD *)&v77 = v55;
    *((_QWORD *)&v77 + 1) = v56;
    sub_19CD60CD0();
    *(_QWORD *)&v77 = v55;
    *((_QWORD *)&v77 + 1) = v56;
    v57 = sub_19CCD3FE4();
    v58 = (v56 >> 60) & 3;
    if ((_DWORD)v58)
    {
      v59 = v68;
      v60 = (_DWORD)v58 != 1 && !(v55 & 0xFFFFFFFFFFFFFFFELL | v56 ^ 0x2000000000000000);
    }
    else
    {
      v60 = 1;
      v59 = v68;
    }
    *(_QWORD *)&v77 = 0;
    v62 = objc_msgSend(v46, sel_processStream_signatureVerifier_options_error_, v59, v57, v60, &v77, v66);

    if ((v62 & 1) != 0)
    {
      v63 = (id)v77;
      sub_19CCECFE4((uint64_t)v75, (uint64_t *)&unk_1ECEB3030);

      swift_beginAccess();
      sub_19CD4A5D4(v38, v66);
      return swift_release();
    }
    v65 = (id)v77;
    sub_19CFDEC9C();

    swift_willThrow();
  }
  else
  {
    v61 = v45;
    sub_19CFDEC9C();

    swift_willThrow();
  }
  sub_19CCECFE4((uint64_t)v75, (uint64_t *)&unk_1ECEB3030);
  return swift_release();
}

uint64_t sub_19CD5536C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for DiskJetPackResourceBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_19CFDEDE0();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

__n128 ImpressionMetrics.init(id:fields:custom:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __n128 v14;
  __int128 v15;
  __int128 v16;

  v15 = a1[1];
  v16 = *a1;
  v14 = (__n128)a1[2];
  v6 = *((_QWORD *)a1 + 6);
  v7 = *a3;
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = sub_19CD30650(MEMORY[0x1E0DEE9D8]);
  v10 = sub_19CD30650(v8);
  swift_bridgeObjectRetain();
  v11 = sub_19CE33280(a2, v9);
  v12 = sub_19CE33280(v10, v9);
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v15;
  result = v14;
  *(__n128 *)(a4 + 32) = v14;
  *(_QWORD *)(a4 + 48) = v6;
  *(_QWORD *)(a4 + 56) = v11;
  *(_QWORD *)(a4 + 64) = v7;
  *(_QWORD *)(a4 + 72) = v12;
  return result;
}

JetEngine::ScalarDictionary __swiftcall ScalarDictionary.init()()
{
  _QWORD *v0;
  JetEngine::ScalarDictionary result;

  *v0 = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t storeEnumTagSinglePayload for MetricsIdentifierScheme.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_19CD55548 + 4 * byte_19D0660DB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_19CD5557C + 4 * byte_19D0660D6[v4]))();
}

uint64_t sub_19CD5557C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD55584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19CD5558CLL);
  return result;
}

uint64_t sub_19CD55598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19CD555A0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_19CD555A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD555AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PathExpression.MatchResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t ReadOnlyLens.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

ValueMetadata *type metadata accessor for Dependency()
{
  return &type metadata for Dependency;
}

ValueMetadata *type metadata accessor for MetricsPipeline()
{
  return &type metadata for MetricsPipeline;
}

uint64_t ReadOnlyLens.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

double static LogMessage.sensitive(_:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[32];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3360);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_19D0522A0;
  sub_19CD40794(a1, (uint64_t)v9);
  v7 = 0u;
  v8 = 0u;
  sub_19CD40658((uint64_t)v9, (uint64_t)&v7);
  *(_BYTE *)(v4 + 64) = 1;
  result = *(double *)&v7;
  v6 = v8;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 48) = v6;
  *a2 = v4;
  return result;
}

uint64_t sub_19CD55994@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for _AutomationID()
{
  return &type metadata for _AutomationID;
}

ValueMetadata *type metadata accessor for JSCallable()
{
  return &type metadata for JSCallable;
}

ValueMetadata *type metadata accessor for JSRequest()
{
  return &type metadata for JSRequest;
}

uint64_t getEnumTagSinglePayload for JSONValueType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t dispatch thunk of BaseObjectGraph.adding(dependency:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_19CD55A80()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for MetricsFieldsProviderCategory()
{
  return &type metadata for MetricsFieldsProviderCategory;
}

ValueMetadata *type metadata accessor for SyncTaskScheduler()
{
  return &type metadata for SyncTaskScheduler;
}

uint64_t storeEnumTagSinglePayload for _AppStateChangeObserver(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t sub_19CD55AD4()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for AutomationSemantics()
{
  return &type metadata for AutomationSemantics;
}

uint64_t dispatch thunk of ComponentModel.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t JSContext.propagateErrorsToExceptions(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

__n128 LogMessage.StringInterpolation.appendInterpolation(sensitive:)(uint64_t a1)
{
  _QWORD **v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  __n128 *v5;
  __n128 result;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  _BYTE v10[32];
  __n128 v11;
  __n128 v12;
  char v13;

  sub_19CD40794(a1, (uint64_t)v10);
  v8 = 0u;
  v9 = 0u;
  sub_19CD40658((uint64_t)v10, (uint64_t)&v8);
  v13 = 1;
  v11 = v8;
  v12 = v9;
  v2 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_19CD40918(0, v2[2] + 1, 1, v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_19CD40918((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = (__n128 *)&v2[5 * v4];
  result = v11;
  v7 = v12;
  v5[4].n128_u8[0] = v13;
  v5[2] = result;
  v5[3] = v7;
  *v1 = v2;
  return result;
}

ValueMetadata *type metadata accessor for JSONError()
{
  return &type metadata for JSONError;
}

uint64_t destroy for DynamicImpressionsTracker.Configuration()
{
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

void sub_19CD55CDC(uint64_t a1@<X8>)
{
  static SyncEvent.defaultScheduler.getter(a1);
}

void static SyncEvent.defaultScheduler.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for SyncTaskScheduler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for SyncTaskScheduler;
}

uint64_t storeEnumTagSinglePayload for LanguageStringsContainerWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

double static LogMessage.traceableSensitive(_:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[32];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3360);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_19D0522A0;
  sub_19CD40794(a1, (uint64_t)v9);
  v7 = 0u;
  v8 = 0u;
  sub_19CD40658((uint64_t)v9, (uint64_t)&v7);
  *(_BYTE *)(v4 + 64) = 2;
  result = *(double *)&v7;
  v6 = v8;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 48) = v6;
  *a2 = v4;
  return result;
}

uint64_t static FlowActionPresentation.stackPush.getter()
{
  return 0x7375506B63617473;
}

ValueMetadata *type metadata accessor for DependencyDictionary()
{
  return &type metadata for DependencyDictionary;
}

_QWORD *BaseObjectGraph.init(name:dependencies:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = *a3;
  v3[3] = a1;
  v3[4] = a2;
  v3[2] = v4;
  return v3;
}

uint64_t dispatch thunk of static EventEmitter.defaultScheduler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t getEnumTagSinglePayload for SentryConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a8 + 64))(a1, a2, a3 & 1, a4, a5 & 1);
}

ValueMetadata *type metadata accessor for LocalizerContext()
{
  return &type metadata for LocalizerContext;
}

uint64_t dispatch thunk of Localizer.string(withCount:forKey:with:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 88))();
}

double static AutomationSemantics.shelfItemSubComponent(itemKind:id:parentId:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t inited;
  double result;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2BA0);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_19D0522A0;
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)&v14[0] = &unk_1E3DD0080;
  *((_QWORD *)&v14[0] + 1) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_19CD4CE58(v10, (uint64_t)sub_19CD4D1F0, 0);
  v13 = v14[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0468);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19D052350;
  sub_19CD40794(a3, (uint64_t)v14);
  sub_19CD4C788(0, (uint64_t)v14, (uint64_t *)(inited + 32));
  sub_19CD40794(a4, (uint64_t)v14);
  sub_19CD4C788(1, (uint64_t)v14, (uint64_t *)(inited + 64));
  sub_19CD4C984(inited);
  result = *(double *)&v13;
  *a5 = v13;
  return result;
}

uint64_t dispatch thunk of Localizer.formattedCount(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

ValueMetadata *type metadata accessor for JSRoute()
{
  return &type metadata for JSRoute;
}

uint64_t JSONObject.int64.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_19CDE0324(v0, (uint64_t)v4);
  v1 = v5;
  if (v5)
  {
    v2 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  }
  else
  {
    sub_19CCECFE4((uint64_t)v4, &qword_1ECEB1328);
  }
  return v1;
}

uint64_t storeEnumTagSinglePayload for OpaqueMetatype(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for JSONTimeUnit(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

JetEngine::MetricsIdentifierType_optional sub_19CD56198(Swift::String *a1)
{
  return MetricsIdentifierType.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for JSResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19CD561C4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for PageRenderMetricsPresenter.ActivityStart()
{
  return &type metadata for PageRenderMetricsPresenter.ActivityStart;
}

uint64_t CoarselyTimed.contained.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

_QWORD *PipelineTask.andThen<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PipelineTask.mapTask<A>(_:)(*a1, a1[1], a2, a3, a4);
}

ValueMetadata *type metadata accessor for Bag()
{
  return &type metadata for Bag;
}

ValueMetadata *type metadata accessor for Unstable.AccountHandle()
{
  return &type metadata for Unstable.AccountHandle;
}

ValueMetadata *type metadata accessor for PageRenderMetricsPresenter.ActivityEnd()
{
  return &type metadata for PageRenderMetricsPresenter.ActivityEnd;
}

uint64_t storeEnumTagSinglePayload for JSResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t dispatch thunk of ViewModel.impressionMetrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for JSONDictionary()
{
  return &type metadata for JSONDictionary;
}

_QWORD *sub_19CD562D0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for EventObserverBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventObserverBox);
}

uint64_t JSONObject.uint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_19CDE0324(v0, (uint64_t)v4);
  v1 = v5;
  if (v5)
  {
    v2 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  }
  else
  {
    sub_19CCECFE4((uint64_t)v4, &qword_1ECEB1328);
  }
  return v1;
}

uint64_t type metadata accessor for SyncEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SyncEvent);
}

uint64_t sub_19CD56388()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *Bag.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  id v4;
  _QWORD *result;

  v4 = objc_msgSend(*v2, sel_BOOLForKey_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1160);
  result = (_QWORD *)swift_allocObject();
  result[2] = v4;
  result[3] = sub_19CD04288;
  result[4] = 0;
  *a2 = result;
  return result;
}

{
  id *v2;
  id v4;
  _QWORD *result;

  v4 = objc_msgSend(*v2, sel_stringForKey_, a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB1FF8);
  result = (_QWORD *)swift_allocObject();
  result[2] = v4;
  result[3] = sub_19CD044E4;
  result[4] = 0;
  *a2 = result;
  return result;
}

{
  id *v2;
  id v4;
  _QWORD *result;

  v4 = objc_msgSend(*v2, sel_doubleForKey_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0960);
  result = (_QWORD *)swift_allocObject();
  result[2] = v4;
  result[3] = sub_19CD04754;
  result[4] = 0;
  *a2 = result;
  return result;
}

{
  id *v2;
  id v4;
  _QWORD *result;

  v4 = objc_msgSend(*v2, sel_arrayForKey_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1B78);
  result = (_QWORD *)swift_allocObject();
  result[2] = v4;
  result[3] = sub_19CD042B4;
  result[4] = 0;
  *a2 = result;
  return result;
}

{
  id *v2;
  id v4;
  _QWORD *result;

  v4 = objc_msgSend(*v2, sel_dictionaryForKey_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1FF0);
  result = (_QWORD *)swift_allocObject();
  result[2] = v4;
  result[3] = sub_19CD04508;
  result[4] = 0;
  *a2 = result;
  return result;
}

{
  id *v2;
  id v4;
  _QWORD *result;

  v4 = objc_msgSend(*v2, sel_integerForKey_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0850);
  result = (_QWORD *)swift_allocObject();
  result[2] = v4;
  result[3] = sub_19CD5AED0;
  result[4] = 0;
  *a2 = result;
  return result;
}

{
  id *v2;
  id v4;
  _QWORD *result;

  v4 = objc_msgSend(*v2, sel_URLForKey_, a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB1150);
  result = (_QWORD *)swift_allocObject();
  result[2] = v4;
  result[3] = sub_19CD04750;
  result[4] = 0;
  *a2 = result;
  return result;
}

_BYTE *sub_19CD56404(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t PageMetrics.Instruction.invocationPoints.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for Bag.Profile()
{
  return &type metadata for Bag.Profile;
}

ValueMetadata *type metadata accessor for MetricsFieldsAggregator()
{
  return &type metadata for MetricsFieldsAggregator;
}

uint64_t static FlowActionPresentation.sheetPresent.getter()
{
  return 0x6572507465656873;
}

ValueMetadata *type metadata accessor for JSONTimeUnit()
{
  return &type metadata for JSONTimeUnit;
}

uint64_t AsyncObjectGraphBuilder.satisfying<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19CD01880(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1E3DE08C8, (uint64_t)sub_19CCFEE1C);
}

{
  return sub_19CD01880(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1E3DE0918, (uint64_t)sub_19CDE8FD4);
}

uint64_t sub_19CD564E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19CD56510 + 4 * byte_19D0531B0[*v0]))(1734440037, 0xE400000000000000);
}

uint64_t sub_19CD56510()
{
  return 0x69646F4D7473616CLL;
}

uint64_t sub_19CD56530()
{
  return 0x6164696C61766572;
}

uint64_t sub_19CD56554()
{
  return 0x6F6973726556736FLL;
}

uint64_t sub_19CD56570()
{
  return 0x6D754E646C697562;
}

uint64_t sub_19CD56590()
{
  return 0x7963696C6F70;
}

ValueMetadata *type metadata accessor for OSLogger.Subsystem()
{
  return &type metadata for OSLogger.Subsystem;
}

ValueMetadata *type metadata accessor for PageMetrics.InvocationPoint()
{
  return &type metadata for PageMetrics.InvocationPoint;
}

ValueMetadata *type metadata accessor for JSPromise()
{
  return &type metadata for JSPromise;
}

id JSPromise.value.getter()
{
  id *v0;

  return *v0;
}

uint64_t dispatch thunk of RunLoopWorkerThread.schedule(task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

ValueMetadata *type metadata accessor for PageMetrics()
{
  return &type metadata for PageMetrics;
}

uint64_t sub_19CD5662C(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

_BYTE *sub_19CD56654(_BYTE *result, char a2)
{
  *result = *result & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for MetricsFieldsContext()
{
  return &type metadata for MetricsFieldsContext;
}

uint64_t storeEnumTagSinglePayload for SentryConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ReadOnlyLens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadOnlyLens);
}

double static AutomationSemantics.shelfItem(itemKind:id:parentId:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t inited;
  double result;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2BA0);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_19D0522A0;
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)&v14[0] = &unk_1E3DD01A0;
  *((_QWORD *)&v14[0] + 1) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_19CD4CE58(v10, (uint64_t)sub_19CD4D1F0, 0);
  v13 = v14[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0468);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19D052350;
  sub_19CD40794(a3, (uint64_t)v14);
  sub_19CD4C788(0, (uint64_t)v14, (uint64_t *)(inited + 32));
  sub_19CD40794(a4, (uint64_t)v14);
  sub_19CD4C788(1, (uint64_t)v14, (uint64_t *)(inited + 64));
  sub_19CD4C984(inited);
  result = *(double *)&v13;
  *a5 = v13;
  return result;
}

JetEngine::JSRoute __swiftcall JSRoute.init(service:function:)(Swift::String service, Swift::String function)
{
  Swift::String *v2;
  JetEngine::JSRoute result;

  *v2 = service;
  v2[1] = function;
  result.function = function;
  result.service = service;
  return result;
}

ValueMetadata *type metadata accessor for ViewWillDisappearReason()
{
  return &type metadata for ViewWillDisappearReason;
}

uint64_t MetricsFieldsAggregator.addOptInProvider(_:forRequest:)(_QWORD *a1, uint64_t a2)
{
  return sub_19CCDA9D4(a1, a2, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19CD0F9A8);
}

_OWORD *JSRequestIntent.init(_:timeout:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _OWORD *result;

  result = sub_19CD568D0(a1, (_OWORD *)a4);
  *(_QWORD *)(a4 + 48) = a2;
  *(_BYTE *)(a4 + 56) = a3 & 1;
  return result;
}

_OWORD *sub_19CD568D0(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

ValueMetadata *type metadata accessor for PageMetrics.Instruction()
{
  return &type metadata for PageMetrics.Instruction;
}

double JSONObject.init(wrapping:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  _OWORD v5[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_19CD433C0((_OWORD *)a1, v5);
    *(_QWORD *)(a2 + 24) = &type metadata for FoundationValue;
    *(_QWORD *)(a2 + 32) = &off_1E3DCC5B0;
    v3 = swift_allocObject();
    *(_QWORD *)a2 = v3;
    sub_19CD433C0(v5, (_OWORD *)(v3 + 16));
  }
  else
  {
    sub_19CCECFE4(a1, &qword_1ECEB3370);
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_19CD56980()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000018;
  if (*v0 != 1)
    v1 = 0x6567417463697665;
  if (*v0)
    return v1;
  else
    return 0x65674178616DLL;
}

ValueMetadata *type metadata accessor for JetPackPath()
{
  return &type metadata for JetPackPath;
}

uint64_t getEnumTagSinglePayload for InMemoryJetPackResourceBundle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t Unstable.ImpressionsCalculator.childCalculator(for:)(__int128 *a1)
{
  return sub_19CD281C0(a1, ImpressionsCalculator.childCalculator(for:));
}

ValueMetadata *type metadata accessor for JSError()
{
  return &type metadata for JSError;
}

uint64_t ImpressionMetrics.ID.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

ValueMetadata *type metadata accessor for MetricsFieldInclusionRequest()
{
  return &type metadata for MetricsFieldInclusionRequest;
}

ValueMetadata *type metadata accessor for LintedMetricsEvent()
{
  return &type metadata for LintedMetricsEvent;
}

uint64_t sub_19CD56A48()
{
  return 1937335659;
}

uint64_t type metadata accessor for ValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueBox);
}

void destroy for PageRenderMetricsPresenter.ActivityEnd(uint64_t a1)
{
  sub_19CCC18C4(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_19CD56A78(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t sub_19CD56A80(uint64_t a1, uint64_t a2)
{
  sub_19CCF44B4(&qword_1ECEB0B38, a2, (uint64_t (*)(uint64_t))type metadata accessor for _DispatchQueueExecutor, (uint64_t)&unk_19D05DEF8);
  return sub_19CFDF9B0();
}

uint64_t sub_19CD56AD0()
{
  return sub_19CFDF9BC();
}

ValueMetadata *type metadata accessor for ImpressionsCalculator.Configuration()
{
  return &type metadata for ImpressionsCalculator.Configuration;
}

uint64_t ImpressionMetrics.custom.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for CoarselyTimed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoarselyTimed);
}

ValueMetadata *type metadata accessor for ActionOutcome()
{
  return &type metadata for ActionOutcome;
}

void static PageMetrics.InvocationPoint.pageEnter.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65746E4565676170;
  a1[1] = 0xE900000000000072;
}

ValueMetadata *type metadata accessor for MetricsData()
{
  return &type metadata for MetricsData;
}

uint64_t type metadata accessor for JSONContext.Property(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONContext.Property);
}

uint64_t type metadata accessor for AMSValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AMSValueBox);
}

uint64_t JSRequest.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t JSRequest.timeoutInterval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

Swift::Void __swiftcall JSStack.requestGarbageCollection()()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_allocObject();
  swift_weakInit();
  v1 = (_QWORD *)swift_allocObject();
  v1[2] = v0;
  v1[3] = sub_19CD2FDD8;
  v1[4] = 0;
  swift_retain();
  sub_19CD47F88((uint64_t)sub_19CE6900C, (uint64_t)v1);
  swift_release();
  swift_release();
}

ValueMetadata *type metadata accessor for AutomationAttribute()
{
  return &type metadata for AutomationAttribute;
}

uint64_t PreferenceKey.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t _s9JetEngine6ModelsO18HTTPTemplateActionV8JSONBodyV2eeoiySbAG_AGtFZ_0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_19CFE06A0();
}

ValueMetadata *type metadata accessor for IntentDispatchTimeout()
{
  return &type metadata for IntentDispatchTimeout;
}

uint64_t type metadata accessor for MetricsFieldsContext.Property(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MetricsFieldsContext.Property);
}

uint64_t dispatch thunk of MapPipelineTask.run()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

_QWORD *PipelinePhase.init(mapOutput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a1;
  result[5] = a2;
  *a5 = sub_19CD0C528;
  a5[1] = result;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a1;
  result[5] = a2;
  *a5 = sub_19CD0C5D0;
  a5[1] = result;
  return result;
}

uint64_t PipelinePhase.init(mapTask:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MetricsData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t type metadata accessor for Bag.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Bag.Value);
}

uint64_t sub_19CD56D38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 288) = a1;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for MetricsFieldExclusionRequest()
{
  return &type metadata for MetricsFieldExclusionRequest;
}

uint64_t getEnumTagSinglePayload for MetricsEventType(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19CD56DA8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

double static AutomationSemantics.shelf(_:id:parentId:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t inited;
  double result;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2BA0);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_19D0522A0;
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)&v14[0] = &unk_1E3DD0110;
  *((_QWORD *)&v14[0] + 1) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_19CD4CE58(v10, (uint64_t)sub_19CD4D1F0, 0);
  v13 = v14[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0468);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19D052350;
  sub_19CD40794(a3, (uint64_t)v14);
  sub_19CD4C788(0, (uint64_t)v14, (uint64_t *)(inited + 32));
  sub_19CD40794(a4, (uint64_t)v14);
  sub_19CD4C788(1, (uint64_t)v14, (uint64_t *)(inited + 64));
  sub_19CD4C984(inited);
  result = *(double *)&v13;
  *a5 = v13;
  return result;
}

uint64_t type metadata accessor for SignpostAggregator()
{
  uint64_t result;

  result = qword_1EE43A170;
  if (!qword_1EE43A170)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t initializeWithCopy for JSBytecodeSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v6 = sub_19CFDEDE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = v9;
  v12 = v10;
  return a1;
}

uint64_t type metadata accessor for PipelineTaskBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipelineTaskBox);
}

ValueMetadata *type metadata accessor for JSRequestIntent()
{
  return &type metadata for JSRequestIntent;
}

uint64_t dispatch thunk of TaskScheduler.schedule(task:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_19CD56FFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_19CD570AC + 4 * byte_19D0590E8[(v7 - 1)]))();
}

_QWORD *initializeWithCopy for PageMetrics(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void static JSONContext.initFailureObserver.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000027;
  a1[1] = 0x800000019D06E560;
}

uint64_t dispatch thunk of IntentModel.kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of IntentModel._canonicalIntentModel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

ValueMetadata *type metadata accessor for JSIncident()
{
  return &type metadata for JSIncident;
}

uint64_t storeEnumTagSinglePayload for JetPackAsset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for JetPackAsset.Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_19CD571EC + 4 * byte_19D0531C5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_19CD57220 + 4 * byte_19D0531C0[v4]))();
}

uint64_t sub_19CD57220(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD57228(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19CD57230);
  return result;
}

uint64_t sub_19CD5723C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19CD57244);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_19CD57248(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD57250(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s9JetEngine12JetPackAssetV6PolicyV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19CD572A8 + 4 * byte_19D0531BB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19CD572DC + 4 * byte_19D0531B6[v4]))();
}

uint64_t sub_19CD572DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD572E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19CD572ECLL);
  return result;
}

uint64_t sub_19CD572F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19CD57300);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19CD57304(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD5730C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for InMemoryJetPackResourceBundle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_19CD5733C(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  id v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    v9 = *a2;
    *a1 = v8;
    v10 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v5) = v10;
  return a1;
}

uint64_t storeEnumTagSinglePayload for MetricsIdentifierSchemes.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19CD57460 + 4 * byte_19D0660CC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19CD57480 + 4 * byte_19D0660D1[v4]))();
}

_BYTE *sub_19CD57460(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19CD57480(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19CD57488(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19CD57490(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19CD57498(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19CD574A0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for PackageDataBlobFormatWriterError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_19CD574FC()
{
  return 0x73656D65686373;
}

uint64_t sub_19CD57514()
{
  return sub_19CCCBD10();
}

uint64_t dispatch thunk of BaseObjectGraph.adding(allDependenciesOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t AnyActionTypes.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2 | 0x8000000000000000;
  return result;
}

ValueMetadata *type metadata accessor for AnyActionTypes()
{
  return &type metadata for AnyActionTypes;
}

void static JSONContext.Property<A>.actionKindTable.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000023;
  a1[1] = 0x800000019D06ECA0;
}

void static JSONContext.actionTypes.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x800000019D077050;
}

uint64_t dispatch thunk of PageModel.pageMetrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_19CD57598(uint64_t *a1, void (*a2)(uint64_t *, double), uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;

  v10 = a5(0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v16 - v13;
  v17 = *a1;
  a2(&v17, v12);
  a6(v14);
  return sub_19CCEACE4((uint64_t)v14, a5);
}

uint64_t sub_19CD576D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 288) = a1;
  return swift_task_switch();
}

uint64_t sub_19CD576E8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = *v0;
  return swift_task_switch();
}

uint64_t sub_19CD57750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t sub_19CD5776C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_BYTE *)(v5 + 65) = *a3;
  return swift_task_switch();
}

uint64_t MetricsFieldsAggregator.addOptOutProvider(_:forRequest:)(_QWORD *a1, uint64_t a2)
{
  return sub_19CCDA9D4(a1, a2, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19CCE6418);
}

uint64_t dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

ValueMetadata *type metadata accessor for MetricsEventType()
{
  return &type metadata for MetricsEventType;
}

_QWORD *sub_19CD577B8(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

uint64_t type metadata accessor for DiscardOnError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiscardOnError);
}

ValueMetadata *type metadata accessor for LogMessage.Component()
{
  return &type metadata for LogMessage.Component;
}

uint64_t JSRequest.timeoutInterval.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

void static JSStack.StandardGlobalConfiguration.default.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

ValueMetadata *type metadata accessor for JSStack.Prerequisite()
{
  return &type metadata for JSStack.Prerequisite;
}

uint64_t type metadata accessor for SingleUseClosureEventObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SingleUseClosureEventObserver);
}

JetEngine::MetricsFieldInclusionRequest __swiftcall MetricsFieldInclusionRequest.init(rawValue:)(JetEngine::MetricsFieldInclusionRequest rawValue)
{
  JetEngine::MetricsFieldInclusionRequest *v1;

  *v1 = rawValue;
  return rawValue;
}

uint64_t sub_19CD57914(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v3;
  return swift_task_switch();
}

uint64_t sub_19CD57930(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 672) = a3;
  *(_QWORD *)(v5 + 664) = a2;
  *(_QWORD *)(v5 + 656) = a1;
  *(_QWORD *)(v5 + 680) = *a4;
  *(_OWORD *)(v5 + 688) = *v4;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for AsyncObjectGraphMetrics()
{
  return &type metadata for AsyncObjectGraphMetrics;
}

ValueMetadata *type metadata accessor for AppleServicesLocalizer.Configuration()
{
  return &type metadata for AppleServicesLocalizer.Configuration;
}

ValueMetadata *type metadata accessor for MetricsIdentifierType()
{
  return &type metadata for MetricsIdentifierType;
}

uint64_t MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[4] = a4;
  v5[5] = v4;
  v5[2] = a1;
  v5[3] = a3;
  v5[6] = *a2;
  return swift_task_switch();
}

void static AutomationSemantics.accountButton()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = &unk_1E3DCFA28;
  a1[1] = v1;
}

ValueMetadata *type metadata accessor for PageRenderActivity()
{
  return &type metadata for PageRenderActivity;
}

uint64_t LintedMetricsEvent.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of JSRequestPerformer.performRequest(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for ProcessAssertion()
{
  return &type metadata for ProcessAssertion;
}

ValueMetadata *type metadata accessor for OpaqueMetatype()
{
  return &type metadata for OpaqueMetatype;
}

BOOL sub_19CD57A24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

ValueMetadata *type metadata accessor for SQLiteResult()
{
  return &type metadata for SQLiteResult;
}

uint64_t sub_19CD57A4C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PageMetrics.pageFields.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for OperationID()
{
  return &type metadata for OperationID;
}

uint64_t JSONContext.Property.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_19CD57A7C()
{
  char *v0;

  return qword_19D053728[*v0];
}

uint64_t getEnumTagSinglePayload for JetPackAssetRequestSourcePolicy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t objectdestroy_29Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_7Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t objectdestroy_7Tm_0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm_0(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm_1()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm_2()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_55Tm()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
  sub_19CD16B60(a1, &qword_1ECEB1F30);
}

uint64_t dispatch thunk of Localizer.formattedDate(format:date:inSentence:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 128))();
}

void destroy for JSONError(uint64_t a1)
{
  sub_19CD57DDC(*(_QWORD *)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_19CD57DA8(uint64_t result, uint64_t a2)
{
  if (a2 < 7)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  }
  else
  {
    *(_QWORD *)result = (a2 - 7);
    *(_OWORD *)(result + 8) = xmmword_19D063D60;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

void sub_19CD57DDC(int a1, id a2, unint64_t a3)
{
  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 3uLL:
    case 4uLL:
    case 6uLL:
      goto LABEL_2;
    case 2uLL:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      break;
    case 5uLL:

      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for Unstable.AsyncObjectGraphMetrics()
{
  return &type metadata for Unstable.AsyncObjectGraphMetrics;
}

void require(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if ((a1() & 1) == 0)
    sub_19CFB28B8(a5, a6, a7, a8, a3);
}

uint64_t destroy for JSStack.StandardGlobalConfiguration(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return swift_release();
  return result;
}

ValueMetadata *type metadata accessor for JSStack.StandardGlobalConfiguration()
{
  return &type metadata for JSStack.StandardGlobalConfiguration;
}

uint64_t JSStack.StandardGlobalConfiguration.isProtocolHandlingEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Logger.error(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19CD40A34(a1, a2, a3, 0);
}

uint64_t type metadata accessor for Bag.ValueOverride()
{
  uint64_t result;

  result = qword_1EE43B6D0;
  if (!qword_1EE43B6D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19CD57F40(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = v2;
  v3[4] = *a2;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for LocalizedStringsTableCollection()
{
  return &type metadata for LocalizedStringsTableCollection;
}

JetEngine::LocalizedStringsTableCollection __swiftcall LocalizedStringsTableCollection.init(bundles:)(JetEngine::LocalizedStringsTableCollection bundles)
{
  JetEngine::LocalizedStringsTableCollection *v1;

  v1->bundles._rawValue = bundles.bundles._rawValue;
  return bundles;
}

JetEngine::MetricsFieldExclusionRequest __swiftcall MetricsFieldExclusionRequest.init(rawValue:)(JetEngine::MetricsFieldExclusionRequest rawValue)
{
  JetEngine::MetricsFieldExclusionRequest *v1;

  *v1 = rawValue;
  return rawValue;
}

ValueMetadata *type metadata accessor for LocalizedStringsJSONObject()
{
  return &type metadata for LocalizedStringsJSONObject;
}

ValueMetadata *type metadata accessor for InstrumentedAMSURLRequest()
{
  return &type metadata for InstrumentedAMSURLRequest;
}

ValueMetadata *type metadata accessor for StartUpPerformanceEvent.RawCheckpoint()
{
  return &type metadata for StartUpPerformanceEvent.RawCheckpoint;
}

ValueMetadata *type metadata accessor for StartUpPerformanceEvent.Checkpoint()
{
  return &type metadata for StartUpPerformanceEvent.Checkpoint;
}

ValueMetadata *type metadata accessor for LocalizedStringsBundle()
{
  return &type metadata for LocalizedStringsBundle;
}

void static ImpressionsCalculator.Configuration.half.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 8) = 12341;
  *(_QWORD *)(a1 + 16) = 0xE200000000000000;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t ImpressionsCalculator.Configuration.withOverrideVisibleThresholdForContainer(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v2[1];
  v3 = v2[2];
  *(_QWORD *)a2 = *v2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t MetricsFieldsContext.Property.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for DependencyCycleError.Creator()
{
  return &type metadata for DependencyCycleError.Creator;
}

uint64_t AppleServicesFetcher.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for AppleServicesFetcher()
{
  return &type metadata for AppleServicesFetcher;
}

__n128 AppleServicesEncoder.init(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v2;
  v3 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v3;
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  return result;
}

ValueMetadata *type metadata accessor for AppleServicesEncoder()
{
  return &type metadata for AppleServicesEncoder;
}

ValueMetadata *type metadata accessor for AppleServicesEncoder.Configuration()
{
  return &type metadata for AppleServicesEncoder.Configuration;
}

ValueMetadata *type metadata accessor for AppleServicesEncoder.SigningStyle()
{
  return &type metadata for AppleServicesEncoder.SigningStyle;
}

uint64_t sub_19CD58090()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1816) = v0;
  return swift_task_switch();
}

uint64_t sub_19CD580B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1808) = v0;
  return swift_task_switch();
}

uint64_t sub_19CD580E0()
{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 72) = vextq_s8(*(int8x16_t *)(v0 + 104), *(int8x16_t *)(v0 + 104), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionDispatcher);
}

uint64_t dispatch thunk of BaseObjectGraph.name.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

ValueMetadata *type metadata accessor for MonotonicTime()
{
  return &type metadata for MonotonicTime;
}

uint64_t sub_19CD5812C(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t type metadata accessor for DeferredLazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DeferredLazy);
}

uint64_t PageMetrics.instructions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s19DeepLinkDestinationVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19CD58198()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E4F65746F6D6572;
  if (*v0 != 1)
    v1 = 0x6C6E4F6C61636F6CLL;
  if (*v0)
    return v1;
  else
    return 0x647261646E617473;
}

ValueMetadata *type metadata accessor for JetPackAssetRequestSourcePolicy()
{
  return &type metadata for JetPackAssetRequestSourcePolicy;
}

ValueMetadata *type metadata accessor for JetPackManagedKeyProvider()
{
  return &type metadata for JetPackManagedKeyProvider;
}

ValueMetadata *type metadata accessor for JetPackFileStreamSource()
{
  return &type metadata for JetPackFileStreamSource;
}

ValueMetadata *type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation()
{
  return &type metadata for ValidatedJetPackAssetLocations.BagKeyLocation;
}

ValueMetadata *type metadata accessor for InMemoryJetPackLoader()
{
  return &type metadata for InMemoryJetPackLoader;
}

double InitializeProcessLaunchTimeInterval()
{
  int v0;
  int v1;
  double result;
  timespec v3;

  v3.tv_sec = 0;
  v3.tv_nsec = 0;
  v0 = clock_gettime(_CLOCK_MONOTONIC_RAW, &v3);
  if (v0)
  {
    v1 = v0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      InitializeProcessLaunchTimeInterval_cold_1(v1);
  }
  else
  {
    result = (double)v3.tv_nsec / 1000000000.0 + (double)v3.tv_sec;
    *(double *)&gProcessLaunchTimeInterval = result;
  }
  return result;
}

uint64_t objectdestroy_23Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm()
{
  id *v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_2(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_5()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_6()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_7()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm_1()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_38Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm_2(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm_0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t objectdestroy_6Tm()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  return swift_deallocObject();
}

unint64_t sub_19CD58928(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1A1ADAAD4](*(_QWORD *)(v1 + 40), a1, 2);
  return sub_19CD5895C(a1, v3);
}

unint64_t sub_19CD5895C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_19CD589FC()
{
  return sub_19CD09560(&qword_1ECEB0450, &qword_1ECEB0458, (uint64_t (*)(void))sub_19CD58BE8, MEMORY[0x1E0DECCA0]);
}

unint64_t sub_19CD58A20(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _BYTE v27[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_19CFE007C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_19CD23A14(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v27);
        v9 = sub_19CFE0094();
        result = sub_19CD20334((uint64_t)v27);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= (uint64_t)v10)
          {
LABEL_16:
            v13 = *(_QWORD *)(a2 + 48);
            v14 = v13 + 40 * v3;
            v15 = (__int128 *)(v13 + 40 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 40)
            {
              v16 = *v15;
              v17 = v15[1];
              *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
              *(_OWORD *)v14 = v16;
              *(_OWORD *)(v14 + 16) = v17;
            }
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
            {
              *v19 = *v20;
              v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= (uint64_t)v10)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_19CD58BE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ECEB0430;
  if (!qword_1ECEB0430)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECEB0438);
    v2 = sub_19CD0940C((unint64_t *)&unk_1ECEB03D0, &qword_1ECEB03C8);
    result = MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DEC850], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ECEB0430);
  }
  return result;
}

uint64_t sub_19CD58C5C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19CCC7F6C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

_QWORD *sub_19CD58C78(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, &qword_1ECEB0718, &qword_1ECEB0700);
}

_QWORD *sub_19CD58C8C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, &qword_1ECEB0738, &qword_1ECEB0720);
}

_QWORD *sub_19CD58CA0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, &qword_1EE43B160, &qword_1ECEB25B0);
}

_QWORD *sub_19CD58CB4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19CD49FD0(a1, a2, a3, a4, &qword_1ECEB0C78, &qword_1ECEB0C60);
}

_QWORD *sub_19CD58CC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB0940);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_19CD58EDC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CD58DE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD58EDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0B00);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD58FE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_19CFE03C4();
  __break(1u);
  return result;
}

uint64_t sub_19CD590EC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_18;
  if ((a3 & 1) != 0)
  {
    sub_19CE8806C();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_19CE84DE4();
      goto LABEL_18;
    }
    sub_19CE86708();
  }
  v8 = *v3;
  sub_19CFE08C8();
  if (v5)
    sub_19CFE08D4();
  sub_19CFE08D4();
  result = sub_19CFE0910();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * a2);
      if (v11)
      {
        if (v5 && v11 == v5)
        {
LABEL_17:
          result = sub_19CFE0820();
          __break(1u);
          break;
        }
      }
      else if (!v5)
      {
        goto LABEL_17;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_18:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

unint64_t sub_19CD59254(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_19CFE007C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        sub_19CFE08C8();
        if (v10)
          sub_19CFE08D4();
        sub_19CFE08D4();
        v11 = sub_19CFE0910() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_13;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_13:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

int64_t sub_19CD59414(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_19CD594F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19CD2C4B8(a1, a2, a3, (uint64_t (*)(void))sub_19CD00E10);
}

uint64_t sub_19CD59504()
{
  uint64_t result;

  result = sub_19CFDF554();
  qword_1ECEB51F8 = result;
  return result;
}

uint64_t sub_19CD59538()
{
  uint64_t result;

  result = sub_19CFDF554();
  qword_1ECEB51F0 = result;
  return result;
}

unint64_t sub_19CD5956C()
{
  unint64_t result;

  result = qword_1ECEB1F20;
  if (!qword_1ECEB1F20)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECEB1F20);
  }
  return result;
}

unint64_t sub_19CD595A8()
{
  unint64_t result;

  result = qword_1ECEB0928;
  if (!qword_1ECEB0928)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECEB0928);
  }
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_19CD16B60(a1, &qword_1ECEB0498);
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
  sub_19CD16B60(a1, &qword_1ECEB0BB8);
}

uint64_t sub_19CD5960C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

uint64_t sub_19CD59644()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19CD596A4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x746C7561666564 && a2 == 0xE700000000000000)
    return 0;
  if ((sub_19CFE06A0() & 1) != 0)
    return 0;
  if (a1 == 0x61632D6563726F66 && a2 == 0xEB00000000656863 || (sub_19CFE06A0() & 1) != 0)
    return 2;
  if (a1 == 0x65686361632D6F6ELL && a2 == 0xE800000000000000)
    return 1;
  return sub_19CFE06A0() & 1;
}

uint64_t sub_19CD597F0()
{
  uint64_t result;

  result = sub_19CFDF554();
  qword_1EE439FB8 = result;
  return result;
}

id static NSNotificationName.jetpackSignatureVerificationDidFailNotification.getter()
{
  if (qword_1EE43A228 != -1)
    swift_once();
  return (id)qword_1EE439FB8;
}

uint64_t sub_19CD59864(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_19CD598F0()
{
  unint64_t result;

  result = qword_1ECEB2F80;
  if (!qword_1ECEB2F80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECEB2F80);
  }
  return result;
}

uint64_t sub_19CD5992C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  return swift_task_switch();
}

uint64_t sub_19CD599A0()
{
  return sub_19CCC5C88((unint64_t *)&unk_1ECEB2488, (uint64_t (*)(uint64_t))type metadata accessor for CFRunLoop, (uint64_t)&unk_19D05187C);
}

uint64_t sub_19CD599CC()
{
  return sub_19CCC5C88((unint64_t *)&unk_1ECEB2478, (uint64_t (*)(uint64_t))type metadata accessor for CFRunLoop, (uint64_t)&unk_19D0518A8);
}

uint64_t sub_19CD599F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_19CD5C7C0();
  result = sub_19CFDFBB4();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_19CCC62D8(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_19CD59A68()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_19CE46798((uint64_t)&unk_1E3DDB240);
  result = swift_arrayDestroy();
  qword_1ECEB52D8 = v0;
  return result;
}

uint64_t sub_19CD59AB0()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_19CE46798((uint64_t)&unk_1E3DDB210);
  result = swift_arrayDestroy();
  qword_1ECEB52C0 = v0;
  return result;
}

uint64_t sub_19CD59AF8()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_19CE46798((uint64_t)&unk_1E3DDB140);
  result = swift_arrayDestroy();
  qword_1ECEB52F0 = v0;
  return result;
}

uint64_t sub_19CD59B40()
{
  uint64_t result;

  result = sub_19CCD7360((uint64_t)&unk_1E3DDB110);
  qword_1ECEB52B8 = result;
  return result;
}

uint64_t sub_19CD59B64(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_19CD59C08(uint64_t a1, char a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

unint64_t sub_19CD59C88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECEB32C0;
  if (!qword_1ECEB32C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ECEB32B0);
    result = MEMORY[0x1A1ADBD7C](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1ECEB32C0);
  }
  return result;
}

uint64_t sub_19CD59CD4(uint64_t a1, int a2)
{
  uint64_t *v2;

  return sub_19CCD0690(*v2, v2[1], a2);
}

unint64_t sub_19CD59D00(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0BD0);
  v2 = (_QWORD *)sub_19CFE03B8();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_19CCF8C5C(v4, (uint64_t)v13, &qword_1EE43F3D8);
    result = sub_19CD20240((uint64_t)v13);
    if ((v6 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v7 = v2[6] + 40 * result;
    v8 = v13[0];
    v9 = v13[1];
    *(_QWORD *)(v7 + 32) = v14;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v2[7] + 8 * result) = v15;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19CD59E28(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE43B458);
  v2 = (_QWORD *)sub_19CFE03B8();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_19CD3FD1C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19CD59F40(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43B450);
  v2 = (_QWORD *)sub_19CFE03B8();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = *((_QWORD *)v6 - 1);
    if (!v8)
      goto LABEL_9;
    v9 = *((_QWORD *)v6 - 2);
    v10 = *v6;
    swift_bridgeObjectRetain();
    result = sub_19CD3FD1C(v9, v8);
    if ((v11 & 1) != 0)
      goto LABEL_13;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v9;
    v12[1] = v8;
    *(_BYTE *)(v2[7] + result) = v10;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_14;
    v6 += 24;
    v2[2] = v15;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

unint64_t sub_19CD5A07C(uint64_t a1)
{
  return sub_19CCDBE88(a1, &qword_1EE4372B0, &qword_1EE437290, (uint64_t (*)(uint64_t *, unint64_t))sub_19CCD14C4);
}

unint64_t sub_19CD5A098(uint64_t a1)
{
  return sub_19CD0E22C(a1, &qword_1ECEB24F8, &qword_1EE43F410);
}

unint64_t sub_19CD5A0AC(uint64_t a1)
{
  return sub_19CD0E22C(a1, &qword_1ECEB24F0, &qword_1EE43F408);
}

uint64_t sub_19CD5A0C0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for _LRUCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _LRUCache);
}

uint64_t sub_19CD5A0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for <A> StatePath<A>, a1, &v4);
}

uint64_t dispatch thunk of Localizer.jsExport.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_19CD5A114()
{
  uint64_t result;

  result = sub_19CFDF554();
  qword_1ECEB2950 = result;
  return result;
}

uint64_t sub_19CD5A148()
{
  uint64_t result;

  result = sub_19CFDF554();
  qword_1ECEB2B68 = result;
  return result;
}

id sub_19CD5A17C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  v4 = *(id *)(*(_QWORD *)a1 + 16);
  a2[3] = sub_19CD598F0();
  a2[4] = &protocol witness table for ACAccountStore;
  *a2 = v4;
  return v4;
}

ValueMetadata *type metadata accessor for Unstable.AsyncObjectGraphMetrics.BuiltDependency()
{
  return &type metadata for Unstable.AsyncObjectGraphMetrics.BuiltDependency;
}

id sub_19CD5A1D8()
{
  id result;
  uint64_t v1[2];

  if (qword_1ECEB3330 != -1)
    swift_once();
  v1[0] = 0xD000000000000013;
  v1[1] = 0x800000019D06DE10;
  result = sub_19CD1462C(v1, 0x6E6964616F4C534ALL, 0xE900000000000067);
  qword_1ECEB29D0 = (uint64_t)result;
  return result;
}

JetEngine::OSLogger::Subsystem __swiftcall OSLogger.Subsystem.init(rawValue:)(JetEngine::OSLogger::Subsystem rawValue)
{
  JetEngine::OSLogger::Subsystem *v1;

  *v1 = rawValue;
  return rawValue;
}

id sub_19CD5A278()
{
  id result;
  uint64_t v1[2];

  if (qword_1ECEB3330 != -1)
    swift_once();
  v1[0] = 0xD000000000000013;
  v1[1] = 0x800000019D06DE10;
  result = sub_19CD1462C(v1, 0x7363697274654DLL, 0xE700000000000000);
  qword_1ECEB30F0 = (uint64_t)result;
  return result;
}

id sub_19CD5A308()
{
  id result;
  uint64_t v1[2];

  if (qword_1ECEB3330 != -1)
    swift_once();
  v1[0] = 0xD000000000000013;
  v1[1] = 0x800000019D06DE10;
  result = sub_19CD1462C(v1, 1936160066, 0xE400000000000000);
  qword_1EE43BE68 = (uint64_t)result;
  return result;
}

id sub_19CD5A390()
{
  id result;
  uint64_t v1[2];

  if (qword_1ECEB3330 != -1)
    swift_once();
  v1[0] = 0xD000000000000013;
  v1[1] = 0x800000019D06DE10;
  result = sub_19CD1462C(v1, 0x416B63615074654ALL, 0xED00007374657373);
  qword_1ECEB0B60 = (uint64_t)result;
  return result;
}

id sub_19CD5A42C()
{
  id result;
  uint64_t v1[2];

  if (qword_1ECEB3330 != -1)
    swift_once();
  v1[0] = 0xD000000000000013;
  v1[1] = 0x800000019D06DE10;
  result = sub_19CD1462C(v1, 0x617A696C61636F4CLL, 0xEC0000006E6F6974);
  qword_1ECEAFFE0 = (uint64_t)result;
  return result;
}

void sub_19CD5A4C4()
{
  unint64_t v0;

  sub_19CCC8A30();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t JSSource.init(code:sourceURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = (uint64_t)a4 + *(int *)(type metadata accessor for JSSource() + 20);
  v9 = sub_19CFDEDE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a4 = a1;
  a4[1] = a2;
  return sub_19CD3B284(a3, v8);
}

void sub_19CD5A5B0()
{
  unint64_t v0;

  sub_19CCC1980();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_19CD5A628(void *a1)
{
  sub_19CD5A630(a1);
}

void sub_19CD5A630(void *a1)
{
  sub_19CD5A900(a1);
}

id sub_19CD5A650(_QWORD *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 24), sel_finishWithResult_, *a1);
}

uint64_t Promise<A>.withDependenciesSatisfied.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  sub_19CD5BF10();
  v5 = v4;
  v7 = v6;
  a1[3] = type metadata accessor for DependentObjectGraphBuilder(0, *(_QWORD *)(v3 + 80), v8, v9);
  a1[4] = &off_1E3DD5668;
  *a1 = v5;
  a1[1] = v7;
  return swift_retain();
}

uint64_t sub_19CD5A6C8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
    {
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
    }
    v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v8;
      v9 = a2 + 32;
      v10 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
      swift_retain();
      swift_retain();
      v11(a1 + 32, v9, v10);
      v6 = 0;
    }
    *(_BYTE *)(a1 + 72) = v6;
  }
  return a1;
}

uint64_t sub_19CD5A7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  __int128 v18;
  char v19;

  v3 = v2;
  sub_19CCF8C5C(v3, (uint64_t)v17, &qword_1ECEB0B50);
  v6 = v17[0];
  if ((v19 & 1) != 0)
  {
    v7 = *(_QWORD **)(*(_QWORD *)(v17[0] + 64) + 40);
    *v7 = a1;
    v7[1] = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    v9 = v17[1];
    swift_release();
    sub_19CCD14C4(&v18, (uint64_t)v14);
    v10 = v15;
    v11 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v6;
    v12[3] = v9;
    v12[4] = a1;
    v12[5] = a2;
    v13 = *(void (**)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v11 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v13(sub_19CD18398, v12, v10, v11);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  }
}

void sub_19CD5A8E4(void *a1)
{
  sub_19CFBA72C(a1, &qword_1ECEB0700, (uint64_t)&unk_1E3DEDE20, (uint64_t)sub_19CD1895C);
}

void sub_19CD5A900(void *a1)
{
  sub_19CFBA72C(a1, &qword_1ECEB0720, (uint64_t)&unk_1E3DEDD08, (uint64_t)sub_19CD1895C);
}

void sub_19CD5A91C(void *a1)
{
  sub_19CCFA0B8(a1, &qword_1EE43A900, (uint64_t)&unk_1E3DEEB18, (uint64_t)sub_19CD1895C);
}

uint64_t Promise.then()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

void sub_19CD5A95C()
{
  sub_19CDBDE9C();
}

void sub_19CD5A980()
{
  sub_19CDBDE9C();
}

void sub_19CD5A9A4()
{
  sub_19CD1DEA0();
}

uint64_t sub_19CD5A9C8(uint64_t *a1)
{
  uint64_t v1;

  return sub_19CD57598(a1, *(void (**)(uint64_t *, double))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t (*)(_QWORD))type metadata accessor for InMemoryJetPackResourceBundle, (void (*)(char *))sub_19CCE4B0C);
}

uint64_t sub_19CD5A9FC(uint64_t *a1)
{
  uint64_t v1;

  return sub_19CD57598(a1, *(void (**)(uint64_t *, double))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t (*)(_QWORD))type metadata accessor for DiskJetPackResourceBundle, (void (*)(char *))sub_19CCF64FC);
}

uint64_t sub_19CD5AA30(uint64_t *a1)
{
  uint64_t v1;

  return sub_19CD5AA3C(a1, *(void (**)(_QWORD *__return_ptr, uint64_t *))(v1 + 16));
}

uint64_t sub_19CD5AA3C(uint64_t *a1, void (*a2)(_QWORD *__return_ptr, uint64_t *))
{
  _QWORD v3[5];
  uint64_t v4;

  v4 = *a1;
  a2(v3, &v4);
  sub_19CCD64EC(v3);
  return sub_19CD4C098((uint64_t)v3);
}

uint64_t sub_19CD5AAC0(uint64_t *a1)
{
  uint64_t v1;

  return sub_19CD5AACC(a1, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16));
}

uint64_t sub_19CD5AACC(uint64_t *a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  a2(&v3, &v4);
  sub_19CD0C9BC(v3);
  return swift_release();
}

void sub_19CD5AB54(void **a1)
{
  sub_19CD5A8E4(*a1);
}

uint64_t sub_19CD5AB5C()
{
  uint64_t v0;

  return sub_19CCBE664(*(void (**)(uint64_t (*)(), uint64_t, uint64_t (*)(), uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_19CD5AB68()
{
  uint64_t v0;

  return sub_19CD5AB74(*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_19CD5AB74(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_19CCC5D50(a1, a2, a3, (uint64_t)sub_19CD5AB54, (uint64_t)sub_19CF254D0);
}

void sub_19CD5AB88()
{
  uint64_t v0;

  sub_19CCFF784(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_19CD5ABA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t JSStack.exceptionObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return sub_19CCE9F48(v5);
}

uint64_t sub_19CD5AC4C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PageIntentInstrumentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_19CD5ACC8()
{
  uint64_t v0;

  sub_19CD38418(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_19CD5ACE0(uint64_t a1)
{
  destroy for JSStack.Configuration(a1);
  return a1;
}

uint64_t sub_19CD5AD0C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for JSStack.Configuration(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for JSStack.Configuration()
{
  return &type metadata for JSStack.Configuration;
}

uint64_t Logger.warning(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19CD40A34(a1, a2, a3, 1);
}

uint64_t Logger.withOutputFiltered(byName:defaultVerbosityLevel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;

  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  v15 = type metadata accessor for OptionalLogger();
  v19 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, a4);
  v16 = sub_19CD5F888((uint64_t)v12, a1, a2, &v19, v15, a4, a5);
  swift_bridgeObjectRetain();
  return v16;
}

uint64_t sub_19CD5AE28(uint64_t a1)
{
  _s19DeepLinkDestinationVwxx();
  return a1;
}

ValueMetadata *type metadata accessor for Net()
{
  return &type metadata for Net;
}

uint64_t Bag.Profile.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Bag.Profile.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

JetEngine::Bag::Profile __swiftcall Bag.Profile.init(name:version:)(Swift::String name, Swift::String version)
{
  Swift::String *v2;
  JetEngine::Bag::Profile result;

  *v2 = name;
  v2[1] = version;
  result.version = version;
  result.name = name;
  return result;
}

id sub_19CD5AED0@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(a1, sel_integerValue);
  *a2 = result;
  return result;
}

uint64_t sub_19CD5AEFC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 296) = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 288) + 88))();
  return swift_task_switch();
}

uint64_t sub_19CD5AF44(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 288) = a1;
  return swift_task_switch();
}

uint64_t Bag.init(from:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Bag.withValuesForKeys(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void **v36;
  id v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  id v57;
  objc_class *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  _QWORD *v77;

  v5 = type metadata accessor for Bag.ValueOverride();
  v73 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE43B6F0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (uint64_t *)((char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (void **)((char *)&v67 - v15);
  if (!*(_QWORD *)(a1 + 16))
  {
    *a2 = *v2;
    return swift_unknownObjectRetain();
  }
  v69 = *v2;
  v70 = a2;
  v17 = *(_QWORD *)(a1 + 64);
  v71 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v72 = (unint64_t)(v18 + 63) >> 6;
  v68 = v72 - 1;
  v74 = a1;
  swift_bridgeObjectRetain();
  v75 = 0;
  v21 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v76 = (uint64_t)v21;
    if (v20)
    {
      v23 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v24 = v23 | (v75 << 6);
LABEL_9:
      v25 = *(_QWORD *)(v74 + 56);
      v26 = *(void **)(*(_QWORD *)(v74 + 48) + 8 * v24);
      *v12 = v26;
      v27 = v25 + *(_QWORD *)(v73 + 72) * v24;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43AFD0);
      sub_19CF565D0(v27, (uint64_t)v12 + *(int *)(v28 + 48));
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 0, 1, v28);
      v29 = v26;
      goto LABEL_28;
    }
    v30 = v75 + 1;
    if (__OFADD__(v75, 1))
      goto LABEL_45;
    if (v30 < v72)
    {
      v31 = *(_QWORD *)(v71 + 8 * v30);
      if (v31)
        goto LABEL_13;
      v32 = v75 + 2;
      ++v75;
      if (v30 + 1 < v72)
      {
        v31 = *(_QWORD *)(v71 + 8 * v32);
        if (v31)
          goto LABEL_16;
        v75 = v30 + 1;
        if (v30 + 2 < v72)
        {
          v31 = *(_QWORD *)(v71 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
LABEL_13:
            v20 = (v31 - 1) & v31;
            v24 = __clz(__rbit64(v31)) + (v30 << 6);
            v75 = v30;
            goto LABEL_9;
          }
          v32 = v30 + 3;
          v75 = v30 + 2;
          if (v30 + 3 < v72)
          {
            v31 = *(_QWORD *)(v71 + 8 * v32);
            if (!v31)
            {
              while (1)
              {
                v30 = v32 + 1;
                if (__OFADD__(v32, 1))
                  goto LABEL_46;
                if (v30 >= v72)
                {
                  v75 = v68;
                  goto LABEL_27;
                }
                v31 = *(_QWORD *)(v71 + 8 * v30);
                ++v32;
                if (v31)
                  goto LABEL_13;
              }
            }
LABEL_16:
            v30 = v32;
            goto LABEL_13;
          }
        }
      }
    }
LABEL_27:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43AFD0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v12, 1, 1, v33);
    v20 = 0;
LABEL_28:
    sub_19CF56614((uint64_t)v12, (uint64_t)v16);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43AFD0);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v16, 1, v34) == 1)
      break;
    v35 = *v16;
    v36 = v16;
    sub_19CF56918((uint64_t)v16 + *(int *)(v34 + 48), (uint64_t)v8);
    v37 = v35;
    v38 = v8;
    v39 = v37;
    v40 = (uint64_t)v38;
    sub_19CF56210();
    v42 = v41;
    v43 = (_QWORD *)v76;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v77 = v43;
    v46 = sub_19CE12138(v39);
    v47 = v43[2];
    v48 = (v45 & 1) == 0;
    v49 = v47 + v48;
    if (__OFADD__(v47, v48))
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      type metadata accessor for AMSBagKey(0);
      result = sub_19CFE082C();
      __break(1u);
      return result;
    }
    v50 = v45;
    if (v43[3] >= v49)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_19CE1B58C();
    }
    else
    {
      sub_19CE1639C(v49, isUniquelyReferenced_nonNull_native);
      v51 = sub_19CE12138(v39);
      if ((v50 & 1) != (v52 & 1))
        goto LABEL_47;
      v46 = v51;
    }
    v53 = v77;
    if ((v50 & 1) != 0)
    {
      v21 = v77;
      v22 = v77[7];
      swift_unknownObjectRelease();
      *(_QWORD *)(v22 + 8 * v46) = v42;
    }
    else
    {
      v77[(v46 >> 6) + 8] |= 1 << v46;
      *(_QWORD *)(v53[6] + 8 * v46) = v39;
      *(_QWORD *)(v53[7] + 8 * v46) = v42;
      v54 = v53[2];
      v55 = __OFADD__(v54, 1);
      v56 = v54 + 1;
      if (v55)
        goto LABEL_44;
      v21 = v53;
      v53[2] = v56;
      v57 = v39;
    }

    swift_bridgeObjectRelease();
    v8 = (char *)v40;
    sub_19CF5695C(v40);
    v16 = v36;
  }
  swift_release();
  v58 = (objc_class *)type metadata accessor for OverriddenAMSBag();
  v59 = v69;
  v60 = swift_dynamicCastClass();
  if (v60)
  {
    v61 = *(_QWORD *)(v60 + OBJC_IVAR____TtC9JetEngine16OverriddenAMSBag_overrides);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v62 = swift_bridgeObjectRetain();
    v63 = sub_19CF5571C(v62, v61);
    swift_bridgeObjectRelease();
    swift_getObjectType();
    v64 = v59;
    v65 = v63;
  }
  else
  {
    swift_getObjectType();
    v64 = swift_unknownObjectRetain();
    v65 = v76;
  }
  result = (uint64_t)sub_19CF3BDC0(v64, v65, v58);
  *v70 = result;
  return result;
}

uint64_t sub_19CD5B508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *v4;
  v6 = sub_19CD52C60(a1, a2, a3, a4);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  v8 = 0;
  while (1)
  {
    v9 = v6 + 8 * v8;
    v10 = *(void **)(v9 + 32);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v11 = v10;
    v12 = objc_msgSend(v5, sel_stringForKey_, v11);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB1FF8);
    v13 = (_QWORD *)swift_allocObject();
    v13[2] = v12;
    v13[3] = sub_19CD044E4;
    v13[4] = 0;
    swift_unknownObjectRelease();
    sub_19CD2D018((uint64_t)v13);
    v15 = v14;
    swift_bridgeObjectRelease();

    swift_release();
    result = swift_bridgeObjectRelease();
    if (v15)
      break;
    if (v7 == ++v8)
      goto LABEL_7;
  }
  if (v7 == v8)
  {
LABEL_7:
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  if (v8 >= *(_QWORD *)(v6 + 16))
  {
    __break(1u);
  }
  else
  {
    v18 = *(void **)(v9 + 32);
    swift_unknownObjectRetain();
    v19 = v18;
    v20 = objc_msgSend(v5, sel_stringForKey_, v19);
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = v20;
    v21[3] = sub_19CD044E4;
    v21[4] = 0;
    swift_unknownObjectRelease();
    v17 = sub_19CD2D018((uint64_t)v21);
    v23 = v22;

    result = swift_release();
    if (v23)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
  }
  __break(1u);
  return result;
}

void sub_19CD5B6F4(void (*a1)(id *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_19CCDCDC0(a1, a2, a3, a4, v4 + 16);
}

uint64_t sub_19CD5B6FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19CD579FC;
  return sub_19CD5B754(a1, (_OWORD *)(v1 + 16));
}

uint64_t sub_19CD5B754(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v4;
  _QWORD *v5;

  v4 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 41) = *(_OWORD *)((char *)a2 + 25);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 64) = v5;
  *v5 = v2;
  v5[1] = sub_19CCDEA80;
  return static Bag.fetchBag(using:)(a1, (_OWORD *)(v2 + 16));
}

uint64_t Bag.amsBag.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_19CD5B7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_19CCD14DC(a1, a2, a3, a4);
}

uint64_t sub_19CD5B7D8(uint64_t a1)
{
  destroy for _JSONObjectDecoder(a1, &type metadata for _JSONObjectSingleValueDecodingContainer);
  return a1;
}

uint64_t sub_19CD5B804(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _JSONObjectDecoder(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for AMSMetricsIdentifierFieldsProvider()
{
  return &type metadata for AMSMetricsIdentifierFieldsProvider;
}

void sub_19CD5B848(uint64_t a1)
{
  sub_19CCCEE2C(a1, 0x644972657375, 0xE600000000000000, 1, &qword_1EE43A6F0);
}

uint64_t static AMSMetricsIdentifierFieldsProvider.metricsKeys.getter()
{
  if (qword_1EE43B018 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void sub_19CD5B8A8(uint64_t a1)
{
  sub_19CCCEE2C(a1, 0x6449746E65696C63, 0xE800000000000000, 0, &qword_1EE43A520);
}

ValueMetadata *type metadata accessor for AppleServicesFetcherInstrumented()
{
  return &type metadata for AppleServicesFetcherInstrumented;
}

_UNKNOWN **sub_19CD5B8DC()
{
  return &protocol witness table for AMSURLResult;
}

ValueMetadata *type metadata accessor for AppleServicesEncoderInstrumented()
{
  return &type metadata for AppleServicesEncoderInstrumented;
}

_UNKNOWN **sub_19CD5B8F8()
{
  return &protocol witness table for AppleServicesPropertyScope;
}

uint64_t sub_19CD5B904(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t destroy for IsSignedInFieldProvider(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1Tm(v1);
}

uint64_t initializeWithCopy for IsSignedInFieldProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

uint64_t sub_19CD5B9B0(uint64_t a1)
{
  destroy for IsSignedInFieldProvider(a1);
  return a1;
}

uint64_t sub_19CD5B9E4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IsSignedInFieldProvider(a2, a1);
  return a2;
}

uint64_t sub_19CD5BA20()
{
  return swift_initClassMetadata2();
}

uint64_t sub_19CD5BA6C()
{
  uint64_t v0;

  return sub_19CE71E70(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_19CD5BA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if ((*(_BYTE *)(v0 + 89) & 1) != 0)
  {
    v4 = (_OWORD *)(v0 + 56);
    if (qword_1EE43D060 != -1)
      swift_once();
    sub_19CFE0A6C();
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB31C0);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_19D0522A0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3360);
    v8 = swift_allocObject();
    v9 = MEMORY[0x1E0DEA968];
    *(_OWORD *)(v8 + 16) = xmmword_19D0522A0;
    *(_QWORD *)(v0 + 120) = v9;
    *(_QWORD *)(v0 + 96) = 0xD00000000000002BLL;
    *(_QWORD *)(v0 + 104) = 0x800000019D071480;
    *v4 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    sub_19CD40658(v0 + 96, v0 + 56);
    *(_BYTE *)(v0 + 88) = 0;
    v10 = *(_OWORD *)(v0 + 72);
    *(_OWORD *)(v8 + 32) = *v4;
    *(_OWORD *)(v8 + 48) = v10;
    *(_BYTE *)(v8 + 64) = *(_BYTE *)(v0 + 88);
    *(_QWORD *)(v7 + 32) = v8;
    Logger.error(_:)(v7, v5, v6);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  else
  {
    *(_QWORD *)(v0 + 128) = *(_QWORD *)(v0 + 168);
    v1 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)(v0 + 152) = MEMORY[0x1E0DEB418];
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(_QWORD *)(v1 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(v0 + 128, 0x724674736F507078, 0xEF79636E65757165, v2, v3);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19CD5BC6C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_19CD5BC74()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19CD5BC7C(uint64_t a1)
{
  uint64_t v1;

  return sub_19CD5BC84(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_19CD5BC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  ValueMetadata *v12;

  v5 = sub_19CFDF278();
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, *MEMORY[0x1E0CCE198], v5);
    sub_19CFDF2A8();
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  if (a3)
  {
    v12 = &type metadata for Bag;
    return StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v12);
  }
  return result;
}

uint64_t sub_19CD5BD48@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[4] = &type metadata for Bag;
  *a2 = &type metadata for Bag;
  a2[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_19CD5BD70(uint64_t a1)
{
  uint64_t v1;

  return sub_19CCDC12C(a1, *(void (**)(uint64_t))(v1 + 16));
}

unint64_t sub_19CD5BD7C()
{
  unint64_t result;

  result = qword_1ECEB2410;
  if (!qword_1ECEB2410)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for MetricsFieldInclusionRequest, &type metadata for MetricsFieldInclusionRequest);
    atomic_store(result, (unint64_t *)&qword_1ECEB2410);
  }
  return result;
}

void static MetricsFieldInclusionRequest.languages.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65676175676E616CLL;
  a1[1] = 0xE900000000000073;
}

void static MetricsFieldInclusionRequest.dsId.getter(_QWORD *a1@<X8>)
{
  *a1 = 1682535268;
  a1[1] = 0xE400000000000000;
}

void static MetricsFieldInclusionRequest.impressionsSnapshot.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000019D06EDE0;
}

unint64_t sub_19CD5BE18()
{
  unint64_t result;

  result = qword_1ECEB2408;
  if (!qword_1ECEB2408)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for MetricsFieldExclusionRequest, &type metadata for MetricsFieldExclusionRequest);
    atomic_store(result, (unint64_t *)&qword_1ECEB2408);
  }
  return result;
}

void static MetricsFieldExclusionRequest.page.getter(_QWORD *a1@<X8>)
{
  *a1 = 1701273968;
  a1[1] = 0xE400000000000000;
}

void static MetricsFieldExclusionRequest.amsMetricsID.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "amsMetricsID");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_19CD5BE98()
{
  qword_1ECEB52A0 = 0x646E655265676170;
  *(_QWORD *)algn_1ECEB52A8 = 0xEA00000000007265;
  qword_1ECEB52B0 = (uint64_t)&unk_1E3DD5CF0;
}

uint64_t type metadata accessor for JSPlatformUnavailableObject()
{
  return objc_opt_self();
}

uint64_t sub_19CD5BEEC(uint64_t a1)
{
  return sub_19CCDDCF0(a1);
}

ValueMetadata *type metadata accessor for JSNetworkPerformanceMetrics()
{
  return &type metadata for JSNetworkPerformanceMetrics;
}

id sub_19CD5BF20(uint64_t a1)
{
  return _sSo7JSValueC9JetEngineE12makeFunction2in5whereABSo9JSContextC_AbH_ABSayABGtKctFZ_0(a1, (uint64_t)sub_19CCD35E4, 0);
}

id sub_19CD5BF50(uint64_t a1)
{
  return _sSo7JSValueC9JetEngineE12makeFunction2in5whereABSo9JSContextC_AbH_ABSayABGtKctFZ_0(a1, (uint64_t)sub_19CD159F8, 0);
}

uint64_t sub_19CD5BF80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = type metadata accessor for PageRenderMetricsPresenter.State();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19CCFECEC(a1, (uint64_t)v5, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_19CCEACE4((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PageRenderMetricsPresenter.State);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB0260);
  v9 = *(_QWORD *)&v5[*(int *)(v8 + 64) + 8];
  sub_19CD33034((uint64_t)&v5[*(int *)(v8 + 48)]);
  sub_19CCEACE4((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PageRenderEvent);
  swift_getObjectType();
  sub_19CFDFE48();
  if (v9)
    sub_19CFDFE54();
  return swift_unknownObjectRelease();
}

uint64_t PageRenderMetricsPresenter.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v1 = v0;
  if (qword_1EE43C258 != -1)
    swift_once();
  if (qword_1EE465C70)
  {
    v2 = qword_1EE465C78;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v2 + 24))(v0, &protocol witness table for PageRenderMetricsPresenter, ObjectType, v2);
  }
  v4 = *(_QWORD *)(v0 + 32);
  v5 = v4 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v6);
  sub_19CD5BF80(v5);
  os_unfair_lock_unlock(v6);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for PageRenderMetricsPresenter.Poster()
{
  return &type metadata for PageRenderMetricsPresenter.Poster;
}

ValueMetadata *type metadata accessor for PageRenderMetricsPresenter.ActivityCounter()
{
  return &type metadata for PageRenderMetricsPresenter.ActivityCounter;
}

uint64_t sub_19CD5C1D0(uint64_t a1)
{
  destroy for PageRenderMetricsPresenter.Configuration(a1);
  return a1;
}

uint64_t sub_19CD5C1FC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PageRenderMetricsPresenter.Configuration(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for PageRenderMetricsPresenter.Configuration()
{
  return &type metadata for PageRenderMetricsPresenter.Configuration;
}

__n128 PageRenderMetricsPresenter.Configuration.init(eventID:topic:pipeline:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  *(_BYTE *)(a6 + 210) = 0;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  v6 = *(_OWORD *)(a5 + 144);
  *(_OWORD *)(a6 + 160) = *(_OWORD *)(a5 + 128);
  *(_OWORD *)(a6 + 176) = v6;
  *(_OWORD *)(a6 + 192) = *(_OWORD *)(a5 + 160);
  *(_BYTE *)(a6 + 208) = *(_BYTE *)(a5 + 176);
  v7 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a6 + 96) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a6 + 112) = v7;
  v8 = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a6 + 128) = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a6 + 144) = v8;
  v9 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 48) = v9;
  result = *(__n128 *)(a5 + 32);
  v11 = *(_OWORD *)(a5 + 48);
  *(__n128 *)(a6 + 64) = result;
  *(_OWORD *)(a6 + 80) = v11;
  *(_BYTE *)(a6 + 209) = 2;
  *(_QWORD *)(a6 + 216) = 0;
  *(_QWORD *)(a6 + 224) = 0;
  *(_BYTE *)(a6 + 232) = 1;
  return result;
}

uint64_t PageRenderMetricsPresenter.Configuration.withPrecision(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t result;

  v4 = *a1;
  result = sub_19CD5C1FC(v2, a2);
  *(_BYTE *)(a2 + 209) = v4;
  return result;
}

ValueMetadata *type metadata accessor for AppleServicesPropertyScope()
{
  return &type metadata for AppleServicesPropertyScope;
}

ValueMetadata *type metadata accessor for AppleServicesPropertyScope.AMSGrandSlamTokenID.CodingKeys()
{
  return &type metadata for AppleServicesPropertyScope.AMSGrandSlamTokenID.CodingKeys;
}

unint64_t sub_19CD5C2FC()
{
  unint64_t result;

  result = qword_1EE43BE08;
  if (!qword_1EE43BE08)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05F1C8, &type metadata for AppleServicesPropertyScope.AMSGrandSlamTokenID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE43BE08);
  }
  return result;
}

unint64_t sub_19CD5C340()
{
  unint64_t result;

  result = qword_1EE43BE00;
  if (!qword_1EE43BE00)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05F1F0, &type metadata for AppleServicesPropertyScope.AMSGrandSlamTokenID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE43BE00);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleServicesPropertyScope.IsAnonymityEnabledProperty.CodingKeys()
{
  return &type metadata for AppleServicesPropertyScope.IsAnonymityEnabledProperty.CodingKeys;
}

unint64_t sub_19CD5C39C()
{
  unint64_t result;

  result = qword_1EE43BDF0;
  if (!qword_1EE43BDF0)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05EEB8, &type metadata for AppleServicesPropertyScope.IsAnonymityEnabledProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE43BDF0);
  }
  return result;
}

unint64_t sub_19CD5C3E0()
{
  unint64_t result;

  result = qword_1EE43BDE8;
  if (!qword_1EE43BDE8)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05EEE0, &type metadata for AppleServicesPropertyScope.IsAnonymityEnabledProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE43BDE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleServicesPropertyScope.SigningStyleProperty.CodingKeys()
{
  return &type metadata for AppleServicesPropertyScope.SigningStyleProperty.CodingKeys;
}

unint64_t sub_19CD5C43C()
{
  unint64_t result;

  result = qword_1EE43BDD8;
  if (!qword_1EE43BDD8)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05EF70, &type metadata for AppleServicesPropertyScope.SigningStyleProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE43BDD8);
  }
  return result;
}

unint64_t sub_19CD5C480()
{
  unint64_t result;

  result = qword_1EE43BDD0;
  if (!qword_1EE43BDD0)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05EF98, &type metadata for AppleServicesPropertyScope.SigningStyleProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE43BDD0);
  }
  return result;
}

uint64_t sub_19CD5C4C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_19CD5C4D0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PageRenderEvent();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t static ClassicDataVaultUtilities.createDataVault(at:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v4[24];
  ValueMetadata *v5;

  v5 = &type metadata for ClassicDataVaultUtilities._DefaultDataVaultAccessor;
  sub_19CCEA370(a1, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
}

ValueMetadata *type metadata accessor for PageRenderEventPrecision()
{
  return &type metadata for PageRenderEventPrecision;
}

uint64_t sub_19CD5C590(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_19CD5C5AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v8 = *(_QWORD **)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  swift_bridgeObjectRetain();
  v10 = v8;
  if (v9 >= 5)
  {
    sub_19CF7D5F0(0, 1);
    v10 = *(_QWORD **)a1;
  }
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_19CD4D730(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)sub_19CD4D730((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v10[2] = v13 + 1;
  v14 = &v10[2 * v13];
  v14[4] = a2;
  v14[5] = a3;
  *(_QWORD *)a1 = v10;
  *a4 = v8;
  return result;
}

uint64_t sub_19CD5C6A0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t sub_19CD5C6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 1)
    return swift_release();
  if (!a5)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleServicesURLProtocol()
{
  return &type metadata for AppleServicesURLProtocol;
}

uint64_t dispatch thunk of ViewControllerPresenter.viewWillAppear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ViewControllerPresenter.viewDidAppear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ViewControllerPresenter.viewDidLoad()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

Swift::Void __swiftcall StartUpPerformanceEvent.start()()
{
  if (!sub_19CF9E1EC())
    sub_19CFAF2E4((unint64_t)"JetEngine/StartUpPerformanceEvent.swift", 0x27uLL, 2, 0x89uLL);
}

ValueMetadata *type metadata accessor for StartUpPerformanceEvent.State()
{
  return &type metadata for StartUpPerformanceEvent.State;
}

unint64_t sub_19CD5C77C()
{
  unint64_t result;

  result = qword_1EE437130;
  if (!qword_1EE437130)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D068B18, &type metadata for StartUpPerformanceEvent.RawCheckpoint);
    atomic_store(result, (unint64_t *)&qword_1EE437130);
  }
  return result;
}

unint64_t sub_19CD5C7C0()
{
  unint64_t result;

  result = qword_1EE437128;
  if (!qword_1EE437128)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D068B40, &type metadata for StartUpPerformanceEvent.RawCheckpoint);
    atomic_store(result, (unint64_t *)&qword_1EE437128);
  }
  return result;
}

unint64_t sub_19CD5C808()
{
  unint64_t result;

  result = qword_1EE436F80;
  if (!qword_1EE436F80)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for StartUpPerformanceEvent.Checkpoint, &type metadata for StartUpPerformanceEvent.Checkpoint);
    atomic_store(result, (unint64_t *)&qword_1EE436F80);
  }
  return result;
}

void static StartUpPerformanceEvent.Checkpoint.bootstrapFinished.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_19CD5C854(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76[3];

  v2 = v1;
  v3 = *a1;
  v68 = a1[1];
  v64 = *a1 + 64;
  v4 = 1 << *(_BYTE *)(*a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*a1 + 64);
  v65 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v7 << 6);
LABEL_8:
      v11 = *(_QWORD *)(v3 + 56);
      v12 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
      v13 = v12[1];
      *(_QWORD *)&v70 = *v12;
      *((_QWORD *)&v70 + 1) = v13;
      sub_19CCD5B84(v11 + 40 * v10, (uint64_t)&v71);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_82;
    if (v14 < v65)
    {
      v15 = *(_QWORD *)(v64 + 8 * v14);
      if (v15)
        goto LABEL_12;
      v16 = v7 + 2;
      ++v7;
      if (v14 + 1 < v65)
      {
        v15 = *(_QWORD *)(v64 + 8 * v16);
        if (v15)
          goto LABEL_15;
        v7 = v14 + 1;
        if (v14 + 2 < v65)
        {
          v15 = *(_QWORD *)(v64 + 8 * (v14 + 2));
          if (v15)
          {
            v14 += 2;
            goto LABEL_12;
          }
          v16 = v14 + 3;
          v7 = v14 + 2;
          if (v14 + 3 < v65)
          {
            v15 = *(_QWORD *)(v64 + 8 * v16);
            if (v15)
            {
LABEL_15:
              v14 = v16;
LABEL_12:
              v6 = (v15 - 1) & v15;
              v10 = __clz(__rbit64(v15)) + (v14 << 6);
              v7 = v14;
              goto LABEL_8;
            }
            while (1)
            {
              v14 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_84;
              if (v14 >= v65)
                break;
              v15 = *(_QWORD *)(v64 + 8 * v14);
              ++v16;
              if (v15)
                goto LABEL_12;
            }
            v7 = v65 - 1;
          }
        }
      }
    }
    v6 = 0;
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
LABEL_27:
    sub_19CCC290C((uint64_t)&v70, (uint64_t)&v74, &qword_1EE43BBA8);
    v17 = v75;
    if (!v75)
      break;
    v18 = v74;
    sub_19CCD14C4(v76, (uint64_t)&v70);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = (_QWORD *)*v2;
    v69 = (_QWORD *)*v2;
    *v2 = 0x8000000000000000;
    v22 = sub_19CCED700(v18, v17);
    v23 = v20[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v26 = v21;
    if (v20[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v29 = v69;
        if ((v21 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_19CD10EAC();
        v29 = v69;
        if ((v26 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_19CD10838(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_19CCED700(v18, v17);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_86;
      v22 = v27;
      v29 = v69;
      if ((v26 & 1) != 0)
      {
LABEL_4:
        v8 = v29[7] + 40 * v22;
        __swift_destroy_boxed_opaque_existential_1Tm(v8);
        sub_19CCD14C4(&v70, v8);
        goto LABEL_5;
      }
    }
    v29[(v22 >> 6) + 8] |= 1 << v22;
    v30 = (_QWORD *)(v29[6] + 16 * v22);
    *v30 = v18;
    v30[1] = v17;
    sub_19CCD14C4(&v70, v29[7] + 40 * v22);
    v31 = v29[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_80;
    v29[2] = v33;
    swift_bridgeObjectRetain();
LABEL_5:
    *v2 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v66 = v68 + 64;
  v34 = 1 << *(_BYTE *)(v68 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & *(_QWORD *)(v68 + 64);
  v67 = (unint64_t)(v34 + 63) >> 6;
  swift_bridgeObjectRetain();
  v37 = 0;
  while (2)
  {
    if (v36)
    {
      v39 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v40 = v39 | (v37 << 6);
      goto LABEL_46;
    }
    v44 = v37 + 1;
    if (__OFADD__(v37, 1))
      goto LABEL_83;
    if (v44 >= v67)
      goto LABEL_64;
    v45 = *(_QWORD *)(v66 + 8 * v44);
    if (v45)
    {
LABEL_50:
      v36 = (v45 - 1) & v45;
      v40 = __clz(__rbit64(v45)) + (v44 << 6);
      v37 = v44;
LABEL_46:
      v41 = *(_QWORD *)(v68 + 56);
      v42 = (_QWORD *)(*(_QWORD *)(v68 + 48) + 16 * v40);
      v43 = v42[1];
      *(_QWORD *)&v70 = *v42;
      *((_QWORD *)&v70 + 1) = v43;
      sub_19CCD5B84(v41 + 40 * v40, (uint64_t)&v71);
      swift_bridgeObjectRetain();
LABEL_65:
      sub_19CCC290C((uint64_t)&v70, (uint64_t)&v74, &qword_1ECEB1EE8);
      v47 = v75;
      if (!v75)
        return swift_release();
      v48 = v74;
      sub_19CCD14C4(v76, (uint64_t)&v70);
      v49 = swift_isUniquelyReferenced_nonNull_native();
      v50 = (_QWORD *)v2[1];
      v2[1] = 0x8000000000000000;
      v52 = sub_19CCED700(v48, v47);
      v53 = v50[2];
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        goto LABEL_79;
      v56 = v51;
      if (v50[3] >= v55)
      {
        if ((v49 & 1) != 0)
        {
          v59 = v50;
          if ((v51 & 1) == 0)
            goto LABEL_73;
        }
        else
        {
          sub_19CD10EB8();
          v59 = v50;
          if ((v56 & 1) == 0)
            goto LABEL_73;
        }
      }
      else
      {
        sub_19CD10500(v55, v49);
        v57 = sub_19CCED700(v48, v47);
        if ((v56 & 1) != (v58 & 1))
          goto LABEL_87;
        v52 = v57;
        v59 = v50;
        if ((v56 & 1) == 0)
        {
LABEL_73:
          v59[(v52 >> 6) + 8] |= 1 << v52;
          v60 = (_QWORD *)(v59[6] + 16 * v52);
          *v60 = v48;
          v60[1] = v47;
          sub_19CCD14C4(&v70, v59[7] + 40 * v52);
          v61 = v59[2];
          v32 = __OFADD__(v61, 1);
          v62 = v61 + 1;
          if (v32)
            goto LABEL_81;
          v59[2] = v62;
          swift_bridgeObjectRetain();
          goto LABEL_43;
        }
      }
      v38 = v59[7] + 40 * v52;
      __swift_destroy_boxed_opaque_existential_1Tm(v38);
      sub_19CCD14C4(&v70, v38);
LABEL_43:
      v2[1] = v59;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  v46 = v37 + 2;
  ++v37;
  if (v44 + 1 >= v67)
    goto LABEL_64;
  v45 = *(_QWORD *)(v66 + 8 * v46);
  if (v45)
  {
LABEL_53:
    v44 = v46;
    goto LABEL_50;
  }
  v37 = v44 + 1;
  if (v44 + 2 >= v67)
    goto LABEL_64;
  v45 = *(_QWORD *)(v66 + 8 * (v44 + 2));
  if (v45)
  {
    v44 += 2;
    goto LABEL_50;
  }
  v46 = v44 + 3;
  v37 = v44 + 2;
  if (v44 + 3 >= v67)
  {
LABEL_64:
    v36 = 0;
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    goto LABEL_65;
  }
  v45 = *(_QWORD *)(v66 + 8 * v46);
  if (v45)
    goto LABEL_53;
  while (1)
  {
    v44 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v44 >= v67)
    {
      v37 = v67 - 1;
      goto LABEL_64;
    }
    v45 = *(_QWORD *)(v66 + 8 * v44);
    ++v46;
    if (v45)
      goto LABEL_50;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  sub_19CFE082C();
  __break(1u);
LABEL_87:
  result = sub_19CFE082C();
  __break(1u);
  return result;
}

uint64_t MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_19CCC5ACC(a1, a2, (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t))sub_19CCE6418, a3);
}

uint64_t sub_19CD5CEF4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 728) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t initializeWithCopy for JSManagedSourceProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t sub_19CD5CFB0(uint64_t a1)
{
  destroy for LocalizedStringsBundle(a1);
  return a1;
}

ValueMetadata *type metadata accessor for JSManagedSourceProvider()
{
  return &type metadata for JSManagedSourceProvider;
}

uint64_t sub_19CD5CFF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6);
}

uint64_t sub_19CD5D058(uint64_t a1)
{
  destroy for IsSignedInFieldProvider(a1);
  return a1;
}

uint64_t sub_19CD5D08C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IsSignedInFieldProvider(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for AsyncObjectGraphMetrics.BuiltDependency()
{
  return &type metadata for AsyncObjectGraphMetrics.BuiltDependency;
}

uint64_t sub_19CD5D0D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_19CCCB8F0(a1, v2 + ((v4 + 48) & ~v4), v3, *(_QWORD *)(v2 + 40), a2);
}

uint64_t dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_19CD5D110(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = *v1;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch();
}

uint64_t AMSMetricsEventRecorder.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);
  swift_bridgeObjectRelease();
  sub_19CCE9F48(*(_QWORD *)(v0 + 96));
  return swift_deallocClassInstance();
}

uint64_t AMSMetricsEventRecorder.withDecorator(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  sub_19CCEA360(a1);
  sub_19CCE9F48(v3);
  return swift_retain();
}

uint64_t sub_19CD5D1BC(uint64_t a1, uint64_t a2)
{
  return sub_19CCF44B4(&qword_1ECEB0B38, a2, (uint64_t (*)(uint64_t))type metadata accessor for _DispatchQueueExecutor, (uint64_t)&unk_19D05DEF8);
}

uint64_t type metadata accessor for WrappedMetricsPipeline()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for URLJetPackAssetRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for URLJetPackAssetRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19CD5D224()
{
  return sub_19CCC5C88((unint64_t *)&unk_1ECEB0910, (uint64_t (*)(uint64_t))type metadata accessor for URLJetPackAssetRequest, (uint64_t)&protocol conformance descriptor for URLJetPackAssetRequest);
}

ValueMetadata *type metadata accessor for MetricsSamplingLottery()
{
  return &type metadata for MetricsSamplingLottery;
}

uint64_t sub_19CD5D260(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a2 + 40, a1 + 40);
  return a2;
}

id sub_19CD5D2C4()
{
  if (qword_1ECEAFFE8 != -1)
    swift_once();
  qword_1ECEAFFB8 = qword_1ECEAFFE0;
  return (id)qword_1ECEAFFE0;
}

_QWORD *sub_19CD5D30C()
{
  _QWORD *result;
  uint64_t v1;

  result = sub_19CCF710C();
  *(_QWORD *)&xmmword_1ECEAFF80 = result;
  *((_QWORD *)&xmmword_1ECEAFF80 + 1) = v1;
  return result;
}

uint64_t sub_19CD5D32C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_2Tm;
  uint64_t v19;
  uint64_t v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43CA80);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PageIntentInstrumentation();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19CCF8C5C(a1, (uint64_t)v8, &qword_1EE43CA80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_19CCECFE4((uint64_t)v8, &qword_1EE43CA80);
    v23 = v2[2];
    swift_bridgeObjectRetain();
    DependencyDictionary.remove(dependencyFor:)(v9);
    swift_beginAccess();
    v14 = v2[4];
    v21 = v2[3];
    v22 = v14;
    swift_bridgeObjectRetain();
    sub_19CFDF698();
    sub_19CFE0A90();
    sub_19CFDF698();
    swift_bridgeObjectRelease();
    v15 = v21;
    v21 = v23;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v4 + 96))(v15, v22, &v21);
  }
  else
  {
    sub_19CFC4468((uint64_t)v8, (uint64_t)v13);
    v20[3] = v9;
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v20);
    sub_19CD33A50((uint64_t)v13, (uint64_t)boxed_opaque_existential_2Tm);
    v19 = v9;
    v16 = sub_19CD0CDB8(&v19);
    sub_19CD4C098((uint64_t)&v19);
    sub_19CCC9630((uint64_t)v13);
  }
  return v16;
}

uint64_t IntentDispatchOptions.withInstrumentationForPrimaryPageData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v18[3];
  char v19;
  ValueMetadata *v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43CA80);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PageIntentInstrumentation();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v18[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ECEB1330 != -1)
    swift_once();
  v18[0] = v0;
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  swift_task_localValuePush();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_19CCC2F50(v10);
  swift_bridgeObjectRelease();
  swift_task_localValuePop();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 32);
    v13 = v12 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v12 + 16);
    v14 = (os_unfair_lock_s *)(v12 + ((*(unsigned int *)(*(_QWORD *)v12 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v14);
    sub_19CCBE7E4(v13, (uint64_t)v9);
    os_unfair_lock_unlock(v14);
    swift_release();
    swift_storeEnumTagMultiPayload();
    sub_19CD33A50((uint64_t)v9, (uint64_t)v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    sub_19CD5D32C((uint64_t)v4);
    sub_19CCECFE4((uint64_t)v4, &qword_1EE43CA80);
    v15 = sub_19CCC9E74((uint64_t)&type metadata for IntentDispatchOptions.BadOrderingCanary);
    swift_release();
    swift_release();
    sub_19CCC9630((uint64_t)v9);
  }
  else
  {
    v20 = &type metadata for IntentDispatchOptions.BadOrderingCanary;
    v18[2] = 39;
    v19 = 2;
    v18[0] = (uint64_t)&type metadata for IntentDispatchOptions.BadOrderingCanary;
    v18[1] = (uint64_t)"withInstrumentationForPrimaryPageData()";
    v15 = sub_19CD0CDB8(v18);
    sub_19CD4C098((uint64_t)v18);
  }
  return v15;
}

ValueMetadata *type metadata accessor for IntentDispatchOptions.BadOrderingCanary()
{
  return &type metadata for IntentDispatchOptions.BadOrderingCanary;
}

void static ImpressionsCalculator.Configuration.zero.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x3F847AE147AE147BLL;
  *(_QWORD *)(a1 + 8) = 48;
  *(_QWORD *)(a1 + 16) = 0xE100000000000000;
  *(_BYTE *)(a1 + 24) = 1;
}

double ImpressionsCalculator.viewBounds.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 264);
}

uint64_t sub_19CD5D7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  char v28;
  _QWORD v29[4];
  _QWORD *v30;
  _OWORD v31[2];

  if (!*(_QWORD *)(a3 + 16))
  {
    v26 = 0u;
    v27 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v6 = sub_19CD3FD1C(a1, a2);
  if ((v7 & 1) == 0)
  {
    v26 = 0u;
    v27 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_19CD436B0(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_8:
    sub_19CCECFE4((uint64_t)&v26, &qword_1ECEB3370);
    return 0;
  }
  sub_19CD433C0(&v26, v31);
  sub_19CD436B0((uint64_t)v31, (uint64_t)&v26);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB2B70);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    return v23;
  }
  if (qword_1ECEB31D8 != -1)
    swift_once();
  v9 = (void *)qword_1ECEB30F0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB31C0);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_19D052350;
  v11 = v9;
  v30 = sub_19CD40918(0, 27, 0, MEMORY[0x1E0DEE9D8]);
  v12._object = (void *)0x800000019D06F470;
  v12._countAndFlagsBits = 0xD00000000000001ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  v29[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43F0D8);
  v29[0] = a1;
  v29[1] = a2;
  sub_19CD40794((uint64_t)v29, (uint64_t)v25);
  v23 = 0u;
  v24 = 0u;
  swift_bridgeObjectRetain();
  sub_19CD40658((uint64_t)v25, (uint64_t)&v23);
  v28 = 1;
  v26 = v23;
  v27 = v24;
  v13 = v30;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_19CD40918(0, v13[2] + 1, 1, v13);
  v15 = v13[2];
  v14 = v13[3];
  if (v15 >= v14 >> 1)
    v13 = sub_19CD40918((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
  v13[2] = v15 + 1;
  v16 = &v13[5 * v15];
  v17 = v26;
  v18 = v27;
  *((_BYTE *)v16 + 64) = v28;
  *((_OWORD *)v16 + 2) = v17;
  *((_OWORD *)v16 + 3) = v18;
  v30 = v13;
  sub_19CCECFE4((uint64_t)v29, &qword_1ECEB3370);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  *(_QWORD *)(v10 + 32) = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3360);
  v20 = swift_allocObject();
  v21 = MEMORY[0x1E0DEA968];
  *(_OWORD *)(v20 + 16) = xmmword_19D0522A0;
  *((_QWORD *)&v24 + 1) = v21;
  *(_QWORD *)&v23 = 0xD000000000000027;
  *((_QWORD *)&v23 + 1) = 0x800000019D06F490;
  v26 = 0u;
  v27 = 0u;
  sub_19CD40658((uint64_t)&v23, (uint64_t)&v26);
  *(_BYTE *)(v20 + 64) = 0;
  v22 = v27;
  *(_OWORD *)(v20 + 32) = v26;
  *(_OWORD *)(v20 + 48) = v22;
  *(_QWORD *)(v10 + 40) = v20;
  *(_QWORD *)&v26 = v11;
  LOBYTE(v23) = 1;
  OSLogger.log(contentsOf:withLevel:)((Swift::OpaquePointer)v10, (JetEngine::LogMessageLevel)&v23);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  return 0;
}

void static MetricsFieldsContext.pageFields.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x800000019D06F4C0;
}

uint64_t sub_19CD5DB30(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  __int128 v10;

  if (!*(_QWORD *)(a1 + 16)
    || (v2 = sub_19CD4B638((uint64_t)&type metadata for IntentDispatchOptions.BadOrderingCanary), (v3 & 1) == 0))
  {
    v5 = sub_19CD49AD0(&qword_1EE43A630);
    if (v5)
    {
      sub_19CD257E8(a1, v5, v6, (uint64_t)&v10);
      return v10;
    }
    return 0;
  }
  sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v9);
  sub_19CD433C0(v9, &v10);
  sub_19CD436B0((uint64_t)&v10, (uint64_t)v9);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
    v4 = v8;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DD50);
  if (swift_dynamicCast())
  {
    v4 = sub_19CDACC64();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE43DD58);
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_19CFB43B8((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
    return 0;
  }
  sub_19CFE010C();
  sub_19CFDF698();
  sub_19CFE02E0();
  sub_19CFDF698();
  sub_19CFDF698();
  sub_19CFDF698();
  result = sub_19CFE0340();
  __break(1u);
  return result;
}

uint64_t DependencyDictionary.remove(dependencyFor:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[2];

  v2 = v1;
  v3 = sub_19CD4B638(a1);
  if ((v4 & 1) != 0)
  {
    v5 = v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v1;
    v9 = *v2;
    *v2 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_19CD43200();
      v7 = v9;
    }
    sub_19CD433C0((_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v5), v10);
    sub_19CCFCEE4(v5, v7);
    *v2 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  return sub_19CD3F190((uint64_t)v10);
}

uint64_t sub_19CD5DEA0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = a1;
  *(_QWORD *)(v1 + 168) = sub_19CCE5204(0, &qword_1ECEB24A8);
  return swift_task_switch();
}

uint64_t sub_19CD5DEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return swift_task_switch();
}

uint64_t sub_19CD5DF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return swift_task_switch();
}

uint64_t sub_19CD5DF24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = a2;
  return swift_task_switch();
}

uint64_t sub_19CD5DF3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  if ((sub_19CD25A24(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 56)) & 1) != 0)
  {
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v1;
    *v1 = v0;
    v1[1] = sub_19CD5E020;
    return sub_19CCD5E1C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 56));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v3, 1, 1, AssociatedTypeWitness);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_19CD5E020()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19CD5E084(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 48) = a3;
  *(_QWORD *)(v5 + 56) = a5;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  *(_OWORD *)(v5 + 64) = *a4;
  return swift_task_switch();
}

uint64_t sub_19CD5E0A8(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return swift_release();
}

uint64_t sub_19CD5E0CC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for ClosureEventObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClosureEventObserver);
}

uint64_t sub_19CD5E120()
{
  return sub_19CD09560(&qword_1EE43BDB0, &qword_1EE43BDA8, (uint64_t (*)(void))sub_19CD5E144, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_19CD5E144()
{
  unint64_t result;

  result = qword_1EE43BDA0;
  if (!qword_1EE43BDA0)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for AppleServicesEncoder.SigningStyle, &type metadata for AppleServicesEncoder.SigningStyle);
    atomic_store(result, (unint64_t *)&qword_1EE43BDA0);
  }
  return result;
}

uint64_t TransientStateStore.__deallocating_deinit()
{
  TransientStateStore.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_19CD5E1A8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TransientStateStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransientStateStore);
}

uint64_t sub_19CD5E21C()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for SentryConfiguration()
{
  return &type metadata for SentryConfiguration;
}

uint64_t SentryConfiguration.tags.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*SentryConfiguration.tags.modify())()
{
  return nullsub_1;
}

uint64_t static SentryConfiguration.defaultEventRecorder(bag:)@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;

  v6 = *a1;
  swift_unknownObjectRetain();
  v3 = _s9JetEngine23AMSMetricsEventRecorderC3bag12defaultTopicAcA3BagV_SStcfC_0(&v6, 0, 0xE000000000000000);
  v4 = v3[12];
  v3[12] = sub_19CECD974;
  v3[13] = 0;
  sub_19CCE9F48(v4);
  result = type metadata accessor for AMSMetricsEventRecorder();
  a2[3] = result;
  a2[4] = &protocol witness table for AMSMetricsEventRecorder;
  *a2 = v3;
  return result;
}

uint64_t SentryConfiguration.init(eventRecorder:projectName:topic:javascriptVersion:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t result;

  result = sub_19CCD14C4(a1, (uint64_t)a8);
  a8[5] = a2;
  a8[6] = a3;
  a8[7] = a4;
  a8[8] = a5;
  a8[9] = a6;
  a8[10] = a7;
  a8[12] = 0;
  a8[13] = 0;
  a8[11] = 0;
  return result;
}

uint64_t SentryConfiguration.environment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RunLoopWorkerThread.PendingTask()
{
  return &type metadata for RunLoopWorkerThread.PendingTask;
}

uint64_t sub_19CD5E3C8()
{
  uint64_t result;

  sub_19CCE5204(0, &qword_1ECEB24D0);
  result = sub_19CFDFF08();
  qword_1ECEB23D0 = result;
  return result;
}

ValueMetadata *type metadata accessor for PreferenceNamespace()
{
  return &type metadata for PreferenceNamespace;
}

uint64_t type metadata accessor for OperationTranscript()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for OperationCheckpoint()
{
  return &type metadata for OperationCheckpoint;
}

ValueMetadata *type metadata accessor for ImpressionsTracking.AppearanceJournal.Time()
{
  return &type metadata for ImpressionsTracking.AppearanceJournal.Time;
}

uint64_t sub_19CD5E468()
{
  uint64_t result;

  sub_19CD14B0C();
  result = sub_19CFDFF44();
  qword_1EE43A150 = result;
  return result;
}

JetEngine::LintedMetricsEvent __swiftcall LintedMetricsEvent.init(fields:issues:)(Swift::OpaquePointer fields, Swift::OpaquePointer issues)
{
  Swift::OpaquePointer *v2;
  JetEngine::LintedMetricsEvent result;

  v2->_rawValue = fields._rawValue;
  v2[1]._rawValue = issues._rawValue;
  result.issues = issues;
  result.fields = fields;
  return result;
}

ValueMetadata *type metadata accessor for ImpressionsContext()
{
  return &type metadata for ImpressionsContext;
}

void __swiftcall ImpressionsContext.init()(JetEngine::ImpressionsContext *__return_ptr retstr)
{
  retstr->groupId._countAndFlagsBits = 0;
  retstr->groupId._object = (void *)0xE000000000000000;
  retstr->position.value = 0;
  retstr->position.is_nil = 1;
  retstr->parentContextID = 0u;
  retstr->uniqueImpressionID = 0u;
  retstr->uniqueParentID = 0u;
}

uint64_t PipelineEntryTask.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for PipelineEntryTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipelineEntryTask);
}

uint64_t type metadata accessor for JSLocalizerObject()
{
  return objc_opt_self();
}

uint64_t ImpressionMetrics.fields.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_19CD5E540()
{
  unint64_t result;

  result = qword_1ECEB0748;
  if (!qword_1ECEB0748)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for ImpressionMetrics.ID, &type metadata for ImpressionMetrics.ID);
    atomic_store(result, (unint64_t *)&qword_1ECEB0748);
  }
  return result;
}

uint64_t sub_19CD5E584(uint64_t a1)
{
  destroy for IsSignedInFieldProvider(a1);
  return a1;
}

uint64_t sub_19CD5E5B8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IsSignedInFieldProvider(a2, a1);
  return a2;
}

uint64_t sub_19CD5E5F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19CCBE344;
  v4[11] = a1;
  v4[12] = v1;
  return swift_task_switch();
}

uint64_t sub_19CD5E654()
{
  uint64_t v0;
  _OWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  id v29;
  char v30;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(_QWORD **)(v0 + 88);
  v3 = *(uint64_t **)(v0 + 96);
  v4 = v2[3];
  v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  v7 = v6;
  v8 = *v3;
  if (*v3)
  {
    if (!*(_QWORD *)(v6 + 16)
      || (v9 = sub_19CD3FD1C(0x707954746E657665, 0xE900000000000065), (v10 & 1) == 0)
      || (sub_19CD436B0(*(_QWORD *)(v7 + 56) + 32 * v9, v0 + 16), (swift_dynamicCast() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v11 = sub_19CD0BB80(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD **)(v0 + 96);
  v13 = v12[4];
  v14 = v12[5];
  __swift_project_boxed_opaque_existential_1(v12 + 1, v13);
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(v14 + 8))(&v29, v13, v14);
  v15 = v29;
  if (v29 && (v16 = objc_msgSend(v29, sel_ams_DSID), v15, v16))
  {
    v17 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 40) = sub_19CD16BB8();
    *(_QWORD *)(v0 + 16) = v16;
    v19 = v2[3];
    v18 = v2[4];
    __swift_mutable_project_boxed_opaque_existential_1(v17, v19);
    v20 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v18 + 16);
    v21 = v16;
    v20(v0 + 16, 1682535268, 0xE400000000000000, v19, v18);

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  else
  {
    if (qword_1ECEB31D8 != -1)
      swift_once();
    v22 = (void *)qword_1ECEB30F0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB31C0);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_19D0522A0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3360);
    v24 = swift_allocObject();
    v25 = MEMORY[0x1E0DEA968];
    *(_OWORD *)(v24 + 16) = xmmword_19D0522A0;
    *(_QWORD *)(v0 + 80) = v25;
    *(_QWORD *)(v0 + 56) = 0xD00000000000001FLL;
    *(_QWORD *)(v0 + 64) = 0x800000019D073D80;
    *v1 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    v26 = v22;
    sub_19CD40658(v0 + 56, v0 + 16);
    *(_BYTE *)(v0 + 48) = 0;
    v27 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v24 + 32) = *v1;
    *(_OWORD *)(v24 + 48) = v27;
    *(_BYTE *)(v24 + 64) = *(_BYTE *)(v0 + 48);
    *(_QWORD *)(v23 + 32) = v24;
    v29 = v26;
    v30 = 0;
    OSLogger.log(contentsOf:withLevel:)((Swift::OpaquePointer)v23, (JetEngine::LogMessageLevel)&v30);
    swift_bridgeObjectRelease();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for BagLanguageSource()
{
  swift_unknownObjectRelease();
  return swift_release();
}

ValueMetadata *type metadata accessor for BagLanguageSource()
{
  return &type metadata for BagLanguageSource;
}

_QWORD *BagLanguageSource.init(bag:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = sub_19CEC12F4;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_19CD5E998()
{
  return swift_task_switch();
}

uint64_t sub_19CD5E9AC()
{
  return swift_task_switch();
}

uint64_t sub_19CD5E9C4()
{
  uint64_t result;

  result = sub_19CFDF554();
  qword_1ECEAFF60 = result;
  return result;
}

uint64_t sub_19CD5E9F4()
{
  uint64_t result;

  result = sub_19CFDF554();
  qword_1ECEAFF50 = result;
  return result;
}

double sub_19CD5EA2C()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2568);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 6;
  *(_OWORD *)(v0 + 16) = xmmword_19D050750;
  *(_QWORD *)(v0 + 32) = &type metadata for _AMSBagProtocolForBagRule;
  *(_QWORD *)(v0 + 40) = &off_1ECEB1988;
  *(_QWORD *)(v0 + 48) = &type metadata for _BagForAMSBagProtocolRule;
  *(_QWORD *)(v0 + 56) = &off_1ECEB19E8;
  *(_QWORD *)(v0 + 64) = &_s31_AccountProviderForAccountsRuleON;
  *(_QWORD *)(v0 + 72) = &off_1ECEB1928;
  *(_QWORD *)(v0 + 80) = &_s31_AccountsForAccountProviderRuleON;
  *(_QWORD *)(v0 + 88) = &off_1ECEB19B0;
  *(_QWORD *)(v0 + 96) = &_s39_UndeprecateAsyncObjectGraphMetricsRuleON;
  *(_QWORD *)(v0 + 104) = &off_1ECEB1A28;
  *(_QWORD *)(v0 + 112) = &_s37_DeprecateAsyncObjectGraphMetricsRuleON;
  *(_QWORD *)(v0 + 120) = &off_1ECEB1A08;
  off_1ECEB2560 = (_UNKNOWN *)v0;
  return result;
}

uint64_t destroy for ScalarDictionary.Value(uint64_t a1)
{
  return sub_19CD5EAF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_19CD5EAF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 3)
    return swift_bridgeObjectRelease();
  return result;
}

ValueMetadata *type metadata accessor for ScalarDictionary.Value()
{
  return &type metadata for ScalarDictionary.Value;
}

uint64_t sub_19CD5EB18()
{
  sub_19CCC4BB0();
  return swift_deallocClassInstance();
}

uint64_t sub_19CD5EB38@<X0>(const char *a1@<X0>, int *a2@<X8>)
{
  uint64_t v2;

  return sub_19CCC504C(a1, *(_QWORD *)(v2 + 16), *(_DWORD *)(v2 + 24), a2);
}

unint64_t sub_19CD5EB58()
{
  unint64_t result;

  result = qword_1ECEB1BB0;
  if (!qword_1ECEB1BB0)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for MetricsEventType, &type metadata for MetricsEventType);
    atomic_store(result, (unint64_t *)&qword_1ECEB1BB0);
  }
  return result;
}

uint64_t type metadata accessor for LocalPreferences.UserDefaultsObserver()
{
  return objc_opt_self();
}

uint64_t sub_19CD5EBBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  char v9;
  char v10;
  char v11;

  v5 = *(_QWORD *)result;
  if (!*(_QWORD *)(*(_QWORD *)result + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v8 = sub_19CD3FD1C(a2, a3);
  if ((v9 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_5:
    v11 = 1;
    goto LABEL_6;
  }
  v10 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v8);
  result = swift_bridgeObjectRelease();
  v11 = v10 ^ 1;
LABEL_6:
  *a4 = v11 & 1;
  return result;
}

uint64_t *sub_19CD5EC44()
{
  return sub_19CCBE548();
}

uint64_t JoinPipelineTask.__allocating_init(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;

  result = swift_allocObject();
  v5 = *a2;
  *(_QWORD *)(result + 16) = *a1;
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t sub_19CD5ECA8()
{
  return sub_19CCCBD10();
}

uint64_t type metadata accessor for JoinPipelineTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JoinPipelineTask);
}

uint64_t type metadata accessor for JSPlatformObject()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for JSBytecodeSource(uint64_t a1)
{
  return sub_19CCFE99C(a1, qword_1EE43BA98);
}

uint64_t dispatch thunk of AnyPreferenceKey.lookupName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_19CD5ED00()
{
  return swift_allocateGenericValueMetadata();
}

void *ActionDispatcher.targetQueue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void sub_19CD5ED2C()
{
  qword_1ECEB0AF0 = -1;
}

uint64_t type metadata accessor for PageRenderField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageRenderField);
}

uint64_t sub_19CD5ED48()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MonotonicTimeReference();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Int sub_19CD5EDC4()
{
  double ProcessLaunchTimeInterval;

  ProcessLaunchTimeInterval = JEGestaltGetProcessLaunchTimeInterval();
  return MonotonicTime.init(timeInterval:)(ProcessLaunchTimeInterval).seconds;
}

uint64_t sub_19CD5EDE0()
{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43BEB8);
  result = swift_allocObject();
  *(_DWORD *)(result + 40) = 0;
  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 16) = 50;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(result + 32) = MEMORY[0x1E0DEE9D8];
  qword_1EE465C60 = result;
  return result;
}

uint64_t sub_19CD5EE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v8;
  __int128 v9[3];
  __int128 v10;

  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  v4 = a2 + 72;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)&v8 = *(_QWORD *)a1;
  v5 = v8;
  sub_19CCD5B84(a1 + 56, (uint64_t)v9);
  v6 = *(void **)(a1 + 96);
  swift_unknownObjectRetain();
  MetricsFieldsAggregator.init(bag:accountProvider:bundle:)((uint64_t *)&v8, (uint64_t)v9, v6, &v10);
  v8 = *(_OWORD *)(a1 + 120);
  v9[0] = v10;
  sub_19CD5C854(&v8);
  *(_OWORD *)(a2 + 16) = v9[0];
  sub_19CCD5B84(a1 + 8, a2 + 32);
  *(_QWORD *)&v10 = v5;
  sub_19CD1A3E0(a1 + 136, (uint64_t *)&v10, v9);
  sub_19CD1A39C((uint64_t)v9, v4, &qword_1ECEB11E8);
  sub_19CCD5B84(a1 + 176, (uint64_t)v9);
  sub_19CD5F154(a1);
  return sub_19CCD14C4(v9, a2 + 112);
}

uint64_t MetricsPipeline.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v6[216];

  sub_19CD5F180((uint64_t)a1, (uint64_t)v6);
  sub_19CD5EE30((uint64_t)v6, a2);
  *(_BYTE *)(a2 + 152) = 1;
  *(_BYTE *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 160) = a1[6];
  v4 = *a1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  result = sub_19CD5F154((uint64_t)a1);
  *(_QWORD *)(a2 + 168) = v4;
  return result;
}

uint64_t MetricsPipeline._bag.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 168);
  return swift_unknownObjectRetain();
}

uint64_t destroy for MetricsPipeline.Configuration(uint64_t a1)
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 56);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 160))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 136);
  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 176);
}

uint64_t initializeWithCopy for MetricsPipeline.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_unknownObjectRetain();
  v7(a1 + 8, v4, v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain();
  v10(a1 + 56, a2 + 56, v9);
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 96) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 160);
  v14 = (id)v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13)
  {
    v15 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v13;
    *(_QWORD *)(a1 + 168) = v15;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 136, a2 + 136, v13);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  }
  v17 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 200) = v17;
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 176, a2 + 176);
  return a1;
}

uint64_t sub_19CD5F154(uint64_t a1)
{
  destroy for MetricsPipeline.Configuration(a1);
  return a1;
}

uint64_t sub_19CD5F180(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MetricsPipeline.Configuration(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for MetricsPipeline.Configuration()
{
  return &type metadata for MetricsPipeline.Configuration;
}

uint64_t MetricsPipeline.Configuration.init(bag:linter:anonymousTopics:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;
  _BYTE v17[40];

  v7 = *a1;
  sub_19CCD5B84(a2, (uint64_t)v17);
  *(_QWORD *)&v14 = v7;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v8 = _s9JetEngine23AMSMetricsEventRecorderC3bag12defaultTopic15anonymousTopicsAcA3BagV_SSShySSGtcfC_0((void **)&v14, 0, 0xE000000000000000, a3);
  v15 = type metadata accessor for AMSMetricsEventRecorder();
  v16 = &protocol witness table for AMSMetricsEventRecorder;
  *(_QWORD *)&v14 = v8;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)a4 = v7;
  sub_19CCD5B84((uint64_t)v17, a4 + 8);
  *(_QWORD *)(a4 + 48) = a3;
  v9 = objc_msgSend((id)objc_opt_self(), sel_ams_sharedAccountStore);
  *(_QWORD *)(a4 + 80) = sub_19CCE5204(0, (unint64_t *)&qword_1ECEB2F80);
  *(_QWORD *)(a4 + 88) = &protocol witness table for ACAccountStore;
  *(_QWORD *)(a4 + 56) = v9;
  *(_QWORD *)(a4 + 96) = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  *(_QWORD *)(a4 + 104) = &type metadata for StandardMetricsFieldsBuilder;
  *(_QWORD *)(a4 + 112) = &protocol witness table for StandardMetricsFieldsBuilder;
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = sub_19CD5A098(MEMORY[0x1E0DEE9D8]);
  v12 = sub_19CD5A0AC(v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  *(_QWORD *)(a4 + 120) = v11;
  *(_QWORD *)(a4 + 128) = v12;
  sub_19CCD14C4(&v14, a4 + 176);
  return __swift_destroy_boxed_opaque_existential_1Tm(a2);
}

uint64_t *MetricsPipeline.Configuration.withRecorder(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_19CD5F180(v2, a2);
  return __swift_assign_boxed_opaque_existential_1((uint64_t *)(a2 + 176), a1);
}

id MetricsPipeline.wrappedPipeline.getter()
{
  uint64_t v0;
  objc_class *v1;
  id v2;
  id v3;
  objc_super v5;
  _BYTE v6[184];

  sub_19CD50F74(v0, (uint64_t)v6);
  v1 = (objc_class *)type metadata accessor for WrappedMetricsPipeline();
  v2 = objc_allocWithZone(v1);
  sub_19CD50F74((uint64_t)v6, (uint64_t)v2 + OBJC_IVAR___JEWrappedMetricsPipeline_pipeline);
  v5.receiver = v2;
  v5.super_class = v1;
  v3 = objc_msgSendSuper2(&v5, sel_init);
  sub_19CD510B0((uint64_t)v6);
  return v3;
}

ValueMetadata *type metadata accessor for LogMessageLevel()
{
  return &type metadata for LogMessageLevel;
}

ValueMetadata *type metadata accessor for KeyFileContents.CodingKeys()
{
  return &type metadata for KeyFileContents.CodingKeys;
}

unint64_t sub_19CD5F41C()
{
  unint64_t result;

  result = qword_1ECEB0AA8;
  if (!qword_1ECEB0AA8)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D0616C8, &type metadata for KeyFileContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0AA8);
  }
  return result;
}

unint64_t sub_19CD5F460()
{
  unint64_t result;

  result = qword_1ECEB0AA0;
  if (!qword_1ECEB0AA0)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D0616F0, &type metadata for KeyFileContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0AA0);
  }
  return result;
}

uint64_t sub_19CD5F4A4@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = a2(*a1);
  *a3 = result;
  return result;
}

uint64_t sub_19CD5F4D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    **(_QWORD **)(v0 + 32) = v1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_19CDB468C();
    return sub_19CFE0340();
  }
}

uint64_t sub_19CD5F560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t sub_19CD5F578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 == 2)
  {
    sub_19CDB4668();
    return sub_19CFE0340();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_OWORD *)(v0 + 32);
    *(_QWORD *)v3 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v3 + 8) = v1;
    *(_OWORD *)(v3 + 16) = v4;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_19CD5F614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_19CD5F630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19CD579FC;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE43F228 + dword_1EE43F228))(a1, v1);
}

uint64_t sub_19CD5F698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_19CD5F6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19CD579FC;
  return sub_19CD5F708(a1, v1);
}

uint64_t sub_19CD5F708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_19CD5F720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19CD579FC;
  return sub_19CD5F774(a1, v1);
}

uint64_t sub_19CD5F774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_19CD5F78C()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19CD5F7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19CCE0F2C(a1, a2, a3, (uint64_t)DependencyDictionary.remove<A>(allDependenciesExcept:), (uint64_t)sub_19CD562E8, 0x5B20A988E220, 0xA600000000000000);
}

uint64_t dispatch thunk of BaseObjectGraph.subtracting<A>(dependenciesFor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t sub_19CD5F7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19CCE0F2C(a1, a2, a3, (uint64_t)DependencyDictionary.remove<A>(dependenciesFor:), (uint64_t)sub_19CD562E8, 1528835360, 0xE400000000000000);
}

id sub_19CD5F7F4()
{
  id result;
  uint64_t v1[2];

  if (qword_1ECEB3330 != -1)
    swift_once();
  v1[0] = 0xD000000000000013;
  v1[1] = 0x800000019D06DE10;
  result = sub_19CD1462C(v1, 0x6E6963617254534ALL, 0xE900000000000067);
  qword_1EE43D2E0 = (uint64_t)result;
  return result;
}

uint64_t sub_19CD5F888(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_2Tm;
  uint64_t v13;
  char v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a6;
  v18 = a7;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm((uint64_t *)&v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_2Tm, a1, a6);
  v13 = swift_allocObject();
  v14 = *a4;
  sub_19CCD14C4(&v16, v13 + 16);
  *(_QWORD *)(v13 + 56) = a2;
  *(_QWORD *)(v13 + 64) = a3;
  *(_BYTE *)(v13 + 72) = v14;
  return v13;
}

unint64_t sub_19CD5F924()
{
  unint64_t result;

  result = qword_1ECEB3048;
  if (!qword_1ECEB3048)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for OpaqueMetatype, &type metadata for OpaqueMetatype);
    atomic_store(result, (unint64_t *)&qword_1ECEB3048);
  }
  return result;
}

uint64_t sub_19CD5F968()
{
  return sub_19CCC76E8((uint64_t *)&off_1ECEB01F8);
}

uint64_t type metadata accessor for JSPackageIndex()
{
  uint64_t result;

  result = qword_1EE43B8B8;
  if (!qword_1EE43B8B8)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for JSONDateFormat()
{
  return &type metadata for JSONDateFormat;
}

void sub_19CD5F9C0()
{
  off_1EE43C310 = &unk_1E3DDF1E8;
}

ValueMetadata *type metadata accessor for CompoundLogger()
{
  return &type metadata for CompoundLogger;
}

uint64_t CompoundLogger.init(loggers:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for ComponentTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ComponentTypes);
}

uint64_t type metadata accessor for PipelinePhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipelinePhase);
}

uint64_t type metadata accessor for OSLogRegistry()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for OSLogRegistry.Key()
{
  return &type metadata for OSLogRegistry.Key;
}

unint64_t sub_19CD5FA9C()
{
  unint64_t result;

  result = qword_1ECEB31E0;
  if (!qword_1ECEB31E0)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05DE60, &type metadata for OSLogRegistry.Key);
    atomic_store(result, (unint64_t *)&qword_1ECEB31E0);
  }
  return result;
}

void sub_19CD5FAE0()
{
  qword_1ECEB2D50 = 0x41CDCD6500000000;
}

Swift::Int static MonotonicTime.distantPast.getter()
{
  return MonotonicTime.init(timeInterval:)(-10000.0).seconds;
}

uint64_t sub_19CD5FB04(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MetricsLogger.Configuration()
{
  return &type metadata for MetricsLogger.Configuration;
}

uint64_t MetricsLogger.init(loggerName:configuration:)(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  sub_19CCD5B84((uint64_t)a3, v3 + 32);
  v5 = *((_QWORD *)a3 + 6);
  *(double *)(v3 + 72) = a3[5];
  *(_QWORD *)(v3 + 80) = v5;
  v6 = a3[7];
  v7 = a3[8];
  swift_bridgeObjectRetain();
  sub_19CCF5918(6778732, 0xE300000000000000, (uint64_t)&v11, v6, v7);
  sub_19CD5FB04((uint64_t)a3);
  v8 = v12;
  v9 = v13;
  *(_OWORD *)(v3 + 88) = v11;
  *(_QWORD *)(v3 + 104) = v8;
  *(_QWORD *)(v3 + 112) = v9;
  *(_OWORD *)(v3 + 120) = v14;
  return v3;
}

void sub_19CD5FBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ECEB2210[0])
  {
    v4 = type metadata accessor for CoarselyTimed(0, (uint64_t)&type metadata for JSONObject, a3, a4);
    if (!v5)
      atomic_store(v4, qword_1ECEB2210);
  }
}

unint64_t sub_19CD5FC24()
{
  unint64_t result;

  result = qword_1ECEB1170;
  if (!qword_1ECEB1170)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D06370C, &type metadata for SQLiteResult);
    atomic_store(result, (unint64_t *)&qword_1ECEB1170);
  }
  return result;
}

_QWORD *PipelineTask.mapTaskOutput<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19CCFB038(a1, a2, a3, a4, a5, (uint64_t)&unk_1E3DE2530, (uint64_t)sub_19CD0C6A4);
}

{
  return sub_19CCFB038(a1, a2, a3, a4, a5, (uint64_t)&unk_1E3DE24E0, (uint64_t)sub_19CD5FC7C);
}

uint64_t sub_19CD5FC7C(uint64_t a1)
{
  return sub_19CCFEE08(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_19CCCB5E8);
}

uint64_t sub_19CD5FC88(uint64_t a1)
{
  uint64_t v1;

  return sub_19CD5FC98(a1, *(uint64_t (**)(void))(v1 + 40));
}

uint64_t sub_19CD5FC98(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_19CD5FD00@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(uint64_t *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2
                                                                                                  + *MEMORY[0x1E0DEC528])
                                                                                      + 16)
                                                                          - 8)
                                                              + 56))(a2, 1, 1);
}

uint64_t sub_19CD5FD64(uint64_t a1, uint64_t a2)
{
  return sub_19CCBE944(a1, a2, qword_1EE43BCD8, &qword_1ECEB32D0, &qword_1EE43E730);
}

unint64_t sub_19CD5FD84()
{
  unint64_t result;

  result = qword_1EE43D088;
  if (!qword_1EE43D088)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for PageMetrics.InvocationPoint, &type metadata for PageMetrics.InvocationPoint);
    atomic_store(result, (unint64_t *)&qword_1EE43D088);
  }
  return result;
}

void static PageMetrics.InvocationPoint.pageExit.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7469784565676170;
  a1[1] = 0xE800000000000000;
}

unint64_t PageMetrics.init(instructions:pageFields:custom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t result;

  v7 = *a3;
  result = sub_19CD30650(MEMORY[0x1E0DEE9D8]);
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v7;
  a4[3] = result;
  return result;
}

unint64_t sub_19CD5FE2C()
{
  unint64_t result;

  result = qword_1EE43BCC0;
  if (!qword_1EE43BCC0)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for OperationID, &type metadata for OperationID);
    atomic_store(result, (unint64_t *)&qword_1EE43BCC0);
  }
  return result;
}

void sub_19CD5FE70()
{
  unint64_t v0;

  sub_19CCC8A30();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t MetricsData.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

uint64_t MetricsData.includingFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetricsData.excludingFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for JSBagObject()
{
  return objc_opt_self();
}

uint64_t sub_19CD5FF64(void *a1, void *a2)
{
  uint64_t v2;

  return sub_19CCC7CBC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_19CD5FF6C(_QWORD *a1)
{
  uint64_t v1;

  return sub_19CCC7B80(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, double))(v1 + 24));
}

ValueMetadata *type metadata accessor for LogMessage.ValueTreatment()
{
  return &type metadata for LogMessage.ValueTreatment;
}

uint64_t storeEnumTagSinglePayload for JSONObject(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_19CD5FFE4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_19CCDBC4C((uint64_t)&unk_1E3DC8C70);
  qword_1EE465C90 = result;
  *(_QWORD *)algn_1EE465C98 = v1;
  return result;
}

uint64_t sub_19CD6000C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_19CCDBC4C((uint64_t)&unk_1E3DC8C48);
  qword_1EE465CD0 = result;
  *(_QWORD *)algn_1EE465CD8 = v1;
  return result;
}

uint64_t sub_19CD60034()
{
  uint64_t v0;

  return sub_19CCC6B44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

ValueMetadata *type metadata accessor for JetEngineBootstrap()
{
  return &type metadata for JetEngineBootstrap;
}

uint64_t sub_19CD6004C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t);

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {

    return swift_task_switch();
  }
  else
  {
    *(_QWORD *)(v2 + 144) = *(_QWORD *)(v2 + 88);
    v5 = (uint64_t (*)(uint64_t))((char *)&dword_1EE440B20 + dword_1EE440B20);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v2 + 152) = v4;
    *v4 = v2;
    v4[1] = sub_19CDA5FA8;
    return v5(v2 + 56);
  }
}

unint64_t destroy for JetEngineBootstrap.URLProtocolHandler(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_19CD60154(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

uint64_t sub_19CD60178(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for JetEngineBootstrap.URLProtocolHandler()
{
  return &type metadata for JetEngineBootstrap.URLProtocolHandler;
}

uint64_t sub_19CD601BC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for JetPackAsset.Metadata(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for JetPackAsset.OSVersion(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for JetPackAsset.OSVersion(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_19CD60290@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return JetPackAsset.OSVersion.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for JetPackAsset.OSVersion()
{
  return &type metadata for JetPackAsset.OSVersion;
}

unint64_t sub_19CD602B4()
{
  unint64_t result;

  result = qword_1ECEB0A90;
  if (!qword_1ECEB0A90)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for JetPackAsset.OSVersion, &type metadata for JetPackAsset.OSVersion);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A90);
  }
  return result;
}

ValueMetadata *type metadata accessor for JetPackAsset.OSVersion.CodingKeys()
{
  return &type metadata for JetPackAsset.OSVersion.CodingKeys;
}

unint64_t sub_19CD60310()
{
  unint64_t result;

  result = qword_1ECEB0A78;
  if (!qword_1ECEB0A78)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D0534C4, &type metadata for JetPackAsset.OSVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A78);
  }
  return result;
}

unint64_t sub_19CD60354()
{
  unint64_t result;

  result = qword_1ECEB0A70;
  if (!qword_1ECEB0A70)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D0534EC, &type metadata for JetPackAsset.OSVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A70);
  }
  return result;
}

unint64_t sub_19CD60398()
{
  unint64_t result;

  result = qword_1ECEB0A68;
  if (!qword_1ECEB0A68)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D053684, &type metadata for JetPackAsset.OSVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A68);
  }
  return result;
}

uint64_t sub_19CD603DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for JetPackAsset.Metadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19CD60418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JetPackAsset.Metadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19CD6045C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JetPackAsset.Metadata.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for JetPackAsset.Metadata.CodingKeys()
{
  return &type metadata for JetPackAsset.Metadata.CodingKeys;
}

unint64_t sub_19CD60488()
{
  unint64_t result;

  result = qword_1ECEB0A58;
  if (!qword_1ECEB0A58)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05340C, &type metadata for JetPackAsset.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A58);
  }
  return result;
}

unint64_t sub_19CD604CC()
{
  unint64_t result;

  result = qword_1ECEB0A50;
  if (!qword_1ECEB0A50)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D053434, &type metadata for JetPackAsset.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A50);
  }
  return result;
}

unint64_t sub_19CD60510()
{
  unint64_t result;

  result = qword_1ECEB0A48;
  if (!qword_1ECEB0A48)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D0536D4, &type metadata for JetPackAsset.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A48);
  }
  return result;
}

uint64_t sub_19CD60554@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JetPackAsset.Policy.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for JetPackAsset.Policy()
{
  return &type metadata for JetPackAsset.Policy;
}

unint64_t sub_19CD60578()
{
  unint64_t result;

  result = qword_1ECEB0A40;
  if (!qword_1ECEB0A40)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for JetPackAsset.Policy, &type metadata for JetPackAsset.Policy);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A40);
  }
  return result;
}

ValueMetadata *type metadata accessor for JetPackAsset.Policy.CodingKeys()
{
  return &type metadata for JetPackAsset.Policy.CodingKeys;
}

unint64_t sub_19CD605D4()
{
  unint64_t result;

  result = qword_1ECEB0A30;
  if (!qword_1ECEB0A30)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D05357C, &type metadata for JetPackAsset.Policy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A30);
  }
  return result;
}

unint64_t sub_19CD60618()
{
  unint64_t result;

  result = qword_1ECEB0A28;
  if (!qword_1ECEB0A28)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D0535A4, &type metadata for JetPackAsset.Policy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A28);
  }
  return result;
}

unint64_t sub_19CD6065C()
{
  unint64_t result;

  result = qword_1ECEB0A20;
  if (!qword_1ECEB0A20)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D053634, &type metadata for JetPackAsset.Policy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ECEB0A20);
  }
  return result;
}

uint64_t JetPackAsset.streamSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_19CCD5B84(v1, a1);
}

unint64_t sub_19CD606B0()
{
  unint64_t result;

  result = qword_1ECEB0820;
  if (!qword_1ECEB0820)
  {
    result = MEMORY[0x1A1ADBD7C](&protocol conformance descriptor for JetPackPath, &type metadata for JetPackPath);
    atomic_store(result, (unint64_t *)&qword_1ECEB0820);
  }
  return result;
}

JetEngine::JetPackPath sub_19CD606F4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x736A2E707061;
  v0._object = (void *)0xE600000000000000;
  return JetPackPath.init(_:)(v0);
}

uint64_t static JetPackPath.sourcePath.getter@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1ECEB0818 != -1)
    swift_once();
  *a1 = qword_1ECEB0810;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for JetPackAssetDiskCacheSQLiteMetadataStore()
{
  uint64_t result;

  result = qword_1EE43CDE0;
  if (!qword_1EE43CDE0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19CD6079C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_19CCDC9F0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_19CD607B8()
{
  qword_1ECEB10F8 = 0xD0000000000000C3;
  unk_1ECEB1100 = 0x800000019D070EC0;
  qword_1ECEB1108 = MEMORY[0x1E0DEE9D8];
}

uint64_t type metadata accessor for JetPackResourceBundleDiskLocation()
{
  uint64_t result;

  result = qword_1EE43B038;
  if (!qword_1EE43B038)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19CD60828@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return JetPackAssetStandardCachePolicy.status(for:)(a1, a2);
}

uint64_t storeEnumTagSinglePayload for JetPackAssetRequestSourcePolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19CD60888 + 4 * byte_19D0655C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19CD608BC + 4 * byte_19D0655C0[v4]))();
}

uint64_t sub_19CD608BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD608C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19CD608CCLL);
  return result;
}

uint64_t sub_19CD608D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19CD608E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19CD608E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD608EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD608F8(uint64_t a1)
{
  uint64_t *v1;

  return sub_19CCC8C24(a1, *v1);
}

void sub_19CD60904()
{
  off_1ECEB0A10 = &unk_1E3DC7B70;
}

JetEngine::JetPackFileStreamSource __swiftcall JetPackFileStreamSource.init(path:)(Swift::String path)
{
  Swift::String *v1;
  JetEngine::JetPackFileStreamSource result;

  *v1 = path;
  v1[1]._countAndFlagsBits = 0;
  v1[1]._object = 0;
  result.path = path;
  return result;
}

ValueMetadata *type metadata accessor for JetPackFileKeyProvider()
{
  return &type metadata for JetPackFileKeyProvider;
}

uint64_t JetPackFileKeyProvider.init(keyURLs:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t JetPackFileKeyProvider.keyForIdentifier(_:)(unsigned __int16 a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v3 = sub_19CFDEDE0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB3030);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v22[-v14];
  v16 = *v1;
  if (*(_QWORD *)(v16 + 16) && (v17 = sub_19CD58928(a1), (v18 & 1) != 0))
  {
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v4 + 16))(v15, *(_QWORD *)(v16 + 56) + *(_QWORD *)(v4 + 72) * v17, v3);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v15, v19, 1, v3);
  sub_19CD3BB88((uint64_t)v15, (uint64_t)v11);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3) == 1)
  {
    v20 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v7, v11, v3);
    v20 = sub_19CFDEDF8();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  }
  sub_19CD3BBD0((uint64_t)v15);
  return v20;
}

uint64_t JetPackAssetDiskCache.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9JetEngine21JetPackAssetDiskCache_assetsURL;
  v2 = sub_19CFDEDE0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC9JetEngine21JetPackAssetDiskCache_metadataStore);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JetPackAssetDiskCache()
{
  uint64_t result;

  result = qword_1ECEB10E8;
  if (!qword_1ECEB10E8)
    return swift_getSingletonMetadata();
  return result;
}

char *JetPackAssetDiskCache.__allocating_init()()
{
  return sub_19CCD9598();
}

uint64_t sub_19CD60BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_19CCBE344;
  return JetPackAssetDiskCache._asset(for:)(a1, a2, a3);
}

void sub_19CD60C18()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(*__swift_project_boxed_opaque_existential_1((_QWORD *)(*v0 + OBJC_IVAR____TtC9JetEngine21JetPackAssetDiskCache_metadataStore), *(_QWORD *)(*v0 + OBJC_IVAR____TtC9JetEngine21JetPackAssetDiskCache_metadataStore + 24))+ OBJC_IVAR____TtC9JetEngine40JetPackAssetDiskCacheSQLiteMetadataStore_transactionCount);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_19CEFBE48(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t destroy for JetPackSigningPolicy(uint64_t a1)
{
  return sub_19CD4C0D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

_QWORD *sub_19CD60C94(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }
  else
  {
    *result = (a2 - 2);
    result[1] = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for JetPackSigningPolicy()
{
  return &type metadata for JetPackSigningPolicy;
}

void sub_19CD60CD0()
{
  _QWORD *v0;
  uint64_t v1;
  BOOL v2;
  id v3;
  id v4;
  uint64_t inited;
  void *v6;
  void *v7;

  v1 = v0[1];
  if ((v1 & 0x3000000000000000) != 0x2000000000000000
    || (v1 == 0x2000000000000000 ? (v2 = *v0 == 2) : (v2 = 0), !v2))
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v4 = objc_msgSend(v3, sel_bundleIdentifier);

    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE43B168);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19D0522A0;
      *(_QWORD *)(inited + 32) = 0xD000000000000010;
      *(_QWORD *)(inited + 40) = 0x800000019D06DBA0;
      *(_QWORD *)(inited + 48) = v4;
    }
    else
    {
      inited = MEMORY[0x1E0DEE9D8];
    }
    sub_19CD59E28(inited);
    v6 = (void *)sub_19CFDF554();
    sub_19CD5956C();
    v7 = (void *)sub_19CFDF3B0();
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();

  }
}

uint64_t JetPackAssetSession.__deallocating_deinit()
{
  uint64_t v0;

  sub_19CCC2888(v0 + 16);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JetPackAssetSession()
{
  return objc_opt_self();
}

uint64_t sub_19CD60E60()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t JetPackAssetSession.init(configuration:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  sub_19CD60F34(a1, v1 + 16);
  v3 = sub_19CD59D00(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB1038);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v3;
  sub_19CCC2888(a1);
  *(_QWORD *)(v1 + 96) = v4;
  return v1;
}

uint64_t sub_19CD60F34(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LocalizedStringsBundle(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for JetPackAssetSession.Configuration()
{
  return &type metadata for JetPackAssetSession.Configuration;
}

uint64_t sub_19CD60F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for URLJetPackAssetRequest() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_19CD579FC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&dword_1EE442DA8 + dword_1EE442DA8))(a1, v6, v7, v8);
}

uint64_t sub_19CD6102C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = *a4;
  v9 = a4[1];
  v10 = a4[2];
  v11 = a4[3];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v12;
  *v12 = v4;
  v12[1] = sub_19CD579FC;
  return sub_19CCDBFC4(a1, a2, a3, v8, v9, v10, v11);
}

ValueMetadata *type metadata accessor for JetNWActivityLabel()
{
  return &type metadata for JetNWActivityLabel;
}

unint64_t sub_19CD610D4()
{
  unint64_t result;

  result = qword_1EE43A5D8;
  if (!qword_1EE43A5D8)
  {
    result = MEMORY[0x1A1ADBD7C](&unk_19D0652C4, &type metadata for JetNWActivityLabel);
    atomic_store(result, (unint64_t *)&qword_1EE43A5D8);
  }
  return result;
}

uint64_t sub_19CD61118()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1FA8);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  off_1ECEB1948 = (_UNKNOWN *)result;
  return result;
}

ValueMetadata *type metadata accessor for ValidatedJetPackLoadingCoordinator()
{
  return &type metadata for ValidatedJetPackLoadingCoordinator;
}

uint64_t ValidatedJetPackLoadingCoordinator.init(session:assetLocation:bag:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;

  *a4 = a1;
  result = sub_19CCD14C4(a2, (uint64_t)(a4 + 1));
  a4[6] = a3;
  return result;
}

uint64_t type metadata accessor for ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult);
}

uint64_t ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult.bundle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t sub_19CD611C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v15)(uint64_t, _QWORD, uint64_t, uint64_t);

  v15 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v0[29];
  v1 = v0[27];
  v2 = v0[23];
  v4 = v0[14];
  v3 = v0[15];
  v6 = v0[10];
  v5 = v0[11];
  v7 = v0[9];
  v9 = v0[6];
  v8 = v0[7];
  (*(void (**)(uint64_t, _QWORD))(v0[25] + 8))(v1, v0[24]);
  sub_19CCFDB04(v3, v4);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v10(v6, v5, v9);
  sub_19CCFDB04(v4, v1);
  v12 = type metadata accessor for ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult(0, v9, v8, v11);
  v10(v1 + *(int *)(v12 + 36), v6, v9);
  v15(v1, 0, 1, v2);
  v13 = (_QWORD *)swift_task_alloc();
  v0[33] = v13;
  *v13 = v0;
  v13[1] = sub_19CDF3ED4;
  return sub_19CFDFB30();
}

uint64_t sub_19CD612E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ValidatedJetPackLoadingCoordinator.getJetPackAsset<A>(unpackAsset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_19CD579FC;
  return sub_19CCD8AE0(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_19CCBE344;
  return sub_19CCD8AE0(a1, a2, a3, a4, a5);
}

uint64_t storeEnumTagSinglePayload for RemoteFetcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t ValidatedJetPackAssetLocations.BagKeyLocation.init(_:bag:urlTransformer:requestConfiguration:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t (*v7)@<X0>(uint64_t@<X0>, uint64_t@<X8>);

  v7 = sub_19CF6B8EC;
  *(_QWORD *)a7 = a2;
  *(_QWORD *)(a7 + 8) = result;
  *(_BYTE *)(a7 + 16) = 0;
  if (a3)
    v7 = a3;
  else
    a4 = 0;
  *(_QWORD *)(a7 + 24) = v7;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t sub_19CD6143C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE v12[16];
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[3];
  uint64_t v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0B80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_OWORD *)(v2 + 16);
  v16[0] = *(_OWORD *)v2;
  v16[1] = v10;
  v16[2] = *(_OWORD *)(v2 + 32);
  v17 = *(_QWORD *)(v2 + 48);
  v13 = v16;
  v14 = a2;
  v15 = a1;
  type metadata accessor for JetPackAsset(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DF0A50], v5);
  return sub_19CFDFB60();
}

uint64_t sub_19CD61528(uint64_t a1)
{
  uint64_t *v1;

  return sub_19CCD3C5C(a1, v1[2], v1[3], v1[4]);
}

uint64_t destroy for ValidatedJetPackAssetLocations.URLLocation(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_19CFDEDE0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for ValidatedJetPackAssetLocations.URLLocation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for ValidatedJetPackAssetLocations.URLLocation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t initializeWithCopy for ValidatedJetPackAssetLocations.URLLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_19CFDEDE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for ValidatedJetPackAssetLocations.URLLocation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_19CFDEDE0();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  v9 = *a2;
  v10 = sub_19CFDEDE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation();
  *(_BYTE *)(a5 + *(int *)(result + 20)) = v9;
  v12 = (_QWORD *)(a5 + *(int *)(result + 24));
  *v12 = a3;
  v12[1] = a4;
  return result;
}

uint64_t type metadata accessor for ValidatedJetPackAssetLocations.URLLocation()
{
  uint64_t result;

  result = qword_1ECEB04C8;
  if (!qword_1ECEB04C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19CD61750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0B80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = v2;
  v13 = a2;
  v14 = a1;
  type metadata accessor for JetPackAsset(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DF0A50], v5);
  return sub_19CFDFB60();
}

uint64_t ValidatedJetPackAssetLocations.URLLocation.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_19CFDEDE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_19CD61858(uint64_t a1)
{
  uint64_t *v1;

  return sub_19CD61864(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_19CD61864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a3;
  v29 = a4;
  v27 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB0B88);
  v6 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  v9 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9, v12);
  v13 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB29B0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_19CFDFA10();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  sub_19CCFECEC(a2, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ValidatedJetPackAssetLocations.URLLocation);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v5);
  v19 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = (*(unsigned __int8 *)(v6 + 80) + v21 + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  sub_19CCFE8AC((uint64_t)v13, v23 + v19, (uint64_t (*)(_QWORD))type metadata accessor for ValidatedJetPackAssetLocations.URLLocation);
  v24 = v29;
  *(_QWORD *)(v23 + v20) = v28;
  *(_QWORD *)(v23 + v21) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v22, (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
  swift_unknownObjectRetain();
  swift_retain();
  sub_19CE72184((uint64_t)v17, (uint64_t)&unk_1EE442D90, v23);
  return swift_release();
}

uint64_t sub_19CD61A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InMemoryJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19CD61A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InMemoryJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19CD61AE0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = sub_19CCDDC0C(*(_QWORD **)(v0 + 168), *(_QWORD *)(v0 + 176));
  return swift_task_switch();
}

uint64_t InMemoryJetPackLoader.bundle(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  type metadata accessor for InMemoryJetPackResourceBundle();
  v3[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_19CD61B7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_19CD61BC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_19CCEC630(a1, v2 + 16, (_QWORD *)(v2 + 56), a2);
}

uint64_t sub_19CD61BDC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_19CCE99C0(a1, a2, a3);
}

uint64_t sub_19CD61BE4(uint64_t a1)
{
  uint64_t v1;

  return sub_19CD61BEC(a1, v1 + 16);
}

uint64_t sub_19CD61BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  sub_19CCF8C5C(a2 + 16, (uint64_t)v7, &qword_1ECEB2548);
  v3 = v8;
  if (v8)
  {
    v4 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  }
  else
  {
    sub_19CCECFE4((uint64_t)v7, &qword_1ECEB2548);
    return 0;
  }
  return v5;
}

uint64_t InMemoryJetPackLoader.bundle(from:on:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = a2[3];
  v5 = a2[4];
  v6 = __swift_project_boxed_opaque_existential_1(a2, v4);
  return sub_19CCD5E78(a1, (uint64_t)v6, v2, v4, v5);
}

id static InMemoryJetPackLoader.sharedUnpackQueue.getter()
{
  if (qword_1EE43CDD8 != -1)
    swift_once();
  return (id)qword_1EE43CDC8;
}

__n128 InMemoryJetPackLoader.init(signingPolicy:keyProviders:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;

  a3[2].n128_u64[1] = (unint64_t)&type metadata for JetPackCompoundKeyProvider;
  a3[3].n128_u64[0] = (unint64_t)&off_1E3DC7C70;
  a3[1].n128_u64[0] = a2;
  result = *a1;
  *a3 = *a1;
  return result;
}

uint64_t sub_19CD61D3C(uint64_t a1)
{
  return sub_19CCCC8A4(a1, (uint64_t *)&unk_1ECEB0970, (uint64_t *)&unk_1ECEB0930, &qword_1ECEB5270);
}

uint64_t sub_19CD61D58()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FailedJetPackSetBacking(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FailedJetPackSetBacking);
}

uint64_t sub_19CD61DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DiskJetPackLoader()
{
  return &type metadata for DiskJetPackLoader;
}

uint64_t sub_19CD61DFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_19CFDEDE0() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_19CD54C1C(a1, v2 + 16, v2 + v6, *(unsigned __int8 *)(v2 + v6 + *(_QWORD *)(v5 + 64)), ((v6 + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8) + v2 + 8, a2);
}

uint64_t sub_19CD61E70(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_19CCF0E6C(a1, a2, a3);
}

uint64_t DiskJetPackLoader.bundle(from:baseURL:automaticallyCleanUp:on:)(_QWORD *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = a4[3];
  v9 = a4[4];
  v10 = __swift_project_boxed_opaque_existential_1(a4, v8);
  return sub_19CCE7B84(a1, a2, a3, (uint64_t)v10, v4, v8, v9);
}

id static DiskJetPackLoader.sharedUnpackQueue.getter()
{
  if (qword_1EE43B030 != -1)
    swift_once();
  return (id)qword_1EE43B020;
}

uint64_t sub_19CD61F18(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_19CD3BE5C(a1, a2);
  return a1;
}

unint64_t sub_19CD61F2C()
{
  unint64_t result;

  result = qword_1ECEB2030;
  if (!qword_1ECEB2030)
  {
    result = MEMORY[0x1A1ADBD7C](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ECEB2030);
  }
  return result;
}

uint64_t BrotliDecoderSetParameter(_DWORD *a1, int a2, int a3)
{
  unsigned int v4;

  if (*a1)
    return 0;
  if (a2 == 1)
  {
    v4 = a1[193] & 0xFFFFFFDF | (32 * (a3 != 0));
  }
  else
  {
    if (a2)
      return 0;
    v4 = a1[193] & 0xFFFFFFEF | (16 * (a3 == 0));
  }
  a1[193] = v4;
  return 1;
}

void *BrotliDecoderCreateInstance(void *(*a1)(int a1, size_t size), void (*a2)(int a1, void *a2), uint64_t a3)
{
  BOOL v6;
  void *result;
  void *v8;
  void *v9;

  v6 = ((unint64_t)a1 | (unint64_t)a2) != 0;
  if ((unint64_t)a1 | (unint64_t)a2)
  {
    result = 0;
    if (!a1 || !a2)
      return result;
    v8 = a1(a3, 5744);
  }
  else
  {
    v8 = malloc_type_malloc(0x1670uLL, 0x10F204064C86C75uLL);
  }
  v9 = v8;
  if (!v8)
    return 0;
  if (BrotliDecoderStateInit((uint64_t)v8, a1, a2, a3))
    return v9;
  if (!v6)
  {
    free(v9);
    return 0;
  }
  result = 0;
  if (a1 && a2)
  {
    a2(a3, v9);
    return 0;
  }
  return result;
}

uint64_t BrotliDecoderDestroyInstance(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  if (result)
  {
    v1 = result;
    v3 = *(uint64_t (**)(uint64_t, uint64_t))(result + 56);
    v2 = *(_QWORD *)(result + 64);
    BrotliDecoderStateCleanup(result);
    return v3(v2, v1);
  }
  return result;
}

uint64_t BrotliDecoderAttachDictionary(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  if (*(_DWORD *)a1)
    return 0;
  v6 = *(_DWORD **)(a1 + 800);
  v7 = *v6;
  result = BrotliSharedDictionaryAttach(v6, a2, a3, a4);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD **)(a1 + 800);
    if (v7 >= *v8)
      return 1;
    while (!*(_DWORD *)a1)
    {
      v9 = &v8[2 * v7];
      v10 = *((_QWORD *)v9 + 16);
      v11 = *((_QWORD *)v9 + 1);
      result = *(_QWORD *)(a1 + 808);
      if (result)
      {
        v12 = *(_DWORD *)result;
        if (*(_DWORD *)result == 15)
          return 0;
        v13 = *(_DWORD *)(result + 4);
      }
      else
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 64), 480);
        if (!result)
          return result;
        v13 = 0;
        v12 = 0;
        *(_QWORD *)result = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 216) = -1;
        *(_DWORD *)(result + 152) = 0;
        *(_QWORD *)(a1 + 808) = result;
      }
      *(_QWORD *)(result + 8 * v12 + 24) = v10;
      v14 = v12 + 1;
      v15 = v13 + v11;
      *(_DWORD *)result = v14;
      *(_DWORD *)(result + 4) = v15;
      *(_DWORD *)(result + 4 * v14 + 152) = v15;
      ++v7;
      v8 = *(_DWORD **)(a1 + 800);
      if (v7 >= *v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t BrotliDecoderDecompress(uint64_t a1, uint64_t a2)
{
  size_t *v2;
  size_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  int v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _OWORD v14[359];
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v15 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, 512);
  v12 = v4;
  v13 = 0;
  v10 = *v2;
  v11 = v5;
  v9 = v6;
  result = BrotliDecoderStateInit((uint64_t)v14, 0, 0, 0);
  if ((_DWORD)result)
  {
    v8 = BrotliDecoderDecompressStream((uint64_t)v14, &v12, &v11, &v10, &v9, &v13);
    *v3 = v13;
    BrotliDecoderStateCleanup((uint64_t)v14);
    return v8 == 1;
  }
  return result;
}

uint64_t BrotliDecoderDecompressStream(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t *a4, void **a5, size_t *a6)
{
  void **v7;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int HuffmanCode;
  unint64_t *v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  uint64_t i;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  char v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  unsigned __int8 *v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int *v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  unsigned __int16 *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  void (*v131)(_QWORD, _QWORD);
  uint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL4 v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  unint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 **v157;
  unint64_t *v158;
  unint64_t *v159;
  unsigned __int8 **v160;
  _QWORD v161[2];
  int8x16x4_t v162;

  v7 = a5;
  v12 = *a2;
  if (a6)
    *a6 = *(_QWORD *)(a1 + 432);
  if ((*(_DWORD *)(a1 + 128) & 0x80000000) != 0)
    return 0;
  if (*a4)
  {
    if (!a5 || !*a5)
      return SaveErrorCode(a1, 0xFFFFFFEC, v12 - *a2);
  }
  else
  {
    v7 = 0;
  }
  v14 = *(_QWORD *)(a1 + 80);
  if (v14)
  {
    *(_QWORD *)(a1 + 24) = a1 + 72;
    *(_QWORD *)(a1 + 40) = a1 + 72 + v14;
    v15 = v14 - 28;
    v16 = 2;
    v17 = (_BYTE *)(v14 + a1 + 72 - 27);
    v18 = 2;
    v19 = (v15 != -30) & __CFADD__(v15, 30);
    if (v15 > 0xFFFFFFFFFFFFFFE2)
      v17 = (_BYTE *)(a1 + 72);
  }
  else
  {
    v17 = (_BYTE *)*a3;
    v20 = *a2;
    *(_QWORD *)(a1 + 24) = *a3;
    *(_QWORD *)(a1 + 40) = &v17[v20];
    v21 = v20 - 28;
    v16 = 1;
    v22 = (uint64_t)&v17[v20 - 27];
    v18 = 1;
    v19 = (v21 != -30) & __CFADD__(v21, 30);
    if (v21 <= 0xFFFFFFFFFFFFFFE2)
      v17 = (_BYTE *)v22;
  }
  if (v19)
    HuffmanCode = v16;
  else
    HuffmanCode = v18;
  v24 = (unint64_t *)(a1 + 8);
  v25 = a1 + 72;
  *(_QWORD *)(a1 + 32) = v17;
  v159 = (unint64_t *)(a1 + 776);
  v160 = (unsigned __int8 **)(a1 + 784);
  v157 = (unsigned __int8 **)(a1 + 408);
  v158 = (unint64_t *)(a1 + 400);
  v155 = a1 + 184;
  v156 = a1 + 208;
  v26 = (_DWORD *)(a1 + 848);
  v153 = a1 + 1080;
  v154 = a1 + 232;
  v151 = (_OWORD *)(a1 + 816);
  v148 = a1 + 864;
LABEL_20:
  while (2)
  {
    while (HuffmanCode != 1)
    {
      if (HuffmanCode != 2)
      {
        if (*(_QWORD *)(a1 + 80))
        {
          *(_QWORD *)(a1 + 80) = 0;
        }
        else
        {
          v139 = *(_QWORD *)(a1 + 16);
          if (v139 > 7)
            v140 = (_BYTE *)(*(_QWORD *)(a1 + 24) - (v139 >> 3));
          else
            v140 = *(_BYTE **)(a1 + 24);
          v141 = *(_QWORD *)(a1 + 16) & 7;
          v142 = *(_QWORD *)(a1 + 8) & ~(-1 << v141);
          *(_QWORD *)(a1 + 16) = v141;
          *(_QWORD *)(a1 + 24) = v140;
          *(_QWORD *)(a1 + 8) = v142;
          *a2 = *(_QWORD *)(a1 + 40) - (_QWORD)v140;
          *a3 = (uint64_t)v140;
        }
        goto LABEL_227;
      }
      if (*(_QWORD *)(a1 + 136))
      {
        v27 = WriteRingBuffer(a1, a4, v7, a6, 1);
        if ((v27 & 0x80000000) != 0)
        {
          HuffmanCode = v27;
LABEL_227:
          v143 = v12 - *a2;
          v144 = a1;
          return SaveErrorCode(v144, HuffmanCode, v143);
        }
      }
      v28 = *(_QWORD *)(a1 + 80);
      v29 = *(_BYTE **)(a1 + 24);
      if (!v28)
      {
        *a3 = (uint64_t)v29;
        v136 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 24);
        *a2 = v136;
        if (v136)
        {
          v137 = 0;
          do
          {
            *(_BYTE *)(v25 + v137) = *v29;
            v137 = *(_QWORD *)(a1 + 80) + 1;
            *(_QWORD *)(a1 + 80) = v137;
            v29 = (_BYTE *)(*a3 + 1);
            *a3 = (uint64_t)v29;
          }
          while ((*a2)-- != 1);
        }
LABEL_221:
        HuffmanCode = 2;
        goto LABEL_227;
      }
      if (v29 == *(_BYTE **)(a1 + 40))
      {
        *(_QWORD *)(a1 + 80) = 0;
        v36 = *a3;
        v37 = *a2;
        *(_QWORD *)(a1 + 24) = *a3;
        *(_QWORD *)(a1 + 40) = v36 + v37;
        if ((unint64_t)(v37 - 28) <= 0xFFFFFFFFFFFFFFE2)
          v36 = v37 + v36 - 27;
        *(_QWORD *)(a1 + 32) = v36;
        HuffmanCode = 1;
      }
      else
      {
        if (!*a2)
          goto LABEL_221;
        *(_BYTE *)(v25 + v28) = *(_BYTE *)*a3;
        v30 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v30 + 1;
        *(_QWORD *)(a1 + 40) = v25 + v30 + 1;
        v31 = v30 - 27;
        v32 = v30 - 26;
        if (v31 >= 0xFFFFFFFFFFFFFFE3)
          v32 = 0;
        *(_QWORD *)(a1 + 24) = v25;
        *(_QWORD *)(a1 + 32) = v25 + v32;
        ++*a3;
        --*a2;
        HuffmanCode = 1;
      }
    }
    switch(*(_DWORD *)a1)
    {
      case 0:
        v38 = BrotliWarmupBitReader(v24);
        HuffmanCode = 2;
        if (!v38)
          continue;
        v39 = *(_DWORD *)(a1 + 772);
        *(_DWORD *)(a1 + 772) = v39 & 0xFFFFFFDF;
        v40 = *(_QWORD *)(a1 + 8);
        v41 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v40 >> 1;
        *(_QWORD *)(a1 + 16) = v41 - 1;
        if ((v40 & 1) != 0)
        {
          v117 = (v40 >> 1) & 7;
          *(_QWORD *)(a1 + 8) = v40 >> 4;
          *(_QWORD *)(a1 + 16) = v41 - 4;
          if (v117)
          {
            v42 = (v39 & 0xFFFFF01F | ((_DWORD)v117 << 6)) + 1088;
          }
          else
          {
            v132 = (v40 >> 4) & 7;
            *(_QWORD *)(a1 + 8) = v40 >> 7;
            *(_QWORD *)(a1 + 16) = v41 - 7;
            if (v132)
            {
              if (v132 == 1)
              {
                HuffmanCode = -13;
                if ((v39 & 0x20) == 0)
                  continue;
                *(_QWORD *)(a1 + 8) = v40 >> 8;
                *(_QWORD *)(a1 + 16) = v41 - 8;
                if ((v40 & 0x80) != 0)
                  continue;
                v42 = v39 | 0x20;
              }
              else
              {
                v42 = v39 & 0xFFFFF01F | ((_DWORD)v132 << 6) | 0x200;
              }
            }
            else
            {
              v42 = v39 & 0xFFFFF01F | 0x440;
            }
          }
        }
        else
        {
          v42 = v39 & 0xFFFFF01F | 0x400;
        }
        *(_DWORD *)(a1 + 772) = v42;
        if ((v42 & 0x20) == 0)
        {
          v35 = 2;
          goto LABEL_190;
        }
        HuffmanCode = 1;
        *(_DWORD *)a1 = 1;
        continue;
      case 1:
        v43 = *(_QWORD *)(a1 + 16);
        if (v43 >= 6)
        {
          v45 = *v24;
        }
        else
        {
          v44 = *(unsigned __int8 **)(a1 + 24);
          HuffmanCode = 2;
          if (v44 == *(unsigned __int8 **)(a1 + 40))
            continue;
          v45 = ((unint64_t)*v44 << v43) | *(_QWORD *)(a1 + 8);
          v43 += 8;
          *(_QWORD *)(a1 + 24) = v44 + 1;
        }
        *(_QWORD *)(a1 + 8) = v45 >> 6;
        *(_QWORD *)(a1 + 16) = v43 - 6;
        v46 = *(_DWORD *)(a1 + 772) & 0xFFFFF03F | ((v45 & 0x3F) << 6);
        *(_DWORD *)(a1 + 772) = v46;
        HuffmanCode = -13;
        if ((v45 & 0x3F) - 31 < 0xFFFFFFEB)
          continue;
        *(_DWORD *)a1 = 2;
LABEL_77:
        *(_DWORD *)(a1 + 92) = (1 << (v46 >> 6)) - 16;
        v58 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 64), 12336);
        *(_QWORD *)(a1 + 256) = v58;
        HuffmanCode = -30;
        if (!v58)
          continue;
        *(_QWORD *)(a1 + 264) = v58 + 7584;
        *(_DWORD *)a1 = 3;
LABEL_79:
        BrotliDecoderStateMetablockBegin(a1);
        *(_DWORD *)a1 = 4;
LABEL_80:
        HuffmanCode = DecodeMetaBlockLength((_DWORD *)a1, v24);
        if (HuffmanCode != 1)
          continue;
        v59 = *(_DWORD *)(a1 + 772);
        if ((v59 & 6) == 0)
          goto LABEL_119;
        v60 = *(_QWORD *)(a1 + 16);
        v61 = v60 & 7;
        if ((v60 & 7) != 0)
        {
          v62 = *(_QWORD *)(a1 + 8);
          v63 = v62 & ~(-1 << v61);
          v60 &= 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(a1 + 8) = v62 >> v61;
          *(_QWORD *)(a1 + 16) = v60;
        }
        else
        {
          v63 = 0;
        }
        if (v60 <= 0x3F)
          *v24 &= ~(-1 << v60);
        HuffmanCode = -14;
        if (v63)
          continue;
        if ((v59 & 4) != 0)
        {
          *(_DWORD *)a1 = 12;
          v131 = *(void (**)(_QWORD, _QWORD))(a1 + 720);
          HuffmanCode = 1;
          if (v131)
          {
            v131(*(_QWORD *)(a1 + 736), *(int *)(a1 + 132));
            HuffmanCode = 1;
          }
        }
        else
        {
LABEL_119:
          if (!*(_DWORD *)(a1 + 132))
            goto LABEL_189;
          BrotliCalculateRingBufferSize(a1);
          if ((*(_BYTE *)(a1 + 772) & 2) != 0)
          {
            v35 = 11;
LABEL_190:
            *(_DWORD *)a1 = v35;
            HuffmanCode = 1;
          }
          else
          {
LABEL_121:
            v52 = 0;
            *(_QWORD *)(a1 + 864) = 0;
            *(_QWORD *)(a1 + 1040) = v153;
            *(_DWORD *)(a1 + 856) = 0;
            *(_QWORD *)(a1 + 848) = 0;
            *(_QWORD *)a1 = 18;
LABEL_122:
            HuffmanCode = DecodeVarLenUint8(a1, v24, (unint64_t *)(a1 + 8 * v52 + 312));
            if (HuffmanCode == 1)
            {
              v53 = *(int *)(a1 + 4);
              v84 = a1 + 8 * v53;
              v54 = *(_QWORD *)(v84 + 312) + 1;
              *(_QWORD *)(v84 + 312) = v54;
              if (v54 <= 1)
              {
                *(_DWORD *)(a1 + 4) = v53 + 1;
                HuffmanCode = 1;
                continue;
              }
              *(_DWORD *)a1 = 19;
LABEL_126:
              HuffmanCode = ReadHuffmanCode(v54 + 2, v54 + 2, (int *)(*(_QWORD *)(a1 + 256) + 2528 * (_DWORD)v53), 0, a1);
              if (HuffmanCode == 1)
              {
                *(_DWORD *)a1 = 20;
LABEL_128:
                HuffmanCode = ReadHuffmanCode(26, 0x1AuLL, (int *)(*(_QWORD *)(a1 + 264) + 1584 * *(int *)(a1 + 4)), 0, a1);
                if (HuffmanCode == 1)
                {
                  *(_DWORD *)a1 = 21;
LABEL_130:
                  v150 = v12;
                  v85 = *(int *)(a1 + 4);
                  v86 = *(_QWORD *)(a1 + 264);
                  v161[0] = 0;
                  if (*(_DWORD *)(a1 + 764))
                  {
                    v87 = *(_QWORD *)(a1 + 304);
                  }
                  else
                  {
                    v88 = (_BYTE *)(v86 + 1584 * (int)v85);
                    v89 = *(_QWORD *)(a1 + 16);
                    if (v89 >= 0xF)
                    {
                      v93 = *v24;
LABEL_139:
                      v96 = &v88[4 * v93];
                      v97 = *v96;
                      if (v97 >= 9)
                      {
                        v98 = v93;
                        v89 -= 8;
                        v93 >>= 8;
                        v96 += 4
                             * (v93 & ~(-1 << (v97
                                                                                                  - 8)) & 0x7F)
                             + 4 * (unint64_t)*(unsigned __int16 *)&v88[4 * v98 + 2];
                        LODWORD(v97) = *v96;
                      }
                      *(_QWORD *)(a1 + 8) = v93 >> v97;
                      *(_QWORD *)(a1 + 16) = v89 - v97;
                      v87 = *((unsigned __int16 *)v96 + 1);
                    }
                    else
                    {
                      v90 = *(unsigned __int8 **)(a1 + 40);
                      v91 = *(unsigned __int8 **)(a1 + 24);
                      while (v91 != v90)
                      {
                        v92 = *v91++;
                        v93 = ((unint64_t)v92 << v89) | *(_QWORD *)(a1 + 8);
                        v94 = v89 + 8;
                        *(_QWORD *)(a1 + 8) = v93;
                        *(_QWORD *)(a1 + 16) = v89 + 8;
                        *(_QWORD *)(a1 + 24) = v91;
                        v95 = v89 >= 7;
                        v89 += 8;
                        if (v95)
                        {
                          v89 = v94;
                          goto LABEL_139;
                        }
                      }
                      if (!SafeDecodeSymbol(v88, v24, v161))
                      {
LABEL_184:
                        HuffmanCode = 2;
                        v12 = v150;
                        continue;
                      }
                      v87 = v161[0];
                    }
                  }
                  v122 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v87);
                  v123 = *((unsigned __int8 *)v122 + 2);
                  v124 = *v122;
                  v125 = *(_QWORD *)(a1 + 16);
                  if (v125 >= v123)
                  {
                    v129 = *v24;
LABEL_182:
                    *(_QWORD *)(a1 + 8) = v129 >> v123;
                    *(_QWORD *)(a1 + 16) = v125 - v123;
                    *(_QWORD *)(a1 + 8 * v85 + 280) = (v129 & ~(-1 << v123)) + v124;
                    *(_DWORD *)(a1 + 764) = 0;
                    v130 = *(_DWORD *)(a1 + 4) + 1;
                    *(_DWORD *)a1 = 18;
                    *(_DWORD *)(a1 + 4) = v130;
                    HuffmanCode = 1;
                    v12 = v150;
                    continue;
                  }
                  v126 = *(unsigned __int8 **)(a1 + 40);
                  v127 = *(unsigned __int8 **)(a1 + 24);
                  while (v127 != v126)
                  {
                    v128 = *v127++;
                    v129 = ((unint64_t)v128 << v125) | *(_QWORD *)(a1 + 8);
                    v125 += 8;
                    *(_QWORD *)(a1 + 8) = v129;
                    *(_QWORD *)(a1 + 16) = v125;
                    *(_QWORD *)(a1 + 24) = v127;
                    if (v125 >= v123)
                      goto LABEL_182;
                  }
                  *(_QWORD *)(a1 + 304) = v87;
                  *(_DWORD *)(a1 + 764) = 1;
                  goto LABEL_184;
                }
              }
            }
          }
        }
        continue;
      case 2:
        v46 = *(_DWORD *)(a1 + 772);
        goto LABEL_77;
      case 3:
        goto LABEL_79;
      case 4:
        goto LABEL_80;
      case 5:
        v47 = *(_QWORD *)(a1 + 16);
        if (v47 >= 6)
        {
          v49 = *v24;
        }
        else
        {
          v48 = *(unsigned __int8 **)(a1 + 24);
          HuffmanCode = 2;
          if (v48 == *(unsigned __int8 **)(a1 + 40))
            continue;
          v49 = ((unint64_t)*v48 << v47) | *(_QWORD *)(a1 + 8);
          v47 += 8;
          *(_QWORD *)(a1 + 24) = v48 + 1;
        }
        *(_QWORD *)(a1 + 8) = v49 >> 6;
        *(_QWORD *)(a1 + 16) = v47 - 6;
        *(_QWORD *)(a1 + 384) = v49 & 3;
        *(_QWORD *)(a1 + 392) = ((v49 >> 2) & 0xF) << (v49 & 3);
        v64 = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 312));
        *(_QWORD *)(a1 + 792) = v64;
        HuffmanCode = -21;
        if (!v64)
          continue;
        LODWORD(i) = 0;
        *(_QWORD *)a1 = 6;
LABEL_87:
        v55 = *(_QWORD *)(a1 + 312);
        if ((int)i < (int)v55)
        {
          for (i = (int)i; i < (int)v55; ++i)
          {
            v65 = *(_QWORD *)(a1 + 16);
            if (v65 >= 2)
            {
              v67 = *v24;
            }
            else
            {
              v66 = *(unsigned __int8 **)(a1 + 24);
              if (v66 == *(unsigned __int8 **)(a1 + 40))
              {
                *(_DWORD *)(a1 + 4) = i;
                HuffmanCode = 2;
                goto LABEL_20;
              }
              v67 = ((unint64_t)*v66 << v65) | *(_QWORD *)(a1 + 8);
              v65 += 8;
              *(_QWORD *)(a1 + 24) = v66 + 1;
            }
            *(_QWORD *)(a1 + 8) = v67 >> 2;
            *(_QWORD *)(a1 + 16) = v65 - 2;
            *(_BYTE *)(*(_QWORD *)(a1 + 792) + i) = v67 & 3;
            v55 = *(_QWORD *)(a1 + 312);
          }
        }
        *(_DWORD *)a1 = 22;
LABEL_95:
        HuffmanCode = DecodeContextMap(v55 << 6, v159, v160, a1);
        if (HuffmanCode != 1)
          continue;
        *v151 = 0u;
        v151[1] = 0u;
        v68 = *(_QWORD *)(a1 + 312);
        if (v68)
        {
          v69 = 0;
          v70 = *v160;
          do
          {
            v162 = vld4q_s8((const char *)v70);
            v71 = vld1q_dup_s8((const char *)v70);
            v162.val[0] = vorrq_s8(vorrq_s8(veorq_s8(v162.val[1], v71), veorq_s8(v162.val[0], v71)), vorrq_s8(veorq_s8(v162.val[2], v71), veorq_s8(v162.val[3], v71)));
            v162.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v162.val[0]);
            v162.val[2] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v162.val[1].i8);
            v162.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v162.val[0].i8);
            v72 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v162.val[0].i8);
            v162.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v162.val[1]);
            v162.val[0] = (int8x16_t)vmovl_high_u16((uint16x8_t)v162.val[0]);
            *(int8x8_t *)v162.val[0].i8 = vorr_s8(vorr_s8(vorr_s8(*(int8x8_t *)v72.i8, *(int8x8_t *)v162.val[2].i8), vorr_s8(*(int8x8_t *)v162.val[0].i8, *(int8x8_t *)v162.val[1].i8)), vorr_s8(vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v162.val[2], v162.val[2], 8uLL)), vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v162.val[0], v162.val[0], 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v162.val[1], v162.val[1], 8uLL))));
            v73.i64[0] = v162.val[0].u32[0];
            v73.i64[1] = v162.val[0].u32[1];
            if (!*(_QWORD *)&vorr_s8((int8x8_t)v162.val[0].u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)))
              *(_DWORD *)(a1 + 4 * (v69 >> 5) + 816) |= 1 << v69;
            ++v69;
            v70 += 64;
          }
          while (v68 != v69);
        }
        *(_DWORD *)a1 = 23;
LABEL_102:
        v74 = *(_DWORD *)(a1 + 384);
        v75 = *(_QWORD *)(a1 + 392);
        v76 = v75 + 16;
        v77 = v74 + 1;
        if ((*(_BYTE *)(a1 + 772) & 0x20) != 0)
        {
          if (v75 <= 0x7FFFFFFB)
          {
            v79 = -1;
            v80 = -5;
            v81 = ((2147483644 - v75) >> v74) + 4;
            do
            {
              ++v79;
              v80 += 2;
              v19 = v81 > 3;
              v81 >>= 1;
            }
            while (v19);
            v82 = (((((2147483644 - v75) >> v74) + 4) >> v79) & 1) + v80;
            v83 = v75 + ((v82 << v74) | ~(-1 << v74)) + 17;
            v78 = v75 + 16;
            if (v82 != -1)
              v78 = v83;
          }
          else
          {
            v78 = -2147483636;
          }
          v149 = v78;
          v147 = v76 + (62 << v77);
        }
        else
        {
          v147 = v76 + (24 << v77);
          v149 = v76 + (24 << v77);
        }
        HuffmanCode = DecodeContextMap(4 * *(_QWORD *)(a1 + 328), v158, v157, a1);
        if (HuffmanCode != 1)
          continue;
        v152 = v24;
        v57 = v155;
        v145 = BrotliDecoderHuffmanTreeGroupInit(a1, v155, 256, 256, *(_QWORD *)(a1 + 776));
        v146 = v145 & BrotliDecoderHuffmanTreeGroupInit(a1, v156, 704, 704, *(_QWORD *)(a1 + 320));
        if ((v146 & BrotliDecoderHuffmanTreeGroupInit(a1, v154, v147, v149, *(_QWORD *)(a1 + 400)) & 1) != 0)
        {
          v56 = 0;
          *(_QWORD *)a1 = 24;
LABEL_143:
          if (*v26 == 1)
          {
            v99 = *(_DWORD *)(a1 + 2668);
          }
          else
          {
            v99 = 0;
            *(_QWORD *)(a1 + 2672) = *(_QWORD *)(v57 + 8);
            *(_DWORD *)(a1 + 2668) = 0;
            *(_DWORD *)(a1 + 848) = 1;
          }
          if (v99 >= *(unsigned __int16 *)(v57 + 20))
          {
LABEL_151:
            *(_DWORD *)(a1 + 848) = 0;
            *(_DWORD *)(a1 + 4) = v56 + 1;
            HuffmanCode = 1;
            v24 = v152;
            if (v56 >= 2)
            {
              *(_DWORD *)a1 = 25;
LABEL_153:
              v103 = *(_QWORD *)(a1 + 344);
              v104 = *(_QWORD *)(a1 + 784);
              *(_QWORD *)(a1 + 168) = v104 + (v103 << 6);
              *(_DWORD *)(a1 + 272) = (*(unsigned int *)(a1 + 4 * (v103 >> 5) + 816) >> (v103 & 0x1F)) & 1;
              *(_QWORD *)(a1 + 416) = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * *(unsigned __int8 *)(v104 + (v103 << 6)));
              *(_QWORD *)(a1 + 160) = (char *)&_kBrotliContextLookupTable
                                    + 512 * (unint64_t)(*(_BYTE *)(*(_QWORD *)(a1 + 792) + v103) & 3);
              *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 408);
              *(_QWORD *)(a1 + 152) = **(_QWORD **)(a1 + 208);
              v105 = BrotliEnsureRingBuffer(a1);
              HuffmanCode = -27;
              if (v105)
              {
                v106 = *(_QWORD *)(a1 + 384);
                v107 = *(_QWORD *)(a1 + 392);
                v108 = *(unsigned __int16 *)(a1 + 250);
                if (v107)
                {
                  v109 = 0;
                  do
                  {
                    *(_BYTE *)(v148 + v109) = 0;
                    v110 = v109 + 1;
                    *(_QWORD *)(v148 + 8 * v109 + 656) = v109 + 1;
                    v109 = v110;
                  }
                  while (v107 != v110);
                  v111 = v110 + 16;
                }
                else
                {
                  v111 = 16;
                }
                if (v111 < v108)
                {
                  v112 = 0;
                  v113 = v107 + 1;
                  v114 = 1;
                  do
                  {
                    v115 = v113 + ((((v112 + 2) << v114) - 4) << v106);
                    v116 = (1 << v106);
                    do
                    {
                      *((_BYTE *)v26 + v111) = v114;
                      *(_QWORD *)&v26[2 * v111++ + 136] = v115++;
                      --v116;
                    }
                    while (v116);
                    v114 += v112;
                    v112 ^= 1uLL;
                  }
                  while (v111 < v108);
                }
                *(_DWORD *)a1 = 7;
LABEL_166:
                HuffmanCode = ProcessCommands(a1);
                if (HuffmanCode == 2)
                  HuffmanCode = SafeProcessCommands(a1);
              }
            }
          }
          else
          {
            v100 = *(int **)(a1 + 2672);
            while (1)
            {
              v161[0] = 0;
              v101 = ReadHuffmanCode(*(unsigned __int16 *)(v57 + 16), *(unsigned __int16 *)(v57 + 18), v100, v161, a1);
              if (v101 != 1)
                break;
              v102 = *(int *)(a1 + 2668);
              *(_QWORD *)(*(_QWORD *)v57 + 8 * v102) = *(_QWORD *)(a1 + 2672);
              v100 = (int *)(*(_QWORD *)(a1 + 2672) + 4 * v161[0]);
              *(_QWORD *)(a1 + 2672) = v100;
              *(_DWORD *)(a1 + 2668) = v102 + 1;
              if ((int)v102 + 1 >= *(unsigned __int16 *)(v57 + 20))
              {
                v56 = *(_DWORD *)(a1 + 4);
                goto LABEL_151;
              }
            }
            HuffmanCode = v101;
            v24 = v152;
          }
          continue;
        }
        v143 = v12 - *a2;
        v144 = a1;
        HuffmanCode = -22;
        return SaveErrorCode(v144, HuffmanCode, v143);
      case 6:
        LODWORD(i) = *(_DWORD *)(a1 + 4);
        goto LABEL_87;
      case 7:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_166;
      case 0xB:
        HuffmanCode = CopyUncompressedBlockToOutput(a4, v7, a6, a1);
        if (HuffmanCode == 1)
          *(_DWORD *)a1 = 14;
        continue;
      case 0xC:
        v51 = SkipMetadataBlock(a1);
        HuffmanCode = 2;
        if (v51 != 1)
          continue;
        goto LABEL_189;
      case 0xD:
      case 0xF:
      case 0x10:
        HuffmanCode = WriteRingBuffer(a1, a4, v7, a6, 0);
        if (HuffmanCode != 1)
          continue;
        WrapRingBuffer((void **)a1);
        if (*(_DWORD *)(a1 + 100) == 1 << (*(_DWORD *)(a1 + 772) >> 6))
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 92);
        if (*(_DWORD *)a1 == 16)
        {
          v35 = 10;
          goto LABEL_190;
        }
        if (*(_DWORD *)a1 != 15)
        {
          if (*(_DWORD *)(a1 + 4))
          {
            v35 = 8;
          }
          else if (*(_DWORD *)(a1 + 132))
          {
            v35 = 9;
          }
          else
          {
LABEL_189:
            v35 = 14;
          }
          goto LABEL_190;
        }
        v33 = *(_QWORD *)(a1 + 808);
        if (!v33
          || *(_DWORD *)(v33 + 16) == *(_DWORD *)(v33 + 20)
          || (v34 = *(_DWORD *)(a1 + 88) + CopyFromCompoundDictionary(a1, *(_DWORD *)(a1 + 88)),
              *(_DWORD *)(a1 + 88) = v34,
              HuffmanCode = 1,
              v34 < *(_DWORD *)(a1 + 100)))
        {
          if (*(_DWORD *)(a1 + 132))
            v35 = 7;
          else
            v35 = 14;
          goto LABEL_190;
        }
        continue;
      case 0xE:
        HuffmanCode = -10;
        if ((*(_DWORD *)(a1 + 132) & 0x80000000) != 0)
          continue;
        BrotliDecoderStateCleanupAfterMetablock(a1);
        if ((*(_BYTE *)(a1 + 772) & 1) == 0)
        {
          v35 = 3;
          goto LABEL_190;
        }
        v118 = *(_QWORD *)(a1 + 16);
        v119 = v118 & 7;
        if ((v118 & 7) != 0)
        {
          v120 = *(_QWORD *)(a1 + 8);
          v121 = v120 & ~(-1 << v119);
          v118 &= 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(a1 + 8) = v120 >> v119;
          *(_QWORD *)(a1 + 16) = v118;
        }
        else
        {
          v121 = 0;
        }
        if (v118 <= 0x3F)
          *v24 &= ~(-1 << v118);
        HuffmanCode = -15;
        if (!v121)
        {
          if (!*(_QWORD *)(a1 + 80))
          {
            if (v118 > 7)
              v133 = (_BYTE *)(*(_QWORD *)(a1 + 24) - (v118 >> 3));
            else
              v133 = *(_BYTE **)(a1 + 24);
            v134 = v118 & 7;
            v135 = *(_QWORD *)(a1 + 8) & ~(-1 << v134);
            *(_QWORD *)(a1 + 16) = v134;
            *(_QWORD *)(a1 + 24) = v133;
            *(_QWORD *)(a1 + 8) = v135;
            *a2 = *(_QWORD *)(a1 + 40) - (_QWORD)v133;
            *a3 = (uint64_t)v133;
          }
          *(_DWORD *)a1 = 26;
LABEL_212:
          if (!*(_QWORD *)(a1 + 136) || (HuffmanCode = WriteRingBuffer(a1, a4, v7, a6, 1), HuffmanCode == 1))
          {
            v143 = v12 - *a2;
            v144 = a1;
            HuffmanCode = 1;
            return SaveErrorCode(v144, HuffmanCode, v143);
          }
        }
        continue;
      case 0x11:
        goto LABEL_121;
      case 0x12:
        v52 = *(_DWORD *)(a1 + 4);
        if (v52 < 3)
          goto LABEL_122;
        v35 = 5;
        goto LABEL_190;
      case 0x13:
        v53 = *(int *)(a1 + 4);
        v54 = *(_QWORD *)(a1 + 8 * v53 + 312);
        goto LABEL_126;
      case 0x14:
        goto LABEL_128;
      case 0x15:
        goto LABEL_130;
      case 0x16:
        v55 = *(_QWORD *)(a1 + 312);
        goto LABEL_95;
      case 0x17:
        goto LABEL_102;
      case 0x18:
        v56 = *(_DWORD *)(a1 + 4);
        v152 = v24;
        if (v56)
        {
          if (v56 == 2)
          {
            v57 = v154;
          }
          else
          {
            v57 = v156;
            if (v56 != 1)
            {
              v143 = v12 - *a2;
              v144 = a1;
              HuffmanCode = -31;
              return SaveErrorCode(v144, HuffmanCode, v143);
            }
          }
        }
        else
        {
          v57 = v155;
        }
        goto LABEL_143;
      case 0x19:
        goto LABEL_153;
      case 0x1A:
        goto LABEL_212;
      default:
        continue;
    }
  }
}

uint64_t SaveErrorCode(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 744) += a3;
  if (*(_QWORD *)(a1 + 80) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 40))
    *(_QWORD *)(a1 + 80) = 0;
  if (a2 - 1 >= 3)
    return 0;
  else
    return a2;
}

uint64_t WriteRingBuffer(uint64_t a1, size_t *a2, void **a3, size_t *a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  void *v17;
  size_t v18;
  size_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v25;
  BOOL v26;
  int v27;

  v5 = *(int *)(a1 + 100);
  if (*(_DWORD *)(a1 + 88) >= (int)v5)
    v6 = *(_DWORD *)(a1 + 100);
  else
    v6 = *(_DWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 432);
  v8 = *(_QWORD *)(a1 + 424) * v5 - v7;
  v9 = v8 + v6;
  v10 = *a2;
  if (*a2 >= v9)
    v11 = v8 + v6;
  else
    v11 = *a2;
  if ((*(_DWORD *)(a1 + 132) & 0x80000000) != 0)
    return 4294967287;
  if (!a3)
    goto LABEL_13;
  v17 = (void *)(*(_QWORD *)(a1 + 136) + (v7 & *(int *)(a1 + 104)));
  if (!*a3)
  {
    *a3 = v17;
LABEL_13:
    v18 = v10;
    goto LABEL_14;
  }
  memcpy(*a3, v17, v11);
  *a3 = (char *)*a3 + v11;
  v18 = *a2;
LABEL_14:
  *a2 = v18 - v11;
  v20 = *(_QWORD *)(a1 + 432) + v11;
  *(_QWORD *)(a1 + 432) = v20;
  if (a4)
    *a4 = v20;
  v21 = *(_DWORD *)(a1 + 100);
  v22 = *(_DWORD *)(a1 + 772);
  v23 = 1 << (v22 >> 6);
  if (v9 <= v10)
  {
    if (v21 == v23)
    {
      v25 = *(_DWORD *)(a1 + 88);
      v26 = __OFSUB__(v25, v21);
      v27 = v25 - v21;
      if (v27 < 0 == v26)
      {
        *(_DWORD *)(a1 + 88) = v27;
        ++*(_QWORD *)(a1 + 424);
        *(_DWORD *)(a1 + 772) = v22 & 0xFFFFFFF7 | (8 * (v27 != 0));
      }
    }
    return 1;
  }
  else if (v21 != v23 && a5 == 0)
  {
    return 1;
  }
  else
  {
    return 3;
  }
}

uint64_t DecodeMetaBlockLength(_DWORD *a1, unint64_t *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v43;
  int v44;

  v2 = a1[188];
  while (2)
  {
    switch(v2)
    {
      case 0:
        v3 = a2[1];
        if (v3)
        {
          v4 = *a2;
        }
        else
        {
          v6 = (unsigned __int8 *)a2[2];
          if (v6 == (unsigned __int8 *)a2[4])
            return 2;
          v4 = *a2 | *v6;
          a2[2] = (unint64_t)(v6 + 1);
          v3 = 8;
        }
        *a2 = v4 >> 1;
        a2[1] = v3 - 1;
        v7 = a1[193] & 0xFFFFFFF8 | v4 & 1;
        a1[33] = 0;
        a1[193] = v7;
        if ((v4 & 1) == 0)
        {
          v2 = 2;
          goto LABEL_23;
        }
        a1[188] = 1;
        goto LABEL_11;
      case 1:
LABEL_11:
        v8 = a2[1];
        if (v8)
        {
          v9 = *a2;
        }
        else
        {
          v10 = (unsigned __int8 *)a2[2];
          if (v10 == (unsigned __int8 *)a2[4])
            return 2;
          v9 = *a2 | *v10;
          a2[2] = (unint64_t)(v10 + 1);
          v8 = 8;
        }
        v5 = v8 - 1;
        *a2 = v9 >> 1;
        a2[1] = v5;
        if ((v9 & 1) != 0)
          goto LABEL_83;
        a1[188] = 2;
LABEL_17:
        if (v5 >= 2)
        {
          v12 = *a2;
        }
        else
        {
          v11 = (unsigned __int8 *)a2[2];
          if (v11 == (unsigned __int8 *)a2[4])
            return 2;
          v12 = ((unint64_t)*v11 << v5) | *a2;
          v5 += 8;
          a2[2] = (unint64_t)(v11 + 1);
        }
        *a2 = v12 >> 2;
        a2[1] = v5 - 2;
        v13 = a1[193] & 0xFFF00FFF | ((v12 & 3) << 12) | 0x4000;
        a1[193] = v13;
        a1[1] = 0;
        if ((v12 & 3) == 3)
        {
          a1[193] = v13 | 4;
          v2 = 5;
LABEL_23:
          a1[188] = v2;
          continue;
        }
        v14 = 0;
        a1[188] = 3;
LABEL_27:
        if (v14 >= (v13 >> 12))
        {
LABEL_41:
          a1[188] = 4;
          if ((v13 & 1) == 0)
          {
LABEL_44:
            v23 = a2[1];
            if (v23)
            {
              v24 = *a2;
              v25 = v23 - 1;
            }
            else
            {
              v30 = (unsigned __int8 *)a2[2];
              if (v30 == (unsigned __int8 *)a2[4])
                return 2;
              v24 = *a2 | *v30;
              a2[2] = (unint64_t)(v30 + 1);
              v25 = 7;
            }
            *a2 = v24 >> 1;
            a2[1] = v25;
            a1[193] = a1[193] & 0xFFFFFFFD | (2 * (v24 & 1));
          }
LABEL_53:
          v31 = a1[33] + 1;
LABEL_82:
          a1[33] = v31;
LABEL_83:
          a1[188] = 0;
          return 1;
        }
        v16 = a2[1];
        v17 = 4 * v14;
        while (2)
        {
          if (v16 >= 4)
          {
            v19 = *a2;
            goto LABEL_33;
          }
          v18 = (unsigned __int8 *)a2[2];
          if (v18 != (unsigned __int8 *)a2[4])
          {
            v19 = ((unint64_t)*v18 << v16) | *a2;
            v16 += 8;
            a2[2] = (unint64_t)(v18 + 1);
LABEL_33:
            v20 = v19 & 0xF;
            v16 -= 4;
            *a2 = v19 >> 4;
            a2[1] = v16;
            ++v14;
            v13 = a1[193];
            if (v14 == (v13 >> 12) && v14 >= 5 && v20 == 0)
              return 0xFFFFFFFFLL;
            a1[33] |= v20 << v17;
            v17 += 4;
            if (v14 >= (v13 >> 12))
              goto LABEL_41;
            continue;
          }
          break;
        }
LABEL_84:
        a1[1] = v14;
        return 2;
      case 2:
        v5 = a2[1];
        goto LABEL_17;
      case 3:
        v14 = a1[1];
        v13 = a1[193];
        goto LABEL_27;
      case 4:
        if ((a1[193] & 1) == 0)
          goto LABEL_44;
        goto LABEL_53;
      case 5:
        v26 = a2[1];
        if (v26)
        {
          v27 = *a2;
          v28 = v26 - 1;
        }
        else
        {
          v32 = (unsigned __int8 *)a2[2];
          if (v32 == (unsigned __int8 *)a2[4])
            return 2;
          v27 = *a2 | *v32;
          a2[2] = (unint64_t)(v32 + 1);
          v28 = 7;
        }
        *a2 = v27 >> 1;
        a2[1] = v28;
        if ((v27 & 1) != 0)
          return 4294967294;
        a1[188] = 6;
LABEL_59:
        if (v28 >= 2)
        {
          v34 = *a2;
        }
        else
        {
          v33 = (unsigned __int8 *)a2[2];
          if (v33 == (unsigned __int8 *)a2[4])
            return 2;
          v34 = ((unint64_t)*v33 << v28) | *a2;
          v28 += 8;
          a2[2] = (unint64_t)(v33 + 1);
        }
        *a2 = v34 >> 2;
        a2[1] = v28 - 2;
        if ((v34 & 3) == 0)
          goto LABEL_83;
        v29 = a1[193] & 0xFFF00FFF | ((v34 & 3) << 12);
        a1[193] = v29;
        a1[188] = 7;
LABEL_65:
        v14 = a1[1];
        if (v14 >= (v29 >> 12))
        {
          v44 = a1[33];
        }
        else
        {
          v35 = a2[1];
          v36 = 8 * v14;
          do
          {
            if (v35 >= 8)
            {
              v38 = *a2;
            }
            else
            {
              v37 = (unsigned __int8 *)a2[2];
              if (v37 == (unsigned __int8 *)a2[4])
                goto LABEL_84;
              v38 = ((unint64_t)*v37 << v35) | *a2;
              v35 += 8;
              a2[2] = (unint64_t)(v37 + 1);
            }
            v39 = v38;
            v35 -= 8;
            *a2 = v38 >> 8;
            a2[1] = v35;
            ++v14;
            v40 = a1[193];
            if (v14 == (v40 >> 12) && v14 >= 2 && v39 == 0)
              return 4294967293;
            v43 = (v40 >> 12);
            v44 = a1[33] | (v39 << v36);
            a1[33] = v44;
            v36 += 8;
          }
          while (v14 < v43);
        }
        v31 = v44 + 1;
        goto LABEL_82;
      case 6:
        v28 = a2[1];
        goto LABEL_59;
      case 7:
        v29 = a1[193];
        goto LABEL_65;
      default:
        return 4294967265;
    }
  }
}

uint64_t BrotliCalculateRingBufferSize(uint64_t result)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v1 = *(_DWORD *)(result + 772);
  v2 = *(_DWORD *)(result + 100);
  if (v2)
    v3 = *(_DWORD *)(result + 100);
  else
    v3 = 1024;
  if ((v1 & 4) == 0)
  {
    v4 = 1 << (v1 >> 6);
    if (v2 != v4)
    {
      v5 = *(_QWORD *)(result + 136);
      if (v5)
        LODWORD(v5) = *(_DWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 132) + v5;
      if (v3 <= v6)
        v3 = v6;
      if ((v1 & 0x10) != 0)
      {
        do
        {
          v7 = v4;
          v4 >>= 1;
        }
        while (v4 >= v3);
      }
      else
      {
        v7 = 1 << (v1 >> 6);
      }
      *(_DWORD *)(result + 768) = v7;
    }
  }
  return result;
}

uint64_t DecodeVarLenUint8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;

  v3 = *(_DWORD *)(a1 + 760);
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 != 2)
        return 4294967265;
      v4 = *a3;
      goto LABEL_19;
    }
    v7 = a2[1];
  }
  else
  {
    v5 = a2[1];
    if (v5)
    {
      v6 = *a2;
      v7 = v5 - 1;
    }
    else
    {
      v9 = (unsigned __int8 *)a2[2];
      if (v9 == (unsigned __int8 *)a2[4])
        return 2;
      v6 = *a2 | *v9;
      a2[2] = (unint64_t)(v9 + 1);
      v7 = 7;
    }
    *a2 = v6 >> 1;
    a2[1] = v7;
    if ((v6 & 1) == 0)
    {
      *a3 = 0;
      return 1;
    }
  }
  if (v7 >= 3)
  {
    v11 = *a2;
    goto LABEL_17;
  }
  v10 = (unsigned __int8 *)a2[2];
  if (v10 == (unsigned __int8 *)a2[4])
  {
    *(_DWORD *)(a1 + 760) = 1;
    return 2;
  }
  v11 = ((unint64_t)*v10 << v7) | *a2;
  v7 += 8;
  a2[2] = (unint64_t)(v10 + 1);
LABEL_17:
  *a2 = v11 >> 3;
  a2[1] = v7 - 3;
  v4 = v11 & 7;
  if ((v11 & 7) == 0)
  {
    v8 = 1;
    *a3 = 1;
LABEL_27:
    *(_DWORD *)(a1 + 760) = 0;
    return v8;
  }
  *a3 = v4;
LABEL_19:
  v12 = a2[1];
  if (v12 >= v4)
  {
    v16 = *a2;
LABEL_25:
    v17 = v16 & ~(-1 << v4);
    *a2 = v16 >> v4;
    a2[1] = v12 - v4;
    v8 = 1;
    *a3 = v17 + (1 << *(_DWORD *)a3);
    goto LABEL_27;
  }
  v13 = (unsigned __int8 *)a2[4];
  v14 = (unsigned __int8 *)a2[2];
  while (v14 != v13)
  {
    v15 = *v14++;
    v16 = ((unint64_t)v15 << v12) | *a2;
    v12 += 8;
    *a2 = v16;
    a2[1] = v12;
    a2[2] = (unint64_t)v14;
    if (v12 >= v4)
      goto LABEL_25;
  }
  v8 = 2;
  *(_DWORD *)(a1 + 760) = 2;
  return v8;
}

uint64_t ReadHuffmanCode(uint64_t a1, unint64_t a2, int *__src, _QWORD *a4, uint64_t a5)
{
  unint64_t *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v55;
  int32x4_t *v56;
  __int128 v57;
  int32x4_t v58;
  int32x4_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned __int8 *v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  BOOL v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  char *__srca;
  _QWORD *v119;

  v9 = (unint64_t *)(a5 + 8);
  v10 = *(_DWORD *)(a5 + 856);
  v11 = a5 + 2634;
  v12 = (_QWORD *)(a5 + 2616);
  if (!v10)
  {
    v13 = *(_QWORD *)(a5 + 16);
    if (v13 >= 2)
    {
      v15 = *v9;
    }
    else
    {
      v14 = *(unsigned __int8 **)(a5 + 24);
      if (v14 == *(unsigned __int8 **)(a5 + 40))
        return 2;
      v15 = ((unint64_t)*v14 << v13) | *(_QWORD *)(a5 + 8);
      v13 += 8;
      *(_QWORD *)(a5 + 24) = v14 + 1;
    }
    *(_QWORD *)(a5 + 864) = v15 & 3;
    v16 = v13 - 2;
    *(_QWORD *)(a5 + 8) = v15 >> 2;
    *(_QWORD *)(a5 + 16) = v16;
    if ((v15 & 3) == 1)
    {
LABEL_10:
      if (v16 >= 2)
      {
        v18 = *v9;
      }
      else
      {
        v17 = *(unsigned __int8 **)(a5 + 24);
        if (v17 == *(unsigned __int8 **)(a5 + 40))
        {
          v87 = 1;
          goto LABEL_106;
        }
        v18 = ((unint64_t)*v17 << v16) | *(_QWORD *)(a5 + 8);
        v16 += 8;
        *(_QWORD *)(a5 + 24) = v17 + 1;
      }
      *(_QWORD *)(a5 + 888) = v18 & 3;
      *(_QWORD *)(a5 + 8) = v18 >> 2;
      *(_QWORD *)(a5 + 16) = v16 - 2;
      *(_QWORD *)(a5 + 864) = 0;
LABEL_37:
      v39 = 0;
      v40 = a1 - 1;
      if (a1 != 1)
      {
        do
        {
          ++v39;
          v41 = v40 > 1;
          v40 >>= 1;
        }
        while (v41);
      }
      v42 = *(_QWORD *)(a5 + 864);
      v20 = *(_QWORD *)(a5 + 888);
      if (v42 <= v20)
      {
        v48 = ~(-1 << v39);
        v49 = *(_QWORD *)(a5 + 16);
        do
        {
          if (v49 >= v39)
          {
            v53 = *v9;
          }
          else
          {
            v50 = *(unsigned __int8 **)(a5 + 40);
            v51 = *(unsigned __int8 **)(a5 + 24);
            do
            {
              if (v51 == v50)
              {
                *(_QWORD *)(a5 + 864) = v42;
                result = 2;
                *(_DWORD *)(a5 + 856) = 2;
                return result;
              }
              v52 = *v51++;
              v53 = ((unint64_t)v52 << v49) | *(_QWORD *)(a5 + 8);
              v49 += 8;
              *(_QWORD *)(a5 + 8) = v53;
              *(_QWORD *)(a5 + 16) = v49;
              *(_QWORD *)(a5 + 24) = v51;
            }
            while (v49 < v39);
          }
          v49 -= v39;
          *(_QWORD *)(a5 + 8) = v53 >> v39;
          *(_QWORD *)(a5 + 16) = v49;
          if ((v53 & v48) >= a2)
            return 4294967292;
          *(_WORD *)(a5 + 1048 + 2 * v42++) = v53 & v48;
        }
        while (v42 <= v20);
      }
      if (v20)
      {
        v43 = 0;
        v44 = 525;
        do
        {
          v45 = *(unsigned __int16 *)(a5 + 1048 + 2 * v43++);
          v46 = v44;
          do
          {
            if (v45 == *(unsigned __int16 *)(a5 + 2 * v46))
              return 4294967291;
            v47 = v46 - 523;
            ++v46;
          }
          while (v47 <= v20);
          ++v44;
        }
        while (v43 != v20);
LABEL_15:
        if (v20 == 3)
        {
          v21 = *(_QWORD *)(a5 + 16);
          if (v21)
          {
            v22 = *v9;
            v23 = v21 - 1;
          }
          else
          {
            v88 = *(unsigned __int8 **)(a5 + 24);
            if (v88 == *(unsigned __int8 **)(a5 + 40))
            {
              v87 = 3;
              goto LABEL_106;
            }
            v22 = *(_QWORD *)(a5 + 8) | *v88;
            *(_QWORD *)(a5 + 24) = v88 + 1;
            v23 = 7;
          }
          *(_QWORD *)(a5 + 8) = v22 >> 1;
          *(_QWORD *)(a5 + 16) = v23;
          v20 = (v22 & 1) + 3;
          *(_QWORD *)(a5 + 888) = v20;
        }
      }
      v89 = BrotliBuildSimpleHuffmanTable(__src, 8, (unsigned __int16 *)(a5 + 1048), v20);
      if (a4)
        *a4 = v89;
LABEL_155:
      *(_DWORD *)(a5 + 856) = 0;
      return 1;
    }
    *(_OWORD *)(a5 + 896) = xmmword_19CFE4D60;
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(a5 + 2642) = 0;
    *v12 = 0;
    *(_QWORD *)(a5 + 2624) = 0;
    *(_WORD *)(a5 + 2632) = 0;
    v10 = 4;
    *(_DWORD *)(a5 + 856) = 4;
  }
  switch(v10)
  {
    case 1:
      v16 = *(_QWORD *)(a5 + 16);
      goto LABEL_10;
    case 2:
      goto LABEL_37;
    case 3:
      v20 = *(_QWORD *)(a5 + 888);
      goto LABEL_15;
    case 4:
      v24 = *(_QWORD *)(a5 + 896);
      v25 = *(_QWORD *)(a5 + 904);
      v26 = *(_QWORD *)(a5 + 864);
      if (v26 > 0x11)
        goto LABEL_58;
      v27 = *(_QWORD *)(a5 + 16);
      break;
    case 5:
      __srca = (char *)__src;
      v119 = a4;
      v34 = *(_QWORD *)(a5 + 888);
      v35 = *(_QWORD *)(a5 + 896);
      v36 = *(_QWORD *)(a5 + 904);
      v117 = *(_QWORD *)(a5 + 880);
      v37 = *(_QWORD *)(a5 + 872);
      v38 = *(_QWORD *)(a5 + 1040);
      goto LABEL_66;
    default:
      return 4294967265;
  }
  while (1)
  {
    v28 = kCodeLengthCodeOrder[v26];
    if (v27 >= 4)
    {
      v30 = *v9;
      goto LABEL_24;
    }
    v29 = *(unsigned __int8 **)(a5 + 24);
    if (v29 == *(unsigned __int8 **)(a5 + 40))
      break;
    v30 = ((unint64_t)*v29 << v27) | *(_QWORD *)(a5 + 8);
    v27 += 8;
    *(_QWORD *)(a5 + 24) = v29 + 1;
LABEL_24:
    v31 = v30 & 0xF;
    v32 = kCodeLengthPrefixLength[v31];
LABEL_25:
    v33 = kCodeLengthPrefixValue[v31];
    v27 -= v32;
    *(_QWORD *)(a5 + 8) = v30 >> v32;
    *(_QWORD *)(a5 + 16) = v27;
    *((_BYTE *)v12 + v28) = v33;
    if (((0x1111uLL >> v31) & 1) != 0
      || (v25 -= 0x20u >> v33, ++v24, ++*(_WORD *)(v11 + 2 * v33), (unint64_t)(v25 - 33) >= 0xFFFFFFFFFFFFFFE0))
    {
      if (++v26 != 18)
        continue;
    }
LABEL_58:
    if (v24 != 1 && v25 != 0)
      return 4294967290;
    __srca = (char *)__src;
    v119 = a4;
    BrotliBuildCodeLengthsHuffmanTable(a5 + 912, (uint64_t)v12, (unsigned __int16 *)v11);
    v55 = 0;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    v56 = (int32x4_t *)(a5 + 2488);
    v38 = *(_QWORD *)(a5 + 1040);
    *(_QWORD *)&v57 = -1;
    *((_QWORD *)&v57 + 1) = -1;
    do
    {
      v58 = vdupq_n_s32(v55);
      v59 = vaddq_s32(v58, (int32x4_t)xmmword_19CFE4D20);
      *v56 = v59;
      v56[1] = vaddq_s32(v58, (int32x4_t)xmmword_19CFE4D30);
      v56 += 2;
      *(_OWORD *)(v38 + 2 * v59.i32[0]) = v57;
      v55 += 8;
    }
    while (v55 != 16);
    v37 = 0;
    v35 = 0;
    v34 = 0;
    *(_QWORD *)(a5 + 872) = 0;
    *(_OWORD *)(a5 + 880) = xmmword_19CFE4D40;
    *(_OWORD *)(a5 + 896) = xmmword_19CFE4D50;
    *(_DWORD *)(a5 + 856) = 5;
    v36 = 0x8000;
    v117 = 8;
LABEL_66:
    v60 = a5 + 2488;
    if (BrotliWarmupBitReader(v9))
    {
      if (v34 >= a2 || !v36)
      {
LABEL_150:
        *(_QWORD *)(a5 + 904) = v36;
LABEL_151:
        if (v36)
          return 4294967289;
LABEL_153:
        v116 = BrotliBuildHuffmanTable(__srca, 8, *(_QWORD *)(a5 + 1040), v11);
        if (v119)
          *v119 = v116;
        goto LABEL_155;
      }
      v62 = *(unsigned int **)(a5 + 24);
      v61 = *(_QWORD *)(a5 + 32);
      v63 = v117;
      while ((unint64_t)v62 < v61)
      {
        v64 = *(_QWORD *)(a5 + 8);
        v65 = *(_QWORD *)(a5 + 16);
        if (v65 <= 0x20)
        {
          v66 = *v62++;
          v64 |= (unint64_t)v66 << v65;
          v65 += 32;
          *(_QWORD *)(a5 + 24) = v62;
        }
        v67 = (unsigned __int8 *)(a5 + 912 + 4 * (v64 & 0x1F));
        v68 = *v67;
        v69 = v65 - v68;
        v70 = v64 >> v68;
        *(_QWORD *)(a5 + 8) = v70;
        *(_QWORD *)(a5 + 16) = v69;
        v71 = *((unsigned __int16 *)v67 + 1);
        if (v71 > 0xF)
        {
          v72 = (_DWORD)v71 == 16;
          if ((_DWORD)v71 == 16)
            v73 = 2;
          else
            v73 = 3;
          v74 = v70 & ~(-1 << v73);
          if (v72)
            v75 = v63;
          else
            v75 = 0;
          *(_QWORD *)(a5 + 8) = v70 >> v73;
          *(_QWORD *)(a5 + 16) = v69 - v73;
          v76 = (v35 - 2) << v73;
          if (v35)
            v77 = v35;
          else
            v77 = 0;
          if (!v35)
            v76 = 0;
          v78 = v37 == v75;
          if (v37 == v75)
          {
            v79 = v77;
          }
          else
          {
            v37 = v75;
            v79 = 0;
          }
          if (v78)
            v80 = v76;
          else
            v80 = 0;
          v35 = v74 + v80 + 3;
          v81 = v35 - v79;
          v82 = v35 - v79 + v34;
          if (v82 > a2)
          {
            v36 = 0xFFFFFLL;
            goto LABEL_150;
          }
          if (v37)
          {
            v83 = *(_DWORD *)(v60 + 4 * v37);
            v84 = v80 + v74 - v79;
            v85 = -3;
            do
            {
              v86 = v34 + v85 + 3;
              *(_WORD *)(v38 + 2 * v83) = v86;
              ++v85;
              v83 = v86;
            }
            while (v84 != v85);
            *(_DWORD *)(v60 + 4 * v37) = v34 + v85 + 2;
            v36 -= v81 << (15 - v37);
            *(_WORD *)(v11 + 2 * v37) += v81;
          }
          v34 = v82;
        }
        else
        {
          if (*((_WORD *)v67 + 1))
          {
            *(_WORD *)(v38 + 2 * *(int *)(v60 + 4 * v71)) = v34;
            *(_DWORD *)(v60 + 4 * v71) = v34;
            v36 -= 0x8000u >> v71;
            ++*(_WORD *)(v11 + 2 * v71);
            v63 = v71;
          }
          v35 = 0;
          ++v34;
        }
        if (v34 >= a2 || !v36)
          goto LABEL_150;
      }
      *(_QWORD *)(a5 + 888) = v34;
      *(_QWORD *)(a5 + 896) = v35;
      *(_QWORD *)(a5 + 880) = v63;
      *(_QWORD *)(a5 + 872) = v37;
      *(_QWORD *)(a5 + 904) = v36;
    }
    else
    {
      v34 = *(_QWORD *)(a5 + 888);
      v36 = *(_QWORD *)(a5 + 904);
    }
    if (v34 < a2)
    {
      v90 = 0;
      v91 = a5 + 912;
      while (1)
      {
        if (!v36)
          goto LABEL_153;
        if (v90)
        {
          v92 = *(unsigned __int8 **)(a5 + 24);
          if (v92 == *(unsigned __int8 **)(a5 + 40))
            return 2;
          v93 = *(_QWORD *)(a5 + 16);
          v94 = v93 + 8;
          *(_QWORD *)(a5 + 8) |= (unint64_t)*v92 << v93;
          *(_QWORD *)(a5 + 16) = v93 + 8;
          *(_QWORD *)(a5 + 24) = v92 + 1;
          if (v93 == -8)
          {
LABEL_122:
            v95 = 0;
            goto LABEL_123;
          }
        }
        else
        {
          v94 = *(_QWORD *)(a5 + 16);
          if (!v94)
            goto LABEL_122;
        }
        v95 = *(unsigned int *)v9;
LABEL_123:
        v96 = *(unsigned __int8 *)(v91 + 4 * (v95 & 0x1F));
        if (v94 < v96)
          goto LABEL_124;
        v97 = *(unsigned __int16 *)(v91 + 4 * (v95 & 0x1F) + 2);
        if (v97 <= 0xF)
        {
          *(_QWORD *)(a5 + 8) >>= v96;
          *(_QWORD *)(a5 + 16) = v94 - v96;
          v98 = *(_QWORD *)(a5 + 1040);
          *(_QWORD *)(a5 + 896) = 0;
          if ((_DWORD)v97)
          {
            *(_WORD *)(v98 + 2 * *(int *)(v60 + 4 * v97)) = v34;
            *(_DWORD *)(v60 + 4 * v97) = v34;
            *(_QWORD *)(a5 + 880) = v97;
            v36 -= 0x8000u >> v97;
            *(_QWORD *)(a5 + 904) = v36;
            ++*(_WORD *)(v11 + 2 * v97);
          }
          v90 = 0;
          *(_QWORD *)(a5 + 888) = ++v34;
          goto LABEL_146;
        }
        v99 = v97 - 14;
        v100 = v97 - 14 + v96;
        v101 = v94 >= v100;
        v102 = v94 - v100;
        if (v101)
        {
          *(_QWORD *)(a5 + 8) >>= v100;
          *(_QWORD *)(a5 + 16) = v102;
          if ((_DWORD)v97 == 16)
          {
            v103 = *(_QWORD *)(a5 + 880);
            v104 = 2;
          }
          else
          {
            v103 = 0;
            v104 = 3;
          }
          if (*(_QWORD *)(a5 + 872) == v103)
          {
            v105 = *(_QWORD *)(a5 + 896);
            if (v105)
              v106 = (v105 - 2) << v104;
            else
              v106 = 0;
          }
          else
          {
            v106 = 0;
            v105 = 0;
            *(_QWORD *)(a5 + 872) = v103;
          }
          v107 = (v95 >> v96) & ~(-1 << v99);
          v108 = *(_QWORD *)(a5 + 1040);
          v109 = v107 + v106 + 3;
          *(_QWORD *)(a5 + 896) = v109;
          v110 = v109 - v105;
          v111 = v109 - v105 + v34;
          if (v111 > a2)
          {
            *(_QWORD *)(a5 + 888) = a2;
            *(_QWORD *)(a5 + 904) = 0xFFFFFLL;
            return 4294967289;
          }
          if (v103)
          {
            v112 = *(_DWORD *)(v60 + 4 * v103);
            v113 = v106 + v107 - v105;
            v114 = -3;
            do
            {
              v115 = v34 + v114 + 3;
              *(_WORD *)(v108 + 2 * v112) = v115;
              ++v114;
              v112 = v115;
            }
            while (v113 != v114);
            v90 = 0;
            *(_QWORD *)(a5 + 888) = v111;
            *(_DWORD *)(v60 + 4 * v103) = v34 + v114 + 2;
            v36 -= v110 << (15 - v103);
            *(_QWORD *)(a5 + 904) = v36;
            *(_WORD *)(v11 + 2 * v103) += v110;
          }
          else
          {
            v90 = 0;
            *(_QWORD *)(a5 + 888) = v111;
          }
          v34 = v111;
        }
        else
        {
LABEL_124:
          v90 = 1;
        }
LABEL_146:
        if (v34 >= a2)
          goto LABEL_151;
      }
    }
    goto LABEL_151;
  }
  if (v27)
    v31 = *v9 & 0xF;
  else
    v31 = 0;
  v32 = kCodeLengthPrefixLength[v31];
  if (v27 >= v32)
  {
    v30 = *v9;
    goto LABEL_25;
  }
  *(_QWORD *)(a5 + 864) = v26;
  *(_QWORD *)(a5 + 896) = v24;
  *(_QWORD *)(a5 + 904) = v25;
  v87 = 4;
LABEL_106:
  *(_DWORD *)(a5 + 856) = v87;
  return 2;
}

uint64_t CopyUncompressedBlockToOutput(size_t *a1, void **a2, size_t *a3, uint64_t a4)
{
  int i;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  size_t v16;
  _BOOL4 v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  int v22;
  int v23;
  uint64_t result;

  if (!BrotliEnsureRingBuffer(a4))
    return 4294967270;
  for (i = *(_DWORD *)(a4 + 756); ; i = 0)
  {
    do
    {
      if (i == 1)
        goto LABEL_29;
    }
    while (i);
    v9 = *(_QWORD *)(a4 + 16);
    v10 = *(_QWORD *)(a4 + 40) - *(_QWORD *)(a4 + 24);
    if (v10 <= 0x40000000)
      v11 = (v9 >> 3) + v10;
    else
      v11 = 0x40000000;
    if (*(_DWORD *)(a4 + 132) < v11)
      v11 = *(_DWORD *)(a4 + 132);
    v12 = *(int *)(a4 + 88);
    v13 = *(_DWORD *)(a4 + 100);
    if ((int)v12 + v11 <= v13)
      v14 = v11;
    else
      v14 = v13 - v12;
    v15 = (_BYTE *)(*(_QWORD *)(a4 + 136) + v12);
    v16 = v14;
    v17 = v14 != 0;
    if (v9 >= 8 && v14)
    {
      v18 = *(_QWORD *)(a4 + 8);
      v19 = v16;
      do
      {
        v20 = v19;
        *v15++ = v18;
        v9 = *(_QWORD *)(a4 + 16) - 8;
        v18 = *(_QWORD *)(a4 + 8) >> 8;
        *(_QWORD *)(a4 + 8) = v18;
        *(_QWORD *)(a4 + 16) = v9;
        v17 = --v19 != 0;
      }
      while (v9 >= 8 && v20 != 1);
    }
    else
    {
      v19 = v14;
    }
    if (v9 <= 0x3F)
      *(_QWORD *)(a4 + 8) &= ~(-1 << v9);
    if (v17)
    {
      memcpy(v15, *(const void **)(a4 + 24), v19);
      *(_QWORD *)(a4 + 24) += v19;
    }
    v22 = *(_DWORD *)(a4 + 88) + v16;
    *(_DWORD *)(a4 + 88) = v22;
    v23 = *(_DWORD *)(a4 + 132);
    *(_DWORD *)(a4 + 132) = v23 - v16;
    if (v22 < 1 << (*(_DWORD *)(a4 + 772) >> 6))
      break;
    *(_DWORD *)(a4 + 756) = 1;
LABEL_29:
    result = WriteRingBuffer(a4, a1, a2, a3, 0);
    if ((_DWORD)result != 1)
      return result;
    if (*(_DWORD *)(a4 + 100) == 1 << (*(_DWORD *)(a4 + 772) >> 6))
      *(_DWORD *)(a4 + 96) = *(_DWORD *)(a4 + 92);
    *(_DWORD *)(a4 + 756) = 0;
  }
  if (v23 == (_DWORD)v16)
    return 1;
  else
    return 2;
}

uint64_t SkipMetadataBlock(uint64_t a1)
{
  int v1;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  void (*v11)(_QWORD, _QWORD *, uint64_t);
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 132);
  if (!v1)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 8)
  {
    v4 = (int)v3 >> 3;
    if ((int)v3 >> 3 >= v1)
      v4 = *(_DWORD *)(a1 + 132);
    v5 = v4;
    if (v4)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = v18;
      v8 = v4;
      do
      {
        *v7++ = v6;
        v3 -= 8;
        v6 >>= 8;
        v9 = v8 - 1;
        v4 = v8 != 1;
        if (v3 < 8)
          break;
        --v8;
      }
      while (v8);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v3;
    }
    else
    {
      v9 = 0;
      v7 = v18;
    }
    if (v3 <= 0x3F)
      *(_QWORD *)(a1 + 8) &= ~(-1 << v3);
    if (v4)
    {
      v10 = *(char **)(a1 + 24);
      memcpy(v7, v10, v9);
      *(_QWORD *)(a1 + 24) = &v10[v9];
    }
    v11 = *(void (**)(_QWORD, _QWORD *, uint64_t))(a1 + 728);
    if (v11)
    {
      v11(*(_QWORD *)(a1 + 736), v18, v5);
      v1 = *(_DWORD *)(a1 + 132);
    }
    v1 -= v5;
    *(_DWORD *)(a1 + 132) = v1;
    if (!v1)
      return 1;
  }
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 40) - v12;
  v14 = 0x40000000;
  if (v13 <= 0x40000000)
    v14 = (*(_QWORD *)(a1 + 16) >> 3) + v13;
  v15 = v1 >= v14 ? v14 : v1;
  if ((int)v15 < 1)
    return 2;
  v16 = *(void (**)(_QWORD))(a1 + 728);
  if (v16)
  {
    v16(*(_QWORD *)(a1 + 736));
    v12 = *(_QWORD *)(a1 + 24);
    v1 = *(_DWORD *)(a1 + 132);
  }
  *(_QWORD *)(a1 + 24) = v12 + v15;
  *(_DWORD *)(a1 + 132) = v1 - v15;
  if (v1 != (_DWORD)v15)
    return 2;
  else
    return 1;
}

uint64_t DecodeContextMap(size_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4)
{
  unint64_t *v8;
  uint64_t result;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  size_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  BOOL v21;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unint64_t v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  unint64_t v45;

  v8 = (unint64_t *)(a4 + 8);
  switch(*(_DWORD *)(a4 + 852))
  {
    case 0:
      result = DecodeVarLenUint8(a4, (unint64_t *)(a4 + 8), a2);
      if ((_DWORD)result == 1)
      {
        ++*a2;
        *(_QWORD *)(a4 + 2680) = 0;
        v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, size_t))(a4 + 48))(*(_QWORD *)(a4 + 64), a1);
        *a3 = v10;
        if (v10)
        {
          if (*a2 > 1)
          {
            *(_DWORD *)(a4 + 852) = 1;
            goto LABEL_11;
          }
          bzero(v10, a1);
          return 1;
        }
        else
        {
          return 4294967271;
        }
      }
      return result;
    case 1:
LABEL_11:
      v13 = *(_QWORD *)(a4 + 16);
      if (v13 >= 5)
      {
        v15 = *v8;
      }
      else
      {
        v14 = *(unsigned __int8 **)(a4 + 24);
        if (v14 == *(unsigned __int8 **)(a4 + 40))
          return 2;
        v15 = ((unint64_t)*v14 << v13) | *(_QWORD *)(a4 + 8);
        v13 += 8;
        *(_QWORD *)(a4 + 24) = v14 + 1;
      }
      v16 = -5;
      if ((v15 & 1) == 0)
        v16 = -1;
      v17 = 5;
      if ((v15 & 1) == 0)
        v17 = 1;
      v11 = ((uint64_t)(v15 << 63) >> 63) & (((v15 >> 1) & 0xF) + 1);
      *(_QWORD *)(a4 + 2688) = v11;
      *(_QWORD *)(a4 + 8) = v15 >> v17;
      *(_QWORD *)(a4 + 16) = v13 + v16;
      *(_DWORD *)(a4 + 852) = 2;
      goto LABEL_20;
    case 2:
      v11 = *(_QWORD *)(a4 + 2688);
LABEL_20:
      result = ReadHuffmanCode(v11 + *a2, v11 + *a2, (int *)(a4 + 2704), 0, a4);
      if ((_DWORD)result != 1)
        return result;
      v12 = 0xFFFFLL;
      *(_QWORD *)(a4 + 2696) = 0xFFFFLL;
      *(_DWORD *)(a4 + 852) = 3;
LABEL_22:
      v18 = *(_QWORD *)(a4 + 2680);
      v19 = *(_QWORD *)(a4 + 2688);
      v20 = *a3;
      v45 = v12;
      v21 = v12 != 0xFFFF;
      if (v18 >= a1 && v12 == 0xFFFF)
        goto LABEL_54;
      v23 = a4 + 2704;
      break;
    case 3:
      v12 = *(_QWORD *)(a4 + 2696);
      goto LABEL_22;
    case 4:
      goto LABEL_54;
    default:
      return 4294967265;
  }
  while (1)
  {
    v24 = *(_QWORD *)(a4 + 16);
    if (v21)
      break;
    if (v24 >= 0xF)
    {
      v28 = *v8;
LABEL_35:
      v31 = (unsigned __int8 *)(v23 + 4 * v28);
      v32 = *v31;
      if (v32 >= 9)
      {
        v33 = v28;
        v24 -= 8;
        v28 >>= 8;
        v31 += 4
             * (v28 & ~(-1 << (v32 - 8)) & 0x7F)
             + 4 * (unint64_t)*(unsigned __int16 *)(v23 + 4 * v33 + 2);
        LODWORD(v32) = *v31;
      }
      *(_QWORD *)(a4 + 8) = v28 >> v32;
      *(_QWORD *)(a4 + 16) = v24 - v32;
      v12 = *((unsigned __int16 *)v31 + 1);
      v45 = v12;
      if (!v12)
        goto LABEL_51;
    }
    else
    {
      v25 = *(unsigned __int8 **)(a4 + 40);
      v26 = *(unsigned __int8 **)(a4 + 24);
      while (v26 != v25)
      {
        v27 = *v26++;
        v28 = ((unint64_t)v27 << v24) | *(_QWORD *)(a4 + 8);
        v29 = v24 + 8;
        *(_QWORD *)(a4 + 8) = v28;
        *(_QWORD *)(a4 + 16) = v24 + 8;
        *(_QWORD *)(a4 + 24) = v26;
        v30 = v24 >= 7;
        v24 += 8;
        if (v30)
        {
          v24 = v29;
          goto LABEL_35;
        }
      }
      if (!SafeDecodeSymbol((_BYTE *)(a4 + 2704), v8, &v45))
      {
        v12 = 0xFFFFLL;
        goto LABEL_65;
      }
      v12 = v45;
      if (!v45)
      {
LABEL_51:
        v20[v18] = 0;
        goto LABEL_52;
      }
    }
    if (v12 <= v19)
    {
      v24 = *(_QWORD *)(a4 + 16);
      break;
    }
    v20[v18] = v12 - v19;
LABEL_52:
    ++v18;
LABEL_53:
    v21 = 0;
    if (v18 >= a1)
    {
LABEL_54:
      v40 = *(_QWORD *)(a4 + 16);
      if (v40)
      {
        v41 = *v8;
        v42 = v40 - 1;
        goto LABEL_58;
      }
      v43 = *(unsigned __int8 **)(a4 + 24);
      if (v43 == *(unsigned __int8 **)(a4 + 40))
      {
        result = 2;
        v44 = 4;
      }
      else
      {
        v41 = *(_QWORD *)(a4 + 8) | *v43;
        *(_QWORD *)(a4 + 24) = v43 + 1;
        v42 = 7;
LABEL_58:
        *(_QWORD *)(a4 + 8) = v41 >> 1;
        *(_QWORD *)(a4 + 16) = v42;
        if ((v41 & 1) != 0)
          InverseMoveToFrontTransform(*a3, a1, a4);
        v44 = 0;
        result = 1;
      }
      *(_DWORD *)(a4 + 852) = v44;
      return result;
    }
  }
  if (v24 >= v12)
  {
    v37 = *v8;
LABEL_47:
    *(_QWORD *)(a4 + 8) = v37 >> v12;
    *(_QWORD *)(a4 + 16) = v24 - v12;
    v38 = (v37 & ~(-1 << v12)) + (1 << v12);
    v39 = v38 + v18;
    if (v38 + v18 > a1)
      return 4294967288;
    bzero(&v20[v18], v38);
    v18 = v39;
    goto LABEL_53;
  }
  v34 = *(unsigned __int8 **)(a4 + 40);
  v35 = *(unsigned __int8 **)(a4 + 24);
  while (v35 != v34)
  {
    v36 = *v35++;
    v37 = ((unint64_t)v36 << v24) | *(_QWORD *)(a4 + 8);
    v24 += 8;
    *(_QWORD *)(a4 + 8) = v37;
    *(_QWORD *)(a4 + 16) = v24;
    *(_QWORD *)(a4 + 24) = v35;
    if (v24 >= v12)
      goto LABEL_47;
  }
LABEL_65:
  *(_QWORD *)(a4 + 2696) = v12;
  *(_QWORD *)(a4 + 2680) = v18;
  return 2;
}

uint64_t BrotliEnsureRingBuffer(uint64_t a1)
{
  uint64_t v1;
  const void *v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(int *)(a1 + 768);
  if (*(_DWORD *)(a1 + 100) == (_DWORD)v1)
    return 1;
  v3 = *(const void **)(a1 + 136);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 64), v1 + 542);
  *(_QWORD *)(a1 + 136) = result;
  if (result)
  {
    *(_BYTE *)(*(int *)(a1 + 768) + result - 2) = 0;
    *(_BYTE *)(*(int *)(a1 + 768) + *(_QWORD *)(a1 + 136) - 1) = 0;
    if (v3)
    {
      memcpy(*(void **)(a1 + 136), v3, *(int *)(a1 + 88));
      (*(void (**)(_QWORD, const void *))(a1 + 56))(*(_QWORD *)(a1 + 64), v3);
    }
    v5 = *(int *)(a1 + 768);
    *(_DWORD *)(a1 + 100) = v5;
    *(_DWORD *)(a1 + 104) = v5 - 1;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 136) + v5;
    return 1;
  }
  *(_QWORD *)(a1 + 136) = v3;
  return result;
}

uint64_t ProcessCommands(uint64_t a1)
{
  int v2;
  size_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unsigned __int8 *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  signed int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  char v80;
  char v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  void *v105;
  void *v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  int v113;
  int v115;
  uint64_t v117;
  int v118;
  int v119;
  _OWORD *v120;
  _OWORD *v121;
  unsigned int v122;
  unint64_t v123;

  v2 = *(_DWORD *)(a1 + 88);
  LODWORD(v3) = *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 808);
  if (v4)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 32))
    goto LABEL_9;
  BrotliWarmupBitReader((_QWORD *)(a1 + 8));
  switch(*(_DWORD *)a1)
  {
    case 7:
      goto LABEL_13;
    case 8:
      goto LABEL_25;
    case 9:
      goto LABEL_53;
    case 0xA:
      v6 = v2;
      break;
    default:
      return 4294967265;
  }
LABEL_111:
  v117 = 0;
  v118 = *(_DWORD *)(a1 + 100) - v2;
  while (1)
  {
    v102 = __OFSUB__((_DWORD)v3, 1);
    LODWORD(v3) = v3 - 1;
    if (((v3 & 0x80000000) != 0) != v102)
      break;
    *(_BYTE *)(v6 + v117 + *(_QWORD *)(a1 + 136)) = *(_BYTE *)(*(_QWORD *)(a1 + 136)
                                                             + (((int)v6 + (int)v117 - *(_DWORD *)(a1 + 712)) & *(_DWORD *)(a1 + 104)));
    if (v118 == (_DWORD)++v117)
    {
      v2 = v6 + v117;
      v119 = 16;
      goto LABEL_136;
    }
  }
  v2 = v6 + v117;
  if (*(int *)(a1 + 132) < 1)
  {
    *(_DWORD *)a1 = 14;
    result = 1;
    goto LABEL_10;
  }
  while (1)
  {
    while (1)
    {
LABEL_13:
      v8 = *(unsigned int **)(a1 + 24);
      if ((unint64_t)v8 >= *(_QWORD *)(a1 + 32))
      {
        *(_DWORD *)a1 = 7;
        goto LABEL_9;
      }
      v9 = *(_QWORD *)(a1 + 288);
      if (v9)
        break;
      DecodeCommandBlockSwitch((_QWORD *)a1);
    }
    v10 = *(_QWORD *)(a1 + 152);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12 <= 0x10)
    {
      v13 = *(_QWORD *)v8;
      v8 = (unsigned int *)((char *)v8 + 6);
      v11 |= v13 << v12;
      v12 += 48;
      *(_QWORD *)(a1 + 24) = v8;
    }
    v14 = (unsigned __int8 *)(v10 + 4 * v11);
    v15 = *v14;
    if (v15 >= 9)
    {
      v16 = v11;
      v12 -= 8;
      v11 >>= 8;
      v14 += 4 * (v11 & ~(-1 << (v15 - 8))) + 4 * *(unsigned __int16 *)(v10 + 4 * v16 + 2);
      LODWORD(v15) = *v14;
    }
    v17 = v12 - v15;
    v18 = v11 >> v15;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v17;
    v19 = (unsigned __int8 *)&kCmdLut + 8 * *((unsigned __int16 *)v14 + 1);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[3];
    *(_DWORD *)(a1 + 712) = (char)v19[2];
    *(_DWORD *)(a1 + 276) = v22;
    v23 = *((unsigned __int16 *)v19 + 2);
    v24 = *((unsigned __int16 *)v19 + 3);
    *(_BYTE *)(a1 + 716) = *(_BYTE *)(*(_QWORD *)(a1 + 176) + v22);
    if (v20)
    {
      if (v17 <= 0x20)
      {
        v122 = *v8++;
        v123 = (unint64_t)v122 << v17;
        v17 += 32;
        v18 |= v123;
        *(_QWORD *)(a1 + 24) = v8;
      }
      v25 = v18 & ~(-1 << v20);
      v17 -= v20;
      v18 >>= v20;
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = v17;
    }
    else
    {
      LODWORD(v25) = 0;
    }
    if (v17 <= 0x20)
    {
      v18 |= (unint64_t)*v8 << v17;
      v17 += 32;
      *(_QWORD *)(a1 + 24) = v8 + 1;
    }
    *(_QWORD *)(a1 + 8) = v18 >> v21;
    *(_QWORD *)(a1 + 16) = v17 - v21;
    *(_DWORD *)(a1 + 708) = (v18 & ~(-1 << v21)) + v24;
    *(_QWORD *)(a1 + 288) = v9 - 1;
    LODWORD(v3) = v25 + v23;
    if (!((_DWORD)v25 + v23))
      goto LABEL_53;
    *(_DWORD *)(a1 + 132) -= v3;
LABEL_25:
    v26 = v2;
    if (*(_DWORD *)(a1 + 272))
    {
      v28 = *(_QWORD *)(a1 + 8);
      v27 = *(_QWORD *)(a1 + 16);
      if (v27 <= 8)
      {
        v29 = *(_QWORD **)(a1 + 24);
        v28 |= *v29 << v27;
        *(_QWORD *)(a1 + 8) = v28;
        *(_QWORD *)(a1 + 16) = v27 + 56;
        *(_QWORD *)(a1 + 24) = (char *)v29 + 7;
      }
      v30 = 0;
      v31 = (unsigned __int8 *)(*(_QWORD *)(a1 + 416) + 4 * v28);
      v32 = *v31;
      v33 = *((unsigned __int16 *)v31 + 1);
      v34 = v2;
      v35 = v2;
      while (1)
      {
        v36 = *(uint64_t **)(a1 + 24);
        if ((unint64_t)v36 >= *(_QWORD *)(a1 + 32))
          break;
        if (!*(_QWORD *)(a1 + 280))
          goto LABEL_51;
        v37 = *(_QWORD *)(a1 + 416);
        v38 = *(_QWORD *)(a1 + 16);
        if (v32 >= 9)
        {
          v43 = *(_QWORD *)(a1 + 8);
          if (v38 <= 0x10)
          {
            v44 = *v36;
            v36 = (uint64_t *)((char *)v36 + 6);
            v43 |= v44 << v38;
            v38 += 48;
            *(_QWORD *)(a1 + 24) = v36;
          }
          v45 = v37 + 4 * v43;
          v46 = v43 >> 8;
          v33 = v45 + 4 * v33 + 4 * (v46 & ~(-1 << (v32 - 8)));
          v47 = *(unsigned __int8 *)v33;
          v39 = v38 - v47 - 8;
          v40 = v46 >> v47;
          *(_QWORD *)(a1 + 8) = v40;
          *(_QWORD *)(a1 + 16) = v39;
          LOWORD(v33) = *(_WORD *)(v33 + 2);
        }
        else
        {
          v39 = v38 - v32;
          v40 = *(_QWORD *)(a1 + 8) >> v32;
          *(_QWORD *)(a1 + 8) = v40;
          *(_QWORD *)(a1 + 16) = v39;
        }
        if (v39 <= 8)
        {
          v40 |= *v36 << v39;
          *(_QWORD *)(a1 + 8) = v40;
          *(_QWORD *)(a1 + 16) = v39 + 56;
          *(_QWORD *)(a1 + 24) = (char *)v36 + 7;
        }
        v41 = v33;
        v42 = (unsigned __int8 *)(v37 + 4 * v40);
        v32 = *v42;
        v33 = *((unsigned __int16 *)v42 + 1);
        *(_BYTE *)(*(_QWORD *)(a1 + 136) + v26 + v30) = v41;
        --*(_QWORD *)(a1 + 280);
        v2 = *(_DWORD *)(a1 + 100);
        if (v35 + (_DWORD)v30 + 1 == v2)
          goto LABEL_138;
        if ((_DWORD)v3 == (_DWORD)++v30)
          goto LABEL_52;
      }
LABEL_8:
      v2 = v26 + v30;
      *(_DWORD *)a1 = 8;
      LODWORD(v3) = v3 - v30;
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
    v30 = 0;
    v48 = *(_QWORD *)(a1 + 136);
    v34 = v2;
    v49 = *(int *)(a1 + 104);
    v50 = *(unsigned __int8 *)(v48 + (v49 & (v2 - 1)));
    v51 = *(unsigned __int8 *)(v48 + (v49 & (v2 - 2)));
    v52 = v2;
    do
    {
      v53 = v50;
      v54 = *(_QWORD **)(a1 + 24);
      if ((unint64_t)v54 >= *(_QWORD *)(a1 + 32))
        goto LABEL_8;
      if (!*(_QWORD *)(a1 + 280))
      {
LABEL_51:
        v2 = v34 + v30;
        LODWORD(v3) = v3 - v30;
        DecodeLiteralBlockSwitch(a1);
        goto LABEL_25;
      }
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 184)
                      + 8
                      * *(unsigned __int8 *)(*(_QWORD *)(a1 + 168)
                                           + (*(_BYTE *)(*(_QWORD *)(a1 + 160) + v51 + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 160) + v50))));
      v56 = *(_QWORD *)(a1 + 8);
      v57 = *(_QWORD *)(a1 + 16);
      if (v57 <= 0x10)
      {
        v56 |= *v54 << v57;
        v57 += 48;
        *(_QWORD *)(a1 + 24) = (char *)v54 + 6;
      }
      v58 = (unsigned __int8 *)(v55 + 4 * v56);
      v59 = *v58;
      if (v59 >= 9)
      {
        v60 = v56;
        v57 -= 8;
        v56 >>= 8;
        v58 += 4 * (v56 & ~(-1 << (v59 - 8))) + 4 * *(unsigned __int16 *)(v55 + 4 * v60 + 2);
      }
      v61 = *v58;
      *(_QWORD *)(a1 + 8) = v56 >> v61;
      *(_QWORD *)(a1 + 16) = v57 - v61;
      v50 = v58[2];
      *(_BYTE *)(*(_QWORD *)(a1 + 136) + v26 + v30) = v50;
      --*(_QWORD *)(a1 + 280);
      v2 = *(_DWORD *)(a1 + 100);
      if (v52 + (_DWORD)v30 + 1 == v2)
      {
LABEL_138:
        *(_DWORD *)a1 = 13;
        LODWORD(v3) = ~(_DWORD)v30 + v3;
        goto LABEL_139;
      }
      ++v30;
      v51 = v53;
    }
    while ((_DWORD)v3 != (_DWORD)v30);
LABEL_52:
    v2 = v26 + v30;
    if (*(int *)(a1 + 132) <= 0)
    {
      LODWORD(v3) = 0;
      v119 = 14;
      goto LABEL_136;
    }
LABEL_53:
    v62 = *(_DWORD *)(a1 + 712);
    if ((v62 & 0x80000000) == 0)
    {
      v63 = v62 == 0;
      *(_DWORD *)(a1 + 276) = v63;
      v64 = *(_DWORD *)(a1 + 108) - 1;
      *(_DWORD *)(a1 + 108) = v64;
      v65 = *(_DWORD *)(a1 + 4 * (v64 & 3) + 112);
      goto LABEL_75;
    }
    if (!*(_QWORD *)(a1 + 296))
      DecodeDistanceBlockSwitch(a1);
    v66 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * *(unsigned __int8 *)(a1 + 716));
    v67 = *(_QWORD *)(a1 + 8);
    v68 = *(_QWORD *)(a1 + 16);
    if (v68 <= 0x10)
    {
      v69 = *(_QWORD **)(a1 + 24);
      v67 |= *v69 << v68;
      v68 += 48;
      *(_QWORD *)(a1 + 24) = (char *)v69 + 6;
    }
    v70 = (unsigned __int8 *)(v66 + 4 * v67);
    v71 = *v70;
    if (v71 >= 9)
    {
      v72 = v67;
      v68 -= 8;
      v67 >>= 8;
      v70 += 4 * (v67 & ~(-1 << (v71 - 8))) + 4 * *(unsigned __int16 *)(v66 + 4 * v72 + 2);
      LODWORD(v71) = *v70;
    }
    v73 = v68 - v71;
    v74 = v67 >> v71;
    *(_QWORD *)(a1 + 8) = v67 >> v71;
    *(_QWORD *)(a1 + 16) = v73;
    v75 = *((unsigned __int16 *)v70 + 1);
    --*(_QWORD *)(a1 + 296);
    *(_DWORD *)(a1 + 276) = 0;
    if (v75 > 0xF)
    {
      v77 = *(unsigned __int8 *)(a1 + 848 + v75);
      if (v73 <= 0x20)
      {
        v78 = *(unsigned int **)(a1 + 24);
        v79 = (unint64_t)*v78 << v73;
        v73 += 32;
        v74 |= v79;
        *(_QWORD *)(a1 + 24) = v78 + 1;
      }
      v63 = 0;
      *(_QWORD *)(a1 + 8) = v74 >> v77;
      *(_QWORD *)(a1 + 16) = v73 - v77;
      v65 = ((unint64_t)(v74 & ~(-1 << v77)) << *(_QWORD *)(a1 + 384))
          + *(_DWORD *)(a1 + 8 * v75 + 1392);
    }
    else
    {
      *(_DWORD *)(a1 + 712) = v75;
      if (v75 <= 3)
      {
        v63 = 1u >> v75;
        *(_DWORD *)(a1 + 276) = 1u >> v75;
        v76 = *(_DWORD *)(a1 + 108);
        v65 = *(_DWORD *)(a1 + 4 * (((_BYTE)v76 + ~(_BYTE)v75) & 3) + 112);
        *(_DWORD *)(a1 + 712) = v65;
        *(_DWORD *)(a1 + 108) = v76 - v63;
        goto LABEL_76;
      }
      v63 = 0;
      if (v75 >= 0xA)
        v80 = -10;
      else
        v80 = -4;
      if (v75 >= 0xA)
        v81 = 2;
      else
        v81 = 3;
      v65 = ((0x605142u >> (4 * (v80 + v75))) & 7)
          + *(_DWORD *)(a1 + 4 * ((*(_DWORD *)(a1 + 108) + v81) & 3) + 112)
          - 3;
      if (v65 < 1)
        v65 = 0x7FFFFFFF;
    }
LABEL_75:
    *(_DWORD *)(a1 + 712) = v65;
LABEL_76:
    v82 = *(_DWORD *)(a1 + 92);
    v83 = *(_DWORD *)(a1 + 96);
    if (v83 != v82)
    {
      if (v2 >= v82)
        v83 = *(_DWORD *)(a1 + 92);
      else
        v83 = v2;
      *(_DWORD *)(a1 + 96) = v83;
    }
    v3 = *(unsigned int *)(a1 + 708);
    v84 = v65 - v83;
    if (v65 > v83)
      break;
    v108 = *(_DWORD *)(a1 + 108);
    v109 = *(_DWORD *)(a1 + 104) & (v2 - v65);
    v110 = *(_QWORD *)(a1 + 136);
    v6 = v2;
    v111 = (_OWORD *)(v110 + v2);
    v112 = (_OWORD *)(v110 + v109);
    v113 = v3 + v2;
    *(_DWORD *)(a1 + 4 * (v108 & 3) + 112) = v65;
    *(_DWORD *)(a1 + 108) = v108 + 1;
    *(_DWORD *)(a1 + 132) -= v3;
    *v111 = *v112;
    if (v109 + (int)v3 > v2 && v113 > v109)
      goto LABEL_111;
    v115 = *(_DWORD *)(a1 + 100);
    if (v113 >= v115 || v109 + (int)v3 >= v115)
      goto LABEL_111;
    if ((int)v3 >= 17)
    {
      v120 = v111 + 1;
      v121 = v112 + 1;
      if (v3 < 0x21)
        *v120 = *v121;
      else
        memcpy(v120, v121, (v3 - 16));
    }
LABEL_127:
    if (*(int *)(a1 + 132) <= 0)
    {
      *(_DWORD *)a1 = 14;
      result = 1;
      v2 = v113;
      goto LABEL_10;
    }
    v2 = v113;
  }
  if (v65 > 2147483644)
    return 4294967280;
  if (v5 >= v84)
  {
    if (InitializeCompoundDictionaryCopy(a1, v5 - v84, *(_DWORD *)(a1 + 708)))
    {
      v2 += CopyFromCompoundDictionary(a1, v2);
      goto LABEL_125;
    }
    return 4294967278;
  }
  if ((v3 - 4) > 0x1B)
    return 4294967284;
  v85 = 0;
  v86 = *(_QWORD *)(a1 + 800);
  if (*(_DWORD *)(v86 + 248))
    v85 = *(unsigned __int8 *)(v86
                             + (*(_BYTE *)(*(_QWORD *)(a1 + 160)
                                                          + *(unsigned __int8 *)(*(_QWORD *)(a1 + 136)
                                                                               + (*(int *)(a1 + 104) & (unint64_t)(v2 - 2)))
                                                          + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 160)
                                                                              + *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + (*(int *)(a1 + 104) & (unint64_t)(v2 - 1)))))
                             + 252);
  v87 = v85;
  v88 = v86 + 8 * v85;
  v89 = *(_QWORD *)(v88 + 320);
  v90 = *(_QWORD *)(v88 + 832);
  v91 = *(_DWORD *)(v89 + 4 * v3 + 32);
  v92 = *(_BYTE *)(v89 + v3);
  v93 = v65 - v5 + ~v83;
  v94 = v93 >> v92;
  *(_DWORD *)(a1 + 108) += v63;
  v95 = v91 + (v93 & ~(-1 << v92)) * v3;
  v96 = *(_DWORD *)(v90 + 24);
  if (v93 >> v92 < v96 && *(_BYTE *)(v89 + v3) || (v97 = *(unsigned __int8 *)(v86 + 316), v97 < 2))
  {
LABEL_96:
    v99 = v89;
    goto LABEL_97;
  }
  v98 = v93 - v96 * ((1 << v92) & 0xFFFFFFFE);
  while (2)
  {
    if (!v87 || (v99 = *(_QWORD *)(v86 + 320), (v100 = *(_BYTE *)(v99 + v3)) == 0))
    {
LABEL_95:
      v86 += 8;
      --v87;
      if (!--v97)
        goto LABEL_96;
      continue;
    }
    break;
  }
  v101 = *(_DWORD *)(*(_QWORD *)(v86 + 832) + 24) * ((1 << v100) & 0xFFFFFFFE);
  v102 = __OFSUB__(v98, v101);
  v103 = v98 - v101;
  if (v103 < 0 == v102)
  {
    v98 = v103;
    goto LABEL_95;
  }
  v94 = v98 >> v100;
  v95 = *(_DWORD *)(v99 + 4 * v3 + 32) + (v98 & ~(-1 << v100)) * v3;
  v90 = *(_QWORD *)(v86 + 832);
LABEL_97:
  if (!*(_BYTE *)(v99 + v3))
    return 4294967284;
  v104 = *(_QWORD *)(v99 + 168);
  if (!v104)
    return 4294967277;
  if (v94 >= *(_DWORD *)(v90 + 24))
    return 4294967285;
  v105 = (void *)(v104 + v95);
  v106 = (void *)(*(_QWORD *)(a1 + 136) + v2);
  if (v94 == *(__int16 *)(v90 + 48))
  {
    memcpy(v106, v105, v3);
    v107 = v3;
    goto LABEL_124;
  }
  v107 = BrotliTransformDictionaryWord((uint64_t)v106, (char *)v105, v3, (_QWORD *)v90, v94);
  if (!v107 && *(int *)(a1 + 712) < 121)
    return 4294967285;
LABEL_124:
  v2 += v107;
  *(_DWORD *)(a1 + 132) -= v107;
LABEL_125:
  if (v2 < *(_DWORD *)(a1 + 100))
  {
    v113 = v2;
    goto LABEL_127;
  }
  v119 = 15;
LABEL_136:
  *(_DWORD *)a1 = v119;
LABEL_139:
  result = 1;
LABEL_10:
  *(_DWORD *)(a1 + 88) = v2;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

uint64_t SafeProcessCommands(uint64_t a1)
{
  int v2;
  size_t v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  signed int v75;
  uint64_t v76;
  _BYTE *v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  unint64_t v82;
  unsigned int v83;
  unsigned __int8 *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unint64_t v95;
  int v96;
  char v97;
  char v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  char v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  BOOL v119;
  int v120;
  uint64_t v121;
  void *v122;
  void *v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  int v130;
  int v132;
  _OWORD *v133;
  _OWORD *v134;
  uint64_t v135;
  int v136;
  int v137;
  unsigned __int8 *v138;
  uint64_t v139;

  v2 = *(_DWORD *)(a1 + 88);
  LODWORD(v3) = *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 808);
  if (v4)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  v6 = (unint64_t *)(a1 + 8);
  switch(*(_DWORD *)a1)
  {
    case 7:
      goto LABEL_7;
    case 8:
      goto LABEL_38;
    case 9:
      goto LABEL_80;
    case 0xA:
      v7 = v2;
      break;
    default:
      return 4294967265;
  }
LABEL_150:
  v135 = 0;
  v136 = *(_DWORD *)(a1 + 100) - v2;
  while (1)
  {
    v119 = __OFSUB__((_DWORD)v3, 1);
    LODWORD(v3) = v3 - 1;
    if (((v3 & 0x80000000) != 0) != v119)
      break;
    *(_BYTE *)(v7 + v135 + *(_QWORD *)(a1 + 136)) = *(_BYTE *)(*(_QWORD *)(a1 + 136)
                                                             + (((int)v7 + (int)v135 - *(_DWORD *)(a1 + 712)) & *(_DWORD *)(a1 + 104)));
    if (v136 == (_DWORD)++v135)
    {
      v2 = v7 + v135;
      v137 = 16;
      goto LABEL_179;
    }
  }
  v2 = v7 + v135;
  if (*(int *)(a1 + 132) < 1)
  {
    *(_DWORD *)a1 = 14;
    result = 1;
    goto LABEL_171;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      *(_DWORD *)a1 = 7;
      if (*(_QWORD *)(a1 + 288))
        break;
      if (!SafeDecodeCommandBlockSwitch(a1))
        goto LABEL_170;
    }
    v139 = 0;
    v10 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(unsigned __int8 **)(a1 + 40);
    v13 = &v12[-v11];
    v14 = *(_BYTE **)(a1 + 152);
    v15 = v9;
    v16 = v10;
    if (v9 > 0xE)
    {
LABEL_15:
      v21 = &v14[4 * v16];
      v22 = *v21;
      if (v22 >= 9)
      {
        v23 = v16;
        v15 -= 8;
        v16 >>= 8;
        v21 += 4
             * (v16 & ~(-1 << (v22 - 8)) & 0x7F)
             + 4 * (unint64_t)*(unsigned __int16 *)&v14[4 * v23 + 2];
        LODWORD(v22) = *v21;
      }
      *(_QWORD *)(a1 + 8) = v16 >> v22;
      *(_QWORD *)(a1 + 16) = v15 - v22;
      v24 = *((unsigned __int16 *)v21 + 1);
      v139 = v24;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(unsigned __int8 **)(a1 + 24);
      v18 = *(_QWORD *)(a1 + 16);
      while (v17 != v12)
      {
        v19 = *v17++;
        v16 |= (unint64_t)v19 << v18;
        v15 = v18 + 8;
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v18 + 8;
        *(_QWORD *)(a1 + 24) = v17;
        v20 = v18 >= 7;
        v18 += 8;
        if (v20)
          goto LABEL_15;
      }
      if (!SafeDecodeSymbol(v14, (unint64_t *)(a1 + 8), &v139))
        goto LABEL_170;
      v24 = v139;
    }
    LODWORD(v25) = 0;
    v26 = (unsigned __int8 *)&kCmdLut + 8 * v24;
    v27 = *v26;
    v28 = v26[1];
    v29 = (char)v26[2];
    v30 = v26[3];
    LODWORD(v3) = *((unsigned __int16 *)v26 + 2);
    v31 = *((unsigned __int16 *)v26 + 3);
    *(_DWORD *)(a1 + 712) = v29;
    *(_DWORD *)(a1 + 276) = v30;
    *(_BYTE *)(a1 + 716) = *(_BYTE *)(*(_QWORD *)(a1 + 176) + v30);
    if (v27)
    {
      v32 = *(_QWORD *)(a1 + 16);
      if (v32 < v27)
      {
        v33 = *(unsigned __int8 **)(a1 + 40);
        v34 = *(unsigned __int8 **)(a1 + 24);
        while (v34 != v33)
        {
          v35 = *v34++;
          v36 = ((unint64_t)v35 << v32) | *(_QWORD *)(a1 + 8);
          v32 += 8;
          *(_QWORD *)(a1 + 8) = v36;
          *(_QWORD *)(a1 + 16) = v32;
          *(_QWORD *)(a1 + 24) = v34;
          if (v32 >= v27)
            goto LABEL_27;
        }
        goto LABEL_166;
      }
      v36 = *v6;
LABEL_27:
      v25 = v36 & ~(-1 << v27);
      *(_QWORD *)(a1 + 8) = v36 >> v27;
      *(_QWORD *)(a1 + 16) = v32 - v27;
    }
    LODWORD(v37) = 0;
    if ((_DWORD)v28)
    {
      v38 = *(_QWORD *)(a1 + 16);
      if (v38 < v28)
      {
        v39 = *(unsigned __int8 **)(a1 + 40);
        v40 = *(unsigned __int8 **)(a1 + 24);
        while (v40 != v39)
        {
          v41 = *v40++;
          v42 = ((unint64_t)v41 << v38) | *(_QWORD *)(a1 + 8);
          v38 += 8;
          *(_QWORD *)(a1 + 8) = v42;
          *(_QWORD *)(a1 + 16) = v38;
          *(_QWORD *)(a1 + 24) = v40;
          if (v38 >= v28)
            goto LABEL_35;
        }
        goto LABEL_166;
      }
      v42 = *v6;
LABEL_35:
      v37 = v42 & ~(-1 << v28);
      *(_QWORD *)(a1 + 8) = v42 >> v28;
      *(_QWORD *)(a1 + 16) = v38 - v28;
    }
    *(_DWORD *)(a1 + 708) = v37 + v31;
    --*(_QWORD *)(a1 + 288);
    if ((_DWORD)v25 + (_DWORD)v3)
    {
      *(_DWORD *)(a1 + 132) -= v25 + v3;
      LODWORD(v3) = v25 + v3;
LABEL_38:
      LODWORD(v43) = v2;
      while (1)
      {
        *(_DWORD *)a1 = 8;
        if (!*(_DWORD *)(a1 + 272))
          break;
        v43 = (int)v43;
        v44 = *(_QWORD *)(a1 + 280);
        while (v44)
        {
          v139 = 0;
          v45 = *(_BYTE **)(a1 + 416);
          v46 = *(_QWORD *)(a1 + 16);
          if (v46 >= 0xF)
          {
            v50 = *v6;
LABEL_49:
            v52 = &v45[4 * v50];
            v53 = *v52;
            if (v53 >= 9)
            {
              v54 = v50;
              v46 -= 8;
              v50 >>= 8;
              v52 += 4
                   * (v50 & ~(-1 << (v53 - 8)) & 0x7F)
                   + 4 * (unint64_t)*(unsigned __int16 *)&v45[4 * v54 + 2];
              LODWORD(v53) = *v52;
            }
            *(_QWORD *)(a1 + 8) = v50 >> v53;
            *(_QWORD *)(a1 + 16) = v46 - v53;
            v55 = *((_WORD *)v52 + 1);
          }
          else
          {
            v47 = *(unsigned __int8 **)(a1 + 40);
            v48 = *(unsigned __int8 **)(a1 + 24);
            while (v48 != v47)
            {
              v49 = *v48++;
              v50 = ((unint64_t)v49 << v46) | *(_QWORD *)(a1 + 8);
              v51 = v46 + 8;
              *(_QWORD *)(a1 + 8) = v50;
              *(_QWORD *)(a1 + 16) = v46 + 8;
              *(_QWORD *)(a1 + 24) = v48;
              v20 = v46 >= 7;
              v46 += 8;
              if (v20)
              {
                v46 = v51;
                goto LABEL_49;
              }
            }
            if (!SafeDecodeSymbol(v45, (unint64_t *)(a1 + 8), &v139))
              goto LABEL_75;
            LOBYTE(v55) = v139;
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 136) + v43) = v55;
          v44 = *(_QWORD *)(a1 + 280) - 1;
          *(_QWORD *)(a1 + 280) = v44;
          ++v43;
          v2 = *(_DWORD *)(a1 + 100);
          if (v2 == (_DWORD)v43)
            goto LABEL_180;
          LODWORD(v3) = v3 - 1;
          if (!(_DWORD)v3)
            goto LABEL_77;
        }
LABEL_74:
        if (!SafeDecodeLiteralBlockSwitch(a1))
        {
LABEL_75:
          result = 2;
LABEL_76:
          v2 = v43;
          goto LABEL_171;
        }
      }
      v56 = *(_QWORD *)(a1 + 136);
      v43 = (int)v43;
      v57 = *(int *)(a1 + 104);
      v58 = *(unsigned __int8 *)(v56 + (v57 & ((int)v43 - 1)));
      v59 = *(unsigned __int8 *)(v56 + (v57 & ((int)v43 - 2)));
      v60 = *(_QWORD *)(a1 + 280);
      do
      {
        if (!v60)
          goto LABEL_74;
        v61 = v58;
        v62 = *(_BYTE **)(*(_QWORD *)(a1 + 184)
                        + 8
                        * *(unsigned __int8 *)(*(_QWORD *)(a1 + 168)
                                             + (*(_BYTE *)(*(_QWORD *)(a1 + 160) + v59 + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 160) + v58))));
        v139 = 0;
        v63 = *(_QWORD *)(a1 + 16);
        if (v63 >= 0xF)
        {
          v67 = *v6;
LABEL_66:
          v69 = &v62[4 * v67];
          v70 = *v69;
          if (v70 >= 9)
          {
            v71 = v67;
            v63 -= 8;
            v67 >>= 8;
            v69 += 4
                 * (v67 & ~(-1 << (v70 - 8)) & 0x7F)
                 + 4 * (unint64_t)*(unsigned __int16 *)&v62[4 * v71 + 2];
            LODWORD(v70) = *v69;
          }
          *(_QWORD *)(a1 + 8) = v67 >> v70;
          *(_QWORD *)(a1 + 16) = v63 - v70;
          v58 = v69[2];
        }
        else
        {
          v64 = *(unsigned __int8 **)(a1 + 40);
          v65 = *(unsigned __int8 **)(a1 + 24);
          while (v65 != v64)
          {
            v66 = *v65++;
            v67 = ((unint64_t)v66 << v63) | *(_QWORD *)(a1 + 8);
            v68 = v63 + 8;
            *(_QWORD *)(a1 + 8) = v67;
            *(_QWORD *)(a1 + 16) = v63 + 8;
            *(_QWORD *)(a1 + 24) = v65;
            v20 = v63 >= 7;
            v63 += 8;
            if (v20)
            {
              v63 = v68;
              goto LABEL_66;
            }
          }
          if (!SafeDecodeSymbol(v62, (unint64_t *)(a1 + 8), &v139))
            goto LABEL_75;
          v58 = v139;
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 136) + v43) = v58;
        v60 = *(_QWORD *)(a1 + 280) - 1;
        *(_QWORD *)(a1 + 280) = v60;
        ++v43;
        v2 = *(_DWORD *)(a1 + 100);
        if (v2 == (_DWORD)v43)
        {
LABEL_180:
          *(_DWORD *)a1 = 13;
          LODWORD(v3) = v3 - 1;
          goto LABEL_181;
        }
        v59 = v61;
        LODWORD(v3) = v3 - 1;
      }
      while ((_DWORD)v3);
LABEL_77:
      if (*(int *)(a1 + 132) <= 0)
      {
        LODWORD(v3) = 0;
        *(_DWORD *)a1 = 14;
        result = 1;
        goto LABEL_76;
      }
      LODWORD(v3) = 0;
      v2 = v43;
    }
    else
    {
      LODWORD(v3) = 0;
    }
LABEL_80:
    *(_DWORD *)a1 = 9;
    v72 = *(_DWORD *)(a1 + 712);
    if (v72 < 0)
    {
      if (!*(_QWORD *)(a1 + 296) && !SafeDecodeDistanceBlockSwitch(a1))
        goto LABEL_170;
      v76 = a1 + 848;
      v139 = 0;
      v77 = *(_BYTE **)(*(_QWORD *)(a1 + 232) + 8 * *(unsigned __int8 *)(a1 + 716));
      v10 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      v78 = *(unsigned __int8 **)(a1 + 40);
      v13 = &v78[-v11];
      v79 = v9;
      v80 = v10;
      if (v9 > 0xE)
      {
LABEL_88:
        v84 = &v77[4 * v80];
        v85 = *v84;
        if (v85 >= 9)
        {
          v86 = v80;
          v79 -= 8;
          v80 >>= 8;
          v84 += 4
               * (v80 & ~(-1 << (v85 - 8)) & 0x7F)
               + 4 * (unint64_t)*(unsigned __int16 *)&v77[4 * v86 + 2];
          LODWORD(v85) = *v84;
        }
        *(_QWORD *)(a1 + 8) = v80 >> v85;
        *(_QWORD *)(a1 + 16) = v79 - v85;
        v87 = *((unsigned __int16 *)v84 + 1);
      }
      else
      {
        v80 = *(_QWORD *)(a1 + 8);
        v81 = *(unsigned __int8 **)(a1 + 24);
        v82 = *(_QWORD *)(a1 + 16);
        while (v81 != v78)
        {
          v83 = *v81++;
          v80 |= (unint64_t)v83 << v82;
          v79 = v82 + 8;
          *(_QWORD *)(a1 + 8) = v80;
          *(_QWORD *)(a1 + 16) = v82 + 8;
          *(_QWORD *)(a1 + 24) = v81;
          v20 = v82 >= 7;
          v82 += 8;
          if (v20)
            goto LABEL_88;
        }
        if (!SafeDecodeSymbol(v77, (unint64_t *)(a1 + 8), &v139))
          goto LABEL_170;
        v87 = v139;
      }
      v88 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v88 - 1;
      *(_DWORD *)(a1 + 276) = 0;
      if ((v87 & 0xFFFFFFF0) != 0)
      {
        v89 = 0;
        v90 = *(unsigned __int8 *)(v76 + v87);
        if (*(_BYTE *)(v76 + v87))
        {
          v91 = *(_QWORD *)(a1 + 16);
          if (v91 < v90)
          {
            v92 = *(unsigned __int8 **)(a1 + 40);
            v93 = *(unsigned __int8 **)(a1 + 24);
            while (v93 != v92)
            {
              v94 = *v93++;
              v95 = ((unint64_t)v94 << v91) | *(_QWORD *)(a1 + 8);
              v91 += 8;
              *(_QWORD *)(a1 + 8) = v95;
              *(_QWORD *)(a1 + 16) = v91;
              *(_QWORD *)(a1 + 24) = v93;
              if (v91 >= v90)
                goto LABEL_103;
            }
            *(_QWORD *)(a1 + 296) = v88;
LABEL_166:
            *(_QWORD *)(a1 + 8) = v10;
            *(_QWORD *)(a1 + 16) = v9;
            *(_QWORD *)(a1 + 40) = &v13[v11];
            if ((unint64_t)(v13 - 28) >= 0xFFFFFFFFFFFFFFE3)
              v138 = 0;
            else
              v138 = v13 - 27;
            *(_QWORD *)(a1 + 24) = v11;
            *(_QWORD *)(a1 + 32) = &v138[v11];
LABEL_170:
            result = 2;
            goto LABEL_171;
          }
          v95 = *v6;
LABEL_103:
          v89 = v95 & ~(-1 << v90);
          *(_QWORD *)(a1 + 8) = v95 >> v90;
          *(_QWORD *)(a1 + 16) = v91 - v90;
        }
        v73 = 0;
        v75 = (v89 << *(_QWORD *)(a1 + 384)) + *(_DWORD *)(a1 + 8 * v87 + 1392);
      }
      else
      {
        *(_DWORD *)(a1 + 712) = v87;
        if ((int)v87 <= 3)
        {
          v73 = 1u >> v87;
          *(_DWORD *)(a1 + 276) = 1u >> v87;
          v96 = *(_DWORD *)(a1 + 108);
          v75 = *(_DWORD *)(a1 + 4 * (((_BYTE)v96 + ~(_BYTE)v87) & 3) + 112);
          *(_DWORD *)(a1 + 712) = v75;
          *(_DWORD *)(a1 + 108) = v96 - v73;
          goto LABEL_114;
        }
        v73 = 0;
        if (v87 >= 0xA)
          v97 = 10;
        else
          v97 = 3;
        if (v87 >= 0xA)
          v98 = -10;
        else
          v98 = -4;
        v75 = ((0x605142u >> (4 * (v98 + v87))) & 7)
            + *(_DWORD *)(a1 + 4 * ((*(_DWORD *)(a1 + 108) + v97) & 3) + 112)
            - 3;
        if (v75 < 1)
          v75 = 0x7FFFFFFF;
      }
    }
    else
    {
      v73 = v72 == 0;
      *(_DWORD *)(a1 + 276) = v73;
      v74 = *(_DWORD *)(a1 + 108) - 1;
      *(_DWORD *)(a1 + 108) = v74;
      v75 = *(_DWORD *)(a1 + 4 * (v74 & 3) + 112);
    }
    *(_DWORD *)(a1 + 712) = v75;
LABEL_114:
    v99 = *(_DWORD *)(a1 + 92);
    v100 = *(_DWORD *)(a1 + 96);
    if (v100 != v99)
    {
      if (v2 >= v99)
        v100 = *(_DWORD *)(a1 + 92);
      else
        v100 = v2;
      *(_DWORD *)(a1 + 96) = v100;
    }
    v3 = *(unsigned int *)(a1 + 708);
    v101 = v75 - v100;
    if (v75 > v100)
      break;
    v125 = *(_DWORD *)(a1 + 108);
    v126 = *(_DWORD *)(a1 + 104) & (v2 - v75);
    v127 = *(_QWORD *)(a1 + 136);
    v7 = v2;
    v128 = (_OWORD *)(v127 + v2);
    v129 = (_OWORD *)(v127 + v126);
    v130 = v3 + v2;
    *(_DWORD *)(a1 + 4 * (v125 & 3) + 112) = v75;
    *(_DWORD *)(a1 + 108) = v125 + 1;
    *(_DWORD *)(a1 + 132) -= v3;
    *v128 = *v129;
    if (v126 + (int)v3 > v2 && v130 > v126)
      goto LABEL_150;
    v132 = *(_DWORD *)(a1 + 100);
    if (v130 >= v132 || v126 + (int)v3 >= v132)
      goto LABEL_150;
    if ((int)v3 >= 17)
    {
      v133 = v128 + 1;
      v134 = v129 + 1;
      if (v3 < 0x21)
        *v133 = *v134;
      else
        memcpy(v133, v134, (v3 - 16));
    }
LABEL_163:
    if (*(int *)(a1 + 132) <= 0)
    {
      *(_DWORD *)a1 = 14;
      result = 1;
      v2 = v130;
      goto LABEL_171;
    }
    v2 = v130;
  }
  if (v75 > 2147483644)
    return 4294967280;
  if (v5 >= v101)
  {
    if (InitializeCompoundDictionaryCopy(a1, v5 - v101, *(_DWORD *)(a1 + 708)))
    {
      v2 += CopyFromCompoundDictionary(a1, v2);
      goto LABEL_161;
    }
    return 4294967278;
  }
  if ((v3 - 4) > 0x1B)
    return 4294967284;
  v102 = 0;
  v103 = *(_QWORD *)(a1 + 800);
  if (*(_DWORD *)(v103 + 248))
    v102 = *(unsigned __int8 *)(v103
                              + (*(_BYTE *)(*(_QWORD *)(a1 + 160)
                                                           + *(unsigned __int8 *)(*(_QWORD *)(a1 + 136)
                                                                                + (*(int *)(a1 + 104) & (unint64_t)(v2 - 2)))
                                                           + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 160)
                                                                               + *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + (*(int *)(a1 + 104) & (unint64_t)(v2 - 1)))))
                              + 252);
  v104 = v102;
  v105 = v103 + 8 * v102;
  v106 = *(_QWORD *)(v105 + 320);
  v107 = *(_QWORD *)(v105 + 832);
  v108 = *(_DWORD *)(v106 + 4 * v3 + 32);
  v109 = *(_BYTE *)(v106 + v3);
  v110 = v75 - v5 + ~v100;
  v111 = v110 >> v109;
  *(_DWORD *)(a1 + 108) += v73;
  v112 = v108 + (v110 & ~(-1 << v109)) * v3;
  v113 = *(_DWORD *)(v107 + 24);
  if (v110 >> v109 < v113 && *(_BYTE *)(v106 + v3) || (v114 = *(unsigned __int8 *)(v103 + 316), v114 < 2))
  {
LABEL_134:
    v116 = v106;
    goto LABEL_135;
  }
  v115 = v110 - v113 * ((1 << v109) & 0xFFFFFFFE);
  while (2)
  {
    if (!v104 || (v116 = *(_QWORD *)(v103 + 320), (v117 = *(_BYTE *)(v116 + v3)) == 0))
    {
LABEL_133:
      v103 += 8;
      --v104;
      if (!--v114)
        goto LABEL_134;
      continue;
    }
    break;
  }
  v118 = *(_DWORD *)(*(_QWORD *)(v103 + 832) + 24) * ((1 << v117) & 0xFFFFFFFE);
  v119 = __OFSUB__(v115, v118);
  v120 = v115 - v118;
  if (v120 < 0 == v119)
  {
    v115 = v120;
    goto LABEL_133;
  }
  v111 = v115 >> v117;
  v112 = *(_DWORD *)(v116 + 4 * v3 + 32) + (v115 & ~(-1 << v117)) * v3;
  v107 = *(_QWORD *)(v103 + 832);
LABEL_135:
  if (!*(_BYTE *)(v116 + v3))
    return 4294967284;
  v121 = *(_QWORD *)(v116 + 168);
  if (!v121)
    return 4294967277;
  if (v111 >= *(_DWORD *)(v107 + 24))
    return 4294967285;
  v122 = (void *)(v121 + v112);
  v123 = (void *)(*(_QWORD *)(a1 + 136) + v2);
  if (v111 == *(__int16 *)(v107 + 48))
  {
    memcpy(v123, v122, v3);
    v124 = v3;
    goto LABEL_160;
  }
  v124 = BrotliTransformDictionaryWord((uint64_t)v123, (char *)v122, v3, (_QWORD *)v107, v111);
  if (!v124 && *(int *)(a1 + 712) < 121)
    return 4294967285;
LABEL_160:
  v2 += v124;
  *(_DWORD *)(a1 + 132) -= v124;
LABEL_161:
  if (v2 < *(_DWORD *)(a1 + 100))
  {
    v130 = v2;
    goto LABEL_163;
  }
  v137 = 15;
LABEL_179:
  *(_DWORD *)a1 = v137;
LABEL_181:
  result = 1;
LABEL_171:
  *(_DWORD *)(a1 + 88) = v2;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

void **WrapRingBuffer(void **result)
{
  void **v1;

  if ((*((_BYTE *)result + 772) & 8) != 0)
  {
    v1 = result;
    result = (void **)memcpy(result[17], v1[18], *((int *)v1 + 22));
    *((_DWORD *)v1 + 193) &= ~8u;
  }
  return result;
}

uint64_t CopyFromCompoundDictionary(uint64_t a1, int a2)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v4 = *(int **)(a1 + 808);
  v5 = v4[5];
  v6 = a2;
  do
  {
    v7 = v4[4] - v5;
    if (!v7)
      break;
    v8 = v4[2];
    v9 = v4[3];
    v10 = v4[v8 + 39] - (v9 + v4[v8 + 38]);
    if (v7 >= v10)
      v7 = v4[v8 + 39] - (v9 + v4[v8 + 38]);
    v11 = v7 >= *(_DWORD *)(a1 + 100) - v6 ? *(_DWORD *)(a1 + 100) - v6 : v7;
    memcpy((void *)(*(_QWORD *)(a1 + 136) + v6), (const void *)(*(_QWORD *)&v4[2 * v8 + 6] + v9), v11);
    v4[3] += v11;
    v5 = v4[5] + v11;
    v4[5] = v5;
    if (v11 == v10)
      *((_QWORD *)v4 + 1) = (v4[2] + 1);
    v6 += v11;
  }
  while (v6 != *(_DWORD *)(a1 + 100));
  return (v6 - a2);
}

BOOL BrotliDecoderHasMoreOutput(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 128) & 0x80000000) == 0
      && *(_QWORD *)(a1 + 136)
      && *(int *)(a1 + 88) - *(_QWORD *)(a1 + 432) + *(_QWORD *)(a1 + 424) * *(int *)(a1 + 100) != 0;
}

void *BrotliDecoderTakeOutput(uint64_t a1, size_t *a2)
{
  size_t v3;
  unsigned int v5;
  void *result;
  size_t v7;
  void *v8;

  if (*a2)
    v3 = *a2;
  else
    v3 = 0x1000000;
  v7 = v3;
  v8 = 0;
  if (*(_QWORD *)(a1 + 136) && (*(_DWORD *)(a1 + 128) & 0x80000000) == 0)
  {
    WrapRingBuffer((void **)a1);
    v5 = WriteRingBuffer(a1, &v7, &v8, 0, 1);
    if ((v5 & 0xFFFFFFFD) == 1)
    {
      result = v8;
      *a2 = v3 - v7;
      return result;
    }
    if ((v5 & 0x80000000) != 0)
      SaveErrorCode(a1, v5, 0);
  }
  result = 0;
  *a2 = 0;
  return result;
}

BOOL BrotliDecoderIsUsed(uint64_t a1)
{
  return *(_DWORD *)a1 || *(_QWORD *)(a1 + 16) != 0;
}

BOOL BrotliDecoderIsFinished(uint64_t a1)
{
  if (*(_DWORD *)a1 != 26)
    return 0;
  if ((*(_DWORD *)(a1 + 128) & 0x80000000) != 0 || !*(_QWORD *)(a1 + 136))
    return 1;
  return *(int *)(a1 + 88) - *(_QWORD *)(a1 + 432) + *(_QWORD *)(a1 + 424) * *(int *)(a1 + 100) == 0;
}

uint64_t BrotliDecoderGetErrorCode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

const char *BrotliDecoderErrorString(int a1)
{
  if ((a1 + 31) > 0x22)
    return "INVALID";
  else
    return off_1E3DDEB40[a1 + 31];
}

uint64_t BrotliDecoderVersion()
{
  return 16781312;
}

_QWORD *BrotliDecoderSetMetadataCallbacks(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result[90] = a2;
  result[91] = a3;
  result[92] = a4;
  return result;
}

uint64_t SafeDecodeSymbol(_BYTE *a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;

  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    v5 = *a2;
    v6 = &a1[4 * v5];
    v7 = *v6;
    if (v7 > 8)
    {
      if (v3 < 9)
        return 0;
      v12 = *(unsigned __int16 *)&a1[4 * v5 + 2] + ((v4 & ~(-1 << v7)) >> 8);
      v13 = v6[4 * v12];
      if (v3 - 8 < v13)
        return 0;
      v15 = v13 + 8;
      *a2 = v4 >> v15;
      a2[1] = v3 - v15;
      v10 = &v6[4 * v12];
    }
    else
    {
      v8 = v3 >= v7;
      v9 = v3 - v7;
      if (!v8)
        return 0;
      *a2 = v4 >> v7;
      a2[1] = v9;
      v10 = &a1[4 * v5];
    }
    v11 = (unsigned __int16 *)(v10 + 2);
  }
  else
  {
    if (*a1)
      return 0;
    v11 = (unsigned __int16 *)(a1 + 2);
  }
  *a3 = *v11;
  return 1;
}

unsigned __int8 *InverseMoveToFrontTransform(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;

  v4 = a2;
  v5 = result;
  v6 = *(_QWORD *)(a3 + 440);
  v7 = (_BYTE *)(a3 + 452);
  *(_DWORD *)(a3 + 452) = 50462976;
  if ((unint64_t)(v6 + 1) > 2)
    v8 = v6 + 1;
  else
    v8 = 2;
  v9 = v8 - 1;
  v10 = (int *)(a3 + 456);
  v11 = 117835012;
  do
  {
    *v10++ = v11;
    v11 += 67372036;
    --v9;
  }
  while (v9);
  if (a2)
  {
    v12 = 0;
    v13 = (unsigned __int8 *)(a3 + 451);
    do
    {
      v14 = *v5;
      v15 = v7[v14];
      *v5++ = v15;
      *v13 = v15;
      result = (unsigned __int8 *)memmove(v7, (const void *)(a3 + 451), v14 + 1);
      v12 |= v14;
      --v4;
    }
    while (v4);
    v16 = v12 >> 2;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(a3 + 440) = v16;
  return result;
}

uint64_t SafeDecodeCommandBlockSwitch(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(a1 + 320);
  if (v1 < 2)
    return 0;
  v3 = *(_QWORD *)(a1 + 264);
  v4 = (_BYTE *)(*(_QWORD *)(a1 + 256) + 2528);
  v5 = (unint64_t *)(a1 + 8);
  v43 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 **)(a1 + 40);
  v10 = v6;
  v11 = v7;
  if (v6 > 0xE)
  {
LABEL_7:
    v16 = &v4[4 * v11];
    v17 = *v16;
    if (v17 >= 9)
    {
      v18 = v11;
      v10 -= 8;
      v11 >>= 8;
      v16 += 4 * (v11 & ~(-1 << (v17 - 8)) & 0x7F)
           + 4 * (unint64_t)*(unsigned __int16 *)&v4[4 * v18 + 2];
      LODWORD(v17) = *v16;
    }
    *(_QWORD *)(a1 + 8) = v11 >> v17;
    *(_QWORD *)(a1 + 16) = v10 - v17;
    v43 = *((unsigned __int16 *)v16 + 1);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(unsigned __int8 **)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 16);
    while (v12 != v9)
    {
      v14 = *v12++;
      v11 |= (unint64_t)v14 << v13;
      v10 = v13 + 8;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v13 + 8;
      *(_QWORD *)(a1 + 24) = v12;
      v15 = v13 >= 7;
      v13 += 8;
      if (v15)
        goto LABEL_7;
    }
    if (!SafeDecodeSymbol(v4, (unint64_t *)(a1 + 8), &v43))
      return 0;
  }
  v44 = 0;
  if (*(_DWORD *)(a1 + 764))
  {
    v19 = *(_QWORD *)(a1 + 304);
  }
  else
  {
    v20 = (_BYTE *)(v3 + 1584);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21 >= 0xF)
    {
      v25 = *v5;
LABEL_21:
      v27 = &v20[4 * v25];
      v28 = *v27;
      if (v28 >= 9)
      {
        v29 = v25;
        v21 -= 8;
        v25 >>= 8;
        v27 += 4
             * (v25 & ~(-1 << (v28 - 8)) & 0x7F)
             + 4 * (unint64_t)*(unsigned __int16 *)&v20[4 * v29 + 2];
        LODWORD(v28) = *v27;
      }
      *(_QWORD *)(a1 + 8) = v25 >> v28;
      *(_QWORD *)(a1 + 16) = v21 - v28;
      v19 = *((unsigned __int16 *)v27 + 1);
    }
    else
    {
      v22 = *(unsigned __int8 **)(a1 + 40);
      v23 = *(unsigned __int8 **)(a1 + 24);
      while (v23 != v22)
      {
        v24 = *v23++;
        v25 = ((unint64_t)v24 << v21) | *(_QWORD *)(a1 + 8);
        v26 = v21 + 8;
        *(_QWORD *)(a1 + 8) = v25;
        *(_QWORD *)(a1 + 16) = v21 + 8;
        *(_QWORD *)(a1 + 24) = v23;
        v15 = v21 >= 7;
        v21 += 8;
        if (v15)
        {
          v21 = v26;
          goto LABEL_21;
        }
      }
      if (!SafeDecodeSymbol(v20, (unint64_t *)(a1 + 8), &v44))
        goto LABEL_34;
      v19 = v44;
    }
  }
  v30 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v19);
  v31 = *((unsigned __int8 *)v30 + 2);
  v32 = *v30;
  v33 = *(_QWORD *)(a1 + 16);
  if (v33 < v31)
  {
    v34 = *(unsigned __int8 **)(a1 + 40);
    v35 = *(unsigned __int8 **)(a1 + 24);
    while (v35 != v34)
    {
      v36 = *v35++;
      v37 = ((unint64_t)v36 << v33) | *(_QWORD *)(a1 + 8);
      v33 += 8;
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v33;
      *(_QWORD *)(a1 + 24) = v35;
      if (v33 >= v31)
        goto LABEL_30;
    }
    *(_QWORD *)(a1 + 304) = v19;
LABEL_34:
    *(_DWORD *)(a1 + 764) = 0;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 40) = v9;
    v39 = (uint64_t)&v9[-v8 - 27];
    if ((unint64_t)&v9[-v8 - 28] >= 0xFFFFFFFFFFFFFFE3)
      v39 = 0;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8 + v39;
    return 0;
  }
  v37 = *v5;
LABEL_30:
  *(_QWORD *)(a1 + 8) = v37 >> v31;
  *(_QWORD *)(a1 + 16) = v33 - v31;
  *(_QWORD *)(a1 + 288) = (v37 & ~(-1 << v31)) + v32;
  *(_DWORD *)(a1 + 764) = 0;
  if (v43)
  {
    if (v43 == 1)
      v38 = *(_QWORD *)(a1 + 360) + 1;
    else
      v38 = v43 - 2;
  }
  else
  {
    v38 = *(_QWORD *)(a1 + 352);
  }
  if (v38 >= v1)
    v41 = v1;
  else
    v41 = 0;
  v42 = v38 - v41;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v42;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v42);
  return 1;
}

_QWORD *DecodeCommandBlockSwitch(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;

  v1 = result[40];
  if (v1 >= 2)
  {
    v2 = result[32] + 2528;
    v3 = result[1];
    v4 = result[2];
    if (v4 <= 0x10)
    {
      v5 = (_QWORD *)result[3];
      v3 |= *v5 << v4;
      v4 += 48;
      result[3] = (char *)v5 + 6;
    }
    v6 = (unsigned __int8 *)(v2 + 4 * v3);
    v7 = *v6;
    if (v7 >= 9)
    {
      v8 = v3;
      v4 -= 8;
      v3 >>= 8;
      v6 += 4 * (v3 & ~(-1 << (v7 - 8))) + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      LODWORD(v7) = *v6;
    }
    v9 = result[33] + 1584;
    v10 = v4 - v7;
    v11 = v3 >> v7;
    result[1] = v3 >> v7;
    result[2] = v10;
    v12 = *((unsigned __int16 *)v6 + 1);
    if (v10 <= 0x10)
    {
      v13 = (_QWORD *)result[3];
      v11 |= *v13 << v10;
      v10 += 48;
      result[3] = (char *)v13 + 6;
    }
    v14 = (unsigned __int8 *)(v9 + 4 * v11);
    v15 = *v14;
    if (v15 >= 9)
    {
      v16 = v11;
      v10 -= 8;
      v11 >>= 8;
      v14 += 4 * (v11 & ~(-1 << (v15 - 8))) + 4 * *(unsigned __int16 *)(v9 + 4 * v16 + 2);
    }
    v17 = v10 - *v14;
    v18 = v11 >> *v14;
    result[1] = v18;
    result[2] = v17;
    v19 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * *((unsigned __int16 *)v14 + 1));
    v20 = *((unsigned __int8 *)v19 + 2);
    v21 = *v19;
    if (v17 <= 0x20)
    {
      v22 = (unsigned int *)result[3];
      v18 |= (unint64_t)*v22 << v17;
      v17 += 32;
      result[3] = v22 + 1;
    }
    result[1] = v18 >> v20;
    result[2] = v17 - v20;
    result[36] = (v18 & ~(-1 << v20)) + v21;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
        v23 = result[45] + 1;
      else
        v23 = v12 - 2;
    }
    else
    {
      v23 = result[44];
    }
    if (v23 < v1)
      v1 = 0;
    v24 = v23 - v1;
    result[44] = result[45];
    result[45] = v24;
    result[19] = *(_QWORD *)(result[26] + 8 * v24);
  }
  return result;
}

uint64_t SafeDecodeDistanceBlockSwitch(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(a1 + 328);
  if (v1 < 2)
    return 0;
  v3 = *(_QWORD *)(a1 + 264);
  v4 = (_BYTE *)(*(_QWORD *)(a1 + 256) + 5056);
  v5 = (unint64_t *)(a1 + 8);
  v44 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 **)(a1 + 40);
  v10 = v6;
  v11 = v7;
  if (v6 > 0xE)
  {
LABEL_7:
    v16 = &v4[4 * v11];
    v17 = *v16;
    if (v17 >= 9)
    {
      v18 = v11;
      v10 -= 8;
      v11 >>= 8;
      v16 += 4 * (v11 & ~(-1 << (v17 - 8)) & 0x7F)
           + 4 * (unint64_t)*(unsigned __int16 *)&v4[4 * v18 + 2];
      LODWORD(v17) = *v16;
    }
    *(_QWORD *)(a1 + 8) = v11 >> v17;
    *(_QWORD *)(a1 + 16) = v10 - v17;
    v44 = *((unsigned __int16 *)v16 + 1);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(unsigned __int8 **)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 16);
    while (v12 != v9)
    {
      v14 = *v12++;
      v11 |= (unint64_t)v14 << v13;
      v10 = v13 + 8;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v13 + 8;
      *(_QWORD *)(a1 + 24) = v12;
      v15 = v13 >= 7;
      v13 += 8;
      if (v15)
        goto LABEL_7;
    }
    if (!SafeDecodeSymbol(v4, (unint64_t *)(a1 + 8), &v44))
      return 0;
  }
  v45 = 0;
  if (*(_DWORD *)(a1 + 764))
  {
    v19 = *(_QWORD *)(a1 + 304);
  }
  else
  {
    v20 = (_BYTE *)(v3 + 3168);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21 >= 0xF)
    {
      v25 = *v5;
LABEL_21:
      v27 = &v20[4 * v25];
      v28 = *v27;
      if (v28 >= 9)
      {
        v29 = v25;
        v21 -= 8;
        v25 >>= 8;
        v27 += 4
             * (v25 & ~(-1 << (v28 - 8)) & 0x7F)
             + 4 * (unint64_t)*(unsigned __int16 *)&v20[4 * v29 + 2];
        LODWORD(v28) = *v27;
      }
      *(_QWORD *)(a1 + 8) = v25 >> v28;
      *(_QWORD *)(a1 + 16) = v21 - v28;
      v19 = *((unsigned __int16 *)v27 + 1);
    }
    else
    {
      v22 = *(unsigned __int8 **)(a1 + 40);
      v23 = *(unsigned __int8 **)(a1 + 24);
      while (v23 != v22)
      {
        v24 = *v23++;
        v25 = ((unint64_t)v24 << v21) | *(_QWORD *)(a1 + 8);
        v26 = v21 + 8;
        *(_QWORD *)(a1 + 8) = v25;
        *(_QWORD *)(a1 + 16) = v21 + 8;
        *(_QWORD *)(a1 + 24) = v23;
        v15 = v21 >= 7;
        v21 += 8;
        if (v15)
        {
          v21 = v26;
          goto LABEL_21;
        }
      }
      if (!SafeDecodeSymbol(v20, (unint64_t *)(a1 + 8), &v45))
        goto LABEL_34;
      v19 = v45;
    }
  }
  v30 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v19);
  v31 = *((unsigned __int8 *)v30 + 2);
  v32 = *v30;
  v33 = *(_QWORD *)(a1 + 16);
  if (v33 < v31)
  {
    v34 = *(unsigned __int8 **)(a1 + 40);
    v35 = *(unsigned __int8 **)(a1 + 24);
    while (v35 != v34)
    {
      v36 = *v35++;
      v37 = ((unint64_t)v36 << v33) | *(_QWORD *)(a1 + 8);
      v33 += 8;
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v33;
      *(_QWORD *)(a1 + 24) = v35;
      if (v33 >= v31)
        goto LABEL_30;
    }
    *(_QWORD *)(a1 + 304) = v19;
LABEL_34:
    *(_DWORD *)(a1 + 764) = 0;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 40) = v9;
    v39 = (uint64_t)&v9[-v8 - 27];
    if ((unint64_t)&v9[-v8 - 28] >= 0xFFFFFFFFFFFFFFE3)
      v39 = 0;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8 + v39;
    return 0;
  }
  v37 = *v5;
LABEL_30:
  *(_QWORD *)(a1 + 8) = v37 >> v31;
  *(_QWORD *)(a1 + 16) = v33 - v31;
  *(_QWORD *)(a1 + 296) = (v37 & ~(-1 << v31)) + v32;
  *(_DWORD *)(a1 + 764) = 0;
  if (v44)
  {
    if (v44 == 1)
      v38 = *(_QWORD *)(a1 + 376) + 1;
    else
      v38 = v44 - 2;
  }
  else
  {
    v38 = *(_QWORD *)(a1 + 368);
  }
  if (v38 >= v1)
    v41 = v1;
  else
    v41 = 0;
  v42 = v38 - v41;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v42;
  v43 = *(_QWORD *)(a1 + 408) + 4 * v42;
  *(_QWORD *)(a1 + 176) = v43;
  *(_BYTE *)(a1 + 716) = *(_BYTE *)(v43 + *(int *)(a1 + 276));
  return 1;
}

uint64_t DecodeDistanceBlockSwitch(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(result + 328);
  if (v1 >= 2)
  {
    v2 = *(_QWORD *)(result + 256) + 5056;
    v3 = *(_QWORD *)(result + 8);
    v4 = *(_QWORD *)(result + 16);
    if (v4 <= 0x10)
    {
      v5 = *(_QWORD **)(result + 24);
      v3 |= *v5 << v4;
      v4 += 48;
      *(_QWORD *)(result + 24) = (char *)v5 + 6;
    }
    v6 = (unsigned __int8 *)(v2 + 4 * v3);
    v7 = *v6;
    if (v7 >= 9)
    {
      v8 = v3;
      v4 -= 8;
      v3 >>= 8;
      v6 += 4 * (v3 & ~(-1 << (v7 - 8))) + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      LODWORD(v7) = *v6;
    }
    v9 = *(_QWORD *)(result + 264) + 3168;
    v10 = v4 - v7;
    v11 = v3 >> v7;
    *(_QWORD *)(result + 8) = v3 >> v7;
    *(_QWORD *)(result + 16) = v10;
    v12 = *((unsigned __int16 *)v6 + 1);
    if (v10 <= 0x10)
    {
      v13 = *(_QWORD **)(result + 24);
      v11 |= *v13 << v10;
      v10 += 48;
      *(_QWORD *)(result + 24) = (char *)v13 + 6;
    }
    v14 = (unsigned __int8 *)(v9 + 4 * v11);
    v15 = *v14;
    if (v15 >= 9)
    {
      v16 = v11;
      v10 -= 8;
      v11 >>= 8;
      v14 += 4 * (v11 & ~(-1 << (v15 - 8))) + 4 * *(unsigned __int16 *)(v9 + 4 * v16 + 2);
    }
    v17 = v10 - *v14;
    v18 = v11 >> *v14;
    *(_QWORD *)(result + 8) = v18;
    *(_QWORD *)(result + 16) = v17;
    v19 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * *((unsigned __int16 *)v14 + 1));
    v20 = *((unsigned __int8 *)v19 + 2);
    v21 = *v19;
    if (v17 <= 0x20)
    {
      v22 = *(unsigned int **)(result + 24);
      v18 |= (unint64_t)*v22 << v17;
      v17 += 32;
      *(_QWORD *)(result + 24) = v22 + 1;
    }
    *(_QWORD *)(result + 8) = v18 >> v20;
    *(_QWORD *)(result + 16) = v17 - v20;
    *(_QWORD *)(result + 296) = (v18 & ~(-1 << v20)) + v21;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
        v23 = *(_QWORD *)(result + 376) + 1;
      else
        v23 = v12 - 2;
    }
    else
    {
      v23 = *(_QWORD *)(result + 368);
    }
    if (v23 < v1)
      v1 = 0;
    v24 = v23 - v1;
    *(_QWORD *)(result + 368) = *(_QWORD *)(result + 376);
    *(_QWORD *)(result + 376) = v24;
    v25 = *(_QWORD *)(result + 408) + 4 * v24;
    *(_QWORD *)(result + 176) = v25;
    *(_BYTE *)(result + 716) = *(_BYTE *)(v25 + *(int *)(result + 276));
  }
  return result;
}

uint64_t InitializeCompoundDictionaryCopy(uint64_t a1, int a2, int a3)
{
  _DWORD *v3;
  int v4;
  int v5;
  signed int v6;
  uint64_t v7;
  int i;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v14;
  int v15;

  v3 = *(_DWORD **)(a1 + 808);
  v4 = v3[54];
  if (v4 == -1)
  {
    v5 = v3[1];
    v6 = 32 - __clz(v5 - 1);
    if (v6 <= 8)
      v6 = 8;
    v4 = v6 - 8;
    v3[54] = v4;
    if (v5 >= 1)
    {
      LODWORD(v7) = 0;
      for (i = 0; i < v5; i += 1 << v4)
      {
        v7 = (int)v7;
        do
        {
          v9 = v7 + 1;
          v10 = v3[v7++ + 39];
        }
        while (v10 < i);
        LODWORD(v7) = v9 - 1;
        *((_BYTE *)v3 + (i >> v4) + 220) = v9 - 1;
      }
    }
  }
  v11 = *((unsigned __int8 *)v3 + (a2 >> v4) + 220) + 39;
  do
    v12 = v3[v11++];
  while (v12 <= a2);
  if (v3[1] < a3 + a2)
    return 0;
  v14 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 4 * (v14 & 3) + 112) = *(_DWORD *)(a1 + 712);
  *(_DWORD *)(a1 + 108) = v14 + 1;
  *(_DWORD *)(a1 + 132) -= a3;
  v15 = a2 - v3[(v11 - 40) + 38];
  v3[2] = v11 - 40;
  v3[3] = v15;
  v3[4] = a3;
  v3[5] = 0;
  return 1;
}

uint64_t SafeDecodeLiteralBlockSwitch(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1 < 2)
    return 0;
  v3 = *(_BYTE **)(a1 + 256);
  v4 = *(_BYTE **)(a1 + 264);
  v5 = (unint64_t *)(a1 + 8);
  v43 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 **)(a1 + 40);
  v10 = v6;
  v11 = v7;
  if (v6 > 0xE)
  {
LABEL_7:
    v16 = &v3[4 * v11];
    v17 = *v16;
    if (v17 >= 9)
    {
      v18 = v11;
      v10 -= 8;
      v11 >>= 8;
      v16 += 4 * (v11 & ~(-1 << (v17 - 8)) & 0x7F)
           + 4 * (unint64_t)*(unsigned __int16 *)&v3[4 * v18 + 2];
      LODWORD(v17) = *v16;
    }
    *(_QWORD *)(a1 + 8) = v11 >> v17;
    *(_QWORD *)(a1 + 16) = v10 - v17;
    v43 = *((unsigned __int16 *)v16 + 1);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(unsigned __int8 **)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 16);
    while (v12 != v9)
    {
      v14 = *v12++;
      v11 |= (unint64_t)v14 << v13;
      v10 = v13 + 8;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v13 + 8;
      *(_QWORD *)(a1 + 24) = v12;
      v15 = v13 >= 7;
      v13 += 8;
      if (v15)
        goto LABEL_7;
    }
    if (!SafeDecodeSymbol(v3, (unint64_t *)(a1 + 8), &v43))
      return 0;
  }
  v44 = 0;
  if (*(_DWORD *)(a1 + 764))
  {
    v19 = *(_QWORD *)(a1 + 304);
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 16);
    if (v20 >= 0xF)
    {
      v24 = *v5;
LABEL_21:
      v26 = &v4[4 * v24];
      v27 = *v26;
      if (v27 >= 9)
      {
        v28 = v24;
        v20 -= 8;
        v24 >>= 8;
        v26 += 4
             * (v24 & ~(-1 << (v27 - 8)) & 0x7F)
             + 4 * (unint64_t)*(unsigned __int16 *)&v4[4 * v28 + 2];
        LODWORD(v27) = *v26;
      }
      *(_QWORD *)(a1 + 8) = v24 >> v27;
      *(_QWORD *)(a1 + 16) = v20 - v27;
      v19 = *((unsigned __int16 *)v26 + 1);
    }
    else
    {
      v21 = *(unsigned __int8 **)(a1 + 40);
      v22 = *(unsigned __int8 **)(a1 + 24);
      while (v22 != v21)
      {
        v23 = *v22++;
        v24 = ((unint64_t)v23 << v20) | *(_QWORD *)(a1 + 8);
        v25 = v20 + 8;
        *(_QWORD *)(a1 + 8) = v24;
        *(_QWORD *)(a1 + 16) = v20 + 8;
        *(_QWORD *)(a1 + 24) = v22;
        v15 = v20 >= 7;
        v20 += 8;
        if (v15)
        {
          v20 = v25;
          goto LABEL_21;
        }
      }
      if (!SafeDecodeSymbol(v4, (unint64_t *)(a1 + 8), &v44))
        goto LABEL_34;
      v19 = v44;
    }
  }
  v29 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v19);
  v30 = *((unsigned __int8 *)v29 + 2);
  v31 = *v29;
  v32 = *(_QWORD *)(a1 + 16);
  if (v32 < v30)
  {
    v33 = *(unsigned __int8 **)(a1 + 40);
    v34 = *(unsigned __int8 **)(a1 + 24);
    while (v34 != v33)
    {
      v35 = *v34++;
      v36 = ((unint64_t)v35 << v32) | *(_QWORD *)(a1 + 8);
      v32 += 8;
      *(_QWORD *)(a1 + 8) = v36;
      *(_QWORD *)(a1 + 16) = v32;
      *(_QWORD *)(a1 + 24) = v34;
      if (v32 >= v30)
        goto LABEL_30;
    }
    *(_QWORD *)(a1 + 304) = v19;
LABEL_34:
    *(_DWORD *)(a1 + 764) = 0;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 40) = v9;
    v38 = (uint64_t)&v9[-v8 - 27];
    if ((unint64_t)&v9[-v8 - 28] >= 0xFFFFFFFFFFFFFFE3)
      v38 = 0;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8 + v38;
    return 0;
  }
  v36 = *v5;
LABEL_30:
  *(_QWORD *)(a1 + 8) = v36 >> v30;
  *(_QWORD *)(a1 + 16) = v32 - v30;
  *(_QWORD *)(a1 + 280) = (v36 & ~(-1 << v30)) + v31;
  *(_DWORD *)(a1 + 764) = 0;
  if (v43)
  {
    if (v43 == 1)
      v37 = *(_QWORD *)(a1 + 344) + 1;
    else
      v37 = v43 - 2;
  }
  else
  {
    v37 = *(_QWORD *)(a1 + 336);
  }
  if (v37 >= v1)
    v40 = v1;
  else
    v40 = 0;
  v41 = v37 - v40;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v41;
  v42 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 168) = v42 + (v41 << 6);
  *(_DWORD *)(a1 + 272) = (*(unsigned int *)(a1 + 4 * (v41 >> 5) + 816) >> (v41 & 0x1F)) & 1;
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * *(unsigned __int8 *)(v42 + (v41 << 6)));
  *(_QWORD *)(a1 + 160) = (char *)&_kBrotliContextLookupTable
                        + 512 * (unint64_t)(*(_BYTE *)(*(_QWORD *)(a1 + 792) + v41) & 3);
  return 1;
}

uint64_t DecodeLiteralBlockSwitch(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(result + 312);
  if (v1 >= 2)
  {
    v2 = *(_QWORD *)(result + 256);
    v3 = *(_QWORD *)(result + 8);
    v4 = *(_QWORD *)(result + 16);
    if (v4 <= 0x10)
    {
      v5 = *(_QWORD **)(result + 24);
      v3 |= *v5 << v4;
      v4 += 48;
      *(_QWORD *)(result + 24) = (char *)v5 + 6;
    }
    v6 = (unsigned __int8 *)(v2 + 4 * v3);
    v7 = *v6;
    if (v7 >= 9)
    {
      v8 = v3;
      v4 -= 8;
      v3 >>= 8;
      v6 += 4 * (v3 & ~(-1 << (v7 - 8))) + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
    }
    v9 = *(_QWORD *)(result + 264);
    v10 = v4 - *v6;
    v11 = v3 >> *v6;
    *(_QWORD *)(result + 8) = v11;
    *(_QWORD *)(result + 16) = v10;
    v12 = *((unsigned __int16 *)v6 + 1);
    if (v10 <= 0x10)
    {
      v13 = *(_QWORD **)(result + 24);
      v11 |= *v13 << v10;
      v10 += 48;
      *(_QWORD *)(result + 24) = (char *)v13 + 6;
    }
    v14 = (unsigned __int8 *)(v9 + 4 * v11);
    v15 = *v14;
    if (v15 >= 9)
    {
      v16 = v11;
      v10 -= 8;
      v11 >>= 8;
      v14 += 4 * (v11 & ~(-1 << (v15 - 8))) + 4 * *(unsigned __int16 *)(v9 + 4 * v16 + 2);
    }
    v17 = v10 - *v14;
    v18 = v11 >> *v14;
    *(_QWORD *)(result + 8) = v18;
    *(_QWORD *)(result + 16) = v17;
    v19 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * *((unsigned __int16 *)v14 + 1));
    v20 = *((unsigned __int8 *)v19 + 2);
    v21 = *v19;
    if (v17 <= 0x20)
    {
      v22 = *(unsigned int **)(result + 24);
      v18 |= (unint64_t)*v22 << v17;
      v17 += 32;
      *(_QWORD *)(result + 24) = v22 + 1;
    }
    *(_QWORD *)(result + 8) = v18 >> v20;
    *(_QWORD *)(result + 16) = v17 - v20;
    *(_QWORD *)(result + 280) = (v18 & ~(-1 << v20)) + v21;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
        v23 = *(_QWORD *)(result + 344) + 1;
      else
        v23 = v12 - 2;
    }
    else
    {
      v23 = *(_QWORD *)(result + 336);
    }
    if (v23 < v1)
      v1 = 0;
    v24 = v23 - v1;
    *(_QWORD *)(result + 336) = *(_QWORD *)(result + 344);
    *(_QWORD *)(result + 344) = v24;
    v25 = *(_QWORD *)(result + 784);
    *(_QWORD *)(result + 168) = v25 + (v24 << 6);
    *(_DWORD *)(result + 272) = (*(unsigned int *)(result + 4 * (v24 >> 5) + 816) >> (v24 & 0x1F)) & 1;
    *(_QWORD *)(result + 416) = *(_QWORD *)(*(_QWORD *)(result + 184) + 8 * *(unsigned __int8 *)(v25 + (v24 << 6)));
    *(_QWORD *)(result + 160) = (char *)&_kBrotliContextLookupTable
                              + 512 * (unint64_t)(*(_BYTE *)(*(_QWORD *)(result + 792) + v24) & 3);
  }
  return result;
}

id JEPluralCategoryPluralFormKeyFromBaseKey(unint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;
  void *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v8[0] = v3;
  if (a1 >= 6)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Unknown plural category value %ld"), a1, v8[0]);
  else
    v4 = off_1E3DDEC58[a1];
  v8[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "componentsJoinedByString:", CFSTR("."));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void *BrotliDefaultAllocFunc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9BCC536DuLL);
}

void BrotliDefaultFreeFunc(int a1, void *a2)
{
  free(a2);
}

void sub_19CD68278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_DWORD *CreatePreparedDictionary(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v5;
  unint64_t v6;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int i;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v48;

  if (a3 <= 0x200000)
  {
    v8 = 7;
    v5 = 17;
  }
  else
  {
    v5 = 17;
    v6 = 0x200000;
    do
      v6 *= 2;
    while (v6 < a3 && v5++ < 0x15);
    v8 = v5 - 10;
  }
  v9 = 0;
  if (v8 <= 0x10 && v5 >= v8 && v5 - v8 <= 0xF)
  {
    v10 = (1 << v8);
    v11 = (1 << v5);
    v48 = v8;
    if ((2 << v5) + 4 * a3 + (4 << v5) + (8 << v8))
      v12 = BrotliAllocate(a1);
    else
      v12 = 0;
    v13 = v12 + 4 * v10;
    v14 = (char *)(v13 + 4 * v10);
    v15 = &v14[2 * v11];
    v16 = &v15[4 * v11];
    bzero(v14, 2 * (1 << v5));
    v17 = v15;
    if (a3 >= 8)
    {
      v18 = 8;
      do
      {
        v19 = v18 - 8;
        v20 = ((0x1FE35A7BD3579BD3 * (*(_QWORD *)(a2 + v19) & 0xFFFFFFFFFFuLL)) >> (64 - v5));
        v21 = *(_WORD *)&v14[2 * v20];
        if (v21)
          v22 = *(_DWORD *)&v15[4 * v20];
        else
          v22 = -1;
        *(_DWORD *)&v16[4 * v19] = v22;
        *(_DWORD *)&v15[4 * v20] = v19;
        v23 = v21 + 1;
        if ((v23 & 0xFFE0) != 0)
          v24 = 32;
        else
          v24 = v23;
        *(_WORD *)&v14[2 * v20] = v24;
        v25 = v18++;
      }
      while (v25 < a3);
    }
    v47 = a2;
    v26 = 0;
    LODWORD(a2) = 0;
    v27 = v10 - 1;
    v28 = v48;
    do
    {
      if (v26 < v11)
      {
        for (i = 32; ; --i)
        {
          v30 = 0;
          v31 = v26;
          while (v30 <= 0xFFFE)
          {
            v32 = *(unsigned __int16 *)&v14[2 * v31];
            if (i < v32)
              v32 = i;
            v30 += v32;
            v31 += v10;
            if (v31 >= v11)
              goto LABEL_36;
          }
        }
      }
      v30 = 0;
      i = 32;
LABEL_36:
      *(_DWORD *)(v13 + 4 * v26) = i;
      *(_DWORD *)(v12 + 4 * v26) = v30;
      a2 = v30 + a2;
      ++v26;
    }
    while (v26 != v10);
    if ((2 << v5) + (4 << v48) + 4 * a2 == -32)
    {
      v9 = 0;
    }
    else
    {
      v33 = BrotliAllocate(a1);
      v28 = v48;
      v17 = &v14[2 * v11];
      v9 = (_DWORD *)v33;
      v27 = v10 - 1;
    }
    v34 = 0;
    v35 = 0;
    *v9 = -558043677;
    v9[1] = a2;
    v36 = (uint64_t)&v9[v10 + 6];
    v9[2] = a3;
    v9[3] = 40;
    v9[4] = v5;
    v9[5] = v28;
    *(_QWORD *)(v36 + 2 * v11 + 4 * a2) = v47;
    do
    {
      v9[v34 + 6] = v35;
      v35 += *(_DWORD *)(v12 + 4 * v34);
      *(_DWORD *)(v12 + 4 * v34++) = 0;
    }
    while (v10 != v34);
    v37 = 0;
    do
    {
      v38 = v27 & v37;
      v39 = *(_DWORD *)(v13 + 4 * v38);
      if (v39 >= *(unsigned __int16 *)&v14[2 * v37])
        v40 = *(unsigned __int16 *)&v14[2 * v37];
      else
        v40 = v39;
      if ((_DWORD)v40)
      {
        v41 = *(unsigned int *)(v12 + 4 * v38);
        *(_WORD *)(v36 + 2 * v37) = v41;
        v42 = v9[v38 + 6] + v41;
        *(_DWORD *)(v12 + 4 * v38) = v41 + v40;
        v43 = &v17[4 * v37];
        v44 = (_DWORD *)((char *)&v9[v10 + 6 + v42] + 2 * v11);
        do
        {
          v45 = *(unsigned int *)v43;
          *v44++ = v45;
          v43 = &v16[4 * v45];
          --v40;
        }
        while (v40);
        *(v44 - 1) = v45 | 0x80000000;
      }
      else
      {
        *(_WORD *)(v36 + 2 * v37) = -1;
      }
      ++v37;
    }
    while (v37 != v11);
    BrotliFree(a1);
  }
  return v9;
}

uint64_t DestroyPreparedDictionary(uint64_t a1, uint64_t a2)
{
  if (a2)
    return BrotliFree(a1);
  return a1;
}

uint64_t AttachPreparedDictionary(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;

  v2 = 0;
  if (a2)
  {
    v3 = *a1;
    if (*a1 != 15)
    {
      v4 = a1[1] + a2[2];
      a1[1] = v4;
      v5 = &a1[v3];
      v5[2] = (uint64_t)a2;
      a1[v3 + 35] = v4;
      v6 = (_QWORD *)((char *)&a2[(1 << a2[5]) + 6 + a2[1]] + 2 * (1 << a2[4]));
      if (*a2 != -558043680)
        v6 = (_QWORD *)*v6;
      v5[18] = (uint64_t)v6;
      ++*a1;
      return 1;
    }
  }
  return v2;
}

BOOL BrotliIsMostlyUTF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, double a5)
{
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  double v20;

  if (!a4)
  {
    v20 = 0.0;
    return (double)a4 * a5 < v20;
  }
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = (char *)(a1 + ((v5 + a2) & a3));
    v8 = *v7;
    if (*v7 <= 0)
    {
      v9 = a4 - v5;
      if (a4 - v5 >= 2)
      {
        if ((v8 & 0xE0) == 0xC0)
        {
          v10 = v7[1];
          if ((v10 & 0xC0) == 0x80)
          {
            v11 = v10 & 0x3F | ((v8 & 0x1F) << 6);
            if (v11 > 0x7F)
            {
              v8 = v11;
              v12 = 2;
              goto LABEL_24;
            }
          }
        }
        if (v9 >= 3)
        {
          if ((v8 & 0xF0) == 0xE0)
          {
            v13 = v7[1];
            if ((v13 & 0xC0) == 0x80)
            {
              v14 = v7[2];
              if ((v14 & 0xC0) == 0x80 && (((v8 & 0xF) << 12) | ((v13 & 0x3F) << 6) | v14 & 0x3F) > 0x7FF)
              {
                v8 = ((v8 & 0xF) << 12) | ((v13 & 0x3F) << 6) | v14 & 0x3F;
                v12 = 3;
                goto LABEL_24;
              }
            }
          }
          if (v9 >= 4 && (v8 & 0xF8) == 0xF0)
          {
            v15 = v7[1];
            if ((v15 & 0xC0) == 0x80)
            {
              v16 = v7[2];
              if ((v16 & 0xC0) == 0x80)
              {
                v17 = v7[3];
                if ((v17 & 0xC0) == 0x80)
                {
                  v18 = ((v8 & 7) << 18) | ((v15 & 0x3F) << 12);
                  if ((v18 - 0x10000) < 0x100000)
                  {
                    v8 = v17 & 0x3F | ((v16 & 0x3F) << 6) | v18;
                    v12 = 4;
                    goto LABEL_24;
                  }
                }
              }
            }
          }
        }
      }
      v8 |= 0x110000u;
    }
    v12 = 1;
LABEL_24:
    v5 += v12;
    if (v8 >= 0x110000)
      v19 = 0;
    else
      v19 = v12;
    v6 += v19;
  }
  while (v5 < a4);
  v20 = (double)v6;
  return (double)a4 * a5 < v20;
}

uint64_t BrotliFindAllStaticDictionaryMatches(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t AllStaticDictionaryMatchesFor;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t i;
  int v15;
  unsigned int v16;
  _BYTE v18[152];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  AllStaticDictionaryMatchesFor = BrotliFindAllStaticDictionaryMatchesFor((uint64_t *)a1, a2, a3, a4, a5);
  v11 = *(_QWORD *)(a1 + 104);
  if (v11 && *(unsigned __int8 *)(v11 + 4) >= 2u)
  {
    v12 = *(uint64_t **)(v11 + 72);
    if (v12 == (uint64_t *)a1)
      v12 = *(uint64_t **)(v11 + 80);
    memset_pattern16(v18, &unk_19CFE56A0, 0x98uLL);
    v13 = BrotliFindAllStaticDictionaryMatchesFor(v12, a2, a3, a4, (uint64_t)v18);
    for (i = 0; i != 152; i += 4)
    {
      v15 = *(_DWORD *)&v18[i];
      if (v15 != 0xFFFFFFF)
      {
        v16 = v15 + 32 * *(_DWORD *)(a1 + 8) * ((1 << *(_BYTE *)(*(_QWORD *)a1 + (v15 & 0x1F))) & 0x7FFFFFE);
        if (*(_DWORD *)(a5 + i) < v16)
          v16 = *(_DWORD *)(a5 + i);
        *(_DWORD *)(a5 + i) = v16;
      }
    }
    return v13 | AllStaticDictionaryMatchesFor;
  }
  return AllStaticDictionaryMatchesFor;
}

uint64_t BrotliFindAllStaticDictionaryMatchesFor(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  int v14;
  int v15;
  unint64_t v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  char v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110;
  int v111;
  int v112;
  unint64_t v113;
  char v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unsigned __int8 *v141;
  int v142;
  unsigned int v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned __int8 *v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  int v161;
  uint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char v168;
  unint64_t v169;
  BOOL v170;
  unsigned int v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  unsigned __int8 *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  int v184;
  unsigned __int8 *v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char v191;
  unint64_t v192;
  BOOL v193;
  unsigned int v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  char v203;
  uint64_t v204;
  unint64_t v205;
  unsigned int v206;
  unsigned __int8 *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;

  v5 = a1[5];
  v6 = (506832829 * *(_DWORD *)a2) >> 17;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  if (*(_WORD *)(v5 + 2 * v6))
  {
    v8 = 0;
    v9 = a2 + 1;
    v10 = a1[6];
    v11 = *a1;
    while (1)
    {
      v12 = (char *)(v10 + 4 * v7);
      v13 = *v12;
      v14 = v12[1];
      v15 = *((unsigned __int16 *)v12 + 1);
      v16 = *v12 & 0x1F;
      v17 = *(_BYTE *)(v11 + v16);
      if (!v12[1])
      {
        v27 = *(unsigned int *)(v11 + 4 * (*v12 & 0x1F) + 32)
            + *((unsigned __int16 *)v12 + 1) * (unint64_t)(*v12 & 0x1F);
        v28 = *(_QWORD *)(v11 + 168);
        v29 = v28 + v27;
        if (v16 >= a4)
          v30 = a4;
        else
          v30 = v13 & 0x1F;
        if (v30 < 8)
        {
          v34 = (unsigned __int8 *)(v28 + v27);
          v33 = a2;
          if (v30)
          {
LABEL_24:
            v35 = &v34[v30];
            while (*v34 == *v33)
            {
              ++v33;
              ++v34;
              if (!--v30)
              {
                v34 = v35;
                break;
              }
            }
          }
        }
        else
        {
          v31 = 0;
          do
          {
            v32 = *(_QWORD *)(v29 + v31) ^ *(_QWORD *)&a2[v31];
            if (v32)
            {
              v36 = v31 + (__clz(__rbit64(v32)) >> 3);
              goto LABEL_42;
            }
            v30 -= 8;
            v31 += 8;
          }
          while (v30 > 7);
          v33 = &a2[v31];
          v34 = (unsigned __int8 *)(v29 + v31);
          if (v30)
            goto LABEL_24;
        }
        v36 = (unint64_t)&v34[-v29];
LABEL_42:
        if (v36 == v16)
        {
          v48 = *(_DWORD *)(a5 + 4 * v16);
          if (v48 >= (v16 | (32 * v15)))
            v48 = v16 | (32 * v15);
          *(_DWORD *)(a5 + 4 * v16) = v48;
          v8 = 1;
        }
        v49 = v16 - 1;
        if (v36 >= v16 - 1)
        {
          v50 = v16 | (32 * ((12 << v17) + v15));
          if (*(_DWORD *)(a5 + 4 * v49) < v50)
            v50 = *(_DWORD *)(a5 + 4 * v49);
          *(_DWORD *)(a5 + 4 * v49) = v50;
          if (v16 + 2 < a4 && a2[v49] == 105 && a2[v16] == 110 && a2[v16 + 1] == 103 && a2[v16 + 2] == 32)
          {
            v51 = v16 | (32 * ((49 << v17) + v15));
            v52 = a5 + 4 * v16;
            if (*(_DWORD *)(v52 + 12) < v51)
              v51 = *(_DWORD *)(v52 + 12);
            *(_DWORD *)(v52 + 12) = v51;
          }
          v8 = 1;
        }
        v53 = v16 - 9;
        if (a3 > v16 - 9)
          v53 = a3;
        if (v16 <= 9)
          v54 = a3;
        else
          v54 = v53;
        if (v36 >= v16 - 2)
          v55 = v16 - 2;
        else
          v55 = v36;
        if (v54 <= v55)
        {
          v56 = a1[2];
          v57 = 4 * v16 - 4 * v54;
          v58 = 6 * v16 - 6 * v54;
          do
          {
            v59 = v16 | (32 * (((unint64_t)(v57 + ((v56 >> v58) & 0x3F)) << v17) + v15));
            if (*(_DWORD *)(a5 + 4 * v54) < v59)
              v59 = *(_DWORD *)(a5 + 4 * v54);
            *(_DWORD *)(a5 + 4 * v54++) = v59;
            v57 -= 4;
            v58 -= 6;
          }
          while (v54 <= v55);
          v8 = 1;
        }
        if (v36 >= v16)
        {
          v43 = v16 + 6;
          if (v16 + 6 < a4)
          {
            v60 = &a2[v16];
            v61 = a2[v16];
            if (v61 > 0x3C)
            {
              switch(a2[v16])
              {
                case 'a':
                  if (v60[1] == 108 && v60[2] == 32)
                  {
                    v43 = v16 + 3;
                    v66 = 84;
                    goto LABEL_192;
                  }
                  break;
                case 'b':
                case 'c':
                case 'd':
                case 'g':
                case 'h':
                case 'j':
                case 'k':
                case 'm':
                case 'n':
                  goto LABEL_195;
                case 'e':
                  v87 = v60[1];
                  if (v87 == 115)
                  {
                    if (v60[2] == 116 && v60[3] == 32)
                    {
                      v43 = v16 + 4;
                      v66 = 95;
                      goto LABEL_192;
                    }
                  }
                  else if (v87 == 114)
                  {
                    if (v60[2] == 32)
                    {
                      v43 = v16 + 3;
                      v66 = 82;
                      goto LABEL_192;
                    }
                  }
                  else if (v87 == 100 && v60[2] == 32)
                  {
                    v43 = v16 + 3;
                    v66 = 53;
                    goto LABEL_192;
                  }
                  break;
                case 'f':
                  if (v60[1] == 117 && v60[2] == 108 && v60[3] == 32)
                  {
                    v43 = v16 + 4;
                    v66 = 90;
                    goto LABEL_192;
                  }
                  break;
                case 'i':
                  v88 = v60[1];
                  if (v88 == 122)
                  {
                    if (v60[2] == 101 && v60[3] == 32)
                    {
                      v43 = v16 + 4;
                      v66 = 100;
                      goto LABEL_192;
                    }
                  }
                  else if (v88 == 118 && v60[2] == 101 && v60[3] == 32)
                  {
                    v43 = v16 + 4;
                    v66 = 92;
                    goto LABEL_192;
                  }
                  break;
                case 'l':
                  v89 = v60[1];
                  if (v89 == 121)
                  {
                    if (v60[2] == 32)
                    {
                      v43 = v16 + 3;
                      v66 = 61;
                      goto LABEL_192;
                    }
                  }
                  else if (v89 == 101 && v60[2] == 115 && v60[3] == 115 && v60[4] == 32)
                  {
                    v43 = v16 + 5;
                    v66 = 93;
                    goto LABEL_192;
                  }
                  break;
                case 'o':
                  if (v60[1] == 117 && v60[2] == 115 && v60[3] == 32)
                  {
                    v43 = v16 + 4;
                    v66 = 106;
                    goto LABEL_192;
                  }
                  break;
                default:
                  if (v61 == 61)
                  {
                    v92 = v60[1];
                    if (v92 == 39)
                    {
                      v43 = v16 + 2;
                      v66 = 86;
                      goto LABEL_192;
                    }
                    if (v92 == 34)
                    {
                      v43 = v16 + 2;
                      v66 = 70;
                      goto LABEL_192;
                    }
                  }
                  else if (v61 == 93)
                  {
                    v43 = v16 + 1;
                    v66 = 24;
                    goto LABEL_192;
                  }
                  break;
              }
            }
            else
            {
              switch(a2[v16])
              {
                case ' ':
                  v62 = v16 | (32 * ((1 << v17) + v15));
                  v63 = a5 + 4 * v16;
                  if (*(_DWORD *)(v63 + 4) < v62)
                    v62 = *(_DWORD *)(v63 + 4);
                  *(_DWORD *)(v63 + 4) = v62;
                  v64 = v60[1];
                  switch(v60[1])
                  {
                    case 'a':
                      v65 = v60[2];
                      if (v65 > 0x72)
                      {
                        if (v65 == 115)
                        {
                          if (v60[3] == 32)
                          {
                            v43 = v16 + 4;
                            v66 = 46;
                            goto LABEL_192;
                          }
                        }
                        else if (v65 == 116 && v60[3] == 32)
                        {
                          v43 = v16 + 4;
                          v66 = 60;
                          goto LABEL_192;
                        }
                      }
                      else
                      {
                        if (v65 == 32)
                        {
                          v43 = v16 + 3;
                          v66 = 28;
                          goto LABEL_192;
                        }
                        if (v65 == 110 && v60[3] == 100 && v60[4] == 32)
                        {
                          v43 = v16 + 5;
                          v66 = 10;
                          goto LABEL_192;
                        }
                      }
                      break;
                    case 'b':
                      if (v60[2] == 121 && v60[3] == 32)
                      {
                        v43 = v16 + 4;
                        v66 = 38;
                        goto LABEL_192;
                      }
                      break;
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'g':
                    case 'h':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                      goto LABEL_195;
                    case 'f':
                      v94 = v60[2];
                      if (v94 == 114)
                      {
                        if (v60[3] == 111 && v60[4] == 109 && v60[5] == 32)
                        {
                          v66 = 37;
                          goto LABEL_192;
                        }
                      }
                      else if (v94 == 111 && v60[3] == 114 && v60[4] == 32)
                      {
                        v43 = v16 + 5;
                        v66 = 25;
                        goto LABEL_192;
                      }
                      break;
                    case 'i':
                      v95 = v60[2];
                      if (v95 == 115)
                      {
                        if (v60[3] == 32)
                        {
                          v43 = v16 + 4;
                          v66 = 47;
                          goto LABEL_192;
                        }
                      }
                      else if (v95 == 110 && v60[3] == 32)
                      {
                        v43 = v16 + 4;
                        v66 = 16;
                        goto LABEL_192;
                      }
                      break;
                    case 'n':
                      if (v60[2] == 111 && v60[3] == 116 && v60[4] == 32)
                      {
                        v43 = v16 + 5;
                        v66 = 80;
                        goto LABEL_192;
                      }
                      break;
                    case 'o':
                      v96 = v60[2];
                      if (v96 == 110)
                      {
                        if (v60[3] == 32)
                        {
                          v43 = v16 + 4;
                          v66 = 45;
                          goto LABEL_192;
                        }
                      }
                      else if (v96 == 102 && v60[3] == 32)
                      {
                        v43 = v16 + 4;
                        v66 = 8;
                        goto LABEL_192;
                      }
                      break;
                    default:
                      if (v64 == 116)
                      {
                        v97 = v60[2];
                        if (v97 == 111)
                        {
                          if (v60[3] == 32)
                          {
                            v43 = v16 + 4;
                            v66 = 17;
                            goto LABEL_192;
                          }
                        }
                        else if (v97 == 104)
                        {
                          v98 = v60[3];
                          if (v98 == 97)
                          {
                            if (v60[4] == 116 && v60[5] == 32)
                            {
                              v66 = 29;
                              goto LABEL_192;
                            }
                          }
                          else if (v98 == 101 && v60[4] == 32)
                          {
                            v43 = v16 + 5;
                            v66 = 5;
                            goto LABEL_192;
                          }
                        }
                      }
                      else if (v64 == 119 && v60[2] == 105 && v60[3] == 116 && v60[4] == 104 && v60[5] == 32)
                      {
                        v66 = 35;
                        goto LABEL_192;
                      }
                      break;
                  }
                  goto LABEL_195;
                case '!':
                case '#':
                case '$':
                case '%':
                case '&':
                case ')':
                case '*':
                case '+':
                case '-':
                  goto LABEL_195;
                case '"':
                  v79 = v16 | (32 * ((19 << v17) + v15));
                  v80 = a5 + 4 * v16;
                  if (*(_DWORD *)(v80 + 4) < v79)
                    v79 = *(_DWORD *)(v80 + 4);
                  *(_DWORD *)(v80 + 4) = v79;
                  if (v60[1] != 62)
                    goto LABEL_195;
                  v43 = v16 + 2;
                  v66 = 21;
                  goto LABEL_192;
                case '\'':
                  v43 = v16 + 1;
                  v66 = 36;
                  goto LABEL_192;
                case '(':
                  v43 = v16 + 1;
                  v66 = 57;
                  goto LABEL_192;
                case ',':
                  v81 = v16 | (32 * ((76 << v17) + v15));
                  v82 = a5 + 4 * v16;
                  if (*(_DWORD *)(v82 + 4) < v81)
                    v81 = *(_DWORD *)(v82 + 4);
                  *(_DWORD *)(v82 + 4) = v81;
                  if (v60[1] != 32)
                    goto LABEL_195;
                  v43 = v16 + 2;
                  v66 = 14;
                  goto LABEL_192;
                case '.':
                  v83 = v16 | (32 * ((20 << v17) + v15));
                  v84 = a5 + 4 * v16;
                  if (*(_DWORD *)(v84 + 4) < v83)
                    v83 = *(_DWORD *)(v84 + 4);
                  *(_DWORD *)(v84 + 4) = v83;
                  if (v60[1] != 32)
                    goto LABEL_195;
                  v85 = v16 | (32 * ((31 << v17) + v15));
                  if (*(_DWORD *)(v84 + 8) < v85)
                    v85 = *(_DWORD *)(v84 + 8);
                  *(_DWORD *)(v84 + 8) = v85;
                  if (v60[2] != 84 || v60[3] != 104)
                    goto LABEL_195;
                  v86 = v60[4];
                  if (v86 == 105)
                  {
                    if (v60[5] == 115 && v60[6] == 32)
                    {
                      v43 = v16 + 7;
                      v66 = 75;
                      goto LABEL_192;
                    }
                  }
                  else if (v86 == 101 && v60[5] == 32)
                  {
                    v66 = 43;
                    goto LABEL_192;
                  }
                  goto LABEL_195;
                default:
                  if (v61 != 10)
                  {
                    if (v61 != 58)
                      goto LABEL_195;
                    v43 = v16 + 1;
                    v66 = 51;
                    goto LABEL_192;
                  }
                  v90 = v16 | (32 * ((22 << v17) + v15));
                  v91 = a5 + 4 * v16;
                  if (*(_DWORD *)(v91 + 4) < v90)
                    v90 = *(_DWORD *)(v91 + 4);
                  *(_DWORD *)(v91 + 4) = v90;
                  if (v60[1] == 9)
                  {
                    v43 = v16 + 2;
                    v66 = 50;
                    goto LABEL_192;
                  }
                  break;
              }
            }
          }
        }
        goto LABEL_195;
      }
      if (v16 <= a4)
      {
        v18 = (unsigned __int8 *)(*(_QWORD *)(v11 + 168)
                                + *(unsigned int *)(v11 + 4 * (*v12 & 0x1F) + 32)
                                + *((unsigned __int16 *)v12 + 1) * (unint64_t)(*v12 & 0x1F));
        if (v14 == 10)
        {
          v19 = *v18;
          if ((v19 - 97) > 0x19 || (v19 ^ 0x20) != *a2)
            goto LABEL_195;
          v20 = v18 + 1;
          v21 = (unsigned __int8 *)(v16 - 1);
          if (v21 < 8)
          {
            v26 = v18 + 1;
            v25 = a2 + 1;
            v23 = (v16 - 1);
            if ((_DWORD)v16 != 1)
            {
LABEL_90:
              v67 = &v26[v23];
              while (*v26 == *v25)
              {
                ++v25;
                ++v26;
                if (!--v23)
                {
                  v26 = v67;
                  break;
                }
              }
            }
          }
          else
          {
            v22 = 0;
            v23 = (v16 - 1);
            do
            {
              v24 = *(_QWORD *)&v20[v22] ^ *(_QWORD *)&v9[v22];
              if (v24)
              {
                v68 = (unsigned __int8 *)(v22 + (__clz(__rbit64(v24)) >> 3));
                goto LABEL_108;
              }
              v23 -= 8;
              v22 += 8;
            }
            while (v23 > 7);
            v25 = &v9[v22];
            v26 = &v20[v22];
            if (v23)
              goto LABEL_90;
          }
          v68 = (unsigned __int8 *)(v26 - v20);
LABEL_108:
          if (v68 != v21)
            goto LABEL_195;
          v41 = 9;
        }
        else
        {
          v37 = v13 & 0x1F;
          v38 = a2;
          if ((_DWORD)v16)
          {
            do
            {
              v40 = *v18++;
              v39 = v40;
              if ((v40 - 97) > 0x19)
              {
                if (v39 != *v38)
                  goto LABEL_195;
              }
              else if ((v39 ^ 0x20) != *v38)
              {
                goto LABEL_195;
              }
              ++v38;
              --v37;
            }
            while (v37);
          }
          v41 = 44;
        }
        v42 = v16 | (32 * ((v41 << v17) + v15));
        if (*(_DWORD *)(a5 + 4 * v16) < v42)
          v42 = *(_DWORD *)(a5 + 4 * v16);
        *(_DWORD *)(a5 + 4 * v16) = v42;
        v43 = v16 + 1;
        if (v16 + 1 >= a4)
        {
LABEL_133:
          v8 = 1;
        }
        else
        {
          v44 = &a2[v16];
          v8 = 1;
          switch(a2[v16])
          {
            case ' ':
              v45 = v14 == 10;
              v46 = 68;
              v47 = 4;
              goto LABEL_118;
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case ')':
            case '*':
            case '+':
            case '-':
              goto LABEL_195;
            case '"':
              v70 = 87;
              if (v14 == 10)
                v70 = 66;
              v71 = v16 | (32 * ((v70 << v17) + v15));
              if (*(_DWORD *)(a5 + 4 * v43) < v71)
                v71 = *(_DWORD *)(a5 + 4 * v43);
              *(_DWORD *)(a5 + 4 * v43) = v71;
              if (v44[1] != 62)
                goto LABEL_133;
              v72 = v14 == 10;
              v73 = 97;
              v74 = 69;
              goto LABEL_187;
            case '\'':
              v45 = v14 == 10;
              v46 = 94;
              v47 = 74;
              goto LABEL_118;
            case '(':
              v45 = v14 == 10;
              v46 = 113;
              v47 = 78;
LABEL_118:
              if (v45)
                v66 = v47;
              else
                v66 = v46;
              goto LABEL_191;
            case ',':
              v75 = 112;
              if (v14 == 10)
                v75 = 99;
              v76 = v16 | (32 * ((v75 << v17) + v15));
              if (*(_DWORD *)(a5 + 4 * v43) < v76)
                v76 = *(_DWORD *)(a5 + 4 * v43);
              *(_DWORD *)(a5 + 4 * v43) = v76;
              if (v44[1] != 32)
                goto LABEL_133;
              v72 = v14 == 10;
              v73 = 107;
              v74 = 58;
              goto LABEL_187;
            case '.':
              v77 = 101;
              if (v14 == 10)
                v77 = 79;
              v78 = v16 | (32 * ((v77 << v17) + v15));
              if (*(_DWORD *)(a5 + 4 * v43) < v78)
                v78 = *(_DWORD *)(a5 + 4 * v43);
              *(_DWORD *)(a5 + 4 * v43) = v78;
              if (v44[1] != 32)
                goto LABEL_133;
              v72 = v14 == 10;
              v73 = 114;
              v74 = 88;
              goto LABEL_187;
            default:
              if (a2[v16] != 61)
                goto LABEL_195;
              v69 = v44[1];
              if (v69 == 39)
              {
                v72 = v14 == 10;
                v73 = 116;
                v74 = 108;
LABEL_187:
                if (v72)
                  v66 = v74;
                else
                  v66 = v73;
              }
              else
              {
                if (v69 != 34)
                  goto LABEL_133;
                if (v14 == 10)
                  v66 = 104;
                else
                  v66 = 105;
              }
              v43 = v16 + 2;
LABEL_191:
              v8 = 1;
              break;
          }
LABEL_192:
          v93 = v16 | (32 * ((v66 << v17) + v15));
          if (*(_DWORD *)(a5 + 4 * v43) < v93)
            v93 = *(_DWORD *)(a5 + 4 * v43);
          *(_DWORD *)(a5 + 4 * v43) = v93;
        }
      }
LABEL_195:
      ++v7;
      if (v13 < 0)
        goto LABEL_265;
    }
  }
  v8 = 0;
LABEL_265:
  if (a4 < 5)
    return v8;
  v99 = *a2;
  if (v99 == 46 || v99 == 32)
  {
    v100 = a2 + 1;
    v101 = *(unsigned __int16 *)(v5 + 2 * ((506832829 * *(_DWORD *)(a2 + 1)) >> 17));
    if (v101)
    {
      v102 = a4 - 1;
      v103 = a2 + 2;
      v104 = a1[6];
      v105 = *a1;
      v106 = 6;
      if (v99 != 32)
        v106 = 32;
      v107 = 89;
      if (v99 != 32)
        v107 = 67;
      v108 = 2;
      if (v99 != 32)
        v108 = 77;
      while (1)
      {
        v109 = (char *)(v104 + 4 * v101);
        v110 = *v109;
        v111 = v109[1];
        v112 = *((unsigned __int16 *)v109 + 1);
        v113 = *v109 & 0x1F;
        v114 = *(_BYTE *)(v105 + v113);
        if (!v109[1])
          break;
        if (v99 != 32 || v102 < v113)
          goto LABEL_363;
        v115 = (unsigned __int8 *)(*(_QWORD *)(v105 + 168)
                                 + *(unsigned int *)(v105 + 4 * (*v109 & 0x1F) + 32)
                                 + *((unsigned __int16 *)v109 + 1) * (unint64_t)(*v109 & 0x1F));
        if (v111 == 10)
        {
          v116 = *v115;
          if ((v116 - 97) > 0x19 || (v116 ^ 0x20) != *v100)
            goto LABEL_363;
          v117 = v115 + 1;
          v118 = (unsigned __int8 *)(v113 - 1);
          if (v118 < 8)
          {
            v123 = v115 + 1;
            v122 = a2 + 2;
            v120 = (v113 - 1);
LABEL_341:
            if (v120)
            {
              v153 = &v123[v120];
              while (*v123 == *v122)
              {
                ++v122;
                ++v123;
                if (!--v120)
                {
                  v123 = v153;
                  break;
                }
              }
            }
            v154 = (unsigned __int8 *)(v123 - v117);
          }
          else
          {
            v119 = 0;
            v120 = (v113 - 1);
            while (1)
            {
              v121 = *(_QWORD *)&v117[v119] ^ *(_QWORD *)&v103[v119];
              if (v121)
                break;
              v120 -= 8;
              v119 += 8;
              if (v120 <= 7)
              {
                v122 = &v103[v119];
                v123 = &v117[v119];
                goto LABEL_341;
              }
            }
            v154 = (unsigned __int8 *)(v119 + (__clz(__rbit64(v121)) >> 3));
          }
          if (v154 != v118)
            goto LABEL_363;
          v136 = 30;
        }
        else
        {
          v132 = v110 & 0x1F;
          v133 = a2 + 1;
          if ((_DWORD)v113)
          {
            do
            {
              v135 = *v115++;
              v134 = v135;
              if ((v135 - 97) > 0x19)
              {
                if (v134 != *v133)
                  goto LABEL_363;
              }
              else if ((v134 ^ 0x20) != *v133)
              {
                goto LABEL_363;
              }
              ++v133;
              --v132;
            }
            while (v132);
          }
          v136 = 85;
        }
        v137 = (v136 << v114) + v112;
        v138 = v113 + 1;
        v139 = v113 | (32 * v137);
        if (*(_DWORD *)(a5 + 4 * (v113 + 1)) < v139)
          v139 = *(_DWORD *)(a5 + 4 * (v113 + 1));
        *(_DWORD *)(a5 + 4 * v138) = v139;
        v140 = v113 + 2;
        if (v113 + 2 >= a4)
          goto LABEL_362;
        v141 = &a2[v138];
        v142 = a2[v138];
        v8 = 1;
        if (v142 > 45)
        {
          if (v142 == 46)
          {
            v155 = 115;
            if (v111 == 10)
              v155 = 96;
            v156 = v113 | (32 * ((v155 << v114) + v112));
            if (*(_DWORD *)(a5 + 4 * v140) < v156)
              v156 = *(_DWORD *)(a5 + 4 * v140);
            *(_DWORD *)(a5 + 4 * v140) = v156;
            if (v141[1] == 32)
            {
              v144 = v111 == 10;
              v145 = 117;
              v146 = 91;
              goto LABEL_356;
            }
            goto LABEL_362;
          }
          if (v142 == 61)
          {
            v151 = v141[1];
            if (v151 != 39)
            {
              if (v151 == 34)
              {
                v144 = v111 == 10;
                v145 = 110;
                v146 = 118;
                goto LABEL_356;
              }
LABEL_362:
              v8 = 1;
              goto LABEL_363;
            }
            v145 = 119;
            if (v111 == 10)
              v145 = 120;
LABEL_358:
            v140 = v113 + 3;
LABEL_359:
            v157 = v113 | (32 * ((v145 << v114) + v112));
            if (*(_DWORD *)(a5 + 4 * v140) < v157)
              v157 = *(_DWORD *)(a5 + 4 * v140);
            *(_DWORD *)(a5 + 4 * v140) = v157;
            goto LABEL_362;
          }
        }
        else
        {
          if (v142 == 32)
          {
            v145 = 83;
            if (v111 == 10)
              v145 = 15;
            goto LABEL_359;
          }
          if (v142 == 44)
          {
            if (v111 == 10)
            {
              v143 = v113 | (32 * ((109 << v114) + v112));
              if (*(_DWORD *)(a5 + 4 * v140) < v143)
                v143 = *(_DWORD *)(a5 + 4 * v140);
              *(_DWORD *)(a5 + 4 * v140) = v143;
            }
            if (v141[1] != 32)
              goto LABEL_362;
            v144 = v111 == 10;
            v145 = 111;
            v146 = 65;
LABEL_356:
            if (v144)
              v145 = v146;
            goto LABEL_358;
          }
        }
LABEL_363:
        ++v101;
        if (v110 < 0)
          goto LABEL_379;
      }
      if (v102 < v113)
        goto LABEL_363;
      v124 = *(_QWORD *)(v105 + 168)
           + *(unsigned int *)(v105 + 4 * (*v109 & 0x1F) + 32)
           + *((unsigned __int16 *)v109 + 1) * (unint64_t)(*v109 & 0x1F);
      if (v113 < 8)
      {
        v129 = (unsigned __int8 *)(*(_QWORD *)(v105 + 168)
                                 + *(unsigned int *)(v105 + 4 * (*v109 & 0x1F) + 32)
                                 + *((unsigned __int16 *)v109 + 1) * (unint64_t)(*v109 & 0x1F));
        v128 = a2 + 1;
        v126 = v110 & 0x1F;
        if ((*v109 & 0x1F) != 0)
        {
LABEL_294:
          v130 = &v129[v126];
          while (*v129 == *v128)
          {
            ++v128;
            ++v129;
            if (!--v126)
            {
              v129 = v130;
              break;
            }
          }
        }
      }
      else
      {
        v125 = 0;
        v126 = v110 & 0x1F;
        do
        {
          v127 = *(_QWORD *)(v124 + v125) ^ *(_QWORD *)&v100[v125];
          if (v127)
          {
            v131 = (unsigned __int8 *)(v125 + (__clz(__rbit64(v127)) >> 3));
            goto LABEL_319;
          }
          v126 -= 8;
          v125 += 8;
        }
        while (v126 > 7);
        v128 = &v100[v125];
        v129 = (unsigned __int8 *)(v124 + v125);
        if (v126)
          goto LABEL_294;
      }
      v131 = &v129[-v124];
LABEL_319:
      if (v131 != (unsigned __int8 *)v113)
        goto LABEL_363;
      v147 = v113 + 1;
      v148 = v113 | (32 * ((v106 << v114) + v112));
      if (*(_DWORD *)(a5 + 4 * (v113 + 1)) < v148)
        v148 = *(_DWORD *)(a5 + 4 * (v113 + 1));
      *(_DWORD *)(a5 + 4 * v147) = v148;
      v140 = v113 + 2;
      if (v113 + 2 >= a4)
        goto LABEL_362;
      v149 = &a2[v147];
      v150 = *v149;
      if (v150 == 32)
      {
        v145 = v108;
      }
      else if (v150 == 40)
      {
        v145 = v107;
      }
      else
      {
        if (v99 != 32)
          goto LABEL_362;
        switch(v150)
        {
          case '=':
            v158 = v149[1];
            if (v158 == 39)
            {
              v140 = v113 + 3;
              v145 = 98;
            }
            else
            {
              if (v158 != 34)
                goto LABEL_362;
              v140 = v113 + 3;
              v145 = 81;
            }
            break;
          case '.':
            v159 = v113 | (32 * ((71 << v114) + v112));
            if (*(_DWORD *)(a5 + 4 * v140) < v159)
              v159 = *(_DWORD *)(a5 + 4 * v140);
            *(_DWORD *)(a5 + 4 * v140) = v159;
            if (v149[1] != 32)
              goto LABEL_362;
            v140 = v113 + 3;
            v145 = 52;
            break;
          case ',':
            v152 = v113 | (32 * ((103 << v114) + v112));
            if (*(_DWORD *)(a5 + 4 * v140) < v152)
              v152 = *(_DWORD *)(a5 + 4 * v140);
            *(_DWORD *)(a5 + 4 * v140) = v152;
            if (v149[1] != 32)
              goto LABEL_362;
            v140 = v113 + 3;
            v145 = 33;
            break;
          default:
            goto LABEL_362;
        }
      }
      goto LABEL_359;
    }
  }
LABEL_379:
  if (a4 < 6)
    return v8;
  v160 = a2[1];
  v161 = *a2;
  if (v160 == 32)
  {
    if (v161 != 44 && v161 != 101 && v161 != 115)
      goto LABEL_422;
  }
  else if (v160 != 160 || v161 != 194)
  {
    goto LABEL_422;
  }
  v162 = a1[5];
  v163 = a2 + 2;
  v164 = *(unsigned __int16 *)(v162 + 2 * ((506832829 * *(_DWORD *)(a2 + 2)) >> 17));
  if (*(_WORD *)(v162 + 2 * ((506832829 * *(_DWORD *)(a2 + 2)) >> 17)))
  {
    v165 = a1[6];
    v166 = *a1;
    while (1)
    {
      v167 = (char *)(v165 + 4 * v164);
      v168 = *v167;
      v169 = *v167 & 0x1F;
      if (v167[1])
        v170 = 0;
      else
        v170 = a4 - 2 >= v169;
      if (!v170)
        goto LABEL_421;
      v171 = *((unsigned __int16 *)v167 + 1);
      v172 = *(_QWORD *)(v166 + 168)
           + *(unsigned int *)(v166 + 4 * v169 + 32)
           + v171 * (unint64_t)v169;
      if (v169 < 8)
      {
        v177 = (unsigned __int8 *)(*(_QWORD *)(v166 + 168)
                                 + *(unsigned int *)(v166 + 4 * v169 + 32)
                                 + v171 * (unint64_t)v169);
        v176 = a2 + 2;
        v174 = v168 & 0x1F;
        if (v169)
        {
LABEL_401:
          v178 = &v177[v174];
          while (*v177 == *v176)
          {
            ++v176;
            ++v177;
            if (!--v174)
            {
              v177 = v178;
              break;
            }
          }
        }
      }
      else
      {
        v173 = 0;
        v174 = v168 & 0x1F;
        do
        {
          v175 = *(_QWORD *)(v172 + v173) ^ *(_QWORD *)&v163[v173];
          if (v175)
          {
            v179 = (unsigned __int8 *)(v173 + (__clz(__rbit64(v175)) >> 3));
            goto LABEL_407;
          }
          v174 -= 8;
          v173 += 8;
        }
        while (v174 > 7);
        v176 = &v163[v173];
        v177 = (unsigned __int8 *)(v172 + v173);
        if (v174)
          goto LABEL_401;
      }
      v179 = &v177[-v172];
LABEL_407:
      if (v179 != (unsigned __int8 *)v169)
        goto LABEL_421;
      v180 = *a2;
      if (v180 == 194)
        break;
      if (v169 + 2 < a4 && a2[v169 + 2] == 32)
      {
        if (v180 == 115)
          v181 = 7;
        else
          v181 = 13;
        if (v180 == 101)
          v181 = 18;
        v182 = 3;
        goto LABEL_418;
      }
LABEL_421:
      ++v164;
      if (v168 < 0)
        goto LABEL_422;
    }
    v181 = 102;
    v182 = 2;
LABEL_418:
    v183 = v169 | (32 * ((v181 << *(_BYTE *)(v166 + v169)) + v171));
    if (*(_DWORD *)(a5 + 4 * (v182 + v169)) < v183)
      v183 = *(_DWORD *)(a5 + 4 * (v182 + v169));
    *(_DWORD *)(a5 + 4 * (v182 + v169)) = v183;
    v8 = 1;
    goto LABEL_421;
  }
LABEL_422:
  if (a4 < 9)
    return v8;
  v184 = *a2;
  if (v184 != 46)
  {
    if (v184 != 32 || a2[1] != 116 || a2[2] != 104 || a2[3] != 101 || a2[4] != 32)
      return v8;
    goto LABEL_434;
  }
  if (a2[1] == 99 && a2[2] == 111 && a2[3] == 109 && a2[4] == 47)
  {
LABEL_434:
    v185 = a2 + 5;
    v186 = (506832829 * *(_DWORD *)(a2 + 5)) >> 17;
    v187 = *(unsigned __int16 *)(a1[5] + 2 * v186);
    if (!*(_WORD *)(a1[5] + 2 * v186))
      return v8;
    v188 = a1[6];
    v189 = *a1;
    do
    {
      v190 = (char *)(v188 + 4 * v187);
      v191 = *v190;
      v192 = *v190 & 0x1F;
      if (v190[1])
        v193 = 0;
      else
        v193 = a4 - 5 >= v192;
      if (!v193)
        goto LABEL_478;
      v194 = *((unsigned __int16 *)v190 + 1);
      v195 = *(_QWORD *)(v189 + 168)
           + *(unsigned int *)(v189 + 4 * v192 + 32)
           + v194 * (unint64_t)v192;
      if (v192 < 8)
      {
        v200 = (unsigned __int8 *)(*(_QWORD *)(v189 + 168)
                                 + *(unsigned int *)(v189 + 4 * v192 + 32)
                                 + v194 * (unint64_t)v192);
        v199 = a2 + 5;
        v197 = v191 & 0x1F;
LABEL_447:
        if (v197)
        {
          v201 = &v200[v197];
          while (*v200 == *v199)
          {
            ++v199;
            ++v200;
            if (!--v197)
            {
              v200 = v201;
              break;
            }
          }
        }
        v202 = &v200[-v195];
      }
      else
      {
        v196 = 0;
        v197 = v191 & 0x1F;
        while (1)
        {
          v198 = *(_QWORD *)(v195 + v196) ^ *(_QWORD *)&v185[v196];
          if (v198)
            break;
          v197 -= 8;
          v196 += 8;
          if (v197 <= 7)
          {
            v199 = &v185[v196];
            v200 = (unsigned __int8 *)(v195 + v196);
            goto LABEL_447;
          }
        }
        v202 = (unsigned __int8 *)(v196 + (__clz(__rbit64(v198)) >> 3));
      }
      if (v202 != (unsigned __int8 *)v192)
        goto LABEL_478;
      v203 = *(_BYTE *)(v189 + v192);
      if (*a2 == 32)
        v204 = 41;
      else
        v204 = 72;
      v205 = v192 + 5;
      v206 = v192 | (32 * ((v204 << v203) + v194));
      if (*(_DWORD *)(a5 + 4 * (v192 + 5)) < v206)
        v206 = *(_DWORD *)(a5 + 4 * (v192 + 5));
      *(_DWORD *)(a5 + 4 * v205) = v206;
      if (v205 < a4)
      {
        v8 = 1;
        if (*a2 != 32 || v192 + 8 >= a4)
          goto LABEL_478;
        v207 = &a2[v205];
        if (a2[v205] == 32 && v207[1] == 111 && v207[2] == 102 && v207[3] == 32)
        {
          v208 = v192 | (32 * ((62 << v203) + v194));
          v209 = a5 + 4 * v192;
          if (*(_DWORD *)(v209 + 36) < v208)
            v208 = *(_DWORD *)(v209 + 36);
          *(_DWORD *)(v209 + 36) = v208;
          if (v192 + 12 < a4 && v207[4] == 116 && v207[5] == 104 && v207[6] == 101 && v207[7] == 32)
          {
            v210 = v192 | (32 * ((73 << v203) + v194));
            v211 = a5 + 4 * v192;
            if (*(_DWORD *)(v211 + 52) < v210)
              v210 = *(_DWORD *)(v211 + 52);
            *(_DWORD *)(v211 + 52) = v210;
          }
        }
      }
      v8 = 1;
LABEL_478:
      ++v187;
    }
    while ((v191 & 0x80) == 0);
  }
  return v8;
}

unsigned int *BrotliCompressFragmentTwoPass(unsigned int *result, char *__src, unint64_t a3, int a4, unsigned __int8 *a5, unsigned __int8 *__dst, uint64_t a7, unsigned int a8, unint64_t *a9, uint64_t a10)
{
  unint64_t v13;
  unint64_t v14;

  v13 = *a9;
  switch(__clz(a8) ^ 0x1F)
  {
    case 8u:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl8((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 9u:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl9((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xAu:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl10((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xBu:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl11((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xCu:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl12((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xDu:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl13((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xEu:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl14((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xFu:
      result = (unsigned int *)BrotliCompressFragmentTwoPassImpl15((uint64_t)result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0x10u:
      result = BrotliCompressFragmentTwoPassImpl16(result, __src, a3, a5, (char *)__dst, a7, a9, a10);
      break;
    case 0x11u:
      result = BrotliCompressFragmentTwoPassImpl17(result, __src, a3, a5, (char *)__dst, a7, a9, a10);
      break;
    default:
      break;
  }
  if (*a9 - v13 > 8 * a3 + 31)
  {
    *(_BYTE *)(a10 + (v13 >> 3)) &= ~(-1 << (v13 & 7));
    *a9 = v13;
    result = (unsigned int *)EmitUncompressedMetaBlock(__src, a3, a9, a10);
  }
  if (a4)
  {
    v14 = *a9;
    *(_QWORD *)(a10 + (*a9 >> 3)) = (1 << (*a9 & 7)) | *(unsigned __int8 *)(a10 + (*a9 >> 3));
    *a9 = v14 + 1;
    *(_QWORD *)(a10 + ((v14 + 1) >> 3)) = (1 << ((v14 + 1) & 7)) | *(unsigned __int8 *)(a10 + ((v14 + 1) >> 3));
    *a9 = ((_DWORD)v14 + 9) & 0xFFFFFFF8;
  }
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl8(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 56;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl9(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 55;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl10(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 54;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl11(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 53;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 51) & 0x1FFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 51) & 0x1FFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl12(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 52;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 50) & 0x3FFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 50) & 0x3FFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl13(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 51;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 49) & 0x7FFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 49) & 0x7FFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl14(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 50;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 48) & 0xFFFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 48) & 0xFFFC)) = (_DWORD)v16
                                                                                          - (_DWORD)__src
                                                                                          - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

uint64_t BrotliCompressFragmentTwoPassImpl15(uint64_t result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v84;
  char *v85;
  unsigned __int8 *__dsta;
  unint64_t v87;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v84 = result;
  if (!a3)
    return result;
  v9 = a3;
  v91 = __src + 4;
  v11 = __src;
  __dsta = __dst;
  do
  {
    v12 = 0x20000;
    if (v9 < 0x20000)
      v12 = v9;
    v13 = &v11[v12];
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v89 = &v11[v12];
    v90 = v12;
    v87 = v9;
    if (v12 < 0x10)
      goto LABEL_85;
    v17 = v12 - 4;
    if (v90 - 4 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dsta;
    v85 = v11;
    v16 = v11;
    v92 = v13 - 4;
    do
    {
LABEL_9:
      v22 = v16 + 1;
      v21 = *(_QWORD *)(v16 + 1);
      for (i = 32; ; ++i)
      {
        v24 = (char *)v22 + (i >> 5);
        if (v24 > v18)
          goto LABEL_83;
        v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 49;
        v21 = *(_QWORD *)v24;
        v26 = (char *)v22 - v20;
        if (*v22 != *(_DWORD *)v26 || v20 < 1)
        {
          v26 = &__src[*(int *)(a6 + 4 * v25)];
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
          if (*v22 != *(_DWORD *)v26)
            goto LABEL_18;
        }
        else
        {
          *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        }
        v28 = (_DWORD)v22 - (_DWORD)v26;
        if ((char *)v22 - v26 <= 262128)
          break;
LABEL_18:
        v22 = v24;
      }
      v29 = (unsigned __int8 *)(v26 + 4);
      v30 = (unsigned __int8 *)(v22 + 1);
      v31 = v19 - (char *)v22;
      if ((unint64_t)(v19 - (char *)v22) < 8)
      {
        v34 = (unsigned __int8 *)(v26 + 4);
        if (v31)
        {
LABEL_26:
          v35 = &v34[v31];
          while (*v34 == *v30)
          {
            ++v30;
            ++v34;
            if (!--v31)
            {
              v34 = v35;
              break;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)&v29[v32] ^ *(_QWORD *)&v30[v32];
          if (v33)
          {
            v36 = (unsigned __int8 *)(v32 + (__clz(__rbit64(v33)) >> 3));
            goto LABEL_32;
          }
          v31 -= 8;
          v32 += 8;
        }
        while (v31 > 7);
        v30 += v32;
        v34 = &v29[v32];
        if (v31)
          goto LABEL_26;
      }
      v36 = (unsigned __int8 *)(v34 - v29);
LABEL_32:
      v37 = (_DWORD)v22 - (_DWORD)v16;
      v94 = v36;
      if (((_DWORD)v22 - (_DWORD)v16) >= 6)
      {
        if (v37 > 0x81)
        {
          if (v37 > 0x841)
          {
            if (v37 >> 1 > 0xC20)
            {
              if (v37 > 0x5841)
                v41 = -5784041;
              else
                v41 = -1589738;
              v38 = (v37 << 8) + v41;
            }
            else
            {
              v38 = (v37 << 8) - 541163;
            }
          }
          else
          {
            v40 = __clz(v37 - 66) ^ 0x1F;
            v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
          }
        }
        else
        {
          v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
          v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
        }
      }
      else
      {
        v38 = (_DWORD)v22 - (_DWORD)v16;
      }
      *v14 = v38;
      v42 = v15;
      memcpy(v15, v16, (int)v37);
      if (v20 == v28)
      {
        v43 = 64;
      }
      else
      {
        v44 = __clz(v28 + 3) ^ 0x1F;
        v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
            + 76;
        v20 = v28;
      }
      v45 = (unint64_t)(v94 + 4);
      v14[1] = v43;
      if ((unint64_t)(v94 + 4) > 0xB)
      {
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v48 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v49 = __clz((_DWORD)v94 - 68) ^ 0x1F;
              v48 = (v49 | (((-1 << v49) + (_DWORD)v94 - 68) << 8)) + 52;
            }
          }
          else
          {
            v48 = (((unint64_t)(v94 - 4) >> 5) + 54) | ((((_BYTE)v94 - 4) & 0x1F) << 8);
          }
          v14[2] = v48;
          v14[3] = 64;
          v46 = 4;
        }
        else
        {
          v47 = (__clz((_DWORD)v94 - 4) ^ 0x1F) - 1;
          v14[2] = (((unint64_t)(v94 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v94
                                                                           - 4
                                                                           - ((unint64_t)(v94 - 4) >> v47 << v47)) << 8);
          v46 = 3;
        }
      }
      else
      {
        v14[2] = (_DWORD)v94 + 24;
        v46 = 3;
      }
      v16 = (char *)v22 + v45;
      v15 = &v42[v37];
      v14 += v46;
      if ((char *)v22 + v45 >= v18)
      {
LABEL_83:
        v9 = v87;
        goto LABEL_84;
      }
      v50 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC)) = (_DWORD)v16
                                                                                               - (_DWORD)__src
                                                                                               - 2;
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 47) & 0x1FFFC)) = (_DWORD)v16
                                                                                           - (_DWORD)__src
                                                                                           - 1;
      v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC;
      v52 = *(int *)(a6 + v51);
      *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      v19 = v92;
    }
    while (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52]);
    while (1)
    {
      v54 = &v91[v52];
      v55 = (unsigned __int8 *)(v16 + 4);
      v56 = v92 - v16;
      if ((unint64_t)(v92 - v16) < 8)
      {
        v59 = (unsigned __int8 *)v54;
        if (v56)
        {
LABEL_67:
          v60 = &v59[v56];
          while (*v59 == *v55)
          {
            ++v55;
            ++v59;
            if (!--v56)
            {
              v59 = v60;
              break;
            }
          }
        }
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&v54[v57] ^ *(_QWORD *)&v55[v57];
          if (v58)
          {
            v61 = (unsigned __int8 *)(v57 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_73;
          }
          v56 -= 8;
          v57 += 8;
        }
        while (v56 > 7);
        v55 += v57;
        v59 = (unsigned __int8 *)&v54[v57];
        if (v56)
          goto LABEL_67;
      }
      v61 = (unsigned __int8 *)(v59 - (unsigned __int8 *)v54);
LABEL_73:
      v62 = (unint64_t)(v61 + 4);
      if ((unint64_t)(v61 + 4) > 9)
      {
        v64 = ((_DWORD)v62 << 8) - 542145;
        v65 = __clz((_DWORD)v61 - 66) ^ 0x1F;
        if (v62 <= 0x845)
          v64 = (v65 | (((-1 << v65) + (_DWORD)v61 - 66) << 8)) + 52;
        v66 = v61 - 2;
        v67 = (__clz(v66) ^ 0x1F) - 1;
        v63 = (((unint64_t)v66 >> v67) + 2 * v67 + 44) | (((_DWORD)v66
                                                                - ((unint64_t)v66 >> v67 << v67)) << 8);
        if (v62 > 0x85)
          v63 = v64;
      }
      else
      {
        v63 = (_DWORD)v61 + 42;
      }
      v16 += v62;
      v20 = v53;
      v68 = v53 + 3;
      v69 = __clz(v68);
      *v14 = v63;
      v14[1] = (((v68 - (((v68 >> ((v69 ^ 0x1F) - 1)) & 1 | 2) << ((v69 ^ 0x1F) - 1))) << 8) | (2 * (v69 ^ 0x1F)) | (v68 >> ((v69 ^ 0x1F) - 1)) & 1)
             + 76;
      v14 += 2;
      if (v16 >= v18)
        break;
      v70 = *(_QWORD *)(v16 - 3);
      *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v70) >> 47) & 0x1FFFC)) = (_DWORD)v16
                                                                                           - (_DWORD)__src
                                                                                           - 3;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 24) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC)) = (_DWORD)v16
                                                                                               - (_DWORD)__src
                                                                                               - 2;
      *(_DWORD *)(a6 + (((506832829 * ((v70 << 16) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC)) = (_DWORD)v16
                                                                                               - (_DWORD)__src
                                                                                               - 1;
      v71 = ((506832829 * ((v70 << 8) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC;
      v52 = *(int *)(a6 + v71);
      *(_DWORD *)(a6 + v71) = (_DWORD)v16 - (_DWORD)__src;
      v53 = v16 - &__src[v52];
      if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
        goto LABEL_9;
    }
    v9 = v87;
LABEL_84:
    v13 = v89;
    v11 = v85;
LABEL_85:
    if (v16 >= v13)
    {
      v75 = (unsigned int *)v84;
    }
    else
    {
      v72 = v11;
      v73 = (_DWORD)v13 - (_DWORD)v16;
      if (((_DWORD)v13 - (_DWORD)v16) >= 6)
      {
        v76 = (v73 << 8) - 1589738;
        if (v73 > 0x5841)
          v76 = (v73 << 8) - 5784041;
        if (v73 >> 1 <= 0xC20)
          v74 = (v73 << 8) - 541163;
        else
          v74 = v76;
        v77 = __clz(v73 - 66) ^ 0x1F;
        if (v73 <= 0x841)
          v74 = (v77 | (((-1 << v77) + v73 - 66) << 8)) + 10;
        v78 = (__clz(v73 - 2) ^ 0x1F) - 1;
        if (v73 <= 0x81)
          v74 = (((v73 - 2) >> v78) + 2 * v78 + 2) | ((v73 - 2 - ((v73 - 2) >> v78 << v78)) << 8);
      }
      else
      {
        v74 = (_DWORD)v13 - (_DWORD)v16;
      }
      *v14++ = v74;
      v79 = v15;
      memcpy(v15, v16, v73);
      v15 = &v79[v73];
      v75 = (unsigned int *)v84;
      v11 = v72;
    }
    v95 = v15 - __dsta;
    if (ShouldCompress(v75, (uint64_t)v11, v90, v15 - __dsta))
    {
      v93 = ((char *)v14 - (char *)a4) >> 2;
      BrotliStoreMetaBlockHeader(v90, 0, a7, a8);
      v80 = *a7;
      *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
      *a7 = v80 + 13;
      v81 = __dsta;
      v9 = v87;
      result = StoreCommands(v84, __dsta, v95, a4, v93, a7, a8);
    }
    else
    {
      v81 = __dsta;
      result = (uint64_t)EmitUncompressedMetaBlock(v11, v90, a7, a8);
    }
    v11 = v89;
    v9 -= v90;
    __dst = v81;
  }
  while (v9);
  return result;
}

unsigned int *BrotliCompressFragmentTwoPassImpl16(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, char *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unsigned int *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  unsigned int i;
  char *v25;
  unint64_t v26;
  char *v27;
  BOOL v28;
  int v29;
  char *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  char *v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  unsigned __int8 *v92;
  unint64_t v93;
  char *v95;
  char *v96;
  unsigned __int8 *v97;

  if (a3)
  {
    v9 = a3;
    v11 = result;
    v12 = __src;
    v92 = (unsigned __int8 *)__dst;
    v90 = (uint64_t)result;
    while (1)
    {
      v13 = v9 >= 0x20000 ? 0x20000 : v9;
      v14 = &v12[v13];
      v15 = (unsigned int *)a4;
      v16 = __dst;
      v17 = v12;
      v93 = v9;
      v95 = &v12[v13];
      v91 = v12;
      if (v13 >= 0x10)
        break;
LABEL_91:
      if (v17 < v14)
      {
        v76 = (_DWORD)v14 - (_DWORD)v17;
        v77 = v13;
        if (((_DWORD)v14 - (_DWORD)v17) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v78 = (v76 << 8) - 541163;
          else
            v78 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v78 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v78 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v78 = (_DWORD)v14 - (_DWORD)v17;
        }
        *v15++ = v78;
        v82 = v16;
        memcpy(v16, v17, v76);
        v16 = &v82[v76];
        v12 = v91;
        __dst = (char *)v92;
        v13 = v77;
      }
      v83 = v16 - __dst;
      v84 = v13;
      v85 = v12;
      if (ShouldCompress(v11, (uint64_t)v12, v13, v16 - __dst))
      {
        BrotliStoreMetaBlockHeader(v84, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v11 = (unsigned int *)v90;
        v9 = v93;
        result = (unsigned int *)StoreCommands(v90, v92, v83, a4, ((char *)v15 - (char *)a4) >> 2, a7, a8);
      }
      else
      {
        result = (unsigned int *)EmitUncompressedMetaBlock(v85, v84, a7, a8);
      }
      __dst = (char *)v92;
      v12 = v95;
      v9 -= v84;
      if (!v9)
        return result;
    }
    v89 = v13;
    v18 = v13 - 6;
    if (v13 - 6 >= v9 - 16)
      v18 = v9 - 16;
    v19 = &v12[v18];
    v20 = v14 - 6;
    v21 = -1;
    v15 = (unsigned int *)a4;
    v16 = __dst;
    v17 = v12;
    v96 = v14 - 6;
LABEL_10:
    v23 = v17 + 1;
    v22 = *(_QWORD *)(v17 + 1);
    for (i = 32; ; ++i)
    {
      v25 = &v23[i >> 5];
      if (v25 > v19)
      {
LABEL_90:
        __dst = (char *)v92;
        v9 = v93;
        v13 = v89;
        v11 = (unsigned int *)v90;
        v14 = v95;
        v12 = v91;
        goto LABEL_91;
      }
      v26 = (unint64_t)(0x1E35A7BD0000 * v22) >> 48;
      v22 = *(_QWORD *)v25;
      v27 = &v23[-v21];
      if (*(_DWORD *)v23 == *(_DWORD *)v27
        && v23[4] == v27[4]
        && (v23[5] == v27[5] ? (v28 = v21 < 1) : (v28 = 1), !v28))
      {
        *(_DWORD *)(a6 + 4 * v26) = (_DWORD)v23 - (_DWORD)__src;
      }
      else
      {
        v27 = &__src[*(int *)(a6 + 4 * v26)];
        *(_DWORD *)(a6 + 4 * v26) = (_DWORD)v23 - (_DWORD)__src;
        if (*(_DWORD *)v23 != *(_DWORD *)v27 || v23[4] != v27[4] || v23[5] != v27[5])
          goto LABEL_24;
      }
      v29 = (_DWORD)v23 - (_DWORD)v27;
      if (v23 - v27 <= 262128)
      {
        v30 = v27 + 6;
        v31 = (unsigned __int8 *)(v23 + 6);
        v32 = v20 - v23;
        if ((unint64_t)(v20 - v23) < 8)
        {
          v35 = (unsigned __int8 *)(v27 + 6);
          if (v32)
          {
LABEL_32:
            v36 = &v35[v32];
            while (*v35 == *v31)
            {
              ++v31;
              ++v35;
              if (!--v32)
              {
                v35 = v36;
                break;
              }
            }
          }
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = *(_QWORD *)&v30[v33] ^ *(_QWORD *)&v31[v33];
            if (v34)
            {
              v37 = (unsigned __int8 *)(v33 + (__clz(__rbit64(v34)) >> 3));
              goto LABEL_38;
            }
            v32 -= 8;
            v33 += 8;
          }
          while (v32 > 7);
          v31 += v33;
          v35 = (unsigned __int8 *)&v30[v33];
          if (v32)
            goto LABEL_32;
        }
        v37 = (unsigned __int8 *)(v35 - (unsigned __int8 *)v30);
LABEL_38:
        v38 = (_DWORD)v23 - (_DWORD)v17;
        v97 = v37;
        if (((_DWORD)v23 - (_DWORD)v17) >= 6)
        {
          if (v38 > 0x81)
          {
            if (v38 > 0x841)
            {
              if (v38 >> 1 > 0xC20)
              {
                if (v38 > 0x5841)
                  v42 = -5784041;
                else
                  v42 = -1589738;
                v39 = (v38 << 8) + v42;
              }
              else
              {
                v39 = (v38 << 8) - 541163;
              }
            }
            else
            {
              v41 = __clz(v38 - 66) ^ 0x1F;
              v39 = (v41 | (((-1 << v41) + v38 - 66) << 8)) + 10;
            }
          }
          else
          {
            v40 = (__clz(v38 - 2) ^ 0x1F) - 1;
            v39 = (((v38 - 2) >> v40) + 2 * v40 + 2) | ((v38 - 2 - ((v38 - 2) >> v40 << v40)) << 8);
          }
        }
        else
        {
          v39 = (_DWORD)v23 - (_DWORD)v17;
        }
        *v15 = v39;
        v43 = v16;
        memcpy(v16, v17, (int)v38);
        if (v21 == v29)
        {
          v44 = 64;
        }
        else
        {
          v45 = __clz(v29 + 3) ^ 0x1F;
          v44 = (((v29 + 3 - ((((v29 + 3) >> (v45 - 1)) & 1 | 2) << (v45 - 1))) << 8) | (2 * v45) | ((v29 + 3) >> (v45 - 1)) & 1)
              + 76;
          v21 = v29;
        }
        v46 = (unint64_t)(v97 + 6);
        v15[1] = v44;
        if ((unint64_t)(v97 + 6) > 0xB)
        {
          if (v46 > 0x47)
          {
            if (v46 > 0x87)
            {
              if (v46 > 0x847)
              {
                v49 = ((_DWORD)v46 << 8) - 542657;
              }
              else
              {
                v50 = __clz((_DWORD)v97 - 66) ^ 0x1F;
                v49 = (v50 | (((-1 << v50) + (_DWORD)v97 - 66) << 8)) + 52;
              }
            }
            else
            {
              v49 = (((unint64_t)(v97 - 2) >> 5) + 54) | ((((_BYTE)v97 - 2) & 0x1F) << 8);
            }
            v15[2] = v49;
            v15[3] = 64;
            v47 = 4;
          }
          else
          {
            v48 = (__clz((_DWORD)v97 - 2) ^ 0x1F) - 1;
            v15[2] = (((unint64_t)(v97 - 2) >> v48) + 2 * v48 + 28) | (((_DWORD)v97
                                                                             - 2
                                                                             - ((unint64_t)(v97 - 2) >> v48 << v48)) << 8);
            v47 = 3;
          }
        }
        else
        {
          v15[2] = (_DWORD)v97 + 26;
          v47 = 3;
        }
        v17 = &v23[v46];
        v16 = &v43[v38];
        v15 += v47;
        if (&v23[v46] < v19)
        {
          v51 = *(_QWORD *)(v17 - 5);
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v51) >> 46) & 0x3FFFC)) = (_DWORD)v17
                                                                                           - (_DWORD)__src
                                                                                           - 5;
          *(_DWORD *)(a6 + (((506832829 * ((v51 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v17 - (_DWORD)__src - 4;
          *(_DWORD *)(a6 + (((506832829 * (v51 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v17
                                                                                           - (_DWORD)__src
                                                                                           - 3;
          v52 = *(_QWORD *)(v17 - 2);
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v52) >> 46) & 0x3FFFC)) = (_DWORD)v17
                                                                                           - (_DWORD)__src
                                                                                           - 2;
          *(_DWORD *)(a6 + (((506832829 * ((v52 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v17 - (_DWORD)__src - 1;
          v53 = ((506832829 * (v52 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC;
          v54 = *(int *)(a6 + v53);
          *(_DWORD *)(a6 + v53) = (_DWORD)v17 - (_DWORD)__src;
          v55 = &__src[v54];
          v56 = (_DWORD)v17 - (_DWORD)v55;
          v20 = v96;
          if (v17 - v55 < 262129)
          {
            while (*(_DWORD *)v17 == *(_DWORD *)v55 && v17[4] == v55[4] && v17[5] == v55[5])
            {
              v57 = v55 + 6;
              v58 = (unsigned __int8 *)(v17 + 6);
              v59 = v96 - v17;
              if ((unint64_t)(v96 - v17) < 8)
              {
                v62 = (unsigned __int8 *)v57;
                if (v59)
                {
LABEL_75:
                  v63 = &v62[v59];
                  while (*v62 == *v58)
                  {
                    ++v58;
                    ++v62;
                    if (!--v59)
                    {
                      v62 = v63;
                      break;
                    }
                  }
                }
              }
              else
              {
                v60 = 0;
                do
                {
                  v61 = *(_QWORD *)&v57[v60] ^ *(_QWORD *)&v58[v60];
                  if (v61)
                  {
                    v64 = v60 + (__clz(__rbit64(v61)) >> 3);
                    goto LABEL_81;
                  }
                  v59 -= 8;
                  v60 += 8;
                }
                while (v59 > 7);
                v58 += v60;
                v62 = (unsigned __int8 *)&v57[v60];
                if (v59)
                  goto LABEL_75;
              }
              v64 = v62 - (unsigned __int8 *)v57;
LABEL_81:
              v65 = v64 + 6;
              if (v64 + 6 > 9)
              {
                v67 = ((_DWORD)v65 << 8) - 542145;
                v68 = __clz(v64 - 64) ^ 0x1F;
                if (v65 <= 0x845)
                  v67 = (v68 | (((-1 << v68) + (_DWORD)v64 - 64) << 8)) + 52;
                v69 = (__clz(v64) ^ 0x1F) - 1;
                v66 = ((v64 >> v69) + 2 * v69 + 44) | (((_DWORD)v64 - (v64 >> v69 << v69)) << 8);
                if (v65 > 0x85)
                  v66 = v67;
              }
              else
              {
                v66 = v64 + 44;
              }
              v17 += v65;
              v21 = v56;
              v70 = v56 + 3;
              v71 = __clz(v70);
              *v15 = v66;
              v15[1] = (((v70 - (((v70 >> ((v71 ^ 0x1F) - 1)) & 1 | 2) << ((v71 ^ 0x1F) - 1))) << 8) | (2 * (v71 ^ 0x1F)) | (v70 >> ((v71 ^ 0x1F) - 1)) & 1)
                     + 76;
              v15 += 2;
              if (v17 >= v19)
                goto LABEL_90;
              v72 = *(_QWORD *)(v17 - 5);
              *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v72) >> 46) & 0x3FFFC)) = (_DWORD)v17
                                                                                               - (_DWORD)__src
                                                                                               - 5;
              *(_DWORD *)(a6 + (((506832829 * ((v72 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v17 - (_DWORD)__src - 4;
              *(_DWORD *)(a6 + (((506832829 * (v72 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v17
                                                                                               - (_DWORD)__src
                                                                                               - 3;
              v73 = *(_QWORD *)(v17 - 2);
              *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v73) >> 46) & 0x3FFFC)) = (_DWORD)v17
                                                                                               - (_DWORD)__src
                                                                                               - 2;
              *(_DWORD *)(a6 + (((506832829 * ((v73 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v17 - (_DWORD)__src - 1;
              v74 = ((506832829 * (v73 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC;
              v75 = *(int *)(a6 + v74);
              *(_DWORD *)(a6 + v74) = (_DWORD)v17 - (_DWORD)__src;
              v55 = &__src[v75];
              v56 = (_DWORD)v17 - (_DWORD)v55;
              if (v17 - v55 >= 262129)
                goto LABEL_10;
            }
          }
          goto LABEL_10;
        }
        goto LABEL_90;
      }
LABEL_24:
      v23 = v25;
    }
  }
  return result;
}

unsigned int *BrotliCompressFragmentTwoPassImpl17(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, char *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unsigned int *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  unsigned int i;
  char *v25;
  unint64_t v26;
  char *v27;
  BOOL v28;
  int v29;
  char *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  char *v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  unsigned __int8 *v92;
  unint64_t v93;
  char *v95;
  char *v96;
  unsigned __int8 *v97;

  if (a3)
  {
    v9 = a3;
    v11 = result;
    v12 = __src;
    v92 = (unsigned __int8 *)__dst;
    v90 = (uint64_t)result;
    while (1)
    {
      v13 = v9 >= 0x20000 ? 0x20000 : v9;
      v14 = &v12[v13];
      v15 = (unsigned int *)a4;
      v16 = __dst;
      v17 = v12;
      v93 = v9;
      v95 = &v12[v13];
      v91 = v12;
      if (v13 >= 0x10)
        break;
LABEL_91:
      if (v17 < v14)
      {
        v76 = (_DWORD)v14 - (_DWORD)v17;
        v77 = v13;
        if (((_DWORD)v14 - (_DWORD)v17) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v78 = (v76 << 8) - 541163;
          else
            v78 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v78 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v78 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v78 = (_DWORD)v14 - (_DWORD)v17;
        }
        *v15++ = v78;
        v82 = v16;
        memcpy(v16, v17, v76);
        v16 = &v82[v76];
        v12 = v91;
        __dst = (char *)v92;
        v13 = v77;
      }
      v83 = v16 - __dst;
      v84 = v13;
      v85 = v12;
      if (ShouldCompress(v11, (uint64_t)v12, v13, v16 - __dst))
      {
        BrotliStoreMetaBlockHeader(v84, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v11 = (unsigned int *)v90;
        v9 = v93;
        result = (unsigned int *)StoreCommands(v90, v92, v83, a4, ((char *)v15 - (char *)a4) >> 2, a7, a8);
      }
      else
      {
        result = (unsigned int *)EmitUncompressedMetaBlock(v85, v84, a7, a8);
      }
      __dst = (char *)v92;
      v12 = v95;
      v9 -= v84;
      if (!v9)
        return result;
    }
    v89 = v13;
    v18 = v13 - 6;
    if (v13 - 6 >= v9 - 16)
      v18 = v9 - 16;
    v19 = &v12[v18];
    v20 = v14 - 6;
    v21 = -1;
    v15 = (unsigned int *)a4;
    v16 = __dst;
    v17 = v12;
    v96 = v14 - 6;
LABEL_10:
    v23 = v17 + 1;
    v22 = *(_QWORD *)(v17 + 1);
    for (i = 32; ; ++i)
    {
      v25 = &v23[i >> 5];
      if (v25 > v19)
      {
LABEL_90:
        __dst = (char *)v92;
        v9 = v93;
        v13 = v89;
        v11 = (unsigned int *)v90;
        v14 = v95;
        v12 = v91;
        goto LABEL_91;
      }
      v26 = (unint64_t)(0x1E35A7BD0000 * v22) >> 47;
      v22 = *(_QWORD *)v25;
      v27 = &v23[-v21];
      if (*(_DWORD *)v23 == *(_DWORD *)v27
        && v23[4] == v27[4]
        && (v23[5] == v27[5] ? (v28 = v21 < 1) : (v28 = 1), !v28))
      {
        *(_DWORD *)(a6 + 4 * v26) = (_DWORD)v23 - (_DWORD)__src;
      }
      else
      {
        v27 = &__src[*(int *)(a6 + 4 * v26)];
        *(_DWORD *)(a6 + 4 * v26) = (_DWORD)v23 - (_DWORD)__src;
        if (*(_DWORD *)v23 != *(_DWORD *)v27 || v23[4] != v27[4] || v23[5] != v27[5])
          goto LABEL_24;
      }
      v29 = (_DWORD)v23 - (_DWORD)v27;
      if (v23 - v27 <= 262128)
      {
        v30 = v27 + 6;
        v31 = (unsigned __int8 *)(v23 + 6);
        v32 = v20 - v23;
        if ((unint64_t)(v20 - v23) < 8)
        {
          v35 = (unsigned __int8 *)(v27 + 6);
          if (v32)
          {
LABEL_32:
            v36 = &v35[v32];
            while (*v35 == *v31)
            {
              ++v31;
              ++v35;
              if (!--v32)
              {
                v35 = v36;
                break;
              }
            }
          }
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = *(_QWORD *)&v30[v33] ^ *(_QWORD *)&v31[v33];
            if (v34)
            {
              v37 = (unsigned __int8 *)(v33 + (__clz(__rbit64(v34)) >> 3));
              goto LABEL_38;
            }
            v32 -= 8;
            v33 += 8;
          }
          while (v32 > 7);
          v31 += v33;
          v35 = (unsigned __int8 *)&v30[v33];
          if (v32)
            goto LABEL_32;
        }
        v37 = (unsigned __int8 *)(v35 - (unsigned __int8 *)v30);
LABEL_38:
        v38 = (_DWORD)v23 - (_DWORD)v17;
        v97 = v37;
        if (((_DWORD)v23 - (_DWORD)v17) >= 6)
        {
          if (v38 > 0x81)
          {
            if (v38 > 0x841)
            {
              if (v38 >> 1 > 0xC20)
              {
                if (v38 > 0x5841)
                  v42 = -5784041;
                else
                  v42 = -1589738;
                v39 = (v38 << 8) + v42;
              }
              else
              {
                v39 = (v38 << 8) - 541163;
              }
            }
            else
            {
              v41 = __clz(v38 - 66) ^ 0x1F;
              v39 = (v41 | (((-1 << v41) + v38 - 66) << 8)) + 10;
            }
          }
          else
          {
            v40 = (__clz(v38 - 2) ^ 0x1F) - 1;
            v39 = (((v38 - 2) >> v40) + 2 * v40 + 2) | ((v38 - 2 - ((v38 - 2) >> v40 << v40)) << 8);
          }
        }
        else
        {
          v39 = (_DWORD)v23 - (_DWORD)v17;
        }
        *v15 = v39;
        v43 = v16;
        memcpy(v16, v17, (int)v38);
        if (v21 == v29)
        {
          v44 = 64;
        }
        else
        {
          v45 = __clz(v29 + 3) ^ 0x1F;
          v44 = (((v29 + 3 - ((((v29 + 3) >> (v45 - 1)) & 1 | 2) << (v45 - 1))) << 8) | (2 * v45) | ((v29 + 3) >> (v45 - 1)) & 1)
              + 76;
          v21 = v29;
        }
        v46 = (unint64_t)(v97 + 6);
        v15[1] = v44;
        if ((unint64_t)(v97 + 6) > 0xB)
        {
          if (v46 > 0x47)
          {
            if (v46 > 0x87)
            {
              if (v46 > 0x847)
              {
                v49 = ((_DWORD)v46 << 8) - 542657;
              }
              else
              {
                v50 = __clz((_DWORD)v97 - 66) ^ 0x1F;
                v49 = (v50 | (((-1 << v50) + (_DWORD)v97 - 66) << 8)) + 52;
              }
            }
            else
            {
              v49 = (((unint64_t)(v97 - 2) >> 5) + 54) | ((((_BYTE)v97 - 2) & 0x1F) << 8);
            }
            v15[2] = v49;
            v15[3] = 64;
            v47 = 4;
          }
          else
          {
            v48 = (__clz((_DWORD)v97 - 2) ^ 0x1F) - 1;
            v15[2] = (((unint64_t)(v97 - 2) >> v48) + 2 * v48 + 28) | (((_DWORD)v97
                                                                             - 2
                                                                             - ((unint64_t)(v97 - 2) >> v48 << v48)) << 8);
            v47 = 3;
          }
        }
        else
        {
          v15[2] = (_DWORD)v97 + 26;
          v47 = 3;
        }
        v17 = &v23[v46];
        v16 = &v43[v38];
        v15 += v47;
        if (&v23[v46] < v19)
        {
          v51 = *(_QWORD *)(v17 - 5);
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v51) >> 45) & 0x7FFFC)) = (_DWORD)v17
                                                                                           - (_DWORD)__src
                                                                                           - 5;
          *(_DWORD *)(a6 + (((506832829 * ((v51 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v17 - (_DWORD)__src - 4;
          *(_DWORD *)(a6 + (((506832829 * (v51 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v17
                                                                                           - (_DWORD)__src
                                                                                           - 3;
          v52 = *(_QWORD *)(v17 - 2);
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v52) >> 45) & 0x7FFFC)) = (_DWORD)v17
                                                                                           - (_DWORD)__src
                                                                                           - 2;
          *(_DWORD *)(a6 + (((506832829 * ((v52 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v17 - (_DWORD)__src - 1;
          v53 = ((506832829 * (v52 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC;
          v54 = *(int *)(a6 + v53);
          *(_DWORD *)(a6 + v53) = (_DWORD)v17 - (_DWORD)__src;
          v55 = &__src[v54];
          v56 = (_DWORD)v17 - (_DWORD)v55;
          v20 = v96;
          if (v17 - v55 < 262129)
          {
            while (*(_DWORD *)v17 == *(_DWORD *)v55 && v17[4] == v55[4] && v17[5] == v55[5])
            {
              v57 = v55 + 6;
              v58 = (unsigned __int8 *)(v17 + 6);
              v59 = v96 - v17;
              if ((unint64_t)(v96 - v17) < 8)
              {
                v62 = (unsigned __int8 *)v57;
                if (v59)
                {
LABEL_75:
                  v63 = &v62[v59];
                  while (*v62 == *v58)
                  {
                    ++v58;
                    ++v62;
                    if (!--v59)
                    {
                      v62 = v63;
                      break;
                    }
                  }
                }
              }
              else
              {
                v60 = 0;
                do
                {
                  v61 = *(_QWORD *)&v57[v60] ^ *(_QWORD *)&v58[v60];
                  if (v61)
                  {
                    v64 = v60 + (__clz(__rbit64(v61)) >> 3);
                    goto LABEL_81;
                  }
                  v59 -= 8;
                  v60 += 8;
                }
                while (v59 > 7);
                v58 += v60;
                v62 = (unsigned __int8 *)&v57[v60];
                if (v59)
                  goto LABEL_75;
              }
              v64 = v62 - (unsigned __int8 *)v57;
LABEL_81:
              v65 = v64 + 6;
              if (v64 + 6 > 9)
              {
                v67 = ((_DWORD)v65 << 8) - 542145;
                v68 = __clz(v64 - 64) ^ 0x1F;
                if (v65 <= 0x845)
                  v67 = (v68 | (((-1 << v68) + (_DWORD)v64 - 64) << 8)) + 52;
                v69 = (__clz(v64) ^ 0x1F) - 1;
                v66 = ((v64 >> v69) + 2 * v69 + 44) | (((_DWORD)v64 - (v64 >> v69 << v69)) << 8);
                if (v65 > 0x85)
                  v66 = v67;
              }
              else
              {
                v66 = v64 + 44;
              }
              v17 += v65;
              v21 = v56;
              v70 = v56 + 3;
              v71 = __clz(v70);
              *v15 = v66;
              v15[1] = (((v70 - (((v70 >> ((v71 ^ 0x1F) - 1)) & 1 | 2) << ((v71 ^ 0x1F) - 1))) << 8) | (2 * (v71 ^ 0x1F)) | (v70 >> ((v71 ^ 0x1F) - 1)) & 1)
                     + 76;
              v15 += 2;
              if (v17 >= v19)
                goto LABEL_90;
              v72 = *(_QWORD *)(v17 - 5);
              *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v72) >> 45) & 0x7FFFC)) = (_DWORD)v17
                                                                                               - (_DWORD)__src
                                                                                               - 5;
              *(_DWORD *)(a6 + (((506832829 * ((v72 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v17 - (_DWORD)__src - 4;
              *(_DWORD *)(a6 + (((506832829 * (v72 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v17
                                                                                               - (_DWORD)__src
                                                                                               - 3;
              v73 = *(_QWORD *)(v17 - 2);
              *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v73) >> 45) & 0x7FFFC)) = (_DWORD)v17
                                                                                               - (_DWORD)__src
                                                                                               - 2;
              *(_DWORD *)(a6 + (((506832829 * ((v73 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v17 - (_DWORD)__src - 1;
              v74 = ((506832829 * (v73 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC;
              v75 = *(int *)(a6 + v74);
              *(_DWORD *)(a6 + v74) = (_DWORD)v17 - (_DWORD)__src;
              v55 = &__src[v75];
              v56 = (_DWORD)v17 - (_DWORD)v55;
              if (v17 - v55 >= 262129)
                goto LABEL_10;
            }
          }
          goto LABEL_10;
        }
        goto LABEL_90;
      }
LABEL_24:
      v23 = v25;
    }
  }
  return result;
}

void *EmitUncompressedMetaBlock(const void *a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  void *result;
  unint64_t v10;

  BrotliStoreMetaBlockHeader(a2, 1u, a3, a4);
  v8 = (*(_DWORD *)a3 + 7) & 0xFFFFFFF8;
  *a3 = v8;
  result = memcpy((void *)(a4 + (v8 >> 3)), a1, a2);
  v10 = *a3 + 8 * a2;
  *a3 = v10;
  *(_BYTE *)(a4 + (v10 >> 3)) = 0;
  return result;
}

BOOL ShouldCompress(unsigned int *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;

  if ((double)a3 * 0.98 > (double)a4)
    return 1;
  v8 = (double)a3 * 8.0 * 0.98;
  bzero(a1, 0x400uLL);
  if (a3)
  {
    v9 = 0;
    do
    {
      ++a1[*(unsigned __int8 *)(a2 + v9)];
      v9 += 43;
    }
    while (v9 < a3);
  }
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
  v13 = v8 / 43.0;
  do
  {
    v14 = a1[v11];
    if (v14 > 0xFF)
    {
      v16 = (double)v14;
      v15 = log2((double)v14);
    }
    else
    {
      v15 = kBrotliLog2Table[v14];
      v16 = (double)v14;
    }
    v17 = a1[v11 + 1];
    if (v17 > 0xFF)
      v18 = log2((double)v17);
    else
      v18 = kBrotliLog2Table[v17];
    v11 += 2;
    v10 += v14 + v17;
    v12 = v12 - v16 * v15 - (double)v17 * v18;
  }
  while ((unint64_t)(v11 - 2) < 0xFE);
  v19 = (double)v10;
  if (v10)
  {
    if (v10 > 0xFF)
      v20 = log2((double)v10);
    else
      v20 = kBrotliLog2Table[v10];
    v12 = v12 + v19 * v20;
  }
  if (v12 >= v19)
    v21 = v12;
  else
    v21 = (double)v10;
  return v21 < v13;
}

unint64_t BrotliStoreMetaBlockHeader(unint64_t result, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a3;
  *(_QWORD *)(a4 + (*a3 >> 3)) = *(unsigned __int8 *)(a4 + (*a3 >> 3));
  *a3 = v4 + 1;
  v5 = 5;
  if (result >= 0x100001)
    v5 = 6;
  if (result <= 0x10000)
    v5 = 4;
  *(_QWORD *)(a4 + ((v4 + 1) >> 3)) = ((v5 - 4) << ((v4 + 1) & 7)) | *(unsigned __int8 *)(a4 + ((v4 + 1) >> 3));
  v6 = v4 + 3;
  *a3 = v6;
  *(_QWORD *)(a4 + (v6 >> 3)) = ((result - 1) << (v6 & 7)) | *(unsigned __int8 *)(a4 + (v6 >> 3));
  v7 = v6 + 4 * v5;
  *a3 = v7;
  *(_QWORD *)(a4 + (v7 >> 3)) = ((unint64_t)a2 << (v7 & 7)) | *(unsigned __int8 *)(a4 + (v7 >> 3));
  *a3 = v7 + 1;
  return result;
}

unint64_t StoreCommands(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t result;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int i;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;

  bzero((void *)a1, 0x400uLL);
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  if (a3)
  {
    v14 = a2;
    v15 = a3;
    do
    {
      v16 = *v14++;
      ++*(_DWORD *)(a1 + 4 * v16);
      --v15;
    }
    while (v15);
  }
  v17 = (_BYTE *)(a1 + 6920);
  v40 = a1 + 2688;
  BrotliBuildAndStoreHuffmanTreeFast(a1 + 2688, a1, a3, 8, (_BYTE *)(a1 + 1024), a1 + 1280, a6, a7);
  if (a5)
  {
    v18 = a4;
    v19 = a5;
    do
    {
      v20 = *v18;
      v18 += 4;
      ++*(_DWORD *)(a1 + 4 * v20 + 1792);
      --v19;
    }
    while (v19);
  }
  *(int32x2_t *)(a1 + 1796) = vadd_s32(*(int32x2_t *)(a1 + 1796), (int32x2_t)0x100000001);
  ++*(_DWORD *)(a1 + 2048);
  ++*(_DWORD *)(a1 + 2128);
  bzero((void *)(a1 + 6792), 0x2C0uLL);
  BrotliCreateHuffmanTree(a1 + 1792, 64, 15, v40, a1 + 2304);
  v21 = a1 + 2304;
  BrotliCreateHuffmanTree(a1 + 2048, 64, 14, v40, a1 + 2368);
  v22 = *(_OWORD *)(a1 + 2328);
  *(_QWORD *)(a1 + 6808) = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 6816) = *(_QWORD *)(a1 + 2304);
  *(_QWORD *)(a1 + 6824) = *(_QWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 6832) = *(_QWORD *)(a1 + 2312);
  *(_QWORD *)(a1 + 6840) = *(_QWORD *)(a1 + 2360);
  *(_QWORD *)(a1 + 6848) = *(_QWORD *)(a1 + 2320);
  *(_OWORD *)(a1 + 6792) = v22;
  BrotliConvertBitDepthsToSymbols((unsigned __int8 *)(a1 + 6792), 64, a1 + 7496);
  v23 = *(_OWORD *)(a1 + 7528);
  *(_OWORD *)(a1 + 2432) = *(_OWORD *)(a1 + 7544);
  v24 = *(_OWORD *)(a1 + 7560);
  *(_OWORD *)(a1 + 2448) = *(_OWORD *)(a1 + 7576);
  v25 = *(_OWORD *)(a1 + 7592);
  *(_OWORD *)(a1 + 2464) = *(_OWORD *)(a1 + 7608);
  v26 = *(_OWORD *)(a1 + 7512);
  *(_OWORD *)(a1 + 2480) = *(_OWORD *)(a1 + 7496);
  *(_OWORD *)(a1 + 2496) = v26;
  *(_OWORD *)(a1 + 2512) = v23;
  *(_OWORD *)(a1 + 2528) = v24;
  *(_OWORD *)(a1 + 2544) = v25;
  BrotliConvertBitDepthsToSymbols((unsigned __int8 *)(a1 + 2368), 64, a1 + 2560);
  v27 = 0;
  *(_OWORD *)(a1 + 6792) = 0u;
  *(_OWORD *)(a1 + 6808) = 0u;
  *(_QWORD *)(a1 + 6792) = *(_QWORD *)(a1 + 2328);
  *(_QWORD *)(a1 + 6856) = *(_QWORD *)(a1 + 2336);
  *(_QWORD *)(a1 + 6920) = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 6984) = *(_QWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 7176) = *(_QWORD *)(a1 + 2360);
  *(_OWORD *)(a1 + 6824) = 0u;
  *(_OWORD *)(a1 + 6840) = 0u;
  do
  {
    *v17 = *(_BYTE *)(v21 + v27);
    v17[128] = *(_BYTE *)(v21 + v27 + 8);
    v17[320] = *(_BYTE *)(v21 + v27++ + 16);
    v17 += 8;
  }
  while (v27 != 8);
  BrotliStoreHuffmanTree(a1 + 6792, 0x2C0uLL, v40, a6, a7);
  result = BrotliStoreHuffmanTree(a1 + 2368, 0x40uLL, v40, a6, a7);
  if (a5)
  {
    v29 = 0;
    v30 = *a6;
    do
    {
      v31 = *(unsigned int *)&a4[4 * v29];
      v32 = *(_DWORD *)&a4[4 * v29];
      v33 = v31 >> 8;
      v34 = *(unsigned __int8 *)(a1 + v31 + 2304);
      result = v30 & 7;
      *(_QWORD *)(a7 + (v30 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 2 * v31 + 2432) << (v30 & 7)) | *(unsigned __int8 *)(a7 + (v30 >> 3));
      v35 = v30 + v34;
      v36 = StoreCommands_kNumExtraBits[v32];
      *a6 = v35;
      *(_QWORD *)(a7 + (v35 >> 3)) = (v33 << (v35 & 7)) | *(unsigned __int8 *)(a7 + (v35 >> 3));
      v30 = v35 + v36;
      *a6 = v30;
      if (v32 <= 0x17)
      {
        for (i = StoreCommands_kInsertOffset[v32] + v33; i; --i)
        {
          v38 = *a2++;
          v39 = *(unsigned __int8 *)(a1 + v38 + 1024);
          *(_QWORD *)(a7 + (v30 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 2 * v38 + 1280) << (v30 & 7)) | *(unsigned __int8 *)(a7 + (v30 >> 3));
          v30 += v39;
          *a6 = v30;
        }
      }
      ++v29;
    }
    while (v29 != a5);
  }
  return result;
}

_QWORD *BrotliSharedDictionaryDestroyInstance(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD *);

  if (result)
  {
    v1 = result;
    v3 = (uint64_t (*)(uint64_t, _QWORD *))result[174];
    v2 = result[175];
    v3(v2, (_QWORD *)result[169]);
    v3(v2, (_QWORD *)v1[171]);
    v3(v2, (_QWORD *)v1[172]);
    return (_QWORD *)v3(v2, v1);
  }
  return result;
}

uint64_t BrotliSharedDictionaryAttach(_DWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v4 = 0;
  if (a1 && !a2)
  {
    v5 = *a1;
    if (v5 <= 0xE)
    {
      v6 = &a1[2 * v5];
      *((_QWORD *)v6 + 1) = a3;
      *((_QWORD *)v6 + 16) = a4;
      *a1 = v5 + 1;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

_DWORD *BrotliSharedDictionaryCreateInstance(void *(*a1)(int a1, size_t size), void (*a2)(int a1, void *a2), uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  void *(*v8)(int, size_t);
  void (*v9)(int, void *);

  if ((unint64_t)a1 | (unint64_t)a2)
  {
    v6 = 0;
    if (!a1 || !a2)
      return v6;
    v7 = (_DWORD *)a1(a3, 1408);
  }
  else
  {
    v7 = malloc_type_malloc(0x580uLL, 0x10F00400AFAC3FDuLL);
  }
  v6 = v7;
  if (v7)
  {
    bzero(v7, 0x580uLL);
    v6[62] = 0;
    *((_BYTE *)v6 + 316) = 1;
    *((_BYTE *)v6 + 1344) = 0;
    *((_BYTE *)v6 + 1360) = 0;
    *((_QWORD *)v6 + 40) = BrotliGetDictionary();
    *((_QWORD *)v6 + 104) = BrotliGetTransforms();
    v8 = BrotliDefaultAllocFunc;
    if (a1)
      v8 = a1;
    *((_QWORD *)v6 + 173) = v8;
    v9 = BrotliDefaultFreeFunc;
    if (a2)
      v9 = a2;
    *((_QWORD *)v6 + 174) = v9;
    *((_QWORD *)v6 + 175) = a3;
  }
  return v6;
}

id JEMetricsOSLog()
{
  if (JEMetricsOSLog_onceToken != -1)
    dispatch_once(&JEMetricsOSLog_onceToken, &__block_literal_global);
  return (id)JEDefaultMetricsOSLog;
}

_QWORD *BrotliInitBitReader(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

uint64_t BrotliWarmupBitReader(_QWORD *a1)
{
  unsigned __int8 *v1;

  if (a1[1])
    return 1;
  *a1 = 0;
  v1 = (unsigned __int8 *)a1[2];
  if (v1 != (unsigned __int8 *)a1[4])
  {
    *a1 = *v1;
    a1[1] = 8;
    a1[2] = v1 + 1;
    return 1;
  }
  return 0;
}

void *BrotliGetTransforms()
{
  return &kBrotliTransforms;
}

uint64_t BrotliTransformDictionaryWord(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  char *v25;
  __int16 v26;
  int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  char *v31;
  char v32;

  v5 = a3;
  v8 = a4[1];
  v7 = a4[2];
  v9 = a4[4];
  v10 = 3 * a5;
  v11 = *(unsigned __int16 *)(v7 + 2 * *(unsigned __int8 *)(v9 + v10));
  v12 = v9 + (int)v10;
  v13 = *(unsigned __int8 *)(v12 + 1);
  v14 = *(unsigned __int16 *)(v7 + 2 * *(unsigned __int8 *)(v12 + 2));
  v15 = *(unsigned __int8 *)(v8 + v11);
  if (*(_BYTE *)(v8 + v11))
  {
    v16 = 0;
    v17 = v11 + v8 + 1;
    do
    {
      *(_BYTE *)(a1 + v16) = *(_BYTE *)(v17 + v16);
      ++v16;
    }
    while (v15 != (_DWORD)v16);
  }
  else
  {
    v16 = 0;
  }
  if (v13 > 9)
  {
    if ((v13 - 12) <= 8)
    {
      v18 = (v13 - 11);
      a2 += v18;
      v5 = (a3 - v18);
    }
  }
  else
  {
    v5 = (a3 - v13);
  }
  if ((int)v5 >= 1)
  {
    v16 = v16;
    v19 = v5;
    do
    {
      v20 = *a2++;
      *(_BYTE *)(a1 + v16++) = v20;
      --v19;
    }
    while (v19);
  }
  if (v13 > 20)
  {
    if (v13 == 21)
    {
      Shift((char *)(a1 - (int)v5 + (int)v16), v5, *(unsigned __int8 *)(a4[5] + 2 * a5) | (*(unsigned __int8 *)(a4[5] + 2 * a5 + 1) << 8));
    }
    else if (v13 == 22 && (int)v5 >= 1)
    {
      v25 = (char *)(a1 - (int)v5 + (int)v16);
      v26 = *(unsigned __int8 *)(a4[5] + 2 * a5) | (*(unsigned __int8 *)(a4[5] + 2 * a5 + 1) << 8);
      do
      {
        v27 = Shift(v25, v5, v26);
        v25 += v27;
        v24 = __OFSUB__((_DWORD)v5, v27);
        v5 = (v5 - v27);
      }
      while (!(((int)v5 < 0) ^ v24 | ((_DWORD)v5 == 0)));
    }
  }
  else if (v13 == 10)
  {
    v28 = (unsigned __int8 *)(a1 - (int)v5 + (int)v16);
    v29 = *v28;
    if (v29 > 0xBF)
    {
      if (v29 > 0xDF)
        v28[2] ^= 5u;
      else
        v28[1] ^= 0x20u;
    }
    else if (v29 - 97 <= 0x19)
    {
      *v28 = v29 ^ 0x20;
    }
  }
  else if (v13 == 11 && (int)v5 >= 1)
  {
    v21 = (unsigned __int8 *)(a1 - (int)v5 + (int)v16);
    do
    {
      v22 = *v21;
      if (v22 > 0xBF)
      {
        if (v22 > 0xDF)
        {
          v21[2] ^= 5u;
          v23 = 3;
        }
        else
        {
          v21[1] ^= 0x20u;
          v23 = 2;
        }
      }
      else
      {
        if (v22 - 97 <= 0x19)
          *v21 = v22 ^ 0x20;
        v23 = 1;
      }
      v21 += v23;
      v24 = __OFSUB__((_DWORD)v5, v23);
      LODWORD(v5) = v5 - v23;
    }
    while (!(((int)v5 < 0) ^ v24 | ((_DWORD)v5 == 0)));
  }
  v30 = *(unsigned __int8 *)(v8 + v14);
  if (*(_BYTE *)(v8 + v14))
  {
    v16 = v16;
    v31 = (char *)(v14 + v8 + 1);
    do
    {
      v32 = *v31++;
      *(_BYTE *)(a1 + v16++) = v32;
      --v30;
    }
    while (v30);
  }
  return v16;
}

uint64_t Shift(char *a1, uint64_t a2, __int16 a3)
{
  unsigned int v3;
  int v4;
  unsigned __int8 v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    *a1 = (v3 + a3) & 0x7F;
    return 1;
  }
  if (v3 < 0xC0)
    return 1;
  v4 = (a3 & 0x7FFF) - (a3 & 0x8000) + 0x1000000;
  if (v3 > 0xDF)
  {
    if (v3 > 0xEF)
    {
      if (v3 > 0xF7)
        return 1;
      if ((int)a2 >= 4)
      {
        v10 = a1[3];
        v11 = a1[2];
        v12 = a1[1];
        v13 = ((v3 & 7) << 18) + v4 + (v10 & 0x3F);
        v14 = v13 + ((v11 & 0x3F) << 6);
        v15 = v14 + ((v12 & 0x3F) << 12);
        *a1 = (v15 >> 18) & 7 | 0xF0;
        a1[1] = v12 & 0xC0 | (v15 >> 12) & 0x3F;
        a1[2] = v11 & 0xC0 | (v14 >> 6) & 0x3F;
        a1[3] = v10 & 0xC0 | v13 & 0x3F;
        return 4;
      }
    }
    else if ((int)a2 >= 3)
    {
      v7 = a1[2];
      v8 = a1[1];
      v9 = ((v3 & 0xF) << 12) + v4 + (v7 & 0x3F);
      *a1 = ((unsigned __int16)(v9 + ((v8 & 0x3F) << 6)) >> 12) | 0xE0;
      a1[1] = v8 & 0xC0 | ((v9 + ((v8 & 0x3Fu) << 6)) >> 6) & 0x3F;
      a1[2] = v7 & 0xC0 | v9 & 0x3F;
      return 3;
    }
  }
  else
  {
    if ((int)a2 < 2)
      return 1;
    v5 = a1[1];
    v6 = (v5 & 0x3F | ((v3 & 0x1F) << 6)) + v4;
    *a1 = (v6 >> 6) & 0x1F | 0xC0;
    a1[1] = v5 & 0xC0 | v6 & 0x3F;
    return 2;
  }
  return a2;
}

void *(**BrotliInitMemoryManager(void *(**result)(int a1, size_t size), void *(*a2)(int a1, size_t size), void (*a3)(int a1, void *a2), void *(*a4)(int a1, size_t size)))(int a1, size_t size)
{
  void *(*v4)(int, size_t);
  void (*v5)(int, void *);

  v4 = BrotliDefaultAllocFunc;
  v5 = BrotliDefaultFreeFunc;
  if (a2)
  {
    v4 = a2;
    v5 = a3;
  }
  else
  {
    a4 = 0;
  }
  *result = v4;
  result[1] = (void *(*)(int, size_t))v5;
  result[2] = a4;
  return result;
}

uint64_t BrotliAllocate(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 16));
  if (!result)
    exit(1);
  return result;
}

uint64_t BrotliFree(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

void *BrotliBootstrapAlloc(size_t size, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(a2 | a3))
    return malloc_type_malloc(size, 0x5E051B13uLL);
  if (a2 && a3)
    return (void *)((uint64_t (*)(uint64_t, size_t))a2)(a4, size);
  return 0;
}

uint64_t BrotliBootstrapFree(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 8))(*(_QWORD *)(a2 + 16), result);
  return result;
}

uint64_t BrotliSetDepth(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _DWORD v8[16];
  uint64_t v9;

  LODWORD(v4) = 0;
  v9 = *MEMORY[0x1E0C80C00];
  v8[0] = -1;
  while (1)
  {
    while (1)
    {
      v5 = a1;
      if ((*(__int16 *)(a2 + 8 * a1 + 4) & 0x80000000) == 0)
        break;
      *(_BYTE *)(a3 + *(__int16 *)(a2 + 8 * a1 + 6)) = v4;
      if ((v4 & 0x80000000) != 0)
        return 1;
      while (1)
      {
        a1 = v8[v4];
        if (a1 != -1)
          break;
        v6 = (int)v4 <= 0;
        LODWORD(v4) = v4 - 1;
        if (v6)
          return 1;
      }
      v8[v4] = -1;
    }
    if ((int)v4 >= a4)
      break;
    a1 = *(unsigned __int16 *)(a2 + 8 * a1 + 4);
    v4 = (int)v4 + 1;
    v8[v4] = *(__int16 *)(a2 + 8 * v5 + 6);
  }
  return 0;
}

uint64_t BrotliCreateHuffmanTree(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int i;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;

  v9 = result;
  v45 = a2 - 1;
  v10 = a4 + 8;
  for (i = 1; ; i *= 2)
  {
    v12 = 0;
    if (a2)
      break;
    v22 = -1;
    *(_QWORD *)a4 = -1;
    *(_QWORD *)(a4 + 8) = -1;
    v23 = 1;
LABEL_37:
    v34 = 0;
    v35 = (_QWORD *)(v10 - 8 * v22 + 16 * v12);
    do
    {
      v36 = *(_DWORD *)(a4 + 8 * v34);
      v37 = *(_DWORD *)(a4 + 8 * v23);
      v38 = v36 > v37;
      if (v36 > v37)
        v39 = v34;
      else
        v39 = v34 + 1;
      if (v38)
        v40 = v23 + 1;
      else
        v40 = v23;
      v41 = *(_DWORD *)(a4 + 8 * v39);
      v42 = *(_DWORD *)(a4 + 8 * v40);
      if (!v38)
        v23 = v34;
      v43 = v41 > v42;
      if (v41 > v42)
        v44 = v40;
      else
        v44 = v39;
      *((_DWORD *)v35 - 2) = *(_DWORD *)(a4 + 8 * v44) + *(_DWORD *)(a4 + 8 * v23);
      *((_WORD *)v35 - 2) = v23;
      if (v43)
        v34 = v39;
      else
        v34 = v39 + 1;
      if (v43)
        v23 = v40 + 1;
      else
        v23 = v40;
      *((_WORD *)v35 - 1) = v44;
      *v35++ = -1;
      --v22;
    }
    while (v22);
    result = BrotliSetDepth(2 * (int)v12 - 1, a4, a5, a3);
    if ((_DWORD)result)
      return result;
  }
  v13 = v45;
  do
  {
    v14 = *(_DWORD *)(v9 + 4 * v13);
    if (v14)
    {
      if (v14 <= i)
        v14 = i;
      v15 = a4 + 8 * v12;
      *(_DWORD *)v15 = v14;
      ++v12;
      *(_WORD *)(v15 + 4) = -1;
      *(_WORD *)(v15 + 6) = v13;
    }
    --v13;
  }
  while (v13 != -1);
  if (v12 != 1)
  {
    if (v12 <= 0xC)
    {
      if (v12 >= 2)
      {
        v16 = 0;
        for (j = 1; j != v12; ++j)
        {
          v18 = *(_QWORD *)(a4 + 8 * j);
          v19 = v16;
          v20 = j;
          do
          {
            v21 = *(_DWORD *)(a4 + v19);
            if (v21 == (_DWORD)v18)
            {
              if (*(__int16 *)(a4 + v19 + 6) >= SHIWORD(v18))
                break;
            }
            else if (v21 <= v18)
            {
              break;
            }
            *(_QWORD *)(a4 + 8 * v20) = *(_QWORD *)(a4 + v19);
            v19 -= 8;
            --v20;
          }
          while (v20);
          *(_QWORD *)(a4 + 8 * v20) = v18;
          v16 += 8;
        }
      }
LABEL_36:
      *(_QWORD *)&v33 = -1;
      *((_QWORD *)&v33 + 1) = -1;
      *(_OWORD *)(a4 + 8 * v12) = v33;
      v22 = v12 - 1;
      v23 = v12 + 1;
      goto LABEL_37;
    }
    v24 = 2 * (v12 < 0x39);
LABEL_23:
    v25 = kBrotliShellGaps[v24];
    if (v25 >= v12)
      goto LABEL_35;
    v26 = 0;
    v27 = kBrotliShellGaps[v24];
LABEL_25:
    v28 = *(_QWORD *)(a4 + 8 * v27);
    v29 = v27;
    if (v27 < v25)
      goto LABEL_34;
    v30 = v26;
    v31 = v27;
    while (1)
    {
      v32 = *(_DWORD *)(a4 + v30);
      if (v32 == (_DWORD)v28)
      {
        if (*(__int16 *)(a4 + v30 + 6) >= SHIWORD(v28))
          goto LABEL_33;
      }
      else if (v32 <= v28)
      {
LABEL_33:
        v29 = v31;
LABEL_34:
        *(_QWORD *)(a4 + 8 * v29) = v28;
        ++v27;
        v26 += 8;
        if (v27 == v12)
        {
LABEL_35:
          if (++v24 == 6)
            goto LABEL_36;
          goto LABEL_23;
        }
        goto LABEL_25;
      }
      v29 = v31 - v25;
      *(_QWORD *)(a4 + 8 * v31) = *(_QWORD *)(a4 + v30);
      v30 -= 8 * v25;
      v31 = v29;
      if (v29 < v25)
        goto LABEL_34;
    }
  }
  *(_BYTE *)(a5 + *(__int16 *)(a4 + 6)) = 1;
  return result;
}

void BrotliOptimizeHuffmanCountsForRle(uint64_t a1, int *a2, char *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v19;
  uint64_t v20;
  int *v21;
  size_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int *v29;
  unint64_t v30;
  int v31;
  int v32;
  int *v33;
  unsigned int v34;
  uint64_t v35;

  if (a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (a2[v5])
        ++v6;
      ++v5;
    }
    while (a1 != v5);
    if (v6 >= 0x10)
    {
      v7 = a1 - 1;
      while (v7 != -1)
      {
        if (a2[v7--])
        {
          v9 = 0;
          v10 = 0;
          v11 = v7 + 2;
          v12 = 0x40000000;
          do
          {
            v13 = v9;
            v14 = a2[v10];
            if (v12 >= v14)
              v15 = a2[v10];
            else
              v15 = v12;
            if (v14)
            {
              ++v9;
              v12 = v15;
            }
            ++v10;
          }
          while (v11 != v10);
          if (v9 >= 5)
          {
            if (v14)
              v16 = v13 + 1;
            else
              v16 = v13;
            v17 = v7 - v16 + 2;
            v19 = v12 <= 3 && v17 <= 5 && v7 + 1 >= 2;
            if (v19)
            {
              v20 = 0;
              do
              {
                if (a2[v20])
                {
                  v21 = &a2[v20];
                  if (!v21[1])
                  {
                    if (v21[2])
                      v21[1] = 1;
                  }
                }
                ++v20;
              }
              while (v7 != v20);
            }
            if (v9 >= 0x1C)
            {
              bzero(a3, v7 + 2);
              v22 = 0;
              v23 = 0;
              v24 = *a2;
              do
              {
                if (v11 == v23 || a2[v23] != v24)
                {
                  if (!v24 && v22 > 4 || v24 && v22 > 6)
                    memset(&a3[v23 - v22], 1, v22);
                  if (v11 != v23)
                    v24 = a2[v23];
                  v22 = 1;
                }
                else
                {
                  ++v22;
                }
                v19 = v23++ >= v11;
              }
              while (!v19);
              v25 = 0;
              v26 = 0;
              v27 = 0;
              v28 = ((a2[1] + *a2 + a2[2]) << 8) / 3u + 420;
              v29 = a2 - 1;
              do
              {
                if (v11 == v25
                  || a3[v25]
                  || v25 && a3[v25 - 1]
                  || (v35 = a2[v25], ((_DWORD)v35 << 8) - v28 - 1240 <= 0xFFFFFFFFFFFFF64FLL))
                {
                  if (v27 > 3 || v27 == 3 && !v26)
                  {
                    v30 = v26 + (v27 >> 1);
                    if (v27 > v30)
                      v31 = 1;
                    else
                      v31 = v30 / v27;
                    if (v26)
                      v32 = v31;
                    else
                      v32 = 0;
                    v33 = v29;
                    do
                    {
                      *v33-- = v32;
                      --v27;
                    }
                    while (v27);
                  }
                  if (v25 >= v7)
                  {
                    if (v25 >= v11)
                      v34 = 0;
                    else
                      v34 = a2[v25] << 8;
                  }
                  else
                  {
                    v34 = ((a2[v25 + 1] + a2[v25] + a2[v25 + 2]) << 8) / 3u + 420;
                  }
                  v28 = v34;
                  if (v11 == v25)
                    v26 = 0;
                  else
                    v26 = a2[v25];
                  v27 = 1;
                }
                else
                {
                  ++v27;
                  v26 += v35;
                  if (v27 >= 4)
                  {
                    v28 = ((v26 << 8) + (v27 >> 1)) / v27;
                    if (v27 == 4)
                      v28 += 120;
                  }
                }
                ++v29;
                v19 = v25++ >= v11;
              }
              while (!v19);
            }
          }
          return;
        }
      }
    }
  }
}

uint64_t BrotliWriteHuffmanTree(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  unint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  _BOOL4 v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t j;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t i;
  char v49;

  if (!a2)
    return result;
  v5 = a2;
  while (!*(_BYTE *)(result - 1 + v5))
  {
    if (!--v5)
    {
      if (a2 > 0x32)
      {
        v5 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 2;
        v19 = 2;
        goto LABEL_26;
      }
      return result;
    }
  }
  if (a2 <= 0x32)
  {
    v20 = 0;
    v21 = 0;
LABEL_29:
    v22 = 0;
    v23 = 8;
    while (1)
    {
      v24 = *(unsigned __int8 *)(result + v22);
      v25 = *(_BYTE *)(result + v22) || !v21;
      v26 = !v25;
      v27 = !v20 || v24 == 0;
      v28 = v27 && !v26;
      if (v28 || v22 + 1 >= v5)
        break;
      v29 = 1;
      while (*(unsigned __int8 *)(result + v22 + v29) == v24)
      {
        if (v5 - v22 == ++v29)
        {
          v29 = v5 - v22;
          break;
        }
      }
      if (*(_BYTE *)(result + v22))
        goto LABEL_52;
      if (v29 == 11)
      {
        *(_BYTE *)(a4 + *a3) = 0;
        *(_BYTE *)(a5 + *a3) = 0;
        v30 = *a3 + 1;
        *a3 = v30;
        v29 = 11;
        v31 = 7;
LABEL_78:
        *(_BYTE *)(a4 + v30) = 17;
        *(_BYTE *)(a5 + *a3) = v31 & 7;
        v44 = *a3;
        v45 = *a3 + 1;
        *a3 = v45;
        if (v31 >= 8)
        {
          do
          {
            v31 = (v31 >> 3) - 1;
            *(_BYTE *)(a4 + v45) = 17;
            *(_BYTE *)(a5 + *a3) = v31 & 7;
            v44 = *a3;
            v45 = *a3 + 1;
            *a3 = v45;
          }
          while (v31 > 7);
        }
        if (v44 > v30)
        {
          v46 = v30;
          do
          {
            v47 = *(_BYTE *)(a4 + v46);
            *(_BYTE *)(a4 + v46) = *(_BYTE *)(a4 + v44);
            *(_BYTE *)(a4 + v44) = v47;
            ++v46;
            --v44;
          }
          while (v46 < v44);
          v45 = *a3;
        }
        for (i = v45 - 1; v30 < i; --i)
        {
          v49 = *(_BYTE *)(a5 + v30);
          *(_BYTE *)(a5 + v30) = *(_BYTE *)(a5 + i);
          *(_BYTE *)(a5 + i) = v49;
          ++v30;
        }
        goto LABEL_75;
      }
      v31 = v29 - 3;
      if (v29 >= 3)
      {
        v30 = *a3;
        goto LABEL_78;
      }
      if (v29)
      {
LABEL_73:
        v42 = *a3;
        v43 = v29;
        do
        {
          *(_BYTE *)(a4 + v42) = 0;
          *(_BYTE *)(a5 + *a3) = 0;
          v42 = *a3 + 1;
          *a3 = v42;
          --v43;
        }
        while (v43);
      }
LABEL_75:
      v22 += v29;
      if (v22 >= v5)
        return result;
    }
    v29 = 1;
    if (!*(_BYTE *)(result + v22))
      goto LABEL_73;
LABEL_52:
    v32 = v29;
    if (v23 != v24)
    {
      *(_BYTE *)(a4 + *a3) = v24;
      *(_BYTE *)(a5 + (*a3)++) = 0;
      v32 = v29 - 1;
    }
    if (v32 == 7)
    {
      *(_BYTE *)(a4 + *a3) = v24;
      *(_BYTE *)(a5 + *a3) = 0;
      v33 = *a3 + 1;
      *a3 = v33;
      v32 = 6;
    }
    else
    {
      if (v32 < 3)
      {
        if (v32)
        {
          v34 = *a3;
          do
          {
            *(_BYTE *)(a4 + v34) = v24;
            *(_BYTE *)(a5 + *a3) = 0;
            v34 = *a3 + 1;
            *a3 = v34;
            --v32;
          }
          while (v32);
        }
        goto LABEL_70;
      }
      v33 = *a3;
    }
    v35 = v32 - 3;
    *(_BYTE *)(a4 + v33) = 16;
    *(_BYTE *)(a5 + *a3) = (v32 - 3) & 3;
    v36 = *a3;
    v37 = *a3 + 1;
    *a3 = v37;
    if (v35 >= 4)
    {
      do
      {
        v35 = (v35 >> 2) - 1;
        *(_BYTE *)(a4 + v37) = 16;
        *(_BYTE *)(a5 + *a3) = v35 & 3;
        v36 = *a3;
        v37 = *a3 + 1;
        *a3 = v37;
      }
      while (v35 > 3);
    }
    if (v36 > v33)
    {
      v38 = v33;
      do
      {
        v39 = *(_BYTE *)(a4 + v38);
        *(_BYTE *)(a4 + v38) = *(_BYTE *)(a4 + v36);
        *(_BYTE *)(a4 + v36) = v39;
        ++v38;
        --v36;
      }
      while (v38 < v36);
      v37 = *a3;
    }
    for (j = v37 - 1; v33 < j; --j)
    {
      v41 = *(_BYTE *)(a5 + v33);
      *(_BYTE *)(a5 + v33) = *(_BYTE *)(a5 + j);
      *(_BYTE *)(a5 + j) = v41;
      ++v33;
    }
LABEL_70:
    v23 = v24;
    goto LABEL_75;
  }
  v6 = 0;
  v17 = 0;
  v16 = 0;
  v7 = 1;
  v8 = 1;
  do
  {
    v9 = *(unsigned __int8 *)(result + v6);
    if (v6 + 1 >= v5)
    {
      ++v6;
      v10 = 1;
    }
    else
    {
      v10 = 1;
      while (*(unsigned __int8 *)(result + v6 + v10) == v9)
      {
        if (v5 - v6 == ++v10)
        {
          v10 = v5 - v6;
          break;
        }
      }
      v6 += v10;
    }
    v11 = v9 == 0;
    v12 = !v11;
    v13 = (v10 > 2) & v11;
    if ((_DWORD)v13)
      v14 = v10;
    else
      v14 = 0;
    v16 += v14;
    v8 += v13;
    v15 = (v10 > 3) & v12;
    if (((v10 > 3) & v12) == 0)
      v10 = 0;
    v17 += v10;
    v7 += v15;
  }
  while (v6 < v5);
  v19 = 2 * v7;
  v18 = 2 * v8;
LABEL_26:
  v20 = v17 > v19;
  v21 = v16 > v18;
  if (v5)
    goto LABEL_29;
  return result;
}

unsigned __int8 *BrotliConvertBitDepthsToSymbols(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  unint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  unint64_t j;
  _BYTE v13[32];
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, sizeof(v14));
  if (a2)
  {
    v3 = result;
    v4 = a2;
    do
    {
      v5 = *v3++;
      ++*((_WORD *)v14 + v5);
      --v4;
    }
    while (v4);
  }
  v6 = 0;
  v7 = 0;
  LOWORD(v14[0]) = 0;
  do
  {
    v7 = 2 * (v7 + *(unsigned __int16 *)((char *)v14 + v6));
    *(_WORD *)&v13[v6 + 2] = v7;
    v6 += 2;
  }
  while (v6 != 30);
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = result[i];
      if (result[i])
      {
        v10 = *(_WORD *)&v13[2 * v9];
        *(_WORD *)&v13[2 * v9] = v10 + 1;
        v11 = BrotliReverseBits_kLut[v10 & 0xF];
        if (v9 >= 5)
        {
          for (j = 4; j < v9; j += 4)
          {
            v10 >>= 4;
            v11 = BrotliReverseBits_kLut[v10] | (16 * v11);
          }
        }
        *(_WORD *)(a3 + 2 * i) = v11 >> (-(char)v9 & 3);
      }
    }
  }
  return result;
}

uint64_t BrotliInitDistanceParams(uint64_t result, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  char v5;
  int v6;
  int v7;
  char v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  v4 = a3 + 16;
  v5 = a2 + 1;
  if (a4)
  {
    if (a3 <= 0x7FFFFFFB)
    {
      v8 = -1;
      v9 = -1 << a2;
      v10 = -5;
      v11 = ((2147483644 - a3) >> a2) + 4;
      do
      {
        ++v8;
        v10 += 2;
        v12 = v11 > 3;
        v11 >>= 1;
      }
      while (v12);
      v13 = (((((2147483644 - a3) >> a2) + 4) >> v8) & 1) + v10;
      if (v13 == -1)
      {
        v6 = a3 + 16;
      }
      else
      {
        v14 = v13 >> 1;
        v15 = (v13 & 1) << ((v13 >> 1) + 1);
        v6 = a3 + ((v13 << a2) | ~v9) + 17;
        a3 = a3 - v9 + (((6 << v14) + v15 - 5) << a2);
      }
    }
    else
    {
      v6 = -2147483636;
      a3 = 2147483644;
    }
    v7 = v4 + (62 << v5);
  }
  else
  {
    v7 = v4 + (24 << v5);
    a3 += (1 << (a2 + 26)) + (-1 << (a2 + 2));
    v6 = v7;
  }
  *(_DWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 12) = v6;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t BrotliBuildMetaBlock(uint64_t a1, uint64_t a2, size_t a3, size_t a4, uint64_t a5, unsigned __int8 a6, unsigned __int8 a7, uint64_t a8, size_t a9, int a10, unint64_t *a11)
{
  uint64_t v12;
  void *v13;
  unsigned int v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  double v21;
  unsigned int v22;
  unint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int **v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int *v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v72;
  uint64_t v75;
  double v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;

  v12 = a5 + 56;
  v83 = *(_OWORD *)(a5 + 56);
  v84 = *(_QWORD *)(a5 + 72);
  v81 = *(_OWORD *)(a5 + 56);
  v82 = *(_QWORD *)(a5 + 72);
  v13 = (void *)BrotliAllocate(a1);
  v14 = 0;
  v15 = 0;
  v16 = 1;
  v17 = 1.0e99;
  v19 = v83;
  v18 = DWORD1(v83);
  do
  {
    if (v14 <= 0xF)
    {
      while (1)
      {
        v80 = 0.0;
        BrotliInitDistanceParams((uint64_t)&v81, v15, v14 << v15, *(_DWORD *)(a5 + 36));
        if (v14 << v15 == v18 && v15 == v19)
          v16 = 0;
        if (!ComputeDistanceCost(a8, a9, &v83, (uint64_t)&v81, &v80, v13))
          break;
        v21 = v80;
        if (v80 > v17)
          break;
        *(_OWORD *)v12 = v81;
        *(_QWORD *)(v12 + 16) = v82;
        ++v14;
        v17 = v21;
        if (v14 == 16)
        {
          v17 = v21;
          break;
        }
      }
    }
    v22 = v14 - 1;
    if (!v14)
      v22 = 0;
    v14 = v22 >> 1;
    ++v15;
  }
  while (v15 != 4);
  if (v16)
  {
    v80 = 0.0;
    ComputeDistanceCost(a8, a9, &v83, (uint64_t)&v83, &v80, v13);
    if (v80 < v17)
    {
      *(_OWORD *)v12 = v83;
      *(_QWORD *)(v12 + 16) = v84;
    }
  }
  BrotliFree(a1);
  if (v19 == *(_DWORD *)v12)
  {
    v23 = a11;
    if (!a9 || v18 == *(_DWORD *)(a5 + 60))
      goto LABEL_33;
  }
  else
  {
    v23 = a11;
    if (!a9)
      goto LABEL_33;
  }
  v24 = v18 + 16;
  v25 = a8 + 8;
  v26 = a9;
  do
  {
    if ((*(_DWORD *)(v25 - 4) & 0x1FFFFFF) != 0 && *(unsigned __int16 *)(v25 + 4) >= 0x80u)
    {
      v27 = *(unsigned __int16 *)(v25 + 6);
      v28 = v27 & 0x3FF;
      if (v28 >= v24)
        v28 = ((v28 - v18 - 16) & ~(-1 << v19))
            + v24
            + ((((((v28 - v18 - 16) >> v19) & 1 | 2) << (v27 >> 10)) + *(_DWORD *)v25 - 4) << v19);
      LOWORD(v29) = v28;
      v30 = *(unsigned int *)(a5 + 60);
      v31 = v30 + 16;
      if (v30 + 16 <= (unint64_t)v28)
      {
        v33 = v28 - v30 + (4 << *(_DWORD *)v12) - 16;
        v34 = (__clz(v33) ^ 0x1F) - 1;
        v35 = ((v33 >> v34) & 1 | 2) << v34;
        v29 = ((v33 & ~(-1 << *(_DWORD *)v12))
             + v31
             + ((((v33 >> v34) & 1 | (2 * (v34 - *(_DWORD *)v12))) + 65534) << *(_DWORD *)v12)) | ((v34 - *(_DWORD *)v12) << 10);
        v32 = (v33 - v35) >> *(_DWORD *)v12;
      }
      else
      {
        LODWORD(v32) = 0;
      }
      *(_WORD *)(v25 + 6) = v29;
      *(_DWORD *)v25 = v32;
    }
    v25 += 16;
    --v26;
  }
  while (v26);
LABEL_33:
  v36 = v23 + 12;
  BrotliSplitBlock(a1, a8, a9, a2, a3, a4, a5, (uint64_t)v23, v23 + 6, (uint64_t)(v23 + 12));
  v37 = *v23;
  v72 = (uint64_t)(v23 + 6);
  if (*(_DWORD *)(a5 + 32))
  {
    v38 = 0;
    v39 = 1;
  }
  else
  {
    if (v37)
    {
      v40 = BrotliAllocate(a1);
      v38 = v40;
      v37 = *v23;
      if (*v23)
      {
        v41 = 0;
        v39 = 64;
        do
        {
          *(_DWORD *)(v40 + 4 * v41++) = a10;
          v37 = *v23;
        }
        while (v41 < *v23);
        goto LABEL_42;
      }
    }
    else
    {
      v38 = 0;
    }
    v39 = 64;
  }
LABEL_42:
  v42 = v37 * v39;
  if (v37 * v39)
  {
    v43 = BrotliAllocate(a1);
    v44 = v42;
    v45 = (_QWORD *)v43;
    do
    {
      bzero(v45, 0x400uLL);
      v45[128] = 0;
      v45[129] = 0x7FF0000000000000;
      v45 += 130;
      --v44;
    }
    while (v44);
    v23 = a11;
  }
  else
  {
    v43 = 0;
  }
  v46 = 4 * *v36;
  if (v46)
  {
    v47 = (_QWORD *)BrotliAllocate(a1);
    v75 = (uint64_t)v47;
    do
    {
      bzero(v47, 0x880uLL);
      v47[272] = 0;
      v47[273] = 0x7FF0000000000000;
      v47 += 274;
      --v46;
    }
    while (v46);
    v23 = a11;
  }
  else
  {
    v75 = 0;
  }
  v48 = v23[6];
  v23[25] = v48;
  if (v48)
  {
    v49 = (_QWORD *)BrotliAllocate(a1);
    v50 = v23[25];
    v23[24] = (unint64_t)v49;
    if (v50)
    {
      do
      {
        bzero(v49, 0xB00uLL);
        v49[352] = 0;
        v49[353] = 0x7FF0000000000000;
        v49 += 354;
        --v50;
      }
      while (v50);
      v23 = a11;
      v49 = (_QWORD *)a11[24];
    }
  }
  else
  {
    v49 = 0;
    v23[24] = 0;
  }
  BrotliBuildHistogramsWithContext(a8, a9, (uint64_t)v23, v72, (uint64_t)v36, a2, a3, a4, a6, a7, v38, v43, (uint64_t)v49, v75);
  BrotliFree(a1);
  v51 = *v23 << 6;
  v23[19] = v51;
  if (v51)
  {
    v52 = BrotliAllocate(a1);
    v23[18] = v52;
    v53 = (unsigned int **)(v23 + 18);
    v54 = v23[19];
    v23[23] = v54;
    v55 = (uint64_t *)(v23 + 23);
    if (v54)
    {
      v56 = BrotliAllocate(a1);
      v57 = *v53;
    }
    else
    {
      v57 = (unsigned int *)v52;
      v56 = 0;
    }
  }
  else
  {
    v57 = 0;
    v56 = 0;
    v23[18] = 0;
    v53 = (unsigned int **)(v23 + 18);
    v23[23] = 0;
    v55 = (uint64_t *)(v23 + 23);
  }
  v23[22] = v56;
  BrotliClusterHistogramsLiteral(a1, v43, v42, 0x100uLL, v56, v55, v57);
  BrotliFree(a1);
  if (*(_DWORD *)(a5 + 32))
  {
    v58 = *v23;
    if (*v23)
    {
      v59 = *v53;
      v60 = &(*v53)[64 * v58];
      do
      {
        --v58;
        v61 = 0x3FFFFFFFFFFFFFC0;
        do
          v60[v61++] = v59[v58];
        while (v61 * 4);
        v60 -= 64;
      }
      while (v58);
    }
  }
  v62 = v23[12];
  v23[21] = 4 * v62;
  if (4 * v62)
  {
    v63 = BrotliAllocate(a1);
    v64 = v23[21];
    v65 = a1;
    v23[27] = v64;
    v66 = (uint64_t *)(v23 + 27);
    v23[20] = v63;
    if (v64)
    {
      v67 = BrotliAllocate(a1);
      v69 = (unsigned int *)v23[20];
      v68 = v23[21];
    }
    else
    {
      v69 = (unsigned int *)v63;
      v68 = 0;
      v67 = 0;
    }
  }
  else
  {
    v69 = 0;
    v68 = 0;
    v67 = 0;
    v65 = a1;
    v23[27] = 0;
    v66 = (uint64_t *)(v23 + 27);
    v23[20] = 0;
  }
  v23[26] = v67;
  BrotliClusterHistogramsDistance(v65, v75, v68, 0x100uLL, v67, v66, v69);
  return BrotliFree(v65);
}

uint64_t ComputeDistanceCost(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, double *a5, void *a6)
{
  _BOOL4 v12;
  uint64_t v13;
  unsigned __int16 *v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  double v23;

  bzero(a6, 0x880uLL);
  *((_QWORD *)a6 + 272) = 0;
  *((_QWORD *)a6 + 273) = 0x7FF0000000000000;
  if (*a3 == *(_DWORD *)a4)
  {
    v12 = a3[1] != *(_DWORD *)(a4 + 4);
    if (a2)
    {
LABEL_3:
      v13 = 0;
      v14 = (unsigned __int16 *)(a1 + 14);
      v15 = 0.0;
      while (1)
      {
        if ((*(_DWORD *)(v14 - 5) & 0x1FFFFFF) != 0 && *(v14 - 1) >= 0x80u)
        {
          v16 = *v14;
          if (v12)
          {
            v17 = v16 & 0x3FF;
            v18 = a3[1];
            if (v17 >= v18 + 16)
              v17 = v18
                  + 16
                  + ((v17 - v18 - 16) & ~(-1 << *a3))
                  + ((*(_DWORD *)(v14 - 3) + ((((v17 - v18 - 16) >> *a3) & 1 | 2) << (v16 >> 10)) - 4) << *a3);
            if (*(_QWORD *)(a4 + 16) < (unint64_t)v17)
              return 0;
            v19 = *(unsigned int *)(a4 + 4);
            v20 = v19 + 16;
            if (v19 + 16 <= (unint64_t)v17)
            {
              v21 = v17 - v19 + (4 << *(_DWORD *)a4) - 16;
              v22 = (__clz(v21) ^ 0x1F) - 1;
              v16 = ((v21 & ~(-1 << *(_DWORD *)a4))
                   + v20
                   + ((((v21 >> v22) & 1 | (2 * (v22 - *(_DWORD *)a4))) + 65534) << *(_DWORD *)a4)) | ((v22 - *(_DWORD *)a4) << 10);
            }
            else
            {
              LOWORD(v16) = v17;
            }
          }
          ++*((_DWORD *)a6 + (v16 & 0x3FF));
          *((_QWORD *)a6 + 272) = ++v13;
          v15 = v15 + (double)((unsigned __int16)v16 >> 10);
        }
        v14 += 8;
        if (!--a2)
          goto LABEL_18;
      }
    }
  }
  else
  {
    v12 = 1;
    if (a2)
      goto LABEL_3;
  }
  v15 = 0.0;
LABEL_18:
  BrotliPopulationCostDistance((uint64_t)a6);
  *a5 = v15 + v23;
  return 1;
}

uint64_t BrotliBuildMetaBlockGreedy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t a9, unsigned int *a10, unint64_t a11, uint64_t a12)
{
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t i;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t j;
  uint64_t k;
  _QWORD *v67;
  _QWORD *v68;
  __int16 v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v78;

  v18 = a11;
  v19 = (_QWORD *)a12;
  v20 = (_QWORD *)BrotliAllocate(a1);
  v21 = v20;
  if (a8 == 1)
  {
    v22 = 0;
    if (a11)
    {
      v23 = a11;
      v24 = a10;
      do
      {
        v25 = *v24;
        v24 += 4;
        v22 += v25;
        --v23;
      }
      while (v23);
    }
    InitBlockSplitterLiteral(a1, (uint64_t)v20, v22, a12, (_QWORD *)(a12 + 176), (uint64_t *)(a12 + 184));
    InitBlockSplitterCommand(a1, (uint64_t)(v21 + 275), a11, a12 + 48, (_QWORD *)(a12 + 192), (uint64_t *)(a12 + 200));
    v78 = v21 + 998;
    InitBlockSplitterDistance(a1, (uint64_t)(v21 + 998), a11, a12 + 96, (_QWORD *)(a12 + 208), (uint64_t *)(a12 + 216));
    if (a11)
    {
      for (i = 0; i != a11; ++i)
      {
        v27 = &a10[4 * i];
        v28 = *v27;
        v29 = v27[1];
        v30 = *((unsigned __int16 *)v27 + 6);
        v31 = *((_WORD *)v27 + 7);
        BlockSplitterAddSymbolCommand(v21 + 275, *((unsigned __int16 *)v27 + 6));
        if ((_DWORD)v28)
        {
          do
          {
            BlockSplitterAddSymbolLiteral(v21, *(unsigned __int8 *)(a2 + (a3++ & a4)));
            --v28;
          }
          while (v28);
        }
        if ((v29 & 0x1FFFFFF) != 0 && v30 >= 0x80)
          BlockSplitterAddSymbolDistance(v78, v31 & 0x3FF);
        a3 += v29 & 0x1FFFFFF;
      }
    }
    BlockSplitterFinishBlockLiteral(v21, 1);
    BlockSplitterFinishBlockCommand(v21 + 275, 1);
    BlockSplitterFinishBlockDistance(v78, 1);
  }
  else
  {
    v70 = a5;
    v72 = a6;
    if (a11)
    {
      v32 = 0;
      v33 = a10;
      do
      {
        v34 = *v33;
        v33 += 4;
        v32 += v34;
        --v18;
      }
      while (v18);
      v35 = v32 >> 9;
    }
    else
    {
      v35 = 0;
    }
    *v20 = 256;
    v20[1] = a8;
    v20[2] = 0x100 / a8;
    v20[3] = 512;
    v20[4] = 0x4079000000000000;
    v20[5] = 0;
    v20[6] = a12;
    v20[8] = a12 + 184;
    v20[9] = 512;
    v20[40] = 0;
    if (v35 + 1 >= 0x100 / a8 + 1)
      v36 = 0x100 / a8 + 1;
    else
      v36 = v35 + 1;
    v74 = v36;
    v20[10] = 0;
    v20[11] = 0;
    v37 = *(_QWORD *)(a12 + 32);
    if (v37 <= v35)
    {
      if (!v37)
        v37 = v35 + 1;
      do
      {
        v38 = v37;
        v37 *= 2;
      }
      while (v38 <= v35);
      v39 = (void *)BrotliAllocate(a1);
      v40 = v39;
      v41 = *(_QWORD *)(a12 + 32);
      if (v41)
        memcpy(v39, *(const void **)(a12 + 16), v41);
      BrotliFree(a1);
      *(_QWORD *)(a12 + 16) = v40;
      *(_QWORD *)(a12 + 32) = v38;
    }
    v42 = *(_QWORD *)(a12 + 40);
    if (v42 <= v35)
    {
      if (!v42)
        v42 = v35 + 1;
      do
      {
        v43 = v42;
        v42 *= 2;
      }
      while (v43 <= v35);
      v44 = (void *)BrotliAllocate(a1);
      v45 = v44;
      v46 = *(_QWORD *)(a12 + 40);
      if (v46)
        memcpy(v44, *(const void **)(a12 + 24), 4 * v46);
      BrotliFree(a1);
      *(_QWORD *)(a12 + 24) = v45;
      *(_QWORD *)(a12 + 40) = v43;
      v19 = (_QWORD *)a12;
    }
    v19[1] = v35 + 1;
    v47 = a8;
    v19[23] = v74 * a8;
    if (v74 * a8)
      v48 = (_QWORD *)BrotliAllocate(a1);
    else
      v48 = 0;
    v19[22] = v48;
    v21[7] = v48;
    do
    {
      bzero(v48, 0x400uLL);
      v48[128] = 0;
      v48[129] = 0x7FF0000000000000;
      v48 += 130;
      --v47;
    }
    while (v47);
    v21[12] = 0;
    v21[13] = 0;
    v68 = v21 + 275;
    InitBlockSplitterCommand(a1, (uint64_t)(v21 + 275), a11, (uint64_t)(v19 + 6), v19 + 24, v19 + 25);
    v67 = v21 + 998;
    InitBlockSplitterDistance(a1, (uint64_t)(v21 + 998), a11, (uint64_t)(v19 + 12), v19 + 26, v19 + 27);
    if (a11)
    {
      v49 = 0;
      v50 = v70;
      v51 = v72;
      do
      {
        v75 = v49;
        v52 = &a10[4 * v49];
        v53 = *v52;
        v69 = *((_WORD *)v52 + 7);
        v71 = *((unsigned __int16 *)v52 + 6);
        v73 = v52[1];
        BlockSplitterAddSymbolCommand(v68, v71);
        if ((_DWORD)v53)
        {
          v54 = a7;
          do
          {
            v55 = *(_BYTE *)(a7 + 256 + v51);
            v51 = v50;
            v50 = *(unsigned __int8 *)(a2 + (a3 & a4));
            v56 = v21[7]
                + 1040 * (v21[11] + *(unsigned int *)(a9 + 4 * (v55 | *(_BYTE *)(v54 + v51))));
            ++*(_DWORD *)(v56 + 4 * v50);
            ++*(_QWORD *)(v56 + 1024);
            v57 = v21[9];
            v58 = v21[10] + 1;
            v21[10] = v58;
            if (v58 == v57)
            {
              ContextBlockSplitterFinishBlock(v21, a1, 0);
              v54 = a7;
            }
            ++a3;
            --v53;
          }
          while (v53);
        }
        v59 = v73 & 0x1FFFFFF;
        a3 += v59;
        v60 = v75;
        if ((_DWORD)v59)
        {
          v51 = *(unsigned __int8 *)(a2 + ((a3 - 2) & a4));
          v50 = *(unsigned __int8 *)(a2 + ((a3 - 1) & a4));
          if (v71 >= 0x80)
          {
            BlockSplitterAddSymbolDistance(v67, v69 & 0x3FF);
            v60 = v75;
          }
        }
        v49 = v60 + 1;
      }
      while (v49 != a11);
    }
    ContextBlockSplitterFinishBlock(v21, a1, 1);
    BlockSplitterFinishBlockCommand(v68, 1);
    BlockSplitterFinishBlockDistance(v67, 1);
    v61 = *(_QWORD *)a12;
    v62 = *(_QWORD *)a12 << 6;
    *(_QWORD *)(a12 + 152) = v62;
    if (v62)
    {
      v63 = BrotliAllocate(a1);
      v61 = *(_QWORD *)a12;
    }
    else
    {
      v63 = 0;
    }
    *(_QWORD *)(a12 + 144) = v63;
    if (v61)
    {
      for (j = 0; j != v61; ++j)
      {
        for (k = 0; k != 256; k += 4)
          *(_DWORD *)(v63 + k) = *(_DWORD *)(a9 + k) + j * a8;
        v63 += 256;
      }
    }
  }
  return BrotliFree(a1);
}

void BrotliOptimizeHistograms(unsigned int a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10[704];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2[23])
  {
    v4 = 0;
    v5 = 0;
    do
    {
      BrotliOptimizeHuffmanCountsForRle(256, (int *)(a2[22] + v4), v10);
      ++v5;
      v4 += 1040;
    }
    while (v5 < a2[23]);
  }
  if (a2[25])
  {
    v6 = 0;
    v7 = 0;
    do
    {
      BrotliOptimizeHuffmanCountsForRle(704, (int *)(a2[24] + v6), v10);
      ++v7;
      v6 += 2832;
    }
    while (v7 < a2[25]);
  }
  if (a2[27])
  {
    v8 = 0;
    v9 = 0;
    do
    {
      BrotliOptimizeHuffmanCountsForRle(a1, (int *)(a2[26] + v8), v10);
      ++v9;
      v8 += 2192;
    }
    while (v9 < a2[27]);
  }
}

double InitBlockSplitterLiteral(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double result;

  v11 = a3 >> 9;
  v12 = (a3 >> 9) + 1;
  *(_OWORD *)a2 = xmmword_19CFFDCA0;
  *(_QWORD *)(a2 + 16) = 0x4079000000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = a4;
  *(_QWORD *)(a2 + 48) = a6;
  *(_QWORD *)(a2 + 2136) = 512;
  *(_QWORD *)(a2 + 2192) = 0;
  *(_OWORD *)(a2 + 2144) = 0u;
  v13 = *(_QWORD *)(a4 + 32);
  if (v13 <= a3 >> 9)
  {
    if (!v13)
      v13 = (a3 >> 9) + 1;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 <= v11);
    v15 = (void *)BrotliAllocate(a1);
    v16 = v15;
    v17 = *(_QWORD *)(a4 + 32);
    if (v17)
      memcpy(v15, *(const void **)(a4 + 16), v17);
    BrotliFree(a1);
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = v14;
  }
  v18 = *(_QWORD *)(a4 + 40);
  if (v18 <= v11)
  {
    if (!v18)
      v18 = v12;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 <= v11);
    v20 = (void *)BrotliAllocate(a1);
    v21 = v20;
    v22 = *(_QWORD *)(a4 + 40);
    if (v22)
      memcpy(v20, *(const void **)(a4 + 24), 4 * v22);
    BrotliFree(a1);
    *(_QWORD *)(a4 + 24) = v21;
    *(_QWORD *)(a4 + 40) = v19;
  }
  v23 = 257;
  if (v12 < 0x101)
    v23 = v12;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) = v12;
  *a6 = v23;
  v24 = (_QWORD *)BrotliAllocate(a1);
  *a5 = v24;
  *(_QWORD *)(a2 + 40) = v24;
  bzero(v24, 0x400uLL);
  v24[128] = 0;
  v24[129] = 0x7FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 2160) = 0u;
  return result;
}

double InitBlockSplitterCommand(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double result;

  v11 = a3 >> 10;
  v12 = (a3 >> 10) + 1;
  *(_OWORD *)a2 = xmmword_19CFFDCB0;
  *(_QWORD *)(a2 + 16) = 0x407F400000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = a4;
  *(_QWORD *)(a2 + 48) = a6;
  *(_QWORD *)(a2 + 5720) = 1024;
  *(_QWORD *)(a2 + 5776) = 0;
  *(_OWORD *)(a2 + 5728) = 0u;
  v13 = *(_QWORD *)(a4 + 32);
  if (v13 <= a3 >> 10)
  {
    if (!v13)
      v13 = (a3 >> 10) + 1;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 <= v11);
    v15 = (void *)BrotliAllocate(a1);
    v16 = v15;
    v17 = *(_QWORD *)(a4 + 32);
    if (v17)
      memcpy(v15, *(const void **)(a4 + 16), v17);
    BrotliFree(a1);
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = v14;
  }
  v18 = *(_QWORD *)(a4 + 40);
  if (v18 <= v11)
  {
    if (!v18)
      v18 = v12;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 <= v11);
    v20 = (void *)BrotliAllocate(a1);
    v21 = v20;
    v22 = *(_QWORD *)(a4 + 40);
    if (v22)
      memcpy(v20, *(const void **)(a4 + 24), 4 * v22);
    BrotliFree(a1);
    *(_QWORD *)(a4 + 24) = v21;
    *(_QWORD *)(a4 + 40) = v19;
  }
  v23 = 257;
  if (v12 < 0x101)
    v23 = v12;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) = v12;
  *a6 = v23;
  v24 = (_QWORD *)BrotliAllocate(a1);
  *a5 = v24;
  *(_QWORD *)(a2 + 40) = v24;
  bzero(v24, 0xB00uLL);
  v24[352] = 0;
  v24[353] = 0x7FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 5744) = 0u;
  return result;
}

double InitBlockSplitterDistance(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double result;

  v11 = a3 >> 9;
  v12 = (a3 >> 9) + 1;
  *(_OWORD *)a2 = xmmword_19CFFDCC0;
  *(_QWORD *)(a2 + 16) = 0x4059000000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = a4;
  *(_QWORD *)(a2 + 48) = a6;
  *(_QWORD *)(a2 + 4440) = 512;
  *(_QWORD *)(a2 + 4496) = 0;
  *(_OWORD *)(a2 + 4448) = 0u;
  v13 = *(_QWORD *)(a4 + 32);
  if (v13 <= a3 >> 9)
  {
    if (!v13)
      v13 = (a3 >> 9) + 1;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 <= v11);
    v15 = (void *)BrotliAllocate(a1);
    v16 = v15;
    v17 = *(_QWORD *)(a4 + 32);
    if (v17)
      memcpy(v15, *(const void **)(a4 + 16), v17);
    BrotliFree(a1);
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = v14;
  }
  v18 = *(_QWORD *)(a4 + 40);
  if (v18 <= v11)
  {
    if (!v18)
      v18 = v12;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 <= v11);
    v20 = (void *)BrotliAllocate(a1);
    v21 = v20;
    v22 = *(_QWORD *)(a4 + 40);
    if (v22)
      memcpy(v20, *(const void **)(a4 + 24), 4 * v22);
    BrotliFree(a1);
    *(_QWORD *)(a4 + 24) = v21;
    *(_QWORD *)(a4 + 40) = v19;
  }
  v23 = 257;
  if (v12 < 0x101)
    v23 = v12;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) = v12;
  *a6 = v23;
  v24 = (_QWORD *)BrotliAllocate(a1);
  *a5 = v24;
  *(_QWORD *)(a2 + 40) = v24;
  bzero(v24, 0x880uLL);
  v24[272] = 0;
  v24[273] = 0x7FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 4464) = 0u;
  return result;
}

void BlockSplitterAddSymbolCommand(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5] + 2832 * a1[717];
  ++*(_DWORD *)(v2 + 4 * a2);
  ++*(_QWORD *)(v2 + 2816);
  v3 = a1[716] + 1;
  a1[716] = v3;
  if (v3 == a1[715])
    BlockSplitterFinishBlockCommand(a1, 0);
}

void BlockSplitterAddSymbolLiteral(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5] + 1040 * a1[269];
  ++*(_DWORD *)(v2 + 4 * a2);
  ++*(_QWORD *)(v2 + 1024);
  v3 = a1[268] + 1;
  a1[268] = v3;
  if (v3 == a1[267])
    BlockSplitterFinishBlockLiteral(a1, 0);
}

void BlockSplitterAddSymbolDistance(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5] + 2192 * a1[557];
  ++*(_DWORD *)(v2 + 4 * a2);
  ++*(_QWORD *)(v2 + 2176);
  v3 = a1[556] + 1;
  a1[556] = v3;
  if (v3 == a1[555])
    BlockSplitterFinishBlockDistance(a1, 0);
}

void BlockSplitterFinishBlockLiteral(_QWORD *a1, int a2)
{
  double *v3;
  _QWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  double v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  double v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  char v41;
  char v42;
  double v43;
  double *v44;
  double *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  double v53;
  uint64_t v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  unint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  unsigned int *__src;
  double v85;
  _QWORD *v86;
  double v87;
  double v88;
  _QWORD v89[3];

  v3 = (double *)a1;
  v89[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a1[4];
  v5 = (unsigned int *)a1[5];
  v6 = a1[268];
  if (v6 <= a1[1])
    v6 = a1[1];
  a1[268] = v6;
  if (!a1[3])
  {
    v12 = 0;
    v13 = 0;
    *(_DWORD *)v4[3] = v6;
    *(_BYTE *)v4[2] = 0;
    v14 = (unint64_t)&v5[*a1];
    v15 = 0.0;
    v16 = v5;
    if ((*a1 & 1) != 0)
      goto LABEL_13;
    while (1)
    {
      if ((unint64_t)v16 >= v14)
      {
        v25 = (double)v12;
        if (v12)
        {
          if (v12 > 0xFF)
            v26 = log2((double)v12);
          else
            v26 = kBrotliLog2Table[v12];
          v15 = v15 + v25 * v26;
        }
        if (v15 >= v25)
          v27 = v15;
        else
          v27 = (double)v12;
        v3[272] = v27;
        v3[273] = v27;
        ++*((_QWORD *)v3 + 3);
        ++*v4;
        v28 = *((_QWORD *)v3 + 269) + 1;
        *((_QWORD *)v3 + 269) = v28;
        if (v28 < **((_QWORD **)v3 + 6))
        {
          v29 = &v5[260 * v28];
          bzero(v29, 0x400uLL);
          *((_QWORD *)v29 + 128) = 0;
          *((_QWORD *)v29 + 129) = 0x7FF0000000000000;
        }
        v3[268] = 0.0;
        goto LABEL_85;
      }
      v18 = *v16++;
      v17 = v18;
      v13 = v12 + v18;
      v19 = (double)v18;
      if (v18 > 0xFF)
        v20 = log2(v19);
      else
        v20 = kBrotliLog2Table[v17];
      v15 = v15 - v19 * v20;
LABEL_13:
      v22 = *v16++;
      v21 = v22;
      v12 = v13 + v22;
      v23 = (double)v22;
      if (v22 > 0xFF)
        v24 = log2(v23);
      else
        v24 = kBrotliLog2Table[v21];
      v15 = v15 - v23 * v24;
    }
  }
  if (!v6)
    goto LABEL_85;
  v81 = a1[3];
  v7 = 0;
  v8 = 0;
  v9 = &v5[260 * a1[269]];
  v10 = &v9[*a1];
  v11 = 0.0;
  v85 = *(double *)a1;
  v86 = a1 + 272;
  if ((*a1 & 1) == 0)
    goto LABEL_28;
  while (1)
  {
    v35 = *v9++;
    v34 = v35;
    v7 = v8 + v35;
    v36 = (double)v35;
    v37 = v35 > 0xFF ? log2(v36) : kBrotliLog2Table[v34];
    v11 = v11 - v36 * v37;
LABEL_28:
    if (v9 >= v10)
      break;
    v31 = *v9++;
    v30 = v31;
    v8 = v7 + v31;
    v32 = (double)v31;
    if (v31 > 0xFF)
      v33 = log2(v32);
    else
      v33 = kBrotliLog2Table[v30];
    v11 = v11 - v32 * v33;
  }
  v38 = (double)v7;
  v83 = a2;
  v82 = v4;
  if (v7)
  {
    if (v7 > 0xFF)
      v39 = log2((double)v7);
    else
      v39 = kBrotliLog2Table[v7];
    v11 = v11 + v38 * v39;
  }
  v40 = 0;
  if (v11 < v38)
    v11 = (double)v7;
  __src = &v5[260 * *((_QWORD *)v3 + 269)];
  v41 = 1;
  do
  {
    v42 = v41;
    v43 = v3[v40 + 270];
    v44 = v3;
    v45 = &v3[130 * v40];
    v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0x410uLL);
    v47 = 0;
    v48 = v5;
    v49 = &v5[260 * *(_QWORD *)&v43];
    *((_QWORD *)v45 + 135) += *((_QWORD *)v49 + 128);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 256);
    v50 = 0;
    v51 = 0;
    v52 = &v46[*(_QWORD *)&v85];
    v53 = 0.0;
    if ((LOBYTE(v85) & 1) != 0)
      goto LABEL_57;
    while (v46 < v52)
    {
      v55 = *v46++;
      v54 = v55;
      v51 = v50 + v55;
      v56 = (double)v55;
      if (v55 > 0xFF)
        v57 = log2(v56);
      else
        v57 = kBrotliLog2Table[v54];
      v53 = v53 - v56 * v57;
LABEL_57:
      v61 = *v46++;
      v60 = v61;
      v50 = v51 + v61;
      v62 = (double)v61;
      if (v61 > 0xFF)
        v63 = log2(v62);
      else
        v63 = kBrotliLog2Table[v60];
      v53 = v53 - v62 * v63;
    }
    v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF)
        v59 = log2((double)v50);
      else
        v59 = kBrotliLog2Table[v50];
      v5 = v48;
      v53 = v53 + v58 * v59;
    }
    else
    {
      v5 = v48;
    }
    v3 = v44;
    v41 = 0;
    if (v53 >= v58)
      v64 = v53;
    else
      v64 = v58;
    *(double *)&v89[v40] = v64;
    *(&v87 + v40) = v64 - v11 - *(double *)&v86[v40];
    v40 = 1;
  }
  while ((v42 & 1) != 0);
  v4 = v82;
  v65 = *v82;
  a2 = v83;
  if (*v82 >= 0x100uLL)
  {
    v68 = v87;
    v67 = v88;
  }
  else
  {
    v66 = v44[2];
    v68 = v87;
    v67 = v88;
    if (v87 > v66 && v88 > v66)
    {
      *(_DWORD *)(v82[3] + 4 * v81) = *((_QWORD *)v44 + 268);
      *(_BYTE *)(v82[2] + v81) = v65;
      v44[271] = v44[270];
      *((_QWORD *)v44 + 270) = *(unsigned __int8 *)v82;
      v44[273] = v44[272];
      v44[272] = v11;
      ++*((_QWORD *)v44 + 3);
      ++*v82;
      v70 = *((_QWORD *)v44 + 269) + 1;
      *((_QWORD *)v44 + 269) = v70;
      if (v70 < **((_QWORD **)v44 + 6))
      {
        v71 = &v5[260 * v70];
        bzero(v71, 0x400uLL);
        *((_QWORD *)v71 + 128) = 0;
        *((_QWORD *)v71 + 129) = 0x7FF0000000000000;
      }
      v44[268] = 0.0;
LABEL_79:
      v44[274] = 0.0;
      v77 = *((_QWORD *)v44 + 1);
LABEL_84:
      *((_QWORD *)v44 + 267) = v77;
      goto LABEL_85;
    }
  }
  v72 = *((_DWORD *)v44 + 536);
  v73 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v73 + 4 * v81) = v72;
    *(_BYTE *)(v82[2] + v81) = *(_BYTE *)(v82[2] + v81 - 2);
    v74 = *((_QWORD *)v44 + 270);
    v75 = *((_QWORD *)v44 + 271);
    *((_QWORD *)v44 + 270) = v75;
    *((_QWORD *)v44 + 271) = v74;
    memcpy(&v5[260 * v75], v44 + 137, 0x410uLL);
    v44[273] = v44[272];
    v44[272] = *(double *)&v89[1];
    ++*((_QWORD *)v44 + 3);
    v44[268] = 0.0;
    v76 = &v5[260 * *((_QWORD *)v44 + 269)];
    bzero(v76, 0x400uLL);
    *((_QWORD *)v76 + 128) = 0;
    *((_QWORD *)v76 + 129) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v73 + 4 * v81 - 4) += v72;
  memcpy(&v5[260 * *((_QWORD *)v44 + 270)], v44 + 7, 0x410uLL);
  v78 = v89[0];
  v44[272] = *(double *)v89;
  if (*v82 == 1)
    *((_QWORD *)v44 + 273) = v78;
  v44[268] = 0.0;
  v79 = &v5[260 * *((_QWORD *)v44 + 269)];
  bzero(v79, 0x400uLL);
  *((_QWORD *)v79 + 128) = 0;
  *((_QWORD *)v79 + 129) = 0x7FF0000000000000;
  v80 = *((_QWORD *)v44 + 274) + 1;
  *((_QWORD *)v44 + 274) = v80;
  if (v80 >= 2)
  {
    v77 = *((_QWORD *)v44 + 267) + *((_QWORD *)v44 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (a2)
  {
    **((_QWORD **)v3 + 6) = *v4;
    v4[1] = *((_QWORD *)v3 + 3);
  }
}

void ContextBlockSplitterFinishBlock(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  double *v5;
  unsigned int *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  double v40;
  uint64_t v41;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  unsigned int v48;
  double v49;
  double v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  double v62;
  uint64_t v63;
  unsigned int v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  unsigned int v70;
  double v71;
  double v72;
  double v73;
  char v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  double *v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  char *v97;
  double v98;
  unsigned int *v99;
  unint64_t v100;
  int v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  double *v107;
  uint64_t v108;
  unsigned int *__src;
  unsigned int *v110;
  unsigned int *v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115[26];
  _QWORD v116[15];

  v3 = a1;
  v116[13] = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = (double *)(a1 + 14);
  v7 = (_QWORD *)a1[6];
  v6 = (unsigned int *)a1[7];
  v8 = a1[10];
  v9 = a1[3];
  if (v8 < v9)
  {
    a1[10] = v9;
    v8 = v9;
  }
  v108 = v4;
  if (!a1[5])
  {
    v102 = a3;
    *(_DWORD *)v7[3] = v8;
    v104 = v7;
    *(_BYTE *)v7[2] = 0;
    if (!v4)
    {
LABEL_29:
      ++v3[5];
      v7 = v104;
      ++*v104;
      v4 = v108;
      v31 = v3[11] + v108;
      v3[11] = v31;
      if (v31 < *(_QWORD *)v3[8])
      {
        v32 = v3[1];
        if (v32)
        {
          v33 = (_QWORD *)(v3[7] + 1040 * v31);
          do
          {
            bzero(v33, 0x400uLL);
            v33[128] = 0;
            v33[129] = 0x7FF0000000000000;
            v33 += 130;
            --v32;
          }
          while (v32);
        }
      }
      v3[10] = 0;
      goto LABEL_106;
    }
    v11 = *a1;
    v12 = *a1;
    v13 = v4;
    while (1)
    {
      v14 = v5;
      v15 = 0;
      v16 = 0;
      v17 = v6;
      v18 = 0.0;
      if ((v11 & 1) != 0)
        goto LABEL_18;
      while (v17 < &v6[v12])
      {
        v20 = *v17++;
        v19 = v20;
        v16 = v15 + v20;
        v21 = (double)v20;
        if (v20 > 0xFF)
          v22 = log2(v21);
        else
          v22 = kBrotliLog2Table[v19];
        v18 = v18 - v21 * v22;
LABEL_18:
        v27 = *v17++;
        v26 = v27;
        v15 = v16 + v27;
        v28 = (double)v27;
        if (v27 > 0xFF)
          v29 = log2(v28);
        else
          v29 = kBrotliLog2Table[v26];
        v18 = v18 - v28 * v29;
      }
      v23 = (double)v15;
      if (v15)
      {
        v24 = v14;
        if (v15 > 0xFF)
          v25 = log2((double)v15);
        else
          v25 = kBrotliLog2Table[v15];
        v18 = v18 + v23 * v25;
      }
      else
      {
        v24 = v14;
      }
      if (v18 >= v23)
        v30 = v18;
      else
        v30 = (double)v15;
      *v24 = v30;
      v24[v108] = v30;
      v5 = v24 + 1;
      v6 += 260;
      if (!--v13)
        goto LABEL_29;
    }
  }
  if (!v8)
    goto LABEL_107;
  v107 = (double *)(a1 + 14);
  v110 = v6;
  v103 = v7;
  v102 = a3;
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v10 = BrotliAllocate(a2);
    v113 = 0.0;
    v114 = 0.0;
LABEL_35:
    v34 = 0;
    v105 = 1040 * v4;
    v106 = (char *)v10;
    v35 = *v3;
    v111 = v6;
    v112 = v10;
    while (1)
    {
      v36 = 0;
      v37 = 0;
      v38 = &v110[260 * v3[11] + 260 * v34];
      v39 = &v38[v35];
      v40 = 0.0;
      __src = v38;
      if ((v35 & 1) != 0)
        goto LABEL_45;
      while (v38 < v39)
      {
        v42 = *v38++;
        v41 = v42;
        v37 = v36 + v42;
        v43 = (double)v42;
        if (v42 > 0xFF)
          v44 = log2(v43);
        else
          v44 = kBrotliLog2Table[v41];
        v40 = v40 - v43 * v44;
LABEL_45:
        v48 = *v38++;
        v47 = v48;
        v36 = v37 + v48;
        v49 = (double)v48;
        if (v48 > 0xFF)
          v50 = log2(v49);
        else
          v50 = kBrotliLog2Table[v47];
        v40 = v40 - v49 * v50;
      }
      v45 = (double)v36;
      if (v36)
      {
        if (v36 > 0xFF)
          v46 = log2((double)v36);
        else
          v46 = kBrotliLog2Table[v36];
        v40 = v40 + v45 * v46;
      }
      v51 = 0;
      if (v40 < v45)
        v40 = (double)v36;
      *(double *)&v116[v34] = v40;
      v52 = 1;
      do
      {
        v53 = v52;
        v54 = v34 + v51 * v4;
        v55 = v3;
        v56 = v3[v51 + 12];
        v57 = &v106[1040 * v54];
        memcpy(v57, __src, 0x410uLL);
        v58 = 0;
        *((_QWORD *)v57 + 128) += *(_QWORD *)&v110[260 * v56 + 256 + 260 * v34];
        do
        {
          *(_DWORD *)(v112 + v105 * v51 + v58 * 4) += v111[260 * v56 + v58];
          ++v58;
        }
        while (v58 != 256);
        v59 = 0;
        v60 = 0;
        v35 = *v55;
        v61 = &v57[4 * *v55];
        v62 = 0.0;
        if ((*v55 & 1) != 0)
          goto LABEL_65;
        while (v57 < v61)
        {
          v64 = *(_DWORD *)v57;
          v57 += 4;
          v63 = v64;
          v60 = v59 + v64;
          v65 = (double)v64;
          if (v64 > 0xFF)
            v66 = log2(v65);
          else
            v66 = kBrotliLog2Table[v63];
          v62 = v62 - v65 * v66;
LABEL_65:
          v70 = *(_DWORD *)v57;
          v57 += 4;
          v69 = v70;
          v59 = v60 + v70;
          v71 = (double)v70;
          if (v70 > 0xFF)
            v72 = log2(v71);
          else
            v72 = kBrotliLog2Table[v69];
          v62 = v62 - v71 * v72;
        }
        v67 = (double)v59;
        if (v59)
        {
          v5 = v107;
          v4 = v108;
          if (v59 > 0xFF)
            v68 = log2((double)v59);
          else
            v68 = kBrotliLog2Table[v59];
          v3 = v55;
          v62 = v62 + v67 * v68;
        }
        else
        {
          v3 = v55;
          v5 = v107;
          v4 = v108;
        }
        v52 = 0;
        if (v62 >= v67)
          v73 = v62;
        else
          v73 = v67;
        v115[v54] = v73;
        *(&v113 + v51) = *(&v113 + v51) + v73 - v40 - v5[v54];
        v51 = 1;
      }
      while ((v53 & 1) != 0);
      ++v34;
      v111 += 260;
      v112 += 1040;
      if (v34 == v4)
      {
        v74 = 0;
        v7 = v103;
        goto LABEL_78;
      }
    }
  }
  v10 = 0;
  v113 = 0.0;
  v114 = 0.0;
  if (v4)
    goto LABEL_35;
  v106 = 0;
  v74 = 1;
LABEL_78:
  v75 = *v7;
  if (*v7 >= v3[2])
  {
    v78 = v113;
    v77 = v114;
  }
  else
  {
    v76 = *((double *)v3 + 4);
    v78 = v113;
    v77 = v114;
    if (v113 > v76 && v114 > v76)
    {
      v80 = v3[5];
      *(_DWORD *)(v7[3] + 4 * v80) = v3[10];
      *(_BYTE *)(v7[2] + v80) = v75;
      v3[13] = v3[12];
      v3[12] = *v7 * v4;
      if ((v74 & 1) == 0)
      {
        v81 = v116;
        v82 = v4;
        do
        {
          v5[v4] = *v5;
          v83 = *v81++;
          *(_QWORD *)v5++ = v83;
          --v82;
        }
        while (v82);
      }
      ++v3[5];
      ++*v7;
      v84 = v3[11] + v4;
      v3[11] = v84;
      if (v84 < *(_QWORD *)v3[8])
      {
        v85 = v3[1];
        if (v85)
        {
          v86 = (_QWORD *)(v3[7] + 1040 * v84);
          do
          {
            bzero(v86, 0x400uLL);
            v86[128] = 0;
            v86[129] = 0x7FF0000000000000;
            v86 += 130;
            --v85;
          }
          while (v85);
        }
      }
      v3[40] = 0;
      v87 = v3[3];
      v3[10] = 0;
      goto LABEL_104;
    }
  }
  v88 = *((_DWORD *)v3 + 20);
  v89 = v7[3];
  v90 = v3[5];
  if (v77 < v78 + -20.0)
  {
    *(_DWORD *)(v89 + 4 * v90) = v88;
    *(_BYTE *)(v7[2] + v90) = *(_BYTE *)(v7[2] + v90 - 2);
    *((int8x16_t *)v3 + 6) = vextq_s8(*((int8x16_t *)v3 + 6), *((int8x16_t *)v3 + 6), 8uLL);
    if ((v74 & 1) == 0)
    {
      v91 = 0;
      v92 = &v106[1040 * v4];
      v93 = &v5[v4];
      do
      {
        memcpy(&v110[260 * v91 + 260 * v3[12]], v92, 0x410uLL);
        v93[v91] = v5[v91];
        v5[v91] = v115[v4 + v91];
        v94 = &v110[260 * v91 + 260 * v3[11]];
        bzero(v94, 0x400uLL);
        *((_QWORD *)v94 + 128) = 0;
        *((_QWORD *)v94 + 129) = 0x7FF0000000000000;
        v5 = v107;
        ++v91;
        v92 += 1040;
      }
      while (v4 != v91);
    }
    ++v3[5];
    v3[40] = 0;
    v3[9] = v3[3];
    v3[10] = 0;
    v7 = v103;
    goto LABEL_105;
  }
  *(_DWORD *)(v89 + 4 * v90 - 4) += v88;
  v95 = v110;
  if ((v74 & 1) == 0)
  {
    v96 = 0;
    v97 = v106;
    do
    {
      memcpy(&v95[260 * v96 + 260 * v3[12]], v97, 0x410uLL);
      v98 = v115[v96];
      v5[v96] = v98;
      if (*v7 == 1)
        *(double *)&v3[v4 + 14 + v96] = v98;
      v95 = v110;
      v99 = &v110[260 * v96 + 260 * v3[11]];
      bzero(v99, 0x400uLL);
      *((_QWORD *)v99 + 128) = 0;
      *((_QWORD *)v99 + 129) = 0x7FF0000000000000;
      ++v96;
      v97 += 1040;
      v5 = v107;
    }
    while (v4 != v96);
  }
  v3[10] = 0;
  v100 = v3[40] + 1;
  v3[40] = v100;
  if (v100 < 2)
    goto LABEL_105;
  v87 = v3[9] + v3[3];
LABEL_104:
  v3[9] = v87;
LABEL_105:
  BrotliFree(a2);
LABEL_106:
  a3 = v102;
LABEL_107:
  if (a3)
  {
    *(_QWORD *)v3[8] = *v7 * v4;
    v7[1] = v3[5];
  }
}

void BlockSplitterFinishBlockCommand(_QWORD *a1, int a2)
{
  double *v3;
  _QWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  double v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  double v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  char v41;
  char v42;
  double v43;
  double *v44;
  double *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  double v53;
  uint64_t v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  unint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  unsigned int *__src;
  double v85;
  _QWORD *v86;
  double v87;
  double v88;
  _QWORD v89[3];

  v3 = (double *)a1;
  v89[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a1[4];
  v5 = (unsigned int *)a1[5];
  v6 = a1[716];
  if (v6 <= a1[1])
    v6 = a1[1];
  a1[716] = v6;
  if (!a1[3])
  {
    v12 = 0;
    v13 = 0;
    *(_DWORD *)v4[3] = v6;
    *(_BYTE *)v4[2] = 0;
    v14 = (unint64_t)&v5[*a1];
    v15 = 0.0;
    v16 = v5;
    if ((*a1 & 1) != 0)
      goto LABEL_13;
    while (1)
    {
      if ((unint64_t)v16 >= v14)
      {
        v25 = (double)v12;
        if (v12)
        {
          if (v12 > 0xFF)
            v26 = log2((double)v12);
          else
            v26 = kBrotliLog2Table[v12];
          v15 = v15 + v25 * v26;
        }
        if (v15 >= v25)
          v27 = v15;
        else
          v27 = (double)v12;
        v3[720] = v27;
        v3[721] = v27;
        ++*((_QWORD *)v3 + 3);
        ++*v4;
        v28 = *((_QWORD *)v3 + 717) + 1;
        *((_QWORD *)v3 + 717) = v28;
        if (v28 < **((_QWORD **)v3 + 6))
        {
          v29 = &v5[708 * v28];
          bzero(v29, 0xB00uLL);
          *((_QWORD *)v29 + 352) = 0;
          *((_QWORD *)v29 + 353) = 0x7FF0000000000000;
        }
        v3[716] = 0.0;
        goto LABEL_85;
      }
      v18 = *v16++;
      v17 = v18;
      v13 = v12 + v18;
      v19 = (double)v18;
      if (v18 > 0xFF)
        v20 = log2(v19);
      else
        v20 = kBrotliLog2Table[v17];
      v15 = v15 - v19 * v20;
LABEL_13:
      v22 = *v16++;
      v21 = v22;
      v12 = v13 + v22;
      v23 = (double)v22;
      if (v22 > 0xFF)
        v24 = log2(v23);
      else
        v24 = kBrotliLog2Table[v21];
      v15 = v15 - v23 * v24;
    }
  }
  if (!v6)
    goto LABEL_85;
  v81 = a1[3];
  v7 = 0;
  v8 = 0;
  v86 = a1 + 720;
  v9 = &v5[708 * a1[717]];
  v10 = &v9[*a1];
  v11 = 0.0;
  v85 = *(double *)a1;
  if ((*a1 & 1) == 0)
    goto LABEL_28;
  while (1)
  {
    v35 = *v9++;
    v34 = v35;
    v7 = v8 + v35;
    v36 = (double)v35;
    v37 = v35 > 0xFF ? log2(v36) : kBrotliLog2Table[v34];
    v11 = v11 - v36 * v37;
LABEL_28:
    if (v9 >= v10)
      break;
    v31 = *v9++;
    v30 = v31;
    v8 = v7 + v31;
    v32 = (double)v31;
    if (v31 > 0xFF)
      v33 = log2(v32);
    else
      v33 = kBrotliLog2Table[v30];
    v11 = v11 - v32 * v33;
  }
  v38 = (double)v7;
  v83 = a2;
  v82 = v4;
  if (v7)
  {
    if (v7 > 0xFF)
      v39 = log2((double)v7);
    else
      v39 = kBrotliLog2Table[v7];
    v11 = v11 + v38 * v39;
  }
  v40 = 0;
  if (v11 < v38)
    v11 = (double)v7;
  __src = &v5[708 * *((_QWORD *)v3 + 717)];
  v41 = 1;
  do
  {
    v42 = v41;
    v43 = v3[v40 + 718];
    v44 = v3;
    v45 = &v3[354 * v40];
    v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0xB10uLL);
    v47 = 0;
    v48 = v5;
    v49 = &v5[708 * *(_QWORD *)&v43];
    *((_QWORD *)v45 + 359) += *((_QWORD *)v49 + 352);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 704);
    v50 = 0;
    v51 = 0;
    v52 = &v46[*(_QWORD *)&v85];
    v53 = 0.0;
    if ((LOBYTE(v85) & 1) != 0)
      goto LABEL_57;
    while (v46 < v52)
    {
      v55 = *v46++;
      v54 = v55;
      v51 = v50 + v55;
      v56 = (double)v55;
      if (v55 > 0xFF)
        v57 = log2(v56);
      else
        v57 = kBrotliLog2Table[v54];
      v53 = v53 - v56 * v57;
LABEL_57:
      v61 = *v46++;
      v60 = v61;
      v50 = v51 + v61;
      v62 = (double)v61;
      if (v61 > 0xFF)
        v63 = log2(v62);
      else
        v63 = kBrotliLog2Table[v60];
      v53 = v53 - v62 * v63;
    }
    v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF)
        v59 = log2((double)v50);
      else
        v59 = kBrotliLog2Table[v50];
      v5 = v48;
      v53 = v53 + v58 * v59;
    }
    else
    {
      v5 = v48;
    }
    v3 = v44;
    v41 = 0;
    if (v53 >= v58)
      v64 = v53;
    else
      v64 = v58;
    *(double *)&v89[v40] = v64;
    *(&v87 + v40) = v64 - v11 - *(double *)&v86[v40];
    v40 = 1;
  }
  while ((v42 & 1) != 0);
  v4 = v82;
  v65 = *v82;
  a2 = v83;
  if (*v82 >= 0x100uLL)
  {
    v68 = v87;
    v67 = v88;
  }
  else
  {
    v66 = v44[2];
    v68 = v87;
    v67 = v88;
    if (v87 > v66 && v88 > v66)
    {
      *(_DWORD *)(v82[3] + 4 * v81) = *((_QWORD *)v44 + 716);
      *(_BYTE *)(v82[2] + v81) = v65;
      v44[719] = v44[718];
      *((_QWORD *)v44 + 718) = *(unsigned __int8 *)v82;
      v44[721] = v44[720];
      v44[720] = v11;
      ++*((_QWORD *)v44 + 3);
      ++*v82;
      v70 = *((_QWORD *)v44 + 717) + 1;
      *((_QWORD *)v44 + 717) = v70;
      if (v70 < **((_QWORD **)v44 + 6))
      {
        v71 = &v5[708 * v70];
        bzero(v71, 0xB00uLL);
        *((_QWORD *)v71 + 352) = 0;
        *((_QWORD *)v71 + 353) = 0x7FF0000000000000;
      }
      v44[716] = 0.0;
LABEL_79:
      v44[722] = 0.0;
      v77 = *((_QWORD *)v44 + 1);
LABEL_84:
      *((_QWORD *)v44 + 715) = v77;
      goto LABEL_85;
    }
  }
  v72 = *((_DWORD *)v44 + 1432);
  v73 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v73 + 4 * v81) = v72;
    *(_BYTE *)(v82[2] + v81) = *(_BYTE *)(v82[2] + v81 - 2);
    v74 = *((_QWORD *)v44 + 718);
    v75 = *((_QWORD *)v44 + 719);
    *((_QWORD *)v44 + 718) = v75;
    *((_QWORD *)v44 + 719) = v74;
    memcpy(&v5[708 * v75], v44 + 361, 0xB10uLL);
    v44[721] = v44[720];
    v44[720] = *(double *)&v89[1];
    ++*((_QWORD *)v44 + 3);
    v44[716] = 0.0;
    v76 = &v5[708 * *((_QWORD *)v44 + 717)];
    bzero(v76, 0xB00uLL);
    *((_QWORD *)v76 + 352) = 0;
    *((_QWORD *)v76 + 353) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v73 + 4 * v81 - 4) += v72;
  memcpy(&v5[708 * *((_QWORD *)v44 + 718)], v44 + 7, 0xB10uLL);
  v78 = v89[0];
  v44[720] = *(double *)v89;
  if (*v82 == 1)
    *((_QWORD *)v44 + 721) = v78;
  v44[716] = 0.0;
  v79 = &v5[708 * *((_QWORD *)v44 + 717)];
  bzero(v79, 0xB00uLL);
  *((_QWORD *)v79 + 352) = 0;
  *((_QWORD *)v79 + 353) = 0x7FF0000000000000;
  v80 = *((_QWORD *)v44 + 722) + 1;
  *((_QWORD *)v44 + 722) = v80;
  if (v80 >= 2)
  {
    v77 = *((_QWORD *)v44 + 715) + *((_QWORD *)v44 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (a2)
  {
    **((_QWORD **)v3 + 6) = *v4;
    v4[1] = *((_QWORD *)v3 + 3);
  }
}

void BlockSplitterFinishBlockDistance(_QWORD *a1, int a2)
{
  double *v3;
  _QWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  double v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  double v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  char v41;
  char v42;
  double v43;
  double *v44;
  double *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  double v53;
  uint64_t v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  unint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  unsigned int *__src;
  double v85;
  _QWORD *v86;
  double v87;
  double v88;
  _QWORD v89[3];

  v3 = (double *)a1;
  v89[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a1[4];
  v5 = (unsigned int *)a1[5];
  v6 = a1[556];
  if (v6 <= a1[1])
    v6 = a1[1];
  a1[556] = v6;
  if (!a1[3])
  {
    v12 = 0;
    v13 = 0;
    *(_DWORD *)v4[3] = v6;
    *(_BYTE *)v4[2] = 0;
    v14 = (unint64_t)&v5[*a1];
    v15 = 0.0;
    v16 = v5;
    if ((*a1 & 1) != 0)
      goto LABEL_13;
    while (1)
    {
      if ((unint64_t)v16 >= v14)
      {
        v25 = (double)v12;
        if (v12)
        {
          if (v12 > 0xFF)
            v26 = log2((double)v12);
          else
            v26 = kBrotliLog2Table[v12];
          v15 = v15 + v25 * v26;
        }
        if (v15 >= v25)
          v27 = v15;
        else
          v27 = (double)v12;
        v3[560] = v27;
        v3[561] = v27;
        ++*((_QWORD *)v3 + 3);
        ++*v4;
        v28 = *((_QWORD *)v3 + 557) + 1;
        *((_QWORD *)v3 + 557) = v28;
        if (v28 < **((_QWORD **)v3 + 6))
        {
          v29 = &v5[548 * v28];
          bzero(v29, 0x880uLL);
          *((_QWORD *)v29 + 272) = 0;
          *((_QWORD *)v29 + 273) = 0x7FF0000000000000;
        }
        v3[556] = 0.0;
        goto LABEL_85;
      }
      v18 = *v16++;
      v17 = v18;
      v13 = v12 + v18;
      v19 = (double)v18;
      if (v18 > 0xFF)
        v20 = log2(v19);
      else
        v20 = kBrotliLog2Table[v17];
      v15 = v15 - v19 * v20;
LABEL_13:
      v22 = *v16++;
      v21 = v22;
      v12 = v13 + v22;
      v23 = (double)v22;
      if (v22 > 0xFF)
        v24 = log2(v23);
      else
        v24 = kBrotliLog2Table[v21];
      v15 = v15 - v23 * v24;
    }
  }
  if (!v6)
    goto LABEL_85;
  v81 = a1[3];
  v7 = 0;
  v8 = 0;
  v86 = a1 + 560;
  v9 = &v5[548 * a1[557]];
  v10 = &v9[*a1];
  v11 = 0.0;
  v85 = *(double *)a1;
  if ((*a1 & 1) == 0)
    goto LABEL_28;
  while (1)
  {
    v35 = *v9++;
    v34 = v35;
    v7 = v8 + v35;
    v36 = (double)v35;
    v37 = v35 > 0xFF ? log2(v36) : kBrotliLog2Table[v34];
    v11 = v11 - v36 * v37;
LABEL_28:
    if (v9 >= v10)
      break;
    v31 = *v9++;
    v30 = v31;
    v8 = v7 + v31;
    v32 = (double)v31;
    if (v31 > 0xFF)
      v33 = log2(v32);
    else
      v33 = kBrotliLog2Table[v30];
    v11 = v11 - v32 * v33;
  }
  v38 = (double)v7;
  v83 = a2;
  v82 = v4;
  if (v7)
  {
    if (v7 > 0xFF)
      v39 = log2((double)v7);
    else
      v39 = kBrotliLog2Table[v7];
    v11 = v11 + v38 * v39;
  }
  v40 = 0;
  if (v11 < v38)
    v11 = (double)v7;
  __src = &v5[548 * *((_QWORD *)v3 + 557)];
  v41 = 1;
  do
  {
    v42 = v41;
    v43 = v3[v40 + 558];
    v44 = v3;
    v45 = &v3[274 * v40];
    v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0x890uLL);
    v47 = 0;
    v48 = v5;
    v49 = &v5[548 * *(_QWORD *)&v43];
    *((_QWORD *)v45 + 279) += *((_QWORD *)v49 + 272);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 544);
    v50 = 0;
    v51 = 0;
    v52 = &v46[*(_QWORD *)&v85];
    v53 = 0.0;
    if ((LOBYTE(v85) & 1) != 0)
      goto LABEL_57;
    while (v46 < v52)
    {
      v55 = *v46++;
      v54 = v55;
      v51 = v50 + v55;
      v56 = (double)v55;
      if (v55 > 0xFF)
        v57 = log2(v56);
      else
        v57 = kBrotliLog2Table[v54];
      v53 = v53 - v56 * v57;
LABEL_57:
      v61 = *v46++;
      v60 = v61;
      v50 = v51 + v61;
      v62 = (double)v61;
      if (v61 > 0xFF)
        v63 = log2(v62);
      else
        v63 = kBrotliLog2Table[v60];
      v53 = v53 - v62 * v63;
    }
    v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF)
        v59 = log2((double)v50);
      else
        v59 = kBrotliLog2Table[v50];
      v5 = v48;
      v53 = v53 + v58 * v59;
    }
    else
    {
      v5 = v48;
    }
    v3 = v44;
    v41 = 0;
    if (v53 >= v58)
      v64 = v53;
    else
      v64 = v58;
    *(double *)&v89[v40] = v64;
    *(&v87 + v40) = v64 - v11 - *(double *)&v86[v40];
    v40 = 1;
  }
  while ((v42 & 1) != 0);
  v4 = v82;
  v65 = *v82;
  a2 = v83;
  if (*v82 >= 0x100uLL)
  {
    v68 = v87;
    v67 = v88;
  }
  else
  {
    v66 = v44[2];
    v68 = v87;
    v67 = v88;
    if (v87 > v66 && v88 > v66)
    {
      *(_DWORD *)(v82[3] + 4 * v81) = *((_QWORD *)v44 + 556);
      *(_BYTE *)(v82[2] + v81) = v65;
      v44[559] = v44[558];
      *((_QWORD *)v44 + 558) = *(unsigned __int8 *)v82;
      v44[561] = v44[560];
      v44[560] = v11;
      ++*((_QWORD *)v44 + 3);
      ++*v82;
      v70 = *((_QWORD *)v44 + 557) + 1;
      *((_QWORD *)v44 + 557) = v70;
      if (v70 < **((_QWORD **)v44 + 6))
      {
        v71 = &v5[548 * v70];
        bzero(v71, 0x880uLL);
        *((_QWORD *)v71 + 272) = 0;
        *((_QWORD *)v71 + 273) = 0x7FF0000000000000;
      }
      v44[556] = 0.0;
LABEL_79:
      v44[562] = 0.0;
      v77 = *((_QWORD *)v44 + 1);
LABEL_84:
      *((_QWORD *)v44 + 555) = v77;
      goto LABEL_85;
    }
  }
  v72 = *((_DWORD *)v44 + 1112);
  v73 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v73 + 4 * v81) = v72;
    *(_BYTE *)(v82[2] + v81) = *(_BYTE *)(v82[2] + v81 - 2);
    v74 = *((_QWORD *)v44 + 558);
    v75 = *((_QWORD *)v44 + 559);
    *((_QWORD *)v44 + 558) = v75;
    *((_QWORD *)v44 + 559) = v74;
    memcpy(&v5[548 * v75], v44 + 281, 0x890uLL);
    v44[561] = v44[560];
    v44[560] = *(double *)&v89[1];
    ++*((_QWORD *)v44 + 3);
    v44[556] = 0.0;
    v76 = &v5[548 * *((_QWORD *)v44 + 557)];
    bzero(v76, 0x880uLL);
    *((_QWORD *)v76 + 272) = 0;
    *((_QWORD *)v76 + 273) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v73 + 4 * v81 - 4) += v72;
  memcpy(&v5[548 * *((_QWORD *)v44 + 558)], v44 + 7, 0x890uLL);
  v78 = v89[0];
  v44[560] = *(double *)v89;
  if (*v82 == 1)
    *((_QWORD *)v44 + 561) = v78;
  v44[556] = 0.0;
  v79 = &v5[548 * *((_QWORD *)v44 + 557)];
  bzero(v79, 0x880uLL);
  *((_QWORD *)v79 + 272) = 0;
  *((_QWORD *)v79 + 273) = 0x7FF0000000000000;
  v80 = *((_QWORD *)v44 + 562) + 1;
  *((_QWORD *)v44 + 562) = v80;
  if (v80 >= 2)
  {
    v77 = *((_QWORD *)v44 + 555) + *((_QWORD *)v44 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (a2)
  {
    **((_QWORD **)v3 + 6) = *v4;
    v4[1] = *((_QWORD *)v3 + 3);
  }
}

double BrotliInitBlockSplit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t BrotliDestroyBlockSplit(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  BrotliFree(a1);
  *(_QWORD *)(a2 + 16) = 0;
  result = BrotliFree(a1);
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t BrotliSplitBlock(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, size_t a5, size_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v17;
  unsigned int *v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  size_t v22;
  int *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  void *v60;
  size_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  double v76;
  char *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  double v82;
  uint64_t v83;
  double v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  double v88;
  double v89;
  double v90;
  unint64_t i;
  double v92;
  unsigned int v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned __int16 v97;
  uint64_t v98;
  uint64_t j;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *k;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  _DWORD *v119;
  char *v120;
  _DWORD *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t m;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  unint64_t v145;
  int *v146;
  _DWORD *v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  unsigned int *v154;
  uint64_t n;
  unint64_t v156;
  int *v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  double v163;
  double v164;
  unsigned int *v165;
  unint64_t v166;
  double v167;
  size_t v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  void *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  void *v176;
  _DWORD *v177;
  unsigned __int8 v178;
  uint64_t v179;
  int v180;
  _DWORD *v181;
  int v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int16 *v189;
  __int16 v190;
  unint64_t v191;
  _QWORD *v192;
  size_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  size_t v205;
  uint64_t v206;
  size_t v207;
  uint64_t v208;
  size_t v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  size_t v213;
  unint64_t v214;
  unint64_t v215;
  unsigned __int16 *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  char *v223;
  void *v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  unsigned int *v237;
  unint64_t v238;
  double v239;
  char *v240;
  unsigned int *v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  double v245;
  uint64_t v246;
  double v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  double v251;
  double v252;
  double v253;
  unint64_t ii;
  double v255;
  unsigned int v256;
  char *v257;
  size_t v258;
  uint64_t v259;
  unsigned __int16 v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  uint64_t v268;
  _DWORD *v269;
  uint64_t v270;
  unsigned __int8 *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _DWORD *v280;
  char *v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  unsigned __int16 *v292;
  unsigned int v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  char *v301;
  unint64_t v302;
  unint64_t v303;
  char *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  unint64_t v308;
  int *v309;
  _DWORD *v310;
  int v311;
  unint64_t v312;
  uint64_t v313;
  unsigned int *v314;
  uint64_t jj;
  char *v316;
  unint64_t v317;
  int *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  double v324;
  double v325;
  unsigned int *v326;
  unint64_t v327;
  double v328;
  _QWORD *v329;
  size_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  void *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  void *v340;
  _DWORD *v341;
  unsigned __int8 v342;
  uint64_t v343;
  int v344;
  _DWORD *v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unsigned __int16 *v352;
  unint64_t v353;
  _QWORD *v354;
  size_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  void *v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  void *v365;
  _QWORD *v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  _QWORD *v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  _QWORD *v378;
  unint64_t v379;
  unint64_t v380;
  unsigned __int16 *v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  char *v387;
  char *v388;
  void *v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  size_t v393;
  uint64_t v394;
  void *v395;
  uint64_t v396;
  unsigned int *v397;
  unint64_t v398;
  double v399;
  char *v400;
  unsigned int *v401;
  uint64_t v402;
  uint64_t v403;
  unsigned int *v404;
  double v405;
  uint64_t v406;
  double v407;
  unint64_t v408;
  uint64_t v409;
  char *v410;
  double v411;
  double v412;
  double v413;
  unint64_t kk;
  double v415;
  unsigned int v416;
  char *v417;
  unint64_t v418;
  uint64_t v419;
  unsigned __int16 v420;
  uint64_t v421;
  uint64_t mm;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  _QWORD *v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _DWORD *v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t nn;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  _DWORD *v442;
  char *v443;
  unint64_t v444;
  char *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  unsigned __int16 *v453;
  unsigned int v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  char *v461;
  uint64_t v462;
  char *v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  char *v467;
  uint64_t v468;
  char *v469;
  char *v470;
  int *v471;
  _DWORD *v472;
  int v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  _DWORD *v478;
  int *v479;
  size_t v480;
  uint64_t v481;
  unsigned int *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  double v490;
  double v491;
  unsigned int *v492;
  double v493;
  uint64_t v494;
  size_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  void *v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  void *v503;
  uint64_t v504;
  uint64_t v505;
  _DWORD *v506;
  unsigned __int8 v507;
  uint64_t v508;
  int v509;
  _DWORD *v510;
  int v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  char *v521;
  uint64_t v522;
  unsigned int *v524;
  unsigned int *v525;
  unsigned int *v526;
  _DWORD *v527;
  _DWORD *v528;
  char *v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  int v535[2];
  int v536[2];
  uint64_t v537;
  _DWORD *v538;
  unint64_t v539;
  _DWORD *v540;
  unint64_t v541;
  _DWORD *v542;
  uint64_t v543;
  char *__src;
  char *__srca;
  char *__srcb;
  char *__srcc;
  char *__srcd;
  void *__srce;
  char *v550;
  int v551[2];
  int v552[2];
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  unsigned int *v559;
  uint64_t v560;
  unint64_t v561;
  unint64_t v562;
  char *v563;
  void *v564;
  unsigned __int8 *v565;
  void *v566;
  char *v567;
  char *v568;
  char *v569;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  int v575[2];
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  _DWORD *v580;
  unint64_t v581;
  int *v582;
  unsigned int *v583;
  uint64_t v584;
  int *v585;
  void *v586;
  _DWORD *v587;
  unsigned int *v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  int *v593;
  unsigned int *v594;
  unint64_t v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  char *v604;
  uint64_t v605;
  uint64_t v606;
  void *v607;
  _QWORD *v608;
  uint64_t v609;
  _QWORD *v610;
  char *v611;
  _QWORD *v612;
  char *v613;
  unint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  void *v618;
  int *v619;
  uint64_t v620;
  void *v621;

  v11 = a3;
  v12 = a2;
  v13 = a1;
  if (!a3)
    goto LABEL_30;
  v17 = 0;
  v18 = (unsigned int *)v12;
  v19 = a3;
  do
  {
    v20 = *v18;
    v18 += 4;
    v17 += v20;
    --v19;
  }
  while (v19);
  v595 = v17;
  if (v17)
    v576 = BrotliAllocate(a1);
  else
    v576 = 0;
  v21 = 0;
  v22 = a6 + 1;
  v23 = (int *)(a2 + 4);
  v24 = v11;
  do
  {
    v25 = a5 & a6;
    v26 = *(v23 - 1);
    if (v25 + v26 > a6)
    {
      v27 = v22 - v25;
      memcpy((void *)(v576 + v21), (const void *)(a4 + v25), v22 - v25);
      v25 = 0;
      v21 += v27;
      v26 -= v27;
    }
    if (v26)
    {
      memcpy((void *)(v576 + v21), (const void *)(a4 + v25), v26);
      v21 += v26;
    }
    v28 = *v23;
    v23 += 4;
    a5 = v26 + v25 + (v28 & 0x1FFFFFF);
    --v24;
  }
  while (v24);
  v29 = v595;
  if (v595 >> 7 <= 0x1A8)
    v30 = (unsigned __int16)v595 / 0x220u + 1;
  else
    v30 = 100;
  if (!v595)
  {
    v13 = a1;
    v11 = a3;
    v12 = a2;
LABEL_30:
    *(_QWORD *)a8 = 1;
    goto LABEL_248;
  }
  if (v595 <= 0x7F)
  {
    v31 = *(_QWORD *)(a8 + 32);
    v32 = *(_QWORD *)(a8 + 8);
    v33 = v32 + 1;
    if (v31 >= v32 + 1)
    {
      v13 = a1;
      v11 = a3;
      v12 = a2;
LABEL_56:
      v63 = *(_QWORD *)(a8 + 40);
      if (v63 >= v33)
      {
LABEL_65:
        *(_QWORD *)a8 = 1;
        *(_BYTE *)(*(_QWORD *)(a8 + 16) + v32) = 0;
        v67 = *(_QWORD *)(a8 + 8);
        *(_DWORD *)(*(_QWORD *)(a8 + 24) + 4 * v67) = v29;
        *(_QWORD *)(a8 + 8) = v67 + 1;
        goto LABEL_248;
      }
      if (v63)
        v64 = *(_QWORD *)(a8 + 40);
      else
        v64 = v33;
      do
      {
        v65 = v64;
        v64 *= 2;
      }
      while (v65 < v33);
      if (v65)
      {
        v66 = (void *)BrotliAllocate(v13);
        v63 = *(_QWORD *)(a8 + 40);
        if (!v63)
        {
LABEL_64:
          BrotliFree(v13);
          *(_QWORD *)(a8 + 24) = v66;
          *(_QWORD *)(a8 + 40) = v65;
          v32 = *(_QWORD *)(a8 + 8);
          v29 = v595;
          goto LABEL_65;
        }
      }
      else
      {
        v66 = 0;
        if (!v63)
          goto LABEL_64;
      }
      memcpy(v66, *(const void **)(a8 + 24), 4 * v63);
      goto LABEL_64;
    }
    if (v31)
      v34 = *(_QWORD *)(a8 + 32);
    else
      v34 = v32 + 1;
    v13 = a1;
    v11 = a3;
    do
    {
      v35 = v34;
      v34 *= 2;
    }
    while (v35 < v33);
    v12 = a2;
    if (v35)
    {
      v36 = (void *)BrotliAllocate(a1);
      v31 = *(_QWORD *)(a8 + 32);
      if (!v31)
      {
LABEL_28:
        BrotliFree(a1);
        *(_QWORD *)(a8 + 16) = v36;
        *(_QWORD *)(a8 + 32) = v35;
        v32 = *(_QWORD *)(a8 + 8);
        v33 = v32 + 1;
        v29 = v595;
        goto LABEL_56;
      }
    }
    else
    {
      v36 = 0;
      if (!v31)
        goto LABEL_28;
    }
    memcpy(v36, *(const void **)(a8 + 16), v31);
    goto LABEL_28;
  }
  v37 = (_QWORD *)BrotliAllocate(a1);
  v610 = v37;
  v38 = v30;
  do
  {
    bzero(v37, 0x400uLL);
    v37[128] = 0;
    v37[129] = 0x7FF0000000000000;
    v37 += 130;
    --v38;
  }
  while (v38);
  v39 = 0;
  LODWORD(v40) = 7;
  do
  {
    v41 = v39 * v595 / v30;
    if (v39)
    {
      v40 = (16807 * v40);
      v41 += v40 % (v595 / v30);
    }
    v42 = 0;
    if (v41 + 70 >= v595)
      v43 = v595 - 71;
    else
      v43 = v41;
    v44 = &v610[130 * v39];
    v45 = v576 + v43;
    v44[128] += 70;
    do
      ++*((_DWORD *)v44 + *(unsigned __int8 *)(v45 + v42++));
    while (v42 != 70);
    ++v39;
  }
  while (v39 != v30);
  v518 = a8;
  v46 = v30 + 2 * v595 / 0x46 + 99 - (v30 + 2 * v595 / 0x46 + 99) % v30;
  if (v46)
  {
    v47 = 0;
    v48 = &v610[130 * v30];
    if (v46 <= 1)
      v49 = 1;
    else
      v49 = v30 + 2 * v595 / 0x46 + 99 - (v30 + 2 * v595 / 0x46 + 99) % v30;
    LODWORD(v50) = 7;
    do
    {
      bzero(v48, 0x400uLL);
      v48[129] = 0x7FF0000000000000;
      v50 = (16807 * v50);
      v51 = (unsigned __int8 *)(v576 + v50 % (v595 - 69));
      v48[128] = 70;
      v52 = -70;
      do
      {
        v53 = *v51++;
        ++*((_DWORD *)v48 + v53);
        v54 = __CFADD__(v52++, 1);
      }
      while (!v54);
      v55 = 0;
      v56 = 0;
      v57 = &v610[130 * (v47 % v30)];
      v57[128] += 70;
      do
      {
        *((_DWORD *)v57 + v56++) += *(_DWORD *)((char *)v48 + v55);
        v55 += 4;
      }
      while (v55 != 1024);
      ++v47;
    }
    while (v47 != v49);
  }
  v58 = BrotliAllocate(a1);
  v59 = (char *)BrotliAllocate(a1);
  v60 = (void *)BrotliAllocate(a1);
  v61 = v595;
  if (((v30 + 7) >> 3) * v595)
    v62 = (char *)BrotliAllocate(a1);
  else
    v62 = 0;
  v68 = BrotliAllocate(a1);
  v69 = (void *)v68;
  v70 = 0;
  v71 = 3;
  if (*(int *)(a7 + 4) > 10)
    v71 = 10;
  v579 = v71;
  v563 = (char *)(v595 - 1);
  __src = (char *)(v58 - 2);
  v520 = (char *)v58;
  v586 = (void *)v68;
  do
  {
    v603 = v70;
    if (v30 > 1)
    {
      bzero(v59, v30 << 11);
      v73 = 0;
      v74 = (unsigned int *)(v610 + 128);
      do
      {
        v75 = *v74;
        if (v75 > 0xFF)
          v76 = log2((double)v75);
        else
          v76 = kBrotliLog2Table[v75];
        v74 += 260;
        *(double *)&v59[8 * v73++] = v76;
      }
      while (v30 != v73);
      v571 = (v30 + 7) >> 3;
      v77 = &v59[2040 * v30];
      v78 = (unsigned int *)v610 + 255;
      v79 = 256;
      do
      {
        v80 = 0;
        --v79;
        v81 = v78;
        do
        {
          v82 = *(double *)&v59[8 * v80];
          v83 = *v81;
          if ((_DWORD)v83)
          {
            if (v83 > 0xFF)
              v84 = log2((double)v83);
            else
              v84 = kBrotliLog2Table[v83];
          }
          else
          {
            v84 = -2.0;
          }
          v81 += 260;
          *(double *)&v77[8 * v80++] = v82 - v84;
        }
        while (v30 != v80);
        v77 -= 8 * v30;
        --v78;
      }
      while (v79);
      bzero(v60, 8 * v30);
      v61 = v595;
      bzero(v62, v571 * v595);
      v85 = 0;
      v58 = (uint64_t)v520;
      do
      {
        v86 = 0;
        v87 = &v59[8 * v30 * *(unsigned __int8 *)(v576 + v85)];
        v88 = 1.0e99;
        do
        {
          v89 = *(double *)&v87[8 * v86] + *((double *)v60 + v86);
          *((double *)v60 + v86) = v89;
          if (v89 < v88)
          {
            v520[v85] = v86;
            v88 = v89;
          }
          ++v86;
        }
        while (v30 != v86);
        v90 = 28.1;
        if (v85 <= 0x7CF)
          v90 = ((double)v85 * 0.07 / 2000.0 + 0.77) * 28.1;
        for (i = 0; i != v30; ++i)
        {
          v92 = *((double *)v60 + i) - v88;
          *((double *)v60 + i) = v92;
          if (v92 >= v90)
          {
            *((double *)v60 + i) = v90;
            v62[v85 * v571 + (i >> 3)] |= 1 << (i & 7);
          }
        }
        ++v85;
      }
      while (v85 != v595);
      v93 = v563[(_QWORD)v520];
      v94 = &v62[(v595 - 2) * v571];
      v95 = v595;
      v72 = 1;
      v69 = v586;
      do
      {
        if (((v94[(unint64_t)v93 >> 3] >> (v93 & 7)) & 1) != 0)
        {
          if (v93 != __src[v95])
            ++v72;
          v93 = __src[v95];
        }
        v94 -= v571;
        __src[v95--] = v93;
      }
      while (v95 != 1);
    }
    else
    {
      bzero((void *)v58, v61);
      v72 = 1;
    }
    if (v30)
      memset_pattern16(v69, &unk_19CFFDD00, 2 * v30);
    v96 = 0;
    v97 = 0;
    do
    {
      v98 = *(unsigned __int8 *)(v58 + v96);
      if (*((_WORD *)v69 + v98) == 256)
        *((_WORD *)v69 + v98) = v97++;
      ++v96;
    }
    while (v61 != v96);
    for (j = 0; j != v61; ++j)
      *(_BYTE *)(v58 + j) = *((_WORD *)v69 + *(unsigned __int8 *)(v58 + j));
    v30 = v97;
    if (v97)
    {
      v100 = v610;
      v101 = v97;
      do
      {
        bzero(v100, 0x400uLL);
        v100[128] = 0;
        v100[129] = 0x7FF0000000000000;
        v100 += 130;
        --v101;
      }
      while (v101);
    }
    v102 = 0;
    v61 = v595;
    v103 = v576;
    do
    {
      v104 = &v610[130 * *(unsigned __int8 *)(v58 + v102)];
      ++*((_DWORD *)v104 + *(unsigned __int8 *)(v576 + v102));
      ++v104[128];
      ++v102;
    }
    while (v595 != v102);
    v70 = v603 + 1;
    v69 = v586;
  }
  while (v603 + 1 != v579);
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  if (v72)
  {
    v105 = BrotliAllocate(a1);
    v106 = v72 + 256;
    if (v72 == -256)
    {
      v580 = 0;
      v107 = 0x3FFFFFFFFFFFFCFLL;
      goto LABEL_124;
    }
  }
  else
  {
    v105 = 0;
    v106 = 256;
  }
  v580 = (_DWORD *)BrotliAllocate(a1);
  v108 = 16 * v72 + 1008;
  v107 = v108 >> 6;
  if (v108 < 0x40)
  {
    v554 = v108 >> 6;
    v611 = 0;
    v550 = 0;
    goto LABEL_125;
  }
LABEL_124:
  v109 = v107;
  v611 = (char *)BrotliAllocate(a1);
  v554 = v109;
  v550 = (char *)BrotliAllocate(a1);
LABEL_125:
  v110 = 64;
  if (v72 < 0x40)
    v110 = v72;
  if (v110)
    v111 = BrotliAllocate(a1);
  else
    v111 = 0;
  v525 = (unsigned int *)BrotliAllocate(a1);
  v604 = (char *)(v580 + 256);
  v112 = (uint64_t)v580;
  v113 = BrotliAllocate(a1);
  bzero(v580, 4 * v106);
  v114 = 0;
  for (k = 0; k != (char *)v595; ++k)
  {
    ++*(_DWORD *)&v604[4 * v114];
    if (v563 == k || k[v58] != k[v58 + 1])
      ++v114;
  }
  v528 = (_DWORD *)v105;
  __srca = (char *)v72;
  if (v72)
  {
    v116 = (char *)v72;
    v117 = 0;
    v617 = 0;
    v118 = 0;
    v558 = 0;
    v564 = 0;
    v587 = v580 + 128;
    v119 = v580 + 64;
    v120 = (char *)(v580 + 192);
    v121 = v528;
    v122 = (unint64_t)v116;
    v532 = v554;
    v596 = v111;
    do
    {
      v123 = v122 - 64;
      if (v122 >= 0x40)
        v124 = 64;
      else
        v124 = v122;
      v125 = (uint64_t)&v116[-v117];
      if ((unint64_t)&v116[-v117] >= 0x40)
        v125 = 64;
      v572 = v125;
      v538 = v121;
      v541 = v118;
      *(_QWORD *)v535 = v123;
      if (v125)
      {
        v126 = 0;
        do
        {
          v127 = *(unsigned int *)&v604[4 * v126 + 4 * v117];
          v128 = (_QWORD *)(v111 + 1040 * v126);
          bzero(v128, 0x400uLL);
          v128[128] = 0;
          v128[129] = 0x7FF0000000000000;
          if ((_DWORD)v127)
          {
            for (m = 0; m != v127; v128[128] = m)
              ++*((_DWORD *)v128 + *(unsigned __int8 *)(v103 + v617 + m++));
            v617 += v127;
          }
          BrotliPopulationCostLiteral((uint64_t)v128);
          v128[129] = v130;
          v119[v126] = v126;
          v112 = (uint64_t)v580;
          v587[v126] = v126;
          v580[v126++] = 1;
          v111 = v596;
        }
        while (v126 != v124);
      }
      v131 = BrotliHistogramCombineLiteral(v111, (char *)v113, v112, v587, v119, v525, v572, v572, 0x40uLL, 0x800uLL);
      v132 = v131;
      v133 = v532;
      if (v532 < v131 + v558)
      {
        if (v532)
          v134 = v532;
        else
          v134 = v131 + v558;
        do
        {
          v135 = v134;
          v134 *= 2;
        }
        while (v135 < v131 + v558);
        if (v135)
        {
          v136 = BrotliAllocate(a1);
          v133 = v532;
          v137 = (char *)v136;
        }
        else
        {
          v137 = 0;
        }
        if (v133)
          memcpy(v137, v611, 1040 * v133);
        BrotliFree(a1);
        v532 = v135;
        v611 = v137;
        v103 = v576;
      }
      v138 = v554;
      if (v554 >= (unint64_t)v564 + v132)
      {
        v140 = v550;
      }
      else
      {
        if (!v554)
          v138 = (uint64_t)v564 + v132;
        do
        {
          v139 = (char *)v138;
          v138 *= 2;
        }
        while (v139 < (char *)v564 + v132);
        if (v139)
          v140 = (char *)BrotliAllocate(a1);
        else
          v140 = 0;
        if (v554)
          memcpy(v140, v550, 4 * v554);
        BrotliFree(a1);
        v138 = (uint64_t)v139;
        v103 = v576;
      }
      v550 = v140;
      v554 = v138;
      if (v132)
      {
        v141 = 0;
        v142 = v112;
        v143 = &v140[4 * (_QWORD)v564];
        v144 = &v611[1040 * v558];
        do
        {
          memcpy(v144, (const void *)(v596 + 1040 * v119[v141]), 0x410uLL);
          *(_DWORD *)&v143[4 * v141] = *(_DWORD *)(v142 + 4 * v119[v141]);
          *(_DWORD *)&v120[4 * v119[v141]] = v141;
          ++v141;
          v144 += 1040;
        }
        while (v132 != v141);
        v564 = (char *)v564 + v141;
        v558 += v141;
        v103 = v576;
        v112 = v142;
        v145 = v541;
      }
      else
      {
        v145 = v541;
      }
      if (v572)
      {
        v146 = v580 + 128;
        v147 = v538;
        do
        {
          v148 = *v146++;
          *v147++ = *(_DWORD *)&v120[4 * v148] + v145;
          --v124;
        }
        while (v124);
      }
      v118 = v132 + v145;
      v117 += 64;
      v121 = v538 + 64;
      v122 = *(_QWORD *)v535;
      v116 = __srca;
      v111 = v596;
    }
    while (v117 < (unint64_t)__srca);
  }
  else
  {
    v118 = 0;
  }
  v149 = v118;
  BrotliFree(a1);
  v150 = v149;
  if (v149 << 6 >= (v149 >> 1) * v149)
    v151 = (v149 >> 1) * v149;
  else
    v151 = v149 << 6;
  if (v151 >= 0x801)
  {
    BrotliFree(a1);
    v525 = (unsigned int *)BrotliAllocate(a1);
  }
  v152 = v528;
  if (v150)
  {
    v153 = BrotliAllocate(a1);
    v154 = (unsigned int *)v153;
    for (n = 0; n != v150; ++n)
      *(_DWORD *)(v153 + 4 * n) = n;
  }
  else
  {
    v154 = 0;
  }
  v588 = v154;
  v156 = BrotliHistogramCombineLiteral((uint64_t)v611, (char *)v113, (uint64_t)v550, v528, v154, v525, v150, (uint64_t)__srca, 0x100uLL, v151);
  BrotliFree(a1);
  BrotliFree(a1);
  if (v150)
  {
    v618 = (void *)BrotliAllocate(a1);
    memset(v618, 255, 4 * v150);
  }
  else
  {
    v618 = 0;
  }
  v157 = v580 + 256;
  if (__srca)
  {
    v597 = 0;
    v158 = 0;
    v159 = 0;
    do
    {
      bzero((void *)v113, 0x400uLL);
      *(_QWORD *)(v113 + 1024) = 0;
      *(_QWORD *)(v113 + 1032) = 0x7FF0000000000000;
      if (v157[(_QWORD)v158])
      {
        v160 = 0;
        do
        {
          ++*(_DWORD *)(v113 + 4 * *(unsigned __int8 *)(v103 + v159 + v160++));
          *(_QWORD *)(v113 + 1024) = v160;
        }
        while (v160 < v157[(_QWORD)v158]);
        v159 += v160;
      }
      v161 = (char *)v158 - 1;
      if (!v158)
        v161 = 0;
      v162 = v152[(_QWORD)v161];
      v163 = BrotliHistogramBitCostDistanceLiteral((_QWORD *)v113, (uint64_t)&v611[1040 * v162], (char *)(v113 + 1040));
      if (v156)
      {
        v164 = v163;
        v165 = v588;
        v166 = v156;
        do
        {
          v167 = BrotliHistogramBitCostDistanceLiteral((_QWORD *)v113, (uint64_t)&v611[1040 * *v165], (char *)(v113 + 1040));
          if (v167 < v164)
          {
            v162 = *v165;
            v164 = v167;
          }
          ++v165;
          --v166;
        }
        while (v166);
      }
      v152 = v528;
      v528[(_QWORD)v158] = v162;
      if (*((_DWORD *)v618 + v162) == -1)
        *((_DWORD *)v618 + v162) = v597++;
      v157 = v580 + 256;
      v158 = (char *)v158 + 1;
    }
    while (v158 != __srca);
  }
  BrotliFree(a1);
  BrotliFree(a1);
  v13 = a1;
  BrotliFree(a1);
  v168 = *(_QWORD *)(v518 + 32);
  v169 = __srca;
  v11 = a3;
  v12 = a2;
  if (v168 < (unint64_t)__srca)
  {
    if (v168)
      v170 = *(_QWORD *)(v518 + 32);
    else
      v170 = (unint64_t)__srca;
    do
    {
      v171 = v170;
      v170 *= 2;
    }
    while (v171 < (unint64_t)__srca);
    if (v171)
    {
      v172 = (void *)BrotliAllocate(a1);
      v168 = *(_QWORD *)(v518 + 32);
      if (!v168)
      {
LABEL_219:
        BrotliFree(a1);
        *(_QWORD *)(v518 + 16) = v172;
        *(_QWORD *)(v518 + 32) = v171;
        v152 = v528;
        goto LABEL_220;
      }
    }
    else
    {
      v172 = 0;
      if (!v168)
        goto LABEL_219;
    }
    memcpy(v172, *(const void **)(v518 + 16), v168);
    goto LABEL_219;
  }
LABEL_220:
  v173 = *(_QWORD *)(v518 + 40);
  if (v173 < (unint64_t)__srca)
  {
    if (v173)
      v174 = *(_QWORD *)(v518 + 40);
    else
      v174 = (unint64_t)__srca;
    do
    {
      v175 = v174;
      v174 *= 2;
    }
    while (v175 < (unint64_t)__srca);
    if (v175)
    {
      v176 = (void *)BrotliAllocate(a1);
      v173 = *(_QWORD *)(v518 + 40);
      if (!v173)
      {
LABEL_228:
        BrotliFree(a1);
        *(_QWORD *)(v518 + 24) = v176;
        *(_QWORD *)(v518 + 40) = v175;
        v157 = v580 + 256;
        v177 = v618;
        goto LABEL_230;
      }
    }
    else
    {
      v176 = 0;
      if (!v173)
        goto LABEL_228;
    }
    memcpy(v176, *(const void **)(v518 + 24), 4 * v173);
    goto LABEL_228;
  }
  v177 = v618;
  if (__srca)
  {
LABEL_230:
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = v152 + 1;
    do
    {
      v182 = *v157++;
      v180 += v182;
      v183 = *(v181 - 1);
      if (v169 == (char *)1 || (_DWORD)v183 != *v181)
      {
        v184 = v177[v183];
        *(_BYTE *)(*(_QWORD *)(v518 + 16) + v179) = v184;
        *(_DWORD *)(*(_QWORD *)(v518 + 24) + 4 * v179) = v180;
        if (v178 <= v184)
          v178 = v184;
        ++v179;
        v180 = 0;
      }
      ++v181;
      --v169;
    }
    while (v169);
    goto LABEL_247;
  }
  v179 = 0;
  v178 = 0;
LABEL_247:
  *(_QWORD *)v518 = v178 + 1;
  *(_QWORD *)(v518 + 8) = v179;
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
LABEL_248:
  BrotliFree(v13);
  if (!v11)
  {
    *a9 = 1;
    BrotliFree(v13);
LABEL_504:
    *(_QWORD *)a10 = 1;
    return BrotliFree(v13);
  }
  v186 = BrotliAllocate(v13);
  v187 = v186;
  v188 = 0;
  v189 = (__int16 *)(v12 + 12);
  do
  {
    v190 = *v189;
    v189 += 8;
    *(_WORD *)(v186 + 2 * v188++) = v190;
  }
  while (v11 != v188);
  if (v11 <= 0x6783)
    v191 = (unsigned __int16)v11 / 0x212u + 1;
  else
    v191 = 50;
  if (v11 >= 0x80)
  {
    v200 = BrotliAllocate(a1);
    v201 = (_QWORD *)v200;
    v202 = v191;
    do
    {
      bzero(v201, 0xB00uLL);
      v201[352] = 0;
      v201[353] = 0x7FF0000000000000;
      v201 += 354;
      --v202;
    }
    while (v202);
    v203 = 0;
    LODWORD(v204) = 7;
    do
    {
      v205 = v203 * v11 / v191;
      if (v203)
      {
        v204 = (16807 * v204);
        v205 += v204 % (v11 / v191);
      }
      v206 = 0;
      if (v205 + 40 >= v11)
        v207 = v11 - 41;
      else
        v207 = v205;
      v208 = v200 + 2832 * v203;
      v209 = v187 + 2 * v207;
      *(_QWORD *)(v208 + 2816) += 40;
      do
      {
        ++*(_DWORD *)(v208 + 4 * *(unsigned __int16 *)(v209 + v206));
        v206 += 2;
      }
      while (v206 != 80);
      ++v203;
    }
    while (v203 != v191);
    v185 = 2 * v11;
    v210 = v191 + v185 / 0x28 + 99 - (v191 + v185 / 0x28 + 99) % v191;
    v577 = v187;
    v612 = (_QWORD *)v200;
    if (v210)
    {
      v211 = 0;
      v212 = (_QWORD *)(v200 + 2832 * v191);
      v213 = v11 - 39;
      if (v210 <= 1)
        v214 = 1;
      else
        v214 = v191 + v185 / 0x28 + 99 - (v191 + v185 / 0x28 + 99) % v191;
      LODWORD(v215) = 7;
      do
      {
        bzero(v212, 0xB00uLL);
        v215 = (16807 * v215);
        v216 = (unsigned __int16 *)(v577 + 2 * (v215 % v213));
        v212[352] = 40;
        v217 = -40;
        do
        {
          v218 = *v216++;
          ++*((_DWORD *)v212 + v218);
          v54 = __CFADD__(v217++, 1);
        }
        while (!v54);
        v219 = 0;
        v220 = 0;
        v221 = &v612[354 * (v211 % v191)];
        v221[352] += 40;
        do
        {
          *((_DWORD *)v221 + v220++) += *(_DWORD *)((char *)v212 + v219);
          v219 += 4;
        }
        while (v219 != 2816);
        ++v211;
      }
      while (v211 != v214);
      v200 = (uint64_t)v612;
      v212[353] = 0x7FF0000000000000;
      v11 = a3;
      v187 = v577;
    }
    v222 = BrotliAllocate(a1);
    v223 = (char *)BrotliAllocate(a1);
    v224 = (void *)BrotliAllocate(a1);
    if (((v191 + 7) >> 3) * v11)
      v225 = (char *)BrotliAllocate(a1);
    else
      v225 = 0;
    v598 = BrotliAllocate(a1);
    v232 = 0;
    v233 = 3;
    if (*(int *)(a7 + 4) > 10)
      v233 = 10;
    v589 = v233;
    v559 = (unsigned int *)(v200 + 2816);
    v565 = (unsigned __int8 *)(v11 - 1);
    *(_QWORD *)v551 = v11 - 2;
    v555 = v200 + 2812;
    v521 = (char *)v222;
    __srcb = (char *)(v222 - 2);
    do
    {
      v605 = v232;
      if (v191 > 1)
      {
        v581 = (v191 + 7) >> 3;
        bzero(v223, 5632 * v191);
        v236 = 0;
        v237 = v559;
        do
        {
          v238 = *v237;
          if (v238 > 0xFF)
            v239 = log2((double)v238);
          else
            v239 = kBrotliLog2Table[v238];
          v237 += 708;
          *(double *)&v223[8 * v236++] = v239;
        }
        while (v191 != v236);
        v240 = &v223[5624 * v191];
        v241 = (unsigned int *)v555;
        v242 = 704;
        do
        {
          v243 = 0;
          --v242;
          v244 = v241;
          do
          {
            v245 = *(double *)&v223[8 * v243];
            v246 = *v244;
            if ((_DWORD)v246)
            {
              if (v246 > 0xFF)
                v247 = log2((double)v246);
              else
                v247 = kBrotliLog2Table[v246];
            }
            else
            {
              v247 = -2.0;
            }
            v244 += 708;
            *(double *)&v240[8 * v243++] = v245 - v247;
          }
          while (v191 != v243);
          v240 -= 8 * v191;
          --v241;
        }
        while (v242);
        bzero(v224, 8 * v191);
        v11 = a3;
        bzero(v225, v581 * a3);
        v248 = 0;
        v187 = v577;
        v222 = (uint64_t)v521;
        do
        {
          v249 = 0;
          v250 = &v223[8 * v191 * *(unsigned __int16 *)(v577 + 2 * v248)];
          v251 = 1.0e99;
          do
          {
            v252 = *(double *)&v250[8 * v249] + *((double *)v224 + v249);
            *((double *)v224 + v249) = v252;
            if (v252 < v251)
            {
              v521[v248] = v249;
              v251 = v252;
            }
            ++v249;
          }
          while (v191 != v249);
          v253 = 13.5;
          if (v248 <= 0x7CF)
            v253 = ((double)v248 * 0.07 / 2000.0 + 0.77) * 13.5;
          for (ii = 0; ii != v191; ++ii)
          {
            v255 = *((double *)v224 + ii) - v251;
            *((double *)v224 + ii) = v255;
            if (v255 >= v253)
            {
              *((double *)v224 + ii) = v253;
              v225[v248 * v581 + (ii >> 3)] |= 1 << (ii & 7);
            }
          }
          ++v248;
        }
        while (v248 != a3);
        v256 = v565[(_QWORD)v521];
        v257 = &v225[*(_QWORD *)v551 * v581];
        v258 = a3;
        v234 = 1;
        v235 = (void *)v598;
        do
        {
          if (((v257[(unint64_t)v256 >> 3] >> (v256 & 7)) & 1) != 0)
          {
            if (v256 != __srcb[v258])
              ++v234;
            v256 = __srcb[v258];
          }
          v257 -= v581;
          __srcb[v258--] = v256;
        }
        while (v258 != 1);
      }
      else
      {
        bzero((void *)v222, v11);
        v234 = 1;
        v235 = (void *)v598;
      }
      if (v191)
        memset_pattern16(v235, &unk_19CFFDD00, 2 * v191);
      v259 = 0;
      v260 = 0;
      do
      {
        v261 = *(unsigned __int8 *)(v222 + v259);
        if (*((_WORD *)v235 + v261) == 256)
          *((_WORD *)v235 + v261) = v260++;
        ++v259;
      }
      while (v11 != v259);
      v573 = v234;
      v262 = 0;
      do
      {
        *(_BYTE *)(v222 + v262) = *((_WORD *)v235 + *(unsigned __int8 *)(v222 + v262));
        ++v262;
      }
      while (v11 != v262);
      v191 = v260;
      if (v260)
      {
        v263 = v612;
        v264 = v260;
        do
        {
          bzero(v263, 0xB00uLL);
          v263[352] = 0;
          v263[353] = 0x7FF0000000000000;
          v263 += 354;
          --v264;
        }
        while (v264);
      }
      v265 = 0;
      do
      {
        v266 = &v612[354 * *(unsigned __int8 *)(v222 + v265)];
        ++*((_DWORD *)v266 + *(unsigned __int16 *)(v187 + 2 * v265));
        ++v266[352];
        ++v265;
      }
      while (v11 != v265);
      v232 = v605 + 1;
      v267 = v573;
    }
    while (v605 + 1 != v589);
    BrotliFree(a1);
    BrotliFree(a1);
    BrotliFree(a1);
    BrotliFree(a1);
    BrotliFree(a1);
    if (v573)
    {
      v542 = (_DWORD *)BrotliAllocate(a1);
      v268 = v573 + 256;
      if (v573 == -256)
      {
        v269 = 0;
        v270 = 0x3FFFFFFFFFFFFCFLL;
        v271 = v565;
        goto LABEL_361;
      }
    }
    else
    {
      v542 = 0;
      v268 = 256;
    }
    v271 = v565;
    v269 = (_DWORD *)BrotliAllocate(a1);
    v272 = 16 * v573 + 1008;
    v539 = v272 >> 6;
    if (v272 < 0x40)
    {
      v613 = 0;
      __srcc = 0;
      goto LABEL_362;
    }
    v270 = v272 >> 6;
LABEL_361:
    v613 = (char *)BrotliAllocate(a1);
    v539 = v270;
    __srcc = (char *)BrotliAllocate(a1);
LABEL_362:
    v273 = 64;
    if (v573 < 0x40)
      v273 = v573;
    if (v273)
      v590 = BrotliAllocate(a1);
    else
      v590 = 0;
    v526 = (unsigned int *)BrotliAllocate(a1);
    v619 = v269 + 256;
    v274 = BrotliAllocate(a1);
    bzero(v269, 4 * v268);
    v275 = 0;
    v276 = 0;
    do
    {
      ++v619[v275];
      if (v271 == v276 || v276[v222] != v276[v222 + 1])
        ++v275;
      ++v276;
    }
    while ((unsigned __int8 *)v11 != v276);
    v599 = (uint64_t)v269;
    if (v573)
    {
      v277 = 0;
      v278 = 0;
      v279 = 0;
      v556 = 0;
      v560 = 0;
      v582 = v269 + 128;
      v280 = v269 + 64;
      v281 = (char *)(v269 + 192);
      *(_QWORD *)v552 = v542;
      v282 = v573;
      v530 = v539;
      v519 = v274;
      do
      {
        v283 = v282 - 64;
        if (v282 >= 0x40)
          v284 = 64;
        else
          v284 = v282;
        v285 = v267 - v277;
        if (v267 - v277 >= 0x40)
          v285 = 64;
        v566 = (void *)v285;
        v533 = v279;
        *(_QWORD *)v536 = v283;
        if (v285)
        {
          v286 = 0;
          v287 = v278;
          v288 = v590;
          do
          {
            v289 = v619[v286 + v277];
            v290 = (_QWORD *)(v288 + 2832 * v286);
            bzero(v290, 0xB00uLL);
            v290[352] = 0;
            v290[353] = 0x7FF0000000000000;
            if ((_DWORD)v289)
            {
              v291 = v289;
              v292 = (unsigned __int16 *)(v577 + 2 * v287);
              do
              {
                v293 = *v292++;
                ++*((_DWORD *)v290 + v293);
                --v291;
              }
              while (v291);
              v290[352] = v289;
              v606 = v287 + v289;
              v287 += v289;
            }
            else
            {
              v606 = v287;
            }
            BrotliPopulationCostCommand((uint64_t)v290);
            v290[353] = v294;
            v280[v286] = v286;
            v288 = v590;
            v582[v286] = v286;
            *(_DWORD *)(v599 + 4 * v286++) = 1;
          }
          while (v286 != v284);
        }
        else
        {
          v606 = v278;
          v288 = v590;
        }
        v295 = BrotliHistogramCombineCommand(v288, (char *)v274, v599, v582, v280, v526, (unint64_t)v566, (uint64_t)v566, 0x40uLL, 0x800uLL);
        v296 = v295;
        v297 = v530;
        if (v530 < v295 + v556)
        {
          if (v530)
            v298 = v530;
          else
            v298 = v295 + v556;
          do
          {
            v299 = v298;
            v298 *= 2;
          }
          while (v299 < v295 + v556);
          if (v299)
          {
            v300 = BrotliAllocate(a1);
            v297 = v530;
            v301 = (char *)v300;
          }
          else
          {
            v301 = 0;
          }
          if (v297)
            memcpy(v301, v613, 2832 * v297);
          BrotliFree(a1);
          v530 = v299;
          v613 = v301;
        }
        v302 = v539;
        v278 = v606;
        if (v539 >= v296 + v560)
        {
          v187 = v577;
          v304 = __srcc;
        }
        else
        {
          if (!v539)
            v302 = v296 + v560;
          do
          {
            v303 = v302;
            v302 *= 2;
          }
          while (v303 < v296 + v560);
          if (v303)
            v304 = (char *)BrotliAllocate(a1);
          else
            v304 = 0;
          v187 = v577;
          if (v539)
            memcpy(v304, __srcc, 4 * v539);
          BrotliFree(a1);
          v539 = v303;
          v278 = v606;
        }
        __srcc = v304;
        if (v296)
        {
          v305 = 0;
          v306 = &v304[4 * v560];
          v307 = &v613[2832 * v556];
          do
          {
            memcpy(v307, (const void *)(v590 + 2832 * v280[v305]), 0xB10uLL);
            *(_DWORD *)&v306[4 * v305] = *(_DWORD *)(v599 + 4 * v280[v305]);
            *(_DWORD *)&v281[4 * v280[v305]] = v305;
            ++v305;
            v307 += 2832;
          }
          while (v296 != v305);
          v560 += v305;
          v556 += v305;
          v187 = v577;
          v308 = v533;
          v274 = v519;
          v278 = v606;
        }
        else
        {
          v308 = v533;
        }
        if (v566)
        {
          v309 = v582;
          v310 = *(_DWORD **)v552;
          do
          {
            v311 = *v309++;
            *v310++ = *(_DWORD *)&v281[4 * v311] + v308;
            --v284;
          }
          while (v284);
        }
        v279 = v296 + v308;
        v277 += 64;
        *(_QWORD *)v552 += 256;
        v282 = *(_QWORD *)v536;
        v267 = v573;
      }
      while (v277 < v573);
    }
    else
    {
      v279 = 0;
    }
    BrotliFree(a1);
    if (v279 << 6 >= (v279 >> 1) * v279)
      v312 = (v279 >> 1) * v279;
    else
      v312 = v279 << 6;
    if (v312 >= 0x801)
    {
      BrotliFree(a1);
      v526 = (unsigned int *)BrotliAllocate(a1);
    }
    if (v279)
    {
      v313 = BrotliAllocate(a1);
      v314 = (unsigned int *)v313;
      for (jj = 0; jj != v279; ++jj)
        *(_DWORD *)(v313 + 4 * jj) = jj;
    }
    else
    {
      v314 = 0;
    }
    v316 = v613;
    v317 = BrotliHistogramCombineCommand((uint64_t)v613, (char *)v274, (uint64_t)__srcc, v542, v314, v526, v279, v573, 0x100uLL, v312);
    BrotliFree(a1);
    BrotliFree(a1);
    v583 = v314;
    if (v279)
    {
      v607 = (void *)BrotliAllocate(a1);
      memset(v607, 255, 4 * v279);
    }
    else
    {
      v607 = 0;
    }
    v318 = v619;
    if (v573)
    {
      v591 = 0;
      v319 = 0;
      v320 = 0;
      do
      {
        bzero((void *)v274, 0xB00uLL);
        *(_QWORD *)(v274 + 2816) = 0;
        *(_QWORD *)(v274 + 2824) = 0x7FF0000000000000;
        if (v318[v319])
        {
          v321 = 0;
          do
            ++*(_DWORD *)(v274 + 4 * *(unsigned __int16 *)(v187 + 2 * v320 + 2 * v321++));
          while (v321 < v318[v319]);
          *(_QWORD *)(v274 + 2816) = v321;
          v320 += v321;
        }
        v322 = v319 - 1;
        if (!v319)
          v322 = 0;
        v323 = v542[v322];
        v324 = BrotliHistogramBitCostDistanceCommand((_QWORD *)v274, (uint64_t)&v316[2832 * v323], (char *)(v274 + 2832));
        if (v317)
        {
          v325 = v324;
          v326 = v583;
          v327 = v317;
          do
          {
            v328 = BrotliHistogramBitCostDistanceCommand((_QWORD *)v274, (uint64_t)&v613[2832 * *v326], (char *)(v274 + 2832));
            if (v328 < v325)
            {
              v323 = *v326;
              v325 = v328;
            }
            ++v326;
            --v327;
          }
          while (v327);
        }
        v542[v319] = v323;
        if (*((_DWORD *)v607 + v323) == -1)
          *((_DWORD *)v607 + v323) = v591++;
        v316 = v613;
        v318 = v619;
        ++v319;
      }
      while (v319 != v573);
    }
    BrotliFree(a1);
    BrotliFree(a1);
    v13 = a1;
    BrotliFree(a1);
    v12 = a2;
    v329 = a9;
    v330 = a9[4];
    v331 = v573;
    v11 = a3;
    if (v330 >= v573)
    {
LABEL_460:
      v336 = v329[5];
      if (v336 >= v573)
      {
        v341 = v607;
        if (!v573)
        {
          v343 = 0;
          v342 = 0;
LABEL_477:
          *v329 = v342 + 1;
          v329[1] = v343;
          BrotliFree(a1);
          BrotliFree(a1);
          BrotliFree(a1);
          BrotliFree(a1);
          goto LABEL_478;
        }
LABEL_470:
        v342 = 0;
        v343 = 0;
        v344 = 0;
        v345 = v542 + 1;
        do
        {
          v346 = *v318++;
          v344 += v346;
          v347 = *(v345 - 1);
          if (v331 == 1 || (_DWORD)v347 != *v345)
          {
            v348 = v341[v347];
            *(_BYTE *)(v329[2] + v343) = v348;
            *(_DWORD *)(v329[3] + 4 * v343) = v344;
            if (v342 <= v348)
              v342 = v348;
            ++v343;
            v344 = 0;
          }
          ++v345;
          --v331;
        }
        while (v331);
        goto LABEL_477;
      }
      if (v336)
        v337 = v329[5];
      else
        v337 = v573;
      do
      {
        v338 = v337;
        v337 *= 2;
      }
      while (v338 < v573);
      if (v338)
      {
        v339 = BrotliAllocate(a1);
        v329 = a9;
        v340 = (void *)v339;
        v336 = a9[5];
        if (!v336)
        {
LABEL_468:
          BrotliFree(a1);
          v329 = a9;
          a9[3] = v340;
          a9[5] = v338;
          v318 = v619;
          v341 = v607;
          goto LABEL_470;
        }
      }
      else
      {
        v340 = 0;
        if (!v336)
          goto LABEL_468;
      }
      memcpy(v340, (const void *)v329[3], 4 * v336);
      goto LABEL_468;
    }
    if (v330)
      v332 = a9[4];
    else
      v332 = v573;
    do
    {
      v333 = v332;
      v332 *= 2;
    }
    while (v333 < v573);
    if (v333)
    {
      v334 = BrotliAllocate(a1);
      v329 = a9;
      v335 = (void *)v334;
      v330 = a9[4];
      if (!v330)
      {
LABEL_459:
        BrotliFree(a1);
        v329 = a9;
        a9[2] = v335;
        a9[4] = v333;
        goto LABEL_460;
      }
    }
    else
    {
      v335 = 0;
      if (!v330)
        goto LABEL_459;
    }
    memcpy(v335, (const void *)v329[2], v330);
    goto LABEL_459;
  }
  v192 = a9;
  v193 = a9[4];
  v194 = a9[1];
  v195 = v194 + 1;
  if (v193 < v194 + 1)
  {
    if (v193)
      v196 = a9[4];
    else
      v196 = v194 + 1;
    v13 = a1;
    do
    {
      v197 = v196;
      v196 *= 2;
    }
    while (v197 < v195);
    if (v197)
    {
      v198 = BrotliAllocate(a1);
      v192 = a9;
      v199 = (void *)v198;
      v193 = a9[4];
      if (!v193)
      {
LABEL_264:
        BrotliFree(a1);
        v192 = a9;
        a9[2] = v199;
        a9[4] = v197;
        v194 = a9[1];
        v195 = v194 + 1;
        goto LABEL_292;
      }
    }
    else
    {
      v199 = 0;
      if (!v193)
        goto LABEL_264;
    }
    memcpy(v199, (const void *)v192[2], v193);
    goto LABEL_264;
  }
  v13 = a1;
LABEL_292:
  v226 = v192[5];
  if (v226 < v195)
  {
    if (v226)
      v227 = v192[5];
    else
      v227 = v195;
    do
    {
      v228 = v227;
      v227 *= 2;
    }
    while (v228 < v195);
    if (v228)
    {
      v229 = BrotliAllocate(v13);
      v192 = a9;
      v230 = (void *)v229;
      v226 = a9[5];
      if (!v226)
      {
LABEL_300:
        BrotliFree(v13);
        v192 = a9;
        a9[3] = v230;
        a9[5] = v228;
        v194 = a9[1];
        goto LABEL_301;
      }
    }
    else
    {
      v230 = 0;
      if (!v226)
        goto LABEL_300;
    }
    memcpy(v230, (const void *)v192[3], 4 * v226);
    goto LABEL_300;
  }
LABEL_301:
  *v192 = 1;
  *(_BYTE *)(v192[2] + v194) = 0;
  v231 = v192[1];
  *(_DWORD *)(v192[3] + 4 * v231) = v11;
  v192[1] = v231 + 1;
LABEL_478:
  BrotliFree(v13);
  v349 = BrotliAllocate(v13);
  v350 = v349;
  v351 = 0;
  v352 = (unsigned __int16 *)(v12 + 12);
  do
  {
    if ((*((_DWORD *)v352 - 2) & 0x1FFFFFF) != 0 && *v352 >= 0x80u)
      *(_WORD *)(v349 + 2 * v351++) = v352[1] & 0x3FF;
    v352 += 8;
    --v11;
  }
  while (v11);
  if (v351 >> 6 <= 0x1A8)
    v353 = (unsigned __int16)v351 / 0x220u + 1;
  else
    v353 = 50;
  if (!v351)
    goto LABEL_504;
  v614 = v351;
  if (v351 > 0x7F)
  {
    v366 = (_QWORD *)BrotliAllocate(v13);
    v608 = v366;
    v367 = v353;
    do
    {
      bzero(v366, 0x880uLL);
      v366[272] = 0;
      v366[273] = 0x7FF0000000000000;
      v366 += 274;
      --v367;
    }
    while (v367);
    v368 = 0;
    v369 = v614;
    LODWORD(v370) = 7;
    do
    {
      v371 = v368 * v614 / v353;
      if (v368)
      {
        v370 = (16807 * v370);
        v371 += v370 % (v614 / v353);
      }
      v372 = 0;
      if (v371 + 40 >= v614)
        v373 = v614 - 41;
      else
        v373 = v371;
      v374 = &v608[274 * v368];
      v375 = v350 + 2 * v373;
      v374[272] += 40;
      do
      {
        ++*((_DWORD *)v374 + *(unsigned __int16 *)(v375 + v372));
        v372 += 2;
      }
      while (v372 != 80);
      ++v368;
    }
    while (v368 != v353);
    v376 = v353 + 2 * v614 / 0x28 + 99 - (v353 + 2 * v614 / 0x28 + 99) % v353;
    v578 = v350;
    if (v376)
    {
      v377 = 0;
      v378 = &v608[274 * v353];
      if (v376 <= 1)
        v379 = 1;
      else
        v379 = v353 + 2 * v614 / 0x28 + 99 - (v353 + 2 * v614 / 0x28 + 99) % v353;
      LODWORD(v380) = 7;
      do
      {
        bzero(v378, 0x880uLL);
        v380 = (16807 * v380);
        v381 = (unsigned __int16 *)(v350 + 2 * (v380 % (v614 - 39)));
        v378[272] = 40;
        v382 = -40;
        do
        {
          v383 = *v381++;
          ++*((_DWORD *)v378 + v383);
          v54 = __CFADD__(v382++, 1);
        }
        while (!v54);
        v384 = 0;
        v385 = 0;
        v386 = &v608[274 * (v377 % v353)];
        v386[272] += 40;
        do
        {
          *((_DWORD *)v386 + v385++) += *(_DWORD *)((char *)v378 + v384);
          v384 += 4;
        }
        while (v384 != 2176);
        ++v377;
      }
      while (v377 != v379);
      v369 = v614;
      v378[273] = 0x7FF0000000000000;
      v13 = a1;
    }
    v387 = (char *)BrotliAllocate(v13);
    v388 = (char *)BrotliAllocate(v13);
    v389 = (void *)BrotliAllocate(v13);
    if (((v353 + 7) >> 3) * v369)
      v390 = (char *)BrotliAllocate(v13);
    else
      v390 = 0;
    v592 = BrotliAllocate(v13);
    v391 = 0;
    v392 = 3;
    if (*(int *)(a7 + 4) > 10)
      v392 = 10;
    v584 = v392;
    v393 = v614;
    v561 = v614 - 1;
    __srcd = v387 - 2;
    v529 = v387;
    do
    {
      v600 = v391;
      if (v353 > 1)
      {
        bzero(v388, 4352 * v353);
        v396 = 0;
        v397 = (unsigned int *)(v608 + 272);
        do
        {
          v398 = *v397;
          if (v398 > 0xFF)
            v399 = log2((double)v398);
          else
            v399 = kBrotliLog2Table[v398];
          v397 += 548;
          *(double *)&v388[8 * v396++] = v399;
        }
        while (v353 != v396);
        v574 = (v353 + 7) >> 3;
        v400 = &v388[4344 * v353];
        v401 = (unsigned int *)v608 + 543;
        v402 = 544;
        do
        {
          v403 = 0;
          --v402;
          v404 = v401;
          do
          {
            v405 = *(double *)&v388[8 * v403];
            v406 = *v404;
            if ((_DWORD)v406)
            {
              if (v406 > 0xFF)
                v407 = log2((double)v406);
              else
                v407 = kBrotliLog2Table[v406];
            }
            else
            {
              v407 = -2.0;
            }
            v404 += 548;
            *(double *)&v400[8 * v403++] = v405 - v407;
          }
          while (v353 != v403);
          v400 -= 8 * v353;
          --v401;
        }
        while (v402);
        bzero(v389, 8 * v353);
        bzero(v390, v574 * v614);
        v408 = 0;
        v350 = v578;
        v387 = v529;
        v395 = (void *)v592;
        do
        {
          v409 = 0;
          v410 = &v388[8 * v353 * *(unsigned __int16 *)(v578 + 2 * v408)];
          v411 = 1.0e99;
          do
          {
            v412 = *(double *)&v410[8 * v409] + *((double *)v389 + v409);
            *((double *)v389 + v409) = v412;
            if (v412 < v411)
            {
              v529[v408] = v409;
              v411 = v412;
            }
            ++v409;
          }
          while (v353 != v409);
          v413 = 14.6;
          if (v408 <= 0x7CF)
            v413 = ((double)v408 * 0.07 / 2000.0 + 0.77) * 14.6;
          for (kk = 0; kk != v353; ++kk)
          {
            v415 = *((double *)v389 + kk) - v411;
            *((double *)v389 + kk) = v415;
            if (v415 >= v413)
            {
              *((double *)v389 + kk) = v413;
              v390[v408 * v574 + (kk >> 3)] |= 1 << (kk & 7);
            }
          }
          ++v408;
        }
        while (v408 != v614);
        v416 = v529[v561];
        v417 = &v390[(v614 - 2) * v574];
        v418 = v614;
        v394 = 1;
        do
        {
          if (((v417[(unint64_t)v416 >> 3] >> (v416 & 7)) & 1) != 0)
          {
            if (v416 != __srcd[v418])
              ++v394;
            v416 = __srcd[v418];
          }
          v417 -= v574;
          __srcd[v418--] = v416;
        }
        while (v418 != 1);
      }
      else
      {
        bzero(v387, v393);
        v394 = 1;
        v395 = (void *)v592;
      }
      if (v353)
        memset_pattern16(v395, &unk_19CFFDD00, 2 * v353);
      v419 = 0;
      v420 = 0;
      do
      {
        v421 = v387[v419];
        if (*((_WORD *)v395 + v421) == 256)
          *((_WORD *)v395 + v421) = v420++;
        ++v419;
      }
      while (v614 != v419);
      *(_QWORD *)v575 = v394;
      for (mm = 0; mm != v614; ++mm)
        v387[mm] = *((_WORD *)v395 + v387[mm]);
      v353 = v420;
      if (v420)
      {
        v423 = v608;
        v424 = v420;
        do
        {
          bzero(v423, 0x880uLL);
          v423[272] = 0;
          v423[273] = 0x7FF0000000000000;
          v423 += 274;
          --v424;
        }
        while (v424);
      }
      v425 = 0;
      v393 = v614;
      do
      {
        v426 = &v608[274 * v387[v425]];
        ++*((_DWORD *)v426 + *(unsigned __int16 *)(v350 + 2 * v425));
        ++v426[272];
        ++v425;
      }
      while (v614 != v425);
      v391 = v600 + 1;
      v427 = *(_QWORD *)v575;
    }
    while (v600 + 1 != v584);
    BrotliFree(a1);
    BrotliFree(a1);
    BrotliFree(a1);
    BrotliFree(a1);
    BrotliFree(a1);
    if (*(_QWORD *)v575)
    {
      v428 = BrotliAllocate(a1);
      v429 = *(_QWORD *)v575 + 256;
      if (*(_QWORD *)v575 == -256)
      {
        v430 = 0;
        v431 = 0x3FFFFFFFFFFFFCFLL;
        goto LABEL_588;
      }
    }
    else
    {
      v428 = 0;
      v429 = 256;
    }
    v430 = (_DWORD *)BrotliAllocate(a1);
    v432 = 16 * *(_QWORD *)v575 + 1008;
    v431 = v432 >> 6;
    if (v432 < 0x40)
    {
      v433 = 0;
      v537 = 0;
      goto LABEL_589;
    }
LABEL_588:
    v433 = BrotliAllocate(a1);
    v537 = BrotliAllocate(a1);
LABEL_589:
    v527 = (_DWORD *)v428;
    v434 = 64;
    if (*(_QWORD *)v575 < 0x40uLL)
      v434 = *(_QWORD *)v575;
    v567 = (char *)v433;
    if (v434)
      v435 = BrotliAllocate(a1);
    else
      v435 = 0;
    v524 = (unsigned int *)BrotliAllocate(a1);
    v436 = BrotliAllocate(a1);
    bzero(v430, 4 * v429);
    v437 = 0;
    for (nn = 0; nn != v614; ++nn)
    {
      ++v430[v437 + 256];
      if (v561 == nn || v529[nn] != v529[nn + 1])
        ++v437;
    }
    v609 = (uint64_t)v430;
    v585 = v430 + 256;
    if (*(_QWORD *)v575)
    {
      v439 = 0;
      v440 = 0;
      v441 = 0;
      v543 = 0;
      __srce = 0;
      v593 = v430 + 128;
      v442 = v430 + 64;
      v443 = (char *)(v430 + 192);
      v540 = (_DWORD *)v428;
      v444 = *(_QWORD *)v575;
      v531 = v431;
      v601 = v435;
      v445 = v567;
      v522 = v436;
      while (1)
      {
        v568 = v445;
        v557 = v441;
        v446 = v444 - 64;
        if (v444 >= 0x40)
          v447 = 64;
        else
          v447 = v444;
        v448 = v427 - v439;
        if (v427 - v439 >= 0x40)
          v448 = 64;
        v553 = v448;
        v615 = v439;
        v562 = v431;
        v534 = v446;
        if (v448)
        {
          v449 = 0;
          do
          {
            v450 = v585[v449 + v615];
            v451 = (_QWORD *)(v435 + 2192 * v449);
            bzero(v451, 0x880uLL);
            v451[272] = 0;
            v451[273] = 0x7FF0000000000000;
            if ((_DWORD)v450)
            {
              v452 = v450;
              v453 = (unsigned __int16 *)(v578 + 2 * v440);
              do
              {
                v454 = *v453++;
                ++*((_DWORD *)v451 + v454);
                --v452;
              }
              while (v452);
              v451[272] = v450;
              v620 = v440 + v450;
              v440 += v450;
            }
            else
            {
              v620 = v440;
            }
            BrotliPopulationCostDistance((uint64_t)v451);
            v451[273] = v455;
            v442[v449] = v449;
            v435 = v601;
            v593[v449] = v449;
            *(_DWORD *)(v609 + 4 * v449++) = 1;
          }
          while (v449 != v447);
        }
        else
        {
          v620 = v440;
        }
        v456 = BrotliHistogramCombineDistance(v435, (char *)v436, v609, v593, v442, v524, v553, v553, 0x40uLL, 0x800uLL);
        v457 = v456;
        v458 = v531;
        if (v531 >= v456 + v543)
        {
          v461 = (char *)v537;
          v464 = v557;
          v445 = v568;
        }
        else
        {
          if (v531)
            v459 = v531;
          else
            v459 = v456 + v543;
          do
          {
            v460 = v459;
            v459 *= 2;
          }
          while (v460 < v456 + v543);
          v461 = (char *)v537;
          if (v460)
          {
            v462 = BrotliAllocate(a1);
            v458 = v531;
            v463 = (char *)v462;
          }
          else
          {
            v463 = 0;
          }
          if (v458)
            memcpy(v463, v568, 2192 * v458);
          BrotliFree(a1);
          v531 = v460;
          v445 = v463;
          v464 = v557;
          v431 = v562;
        }
        v440 = v620;
        v569 = v445;
        if (v431 >= (unint64_t)__srce + v457)
          goto LABEL_637;
        v465 = v431 ? v431 : (unint64_t)__srce + v457;
        do
        {
          v466 = v465;
          v465 *= 2;
        }
        while (v466 < (unint64_t)__srce + v457);
        if (!v466)
          break;
        v467 = (char *)BrotliAllocate(a1);
        if (v431)
          goto LABEL_635;
LABEL_636:
        BrotliFree(a1);
        v431 = v466;
        v461 = v467;
        v464 = v557;
        v440 = v620;
        v445 = v569;
LABEL_637:
        v537 = (uint64_t)v461;
        if (v457)
        {
          v468 = 0;
          v469 = &v461[4 * (_QWORD)__srce];
          v470 = &v445[2192 * v543];
          do
          {
            memcpy(v470, (const void *)(v601 + 2192 * v442[v468]), 0x890uLL);
            *(_DWORD *)&v469[4 * v468] = *(_DWORD *)(v609 + 4 * v442[v468]);
            *(_DWORD *)&v443[4 * v442[v468]] = v468;
            ++v468;
            v470 += 2192;
          }
          while (v457 != v468);
          __srce = (char *)__srce + v468;
          v543 += v468;
          v427 = *(_QWORD *)v575;
          v445 = v569;
          v464 = v557;
          v436 = v522;
          v440 = v620;
        }
        else
        {
          v427 = *(_QWORD *)v575;
        }
        if (v553)
        {
          v471 = v593;
          v472 = v540;
          do
          {
            v473 = *v471++;
            *v472++ = *(_DWORD *)&v443[4 * v473] + v464;
            --v447;
          }
          while (v447);
        }
        v441 = v457 + v464;
        v439 = v615 + 64;
        v540 += 64;
        v444 = v534;
        v435 = v601;
        if (v615 + 64 >= v427)
          goto LABEL_650;
      }
      v467 = 0;
      if (!v431)
        goto LABEL_636;
LABEL_635:
      memcpy(v467, v461, 4 * v431);
      goto LABEL_636;
    }
    v441 = 0;
    v445 = v567;
LABEL_650:
    v474 = (uint64_t)v445;
    v475 = v441;
    BrotliFree(a1);
    if (v475 << 6 >= (v475 >> 1) * v475)
      v476 = (v475 >> 1) * v475;
    else
      v476 = v475 << 6;
    if (v476 < 0x801)
    {
      v477 = v475;
    }
    else
    {
      BrotliFree(a1);
      v477 = v475;
      v524 = (unsigned int *)BrotliAllocate(a1);
    }
    v478 = v527;
    v479 = v585;
    v480 = 4 * v477;
    if (v477)
    {
      v481 = BrotliAllocate(a1);
      v477 = v475;
      v482 = (unsigned int *)v481;
      v483 = 0;
      do
      {
        *(_DWORD *)(v481 + 4 * v483) = v483;
        ++v483;
      }
      while (v475 != v483);
    }
    else
    {
      v482 = 0;
    }
    v594 = v482;
    v616 = BrotliHistogramCombineDistance(v474, (char *)v436, v537, v527, v482, v524, v477, v427, 0x100uLL, v476);
    BrotliFree(a1);
    BrotliFree(a1);
    if (v477)
    {
      v621 = (void *)BrotliAllocate(a1);
      memset(v621, 255, v480);
      if (!v427)
        goto LABEL_680;
    }
    else
    {
      v621 = 0;
      if (!v427)
        goto LABEL_680;
    }
    v602 = 0;
    v484 = 0;
    v485 = 0;
    do
    {
      bzero((void *)v436, 0x880uLL);
      *(_QWORD *)(v436 + 2176) = 0;
      *(_QWORD *)(v436 + 2184) = 0x7FF0000000000000;
      if (v479[v484])
      {
        v486 = 0;
        do
          ++*(_DWORD *)(v436 + 4 * *(unsigned __int16 *)(v578 + 2 * v485 + 2 * v486++));
        while (v486 < v479[v484]);
        *(_QWORD *)(v436 + 2176) = v486;
        v485 += v486;
      }
      v487 = v616;
      v488 = v484 - 1;
      if (!v484)
        v488 = 0;
      v489 = v478[v488];
      v490 = BrotliHistogramBitCostDistanceDistance((_QWORD *)v436, v474 + 2192 * v489, (char *)(v436 + 2192));
      if (v616)
      {
        v491 = v490;
        v492 = v594;
        do
        {
          v493 = BrotliHistogramBitCostDistanceDistance((_QWORD *)v436, v474 + 2192 * *v492, (char *)(v436 + 2192));
          if (v493 < v491)
          {
            v489 = *v492;
            v491 = v493;
          }
          ++v492;
          --v487;
        }
        while (v487);
      }
      v478 = v527;
      v527[v484] = v489;
      v479 = v585;
      if (*((_DWORD *)v621 + v489) == -1)
        *((_DWORD *)v621 + v489) = v602++;
      ++v484;
    }
    while (v484 != v427);
LABEL_680:
    BrotliFree(a1);
    BrotliFree(a1);
    v13 = a1;
    BrotliFree(a1);
    v494 = a10;
    v495 = *(_QWORD *)(a10 + 32);
    if (v495 >= v427)
      goto LABEL_689;
    if (v495)
      v496 = *(_QWORD *)(a10 + 32);
    else
      v496 = v427;
    do
    {
      v497 = v496;
      v496 *= 2;
    }
    while (v497 < v427);
    if (v497)
    {
      v498 = BrotliAllocate(a1);
      v494 = a10;
      v499 = (void *)v498;
      v495 = *(_QWORD *)(a10 + 32);
      if (!v495)
      {
LABEL_688:
        BrotliFree(a1);
        v494 = a10;
        *(_QWORD *)(a10 + 16) = v499;
        *(_QWORD *)(a10 + 32) = v497;
        v478 = v527;
LABEL_689:
        v500 = *(_QWORD *)(v494 + 40);
        if (v500 >= v427)
        {
          v506 = v621;
          if (!v427)
          {
            v508 = 0;
            v507 = 0;
LABEL_728:
            *(_QWORD *)a10 = v507 + 1;
            *(_QWORD *)(a10 + 8) = v508;
            BrotliFree(a1);
            BrotliFree(a1);
            BrotliFree(a1);
            BrotliFree(a1);
            return BrotliFree(v13);
          }
LABEL_699:
          v507 = 0;
          v508 = 0;
          v509 = 0;
          v510 = v478 + 1;
          do
          {
            v511 = *v479++;
            v509 += v511;
            v512 = *(v510 - 1);
            if (v427 == 1 || (_DWORD)v512 != *v510)
            {
              v513 = v506[v512];
              *(_BYTE *)(*(_QWORD *)(a10 + 16) + v508) = v513;
              *(_DWORD *)(*(_QWORD *)(a10 + 24) + 4 * v508) = v509;
              if (v507 <= v513)
                v507 = v513;
              ++v508;
              v509 = 0;
            }
            ++v510;
            --v427;
          }
          while (v427);
          goto LABEL_728;
        }
        if (v500)
          v501 = *(_QWORD *)(v494 + 40);
        else
          v501 = v427;
        do
        {
          v502 = v501;
          v501 *= 2;
        }
        while (v502 < v427);
        if (v502)
        {
          v503 = (void *)BrotliAllocate(a1);
          v504 = a10;
          v500 = *(_QWORD *)(a10 + 40);
          if (!v500)
          {
LABEL_697:
            v505 = v504;
            BrotliFree(a1);
            *(_QWORD *)(v505 + 24) = v503;
            *(_QWORD *)(v505 + 40) = v502;
            v427 = *(_QWORD *)v575;
            v506 = v621;
            goto LABEL_699;
          }
        }
        else
        {
          v503 = 0;
          v504 = a10;
          if (!v500)
            goto LABEL_697;
        }
        memcpy(v503, *(const void **)(v504 + 24), 4 * v500);
        v504 = a10;
        goto LABEL_697;
      }
    }
    else
    {
      v499 = 0;
      if (!v495)
        goto LABEL_688;
    }
    memcpy(v499, *(const void **)(v494 + 16), v495);
    goto LABEL_688;
  }
  v354 = (_QWORD *)a10;
  v355 = *(_QWORD *)(a10 + 32);
  v356 = *(_QWORD *)(a10 + 8);
  v357 = v356 + 1;
  if (v355 < v356 + 1)
  {
    if (v355)
      v358 = *(_QWORD *)(a10 + 32);
    else
      v358 = v356 + 1;
    do
    {
      v359 = v358;
      v358 *= 2;
    }
    while (v359 < v357);
    if (v359)
    {
      v360 = (void *)BrotliAllocate(v13);
      v361 = a10;
      v355 = *(_QWORD *)(a10 + 32);
      if (!v355)
      {
LABEL_496:
        BrotliFree(v13);
        v354 = (_QWORD *)a10;
        *(_QWORD *)(a10 + 16) = v360;
        *(_QWORD *)(a10 + 32) = v359;
        v356 = *(_QWORD *)(a10 + 8);
        v357 = v356 + 1;
        LODWORD(v351) = v614;
        goto LABEL_497;
      }
    }
    else
    {
      v360 = 0;
      v361 = a10;
      if (!v355)
        goto LABEL_496;
    }
    memcpy(v360, *(const void **)(v361 + 16), v355);
    goto LABEL_496;
  }
LABEL_497:
  v362 = v354[5];
  if (v362 < v357)
  {
    if (v362)
      v363 = v354[5];
    else
      v363 = v357;
    do
    {
      v364 = v363;
      v363 *= 2;
    }
    while (v364 < v357);
    if (v364)
    {
      v365 = (void *)BrotliAllocate(v13);
      v362 = *(_QWORD *)(a10 + 40);
    }
    else
    {
      v365 = 0;
    }
    v354 = (_QWORD *)a10;
    if (v362)
      memcpy(v365, *(const void **)(a10 + 24), 4 * v362);
    BrotliFree(v13);
    *(_QWORD *)(a10 + 24) = v365;
    *(_QWORD *)(a10 + 40) = v364;
    v356 = *(_QWORD *)(a10 + 8);
    LODWORD(v351) = v614;
  }
  *v354 = 1;
  *(_BYTE *)(v354[2] + v356) = 0;
  v514 = v354[1];
  *(_DWORD *)(v354[3] + 4 * v514) = v351;
  v354[1] = v514 + 1;
  return BrotliFree(v13);
}

double BrotliInitSharedEncoderDictionary(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_DWORD *)a1 = -558043679;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v2 = a1 + 544;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 548) = 1;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1128) = 1;
  v3 = a1 + 1136;
  *(_QWORD *)(a1 + 616) = a1 + 1136;
  *(_QWORD *)(a1 + 1136) = BrotliGetDictionary();
  *(_DWORD *)(a1 + 1144) = *((_DWORD *)BrotliGetTransforms() + 6);
  *(_QWORD *)(a1 + 1160) = &kStaticDictionaryHashWords;
  *(_QWORD *)(a1 + 1168) = &kStaticDictionaryHashLengths;
  *(_QWORD *)(a1 + 1176) = &kStaticDictionaryBuckets;
  *(_QWORD *)(a1 + 1184) = &kStaticDictionaryWords;
  *(_DWORD *)(a1 + 1148) = 10;
  *(_QWORD *)(a1 + 1152) = 0x71B520ADA2D3200;
  *(_DWORD *)(a1 + 1232) = 0;
  *(_BYTE *)(a1 + 1218) = 0;
  *(_QWORD *)(v3 + 84) = 0;
  *(_BYTE *)(a1 + 1216) = 0;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_QWORD *)(a1 + 1240) = v2;
  *(_DWORD *)(a1 + 1312) = 11;
  return result;
}

uint64_t BrotliCleanupSharedEncoderDictionary(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = result;
  if (*(_QWORD *)(a2 + 408))
  {
    v4 = 0;
    do
      result = DestroyPreparedDictionary(v3, *(_QWORD *)(a2 + 416 + 8 * v4++));
    while (v4 < *(_QWORD *)(a2 + 408));
  }
  v5 = *(_QWORD *)(a2 + 1128);
  if (v5)
  {
    if (v5 == 1)
    {
      return BrotliDestroyEncoderDictionary(v3);
    }
    else
    {
      v6 = 0;
      v7 = 0;
      do
      {
        BrotliDestroyEncoderDictionary(v3);
        ++v7;
        v6 += 168;
      }
      while (v7 < *(_QWORD *)(a2 + 1128));
      return BrotliFree(v3);
    }
  }
  return result;
}

uint64_t BrotliDestroyEncoderDictionary(uint64_t a1)
{
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  return BrotliFree(a1);
}

void *(**BrotliCreateManagedDictionary(void *(*a1)(int a1, size_t size), void (*a2)(int a1, void *a2), void *(*a3)(int a1, size_t size)))(int a1, size_t size)
{
  void *(**v6)(int, size_t);
  void *(**v7)(int, size_t);

  v6 = (void *(**)(int, size_t))BrotliBootstrapAlloc(0x28uLL, (unint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v7 = v6;
  if (v6)
  {
    *(_DWORD *)v6 = -558043678;
    BrotliInitMemoryManager(v6 + 1, a1, a2, a3);
    v7[4] = 0;
  }
  return v7;
}

uint64_t BrotliDestroyManagedDictionary(uint64_t result)
{
  if (result)
    return BrotliBootstrapFree(result, result + 8);
  return result;
}

uint64_t BrotliBuildHistogramsWithContext(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v46;
  unsigned int *v47;

  v14 = *(unsigned int **)(a3 + 24);
  if (v14)
    v15 = *v14;
  else
    v15 = 0;
  v16 = *(unsigned int **)(a4 + 24);
  v47 = v16;
  if (v16)
    v17 = *v16;
  else
    v17 = 0;
  v18 = *(unsigned int **)(a5 + 24);
  v44 = v18;
  if (v18)
  {
    v19 = *v18;
    if (!a2)
      return result;
  }
  else
  {
    v19 = 0;
    if (!a2)
      return result;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = a10;
  v27 = a9;
  v46 = 0;
  do
  {
    if (!v17)
    {
      ++v23;
      v22 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 16) + v23);
      v17 = v47[v23];
    }
    v28 = (unsigned int *)(result + 16 * v20);
    v29 = a13 + 2832 * v22;
    v30 = *((unsigned __int16 *)v28 + 6);
    ++*(_DWORD *)(v29 + 4 * *((unsigned __int16 *)v28 + 6));
    ++*(_QWORD *)(v29 + 2816);
    v31 = *v28;
    if ((_DWORD)v31)
    {
      do
      {
        v32 = v27;
        if (!v15)
        {
          ++v25;
          v24 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 16) + v25);
          v15 = v14[v25];
        }
        v33 = v24;
        if (a11)
        {
          v34 = (char *)&_kBrotliContextLookupTable + (*(_DWORD *)(a11 + 4 * v24) << 9);
          v33 = (v24 << 6) + (v34[v26 + 256] | v34[v32]);
        }
        v35 = a12 + 1040 * v33;
        --v15;
        ++*(_DWORD *)(v35 + 4 * *(unsigned __int8 *)(a6 + (a7 & a8)));
        ++*(_QWORD *)(v35 + 1024);
        v27 = *(unsigned __int8 *)(a6 + (a7++ & a8));
        v26 = v32;
        --v31;
      }
      while (v31);
    }
    else
    {
      v32 = v26;
    }
    v36 = *(_DWORD *)(result + 16 * v20 + 4) & 0x1FFFFFF;
    a7 += v36;
    if ((_DWORD)v36)
    {
      v32 = *(unsigned __int8 *)(a6 + ((a7 - 2) & a8));
      v27 = *(unsigned __int8 *)(a6 + ((a7 - 1) & a8));
      if (v30 >= 0x80)
      {
        if (!v19)
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 16) + ++v46);
          v19 = v44[v46];
        }
        --v19;
        v37 = v30 >> 6;
        v40 = v30 >> 6 != 2 && v37 != 4 && v37 != 7 || (v30 & 7) >= 3;
        v41 = 3;
        if (!v40)
          v41 = v30 & 7;
        v42 = a14 + 2192 * (v41 | (4 * v21));
        v43 = *(_WORD *)(result + 16 * v20 + 14) & 0x3FF;
        ++*(_DWORD *)(v42 + 4 * v43);
        ++*(_QWORD *)(v42 + 2176);
      }
    }
    --v17;
    ++v20;
    v26 = v32;
  }
  while (v20 != a2);
  return result;
}

uint64_t BrotliCompressFragmentFast(uint64_t result, unsigned __int8 *a2, unint64_t a3, int a4, uint64_t a5, unsigned int a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v10;

  v10 = *a7;
  if (!a3)
    goto LABEL_11;
  switch(__clz(a6) ^ 0x1F)
  {
    case 9u:
      result = BrotliCompressFragmentFastImpl9(result, a2, a3, a4, a5, a7, a8);
      break;
    case 0xBu:
      result = BrotliCompressFragmentFastImpl11(result, a2, a3, a4, a5, a7, a8);
      break;
    case 0xDu:
      result = BrotliCompressFragmentFastImpl13(result, a2, a3, a4, a5, a7, a8);
      break;
    case 0xFu:
      result = BrotliCompressFragmentFastImpl15(result, a2, a3, a4, a5, a7, a8);
      break;
    default:
      break;
  }
  if (*a7 - v10 > 8 * a3 + 31)
    result = (uint64_t)EmitUncompressedMetaBlock_0(a2, (uint64_t)&a2[a3], v10, a7, a8);
  if (a4)
  {
    v10 = *a7;
LABEL_11:
    *(_QWORD *)(a8 + (v10 >> 3)) = (1 << (v10 & 7)) | *(unsigned __int8 *)(a8 + (v10 >> 3));
    *a7 = v10 + 1;
    *(_QWORD *)(a8 + ((v10 + 1) >> 3)) = (1 << ((v10 + 1) & 7)) | *(unsigned __int8 *)(a8 + ((v10 + 1) >> 3));
    *a7 = ((_DWORD)v10 + 9) & 0xFFFFFFF8;
  }
  return result;
}

unint64_t BrotliCompressFragmentFastImpl9(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t result;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int i;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  char *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v195;
  unsigned __int8 *v196;
  unint64_t v197;
  unint64_t v198;
  unsigned __int8 *v199;
  unint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  char *__dst;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;

  __dst = (char *)(a1 + 1152);
  v204 = a3;
  v12 = a1 + 256;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  BrotliStoreMetaBlockHeader(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v206 = v13;
  v195 = BuildAndStoreLiteralPrefixCode(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << ((v17 + v18) & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v201 = a1 + 768;
  v208 = a1 + 896;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v206;
  while (2)
  {
    v196 = v22;
    v197 = v14;
    v200 = v14 + 3;
    v24 = v22;
    v205 = v23;
    v207 = v23;
    while (1)
    {
      result = (unint64_t)memcpy(v21, &kCmdHistoSeed, 0x200uLL);
      v26 = v207;
      v27 = v22;
      v22 += v207;
      if (v207 >= 0x10)
        break;
      v29 = v204;
LABEL_98:
      v159 = v29 - v26;
      if (v159 >= 0x10000)
        v160 = 0x10000;
      else
        v160 = v159;
      v204 = v159;
      if (!v159
        || (v205 += v160, v205 > 0x100000)
        || (v207 = v160, result = ShouldMergeBlock(a1, (uint64_t)v22, v160, a1), !(_DWORD)result))
      {
        if (v24 < v22)
        {
          v161 = v22 - v24;
          if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
          {
            if (v161 > 5)
            {
              v165 = v204;
              if (v161 > 0x81)
              {
                if (v161 > 0x841)
                {
                  v176 = *(unsigned __int8 *)(a1 + 829);
                  v177 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v178 = v177 + v176;
                  *a6 = v178;
                  *(_QWORD *)(a7 + (v178 >> 3)) = ((v161 - 2114) << (v178 & 7)) | *(unsigned __int8 *)(a7 + (v178 >> 3));
                  *a6 = v178 + 12;
                  v164 = (char *)(a1 + 1396);
                }
                else
                {
                  v172 = __clz(v161 - 66) ^ 0x1F;
                  v173 = *(unsigned __int8 *)(v201 + v172 + 50);
                  v174 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v172 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v175 = v174 + v173;
                  *a6 = v175;
                  *(_QWORD *)(a7 + (v175 >> 3)) = (((-1 << v172) + v161 - 66) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                  *a6 = v175 + v172;
                  v164 = &__dst[4 * v172 + 200];
                }
              }
              else
              {
                v166 = (__clz(v161 - 2) ^ 0x1F) - 1;
                v167 = (v161 - 2) >> v166;
                v168 = (2 * v166) + v167 + 42;
                v169 = *(unsigned __int8 *)(v201 + v168);
                v170 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * v168) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v171 = v170 + v169;
                *a6 = v171;
                *(_QWORD *)(a7 + (v171 >> 3)) = ((v161 - 2 - (v167 << v166)) << (v171 & 7)) | *(unsigned __int8 *)(a7 + (v171 >> 3));
                *a6 = v171 + v166;
                v164 = &__dst[4 * v168];
              }
            }
            else
            {
              v162 = *(unsigned __int8 *)(v201 + v161 + 40);
              v163 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v161 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v163 + v162;
              v164 = &__dst[4 * v161 + 160];
              v165 = v204;
            }
            ++*(_DWORD *)v164;
            if (v22 != v24)
            {
              v179 = *a6;
              if (v161 <= 1)
                v161 = 1;
              do
              {
                v180 = *v24++;
                v181 = *(unsigned __int8 *)(a1 + v180);
                *(_QWORD *)(a7 + (v179 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v180) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                v179 += v181;
                *a6 = v179;
                --v161;
              }
              while (v161);
            }
            goto LABEL_125;
          }
          result = (unint64_t)v196;
          if (50 * (v24 - v196) > v161 || v195 < 0x3D5)
          {
            if (v161 > 0x5841)
            {
              v189 = *(unsigned __int8 *)(a1 + 831);
              v190 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v191 = v190 + v189;
              *a6 = v191;
              *(_QWORD *)(a7 + (v191 >> 3)) = ((v161 - 22594) << (v191 & 7)) | *(unsigned __int8 *)(a7 + (v191 >> 3));
              v187 = v191 + 24;
              v188 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v184 = *(unsigned __int8 *)(a1 + 830);
              v185 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v186 = v185 + v184;
              *a6 = v186;
              *(_QWORD *)(a7 + (v186 >> 3)) = ((v161 - 6210) << (v186 & 7)) | *(unsigned __int8 *)(a7 + (v186 >> 3));
              v187 = v186 + 14;
              v188 = (_DWORD *)(a1 + 1400);
            }
            v165 = v204;
            ++*v188;
            *a6 = v187;
            do
            {
              v192 = *v24++;
              v193 = *(unsigned __int8 *)(a1 + v192);
              *(_QWORD *)(a7 + (v187 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v192) << (v187 & 7)) | *(unsigned __int8 *)(a7 + (v187 >> 3));
              v187 += v193;
              *a6 = v187;
              --v161;
            }
            while (v161);
            goto LABEL_125;
          }
          result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
        }
        v165 = v204;
        goto LABEL_125;
      }
      UpdateBits((v205 - 1), v200, a7);
      v21 = __dst;
    }
    v28 = v207 - 5;
    v29 = v204;
    if (v207 - 5 >= v204 - 16)
      v28 = v204 - 16;
    v30 = &v27[v28];
    v202 = v22;
    v31 = v22 - 5;
    v32 = -1;
    v199 = v27;
    v33 = v27;
    v34 = a1 + 896;
LABEL_14:
    while (2)
    {
      v36 = *(_QWORD *)(v33 + 1);
      v22 = v33 + 1;
      v35 = v36;
      for (i = 32; ; ++i)
      {
        v38 = &v22[i >> 5];
        if (v38 > v30)
          goto LABEL_97;
        v39 = (unint64_t)(0x1E35A7BD000000 * v35) >> 55;
        v35 = *(_QWORD *)v38;
        v40 = &v22[-v32];
        result = *(unsigned int *)v40;
        if (*(_DWORD *)v22 == (_DWORD)result)
        {
          result = v40[4];
          if (v22[4] == (_DWORD)result && v32 >= 1)
            break;
        }
        v40 = &a2[*(int *)(a5 + 4 * v39)];
        *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v40 && v22[4] == v40[4])
          goto LABEL_22;
LABEL_26:
        v22 = v38;
      }
      *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
LABEL_22:
      v42 = (_DWORD)v22 - (_DWORD)v40;
      if (v22 - v40 > 262128)
        goto LABEL_26;
      v43 = v40 + 5;
      v44 = v22 + 5;
      v45 = v31 - v22;
      if ((unint64_t)(v31 - v22) < 8)
      {
        v48 = v40 + 5;
        if (v45)
        {
LABEL_34:
          v49 = &v48[v45];
          while (*v48 == *v44)
          {
            ++v44;
            ++v48;
            if (!--v45)
            {
              v48 = v49;
              break;
            }
          }
        }
      }
      else
      {
        v46 = 0;
        do
        {
          v47 = *(_QWORD *)&v43[v46] ^ *(_QWORD *)&v44[v46];
          if (v47)
          {
            v50 = (unsigned __int8 *)(v46 + (__clz(__rbit64(v47)) >> 3));
            goto LABEL_40;
          }
          v45 -= 8;
          v46 += 8;
        }
        while (v45 > 7);
        v44 += v46;
        v48 = &v43[v46];
        if (v45)
          goto LABEL_34;
      }
      v50 = (unsigned __int8 *)(v48 - v43);
LABEL_40:
      v51 = v22 - v24;
      if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
      {
        if (v51 > 5)
        {
          if (v51 > 0x81)
          {
            if (v51 > 0x841)
            {
              v66 = *(unsigned __int8 *)(a1 + 829);
              v67 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v68 = v67 + v66;
              *a6 = v68;
              *(_QWORD *)(a7 + (v68 >> 3)) = ((v51 - 2114) << (v68 & 7)) | *(unsigned __int8 *)(a7 + (v68 >> 3));
              *a6 = v68 + 12;
              v54 = (char *)(a1 + 1396);
            }
            else
            {
              v62 = __clz(v51 - 66) ^ 0x1F;
              v63 = *(unsigned __int8 *)(v201 + v62 + 50);
              v64 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v62 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v65 = v64 + v63;
              *a6 = v65;
              *(_QWORD *)(a7 + (v65 >> 3)) = (((-1 << v62) + v51 - 66) << (v65 & 7)) | *(unsigned __int8 *)(a7 + (v65 >> 3));
              *a6 = v65 + v62;
              v54 = &__dst[4 * v62 + 200];
            }
          }
          else
          {
            v55 = (__clz(v51 - 2) ^ 0x1F) - 1;
            v56 = (v51 - 2) >> v55;
            v57 = (2 * v55) + v56 + 42;
            v58 = *(unsigned __int8 *)(v201 + v57);
            v59 = *a6;
            v60 = (unint64_t)*(unsigned __int16 *)(v34 + 2 * v57) << (*a6 & 7);
            v34 = a1 + 896;
            *(_QWORD *)(a7 + (*a6 >> 3)) = v60 | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v61 = v59 + v58;
            *a6 = v61;
            *(_QWORD *)(a7 + (v61 >> 3)) = ((v51 - 2 - (v56 << v55)) << (v61 & 7)) | *(unsigned __int8 *)(a7 + (v61 >> 3));
            *a6 = v61 + v55;
            v54 = &__dst[4 * v57];
          }
        }
        else
        {
          v52 = *(unsigned __int8 *)(v201 + v51 + 40);
          v53 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v51 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          *a6 = v53 + v52;
          v54 = &__dst[4 * v51 + 160];
        }
LABEL_48:
        ++*(_DWORD *)v54;
        if (v22 != v24)
        {
          v69 = *a6;
          if (v51 <= 1)
            v51 = 1;
          do
          {
            v70 = *v24++;
            v71 = *(unsigned __int8 *)(a1 + v70);
            *(_QWORD *)(a7 + (v69 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v70) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
            v69 += v71;
            *a6 = v69;
            --v51;
          }
          while (v51);
        }
        if (v32 == v42)
        {
          v72 = *(unsigned __int8 *)(a1 + 832);
          v73 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v74 = v73 + v72;
          v75 = (char *)(a1 + 1408);
        }
        else
        {
          v76 = v42 + 3;
          v77 = __clz(v76) ^ 0x1F;
          v78 = v77 - 1;
          v79 = (v76 >> (v77 - 1)) & 1 | 2;
          v80 = ((2 * v77 - 4) & 0xFFFFFFFE | (v76 >> (v77 - 1)) & 1) + 80;
          v81 = *(unsigned __int8 *)(v201 + v80);
          v82 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v80) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v83 = v82 + v81;
          *a6 = v83;
          *(_QWORD *)(a7 + (v83 >> 3)) = ((v76 - (v79 << v78)) << (v83 & 7)) | *(unsigned __int8 *)(a7 + (v83 >> 3));
          v74 = v83 + v78;
          v75 = &__dst[4 * v80];
          v32 = v42;
        }
        v84 = (unint64_t)(v50 + 5);
        ++*(_DWORD *)v75;
        *a6 = v74;
        if ((unint64_t)(v50 + 5) > 0xB)
        {
          if (v84 > 0x47)
          {
            if (v84 > 0x87)
            {
              if (v84 > 0x847)
              {
                v105 = *(unsigned __int8 *)(a1 + 807);
                result = v74 & 7;
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v106 = v74 + v105;
                *a6 = v106;
                v107 = v106 & 7;
                *(_QWORD *)(a7 + (v106 >> 3)) = ((_QWORD)(v50 - 2115) << (v106 & 7)) | *(unsigned __int8 *)(a7 + (v106 >> 3));
                v108 = v106 + 24;
                *a6 = v106 + 24;
                v109 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v108 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v107) | *(unsigned __int8 *)(a7 + (v108 >> 3));
                *a6 = v108 + v109;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v99 = v50 - 67;
                v100 = __clz(v99) ^ 0x1F;
                v101 = *(unsigned __int8 *)(v201 + v100 + 28);
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v100 + 28)) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v102 = v74 + v101;
                *a6 = v102;
                *(_QWORD *)(a7 + (v102 >> 3)) = ((_QWORD)&v99[-1 << v100] << (v102 & 7)) | *(unsigned __int8 *)(a7 + (v102 >> 3));
                v103 = v102 + v100;
                *a6 = v102 + v100;
                v104 = *(unsigned __int8 *)(a1 + 832);
                result = v103 & 7;
                *(_QWORD *)(a7 + (v103 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                *a6 = v103 + v104;
                ++*(_DWORD *)&__dst[4 * v100 + 112];
              }
            }
            else
            {
              v93 = v50 - 3;
              v94 = ((unint64_t)v93 >> 5) + 30;
              v95 = *(unsigned __int8 *)(v201 + v94);
              *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v94) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
              v96 = v74 + v95;
              *a6 = v96;
              *(_QWORD *)(a7 + (v96 >> 3)) = ((unint64_t)(v93 & 0x1F) << (v96 & 7)) | *(unsigned __int8 *)(a7 + (v96 >> 3));
              v97 = v96 + 5;
              *a6 = v96 + 5;
              v98 = *(unsigned __int8 *)(a1 + 832);
              result = v97 & 7;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              *a6 = v97 + v98;
              ++*(_DWORD *)&__dst[4 * v94];
            }
            v87 = (char *)(a1 + 1408);
          }
          else
          {
            v88 = v50 - 3;
            v89 = (__clz(v88) ^ 0x1F) - 1;
            v90 = (2 * v89) + ((unint64_t)v88 >> v89) + 4;
            v91 = *(unsigned __int8 *)(v201 + v90);
            *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v90) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
            v92 = v74 + v91;
            *a6 = v92;
            result = v92 & 7;
            *(_QWORD *)(a7 + (v92 >> 3)) = ((_QWORD)&v88[-((unint64_t)v88 >> v89 << v89)] << (v92 & 7)) | *(unsigned __int8 *)(a7 + (v92 >> 3));
            *a6 = v92 + v89;
            v87 = &__dst[4 * v90];
          }
        }
        else
        {
          v85 = v50 + 1;
          v86 = v85[v201];
          result = v74 & 7;
          *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v85) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
          *a6 = v74 + v86;
          v87 = &__dst[4 * (_QWORD)v85];
        }
        v24 = &v22[v84];
        ++*(_DWORD *)v87;
        if (&v22[v84] >= v30)
        {
LABEL_97:
          v22 = v202;
          v26 = v207;
          goto LABEL_98;
        }
        v110 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v110) >> 53) & 0x7FC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 8)) >> 53) & 0x7FC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 16)) >> 53) & 0x7FC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
        v111 = ((0x1E35A7BD000000 * (v110 >> 24)) >> 53) & 0x7FC;
        v112 = *(int *)(a5 + v111);
        *(_DWORD *)(a5 + v111) = (_DWORD)v24 - (_DWORD)a2;
        v113 = &a2[v112];
        v33 = v24;
        if (*(_DWORD *)v24 == *(_DWORD *)&a2[v112])
        {
          while (1)
          {
            v33 = v24;
            if (v24[4] != v113[4])
              break;
            v114 = v113 + 5;
            v115 = v24 + 5;
            v116 = v31 - v24;
            if ((unint64_t)(v31 - v24) < 8)
            {
              v119 = v113 + 5;
              if (v116)
              {
LABEL_75:
                v120 = &v119[v116];
                while (1)
                {
                  result = *v115;
                  if (*v119 != (_DWORD)result)
                    break;
                  ++v115;
                  ++v119;
                  if (!--v116)
                  {
                    v119 = v120;
                    break;
                  }
                }
              }
            }
            else
            {
              v117 = 0;
              do
              {
                v118 = *(_QWORD *)&v114[v117] ^ *(_QWORD *)&v115[v117];
                if (v118)
                {
                  v121 = (unsigned __int8 *)(v117 + (__clz(__rbit64(v118)) >> 3));
                  goto LABEL_81;
                }
                v116 -= 8;
                v117 += 8;
              }
              while (v116 > 7);
              v115 += v117;
              v119 = &v114[v117];
              if (v116)
                goto LABEL_75;
            }
            v121 = (unsigned __int8 *)(v119 - v114);
LABEL_81:
            v122 = v24 - v113;
            if (v122 <= 262128)
            {
              v123 = (unint64_t)(v121 + 5);
              if ((unint64_t)(v121 + 5) > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v139 = *(unsigned __int8 *)(a1 + 807);
                    v140 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v141 = v140 + v139;
                    *a6 = v141;
                    *(_QWORD *)(a7 + (v141 >> 3)) = ((_QWORD)(v121 - 2113) << (v141 & 7)) | *(unsigned __int8 *)(a7 + (v141 >> 3));
                    *a6 = v141 + 24;
                    v127 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v134 = v121 - 65;
                    v135 = __clz(v134) ^ 0x1F;
                    v136 = *(unsigned __int8 *)(v201 + v135 + 28);
                    v137 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v135 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v138 = v137 + v136;
                    *a6 = v138;
                    *(_QWORD *)(a7 + (v138 >> 3)) = ((_QWORD)&v134[-1 << v135] << (v138 & 7)) | *(unsigned __int8 *)(a7 + (v138 >> 3));
                    *a6 = v138 + v135;
                    v127 = &__dst[4 * v135 + 112];
                  }
                }
                else
                {
                  v128 = v121 - 1;
                  v129 = (__clz(v128) ^ 0x1F) - 1;
                  v130 = (2 * v129) + ((unint64_t)v128 >> v129) + 20;
                  v131 = *(unsigned __int8 *)(v201 + v130);
                  v132 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v130) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v133 = v132 + v131;
                  *a6 = v133;
                  *(_QWORD *)(a7 + (v133 >> 3)) = ((_QWORD)&v128[-((unint64_t)v128 >> v129 << v129)] << (v133 & 7)) | *(unsigned __int8 *)(a7 + (v133 >> 3));
                  *a6 = v133 + v129;
                  v127 = &__dst[4 * v130];
                }
              }
              else
              {
                v124 = v121 + 19;
                v125 = v124[v201];
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                *a6 = v126 + v125;
                v127 = &__dst[4 * (_QWORD)v124];
              }
              v24 += v123;
              ++*(_DWORD *)v127;
              v142 = (int)v122 + 3;
              v143 = __clz(v142) ^ 0x1F;
              v144 = v143 - 1;
              v145 = ((v142 >> (v143 - 1)) & 1 | 2) << (v143 - 1);
              v146 = ((2 * v143 - 4) & 0xFFFFFFFE | (v142 >> (v143 - 1)) & 1) + 80;
              v147 = *(unsigned __int8 *)(v201 + v146);
              v148 = *a6;
              result = *a6 >> 3;
              *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v146) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
              v149 = v148 + v147;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v142 - v145) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v144;
              ++*(_DWORD *)&__dst[4 * v146];
              if (v24 >= v30)
                goto LABEL_97;
              v32 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 53) & 0x7FC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 53) & 0x7FC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 53) & 0x7FC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 53) & 0x7FC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - (_DWORD)a2;
              v113 = &a2[v152];
              if (*(_DWORD *)v24 == *(_DWORD *)&a2[v152])
                continue;
            }
            v33 = v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - v196) > v51 || v195 < 0x3D5)
    {
      if (v51 > 0x5841)
      {
        v156 = *(unsigned __int8 *)(a1 + 831);
        v157 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v158 = v157 + v156;
        *a6 = v158;
        *(_QWORD *)(a7 + (v158 >> 3)) = ((v51 - 22594) << (v158 & 7)) | *(unsigned __int8 *)(a7 + (v158 >> 3));
        *a6 = v158 + 24;
        v54 = (char *)(a1 + 1404);
      }
      else
      {
        v153 = *(unsigned __int8 *)(a1 + 830);
        v154 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v155 = v154 + v153;
        *a6 = v155;
        *(_QWORD *)(a7 + (v155 >> 3)) = ((v51 - 6210) << (v155 & 7)) | *(unsigned __int8 *)(a7 + (v155 >> 3));
        *a6 = v155 + 14;
        v54 = (char *)(a1 + 1400);
      }
      goto LABEL_48;
    }
    result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
    v165 = &v199[v204] - v22;
LABEL_125:
    if (v165)
    {
      v204 = v165;
      if (v165 >= 0x18000)
        v182 = 98304;
      else
        v182 = v165;
      v198 = *a6;
      BrotliStoreMetaBlockHeader(v182, 0, a6, a7);
      v183 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v183 + 13;
      v195 = BuildAndStoreLiteralPrefixCode(a1, v22, v182, (_BYTE *)a1, v12, a6, a7);
      BuildAndStoreCommandPrefixCode(a1, a6, a7);
      v23 = v182;
      v14 = v198;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return BuildAndStoreCommandPrefixCode(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

unint64_t BrotliCompressFragmentFastImpl11(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t result;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int i;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  char *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v195;
  unsigned __int8 *v196;
  unint64_t v197;
  unint64_t v198;
  unsigned __int8 *v199;
  unint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  char *__dst;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;

  __dst = (char *)(a1 + 1152);
  v204 = a3;
  v12 = a1 + 256;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  BrotliStoreMetaBlockHeader(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v206 = v13;
  v195 = BuildAndStoreLiteralPrefixCode(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << ((v17 + v18) & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v201 = a1 + 768;
  v208 = a1 + 896;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v206;
  while (2)
  {
    v196 = v22;
    v197 = v14;
    v200 = v14 + 3;
    v24 = v22;
    v205 = v23;
    v207 = v23;
    while (1)
    {
      result = (unint64_t)memcpy(v21, &kCmdHistoSeed, 0x200uLL);
      v26 = v207;
      v27 = v22;
      v22 += v207;
      if (v207 >= 0x10)
        break;
      v29 = v204;
LABEL_98:
      v159 = v29 - v26;
      if (v159 >= 0x10000)
        v160 = 0x10000;
      else
        v160 = v159;
      v204 = v159;
      if (!v159
        || (v205 += v160, v205 > 0x100000)
        || (v207 = v160, result = ShouldMergeBlock(a1, (uint64_t)v22, v160, a1), !(_DWORD)result))
      {
        if (v24 < v22)
        {
          v161 = v22 - v24;
          if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
          {
            if (v161 > 5)
            {
              v165 = v204;
              if (v161 > 0x81)
              {
                if (v161 > 0x841)
                {
                  v176 = *(unsigned __int8 *)(a1 + 829);
                  v177 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v178 = v177 + v176;
                  *a6 = v178;
                  *(_QWORD *)(a7 + (v178 >> 3)) = ((v161 - 2114) << (v178 & 7)) | *(unsigned __int8 *)(a7 + (v178 >> 3));
                  *a6 = v178 + 12;
                  v164 = (char *)(a1 + 1396);
                }
                else
                {
                  v172 = __clz(v161 - 66) ^ 0x1F;
                  v173 = *(unsigned __int8 *)(v201 + v172 + 50);
                  v174 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v172 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v175 = v174 + v173;
                  *a6 = v175;
                  *(_QWORD *)(a7 + (v175 >> 3)) = (((-1 << v172) + v161 - 66) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                  *a6 = v175 + v172;
                  v164 = &__dst[4 * v172 + 200];
                }
              }
              else
              {
                v166 = (__clz(v161 - 2) ^ 0x1F) - 1;
                v167 = (v161 - 2) >> v166;
                v168 = (2 * v166) + v167 + 42;
                v169 = *(unsigned __int8 *)(v201 + v168);
                v170 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * v168) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v171 = v170 + v169;
                *a6 = v171;
                *(_QWORD *)(a7 + (v171 >> 3)) = ((v161 - 2 - (v167 << v166)) << (v171 & 7)) | *(unsigned __int8 *)(a7 + (v171 >> 3));
                *a6 = v171 + v166;
                v164 = &__dst[4 * v168];
              }
            }
            else
            {
              v162 = *(unsigned __int8 *)(v201 + v161 + 40);
              v163 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v161 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v163 + v162;
              v164 = &__dst[4 * v161 + 160];
              v165 = v204;
            }
            ++*(_DWORD *)v164;
            if (v22 != v24)
            {
              v179 = *a6;
              if (v161 <= 1)
                v161 = 1;
              do
              {
                v180 = *v24++;
                v181 = *(unsigned __int8 *)(a1 + v180);
                *(_QWORD *)(a7 + (v179 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v180) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                v179 += v181;
                *a6 = v179;
                --v161;
              }
              while (v161);
            }
            goto LABEL_125;
          }
          result = (unint64_t)v196;
          if (50 * (v24 - v196) > v161 || v195 < 0x3D5)
          {
            if (v161 > 0x5841)
            {
              v189 = *(unsigned __int8 *)(a1 + 831);
              v190 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v191 = v190 + v189;
              *a6 = v191;
              *(_QWORD *)(a7 + (v191 >> 3)) = ((v161 - 22594) << (v191 & 7)) | *(unsigned __int8 *)(a7 + (v191 >> 3));
              v187 = v191 + 24;
              v188 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v184 = *(unsigned __int8 *)(a1 + 830);
              v185 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v186 = v185 + v184;
              *a6 = v186;
              *(_QWORD *)(a7 + (v186 >> 3)) = ((v161 - 6210) << (v186 & 7)) | *(unsigned __int8 *)(a7 + (v186 >> 3));
              v187 = v186 + 14;
              v188 = (_DWORD *)(a1 + 1400);
            }
            v165 = v204;
            ++*v188;
            *a6 = v187;
            do
            {
              v192 = *v24++;
              v193 = *(unsigned __int8 *)(a1 + v192);
              *(_QWORD *)(a7 + (v187 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v192) << (v187 & 7)) | *(unsigned __int8 *)(a7 + (v187 >> 3));
              v187 += v193;
              *a6 = v187;
              --v161;
            }
            while (v161);
            goto LABEL_125;
          }
          result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
        }
        v165 = v204;
        goto LABEL_125;
      }
      UpdateBits((v205 - 1), v200, a7);
      v21 = __dst;
    }
    v28 = v207 - 5;
    v29 = v204;
    if (v207 - 5 >= v204 - 16)
      v28 = v204 - 16;
    v30 = &v27[v28];
    v202 = v22;
    v31 = v22 - 5;
    v32 = -1;
    v199 = v27;
    v33 = v27;
    v34 = a1 + 896;
LABEL_14:
    while (2)
    {
      v36 = *(_QWORD *)(v33 + 1);
      v22 = v33 + 1;
      v35 = v36;
      for (i = 32; ; ++i)
      {
        v38 = &v22[i >> 5];
        if (v38 > v30)
          goto LABEL_97;
        v39 = (unint64_t)(0x1E35A7BD000000 * v35) >> 53;
        v35 = *(_QWORD *)v38;
        v40 = &v22[-v32];
        result = *(unsigned int *)v40;
        if (*(_DWORD *)v22 == (_DWORD)result)
        {
          result = v40[4];
          if (v22[4] == (_DWORD)result && v32 >= 1)
            break;
        }
        v40 = &a2[*(int *)(a5 + 4 * v39)];
        *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v40 && v22[4] == v40[4])
          goto LABEL_22;
LABEL_26:
        v22 = v38;
      }
      *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
LABEL_22:
      v42 = (_DWORD)v22 - (_DWORD)v40;
      if (v22 - v40 > 262128)
        goto LABEL_26;
      v43 = v40 + 5;
      v44 = v22 + 5;
      v45 = v31 - v22;
      if ((unint64_t)(v31 - v22) < 8)
      {
        v48 = v40 + 5;
        if (v45)
        {
LABEL_34:
          v49 = &v48[v45];
          while (*v48 == *v44)
          {
            ++v44;
            ++v48;
            if (!--v45)
            {
              v48 = v49;
              break;
            }
          }
        }
      }
      else
      {
        v46 = 0;
        do
        {
          v47 = *(_QWORD *)&v43[v46] ^ *(_QWORD *)&v44[v46];
          if (v47)
          {
            v50 = (unsigned __int8 *)(v46 + (__clz(__rbit64(v47)) >> 3));
            goto LABEL_40;
          }
          v45 -= 8;
          v46 += 8;
        }
        while (v45 > 7);
        v44 += v46;
        v48 = &v43[v46];
        if (v45)
          goto LABEL_34;
      }
      v50 = (unsigned __int8 *)(v48 - v43);
LABEL_40:
      v51 = v22 - v24;
      if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
      {
        if (v51 > 5)
        {
          if (v51 > 0x81)
          {
            if (v51 > 0x841)
            {
              v66 = *(unsigned __int8 *)(a1 + 829);
              v67 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v68 = v67 + v66;
              *a6 = v68;
              *(_QWORD *)(a7 + (v68 >> 3)) = ((v51 - 2114) << (v68 & 7)) | *(unsigned __int8 *)(a7 + (v68 >> 3));
              *a6 = v68 + 12;
              v54 = (char *)(a1 + 1396);
            }
            else
            {
              v62 = __clz(v51 - 66) ^ 0x1F;
              v63 = *(unsigned __int8 *)(v201 + v62 + 50);
              v64 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v62 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v65 = v64 + v63;
              *a6 = v65;
              *(_QWORD *)(a7 + (v65 >> 3)) = (((-1 << v62) + v51 - 66) << (v65 & 7)) | *(unsigned __int8 *)(a7 + (v65 >> 3));
              *a6 = v65 + v62;
              v54 = &__dst[4 * v62 + 200];
            }
          }
          else
          {
            v55 = (__clz(v51 - 2) ^ 0x1F) - 1;
            v56 = (v51 - 2) >> v55;
            v57 = (2 * v55) + v56 + 42;
            v58 = *(unsigned __int8 *)(v201 + v57);
            v59 = *a6;
            v60 = (unint64_t)*(unsigned __int16 *)(v34 + 2 * v57) << (*a6 & 7);
            v34 = a1 + 896;
            *(_QWORD *)(a7 + (*a6 >> 3)) = v60 | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v61 = v59 + v58;
            *a6 = v61;
            *(_QWORD *)(a7 + (v61 >> 3)) = ((v51 - 2 - (v56 << v55)) << (v61 & 7)) | *(unsigned __int8 *)(a7 + (v61 >> 3));
            *a6 = v61 + v55;
            v54 = &__dst[4 * v57];
          }
        }
        else
        {
          v52 = *(unsigned __int8 *)(v201 + v51 + 40);
          v53 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v51 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          *a6 = v53 + v52;
          v54 = &__dst[4 * v51 + 160];
        }
LABEL_48:
        ++*(_DWORD *)v54;
        if (v22 != v24)
        {
          v69 = *a6;
          if (v51 <= 1)
            v51 = 1;
          do
          {
            v70 = *v24++;
            v71 = *(unsigned __int8 *)(a1 + v70);
            *(_QWORD *)(a7 + (v69 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v70) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
            v69 += v71;
            *a6 = v69;
            --v51;
          }
          while (v51);
        }
        if (v32 == v42)
        {
          v72 = *(unsigned __int8 *)(a1 + 832);
          v73 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v74 = v73 + v72;
          v75 = (char *)(a1 + 1408);
        }
        else
        {
          v76 = v42 + 3;
          v77 = __clz(v76) ^ 0x1F;
          v78 = v77 - 1;
          v79 = (v76 >> (v77 - 1)) & 1 | 2;
          v80 = ((2 * v77 - 4) & 0xFFFFFFFE | (v76 >> (v77 - 1)) & 1) + 80;
          v81 = *(unsigned __int8 *)(v201 + v80);
          v82 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v80) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v83 = v82 + v81;
          *a6 = v83;
          *(_QWORD *)(a7 + (v83 >> 3)) = ((v76 - (v79 << v78)) << (v83 & 7)) | *(unsigned __int8 *)(a7 + (v83 >> 3));
          v74 = v83 + v78;
          v75 = &__dst[4 * v80];
          v32 = v42;
        }
        v84 = (unint64_t)(v50 + 5);
        ++*(_DWORD *)v75;
        *a6 = v74;
        if ((unint64_t)(v50 + 5) > 0xB)
        {
          if (v84 > 0x47)
          {
            if (v84 > 0x87)
            {
              if (v84 > 0x847)
              {
                v105 = *(unsigned __int8 *)(a1 + 807);
                result = v74 & 7;
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v106 = v74 + v105;
                *a6 = v106;
                v107 = v106 & 7;
                *(_QWORD *)(a7 + (v106 >> 3)) = ((_QWORD)(v50 - 2115) << (v106 & 7)) | *(unsigned __int8 *)(a7 + (v106 >> 3));
                v108 = v106 + 24;
                *a6 = v106 + 24;
                v109 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v108 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v107) | *(unsigned __int8 *)(a7 + (v108 >> 3));
                *a6 = v108 + v109;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v99 = v50 - 67;
                v100 = __clz(v99) ^ 0x1F;
                v101 = *(unsigned __int8 *)(v201 + v100 + 28);
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v100 + 28)) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v102 = v74 + v101;
                *a6 = v102;
                *(_QWORD *)(a7 + (v102 >> 3)) = ((_QWORD)&v99[-1 << v100] << (v102 & 7)) | *(unsigned __int8 *)(a7 + (v102 >> 3));
                v103 = v102 + v100;
                *a6 = v102 + v100;
                v104 = *(unsigned __int8 *)(a1 + 832);
                result = v103 & 7;
                *(_QWORD *)(a7 + (v103 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                *a6 = v103 + v104;
                ++*(_DWORD *)&__dst[4 * v100 + 112];
              }
            }
            else
            {
              v93 = v50 - 3;
              v94 = ((unint64_t)v93 >> 5) + 30;
              v95 = *(unsigned __int8 *)(v201 + v94);
              *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v94) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
              v96 = v74 + v95;
              *a6 = v96;
              *(_QWORD *)(a7 + (v96 >> 3)) = ((unint64_t)(v93 & 0x1F) << (v96 & 7)) | *(unsigned __int8 *)(a7 + (v96 >> 3));
              v97 = v96 + 5;
              *a6 = v96 + 5;
              v98 = *(unsigned __int8 *)(a1 + 832);
              result = v97 & 7;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              *a6 = v97 + v98;
              ++*(_DWORD *)&__dst[4 * v94];
            }
            v87 = (char *)(a1 + 1408);
          }
          else
          {
            v88 = v50 - 3;
            v89 = (__clz(v88) ^ 0x1F) - 1;
            v90 = (2 * v89) + ((unint64_t)v88 >> v89) + 4;
            v91 = *(unsigned __int8 *)(v201 + v90);
            *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v90) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
            v92 = v74 + v91;
            *a6 = v92;
            result = v92 & 7;
            *(_QWORD *)(a7 + (v92 >> 3)) = ((_QWORD)&v88[-((unint64_t)v88 >> v89 << v89)] << (v92 & 7)) | *(unsigned __int8 *)(a7 + (v92 >> 3));
            *a6 = v92 + v89;
            v87 = &__dst[4 * v90];
          }
        }
        else
        {
          v85 = v50 + 1;
          v86 = v85[v201];
          result = v74 & 7;
          *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v85) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
          *a6 = v74 + v86;
          v87 = &__dst[4 * (_QWORD)v85];
        }
        v24 = &v22[v84];
        ++*(_DWORD *)v87;
        if (&v22[v84] >= v30)
        {
LABEL_97:
          v22 = v202;
          v26 = v207;
          goto LABEL_98;
        }
        v110 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v110) >> 51) & 0x1FFC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 8)) >> 51) & 0x1FFC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 16)) >> 51) & 0x1FFC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
        v111 = ((0x1E35A7BD000000 * (v110 >> 24)) >> 51) & 0x1FFC;
        v112 = *(int *)(a5 + v111);
        *(_DWORD *)(a5 + v111) = (_DWORD)v24 - (_DWORD)a2;
        v113 = &a2[v112];
        v33 = v24;
        if (*(_DWORD *)v24 == *(_DWORD *)&a2[v112])
        {
          while (1)
          {
            v33 = v24;
            if (v24[4] != v113[4])
              break;
            v114 = v113 + 5;
            v115 = v24 + 5;
            v116 = v31 - v24;
            if ((unint64_t)(v31 - v24) < 8)
            {
              v119 = v113 + 5;
              if (v116)
              {
LABEL_75:
                v120 = &v119[v116];
                while (1)
                {
                  result = *v115;
                  if (*v119 != (_DWORD)result)
                    break;
                  ++v115;
                  ++v119;
                  if (!--v116)
                  {
                    v119 = v120;
                    break;
                  }
                }
              }
            }
            else
            {
              v117 = 0;
              do
              {
                v118 = *(_QWORD *)&v114[v117] ^ *(_QWORD *)&v115[v117];
                if (v118)
                {
                  v121 = (unsigned __int8 *)(v117 + (__clz(__rbit64(v118)) >> 3));
                  goto LABEL_81;
                }
                v116 -= 8;
                v117 += 8;
              }
              while (v116 > 7);
              v115 += v117;
              v119 = &v114[v117];
              if (v116)
                goto LABEL_75;
            }
            v121 = (unsigned __int8 *)(v119 - v114);
LABEL_81:
            v122 = v24 - v113;
            if (v122 <= 262128)
            {
              v123 = (unint64_t)(v121 + 5);
              if ((unint64_t)(v121 + 5) > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v139 = *(unsigned __int8 *)(a1 + 807);
                    v140 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v141 = v140 + v139;
                    *a6 = v141;
                    *(_QWORD *)(a7 + (v141 >> 3)) = ((_QWORD)(v121 - 2113) << (v141 & 7)) | *(unsigned __int8 *)(a7 + (v141 >> 3));
                    *a6 = v141 + 24;
                    v127 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v134 = v121 - 65;
                    v135 = __clz(v134) ^ 0x1F;
                    v136 = *(unsigned __int8 *)(v201 + v135 + 28);
                    v137 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v135 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v138 = v137 + v136;
                    *a6 = v138;
                    *(_QWORD *)(a7 + (v138 >> 3)) = ((_QWORD)&v134[-1 << v135] << (v138 & 7)) | *(unsigned __int8 *)(a7 + (v138 >> 3));
                    *a6 = v138 + v135;
                    v127 = &__dst[4 * v135 + 112];
                  }
                }
                else
                {
                  v128 = v121 - 1;
                  v129 = (__clz(v128) ^ 0x1F) - 1;
                  v130 = (2 * v129) + ((unint64_t)v128 >> v129) + 20;
                  v131 = *(unsigned __int8 *)(v201 + v130);
                  v132 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v130) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v133 = v132 + v131;
                  *a6 = v133;
                  *(_QWORD *)(a7 + (v133 >> 3)) = ((_QWORD)&v128[-((unint64_t)v128 >> v129 << v129)] << (v133 & 7)) | *(unsigned __int8 *)(a7 + (v133 >> 3));
                  *a6 = v133 + v129;
                  v127 = &__dst[4 * v130];
                }
              }
              else
              {
                v124 = v121 + 19;
                v125 = v124[v201];
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                *a6 = v126 + v125;
                v127 = &__dst[4 * (_QWORD)v124];
              }
              v24 += v123;
              ++*(_DWORD *)v127;
              v142 = (int)v122 + 3;
              v143 = __clz(v142) ^ 0x1F;
              v144 = v143 - 1;
              v145 = ((v142 >> (v143 - 1)) & 1 | 2) << (v143 - 1);
              v146 = ((2 * v143 - 4) & 0xFFFFFFFE | (v142 >> (v143 - 1)) & 1) + 80;
              v147 = *(unsigned __int8 *)(v201 + v146);
              v148 = *a6;
              result = *a6 >> 3;
              *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v146) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
              v149 = v148 + v147;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v142 - v145) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v144;
              ++*(_DWORD *)&__dst[4 * v146];
              if (v24 >= v30)
                goto LABEL_97;
              v32 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 51) & 0x1FFC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 51) & 0x1FFC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 51) & 0x1FFC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 51) & 0x1FFC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - (_DWORD)a2;
              v113 = &a2[v152];
              if (*(_DWORD *)v24 == *(_DWORD *)&a2[v152])
                continue;
            }
            v33 = v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - v196) > v51 || v195 < 0x3D5)
    {
      if (v51 > 0x5841)
      {
        v156 = *(unsigned __int8 *)(a1 + 831);
        v157 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v158 = v157 + v156;
        *a6 = v158;
        *(_QWORD *)(a7 + (v158 >> 3)) = ((v51 - 22594) << (v158 & 7)) | *(unsigned __int8 *)(a7 + (v158 >> 3));
        *a6 = v158 + 24;
        v54 = (char *)(a1 + 1404);
      }
      else
      {
        v153 = *(unsigned __int8 *)(a1 + 830);
        v154 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v155 = v154 + v153;
        *a6 = v155;
        *(_QWORD *)(a7 + (v155 >> 3)) = ((v51 - 6210) << (v155 & 7)) | *(unsigned __int8 *)(a7 + (v155 >> 3));
        *a6 = v155 + 14;
        v54 = (char *)(a1 + 1400);
      }
      goto LABEL_48;
    }
    result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
    v165 = &v199[v204] - v22;
LABEL_125:
    if (v165)
    {
      v204 = v165;
      if (v165 >= 0x18000)
        v182 = 98304;
      else
        v182 = v165;
      v198 = *a6;
      BrotliStoreMetaBlockHeader(v182, 0, a6, a7);
      v183 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v183 + 13;
      v195 = BuildAndStoreLiteralPrefixCode(a1, v22, v182, (_BYTE *)a1, v12, a6, a7);
      BuildAndStoreCommandPrefixCode(a1, a6, a7);
      v23 = v182;
      v14 = v198;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return BuildAndStoreCommandPrefixCode(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

unint64_t BrotliCompressFragmentFastImpl13(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t result;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int i;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  char *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v195;
  unsigned __int8 *v196;
  unint64_t v197;
  unint64_t v198;
  unsigned __int8 *v199;
  unint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  char *__dst;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;

  __dst = (char *)(a1 + 1152);
  v204 = a3;
  v12 = a1 + 256;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  BrotliStoreMetaBlockHeader(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v206 = v13;
  v195 = BuildAndStoreLiteralPrefixCode(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << ((v17 + v18) & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v201 = a1 + 768;
  v208 = a1 + 896;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v206;
  while (2)
  {
    v196 = v22;
    v197 = v14;
    v200 = v14 + 3;
    v24 = v22;
    v205 = v23;
    v207 = v23;
    while (1)
    {
      result = (unint64_t)memcpy(v21, &kCmdHistoSeed, 0x200uLL);
      v26 = v207;
      v27 = v22;
      v22 += v207;
      if (v207 >= 0x10)
        break;
      v29 = v204;
LABEL_98:
      v159 = v29 - v26;
      if (v159 >= 0x10000)
        v160 = 0x10000;
      else
        v160 = v159;
      v204 = v159;
      if (!v159
        || (v205 += v160, v205 > 0x100000)
        || (v207 = v160, result = ShouldMergeBlock(a1, (uint64_t)v22, v160, a1), !(_DWORD)result))
      {
        if (v24 < v22)
        {
          v161 = v22 - v24;
          if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
          {
            if (v161 > 5)
            {
              v165 = v204;
              if (v161 > 0x81)
              {
                if (v161 > 0x841)
                {
                  v176 = *(unsigned __int8 *)(a1 + 829);
                  v177 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v178 = v177 + v176;
                  *a6 = v178;
                  *(_QWORD *)(a7 + (v178 >> 3)) = ((v161 - 2114) << (v178 & 7)) | *(unsigned __int8 *)(a7 + (v178 >> 3));
                  *a6 = v178 + 12;
                  v164 = (char *)(a1 + 1396);
                }
                else
                {
                  v172 = __clz(v161 - 66) ^ 0x1F;
                  v173 = *(unsigned __int8 *)(v201 + v172 + 50);
                  v174 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v172 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v175 = v174 + v173;
                  *a6 = v175;
                  *(_QWORD *)(a7 + (v175 >> 3)) = (((-1 << v172) + v161 - 66) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                  *a6 = v175 + v172;
                  v164 = &__dst[4 * v172 + 200];
                }
              }
              else
              {
                v166 = (__clz(v161 - 2) ^ 0x1F) - 1;
                v167 = (v161 - 2) >> v166;
                v168 = (2 * v166) + v167 + 42;
                v169 = *(unsigned __int8 *)(v201 + v168);
                v170 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * v168) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v171 = v170 + v169;
                *a6 = v171;
                *(_QWORD *)(a7 + (v171 >> 3)) = ((v161 - 2 - (v167 << v166)) << (v171 & 7)) | *(unsigned __int8 *)(a7 + (v171 >> 3));
                *a6 = v171 + v166;
                v164 = &__dst[4 * v168];
              }
            }
            else
            {
              v162 = *(unsigned __int8 *)(v201 + v161 + 40);
              v163 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v161 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v163 + v162;
              v164 = &__dst[4 * v161 + 160];
              v165 = v204;
            }
            ++*(_DWORD *)v164;
            if (v22 != v24)
            {
              v179 = *a6;
              if (v161 <= 1)
                v161 = 1;
              do
              {
                v180 = *v24++;
                v181 = *(unsigned __int8 *)(a1 + v180);
                *(_QWORD *)(a7 + (v179 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v180) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                v179 += v181;
                *a6 = v179;
                --v161;
              }
              while (v161);
            }
            goto LABEL_125;
          }
          result = (unint64_t)v196;
          if (50 * (v24 - v196) > v161 || v195 < 0x3D5)
          {
            if (v161 > 0x5841)
            {
              v189 = *(unsigned __int8 *)(a1 + 831);
              v190 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v191 = v190 + v189;
              *a6 = v191;
              *(_QWORD *)(a7 + (v191 >> 3)) = ((v161 - 22594) << (v191 & 7)) | *(unsigned __int8 *)(a7 + (v191 >> 3));
              v187 = v191 + 24;
              v188 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v184 = *(unsigned __int8 *)(a1 + 830);
              v185 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v186 = v185 + v184;
              *a6 = v186;
              *(_QWORD *)(a7 + (v186 >> 3)) = ((v161 - 6210) << (v186 & 7)) | *(unsigned __int8 *)(a7 + (v186 >> 3));
              v187 = v186 + 14;
              v188 = (_DWORD *)(a1 + 1400);
            }
            v165 = v204;
            ++*v188;
            *a6 = v187;
            do
            {
              v192 = *v24++;
              v193 = *(unsigned __int8 *)(a1 + v192);
              *(_QWORD *)(a7 + (v187 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v192) << (v187 & 7)) | *(unsigned __int8 *)(a7 + (v187 >> 3));
              v187 += v193;
              *a6 = v187;
              --v161;
            }
            while (v161);
            goto LABEL_125;
          }
          result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
        }
        v165 = v204;
        goto LABEL_125;
      }
      UpdateBits((v205 - 1), v200, a7);
      v21 = __dst;
    }
    v28 = v207 - 5;
    v29 = v204;
    if (v207 - 5 >= v204 - 16)
      v28 = v204 - 16;
    v30 = &v27[v28];
    v202 = v22;
    v31 = v22 - 5;
    v32 = -1;
    v199 = v27;
    v33 = v27;
    v34 = a1 + 896;
LABEL_14:
    while (2)
    {
      v36 = *(_QWORD *)(v33 + 1);
      v22 = v33 + 1;
      v35 = v36;
      for (i = 32; ; ++i)
      {
        v38 = &v22[i >> 5];
        if (v38 > v30)
          goto LABEL_97;
        v39 = (unint64_t)(0x1E35A7BD000000 * v35) >> 51;
        v35 = *(_QWORD *)v38;
        v40 = &v22[-v32];
        result = *(unsigned int *)v40;
        if (*(_DWORD *)v22 == (_DWORD)result)
        {
          result = v40[4];
          if (v22[4] == (_DWORD)result && v32 >= 1)
            break;
        }
        v40 = &a2[*(int *)(a5 + 4 * v39)];
        *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v40 && v22[4] == v40[4])
          goto LABEL_22;
LABEL_26:
        v22 = v38;
      }
      *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
LABEL_22:
      v42 = (_DWORD)v22 - (_DWORD)v40;
      if (v22 - v40 > 262128)
        goto LABEL_26;
      v43 = v40 + 5;
      v44 = v22 + 5;
      v45 = v31 - v22;
      if ((unint64_t)(v31 - v22) < 8)
      {
        v48 = v40 + 5;
        if (v45)
        {
LABEL_34:
          v49 = &v48[v45];
          while (*v48 == *v44)
          {
            ++v44;
            ++v48;
            if (!--v45)
            {
              v48 = v49;
              break;
            }
          }
        }
      }
      else
      {
        v46 = 0;
        do
        {
          v47 = *(_QWORD *)&v43[v46] ^ *(_QWORD *)&v44[v46];
          if (v47)
          {
            v50 = (unsigned __int8 *)(v46 + (__clz(__rbit64(v47)) >> 3));
            goto LABEL_40;
          }
          v45 -= 8;
          v46 += 8;
        }
        while (v45 > 7);
        v44 += v46;
        v48 = &v43[v46];
        if (v45)
          goto LABEL_34;
      }
      v50 = (unsigned __int8 *)(v48 - v43);
LABEL_40:
      v51 = v22 - v24;
      if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
      {
        if (v51 > 5)
        {
          if (v51 > 0x81)
          {
            if (v51 > 0x841)
            {
              v66 = *(unsigned __int8 *)(a1 + 829);
              v67 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v68 = v67 + v66;
              *a6 = v68;
              *(_QWORD *)(a7 + (v68 >> 3)) = ((v51 - 2114) << (v68 & 7)) | *(unsigned __int8 *)(a7 + (v68 >> 3));
              *a6 = v68 + 12;
              v54 = (char *)(a1 + 1396);
            }
            else
            {
              v62 = __clz(v51 - 66) ^ 0x1F;
              v63 = *(unsigned __int8 *)(v201 + v62 + 50);
              v64 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v62 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v65 = v64 + v63;
              *a6 = v65;
              *(_QWORD *)(a7 + (v65 >> 3)) = (((-1 << v62) + v51 - 66) << (v65 & 7)) | *(unsigned __int8 *)(a7 + (v65 >> 3));
              *a6 = v65 + v62;
              v54 = &__dst[4 * v62 + 200];
            }
          }
          else
          {
            v55 = (__clz(v51 - 2) ^ 0x1F) - 1;
            v56 = (v51 - 2) >> v55;
            v57 = (2 * v55) + v56 + 42;
            v58 = *(unsigned __int8 *)(v201 + v57);
            v59 = *a6;
            v60 = (unint64_t)*(unsigned __int16 *)(v34 + 2 * v57) << (*a6 & 7);
            v34 = a1 + 896;
            *(_QWORD *)(a7 + (*a6 >> 3)) = v60 | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v61 = v59 + v58;
            *a6 = v61;
            *(_QWORD *)(a7 + (v61 >> 3)) = ((v51 - 2 - (v56 << v55)) << (v61 & 7)) | *(unsigned __int8 *)(a7 + (v61 >> 3));
            *a6 = v61 + v55;
            v54 = &__dst[4 * v57];
          }
        }
        else
        {
          v52 = *(unsigned __int8 *)(v201 + v51 + 40);
          v53 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v51 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          *a6 = v53 + v52;
          v54 = &__dst[4 * v51 + 160];
        }
LABEL_48:
        ++*(_DWORD *)v54;
        if (v22 != v24)
        {
          v69 = *a6;
          if (v51 <= 1)
            v51 = 1;
          do
          {
            v70 = *v24++;
            v71 = *(unsigned __int8 *)(a1 + v70);
            *(_QWORD *)(a7 + (v69 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v70) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
            v69 += v71;
            *a6 = v69;
            --v51;
          }
          while (v51);
        }
        if (v32 == v42)
        {
          v72 = *(unsigned __int8 *)(a1 + 832);
          v73 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v74 = v73 + v72;
          v75 = (char *)(a1 + 1408);
        }
        else
        {
          v76 = v42 + 3;
          v77 = __clz(v76) ^ 0x1F;
          v78 = v77 - 1;
          v79 = (v76 >> (v77 - 1)) & 1 | 2;
          v80 = ((2 * v77 - 4) & 0xFFFFFFFE | (v76 >> (v77 - 1)) & 1) + 80;
          v81 = *(unsigned __int8 *)(v201 + v80);
          v82 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v80) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v83 = v82 + v81;
          *a6 = v83;
          *(_QWORD *)(a7 + (v83 >> 3)) = ((v76 - (v79 << v78)) << (v83 & 7)) | *(unsigned __int8 *)(a7 + (v83 >> 3));
          v74 = v83 + v78;
          v75 = &__dst[4 * v80];
          v32 = v42;
        }
        v84 = (unint64_t)(v50 + 5);
        ++*(_DWORD *)v75;
        *a6 = v74;
        if ((unint64_t)(v50 + 5) > 0xB)
        {
          if (v84 > 0x47)
          {
            if (v84 > 0x87)
            {
              if (v84 > 0x847)
              {
                v105 = *(unsigned __int8 *)(a1 + 807);
                result = v74 & 7;
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v106 = v74 + v105;
                *a6 = v106;
                v107 = v106 & 7;
                *(_QWORD *)(a7 + (v106 >> 3)) = ((_QWORD)(v50 - 2115) << (v106 & 7)) | *(unsigned __int8 *)(a7 + (v106 >> 3));
                v108 = v106 + 24;
                *a6 = v106 + 24;
                v109 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v108 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v107) | *(unsigned __int8 *)(a7 + (v108 >> 3));
                *a6 = v108 + v109;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v99 = v50 - 67;
                v100 = __clz(v99) ^ 0x1F;
                v101 = *(unsigned __int8 *)(v201 + v100 + 28);
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v100 + 28)) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v102 = v74 + v101;
                *a6 = v102;
                *(_QWORD *)(a7 + (v102 >> 3)) = ((_QWORD)&v99[-1 << v100] << (v102 & 7)) | *(unsigned __int8 *)(a7 + (v102 >> 3));
                v103 = v102 + v100;
                *a6 = v102 + v100;
                v104 = *(unsigned __int8 *)(a1 + 832);
                result = v103 & 7;
                *(_QWORD *)(a7 + (v103 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                *a6 = v103 + v104;
                ++*(_DWORD *)&__dst[4 * v100 + 112];
              }
            }
            else
            {
              v93 = v50 - 3;
              v94 = ((unint64_t)v93 >> 5) + 30;
              v95 = *(unsigned __int8 *)(v201 + v94);
              *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v94) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
              v96 = v74 + v95;
              *a6 = v96;
              *(_QWORD *)(a7 + (v96 >> 3)) = ((unint64_t)(v93 & 0x1F) << (v96 & 7)) | *(unsigned __int8 *)(a7 + (v96 >> 3));
              v97 = v96 + 5;
              *a6 = v96 + 5;
              v98 = *(unsigned __int8 *)(a1 + 832);
              result = v97 & 7;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              *a6 = v97 + v98;
              ++*(_DWORD *)&__dst[4 * v94];
            }
            v87 = (char *)(a1 + 1408);
          }
          else
          {
            v88 = v50 - 3;
            v89 = (__clz(v88) ^ 0x1F) - 1;
            v90 = (2 * v89) + ((unint64_t)v88 >> v89) + 4;
            v91 = *(unsigned __int8 *)(v201 + v90);
            *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v90) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
            v92 = v74 + v91;
            *a6 = v92;
            result = v92 & 7;
            *(_QWORD *)(a7 + (v92 >> 3)) = ((_QWORD)&v88[-((unint64_t)v88 >> v89 << v89)] << (v92 & 7)) | *(unsigned __int8 *)(a7 + (v92 >> 3));
            *a6 = v92 + v89;
            v87 = &__dst[4 * v90];
          }
        }
        else
        {
          v85 = v50 + 1;
          v86 = v85[v201];
          result = v74 & 7;
          *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v85) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
          *a6 = v74 + v86;
          v87 = &__dst[4 * (_QWORD)v85];
        }
        v24 = &v22[v84];
        ++*(_DWORD *)v87;
        if (&v22[v84] >= v30)
        {
LABEL_97:
          v22 = v202;
          v26 = v207;
          goto LABEL_98;
        }
        v110 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v110) >> 49) & 0x7FFC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 8)) >> 49) & 0x7FFC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 16)) >> 49) & 0x7FFC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
        v111 = ((0x1E35A7BD000000 * (v110 >> 24)) >> 49) & 0x7FFC;
        v112 = *(int *)(a5 + v111);
        *(_DWORD *)(a5 + v111) = (_DWORD)v24 - (_DWORD)a2;
        v113 = &a2[v112];
        v33 = v24;
        if (*(_DWORD *)v24 == *(_DWORD *)&a2[v112])
        {
          while (1)
          {
            v33 = v24;
            if (v24[4] != v113[4])
              break;
            v114 = v113 + 5;
            v115 = v24 + 5;
            v116 = v31 - v24;
            if ((unint64_t)(v31 - v24) < 8)
            {
              v119 = v113 + 5;
              if (v116)
              {
LABEL_75:
                v120 = &v119[v116];
                while (1)
                {
                  result = *v115;
                  if (*v119 != (_DWORD)result)
                    break;
                  ++v115;
                  ++v119;
                  if (!--v116)
                  {
                    v119 = v120;
                    break;
                  }
                }
              }
            }
            else
            {
              v117 = 0;
              do
              {
                v118 = *(_QWORD *)&v114[v117] ^ *(_QWORD *)&v115[v117];
                if (v118)
                {
                  v121 = (unsigned __int8 *)(v117 + (__clz(__rbit64(v118)) >> 3));
                  goto LABEL_81;
                }
                v116 -= 8;
                v117 += 8;
              }
              while (v116 > 7);
              v115 += v117;
              v119 = &v114[v117];
              if (v116)
                goto LABEL_75;
            }
            v121 = (unsigned __int8 *)(v119 - v114);
LABEL_81:
            v122 = v24 - v113;
            if (v122 <= 262128)
            {
              v123 = (unint64_t)(v121 + 5);
              if ((unint64_t)(v121 + 5) > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v139 = *(unsigned __int8 *)(a1 + 807);
                    v140 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v141 = v140 + v139;
                    *a6 = v141;
                    *(_QWORD *)(a7 + (v141 >> 3)) = ((_QWORD)(v121 - 2113) << (v141 & 7)) | *(unsigned __int8 *)(a7 + (v141 >> 3));
                    *a6 = v141 + 24;
                    v127 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v134 = v121 - 65;
                    v135 = __clz(v134) ^ 0x1F;
                    v136 = *(unsigned __int8 *)(v201 + v135 + 28);
                    v137 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v135 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v138 = v137 + v136;
                    *a6 = v138;
                    *(_QWORD *)(a7 + (v138 >> 3)) = ((_QWORD)&v134[-1 << v135] << (v138 & 7)) | *(unsigned __int8 *)(a7 + (v138 >> 3));
                    *a6 = v138 + v135;
                    v127 = &__dst[4 * v135 + 112];
                  }
                }
                else
                {
                  v128 = v121 - 1;
                  v129 = (__clz(v128) ^ 0x1F) - 1;
                  v130 = (2 * v129) + ((unint64_t)v128 >> v129) + 20;
                  v131 = *(unsigned __int8 *)(v201 + v130);
                  v132 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v130) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v133 = v132 + v131;
                  *a6 = v133;
                  *(_QWORD *)(a7 + (v133 >> 3)) = ((_QWORD)&v128[-((unint64_t)v128 >> v129 << v129)] << (v133 & 7)) | *(unsigned __int8 *)(a7 + (v133 >> 3));
                  *a6 = v133 + v129;
                  v127 = &__dst[4 * v130];
                }
              }
              else
              {
                v124 = v121 + 19;
                v125 = v124[v201];
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                *a6 = v126 + v125;
                v127 = &__dst[4 * (_QWORD)v124];
              }
              v24 += v123;
              ++*(_DWORD *)v127;
              v142 = (int)v122 + 3;
              v143 = __clz(v142) ^ 0x1F;
              v144 = v143 - 1;
              v145 = ((v142 >> (v143 - 1)) & 1 | 2) << (v143 - 1);
              v146 = ((2 * v143 - 4) & 0xFFFFFFFE | (v142 >> (v143 - 1)) & 1) + 80;
              v147 = *(unsigned __int8 *)(v201 + v146);
              v148 = *a6;
              result = *a6 >> 3;
              *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v146) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
              v149 = v148 + v147;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v142 - v145) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v144;
              ++*(_DWORD *)&__dst[4 * v146];
              if (v24 >= v30)
                goto LABEL_97;
              v32 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 49) & 0x7FFC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 49) & 0x7FFC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 49) & 0x7FFC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 49) & 0x7FFC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - (_DWORD)a2;
              v113 = &a2[v152];
              if (*(_DWORD *)v24 == *(_DWORD *)&a2[v152])
                continue;
            }
            v33 = v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - v196) > v51 || v195 < 0x3D5)
    {
      if (v51 > 0x5841)
      {
        v156 = *(unsigned __int8 *)(a1 + 831);
        v157 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v158 = v157 + v156;
        *a6 = v158;
        *(_QWORD *)(a7 + (v158 >> 3)) = ((v51 - 22594) << (v158 & 7)) | *(unsigned __int8 *)(a7 + (v158 >> 3));
        *a6 = v158 + 24;
        v54 = (char *)(a1 + 1404);
      }
      else
      {
        v153 = *(unsigned __int8 *)(a1 + 830);
        v154 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v155 = v154 + v153;
        *a6 = v155;
        *(_QWORD *)(a7 + (v155 >> 3)) = ((v51 - 6210) << (v155 & 7)) | *(unsigned __int8 *)(a7 + (v155 >> 3));
        *a6 = v155 + 14;
        v54 = (char *)(a1 + 1400);
      }
      goto LABEL_48;
    }
    result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
    v165 = &v199[v204] - v22;
LABEL_125:
    if (v165)
    {
      v204 = v165;
      if (v165 >= 0x18000)
        v182 = 98304;
      else
        v182 = v165;
      v198 = *a6;
      BrotliStoreMetaBlockHeader(v182, 0, a6, a7);
      v183 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v183 + 13;
      v195 = BuildAndStoreLiteralPrefixCode(a1, v22, v182, (_BYTE *)a1, v12, a6, a7);
      BuildAndStoreCommandPrefixCode(a1, a6, a7);
      v23 = v182;
      v14 = v198;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return BuildAndStoreCommandPrefixCode(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

unint64_t BrotliCompressFragmentFastImpl15(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t result;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int i;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  char *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v195;
  unsigned __int8 *v196;
  unint64_t v197;
  unint64_t v198;
  unsigned __int8 *v199;
  unint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  char *__dst;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;

  __dst = (char *)(a1 + 1152);
  v204 = a3;
  v12 = a1 + 256;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  BrotliStoreMetaBlockHeader(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v206 = v13;
  v195 = BuildAndStoreLiteralPrefixCode(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << ((v17 + v18) & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v201 = a1 + 768;
  v208 = a1 + 896;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v206;
  while (2)
  {
    v196 = v22;
    v197 = v14;
    v200 = v14 + 3;
    v24 = v22;
    v205 = v23;
    v207 = v23;
    while (1)
    {
      result = (unint64_t)memcpy(v21, &kCmdHistoSeed, 0x200uLL);
      v26 = v207;
      v27 = v22;
      v22 += v207;
      if (v207 >= 0x10)
        break;
      v29 = v204;
LABEL_98:
      v159 = v29 - v26;
      if (v159 >= 0x10000)
        v160 = 0x10000;
      else
        v160 = v159;
      v204 = v159;
      if (!v159
        || (v205 += v160, v205 > 0x100000)
        || (v207 = v160, result = ShouldMergeBlock(a1, (uint64_t)v22, v160, a1), !(_DWORD)result))
      {
        if (v24 < v22)
        {
          v161 = v22 - v24;
          if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
          {
            if (v161 > 5)
            {
              v165 = v204;
              if (v161 > 0x81)
              {
                if (v161 > 0x841)
                {
                  v176 = *(unsigned __int8 *)(a1 + 829);
                  v177 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v178 = v177 + v176;
                  *a6 = v178;
                  *(_QWORD *)(a7 + (v178 >> 3)) = ((v161 - 2114) << (v178 & 7)) | *(unsigned __int8 *)(a7 + (v178 >> 3));
                  *a6 = v178 + 12;
                  v164 = (char *)(a1 + 1396);
                }
                else
                {
                  v172 = __clz(v161 - 66) ^ 0x1F;
                  v173 = *(unsigned __int8 *)(v201 + v172 + 50);
                  v174 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v172 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v175 = v174 + v173;
                  *a6 = v175;
                  *(_QWORD *)(a7 + (v175 >> 3)) = (((-1 << v172) + v161 - 66) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                  *a6 = v175 + v172;
                  v164 = &__dst[4 * v172 + 200];
                }
              }
              else
              {
                v166 = (__clz(v161 - 2) ^ 0x1F) - 1;
                v167 = (v161 - 2) >> v166;
                v168 = (2 * v166) + v167 + 42;
                v169 = *(unsigned __int8 *)(v201 + v168);
                v170 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * v168) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v171 = v170 + v169;
                *a6 = v171;
                *(_QWORD *)(a7 + (v171 >> 3)) = ((v161 - 2 - (v167 << v166)) << (v171 & 7)) | *(unsigned __int8 *)(a7 + (v171 >> 3));
                *a6 = v171 + v166;
                v164 = &__dst[4 * v168];
              }
            }
            else
            {
              v162 = *(unsigned __int8 *)(v201 + v161 + 40);
              v163 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v208 + 2 * (v161 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v163 + v162;
              v164 = &__dst[4 * v161 + 160];
              v165 = v204;
            }
            ++*(_DWORD *)v164;
            if (v22 != v24)
            {
              v179 = *a6;
              if (v161 <= 1)
                v161 = 1;
              do
              {
                v180 = *v24++;
                v181 = *(unsigned __int8 *)(a1 + v180);
                *(_QWORD *)(a7 + (v179 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v180) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                v179 += v181;
                *a6 = v179;
                --v161;
              }
              while (v161);
            }
            goto LABEL_125;
          }
          result = (unint64_t)v196;
          if (50 * (v24 - v196) > v161 || v195 < 0x3D5)
          {
            if (v161 > 0x5841)
            {
              v189 = *(unsigned __int8 *)(a1 + 831);
              v190 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v191 = v190 + v189;
              *a6 = v191;
              *(_QWORD *)(a7 + (v191 >> 3)) = ((v161 - 22594) << (v191 & 7)) | *(unsigned __int8 *)(a7 + (v191 >> 3));
              v187 = v191 + 24;
              v188 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v184 = *(unsigned __int8 *)(a1 + 830);
              v185 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v186 = v185 + v184;
              *a6 = v186;
              *(_QWORD *)(a7 + (v186 >> 3)) = ((v161 - 6210) << (v186 & 7)) | *(unsigned __int8 *)(a7 + (v186 >> 3));
              v187 = v186 + 14;
              v188 = (_DWORD *)(a1 + 1400);
            }
            v165 = v204;
            ++*v188;
            *a6 = v187;
            do
            {
              v192 = *v24++;
              v193 = *(unsigned __int8 *)(a1 + v192);
              *(_QWORD *)(a7 + (v187 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v192) << (v187 & 7)) | *(unsigned __int8 *)(a7 + (v187 >> 3));
              v187 += v193;
              *a6 = v187;
              --v161;
            }
            while (v161);
            goto LABEL_125;
          }
          result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
        }
        v165 = v204;
        goto LABEL_125;
      }
      UpdateBits((v205 - 1), v200, a7);
      v21 = __dst;
    }
    v28 = v207 - 5;
    v29 = v204;
    if (v207 - 5 >= v204 - 16)
      v28 = v204 - 16;
    v30 = &v27[v28];
    v202 = v22;
    v31 = v22 - 5;
    v32 = -1;
    v199 = v27;
    v33 = v27;
    v34 = a1 + 896;
LABEL_14:
    while (2)
    {
      v36 = *(_QWORD *)(v33 + 1);
      v22 = v33 + 1;
      v35 = v36;
      for (i = 32; ; ++i)
      {
        v38 = &v22[i >> 5];
        if (v38 > v30)
          goto LABEL_97;
        v39 = (unint64_t)(0x1E35A7BD000000 * v35) >> 49;
        v35 = *(_QWORD *)v38;
        v40 = &v22[-v32];
        result = *(unsigned int *)v40;
        if (*(_DWORD *)v22 == (_DWORD)result)
        {
          result = v40[4];
          if (v22[4] == (_DWORD)result && v32 >= 1)
            break;
        }
        v40 = &a2[*(int *)(a5 + 4 * v39)];
        *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v40 && v22[4] == v40[4])
          goto LABEL_22;
LABEL_26:
        v22 = v38;
      }
      *(_DWORD *)(a5 + 4 * v39) = (_DWORD)v22 - (_DWORD)a2;
LABEL_22:
      v42 = (_DWORD)v22 - (_DWORD)v40;
      if (v22 - v40 > 262128)
        goto LABEL_26;
      v43 = v40 + 5;
      v44 = v22 + 5;
      v45 = v31 - v22;
      if ((unint64_t)(v31 - v22) < 8)
      {
        v48 = v40 + 5;
        if (v45)
        {
LABEL_34:
          v49 = &v48[v45];
          while (*v48 == *v44)
          {
            ++v44;
            ++v48;
            if (!--v45)
            {
              v48 = v49;
              break;
            }
          }
        }
      }
      else
      {
        v46 = 0;
        do
        {
          v47 = *(_QWORD *)&v43[v46] ^ *(_QWORD *)&v44[v46];
          if (v47)
          {
            v50 = (unsigned __int8 *)(v46 + (__clz(__rbit64(v47)) >> 3));
            goto LABEL_40;
          }
          v45 -= 8;
          v46 += 8;
        }
        while (v45 > 7);
        v44 += v46;
        v48 = &v43[v46];
        if (v45)
          goto LABEL_34;
      }
      v50 = (unsigned __int8 *)(v48 - v43);
LABEL_40:
      v51 = v22 - v24;
      if ((unint64_t)(v22 - v24) >> 1 <= 0xC20)
      {
        if (v51 > 5)
        {
          if (v51 > 0x81)
          {
            if (v51 > 0x841)
            {
              v66 = *(unsigned __int8 *)(a1 + 829);
              v67 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v68 = v67 + v66;
              *a6 = v68;
              *(_QWORD *)(a7 + (v68 >> 3)) = ((v51 - 2114) << (v68 & 7)) | *(unsigned __int8 *)(a7 + (v68 >> 3));
              *a6 = v68 + 12;
              v54 = (char *)(a1 + 1396);
            }
            else
            {
              v62 = __clz(v51 - 66) ^ 0x1F;
              v63 = *(unsigned __int8 *)(v201 + v62 + 50);
              v64 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v62 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v65 = v64 + v63;
              *a6 = v65;
              *(_QWORD *)(a7 + (v65 >> 3)) = (((-1 << v62) + v51 - 66) << (v65 & 7)) | *(unsigned __int8 *)(a7 + (v65 >> 3));
              *a6 = v65 + v62;
              v54 = &__dst[4 * v62 + 200];
            }
          }
          else
          {
            v55 = (__clz(v51 - 2) ^ 0x1F) - 1;
            v56 = (v51 - 2) >> v55;
            v57 = (2 * v55) + v56 + 42;
            v58 = *(unsigned __int8 *)(v201 + v57);
            v59 = *a6;
            v60 = (unint64_t)*(unsigned __int16 *)(v34 + 2 * v57) << (*a6 & 7);
            v34 = a1 + 896;
            *(_QWORD *)(a7 + (*a6 >> 3)) = v60 | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v61 = v59 + v58;
            *a6 = v61;
            *(_QWORD *)(a7 + (v61 >> 3)) = ((v51 - 2 - (v56 << v55)) << (v61 & 7)) | *(unsigned __int8 *)(a7 + (v61 >> 3));
            *a6 = v61 + v55;
            v54 = &__dst[4 * v57];
          }
        }
        else
        {
          v52 = *(unsigned __int8 *)(v201 + v51 + 40);
          v53 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v51 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          *a6 = v53 + v52;
          v54 = &__dst[4 * v51 + 160];
        }
LABEL_48:
        ++*(_DWORD *)v54;
        if (v22 != v24)
        {
          v69 = *a6;
          if (v51 <= 1)
            v51 = 1;
          do
          {
            v70 = *v24++;
            v71 = *(unsigned __int8 *)(a1 + v70);
            *(_QWORD *)(a7 + (v69 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v70) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
            v69 += v71;
            *a6 = v69;
            --v51;
          }
          while (v51);
        }
        if (v32 == v42)
        {
          v72 = *(unsigned __int8 *)(a1 + 832);
          v73 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v74 = v73 + v72;
          v75 = (char *)(a1 + 1408);
        }
        else
        {
          v76 = v42 + 3;
          v77 = __clz(v76) ^ 0x1F;
          v78 = v77 - 1;
          v79 = (v76 >> (v77 - 1)) & 1 | 2;
          v80 = ((2 * v77 - 4) & 0xFFFFFFFE | (v76 >> (v77 - 1)) & 1) + 80;
          v81 = *(unsigned __int8 *)(v201 + v80);
          v82 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v80) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v83 = v82 + v81;
          *a6 = v83;
          *(_QWORD *)(a7 + (v83 >> 3)) = ((v76 - (v79 << v78)) << (v83 & 7)) | *(unsigned __int8 *)(a7 + (v83 >> 3));
          v74 = v83 + v78;
          v75 = &__dst[4 * v80];
          v32 = v42;
        }
        v84 = (unint64_t)(v50 + 5);
        ++*(_DWORD *)v75;
        *a6 = v74;
        if ((unint64_t)(v50 + 5) > 0xB)
        {
          if (v84 > 0x47)
          {
            if (v84 > 0x87)
            {
              if (v84 > 0x847)
              {
                v105 = *(unsigned __int8 *)(a1 + 807);
                result = v74 & 7;
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v106 = v74 + v105;
                *a6 = v106;
                v107 = v106 & 7;
                *(_QWORD *)(a7 + (v106 >> 3)) = ((_QWORD)(v50 - 2115) << (v106 & 7)) | *(unsigned __int8 *)(a7 + (v106 >> 3));
                v108 = v106 + 24;
                *a6 = v106 + 24;
                v109 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v108 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v107) | *(unsigned __int8 *)(a7 + (v108 >> 3));
                *a6 = v108 + v109;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v99 = v50 - 67;
                v100 = __clz(v99) ^ 0x1F;
                v101 = *(unsigned __int8 *)(v201 + v100 + 28);
                *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v100 + 28)) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
                v102 = v74 + v101;
                *a6 = v102;
                *(_QWORD *)(a7 + (v102 >> 3)) = ((_QWORD)&v99[-1 << v100] << (v102 & 7)) | *(unsigned __int8 *)(a7 + (v102 >> 3));
                v103 = v102 + v100;
                *a6 = v102 + v100;
                v104 = *(unsigned __int8 *)(a1 + 832);
                result = v103 & 7;
                *(_QWORD *)(a7 + (v103 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                *a6 = v103 + v104;
                ++*(_DWORD *)&__dst[4 * v100 + 112];
              }
            }
            else
            {
              v93 = v50 - 3;
              v94 = ((unint64_t)v93 >> 5) + 30;
              v95 = *(unsigned __int8 *)(v201 + v94);
              *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v94) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
              v96 = v74 + v95;
              *a6 = v96;
              *(_QWORD *)(a7 + (v96 >> 3)) = ((unint64_t)(v93 & 0x1F) << (v96 & 7)) | *(unsigned __int8 *)(a7 + (v96 >> 3));
              v97 = v96 + 5;
              *a6 = v96 + 5;
              v98 = *(unsigned __int8 *)(a1 + 832);
              result = v97 & 7;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              *a6 = v97 + v98;
              ++*(_DWORD *)&__dst[4 * v94];
            }
            v87 = (char *)(a1 + 1408);
          }
          else
          {
            v88 = v50 - 3;
            v89 = (__clz(v88) ^ 0x1F) - 1;
            v90 = (2 * v89) + ((unint64_t)v88 >> v89) + 4;
            v91 = *(unsigned __int8 *)(v201 + v90);
            *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v90) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
            v92 = v74 + v91;
            *a6 = v92;
            result = v92 & 7;
            *(_QWORD *)(a7 + (v92 >> 3)) = ((_QWORD)&v88[-((unint64_t)v88 >> v89 << v89)] << (v92 & 7)) | *(unsigned __int8 *)(a7 + (v92 >> 3));
            *a6 = v92 + v89;
            v87 = &__dst[4 * v90];
          }
        }
        else
        {
          v85 = v50 + 1;
          v86 = v85[v201];
          result = v74 & 7;
          *(_QWORD *)(a7 + (v74 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v85) << (v74 & 7)) | *(unsigned __int8 *)(a7 + (v74 >> 3));
          *a6 = v74 + v86;
          v87 = &__dst[4 * (_QWORD)v85];
        }
        v24 = &v22[v84];
        ++*(_DWORD *)v87;
        if (&v22[v84] >= v30)
        {
LABEL_97:
          v22 = v202;
          v26 = v207;
          goto LABEL_98;
        }
        v110 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v110) >> 47) & 0x1FFFC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 8)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v110 >> 16)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
        v111 = ((0x1E35A7BD000000 * (v110 >> 24)) >> 47) & 0x1FFFC;
        v112 = *(int *)(a5 + v111);
        *(_DWORD *)(a5 + v111) = (_DWORD)v24 - (_DWORD)a2;
        v113 = &a2[v112];
        v33 = v24;
        if (*(_DWORD *)v24 == *(_DWORD *)&a2[v112])
        {
          while (1)
          {
            v33 = v24;
            if (v24[4] != v113[4])
              break;
            v114 = v113 + 5;
            v115 = v24 + 5;
            v116 = v31 - v24;
            if ((unint64_t)(v31 - v24) < 8)
            {
              v119 = v113 + 5;
              if (v116)
              {
LABEL_75:
                v120 = &v119[v116];
                while (1)
                {
                  result = *v115;
                  if (*v119 != (_DWORD)result)
                    break;
                  ++v115;
                  ++v119;
                  if (!--v116)
                  {
                    v119 = v120;
                    break;
                  }
                }
              }
            }
            else
            {
              v117 = 0;
              do
              {
                v118 = *(_QWORD *)&v114[v117] ^ *(_QWORD *)&v115[v117];
                if (v118)
                {
                  v121 = (unsigned __int8 *)(v117 + (__clz(__rbit64(v118)) >> 3));
                  goto LABEL_81;
                }
                v116 -= 8;
                v117 += 8;
              }
              while (v116 > 7);
              v115 += v117;
              v119 = &v114[v117];
              if (v116)
                goto LABEL_75;
            }
            v121 = (unsigned __int8 *)(v119 - v114);
LABEL_81:
            v122 = v24 - v113;
            if (v122 <= 262128)
            {
              v123 = (unint64_t)(v121 + 5);
              if ((unint64_t)(v121 + 5) > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v139 = *(unsigned __int8 *)(a1 + 807);
                    v140 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v141 = v140 + v139;
                    *a6 = v141;
                    *(_QWORD *)(a7 + (v141 >> 3)) = ((_QWORD)(v121 - 2113) << (v141 & 7)) | *(unsigned __int8 *)(a7 + (v141 >> 3));
                    *a6 = v141 + 24;
                    v127 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v134 = v121 - 65;
                    v135 = __clz(v134) ^ 0x1F;
                    v136 = *(unsigned __int8 *)(v201 + v135 + 28);
                    v137 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (v135 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v138 = v137 + v136;
                    *a6 = v138;
                    *(_QWORD *)(a7 + (v138 >> 3)) = ((_QWORD)&v134[-1 << v135] << (v138 & 7)) | *(unsigned __int8 *)(a7 + (v138 >> 3));
                    *a6 = v138 + v135;
                    v127 = &__dst[4 * v135 + 112];
                  }
                }
                else
                {
                  v128 = v121 - 1;
                  v129 = (__clz(v128) ^ 0x1F) - 1;
                  v130 = (2 * v129) + ((unint64_t)v128 >> v129) + 20;
                  v131 = *(unsigned __int8 *)(v201 + v130);
                  v132 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v130) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v133 = v132 + v131;
                  *a6 = v133;
                  *(_QWORD *)(a7 + (v133 >> 3)) = ((_QWORD)&v128[-((unint64_t)v128 >> v129 << v129)] << (v133 & 7)) | *(unsigned __int8 *)(a7 + (v133 >> 3));
                  *a6 = v133 + v129;
                  v127 = &__dst[4 * v130];
                }
              }
              else
              {
                v124 = v121 + 19;
                v125 = v124[v201];
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * (_QWORD)v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                *a6 = v126 + v125;
                v127 = &__dst[4 * (_QWORD)v124];
              }
              v24 += v123;
              ++*(_DWORD *)v127;
              v142 = (int)v122 + 3;
              v143 = __clz(v142) ^ 0x1F;
              v144 = v143 - 1;
              v145 = ((v142 >> (v143 - 1)) & 1 | 2) << (v143 - 1);
              v146 = ((2 * v143 - 4) & 0xFFFFFFFE | (v142 >> (v143 - 1)) & 1) + 80;
              v147 = *(unsigned __int8 *)(v201 + v146);
              v148 = *a6;
              result = *a6 >> 3;
              *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v34 + 2 * v146) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
              v149 = v148 + v147;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v142 - v145) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v144;
              ++*(_DWORD *)&__dst[4 * v146];
              if (v24 >= v30)
                goto LABEL_97;
              v32 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 47) & 0x1FFFC)) = (_DWORD)v24 - (_DWORD)a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - (_DWORD)a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - (_DWORD)a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 47) & 0x1FFFC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - (_DWORD)a2;
              v113 = &a2[v152];
              if (*(_DWORD *)v24 == *(_DWORD *)&a2[v152])
                continue;
            }
            v33 = v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - v196) > v51 || v195 < 0x3D5)
    {
      if (v51 > 0x5841)
      {
        v156 = *(unsigned __int8 *)(a1 + 831);
        v157 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v158 = v157 + v156;
        *a6 = v158;
        *(_QWORD *)(a7 + (v158 >> 3)) = ((v51 - 22594) << (v158 & 7)) | *(unsigned __int8 *)(a7 + (v158 >> 3));
        *a6 = v158 + 24;
        v54 = (char *)(a1 + 1404);
      }
      else
      {
        v153 = *(unsigned __int8 *)(a1 + 830);
        v154 = *a6;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v155 = v154 + v153;
        *a6 = v155;
        *(_QWORD *)(a7 + (v155 >> 3)) = ((v51 - 6210) << (v155 & 7)) | *(unsigned __int8 *)(a7 + (v155 >> 3));
        *a6 = v155 + 14;
        v54 = (char *)(a1 + 1400);
      }
      goto LABEL_48;
    }
    result = (unint64_t)EmitUncompressedMetaBlock_0(v196, (uint64_t)v22, v197, a6, a7);
    v165 = &v199[v204] - v22;
LABEL_125:
    if (v165)
    {
      v204 = v165;
      if (v165 >= 0x18000)
        v182 = 98304;
      else
        v182 = v165;
      v198 = *a6;
      BrotliStoreMetaBlockHeader(v182, 0, a6, a7);
      v183 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v183 + 13;
      v195 = BuildAndStoreLiteralPrefixCode(a1, v22, v182, (_BYTE *)a1, v12, a6, a7);
      BuildAndStoreCommandPrefixCode(a1, a6, a7);
      v23 = v182;
      v14 = v198;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return BuildAndStoreCommandPrefixCode(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

void *EmitUncompressedMetaBlock_0(const void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  size_t v8;
  unint64_t v9;
  void *result;
  unint64_t v11;

  v8 = a2 - (_QWORD)a1;
  *(_BYTE *)(a5 + (a3 >> 3)) &= ~(-1 << (a3 & 7));
  *a4 = a3;
  BrotliStoreMetaBlockHeader(a2 - (_QWORD)a1, 1u, a4, a5);
  v9 = (*(_DWORD *)a4 + 7) & 0xFFFFFFF8;
  *a4 = v9;
  result = memcpy((void *)(a5 + (v9 >> 3)), a1, v8);
  v11 = *a4 + 8 * v8;
  *a4 = v11;
  *(_BYTE *)(a5 + (v11 >> 3)) = 0;
  return result;
}

unint64_t BuildAndStoreLiteralPrefixCode(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _BYTE *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  unsigned __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t i;
  int v34;

  v14 = a1 + 6288;
  bzero((void *)(a1 + 6288), 0x400uLL);
  if (a3 >= 0x8000)
  {
    v24 = 0;
    do
    {
      ++*(_DWORD *)(v14 + 4 * a2[v24]);
      v24 += 29;
    }
    while (v24 < a3);
    v25 = 0;
    v26 = ((a3 + 28) * (unsigned __int128)0x1A7B9611A7B9611BuLL) >> 64;
    v18 = 0uLL;
    v19 = (int64x2_t)((v26 + ((a3 + 28 - v26) >> 1)) >> 4);
    v27.i64[0] = 0xB0000000BLL;
    v27.i64[1] = 0xB0000000BLL;
    do
    {
      v28 = *(int32x4_t *)(v14 + v25);
      v29 = (int32x4_t)vminq_u32((uint32x4_t)v28, v27);
      v30 = *(_OWORD *)&vaddq_s32(v29, v29) | __PAIR128__(0x100000001, 0x100000001);
      *(int32x4_t *)(v14 + v25) = vaddq_s32((int32x4_t)v30, v28);
      v18 = (int64x2_t)vaddw_high_u32((uint64x2_t)v18, (uint32x4_t)v30);
      v19 = (int64x2_t)vaddw_u32((uint64x2_t)v19, *(uint32x2_t *)&v30);
      v25 += 16;
    }
    while (v25 != 1024);
  }
  else
  {
    if (a3)
    {
      v15 = a3;
      do
      {
        v16 = *a2++;
        ++*(_DWORD *)(v14 + 4 * v16);
        --v15;
      }
      while (v15);
    }
    v17 = 0;
    v18 = 0uLL;
    v19 = (int64x2_t)a3;
    v20.i64[0] = 0xB0000000BLL;
    v20.i64[1] = 0xB0000000BLL;
    do
    {
      v21 = *(int32x4_t *)(v14 + v17);
      v22 = (int32x4_t)vminq_u32((uint32x4_t)v21, v20);
      v23 = vaddq_s32(v22, v22);
      *(int32x4_t *)(v14 + v17) = vaddq_s32(v23, v21);
      v18 = (int64x2_t)vaddw_high_u32((uint64x2_t)v18, (uint32x4_t)v23);
      v19 = (int64x2_t)vaddw_u32((uint64x2_t)v19, *(uint32x2_t *)v23.i8);
      v17 += 16;
    }
    while (v17 != 1024);
  }
  v31 = vaddvq_s64(vaddq_s64(v19, v18));
  BrotliBuildAndStoreHuffmanTreeFast(a1 + 2184, v14, v31, 8, a4, a5, a6, a7);
  v32 = 0;
  for (i = 0; i != 256; ++i)
  {
    v34 = *(_DWORD *)(v14 + 4 * i);
    if (v34)
      v32 += v34 * a4[i];
  }
  return 125 * v32 / v31;
}

BOOL ShouldMergeBlock(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;

  v8 = a1 + 6288;
  bzero((void *)(a1 + 6288), 0x400uLL);
  v9 = 0;
  if (!a3)
    goto LABEL_4;
  do
  {
    ++*(_DWORD *)(v8 + 4 * *(unsigned __int8 *)(a2 + v9));
    v9 += 43;
  }
  while (v9 < a3);
  v9 = (a3 + 42) / 0x2B;
  if ((a3 + 42) >> 8 > 0x2A)
  {
    v11 = (double)v9;
    v10 = log2((double)v9);
  }
  else
  {
LABEL_4:
    v10 = kBrotliLog2Table[v9];
    v11 = (double)v9;
  }
  v12 = 0;
  v13 = (v10 + 0.5) * v11 + 200.0;
  do
  {
    v14 = *(unsigned int *)(v8 + 4 * v12);
    v15 = (double)v14;
    LOBYTE(v4) = *(_BYTE *)(a4 + v12);
    if (v14 > 0xFF)
      v16 = log2((double)v14);
    else
      v16 = kBrotliLog2Table[v14];
    v13 = v13 - v15 * (v16 + (double)v4);
    ++v12;
  }
  while (v12 != 256);
  return v13 >= 0.0;
}

uint64_t UpdateBits(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 20;
  do
  {
    v4 = 8 - (a2 & 7);
    if (v3 < v4)
      v4 = v3;
    *(_BYTE *)(a3 + (a2 >> 3)) = ((-1 << (v4 + (a2 & 7))) | ~(-1 << (a2 & 7))) & *(_BYTE *)(a3 + (a2 >> 3)) | ((result & ~(-1 << v4)) << (a2 & 7));
    result = result >> v4;
    a2 += v4;
    v3 -= v4;
  }
  while (v3);
  return result;
}

unint64_t BuildAndStoreCommandPrefixCode(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v6 = a1 + 1152;
  v7 = a1 + 768;
  v8 = (unsigned __int8 *)(a1 + 7312);
  v9 = a1 + 8016;
  bzero((void *)(a1 + 7312), 0x2C0uLL);
  BrotliCreateHuffmanTree(v6, 64, 15, a1 + 2184, v7);
  BrotliCreateHuffmanTree(a1 + 1408, 64, 14, a1 + 2184, a1 + 832);
  *(_OWORD *)(a1 + 7312) = *(_OWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 7328) = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 7336) = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 7344) = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 7352) = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 7360) = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 7368) = *(_QWORD *)(a1 + 824);
  BrotliConvertBitDepthsToSymbols(v8, 64, v9);
  v10 = *(_OWORD *)(a1 + 8032);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a1 + 8016);
  *(_OWORD *)(a1 + 912) = v10;
  v11 = *(_OWORD *)(a1 + 8080);
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a1 + 8048);
  *(_OWORD *)(a1 + 944) = v11;
  v12 = *(_OWORD *)(a1 + 8064);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a1 + 8112);
  *(_OWORD *)(a1 + 976) = v12;
  v13 = *(_OWORD *)(a1 + 8128);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a1 + 8096);
  *(_OWORD *)(a1 + 1008) = v13;
  BrotliConvertBitDepthsToSymbols((unsigned __int8 *)(a1 + 832), 64, a1 + 1024);
  v14 = 0;
  *(_OWORD *)(a1 + 7312) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(_OWORD *)(a1 + 7344) = 0u;
  *(_QWORD *)(a1 + 7312) = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 7376) = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 7440) = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 7504) = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 7696) = *(_QWORD *)(a1 + 800);
  v15 = (_BYTE *)(a1 + 7440);
  *(_OWORD *)(a1 + 7328) = 0u;
  v16 = a1 + 808;
  do
  {
    *v15 = *(_BYTE *)(v16 + v14);
    v15[128] = *(_BYTE *)(v16 + v14 + 8);
    v15[320] = *(_BYTE *)(v16 + v14++ + 16);
    v15 += 8;
  }
  while (v14 != 8);
  BrotliStoreHuffmanTree((uint64_t)v8, 0x2C0uLL, a1 + 2184, a2, a3);
  return BrotliStoreHuffmanTree(a1 + 832, 0x40uLL, a1 + 2184, a2, a3);
}

_WORD *BrotliCreateBackwardReferences(_WORD *result, unint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8, double a9, double a10, int32x4_t a11, unint64_t *a12, _DWORD *a13, _QWORD *a14, _QWORD *a15)
{
  int v15;

  v15 = *(_DWORD *)(a6 + 40);
  if (*(_QWORD *)(a6 + 88))
  {
    if (v15 > 34)
    {
      if (v15 <= 53)
      {
        switch(v15)
        {
          case '#':
            goto LABEL_9;
          case '(':
            result = CreateBackwardReferencesDH40(result, a2, a3, a4, a5, (int *)a6, (uint64_t)a7, a8, a12, a13, a14, a15);
            break;
          case ')':
            result = (_WORD *)CreateBackwardReferencesDH41((unint64_t)result, a2, (uint64_t)a3, a4, a5, (_QWORD *)a6, (uint64_t)a7, a8, a12, a13, a14, a15);
            break;
          case '*':
            result = (_WORD *)CreateBackwardReferencesDH42((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
            break;
          default:
            return result;
        }
        return result;
      }
      if (v15 != 54)
      {
        if (v15 == 55)
          return (_WORD *)CreateBackwardReferencesDH55((unint64_t)result, a2, (uint64_t)a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        if (v15 == 65)
          return (_WORD *)CreateBackwardReferencesDH65((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        return result;
      }
      return (_WORD *)CreateBackwardReferencesNH54((unint64_t)result, a2, (uint64_t)a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
    }
    switch(v15)
    {
      case 2:
        goto LABEL_13;
      case 3:
        goto LABEL_22;
      case 4:
        goto LABEL_23;
      case 5:
        result = (_WORD *)CreateBackwardReferencesDH5((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, a13, a14, a15);
        break;
      case 6:
        result = (_WORD *)CreateBackwardReferencesDH6((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      default:
        return result;
    }
  }
  else if (v15 <= 34)
  {
    switch(v15)
    {
      case 2:
LABEL_13:
        result = (_WORD *)CreateBackwardReferencesNH2((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case 3:
LABEL_22:
        result = (_WORD *)CreateBackwardReferencesNH3((unint64_t)result, a2, (uint64_t)a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case 4:
LABEL_23:
        result = CreateBackwardReferencesNH4(result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, a13, a14, a15);
        break;
      case 5:
        result = (_WORD *)CreateBackwardReferencesNH5((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case 6:
        result = (_WORD *)CreateBackwardReferencesNH6((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      default:
        return result;
    }
  }
  else if (v15 > 53)
  {
    switch(v15)
    {
      case '6':
        return (_WORD *)CreateBackwardReferencesNH54((unint64_t)result, a2, (uint64_t)a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
      case '7':
        return (_WORD *)CreateBackwardReferencesNH55((unint64_t)result, a2, (uint64_t)a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
      case 'A':
        return (_WORD *)CreateBackwardReferencesNH65((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
    }
  }
  else
  {
    switch(v15)
    {
      case '#':
LABEL_9:
        result = (_WORD *)CreateBackwardReferencesNH35((unint64_t)result, a2, (uint64_t)a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case '(':
        result = (_WORD *)CreateBackwardReferencesNH40((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case ')':
        result = (_WORD *)CreateBackwardReferencesNH41((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case '*':
        result = (_WORD *)CreateBackwardReferencesNH42((unint64_t)result, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)a13, a14, a15);
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t CreateBackwardReferencesDH5(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, _DWORD *a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int32x4_t v20;
  const float *v21;
  int32x4_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t i;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t j;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t k;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  int *v95;
  unint64_t v96;
  unint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unint64_t v105;
  unint64_t v106;
  BOOL v107;
  int v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  BOOL v144;
  uint64_t v145;
  unint64_t v146;
  BOOL v147;
  unint64_t v148;
  BOOL v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unint64_t m;
  unint64_t v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  unint64_t v157;
  unint64_t v158;
  unsigned __int8 *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t n;
  unint64_t v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  int *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v202;
  uint64_t v203;
  char *v204;
  unint64_t v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  unint64_t v209;
  unint64_t v210;
  int v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unsigned __int8 *v220;
  uint64_t v221;
  unint64_t v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  unint64_t v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  unint64_t v234;
  unint64_t v235;
  char v236;
  unint64_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  BOOL v245;
  unint64_t v246;
  unsigned int v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  int v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  unint64_t v259;
  unint64_t v260;
  char v261;
  unint64_t v262;
  unsigned __int8 *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unsigned __int8 *v267;
  unsigned __int8 *v268;
  BOOL v269;
  unsigned int v270;
  unint64_t v271;
  int v272;
  int v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  _DWORD *v277;
  unint64_t v278;
  uint64_t v279;
  int32x2_t v280;
  int v281;
  int32x4_t v282;
  unint64_t v283;
  int32x4_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  unsigned int v294;
  uint64_t v295;
  unint64_t v296;
  char v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unint64_t v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  int v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  int v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _DWORD *v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v323;
  int v324;
  int v325;
  int v326;
  unsigned int v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unsigned int v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  int v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;

  v12 = a3;
  v331 = *(_QWORD *)(a6 + 16);
  v14 = *a9;
  v15 = a2 + result;
  v16 = a2 + result - 3;
  v315 = v16;
  if (result <= 3)
    v16 = a2;
  v316 = v16;
  v17 = *(_DWORD *)(a6 + 8);
  v18 = 512;
  if (*(int *)(a6 + 4) < 9)
    v18 = 64;
  v318 = v18;
  v317 = *(_QWORD *)(a6 + 96);
  v19 = *(_DWORD *)(a7 + 108);
  if (v19 >= 5)
  {
    v20 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v20, (int32x4_t)xmmword_19D02CCA0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v19 >= 0xB)
    {
      v21 = (const float *)(a8 + 1);
      v22 = (int32x4_t)vld1q_dup_f32(v21);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v22, (int32x4_t)xmmword_19D02CCA0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v22.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (a2 + 4 >= v15)
  {
    v319 = a10;
    v248 = a2;
    goto LABEL_469;
  }
  v23 = v318 + a2;
  v330 = (1 << v17) - 16;
  v341 = *(_QWORD *)(a7 + 120);
  v332 = *(_QWORD *)(a7 + 128);
  v320 = v317 + 1;
  v321 = a5 + 256;
  v314 = v15 - 4;
  v319 = a10;
  v352 = a6;
  v328 = a2 + result;
  do
  {
    if (a2 >= v330)
      v24 = v330;
    else
      v24 = a2;
    v25 = a2 + v331;
    if (a2 + v331 >= v330)
      v25 = v330;
    v353 = v25;
    v339 = v14;
    v350 = v23;
    if (!*(_DWORD *)(a6 + 624))
    {
      v28 = 0;
      v333 = 0;
      goto LABEL_23;
    }
    if (!a2)
    {
      v26 = 0;
LABEL_21:
      v27 = 0;
      goto LABEL_22;
    }
    v26 = *(unsigned __int8 *)(v12 + ((a2 - 1) & a4));
    if (a2 == 1)
      goto LABEL_21;
    v27 = *(unsigned __int8 *)(v12 + ((a2 - 2) & a4));
LABEL_22:
    v333 = v26;
    v28 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v321 + v27) | *(_BYTE *)(a5 + v26)) + 629);
LABEL_23:
    v29 = v15 - a2;
    v30 = *(_QWORD *)(a6 + 8 * v28 + 696);
    v31 = *(_QWORD *)(a6 + 72);
    v32 = a2 & a4;
    v33 = *(int *)(a7 + 108);
    v335 = v28;
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v345 = 0;
      v37 = (unsigned __int8 *)(v12 + v32);
      v38 = 2020;
      v39 = 2020;
      do
      {
        v40 = a8[v34];
        v41 = a2 - v40;
        v42 = v24 < v40 || v41 >= a2;
        v43 = v41 & a4;
        v44 = v35 + v32;
        v45 = v42 || v44 > a4;
        v46 = v43 + v35;
        v47 = v45 || v46 > a4;
        if (!v47 && *(unsigned __int8 *)(v12 + v44) == *(unsigned __int8 *)(v12 + v46))
        {
          v48 = v12 + v43;
          if (v29 < 8)
          {
            v53 = (unsigned __int8 *)(v12 + v43);
            v52 = v37;
            i = v29;
            if (v29)
            {
LABEL_46:
              v54 = &v53[i];
              while (*v53 == *v52)
              {
                ++v52;
                ++v53;
                if (!--i)
                {
                  v53 = v54;
                  break;
                }
              }
              v12 = a3;
            }
          }
          else
          {
            v49 = 0;
            for (i = v29; i > 7; i -= 8)
            {
              v51 = *(_QWORD *)(v48 + v49) ^ *(_QWORD *)&v37[v49];
              if (v51)
              {
                v55 = v49 + (__clz(__rbit64(v51)) >> 3);
                goto LABEL_53;
              }
              v49 += 8;
            }
            v52 = &v37[v49];
            v53 = (unsigned __int8 *)(v48 + v49);
            if (i)
              goto LABEL_46;
          }
          v55 = (unint64_t)&v53[-v48];
LABEL_53:
          if (v55 > 2 || v34 <= 1 && v55 == 2)
          {
            v56 = 135 * v55 + 1935;
            if (v38 < v56)
            {
              if (v34)
                v56 -= ((0x1CA10u >> (v34 & 0xE)) & 0xE) + 39;
              if (v38 < v56)
              {
                v345 = a8[v34];
                v39 = v56;
                v36 = v55;
                v38 = v56;
                v35 = v55;
              }
            }
          }
        }
        ++v34;
      }
      while (v34 != v33);
    }
    else
    {
      v345 = 0;
      v36 = 0;
      v35 = 0;
      v39 = 2020;
      v38 = 2020;
    }
    v57 = (unsigned __int8 *)(v12 + v32);
    v58 = *(unsigned int *)(a7 + 100);
    v59 = (506832829 * *(_DWORD *)(v12 + v32)) >> *(_DWORD *)(a7 + 96);
    v60 = v332 + 4 * ((_DWORD)v59 << *(_DWORD *)(a7 + 104));
    v61 = *(unsigned __int16 *)(v341 + 2 * v59);
    v62 = *(_QWORD *)(a7 + 88);
    v329 = v62;
    if (v61 >= v62)
      v63 = v61 - v62;
    else
      v63 = 0;
    v342 = a2;
    if (v63 < v61)
    {
      v64 = *(unsigned __int16 *)(v341 + 2 * v59);
      do
      {
        v65 = *(unsigned int *)(v60 + 4 * (--v64 & v58));
        v66 = a2 - v65;
        if (a2 - v65 > v24)
          break;
        if (v35 + v32 <= a4)
        {
          v67 = v65 & a4;
          if (v67 + v35 <= a4 && *(unsigned __int8 *)(a3 + v35 + v32) == *(unsigned __int8 *)(a3 + v67 + v35))
          {
            v68 = a3 + v67;
            if (v29 < 8)
            {
              v73 = (unsigned __int8 *)(a3 + v67);
              v72 = v57;
              j = v29;
              if (v29)
              {
LABEL_78:
                v74 = &v73[j];
                while (*v73 == *v72)
                {
                  ++v72;
                  ++v73;
                  if (!--j)
                  {
                    v73 = v74;
                    break;
                  }
                }
                a6 = v352;
                a2 = v342;
              }
            }
            else
            {
              v69 = 0;
              for (j = v29; j > 7; j -= 8)
              {
                v71 = *(_QWORD *)(v68 + v69) ^ *(_QWORD *)&v57[v69];
                if (v71)
                {
                  v75 = v69 + (__clz(__rbit64(v71)) >> 3);
                  goto LABEL_85;
                }
                v69 += 8;
              }
              v72 = &v57[v69];
              v73 = (unsigned __int8 *)(v68 + v69);
              if (j)
                goto LABEL_78;
            }
            v75 = (unint64_t)&v73[-v68];
LABEL_85:
            if (v75 >= 4)
            {
              v76 = 135 * v75 - 30 * (__clz(v66) ^ 0x1F) + 1920;
              if (v38 < v76)
              {
                v345 = v66;
                v39 = v76;
                v36 = v75;
                v38 = v76;
                v35 = v75;
              }
            }
          }
        }
      }
      while (v64 > v63);
    }
    *(_DWORD *)(v60 + 4 * (v58 & v61)) = a2;
    *(_WORD *)(v341 + 2 * v59) = v61 + 1;
    if (v39 == 2020)
    {
      v77 = *(_QWORD *)(a7 + 112);
      v79 = *(_QWORD *)(v77 + 40);
      v78 = *(_QWORD *)(v77 + 48);
      if (v78 >= v79 >> 7)
      {
        v344 = 0;
        v256 = ((506832829 * *(_DWORD *)v57) >> 17) & 0x7FFE;
        v257 = *(_QWORD *)(v30 + 32);
        v258 = 1;
        v259 = v36;
        v39 = 2020;
        v260 = v345;
        do
        {
          v261 = v258;
          *(_QWORD *)(v77 + 40) = ++v79;
          v262 = *(unsigned __int8 *)(v257 + v256);
          if (!*(_BYTE *)(v257 + v256) || v29 < v262)
            goto LABEL_392;
          v263 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v30 + 168)
                                   + *(unsigned int *)(*(_QWORD *)v30 + 4 * *(unsigned __int8 *)(v257 + v256) + 32)
                                   + *(unsigned __int16 *)(*(_QWORD *)(v30 + 24) + 2 * v256)
                                   * (unint64_t)*(unsigned __int8 *)(v257 + v256));
          if (v262 < 8)
          {
            v265 = *(unsigned __int8 *)(v257 + v256);
            v267 = v57;
          }
          else
          {
            v264 = 0;
            v265 = *(unsigned __int8 *)(v257 + v256);
            do
            {
              v266 = *(_QWORD *)&v57[v264] ^ *(_QWORD *)&v263[v264];
              if (v266)
              {
                v36 = v264 + (__clz(__rbit64(v266)) >> 3);
                goto LABEL_386;
              }
              v265 -= 8;
              v264 += 8;
            }
            while (v265 > 7);
            v267 = &v57[v264];
            if (!v265)
              goto LABEL_384;
            v263 += v264;
          }
          v268 = &v267[v265];
          while (*v267 == *v263)
          {
            ++v263;
            ++v267;
            if (!--v265)
            {
              v267 = v268;
              break;
            }
          }
          a6 = v352;
          a2 = v342;
LABEL_384:
          v36 = v267 - v57;
LABEL_386:
          v269 = v36 && v36 + *(unsigned int *)(v30 + 12) > v262;
          if (v269
            && (v80 = v320
                    + v353
                    + *(unsigned __int16 *)(*(_QWORD *)(v30 + 24) + 2 * v256)
                    + ((((*(_QWORD *)(v30 + 16) >> (6 * (v262 - v36))) & 0x3FLL)
                      + 4 * (v262 - v36)) << *(_BYTE *)(*(_QWORD *)v30 + v262)),
                v80 <= v31))
          {
            v270 = __clz(v80) ^ 0x1F;
            if (135 * v36 - 30 * v270 + 1920 >= v39)
            {
              v344 = v262 - v36;
              *(_QWORD *)(v77 + 48) = ++v78;
              v39 = 135 * v36 - 30 * v270 + 1920;
            }
            else
            {
              v80 = v260;
              v36 = v259;
            }
          }
          else
          {
LABEL_392:
            v80 = v260;
            v36 = v259;
          }
          v258 = 0;
          ++v256;
          v259 = v36;
          v260 = v80;
        }
        while ((v261 & 1) != 0);
        goto LABEL_94;
      }
      v344 = 0;
      v39 = 2020;
    }
    else
    {
      v344 = 0;
    }
    v80 = v345;
LABEL_94:
    v349 = *(_QWORD *)(a6 + 96);
    v355 = *(_QWORD *)(a6 + 88);
    v346 = v80;
    if (v355)
    {
      for (k = 0; k != v355; ++k)
      {
        v82 = a6 + 8 * k;
        v83 = *(_QWORD *)(v82 + 104);
        v84 = *(_DWORD *)(v83 + 16);
        v85 = *(_DWORD *)(v83 + 20);
        v86 = v83 + 24;
        v87 = v83 + 24 + 4 * (1 << v85);
        v88 = v87 + 2 * (1 << v84);
        v89 = (_QWORD *)(v88 + 4 * *(unsigned int *)(v83 + 4));
        if (*(_DWORD *)v83 != -558043680)
          v89 = (_QWORD *)*v89;
        v90 = 0;
        v91 = *(_QWORD *)(a6 + 96) + v353 - *(_QWORD *)(v82 + 360);
        v92 = *(unsigned int *)(v83 + 8);
        v93 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v57 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v83 + 12)))) >> -(char)v84;
        v94 = *(unsigned __int16 *)(v87 + 2 * v93);
        v95 = (int *)(v88
                    + 4
                    * (*(_DWORD *)(v86 + 4 * ((0xFFFFFFFF >> -(char)v85) & v93)) + v94));
        result = v36;
        v12 = a3;
        do
        {
          v96 = a8[v90];
          if (v91 - v92 < v96 && v91 >= v96)
          {
            v98 = v92 - (v91 - v96);
            if (v98 >= v29)
              v98 = v29;
            v99 = (unsigned __int8 *)v89 + v91 - v96;
            if (v98 < 8)
            {
              v103 = (unsigned __int8 *)v89 + v91 - v96;
              v102 = v57;
              if (v98)
              {
LABEL_113:
                v104 = &v103[v98];
                while (*v103 == *v102)
                {
                  ++v102;
                  ++v103;
                  if (!--v98)
                  {
                    v103 = v104;
                    break;
                  }
                }
              }
            }
            else
            {
              v100 = 0;
              do
              {
                v101 = *(_QWORD *)&v99[v100] ^ *(_QWORD *)&v57[v100];
                if (v101)
                {
                  v105 = v100 + (__clz(__rbit64(v101)) >> 3);
                  goto LABEL_119;
                }
                v98 -= 8;
                v100 += 8;
              }
              while (v98 > 7);
              v102 = &v57[v100];
              v103 = &v99[v100];
              if (v98)
                goto LABEL_113;
            }
            v105 = v103 - v99;
LABEL_119:
            v106 = 135 * v105 + 1935;
            v107 = v105 < 2 || v39 >= v106;
            v12 = a3;
            if (!v107)
            {
              if (v90)
                v106 -= ((0x1CA10u >> (v90 & 0xE)) & 0xE) + 39;
              if (v39 < v106)
              {
                v344 = 0;
                if (v105 > v36)
                  v36 = v105;
                v346 = a8[v90];
                v39 = v106;
                result = v105;
              }
              v12 = a3;
            }
          }
          ++v90;
        }
        while (v90 != 4);
        if (v94 != 0xFFFF)
        {
          do
          {
            v109 = *v95++;
            v108 = v109;
            v110 = v109 & 0x7FFFFFFF;
            v111 = v91 - v110;
            if (v92 - v110 >= v29)
              v112 = v29;
            else
              v112 = v92 - v110;
            v113 = v36 + v32;
            v115 = v111 > v31 || v113 > a4 || v36 >= v112;
            if (!v115 && *(unsigned __int8 *)(v12 + v113) == *((unsigned __int8 *)v89 + v36 + v110))
            {
              v116 = (unsigned __int8 *)v89 + v110;
              if (v112 < 8)
              {
                v120 = v57;
                v119 = v116;
              }
              else
              {
                v117 = 0;
                do
                {
                  v118 = *(_QWORD *)&v116[v117] ^ *(_QWORD *)&v57[v117];
                  if (v118)
                  {
                    v122 = v117 + (__clz(__rbit64(v118)) >> 3);
                    v12 = a3;
                    goto LABEL_159;
                  }
                  v112 -= 8;
                  v117 += 8;
                }
                while (v112 > 7);
                v119 = &v116[v117];
                if (!v112)
                  goto LABEL_157;
                v120 = &v57[v117];
              }
              v121 = &v119[v112];
              while (*v119 == *v120)
              {
                ++v120;
                ++v119;
                if (!--v112)
                {
                  v119 = v121;
                  break;
                }
              }
LABEL_157:
              v12 = a3;
              v122 = v119 - v116;
LABEL_159:
              if (v122 >= 4)
              {
                v123 = 135 * v122 - 30 * (__clz(v111) ^ 0x1F) + 1920;
                if (v39 < v123)
                {
                  v344 = 0;
                  v346 = v111;
                  v39 = v123;
                  result = v122;
                  v36 = v122;
                }
              }
            }
          }
          while ((v108 & 0x80000000) == 0);
        }
        v36 = result;
      }
    }
    else
    {
      result = v36;
      v12 = a3;
    }
    if (v39 < 0x7E5)
    {
      v14 = v339 + 1;
      v248 = a2 + 1;
      v23 = v350;
      if (a2 + 1 > v350)
      {
        if (v248 <= v350 + 4 * v318)
        {
          v271 = a2 + 9;
          if (a2 + 9 >= v315)
            v271 = v315;
          if (v248 < v271)
          {
            v272 = *(_DWORD *)(a7 + 96);
            v273 = *(_DWORD *)(a7 + 100);
            v274 = *(_DWORD *)(a7 + 104);
            result = 506832829;
            do
            {
              v275 = (506832829 * *(_DWORD *)(v12 + (v248 & a4))) >> v272;
              v276 = *(unsigned __int16 *)(v341 + 2 * v275);
              *(_DWORD *)(v332 + 4 * ((v275 << v274) + (unint64_t)(v273 & v276))) = v248;
              *(_WORD *)(v341 + 2 * v275) = v276 + 1;
              v14 += 2;
              v248 += 2;
            }
            while (v248 < v271);
          }
        }
        else
        {
          v249 = a2 + 17;
          if (a2 + 17 >= v314)
            v249 = v314;
          if (v248 < v249)
          {
            v250 = *(_DWORD *)(a7 + 96);
            v251 = *(_DWORD *)(a7 + 100);
            v252 = *(_DWORD *)(a7 + 104);
            result = 506832829;
            do
            {
              v253 = (506832829 * *(_DWORD *)(v12 + (v248 & a4))) >> v250;
              v254 = *(unsigned __int16 *)(v341 + 2 * v253);
              *(_DWORD *)(v332 + 4 * ((v253 << v252) + (unint64_t)(v251 & v254))) = v248;
              *(_WORD *)(v341 + 2 * v253) = v254 + 1;
              v14 += 4;
              v248 += 4;
            }
            while (v248 < v249);
          }
        }
      }
      goto LABEL_462;
    }
    v124 = 0;
    v325 = *(_DWORD *)(a7 + 96);
    v326 = *(_DWORD *)(a7 + 104);
    v324 = *(_DWORD *)(a7 + 100);
    v327 = *(_DWORD *)(a7 + 108);
    if (v327 <= 1)
      v125 = 1;
    else
      v125 = *(_DWORD *)(a7 + 108);
    v340 = v125;
    v126 = v331 + 1 + a2;
    while (1)
    {
      v354 = v39;
      if (v126 >= v330)
        v127 = v330;
      else
        v127 = v126;
      v351 = v127;
      --v29;
      v128 = result - 1;
      if (result - 1 >= v29)
        v128 = v29;
      if (*(int *)(a6 + 4) >= 5)
        v128 = 0;
      v129 = a2 + 1;
      if (a2 + 1 < v330)
        v130 = a2 + 1;
      else
        v130 = v330;
      v131 = v129 + v331;
      if (v129 + v331 >= v330)
        v131 = v330;
      v336 = v126;
      v337 = v131;
      if (*(_DWORD *)(a6 + 624))
      {
        v132 = *(unsigned __int8 *)(a6
                                  + (*(_BYTE *)(v321 + v333) | *(_BYTE *)(a5
                                                                                         + *(unsigned __int8 *)(v12 + (a2 & a4))))
                                  + 629);
        v333 = *(unsigned __int8 *)(v12 + (a2 & a4));
      }
      else
      {
        v132 = v335;
      }
      v133 = v340;
      v134 = *(_QWORD *)(a6 + 8 * v132 + 696);
      v135 = v129 & a4;
      v343 = a2;
      v335 = v132;
      v323 = result;
      v338 = v124;
      if (v327)
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v139 = v12 + v135;
        v140 = 2020;
        v141 = 2020;
        do
        {
          v142 = a8[v136];
          v143 = v129 - v142;
          v144 = v130 < v142 || v143 >= v129;
          v145 = v143 & a4;
          v146 = v128 + v135;
          v147 = v144 || v146 > a4;
          v148 = v145 + v128;
          v149 = v147 || v148 > a4;
          if (!v149 && *(unsigned __int8 *)(v12 + v146) == *(unsigned __int8 *)(v12 + v148))
          {
            v150 = (unsigned __int8 *)(v12 + v145);
            if (v29 < 8)
            {
              v155 = v150;
              v154 = (unsigned __int8 *)(v12 + v135);
              m = v29;
              if (v29)
              {
LABEL_208:
                v156 = &v155[m];
                while (*v155 == *v154)
                {
                  ++v154;
                  ++v155;
                  if (!--m)
                  {
                    v155 = v156;
                    break;
                  }
                }
              }
            }
            else
            {
              v151 = 0;
              for (m = v29; m > 7; m -= 8)
              {
                v153 = *(_QWORD *)&v150[v151] ^ *(_QWORD *)(v139 + v151);
                if (v153)
                {
                  v157 = v151 + (__clz(__rbit64(v153)) >> 3);
                  goto LABEL_214;
                }
                v151 += 8;
              }
              v154 = (unsigned __int8 *)(v139 + v151);
              v155 = &v150[v151];
              if (m)
                goto LABEL_208;
            }
            v157 = v155 - v150;
LABEL_214:
            v133 = v340;
            if (v157 > 2 || v136 <= 1 && v157 == 2)
            {
              v158 = 135 * v157 + 1935;
              if (v140 < v158)
              {
                if (v136)
                  v158 -= ((0x1CA10u >> (v136 & 0xE)) & 0xE) + 39;
                if (v140 < v158)
                {
                  v138 = v157;
                  v137 = a8[v136];
                  v141 = v158;
                  v140 = v158;
                  v128 = v157;
                }
              }
            }
          }
          ++v136;
        }
        while (v136 != v133);
      }
      else
      {
        v138 = 0;
        v137 = 0;
        v141 = 2020;
        v140 = 2020;
      }
      v347 = v129;
      v159 = (unsigned __int8 *)(v12 + v135);
      v160 = (506832829 * *(_DWORD *)(v12 + v135)) >> v325;
      v161 = v332 + 4 * ((_DWORD)v160 << v326);
      result = *(unsigned __int16 *)(v341 + 2 * v160);
      if (result >= v329)
        v162 = result - v329;
      else
        v162 = 0;
      if (v162 < result)
      {
        v163 = *(unsigned __int16 *)(v341 + 2 * v160);
        do
        {
          v164 = *(unsigned int *)(v161 + 4 * (--v163 & *(_DWORD *)(a7 + 100)));
          v165 = v347 - v164;
          if (v347 - v164 > v130)
            break;
          if (v128 + v135 <= a4)
          {
            v166 = v164 & a4;
            if (v166 + v128 <= a4 && *(unsigned __int8 *)(v12 + v128 + v135) == *(unsigned __int8 *)(v12 + v166 + v128))
            {
              v167 = v12 + v166;
              if (v29 < 8)
              {
                v172 = (unsigned __int8 *)(v12 + v166);
                v171 = v159;
                n = v29;
                if (v29)
                {
LABEL_239:
                  v173 = &v172[n];
                  while (*v172 == *v171)
                  {
                    ++v171;
                    ++v172;
                    if (!--n)
                    {
                      v172 = v173;
                      break;
                    }
                  }
                }
              }
              else
              {
                v168 = 0;
                for (n = v29; n > 7; n -= 8)
                {
                  v170 = *(_QWORD *)(v167 + v168) ^ *(_QWORD *)&v159[v168];
                  if (v170)
                  {
                    v174 = v168 + (__clz(__rbit64(v170)) >> 3);
                    goto LABEL_245;
                  }
                  v168 += 8;
                }
                v171 = &v159[v168];
                v172 = (unsigned __int8 *)(v167 + v168);
                if (n)
                  goto LABEL_239;
              }
              v174 = (unint64_t)&v172[-v167];
              v12 = a3;
LABEL_245:
              if (v174 >= 4)
              {
                v175 = 135 * v174 - 30 * (__clz(v165) ^ 0x1F) + 1920;
                if (v140 < v175)
                {
                  v138 = v174;
                  v137 = v165;
                  v141 = v175;
                  v140 = v175;
                  v128 = v174;
                }
              }
            }
          }
        }
        while (v163 > v162);
      }
      *(_DWORD *)(v161 + 4 * (v324 & result)) = v347;
      *(_WORD *)(v341 + 2 * v160) = result + 1;
      if (v141 != 2020)
      {
        v179 = 0;
        goto LABEL_253;
      }
      v176 = *(_QWORD *)(a7 + 112);
      v178 = *(_QWORD *)(v176 + 40);
      v177 = *(_QWORD *)(v176 + 48);
      if (v177 < v178 >> 7)
      {
        v179 = 0;
        v141 = 2020;
LABEL_253:
        v180 = v137;
        goto LABEL_254;
      }
      v179 = 0;
      result = ((506832829 * *(_DWORD *)v159) >> 17) & 0x7FFE;
      v231 = *(_QWORD *)(v134 + 32);
      v232 = v320 + v337;
      v233 = 1;
      v141 = 2020;
      v234 = v137;
      v235 = v138;
      do
      {
        v236 = v233;
        *(_QWORD *)(v176 + 40) = ++v178;
        v237 = *(unsigned __int8 *)(v231 + result);
        if (!*(_BYTE *)(v231 + result) || v29 < v237)
          goto LABEL_354;
        v239 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v134 + 168)
                                 + *(unsigned int *)(*(_QWORD *)v134 + 4 * *(unsigned __int8 *)(v231 + result) + 32)
                                 + *(unsigned __int16 *)(*(_QWORD *)(v134 + 24) + 2 * result)
                                 * (unint64_t)*(unsigned __int8 *)(v231 + result));
        if (v237 < 8)
        {
          v241 = *(unsigned __int8 *)(v231 + result);
          v243 = v159;
        }
        else
        {
          v240 = 0;
          v241 = *(unsigned __int8 *)(v231 + result);
          do
          {
            v242 = *(_QWORD *)&v159[v240] ^ *(_QWORD *)&v239[v240];
            if (v242)
            {
              v138 = v240 + (__clz(__rbit64(v242)) >> 3);
              goto LABEL_347;
            }
            v241 -= 8;
            v240 += 8;
          }
          while (v241 > 7);
          v243 = &v159[v240];
          if (!v241)
            goto LABEL_345;
          v239 += v240;
        }
        v244 = &v243[v241];
        while (*v243 == *v239)
        {
          ++v239;
          ++v243;
          if (!--v241)
          {
            v243 = v244;
            break;
          }
        }
LABEL_345:
        v138 = v243 - v159;
LABEL_347:
        v245 = v138 && v138 + *(unsigned int *)(v134 + 12) > v237;
        if (v245
          && (v238 = *(unsigned __int16 *)(*(_QWORD *)(v134 + 24) + 2 * result),
              v246 = v232
                   + v238
                   + ((((*(_QWORD *)(v134 + 16) >> (6 * (v237 - v138))) & 0x3FLL)
                     + 4 * (v237 - v138)) << *(_BYTE *)(*(_QWORD *)v134 + v237)),
              v246 <= v31)
          && (v180 = v232
                   + v238
                   + ((((*(_QWORD *)(v134 + 16) >> (6 * (v237 - v138))) & 0x3FLL)
                     + 4 * (v237 - v138)) << *(_BYTE *)(*(_QWORD *)v134 + v237)),
              v247 = __clz(v246) ^ 0x1F,
              135 * v138 - 30 * v247 + 1920 >= v141))
        {
          v179 = v237 - v138;
          *(_QWORD *)(v176 + 48) = ++v177;
          v141 = 135 * v138 - 30 * v247 + 1920;
        }
        else
        {
LABEL_354:
          v138 = v235;
          v180 = v234;
        }
        v12 = a3;
        v233 = 0;
        ++result;
        v234 = v180;
        v235 = v138;
      }
      while ((v236 & 1) != 0);
LABEL_254:
      if (v355)
      {
        v181 = 0;
        v348 = v337 + v349;
        do
        {
          v182 = v352 + 8 * v181;
          v183 = *(_QWORD *)(v182 + 104);
          v185 = *(_DWORD *)(v183 + 16);
          v184 = *(_DWORD *)(v183 + 20);
          v186 = v183 + 24;
          v187 = v183 + 24 + 4 * (1 << v184);
          v188 = v187 + 2 * (1 << v185);
          v189 = (_QWORD *)(v188 + 4 * *(unsigned int *)(v183 + 4));
          if (*(_DWORD *)v183 != -558043680)
            v189 = (_QWORD *)*v189;
          v190 = 0;
          v191 = *(_QWORD *)(v182 + 360);
          v192 = v348 - v191;
          v193 = *(unsigned int *)(v183 + 8);
          v194 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v159 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v183 + 12)))) >> -(char)v185;
          v195 = v348 - v191 - v193;
          result = 0xFFFFFFFFLL;
          v196 = *(unsigned __int16 *)(v187 + 2 * v194);
          v197 = (int *)(v188
                       + 4
                       * (*(_DWORD *)(v186 + 4 * ((0xFFFFFFFF >> -(char)v184) & v194))
                                      + v196));
          v198 = (char *)v189 + v349 + v351 - v191;
          v199 = v138;
          do
          {
            v200 = a8[v190];
            if (v195 < v200 && v192 >= v200)
            {
              if (v193 - (v192 - v200) >= v29)
                v202 = v29;
              else
                v202 = v193 - (v192 - v200);
              if (v202 < 8)
              {
                v207 = (unsigned __int8 *)v189 + v192 - v200;
                v206 = v159;
                if (v202)
                {
LABEL_274:
                  v208 = &v207[v202];
                  while (1)
                  {
                    result = *v207;
                    if ((_DWORD)result != *v206)
                      break;
                    ++v206;
                    ++v207;
                    if (!--v202)
                    {
                      v207 = v208;
                      break;
                    }
                  }
                }
              }
              else
              {
                v203 = 0;
                v204 = &v198[-v200];
                do
                {
                  result = *(_QWORD *)&v204[v203];
                  v205 = result ^ *(_QWORD *)&v159[v203];
                  if (v205)
                  {
                    v209 = v203 + (__clz(__rbit64(v205)) >> 3);
                    goto LABEL_280;
                  }
                  v202 -= 8;
                  v203 += 8;
                }
                while (v202 > 7);
                v206 = &v159[v203];
                v207 = (unsigned __int8 *)&v204[v203];
                if (v202)
                  goto LABEL_274;
              }
              v209 = v207 - ((unsigned __int8 *)v189 + v192 - v200);
LABEL_280:
              v210 = 135 * v209 + 1935;
              if (v209 >= 2 && v141 < v210)
              {
                result = v210 - (((0x1CA10u >> (v190 & 0xE)) & 0xE) + 39);
                if (v190)
                  v210 -= ((0x1CA10u >> (v190 & 0xE)) & 0xE) + 39;
                if (v141 < v210)
                {
                  v179 = 0;
                  if (v209 > v138)
                    v138 = v209;
                  v199 = v209;
                  v180 = a8[v190];
                  v141 = v210;
                }
              }
            }
            ++v190;
          }
          while (v190 != 4);
          v12 = a3;
          if (v196 != 0xFFFF)
          {
            do
            {
              v213 = *v197++;
              v212 = v213;
              v214 = v213 & 0x7FFFFFFF;
              v215 = v192 - v214;
              result = v193 - v214;
              if (v193 - v214 >= v29)
                v216 = v29;
              else
                v216 = v193 - v214;
              v217 = v138 + v135;
              if (v215 <= v31 && v217 <= a4 && v138 < v216)
              {
                result = *(unsigned __int8 *)(a3 + v217);
                if ((_DWORD)result == *((unsigned __int8 *)v189 + v138 + v214))
                {
                  v220 = (unsigned __int8 *)v189 + v214;
                  if (v216 < 8)
                  {
                    v224 = v159;
                    v223 = v220;
                  }
                  else
                  {
                    v221 = 0;
                    do
                    {
                      result = *(_QWORD *)&v159[v221];
                      v222 = *(_QWORD *)&v220[v221] ^ result;
                      if (v222)
                      {
                        result = __clz(__rbit64(v222));
                        v226 = v221 + (result >> 3);
                        goto LABEL_321;
                      }
                      v216 -= 8;
                      v221 += 8;
                    }
                    while (v216 > 7);
                    v223 = &v220[v221];
                    if (!v216)
                      goto LABEL_319;
                    v224 = &v159[v221];
                  }
                  v225 = &v223[v216];
                  while (1)
                  {
                    result = *v223;
                    if ((_DWORD)result != *v224)
                      break;
                    ++v224;
                    ++v223;
                    if (!--v216)
                    {
                      v223 = v225;
                      break;
                    }
                  }
LABEL_319:
                  v226 = v223 - v220;
LABEL_321:
                  if (v226 >= 4)
                  {
                    v227 = __clz(v215) ^ 0x1F;
                    result = 32 * v227;
                    v228 = 135 * v226 - 30 * v227 + 1920;
                    if (v141 < v228)
                    {
                      v179 = 0;
                      v199 = v226;
                      v180 = v215;
                      v141 = v228;
                      v138 = v226;
                    }
                  }
                }
              }
            }
            while ((v212 & 0x80000000) == 0);
          }
          ++v181;
          v138 = v199;
          v229 = v354;
        }
        while (v181 != v355);
      }
      else
      {
        v199 = v138;
        v229 = v354;
      }
      if (v141 < v229 + 175)
        break;
      ++v339;
      if (v338 > 2)
      {
        a6 = v352;
        v230 = v347;
        goto LABEL_405;
      }
      v124 = v338 + 1;
      v126 = v336 + 1;
      v346 = v180;
      v39 = v141;
      v344 = v179;
      result = v199;
      v230 = v347;
      a2 = v347;
      a6 = v352;
      if (v343 + 5 >= v328)
        goto LABEL_405;
    }
    v255 = v343 + v331;
    if (v343 + v331 >= v330)
      v255 = v330;
    v337 = v255;
    v180 = v346;
    v179 = v344;
    v199 = v323;
    v230 = v343;
    a6 = v352;
LABEL_405:
    v277 = v319;
    if (v180 > v337 + v317)
    {
LABEL_406:
      v278 = v180 + 15;
      goto LABEL_407;
    }
    v283 = v180;
    v285 = *a8;
    if (v180 == v285)
    {
      v278 = 0;
      v279 = v341;
      goto LABEL_416;
    }
    v295 = a8[1];
    if (v180 == v295)
    {
      v278 = 1;
      v279 = v341;
      goto LABEL_408;
    }
    v296 = v180 + 3 - v285;
    if (v296 <= 6)
    {
      v297 = 4 * v296;
      v298 = 158663784;
      goto LABEL_433;
    }
    v299 = v180 + 3 - v295;
    if (v299 > 6)
    {
      if (v180 == a8[2])
      {
        v278 = 2;
      }
      else
      {
        if (v180 != a8[3])
          goto LABEL_406;
        v278 = 3;
      }
    }
    else
    {
      v297 = 4 * v299;
      v298 = 266017486;
LABEL_433:
      v278 = (v298 >> v297) & 0xF;
    }
LABEL_407:
    v279 = v341;
    if (v180 > v337 + v317)
      goto LABEL_413;
    if (!v278)
      goto LABEL_413;
    a8[3] = a8[2];
    v280 = *(int32x2_t *)a8;
    *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
    *a8 = v180;
    v281 = *(_DWORD *)(a7 + 108);
    if (v281 < 5)
      goto LABEL_413;
LABEL_408:
    v282 = vdupq_n_s32(v180);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v282, (int32x4_t)xmmword_19D02CCA0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v282.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v281 >= 0xB)
    {
      v283 = v180;
      v284 = vdupq_lane_s32(v280, 0);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v284, (int32x4_t)xmmword_19D02CCA0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v284.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
    else
    {
LABEL_413:
      v283 = v180;
    }
LABEL_416:
    *v319 = v339;
    v319[1] = v199 | (v179 << 25);
    v286 = *(unsigned int *)(a6 + 60);
    v287 = v286 + 16;
    if (v286 + 16 <= v278)
    {
      v289 = *(unsigned int *)(a6 + 56);
      v290 = v278 - v286 + (4 << v289) - 16;
      v291 = (__clz(v290) ^ 0x1F) - 1;
      v292 = ((v290 >> v291) & 1 | 2) << v291;
      result = 65534;
      v277 = v319;
      v278 = ((v290 & ~(-1 << v289))
            + v287
            + ((((v290 >> v291) & 1 | (2 * (v291 - v289))) + 65534) << v289)) | ((v291 - v289) << 10);
      v288 = (v290 - v292) >> v289;
    }
    else
    {
      LODWORD(v288) = 0;
    }
    *((_WORD *)v277 + 7) = v278;
    v277[2] = v288;
    if (v339 > 5)
    {
      if (v339 > 0x81)
      {
        if (v339 > 0x841)
        {
          if (v339 >> 1 >= 0xC21)
          {
            if (v339 < 0x5842)
              LOWORD(v293) = 22;
            else
              LOWORD(v293) = 23;
          }
          else
          {
            LOWORD(v293) = 21;
          }
        }
        else
        {
          v293 = (__clz(v339 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v294 = (__clz(v339 - 2) ^ 0x1F) - 1;
        v293 = ((v339 - 2) >> v294) + 2 * v294 + 2;
      }
    }
    else
    {
      LOWORD(v293) = v339;
    }
    v300 = v179 + (int)v199;
    if (v300 > 9)
    {
      if (v300 > 0x85)
      {
        if (v300 > 0x845)
          LOWORD(v301) = 23;
        else
          v301 = (__clz(v300 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v302 = v300 - 6;
        v303 = (__clz(v302) ^ 0x1F) - 1;
        v301 = (v302 >> v303) + 2 * v303 + 4;
      }
    }
    else
    {
      LOWORD(v301) = v179 + v199 - 2;
    }
    v304 = v301 & 7 | (8 * (v293 & 7));
    if ((v278 & 0x3FF) != 0 || (unsigned __int16)v293 > 7u || (unsigned __int16)v301 > 0xFu)
    {
      v306 = 3 * ((unsigned __int16)v293 >> 3) + ((unsigned __int16)(v301 & 0xFFF8) >> 3);
      v305 = ((((0x520D40u >> (2 * v306)) & 0xC0) + (v306 << 6)) | v304) + 64;
    }
    else
    {
      LOWORD(v305) = v304 | 0x40;
      if ((v301 & 0xFFF8) == 0)
        LOWORD(v305) = v301 & 7 | (8 * (v293 & 7));
    }
    *((_WORD *)v277 + 6) = v305;
    v307 = v316;
    *a12 += v339;
    v308 = v230 + 2;
    v248 = v230 + v199;
    if (v230 + v199 < v316)
      v307 = v230 + v199;
    if (v283 < v199 >> 2)
    {
      if (v308 <= v248 - 4 * v283)
        v308 = v248 - 4 * v283;
      if (v307 < v308)
        v308 = v307;
    }
    v23 = v318 + 2 * v199 + v230;
    v319 = v277 + 4;
    if (v308 < v307)
    {
      v309 = *(_DWORD *)(a7 + 96);
      v310 = *(_DWORD *)(a7 + 100);
      v311 = *(_DWORD *)(a7 + 104);
      do
      {
        v312 = (506832829 * *(_DWORD *)(v12 + (v308 & a4))) >> v309;
        v313 = *(unsigned __int16 *)(v279 + 2 * v312);
        result = v310 & v313;
        *(_DWORD *)(v332 + 4 * ((v312 << v311) + result)) = v308;
        *(_WORD *)(v279 + 2 * v312) = v313 + 1;
        ++v308;
      }
      while (v307 != v308);
    }
    v14 = 0;
LABEL_462:
    v15 = v328;
    a2 = v248;
  }
  while (v248 + 4 < v328);
LABEL_469:
  *a9 = v14 + v15 - v248;
  *a11 += ((char *)v319 - (char *)a10) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesDH6(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  int v97;
  int *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unint64_t v110;
  unint64_t v111;
  int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  BOOL v148;
  uint64_t v149;
  unint64_t v150;
  BOOL v151;
  unint64_t v152;
  BOOL v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t i;
  unint64_t v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int v206;
  int v207;
  int *v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v213;
  uint64_t v214;
  char *v215;
  unint64_t v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  unint64_t v220;
  unint64_t v221;
  int v223;
  int v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  BOOL v230;
  unsigned __int8 *v231;
  uint64_t v232;
  unint64_t v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  char v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unsigned __int8 *v256;
  unsigned __int8 *v257;
  BOOL v258;
  unsigned int v259;
  unint64_t v260;
  unint64_t v261;
  int v262;
  int v263;
  unint64_t v264;
  unsigned int v265;
  unint64_t v266;
  uint64_t v267;
  char v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char v272;
  unint64_t v273;
  unsigned __int8 *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  BOOL v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  int v284;
  int v285;
  unint64_t v286;
  unsigned int v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int32x2_t v292;
  int v293;
  int32x4_t v294;
  int32x4_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  uint64_t v312;
  unsigned int v313;
  unint64_t v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  int v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  int v322;
  unint64_t v323;
  unsigned int v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v334;
  int v335;
  int v336;
  unsigned int v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unsigned int v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  int v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  int v369;
  uint64_t v370;

  v12 = a6;
  v13 = a2;
  v340 = *(_QWORD *)(a6 + 16);
  v14 = *a9;
  v343 = a2 + result;
  v15 = a2 + result - 7;
  v325 = v15;
  if (result <= 7)
    v15 = a2;
  v326 = v15;
  v16 = *(_DWORD *)(a6 + 8);
  v17 = 512;
  if (*(int *)(a6 + 4) < 9)
    v17 = 64;
  v328 = v17;
  v327 = *(_QWORD *)(a6 + 96);
  v18 = *(_DWORD *)(a7 + 112);
  if (v18 >= 5)
  {
    v19 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v19, (int32x4_t)xmmword_19D02CCA0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v18 >= 0xB)
    {
      v20 = (const float *)(a8 + 1);
      v21 = (int32x4_t)vld1q_dup_f32(v20);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v21, (int32x4_t)xmmword_19D02CCA0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (a2 + 8 < v343)
  {
    v22 = v328 + a2;
    v339 = (1 << v16) - 16;
    v332 = a5 + 256;
    v354 = *(_QWORD *)(a7 + 128);
    v341 = *(_QWORD *)(a7 + 136);
    v342 = *(_QWORD *)(a7 + 96);
    v330 = v327 + 1;
    v23 = a10;
    v359 = v12;
    v370 = a3;
    while (1)
    {
      if (v13 >= v339)
        v24 = v339;
      else
        v24 = v13;
      v25 = v13 + v340;
      if (v13 + v340 >= v339)
        v25 = v339;
      v365 = v25;
      v351 = v14;
      v329 = v23;
      v361 = v22;
      if (!*(_DWORD *)(v12 + 624))
      {
        v28 = 0;
        v26 = 0;
        goto LABEL_23;
      }
      if (!v13)
        break;
      v26 = *(unsigned __int8 *)(a3 + ((v13 - 1) & a4));
      if (v13 == 1)
        goto LABEL_21;
      v27 = *(unsigned __int8 *)(a3 + ((v13 - 2) & a4));
LABEL_22:
      v28 = *(unsigned __int8 *)(v12 + (*(_BYTE *)(v332 + v27) | *(_BYTE *)(a5 + v26)) + 629);
LABEL_23:
      v29 = v343 - v13;
      v30 = *(_QWORD *)(v12 + 8 * v28 + 696);
      v31 = *(_QWORD *)(v12 + 72);
      v32 = v13 & a4;
      v33 = *(int *)(a7 + 112);
      v344 = v26;
      v346 = v28;
      if ((_DWORD)v33)
      {
        v34 = 0;
        result = 0;
        v35 = 0;
        v357 = 0;
        v36 = (unsigned __int8 *)(a3 + v32);
        v37 = 2020;
        v38 = 2020;
        do
        {
          v39 = a8[v34];
          v40 = v13 - v39;
          v41 = v24 < v39 || v40 >= v13;
          v42 = v40 & a4;
          v43 = result + v32;
          v44 = v41 || v43 > a4;
          v45 = v42 + result;
          v46 = v44 || v45 > a4;
          if (!v46 && *(unsigned __int8 *)(a3 + v43) == *(unsigned __int8 *)(a3 + v45))
          {
            v47 = a3 + v42;
            if (v29 < 8)
            {
              v52 = (unsigned __int8 *)(a3 + v42);
              v51 = v36;
              v49 = v343 - v13;
              if (v29)
              {
LABEL_46:
                v53 = &v52[v49];
                while (*v52 == *v51)
                {
                  ++v51;
                  ++v52;
                  if (!--v49)
                  {
                    v52 = v53;
                    break;
                  }
                }
              }
            }
            else
            {
              v48 = 0;
              v49 = v343 - v13;
              do
              {
                v50 = *(_QWORD *)(v47 + v48) ^ *(_QWORD *)&v36[v48];
                if (v50)
                {
                  v54 = v48 + (__clz(__rbit64(v50)) >> 3);
                  goto LABEL_52;
                }
                v49 -= 8;
                v48 += 8;
              }
              while (v49 > 7);
              v51 = &v36[v48];
              v52 = (unsigned __int8 *)(v47 + v48);
              if (v49)
                goto LABEL_46;
            }
            a3 = v370;
            v54 = (unint64_t)&v52[-v47];
LABEL_52:
            if (v54 > 2 || v34 <= 1 && v54 == 2)
            {
              v55 = 135 * v54 + 1935;
              if (v37 < v55)
              {
                if (v34)
                  v55 -= ((0x1CA10u >> (v34 & 0xE)) & 0xE) + 39;
                if (v37 < v55)
                {
                  v357 = a8[v34];
                  v38 = v55;
                  v35 = v54;
                  v37 = v55;
                  result = v54;
                }
              }
            }
          }
          ++v34;
        }
        while (v34 != v33);
      }
      else
      {
        v357 = 0;
        v35 = 0;
        result = 0;
        v38 = 2020;
        v37 = 2020;
      }
      v352 = v38;
      v56 = (unsigned __int8 *)(a3 + v32);
      v57 = *(_QWORD *)(a3 + v32);
      v58 = (unint64_t)(v57 * v342) >> 49;
      v59 = *(unsigned int *)(a7 + 104);
      v60 = v341 + 4 * (v58 << *(_DWORD *)(a7 + 108));
      v61 = *(unsigned __int16 *)(v354 + 2 * v58);
      v338 = *(_QWORD *)(a7 + 88);
      if (v61 >= v338)
        v62 = v61 - v338;
      else
        v62 = 0;
      if (v62 < v61)
      {
        v368 = v37;
        v63 = v32 + a3 + 4;
        v64 = *(unsigned __int16 *)(v354 + 2 * v58);
        do
        {
          v65 = *(unsigned int *)(v60 + 4 * (--v64 & v59));
          v66 = v13 - v65;
          if (v13 - v65 > v24)
            break;
          if (result + v32 <= a4)
          {
            v67 = v65 & a4;
            if (v67 + result <= a4
              && *(unsigned __int8 *)(v370 + result + v32) == *(unsigned __int8 *)(v370 + v67 + result)
              && *(_DWORD *)(v370 + v67) == (_DWORD)v57)
            {
              v68 = v13;
              v69 = v67 + v370 + 4;
              if (v29 - 4 < 8)
              {
                v74 = (unsigned __int8 *)(v67 + v370 + 4);
                v73 = (unsigned __int8 *)v63;
                v71 = v29 - 4;
                if (v29 != 4)
                {
LABEL_78:
                  v75 = &v74[v71];
                  while (*v74 == *v73)
                  {
                    ++v73;
                    ++v74;
                    if (!--v71)
                    {
                      v74 = v75;
                      break;
                    }
                  }
                }
              }
              else
              {
                v70 = 0;
                v71 = v29 - 4;
                do
                {
                  v72 = *(_QWORD *)(v69 + v70) ^ *(_QWORD *)(v63 + v70);
                  if (v72)
                  {
                    v76 = (unsigned __int8 *)(v70 + (__clz(__rbit64(v72)) >> 3));
                    goto LABEL_84;
                  }
                  v71 -= 8;
                  v70 += 8;
                }
                while (v71 > 7);
                v73 = (unsigned __int8 *)(v63 + v70);
                v74 = (unsigned __int8 *)(v69 + v70);
                if (v71)
                  goto LABEL_78;
              }
              v76 = &v74[-v69];
LABEL_84:
              v12 = v359;
              v13 = v68;
              v77 = (unint64_t)(v76 + 4);
              v78 = 135 * v77 - 30 * (__clz(v66) ^ 0x1F) + 1920;
              if (v368 < v78)
              {
                v357 = v66;
                v352 = v78;
                v35 = v77;
                v368 = v78;
                result = v77;
              }
            }
          }
        }
        while (v64 > v62);
      }
      *(_DWORD *)(v60 + 4 * (v59 & v61)) = v13;
      v79 = v352;
      *(_WORD *)(v354 + 2 * v58) = v61 + 1;
      if (v352 != 2020)
      {
        v356 = 0;
        goto LABEL_91;
      }
      v80 = *(_QWORD *)(a7 + 120);
      v82 = *(_QWORD *)(v80 + 40);
      v81 = *(_QWORD *)(v80 + 48);
      if (v81 < v82 >> 7)
      {
        v356 = 0;
        v79 = 2020;
LABEL_91:
        v83 = v357;
        goto LABEL_92;
      }
      v356 = 0;
      result = ((506832829 * *(_DWORD *)v56) >> 17) & 0x7FFE;
      v267 = *(_QWORD *)(v30 + 32);
      v268 = 1;
      v269 = v35;
      v79 = 2020;
      v270 = v357;
      do
      {
        v271 = v79;
        v272 = v268;
        *(_QWORD *)(v80 + 40) = ++v82;
        v273 = *(unsigned __int8 *)(v267 + result);
        if (!*(_BYTE *)(v267 + result) || v29 < v273)
          goto LABEL_396;
        v274 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v30 + 168)
                                 + *(unsigned int *)(*(_QWORD *)v30 + 4 * *(unsigned __int8 *)(v267 + result) + 32)
                                 + *(unsigned __int16 *)(*(_QWORD *)(v30 + 24) + 2 * result)
                                 * (unint64_t)*(unsigned __int8 *)(v267 + result));
        if (v273 < 8)
        {
          v276 = *(unsigned __int8 *)(v267 + result);
          v278 = v56;
        }
        else
        {
          v275 = 0;
          v276 = *(unsigned __int8 *)(v267 + result);
          do
          {
            v277 = *(_QWORD *)&v56[v275] ^ *(_QWORD *)&v274[v275];
            if (v277)
            {
              v35 = v275 + (__clz(__rbit64(v277)) >> 3);
              goto LABEL_389;
            }
            v276 -= 8;
            v275 += 8;
          }
          while (v276 > 7);
          v278 = &v56[v275];
          if (!v276)
            goto LABEL_387;
          v274 += v275;
        }
        v279 = &v278[v276];
        while (*v278 == *v274)
        {
          ++v274;
          ++v278;
          if (!--v276)
          {
            v278 = v279;
            break;
          }
        }
LABEL_387:
        v35 = v278 - v56;
LABEL_389:
        v280 = v35 && v35 + *(unsigned int *)(v30 + 12) > v273;
        if (v280
          && (v281 = v330
                   + v365
                   + *(unsigned __int16 *)(*(_QWORD *)(v30 + 24) + 2 * result)
                   + ((((*(_QWORD *)(v30 + 16) >> (6 * (v273 - v35))) & 0x3FLL)
                     + 4 * (v273 - v35)) << *(_BYTE *)(*(_QWORD *)v30 + v273)),
              v281 <= v31)
          && (v282 = 135 * v35 - 30 * (__clz(v281) ^ 0x1F) + 1920, v282 >= v271))
        {
          v356 = v273 - v35;
          *(_QWORD *)(v80 + 48) = ++v81;
          v79 = v282;
          v83 = v281;
        }
        else
        {
LABEL_396:
          v83 = v270;
          v35 = v269;
          v79 = v271;
        }
        v268 = 0;
        ++result;
        v269 = v35;
        v270 = v83;
      }
      while ((v272 & 1) != 0);
LABEL_92:
      v367 = *(_QWORD *)(v12 + 88);
      v358 = v83;
      v364 = *(_QWORD *)(v12 + 96);
      if (v367)
      {
        for (result = 0; result != v367; ++result)
        {
          v84 = v12 + 8 * result;
          v85 = *(_QWORD *)(v84 + 104);
          v87 = *(_DWORD *)(v85 + 16);
          v86 = *(_DWORD *)(v85 + 20);
          v88 = v85 + 24;
          v89 = v85 + 24 + 4 * (1 << v86);
          v90 = v89 + 2 * (1 << v87);
          v91 = (_QWORD *)(v90 + 4 * *(unsigned int *)(v85 + 4));
          if (*(_DWORD *)v85 != -558043680)
            v91 = (_QWORD *)*v91;
          v92 = 0;
          v93 = *(_QWORD *)(v12 + 96) + v365 - *(_QWORD *)(v84 + 360);
          v94 = *(unsigned int *)(v85 + 8);
          v95 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v56 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v85 + 12)))) >> -(char)v87;
          v96 = 0xFFFFFFFF >> -(char)v86;
          v97 = *(unsigned __int16 *)(v89 + 2 * v95);
          v98 = (int *)(v90 + 4 * (*(_DWORD *)(v88 + 4 * (v96 & v95)) + v97));
          v99 = v35;
          do
          {
            v100 = a8[v92];
            if (v93 - v94 < v100 && v93 >= v100)
            {
              v102 = v79;
              if (v94 - (v93 - v100) >= v29)
                v103 = v29;
              else
                v103 = v94 - (v93 - v100);
              v104 = (unsigned __int8 *)v91 + v93 - v100;
              if (v103 < 8)
              {
                v108 = (unsigned __int8 *)v91 + v93 - v100;
                v107 = v56;
                if (v103)
                {
LABEL_112:
                  v109 = &v108[v103];
                  while (*v108 == *v107)
                  {
                    ++v107;
                    ++v108;
                    if (!--v103)
                    {
                      v108 = v109;
                      break;
                    }
                  }
                }
              }
              else
              {
                v105 = 0;
                do
                {
                  v106 = *(_QWORD *)&v104[v105] ^ *(_QWORD *)&v56[v105];
                  if (v106)
                  {
                    v110 = v105 + (__clz(__rbit64(v106)) >> 3);
                    goto LABEL_118;
                  }
                  v103 -= 8;
                  v105 += 8;
                }
                while (v103 > 7);
                v107 = &v56[v105];
                v108 = &v104[v105];
                if (v103)
                  goto LABEL_112;
              }
              v110 = v108 - v104;
LABEL_118:
              v111 = 135 * v110 + 1935;
              v79 = v102;
              if (v110 >= 2 && v102 < v111)
              {
                if (v92)
                  v111 -= ((0x1CA10u >> (v92 & 0xE)) & 0xE) + 39;
                if (v102 < v111)
                {
                  v356 = 0;
                  if (v110 > v35)
                    v35 = v110;
                  v358 = a8[v92];
                  v79 = v111;
                  v99 = v110;
                }
              }
            }
            ++v92;
          }
          while (v92 != 4);
          a3 = v370;
          if (v97 != 0xFFFF)
          {
            do
            {
              v114 = *v98++;
              v113 = v114;
              v115 = v114 & 0x7FFFFFFF;
              v116 = v93 - v115;
              if (v94 - v115 >= v29)
                v117 = v29;
              else
                v117 = v94 - v115;
              v118 = v35 + v32;
              v120 = v116 > v31 || v118 > a4 || v35 >= v117;
              if (!v120 && *(unsigned __int8 *)(a3 + v118) == *((unsigned __int8 *)v91 + v35 + v115))
              {
                v121 = (unsigned __int8 *)v91 + v115;
                if (v117 < 8)
                {
                  v125 = v79;
                  v126 = v56;
                  v124 = v121;
                }
                else
                {
                  v122 = 0;
                  do
                  {
                    v123 = *(_QWORD *)&v121[v122] ^ *(_QWORD *)&v56[v122];
                    if (v123)
                    {
                      v128 = v122 + (__clz(__rbit64(v123)) >> 3);
                      goto LABEL_160;
                    }
                    v117 -= 8;
                    v122 += 8;
                  }
                  while (v117 > 7);
                  v124 = &v121[v122];
                  if (!v117)
                    goto LABEL_158;
                  v125 = v79;
                  v126 = &v56[v122];
                }
                v127 = &v124[v117];
                while (*v124 == *v126)
                {
                  ++v126;
                  ++v124;
                  if (!--v117)
                  {
                    v124 = v127;
                    break;
                  }
                }
                v79 = v125;
LABEL_158:
                v128 = v124 - v121;
LABEL_160:
                a3 = v370;
                if (v128 >= 4)
                {
                  v129 = 135 * v128 - 30 * (__clz(v116) ^ 0x1F) + 1920;
                  if (v79 < v129)
                  {
                    v356 = 0;
                    v358 = v116;
                    v79 = v129;
                    v99 = v128;
                    v35 = v128;
                  }
                }
              }
            }
            while ((v113 & 0x80000000) == 0);
          }
          v35 = v99;
        }
      }
      else
      {
        v99 = v35;
        a3 = v370;
      }
      if (v79 < 0x7E5)
      {
        v14 = v351 + 1;
        v260 = v13 + 1;
        v22 = v361;
        if (v13 + 1 > v361)
        {
          if (v260 <= v361 + 4 * v328)
          {
            v283 = v13 + 9;
            if (v13 + 9 >= v325)
              v283 = v325;
            if (v260 < v283)
            {
              v284 = *(_DWORD *)(a7 + 104);
              v285 = *(_DWORD *)(a7 + 108);
              result = v341;
              do
              {
                v286 = (unint64_t)(*(_QWORD *)(a3 + (v260 & a4)) * v342) >> 49;
                v287 = *(unsigned __int16 *)(v354 + 2 * v286);
                *(_WORD *)(v354 + 2 * v286) = v287 + 1;
                *(_DWORD *)(v341 + 4 * ((v286 << v285) + (v284 & v287))) = v260;
                v14 += 2;
                v260 += 2;
              }
              while (v260 < v283);
            }
          }
          else
          {
            v261 = v13 + 17;
            if (v13 + 17 >= v325)
              v261 = v325;
            if (v260 < v261)
            {
              v262 = *(_DWORD *)(a7 + 104);
              v263 = *(_DWORD *)(a7 + 108);
              result = v341;
              do
              {
                v264 = (unint64_t)(*(_QWORD *)(a3 + (v260 & a4)) * v342) >> 49;
                v265 = *(unsigned __int16 *)(v354 + 2 * v264);
                *(_WORD *)(v354 + 2 * v264) = v265 + 1;
                *(_DWORD *)(v341 + 4 * ((v264 << v263) + (v262 & v265))) = v260;
                v14 += 4;
                v260 += 4;
              }
              while (v260 < v261);
            }
          }
        }
        v23 = v329;
        goto LABEL_464;
      }
      v353 = v79;
      v130 = 0;
      v336 = *(_DWORD *)(a7 + 108);
      v335 = *(_DWORD *)(a7 + 104);
      v337 = *(_DWORD *)(a7 + 112);
      if (v337 <= 1)
        v131 = 1;
      else
        v131 = *(_DWORD *)(a7 + 112);
      v331 = v131;
      v132 = v340 + 1 + v13;
      while (1)
      {
        if (v132 >= v339)
          v133 = v339;
        else
          v133 = v132;
        v366 = v133;
        v134 = v29 - 1;
        v135 = v99 - 1;
        if (v99 - 1 >= v29 - 1)
          v135 = v29 - 1;
        if (*(int *)(v12 + 4) >= 5)
          v136 = 0;
        else
          v136 = v135;
        v137 = v13 + 1;
        if (v13 + 1 < v339)
          v138 = v13 + 1;
        else
          v138 = v339;
        v139 = v137 + v340;
        if (v137 + v340 >= v339)
          v139 = v339;
        v348 = v139;
        if (*(_DWORD *)(v12 + 624))
        {
          v140 = *(unsigned __int8 *)(v12
                                    + (*(_BYTE *)(v332 + v344) | *(_BYTE *)(a5
                                                                                           + *(unsigned __int8 *)(a3 + (v13 & a4))))
                                    + 629);
          v344 = *(unsigned __int8 *)(a3 + (v13 & a4));
        }
        else
        {
          v140 = v346;
        }
        v362 = *(uint64_t **)(v12 + 8 * v140 + 696);
        v141 = v137 & a4;
        v350 = v13;
        v346 = v140;
        v347 = v132;
        v334 = v99;
        v349 = v130;
        if (v337)
        {
          v142 = 0;
          v360 = 0;
          v143 = 0;
          v144 = 2020;
          v145 = 2020;
          do
          {
            v146 = a8[v142];
            v147 = v137 - v146;
            v148 = v138 < v146 || v147 >= v137;
            v149 = v147 & a4;
            v150 = v136 + v141;
            v151 = v148 || v150 > a4;
            v152 = v149 + v136;
            v153 = v151 || v152 > a4;
            if (!v153 && *(unsigned __int8 *)(a3 + v150) == *(unsigned __int8 *)(a3 + v152))
            {
              v154 = (_QWORD *)(a3 + v149);
              if (v134 < 8)
              {
                v157 = (_QWORD *)(a3 + v149);
                v156 = (_QWORD *)(a3 + v141);
                v159 = v29 - 1;
                if (v29 != 1)
                {
LABEL_210:
                  v160 = (_QWORD *)((char *)v157 + v159);
                  while (*(unsigned __int8 *)v157 == *(unsigned __int8 *)v156)
                  {
                    v156 = (_QWORD *)((char *)v156 + 1);
                    v157 = (_QWORD *)((char *)v157 + 1);
                    if (!--v159)
                    {
                      v157 = v160;
                      break;
                    }
                  }
                }
              }
              else
              {
                v155 = 0;
                v156 = (_QWORD *)(a3 + v141);
                v157 = v154;
                do
                {
                  v158 = *v157 ^ *v156;
                  if (v158)
                  {
                    v161 = (__clz(__rbit64(v158)) >> 3) - v155;
                    goto LABEL_216;
                  }
                  ++v157;
                  ++v156;
                  v155 -= 8;
                  v159 = v29 + v155 - 1;
                }
                while (v159 > 7);
                if (v29 + v155 != 1)
                  goto LABEL_210;
              }
              v161 = (char *)v157 - (char *)v154;
LABEL_216:
              if (v161 > 2 || v142 <= 1 && v161 == 2)
              {
                v162 = 135 * v161 + 1935;
                if (v144 < v162)
                {
                  if (v142)
                    v162 -= ((0x1CA10u >> (v142 & 0xE)) & 0xE) + 39;
                  if (v144 < v162)
                  {
                    v143 = v161;
                    v360 = a8[v142];
                    v145 = v162;
                    v144 = v162;
                    v136 = v161;
                  }
                }
              }
            }
            ++v142;
          }
          while (v142 != v331);
        }
        else
        {
          v143 = 0;
          v360 = 0;
          v145 = 2020;
          v144 = 2020;
        }
        v163 = (unsigned __int8 *)(a3 + v141);
        v164 = *(_QWORD *)(a3 + v141);
        v165 = (unint64_t)(v164 * v342) >> 49;
        v166 = v341 + 4 * (v165 << v336);
        v167 = *(unsigned __int16 *)(v354 + 2 * v165);
        if (v167 >= v338)
          v168 = v167 - v338;
        else
          v168 = 0;
        v355 = v137;
        if (v168 < v167)
        {
          v169 = v29 - 5;
          v170 = v141 + a3 + 4;
          v171 = *(unsigned __int16 *)(v354 + 2 * v165);
          do
          {
            v172 = *(unsigned int *)(v166 + 4 * (--v171 & *(_DWORD *)(a7 + 104)));
            v173 = v137 - v172;
            if (v137 - v172 > v138)
              break;
            if (v136 + v141 <= a4)
            {
              v174 = v172 & a4;
              if (v174 + v136 <= a4
                && *(unsigned __int8 *)(a3 + v136 + v141) == *(unsigned __int8 *)(a3 + v174 + v136)
                && *(_DWORD *)(a3 + v174) == (_DWORD)v164)
              {
                v175 = v174 + a3 + 4;
                v176 = v144;
                if (v169 < 8)
                {
                  i = v169;
                  v182 = (unsigned __int8 *)v175;
                  v181 = (unsigned __int8 *)v170;
                  v178 = i;
                  if (i)
                  {
LABEL_242:
                    v183 = &v182[i];
                    while (*v182 == *v181)
                    {
                      ++v181;
                      ++v182;
                      if (!--i)
                      {
                        v182 = v183;
                        break;
                      }
                    }
                    v12 = v359;
                    v137 = v355;
                  }
                }
                else
                {
                  v177 = 0;
                  v178 = v169;
                  for (i = v169; i > 7; i -= 8)
                  {
                    v180 = *(_QWORD *)(v175 + v177) ^ *(_QWORD *)(v170 + v177);
                    if (v180)
                    {
                      v184 = (unsigned __int8 *)(v177 + (__clz(__rbit64(v180)) >> 3));
                      v144 = v176;
                      goto LABEL_249;
                    }
                    v177 += 8;
                  }
                  v181 = (unsigned __int8 *)(v170 + v177);
                  v182 = (unsigned __int8 *)(v175 + v177);
                  if (i)
                    goto LABEL_242;
                }
                v144 = v176;
                v184 = &v182[-v175];
LABEL_249:
                v185 = (unint64_t)(v184 + 4);
                v186 = 135 * v185 - 30 * (__clz(v173) ^ 0x1F) + 1920;
                v169 = v178;
                v165 = (unint64_t)(v164 * v342) >> 49;
                a3 = v370;
                if (v144 < v186)
                {
                  v143 = v185;
                  v360 = v173;
                  v145 = v186;
                  v144 = v186;
                  v136 = v185;
                }
              }
            }
          }
          while (v171 > v168);
        }
        *(_DWORD *)(v166 + 4 * (v335 & v167)) = v137;
        *(_WORD *)(v354 + 2 * v165) = v167 + 1;
        if (v145 == 2020)
        {
          v187 = *(_QWORD *)(a7 + 120);
          v189 = *(_QWORD *)(v187 + 40);
          v188 = *(_QWORD *)(v187 + 48);
          v190 = v360;
          if (v188 >= v189 >> 7)
          {
            v369 = 0;
            v242 = ((506832829 * *(_DWORD *)v163) >> 17) & 0x7FFE;
            v243 = v362;
            v244 = v362[4];
            v245 = 1;
            v145 = 2020;
            v246 = v360;
            v247 = v143;
            do
            {
              v248 = v245;
              *(_QWORD *)(v187 + 40) = ++v189;
              v249 = *(unsigned __int8 *)(v244 + v242);
              if (!*(_BYTE *)(v244 + v242) || v134 < v249)
                goto LABEL_358;
              v250 = *(unsigned __int16 *)(v243[3] + 2 * v242);
              v251 = *v243;
              v252 = (unsigned __int8 *)(*(_QWORD *)(*v243 + 168)
                                       + *(unsigned int *)(*v243 + 4 * *(unsigned __int8 *)(v244 + v242) + 32)
                                       + v250 * *(unsigned __int8 *)(v244 + v242));
              if (v249 < 8)
              {
                v254 = *(unsigned __int8 *)(v244 + v242);
                v256 = v163;
              }
              else
              {
                v253 = 0;
                v254 = *(unsigned __int8 *)(v244 + v242);
                do
                {
                  v255 = *(_QWORD *)&v163[v253] ^ *(_QWORD *)&v252[v253];
                  if (v255)
                  {
                    v143 = v253 + (__clz(__rbit64(v255)) >> 3);
                    goto LABEL_351;
                  }
                  v254 -= 8;
                  v253 += 8;
                }
                while (v254 > 7);
                v256 = &v163[v253];
                if (!v254)
                  goto LABEL_349;
                v252 += v253;
              }
              v257 = &v256[v254];
              while (*v256 == *v252)
              {
                ++v252;
                ++v256;
                if (!--v254)
                {
                  v256 = v257;
                  break;
                }
              }
              v243 = v362;
LABEL_349:
              v143 = v256 - v163;
LABEL_351:
              v258 = v143 && v143 + *((unsigned int *)v243 + 3) > v249;
              if (v258
                && (v190 = v330
                         + v348
                         + v250
                         + (((((unint64_t)v243[2] >> (6 * (v249 - v143))) & 0x3F)
                           + 4 * (v249 - v143)) << *(_BYTE *)(v251 + v249)),
                    v190 <= v31)
                && (v259 = __clz(v190) ^ 0x1F, 135 * v143 - 30 * v259 + 1920 >= v145))
              {
                v369 = v249 - v143;
                *(_QWORD *)(v187 + 48) = ++v188;
                v145 = 135 * v143 - 30 * v259 + 1920;
              }
              else
              {
LABEL_358:
                v143 = v247;
                v190 = v246;
              }
              a3 = v370;
              v245 = 0;
              ++v242;
              v246 = v190;
              v247 = v143;
            }
            while ((v248 & 1) != 0);
          }
          else
          {
            v369 = 0;
            v145 = 2020;
          }
        }
        else
        {
          v369 = 0;
          v190 = v360;
        }
        if (v367)
        {
          v191 = 0;
          v363 = v348 + v364;
          do
          {
            v192 = v12 + 8 * v191;
            v193 = *(_QWORD *)(v192 + 104);
            v195 = *(_DWORD *)(v193 + 16);
            v194 = *(_DWORD *)(v193 + 20);
            v196 = v193 + 24;
            v197 = v193 + 24 + 4 * (1 << v194);
            v198 = v197 + 2 * (1 << v195);
            v199 = (_QWORD *)(v198 + 4 * *(unsigned int *)(v193 + 4));
            if (*(_DWORD *)v193 != -558043680)
              v199 = (_QWORD *)*v199;
            v200 = 0;
            v201 = *(_QWORD *)(v192 + 360);
            v202 = v363 - v201;
            v203 = *(unsigned int *)(v193 + 8);
            v204 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v163 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v193 + 12)))) >> -(char)v195;
            v205 = v363 - v201 - v203;
            v206 = (0xFFFFFFFF >> -(char)v194) & v204;
            v207 = *(unsigned __int16 *)(v197 + 2 * v204);
            v208 = (int *)(v198 + 4 * (*(_DWORD *)(v196 + 4 * v206) + v207));
            v209 = (char *)v199 + v364 + v366 - v201;
            v210 = v143;
            do
            {
              v211 = a8[v200];
              if (v205 < v211 && v202 >= v211)
              {
                if (v203 - (v202 - v211) >= v134)
                  v213 = v134;
                else
                  v213 = v203 - (v202 - v211);
                if (v213 < 8)
                {
                  v218 = (unsigned __int8 *)v199 + v202 - v211;
                  v217 = v163;
                  if (v213)
                  {
LABEL_276:
                    v219 = &v218[v213];
                    while (*v218 == *v217)
                    {
                      ++v217;
                      ++v218;
                      if (!--v213)
                      {
                        v218 = v219;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v214 = 0;
                  v215 = &v209[-v211];
                  do
                  {
                    v216 = *(_QWORD *)&v215[v214] ^ *(_QWORD *)&v163[v214];
                    if (v216)
                    {
                      v220 = v214 + (__clz(__rbit64(v216)) >> 3);
                      goto LABEL_282;
                    }
                    v213 -= 8;
                    v214 += 8;
                  }
                  while (v213 > 7);
                  v217 = &v163[v214];
                  v218 = (unsigned __int8 *)&v215[v214];
                  if (v213)
                    goto LABEL_276;
                }
                v220 = v218 - ((unsigned __int8 *)v199 + v202 - v211);
LABEL_282:
                v221 = 135 * v220 + 1935;
                if (v220 >= 2 && v145 < v221)
                {
                  if (v200)
                    v221 -= ((0x1CA10u >> (v200 & 0xE)) & 0xE) + 39;
                  if (v145 < v221)
                  {
                    v369 = 0;
                    if (v220 > v143)
                      v143 = v220;
                    v210 = v220;
                    v190 = a8[v200];
                    v145 = v221;
                  }
                }
              }
              ++v200;
            }
            while (v200 != 4);
            v12 = v359;
            a3 = v370;
            if (v207 != 0xFFFF)
            {
              do
              {
                v224 = *v208++;
                v223 = v224;
                v225 = v224 & 0x7FFFFFFF;
                v226 = v202 - v225;
                if (v203 - v225 >= v134)
                  v227 = v134;
                else
                  v227 = v203 - v225;
                v228 = v143 + v141;
                v230 = v226 > v31 || v228 > a4 || v143 >= v227;
                if (!v230 && *(unsigned __int8 *)(a3 + v228) == *((unsigned __int8 *)v199 + v143 + v225))
                {
                  v231 = (unsigned __int8 *)v199 + v225;
                  if (v227 < 8)
                  {
                    v235 = v163;
                    v234 = v231;
                  }
                  else
                  {
                    v232 = 0;
                    do
                    {
                      v233 = *(_QWORD *)&v231[v232] ^ *(_QWORD *)&v163[v232];
                      if (v233)
                      {
                        v237 = v232 + (__clz(__rbit64(v233)) >> 3);
                        goto LABEL_324;
                      }
                      v227 -= 8;
                      v232 += 8;
                    }
                    while (v227 > 7);
                    v234 = &v231[v232];
                    if (!v227)
                      goto LABEL_322;
                    v235 = &v163[v232];
                  }
                  v236 = &v234[v227];
                  while (*v234 == *v235)
                  {
                    ++v235;
                    ++v234;
                    if (!--v227)
                    {
                      v234 = v236;
                      break;
                    }
                  }
                  a3 = v370;
LABEL_322:
                  v237 = v234 - v231;
LABEL_324:
                  if (v237 >= 4)
                  {
                    v238 = 135 * v237 - 30 * (__clz(v226) ^ 0x1F) + 1920;
                    if (v145 < v238)
                    {
                      v369 = 0;
                      v210 = v237;
                      v190 = v226;
                      v145 = v238;
                      v143 = v237;
                    }
                  }
                }
              }
              while ((v223 & 0x80000000) == 0);
            }
            ++v191;
            v143 = v210;
          }
          while (v191 != v367);
        }
        else
        {
          v210 = v143;
        }
        if (v145 < v353 + 175)
          break;
        ++v351;
        if (v349 > 2)
        {
          v241 = v355;
          v239 = v190;
          v240 = v369;
          goto LABEL_407;
        }
        v130 = v349 + 1;
        v132 = v347 + 1;
        v239 = v190;
        v358 = v190;
        v353 = v145;
        v240 = v369;
        v356 = v369;
        v99 = v210;
        v29 = v134;
        v241 = v355;
        v13 = v355;
        if (v350 + 9 >= v343)
          goto LABEL_407;
      }
      v241 = v350;
      v266 = v350 + v340;
      if (v350 + v340 >= v339)
        v266 = v339;
      v348 = v266;
      v239 = v358;
      v240 = v356;
      v210 = v334;
LABEL_407:
      v288 = v241;
      v289 = v239;
      if (v239 > v348 + v327)
        goto LABEL_408;
      v296 = *a8;
      if (v239 != v296)
      {
        v306 = a8[1];
        if (v239 == v306)
        {
          v290 = 1;
          goto LABEL_409;
        }
        v307 = v239 + 3;
        v308 = v307 - v296;
        if (v308 <= 6)
        {
          v309 = 4 * v308;
          v310 = 158663784;
          goto LABEL_434;
        }
        v311 = v307 - v306;
        if (v311 > 6)
        {
          v239 = v289;
          if (v289 == a8[2])
          {
            v290 = 2;
          }
          else if (v289 == a8[3])
          {
            v290 = 3;
          }
          else
          {
LABEL_408:
            v290 = v239 + 15;
          }
LABEL_409:
          v291 = v354;
          result = v341;
        }
        else
        {
          v309 = 4 * v311;
          v310 = 266017486;
LABEL_434:
          v290 = (v310 >> v309) & 0xF;
          v291 = v354;
          result = v341;
          v239 = v289;
        }
        if (v239 <= v348 + v327)
        {
          if (v290)
          {
            a8[3] = a8[2];
            v292 = *(int32x2_t *)a8;
            *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
            *a8 = v289;
            v293 = *(_DWORD *)(a7 + 112);
            if (v293 >= 5)
            {
              v294 = vdupq_n_s32(v289);
              *((int32x4_t *)a8 + 1) = vaddq_s32(v294, (int32x4_t)xmmword_19D02CCA0);
              *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v294.i8, (int32x2_t)0x3FFFFFFFDLL);
              if (v293 >= 0xB)
              {
                v295 = vdupq_lane_s32(v292, 0);
                *(int32x4_t *)(a8 + 10) = vaddq_s32(v295, (int32x4_t)xmmword_19D02CCA0);
                *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v295.i8, (int32x2_t)0x3FFFFFFFDLL);
              }
            }
          }
        }
        goto LABEL_417;
      }
      v290 = 0;
      v291 = v354;
      result = v341;
LABEL_417:
      *(_DWORD *)v329 = v351;
      *(_DWORD *)(v329 + 4) = v210 | (v240 << 25);
      v297 = *(unsigned int *)(v12 + 60);
      v298 = v297 + 16;
      if (v297 + 16 <= v290)
      {
        v300 = *(unsigned int *)(v12 + 56);
        v301 = v290 - v297 + (4 << v300) - 16;
        v302 = (__clz(v301) ^ 0x1F) - 1;
        v303 = ((v301 >> v302) & 1 | 2) << v302;
        v290 = ((v301 & ~(-1 << v300))
              + v298
              + ((((v301 >> v302) & 1 | (2 * (v302 - v300))) + 65534) << v300)) | ((v302 - v300) << 10);
        v299 = (v301 - v303) >> v300;
      }
      else
      {
        LODWORD(v299) = 0;
      }
      *(_WORD *)(v329 + 14) = v290;
      *(_DWORD *)(v329 + 8) = v299;
      if (v351 > 5)
      {
        if (v351 > 0x81)
        {
          if (v351 > 0x841)
          {
            if (v351 >> 1 >= 0xC21)
            {
              if (v351 < 0x5842)
                LOWORD(v304) = 22;
              else
                LOWORD(v304) = 23;
            }
            else
            {
              LOWORD(v304) = 21;
            }
          }
          else
          {
            v304 = (__clz(v351 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v305 = (__clz(v351 - 2) ^ 0x1F) - 1;
          v304 = ((v351 - 2) >> v305) + 2 * v305 + 2;
        }
      }
      else
      {
        LOWORD(v304) = v351;
      }
      v312 = v240 + (int)v210;
      if (v312 > 9)
      {
        if (v312 > 0x85)
        {
          if (v312 > 0x845)
            LOWORD(v313) = 23;
          else
            v313 = (__clz(v312 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v314 = v312 - 6;
          v315 = (__clz(v314) ^ 0x1F) - 1;
          v313 = (v314 >> v315) + 2 * v315 + 4;
        }
      }
      else
      {
        LOWORD(v313) = v240 + v210 - 2;
      }
      v316 = v313 & 7 | (8 * (v304 & 7));
      if ((v290 & 0x3FF) != 0 || (unsigned __int16)v304 > 7u || (unsigned __int16)v313 > 0xFu)
      {
        v318 = 3 * ((unsigned __int16)v304 >> 3) + ((unsigned __int16)(v313 & 0xFFF8) >> 3);
        v317 = ((((0x520D40u >> (2 * v318)) & 0xC0) + (v318 << 6)) | v316) + 64;
      }
      else
      {
        LOWORD(v317) = v316 | 0x40;
        if ((v313 & 0xFFF8) == 0)
          LOWORD(v317) = v313 & 7 | (8 * (v304 & 7));
      }
      *(_WORD *)(v329 + 12) = v317;
      *a12 += v351;
      v319 = v288 + 2;
      v260 = v288 + v210;
      if (v288 + v210 >= v326)
        v320 = v326;
      else
        v320 = v288 + v210;
      if (v289 < v210 >> 2)
      {
        if (v319 <= v260 - 4 * v289)
          v319 = v260 - 4 * v289;
        if (v320 < v319)
          v319 = v320;
      }
      v22 = v328 + 2 * v210 + v288;
      v23 = v329 + 16;
      if (v319 < v320)
      {
        v321 = *(_DWORD *)(a7 + 104);
        v322 = *(_DWORD *)(a7 + 108);
        do
        {
          v323 = (unint64_t)(*(_QWORD *)(a3 + (v319 & a4)) * v342) >> 49;
          v324 = *(unsigned __int16 *)(v291 + 2 * v323);
          *(_WORD *)(v291 + 2 * v323) = v324 + 1;
          *(_DWORD *)(result + 4 * ((v323 << v322) + (v321 & v324))) = v319++;
        }
        while (v320 != v319);
      }
      v14 = 0;
LABEL_464:
      v13 = v260;
      if (v260 + 8 >= v343)
        goto LABEL_471;
    }
    v26 = 0;
LABEL_21:
    v27 = 0;
    goto LABEL_22;
  }
  v23 = a10;
  v260 = a2;
LABEL_471:
  *a9 = v14 + v343 - v260;
  *a11 += (v23 - a10) >> 4;
  return result;
}

_WORD *CreateBackwardReferencesDH40(_WORD *result, uint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, int *a6, uint64_t a7, int *a8, unint64_t *a9, _DWORD *a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v41;
  uint64_t v42;
  unint64_t i;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t j;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unsigned int v67;
  unsigned __int16 *v68;
  uint64_t v69;
  _WORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  int *v91;
  _WORD *v92;
  unint64_t v93;
  unint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  unint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unint64_t v102;
  unint64_t v103;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  BOOL v112;
  unsigned __int8 *v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  _WORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  unsigned __int16 *v175;
  __int16 v176;
  __int16 *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  int v198;
  unint64_t v199;
  int *v200;
  char *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  unsigned __int8 *v209;
  unsigned __int8 *v210;
  unsigned __int8 *v211;
  unint64_t v212;
  unint64_t v213;
  _WORD *v215;
  int v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  BOOL v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unint64_t v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unint64_t v230;
  unsigned int v231;
  _WORD *v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  unint64_t v236;
  unint64_t v237;
  char v238;
  unint64_t v239;
  unsigned __int8 *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unsigned __int8 *v244;
  unsigned __int8 *v245;
  BOOL v246;
  unsigned int v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned __int16 v253;
  unsigned int v254;
  unint64_t v255;
  _WORD *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  unint64_t v261;
  unint64_t v262;
  char v263;
  unint64_t v264;
  unsigned __int8 *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  BOOL v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unint64_t v278;
  _WORD *v279;
  _DWORD *v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  unint64_t v294;
  char v295;
  unsigned int v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unint64_t v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  int v304;
  unint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _DWORD *v319;
  uint64_t v320;
  uint64_t v321;
  _WORD *v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  unsigned int v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  _WORD *v337;
  unint64_t v339;
  _WORD *v340;
  unint64_t v341;
  int v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unsigned __int8 *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  int *v352;

  v12 = a2;
  v13 = (unint64_t)result + a2;
  if ((unint64_t)result <= 3)
    v14 = a2;
  else
    v14 = (uint64_t)result + a2 - 3;
  if (a6[1] >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (a2 + 4 < v13)
  {
    v318 = v14;
    v314 = (unint64_t)result + a2 - 3;
    v326 = (1 << a6[2]) - 16;
    v317 = v15;
    v16 = (char *)(v15 + a2);
    v321 = a5 + 256;
    v316 = *((_QWORD *)a6 + 12);
    v319 = a10;
    v320 = v316 + 1;
    v313 = v13 - 4;
    v324 = (unint64_t)result + a2;
    v325 = *((_QWORD *)a6 + 2);
    v315 = 4 * v15;
    v17 = *a9;
    v352 = a6;
    while (1)
    {
      v18 = v12 >= v326 ? v326 : v12;
      v19 = v12 + v325 >= v326 ? v326 : v12 + v325;
      v335 = v17;
      v349 = (unint64_t)v16;
      if (a6[156])
        break;
      v22 = 0;
      v328 = 0;
LABEL_23:
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = v13 - v12;
      v329 = v22;
      v28 = *(_QWORD *)&a6[2 * v22 + 174];
      v29 = *((_QWORD *)a6 + 9);
      v31 = *(_QWORD *)(a7 + 96);
      v30 = *(_QWORD *)(a7 + 104);
      v32 = v31 + 196608;
      v33 = v12 & a4;
      v34 = (unsigned __int8 *)a3 + (v12 & a4);
      v35 = (506832829 * *(_DWORD *)v34) >> 17;
      v36 = 2020;
      v37 = 2020;
      v339 = v12;
      do
      {
        v38 = a8[v23];
        v39 = v12 - v38;
        if ((!v23 || *(unsigned __int8 *)(v32 + (unsigned __int16)(v12 - v38)) == v35)
          && v18 >= v38
          && v39 < v12)
        {
          v41 = (unsigned __int8 *)a3 + (v39 & a4);
          if (v27 < 8)
          {
            v46 = (unsigned __int8 *)a3 + (v39 & a4);
            v45 = v34;
            i = v27;
            if (v27)
            {
LABEL_37:
              v47 = &v46[i];
              while (*v46 == *v45)
              {
                ++v45;
                ++v46;
                if (!--i)
                {
                  v46 = v47;
                  break;
                }
              }
              v12 = v339;
            }
          }
          else
          {
            v42 = 0;
            for (i = v27; i > 7; i -= 8)
            {
              v44 = *(_QWORD *)&v41[v42] ^ *(_QWORD *)&v34[v42];
              if (v44)
              {
                v48 = v42 + (__clz(__rbit64(v44)) >> 3);
                goto LABEL_44;
              }
              v42 += 8;
            }
            v45 = &v34[v42];
            v46 = &v41[v42];
            if (i)
              goto LABEL_37;
          }
          v48 = v46 - v41;
LABEL_44:
          v49 = 135 * v48 + 1935;
          if (v48 >= 2 && v36 < v49)
          {
            if (v23)
              v49 -= ((0x1CA10u >> (v23 & 0xE)) & 0xE) + 39;
            if (v36 < v49)
            {
              v26 = a8[v23];
              v37 = v49;
              v25 = v48;
              v36 = v49;
              v24 = v48;
            }
          }
        }
        ++v23;
      }
      while (v23 != 4);
      v51 = v31 + 0x20000;
      v52 = *(_QWORD *)(a7 + 88);
      v53 = v12 - *(unsigned int *)(v31 + 4 * v35);
      if (v52)
      {
        v54 = 0;
        v55 = *(unsigned __int16 *)(v51 + 2 * v35);
        v56 = v53;
        while (1)
        {
          v54 += v56;
          if (v54 > v18)
            goto LABEL_79;
          if (v24 + v33 <= a4)
          {
            v57 = (v339 - v54) & a4;
            if (v57 + v24 <= a4 && *((unsigned __int8 *)a3 + v24 + v33) == *((unsigned __int8 *)a3 + v57 + v24))
              break;
          }
LABEL_78:
          v68 = (unsigned __int16 *)(v30 + 4 * v55);
          v55 = v68[1];
          v56 = *v68;
          if (!--v52)
            goto LABEL_79;
        }
        v58 = (unsigned __int8 *)a3 + v57;
        v59 = v26;
        v60 = v37;
        if (v27 < 8)
        {
          v65 = (unsigned __int8 *)a3 + v57;
          v64 = v34;
          j = v27;
          if (!v27)
            goto LABEL_66;
LABEL_68:
          v346 = &v65[j];
          while (*v65 == *v64)
          {
            ++v64;
            ++v65;
            if (!--j)
            {
              v65 = v346;
              break;
            }
          }
          v37 = v60;
          v26 = v59;
        }
        else
        {
          v61 = 0;
          for (j = v27; j > 7; j -= 8)
          {
            v63 = *(_QWORD *)&v58[v61] ^ *(_QWORD *)&v34[v61];
            if (v63)
            {
              v66 = v61 + (__clz(__rbit64(v63)) >> 3);
              v26 = v59;
              goto LABEL_75;
            }
            v61 += 8;
          }
          v64 = &v34[v61];
          v65 = &v58[v61];
          if (j)
            goto LABEL_68;
LABEL_66:
          v37 = v60;
          v26 = v59;
        }
        v66 = v65 - v58;
LABEL_75:
        if (v66 >= 4)
        {
          v67 = __clz(v54);
          if (v36 < 135 * v66 - 30 * (v67 ^ 0x1F) + 1920)
          {
            v26 = v54;
            v37 = 135 * v66 - 30 * (v67 ^ 0x1F) + 1920;
            v25 = v66;
            v36 = v37;
            v24 = v66;
          }
        }
        goto LABEL_78;
      }
LABEL_79:
      v69 = *(unsigned __int16 *)(a7 + 80);
      *(_WORD *)(a7 + 80) = v69 + 1;
      *(_BYTE *)(v32 + (unsigned __int16)v339) = v35;
      if (v53 >= 0xFFFF)
        LOWORD(v53) = -1;
      v70 = (_WORD *)(v30 + 4 * v69);
      *v70 = v53;
      v70[1] = *(_WORD *)(v51 + 2 * v35);
      *(_DWORD *)(v31 + 4 * v35) = v339;
      *(_WORD *)(v51 + 2 * v35) = v69;
      if (v37 == 2020)
      {
        v71 = *(_QWORD *)(a7 + 112);
        v73 = *(_QWORD *)(v71 + 40);
        v72 = *(_QWORD *)(v71 + 48);
        if (v72 >= v73 >> 7)
        {
          v342 = 0;
          v258 = ((506832829 * *(_DWORD *)v34) >> 17) & 0x7FFE;
          v259 = *(_QWORD *)(v28 + 32);
          v260 = 1;
          v261 = v25;
          v37 = 2020;
          v262 = v26;
          do
          {
            v263 = v260;
            *(_QWORD *)(v71 + 40) = ++v73;
            v264 = *(unsigned __int8 *)(v259 + v258);
            if (!*(_BYTE *)(v259 + v258) || v27 < v264)
              goto LABEL_377;
            v265 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v28 + 168)
                                     + *(unsigned int *)(*(_QWORD *)v28 + 4 * *(unsigned __int8 *)(v259 + v258) + 32)
                                     + *(unsigned __int16 *)(*(_QWORD *)(v28 + 24) + 2 * v258)
                                     * (unint64_t)*(unsigned __int8 *)(v259 + v258));
            if (v264 < 8)
            {
              v267 = *(unsigned __int8 *)(v259 + v258);
              v269 = v34;
            }
            else
            {
              v266 = 0;
              v267 = *(unsigned __int8 *)(v259 + v258);
              do
              {
                v268 = *(_QWORD *)&v34[v266] ^ *(_QWORD *)&v265[v266];
                if (v268)
                {
                  v25 = v266 + (__clz(__rbit64(v268)) >> 3);
                  goto LABEL_370;
                }
                v267 -= 8;
                v266 += 8;
              }
              while (v267 > 7);
              v269 = &v34[v266];
              if (!v267)
                goto LABEL_368;
              v265 += v266;
            }
            v270 = &v269[v267];
            while (*v269 == *v265)
            {
              ++v265;
              ++v269;
              if (!--v267)
              {
                v269 = v270;
                break;
              }
            }
LABEL_368:
            v25 = v269 - v34;
LABEL_370:
            v271 = v25 && v25 + *(unsigned int *)(v28 + 12) > v264;
            if (v271
              && (v26 = v320
                      + v19
                      + *(unsigned __int16 *)(*(_QWORD *)(v28 + 24) + 2 * v258)
                      + ((((*(_QWORD *)(v28 + 16) >> (6 * (v264 - v25))) & 0x3FLL)
                        + 4 * (v264 - v25)) << *(_BYTE *)(*(_QWORD *)v28 + v264)),
                  v26 <= v29)
              && (v272 = 135 * v25 - 30 * (__clz(v26) ^ 0x1F) + 1920, v272 >= v37))
            {
              v342 = v264 - v25;
              *(_QWORD *)(v71 + 48) = ++v72;
              v37 = v272;
            }
            else
            {
LABEL_377:
              v26 = v262;
              v25 = v261;
            }
            v260 = 0;
            ++v258;
            v261 = v25;
            v262 = v26;
          }
          while ((v263 & 1) != 0);
        }
        else
        {
          v342 = 0;
          v37 = 2020;
        }
      }
      else
      {
        v342 = 0;
      }
      a6 = v352;
      v74 = *((_QWORD *)v352 + 9);
      v75 = *((_QWORD *)v352 + 11);
      v341 = v26;
      if (v75)
      {
        v76 = 0;
        v77 = *((_QWORD *)v352 + 12) + v19;
        do
        {
          v78 = &a6[2 * v76];
          v79 = *((_QWORD *)v78 + 13);
          v80 = *(_DWORD *)(v79 + 16);
          v81 = *(_DWORD *)(v79 + 20);
          v82 = v79 + 24;
          v83 = v79 + 24 + 4 * (1 << v81);
          v84 = v83 + 2 * (1 << v80);
          v85 = (_QWORD *)(v84 + 4 * *(unsigned int *)(v79 + 4));
          if (*(_DWORD *)v79 != -558043680)
            v85 = (_QWORD *)*v85;
          v86 = 0;
          v87 = v77 - *((_QWORD *)v78 + 45);
          v88 = *(unsigned int *)(v79 + 8);
          v89 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v34 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v79 + 12)))) >> -(char)v80;
          v90 = *(unsigned __int16 *)(v83 + 2 * v89);
          v91 = (int *)(v84
                      + 4
                      * (*(_DWORD *)(v82 + 4 * ((0xFFFFFFFF >> -(char)v81) & v89)) + v90));
          v92 = (_WORD *)v25;
          do
          {
            v93 = a8[v86];
            if (v87 - v88 < v93 && v87 >= v93)
            {
              if (v88 - (v87 - v93) >= v27)
                v95 = v27;
              else
                v95 = v88 - (v87 - v93);
              v96 = (unsigned __int8 *)v85 + v87 - v93;
              if (v95 < 8)
              {
                v100 = (unsigned __int8 *)v85 + v87 - v93;
                v99 = v34;
                if (v95)
                {
LABEL_105:
                  v101 = &v100[v95];
                  while (*v100 == *v99)
                  {
                    ++v99;
                    ++v100;
                    if (!--v95)
                    {
                      v100 = v101;
                      break;
                    }
                  }
                }
              }
              else
              {
                v97 = 0;
                do
                {
                  v98 = *(_QWORD *)&v96[v97] ^ *(_QWORD *)&v34[v97];
                  if (v98)
                  {
                    v102 = v97 + (__clz(__rbit64(v98)) >> 3);
                    goto LABEL_111;
                  }
                  v95 -= 8;
                  v97 += 8;
                }
                while (v95 > 7);
                v99 = &v34[v97];
                v100 = &v96[v97];
                if (v95)
                  goto LABEL_105;
              }
              v102 = v100 - v96;
LABEL_111:
              v103 = 135 * v102 + 1935;
              if (v102 >= 2 && v37 < v103)
              {
                if (v86)
                  v103 -= ((0x1CA10u >> (v86 & 0xE)) & 0xE) + 39;
                if (v37 < v103)
                {
                  v342 = 0;
                  if (v102 > v25)
                    v25 = v102;
                  v341 = a8[v86];
                  v37 = v103;
                  v92 = (_WORD *)v102;
                }
              }
            }
            ++v86;
          }
          while (v86 != 4);
          if (v90 != 0xFFFF)
          {
            do
            {
              v106 = *v91++;
              v105 = v106;
              v107 = v106 & 0x7FFFFFFF;
              v108 = v87 - v107;
              if (v88 - v107 >= v27)
                v109 = v27;
              else
                v109 = v88 - v107;
              v110 = v25 + v33;
              v112 = v108 > v74 || v110 > a4 || v25 >= v109;
              if (!v112 && *((unsigned __int8 *)a3 + v110) == *((unsigned __int8 *)v85 + v25 + v107))
              {
                v113 = (unsigned __int8 *)v85 + v107;
                if (v109 < 8)
                {
                  v117 = v34;
                  v116 = v113;
                }
                else
                {
                  v114 = 0;
                  do
                  {
                    v115 = *(_QWORD *)&v113[v114] ^ *(_QWORD *)&v34[v114];
                    if (v115)
                    {
                      v119 = v114 + (__clz(__rbit64(v115)) >> 3);
                      goto LABEL_152;
                    }
                    v109 -= 8;
                    v114 += 8;
                  }
                  while (v109 > 7);
                  v116 = &v113[v114];
                  if (!v109)
                    goto LABEL_150;
                  v117 = &v34[v114];
                }
                v118 = &v116[v109];
                while (*v116 == *v117)
                {
                  ++v117;
                  ++v116;
                  if (!--v109)
                  {
                    v116 = v118;
                    break;
                  }
                }
LABEL_150:
                v119 = v116 - v113;
LABEL_152:
                if (v119 >= 4)
                {
                  v120 = __clz(v108);
                  if (v37 < 135 * v119 - 30 * (v120 ^ 0x1F) + 1920)
                  {
                    v342 = 0;
                    v341 = v108;
                    v37 = 135 * v119 - 30 * (v120 ^ 0x1F) + 1920;
                    v92 = (_WORD *)v119;
                    v25 = v119;
                  }
                }
              }
            }
            while ((v105 & 0x80000000) == 0);
          }
          ++v76;
          result = v92;
          v25 = (unint64_t)v92;
          a6 = v352;
        }
        while (v76 != v75);
      }
      else
      {
        result = (_WORD *)v25;
      }
      if (v37 >= 0x7E5)
      {
        v121 = 0;
        v122 = a7;
        v123 = v339;
        v124 = *(unsigned __int16 *)(a7 + 80);
        v125 = v325 + 1 + v339;
        v126 = v335;
        while (1)
        {
          v334 = v37;
          v336 = v126;
          if (v125 >= v326)
            v127 = v326;
          else
            v127 = v125;
          v128 = v27 - 1;
          v129 = (char *)result - 1;
          if ((unint64_t)result - 1 >= v27 - 1)
            v129 = (char *)(v27 - 1);
          if (a6[1] >= 5)
            v130 = 0;
          else
            v130 = (unint64_t)v129;
          v131 = v123 + 1;
          if (v123 + 1 < v326)
            v132 = v123 + 1;
          else
            v132 = v326;
          v133 = v131 + v325;
          if (v131 + v325 >= v326)
            v133 = v326;
          v331 = v125;
          v332 = v133;
          v340 = (_WORD *)v123;
          v323 = result;
          v333 = v121;
          v343 = v127;
          v134 = v124;
          v135 = a3;
          if (a6[156])
          {
            v136 = *((unsigned __int8 *)a6
                   + (*(_BYTE *)(v321 + v328) | *(_BYTE *)(a5 + *((unsigned __int8 *)a3 + (v123 & a4))))
                   + 629);
            v328 = *((unsigned __int8 *)a3 + (v123 & a4));
          }
          else
          {
            v136 = v329;
          }
          v137 = 0;
          v350 = 0;
          v138 = 0;
          v329 = v136;
          v327 = *(_QWORD *)&a6[2 * v136 + 174];
          v140 = *(_QWORD *)(v122 + 96);
          v139 = *(_QWORD *)(v122 + 104);
          v141 = v140 + 196608;
          v142 = v131 & a4;
          v143 = (_DWORD *)((char *)a3 + (v131 & a4));
          v144 = (506832829 * *v143) >> 17;
          v145 = 2020;
          v146 = 2020;
          do
          {
            v147 = a8[v137];
            v148 = v131 - v147;
            if ((!v137 || *(unsigned __int8 *)(v141 + (unsigned __int16)(v131 - v147)) == v144)
              && v132 >= v147
              && v148 < v131)
            {
              v150 = (_QWORD *)((char *)v135 + (v148 & a4));
              if (v128 < 8)
              {
                v153 = v150;
                v152 = (_QWORD *)((char *)a3 + (v131 & a4));
                v155 = v27 - 1;
                if (v27 != 1)
                {
LABEL_190:
                  v156 = (_QWORD *)((char *)v153 + v155);
                  while (*(unsigned __int8 *)v153 == *(unsigned __int8 *)v152)
                  {
                    v152 = (_QWORD *)((char *)v152 + 1);
                    v153 = (_QWORD *)((char *)v153 + 1);
                    if (!--v155)
                    {
                      v153 = v156;
                      break;
                    }
                  }
                }
              }
              else
              {
                v151 = 0;
                v152 = (_QWORD *)((char *)a3 + (v131 & a4));
                v153 = v150;
                do
                {
                  v154 = *v153 ^ *v152;
                  if (v154)
                  {
                    v157 = (__clz(__rbit64(v154)) >> 3) - v151;
                    v135 = a3;
                    goto LABEL_196;
                  }
                  ++v153;
                  ++v152;
                  v151 -= 8;
                  v155 = v27 + v151 - 1;
                }
                while (v155 > 7);
                if (v27 + v151 != 1)
                  goto LABEL_190;
              }
              v135 = a3;
              v157 = (char *)v153 - (char *)v150;
LABEL_196:
              v158 = 135 * v157 + 1935;
              if (v157 >= 2 && v145 < v158)
              {
                if (v137)
                  v158 -= ((0x1CA10u >> (v137 & 0xE)) & 0xE) + 39;
                if (v145 < v158)
                {
                  v138 = v157;
                  v350 = a8[v137];
                  v146 = v158;
                  v145 = v158;
                  v130 = v157;
                }
              }
            }
            ++v137;
          }
          while (v137 != 4);
          v160 = *(_QWORD *)(a7 + 88);
          v161 = v131 - *(unsigned int *)(v140 + 4 * v144);
          v337 = (_WORD *)v131;
          v345 = v161;
          v347 = v140 + 0x20000;
          if (v160)
          {
            v162 = 0;
            v163 = *(unsigned __int16 *)(v140 + 0x20000 + 2 * v144);
            do
            {
              v162 += v161;
              if (v162 > v132)
                break;
              if (v130 + v142 <= a4)
              {
                v164 = (v131 - v162) & a4;
                if (v164 + v130 <= a4
                  && *((unsigned __int8 *)v135 + v130 + v142) == *((unsigned __int8 *)v135 + v164 + v130))
                {
                  v165 = v140;
                  v166 = (_QWORD *)((char *)v135 + v164);
                  if (v128 < 8)
                  {
                    v169 = (_QWORD *)((char *)v135 + v164);
                    v168 = v143;
                    v171 = v27 - 1;
                    if (v27 != 1)
                    {
LABEL_220:
                      v172 = (_QWORD *)((char *)v169 + v171);
                      while (*(unsigned __int8 *)v169 == *(unsigned __int8 *)v168)
                      {
                        v168 = (_QWORD *)((char *)v168 + 1);
                        v169 = (_QWORD *)((char *)v169 + 1);
                        if (!--v171)
                        {
                          v169 = v172;
                          break;
                        }
                      }
                      v131 = (unint64_t)v337;
                    }
                  }
                  else
                  {
                    v167 = 0;
                    v168 = v143;
                    v169 = v166;
                    do
                    {
                      v170 = *v169 ^ *v168;
                      if (v170)
                      {
                        v173 = (__clz(__rbit64(v170)) >> 3) - v167;
                        goto LABEL_227;
                      }
                      ++v169;
                      ++v168;
                      v167 -= 8;
                      v171 = v27 + v167 - 1;
                    }
                    while (v171 > 7);
                    if (v27 + v167 != 1)
                      goto LABEL_220;
                  }
                  v173 = (char *)v169 - (char *)v166;
LABEL_227:
                  v135 = a3;
                  v140 = v165;
                  if (v173 >= 4)
                  {
                    v174 = 135 * v173 - 30 * (__clz(v162) ^ 0x1F) + 1920;
                    if (v145 < v174)
                    {
                      v138 = v173;
                      v350 = v162;
                      v146 = v174;
                      v145 = v174;
                      v130 = v173;
                    }
                  }
                }
              }
              v175 = (unsigned __int16 *)(v139 + 4 * v163);
              v163 = v175[1];
              v161 = *v175;
              --v160;
            }
            while (v160);
          }
          v330 = v134 + 1;
          *(_WORD *)(a7 + 80) = v134 + 1;
          *(_BYTE *)(v141 + (unsigned __int16)v131) = v144;
          v176 = -1;
          if (v345 < 0xFFFF)
            v176 = v345;
          v177 = (__int16 *)(v139 + 4 * (unsigned __int16)v134);
          *v177 = v176;
          v177[1] = *(_WORD *)(v347 + 2 * v144);
          *(_DWORD *)(v140 + 4 * v144) = v131;
          *(_WORD *)(v347 + 2 * v144) = v134;
          if (v146 == 2020)
          {
            v178 = *(_QWORD *)(a7 + 112);
            v180 = *(_QWORD *)(v178 + 40);
            v179 = *(_QWORD *)(v178 + 48);
            v181 = v350;
            v182 = 0;
            if (v179 >= v180 >> 7)
            {
              v233 = ((506832829 * *v143) >> 17) & 0x7FFE;
              v234 = *(_QWORD *)(v327 + 32);
              v235 = 1;
              v146 = 2020;
              v236 = v350;
              v237 = v138;
              do
              {
                v238 = v235;
                *(_QWORD *)(v178 + 40) = ++v180;
                v239 = *(unsigned __int8 *)(v234 + v233);
                if (!*(_BYTE *)(v234 + v233) || v128 < v239)
                  goto LABEL_337;
                v240 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v327 + 168)
                                         + *(unsigned int *)(*(_QWORD *)v327
                                                           + 4 * *(unsigned __int8 *)(v234 + v233)
                                                           + 32)
                                         + *(unsigned __int16 *)(*(_QWORD *)(v327 + 24) + 2 * v233)
                                         * (unint64_t)*(unsigned __int8 *)(v234 + v233));
                if (v239 < 8)
                {
                  v242 = *(unsigned __int8 *)(v234 + v233);
                  v244 = (unsigned __int8 *)v143;
                }
                else
                {
                  v241 = 0;
                  v242 = *(unsigned __int8 *)(v234 + v233);
                  do
                  {
                    v243 = *(_QWORD *)&v143[v241] ^ *(_QWORD *)&v240[v241 * 4];
                    if (v243)
                    {
                      v138 = v241 * 4 + (__clz(__rbit64(v243)) >> 3);
                      goto LABEL_330;
                    }
                    v242 -= 8;
                    v241 += 2;
                  }
                  while (v242 > 7);
                  v244 = (unsigned __int8 *)&v143[v241];
                  if (!v242)
                    goto LABEL_328;
                  v240 += v241 * 4;
                }
                v245 = &v244[v242];
                while (*v244 == *v240)
                {
                  ++v240;
                  ++v244;
                  if (!--v242)
                  {
                    v244 = v245;
                    break;
                  }
                }
LABEL_328:
                v138 = v244 - (unsigned __int8 *)v143;
LABEL_330:
                v246 = v138 && v138 + *(unsigned int *)(v327 + 12) > v239;
                if (v246
                  && (v181 = v320
                           + v332
                           + *(unsigned __int16 *)(*(_QWORD *)(v327 + 24) + 2 * v233)
                           + ((((*(_QWORD *)(v327 + 16) >> (6 * (v239 - v138))) & 0x3FLL)
                             + 4 * (v239 - v138)) << *(_BYTE *)(*(_QWORD *)v327 + v239)),
                      v181 <= v74)
                  && (v247 = __clz(v181) ^ 0x1F, 135 * v138 - 30 * v247 + 1920 >= v146))
                {
                  v182 = v239 - v138;
                  *(_QWORD *)(v178 + 48) = ++v179;
                  v146 = 135 * v138 - 30 * v247 + 1920;
                }
                else
                {
LABEL_337:
                  v138 = v237;
                  v181 = v236;
                }
                v235 = 0;
                ++v233;
                v236 = v181;
                v237 = v138;
              }
              while ((v238 & 1) != 0);
            }
            else
            {
              v146 = 2020;
            }
          }
          else
          {
            v182 = 0;
            v181 = v350;
          }
          a6 = v352;
          v74 = *((_QWORD *)v352 + 9);
          v351 = *((_QWORD *)v352 + 11);
          if (v351)
          {
            v183 = 0;
            v184 = *((_QWORD *)v352 + 12);
            v348 = v184 + v332;
            v344 = v184 + v343;
            do
            {
              v185 = &a6[2 * v183];
              v186 = *((_QWORD *)v185 + 13);
              v188 = *(_DWORD *)(v186 + 16);
              v187 = *(_DWORD *)(v186 + 20);
              v189 = v186 + 24 + 4 * (1 << v187);
              v190 = v189 + 2 * (1 << v188);
              v191 = (_QWORD *)(v190 + 4 * *(unsigned int *)(v186 + 4));
              if (*(_DWORD *)v186 != -558043680)
                v191 = (_QWORD *)*v191;
              v192 = 0;
              v193 = *((_QWORD *)v185 + 45);
              v194 = v348 - v193;
              v195 = *(unsigned int *)(v186 + 8);
              v196 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v143 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v186 + 12)))) >> -(char)v188;
              v197 = (0xFFFFFFFF >> -(char)v187) & v196;
              v198 = *(unsigned __int16 *)(v189 + 2 * v196);
              v199 = v348 - v193 - v195;
              v200 = (int *)(v190 + 4 * (*(_DWORD *)(v186 + 24 + 4 * v197) + v198));
              v201 = (char *)v191 + v344 - v193;
              v202 = v138;
              do
              {
                v203 = a8[v192];
                if (v199 < v203 && v194 >= v203)
                {
                  if (v195 - (v194 - v203) >= v128)
                    v205 = v128;
                  else
                    v205 = v195 - (v194 - v203);
                  if (v205 < 8)
                  {
                    v210 = (unsigned __int8 *)v191 + v194 - v203;
                    v209 = (unsigned __int8 *)v143;
                    if (v205)
                    {
LABEL_257:
                      v211 = &v210[v205];
                      while (*v210 == *v209)
                      {
                        ++v209;
                        ++v210;
                        if (!--v205)
                        {
                          v210 = v211;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v206 = 0;
                    v207 = &v201[-v203];
                    do
                    {
                      v208 = *(_QWORD *)&v207[v206 * 4] ^ *(_QWORD *)&v143[v206];
                      if (v208)
                      {
                        v212 = v206 * 4 + (__clz(__rbit64(v208)) >> 3);
                        goto LABEL_263;
                      }
                      v205 -= 8;
                      v206 += 2;
                    }
                    while (v205 > 7);
                    v209 = (unsigned __int8 *)&v143[v206];
                    v210 = (unsigned __int8 *)&v207[v206 * 4];
                    if (v205)
                      goto LABEL_257;
                  }
                  v212 = v210 - ((unsigned __int8 *)v191 + v194 - v203);
LABEL_263:
                  v213 = 135 * v212 + 1935;
                  if (v212 >= 2 && v146 < v213)
                  {
                    if (v192)
                      v213 -= ((0x1CA10u >> (v192 & 0xE)) & 0xE) + 39;
                    if (v146 < v213)
                    {
                      v182 = 0;
                      if (v212 > v138)
                        v138 = v212;
                      v202 = v212;
                      v181 = a8[v192];
                      v146 = v213;
                    }
                  }
                }
                ++v192;
              }
              while (v192 != 4);
              v215 = a3;
              if (v198 != 0xFFFF)
              {
                do
                {
                  v217 = *v200++;
                  v216 = v217;
                  v218 = v217 & 0x7FFFFFFF;
                  v219 = v194 - v218;
                  if (v195 - v218 >= v128)
                    v220 = v128;
                  else
                    v220 = v195 - v218;
                  v221 = v138 + v142;
                  v223 = v219 > v74 || v221 > a4 || v138 >= v220;
                  if (!v223 && *((unsigned __int8 *)v215 + v221) == *((unsigned __int8 *)v191 + v138 + v218))
                  {
                    v224 = (unsigned __int8 *)v191 + v218;
                    if (v220 < 8)
                    {
                      v228 = (unsigned __int8 *)v143;
                      v227 = v224;
                    }
                    else
                    {
                      v225 = 0;
                      do
                      {
                        v226 = *(_QWORD *)&v224[v225 * 4] ^ *(_QWORD *)&v143[v225];
                        if (v226)
                        {
                          v230 = v225 * 4 + (__clz(__rbit64(v226)) >> 3);
                          goto LABEL_304;
                        }
                        v220 -= 8;
                        v225 += 2;
                      }
                      while (v220 > 7);
                      v227 = &v224[v225 * 4];
                      if (!v220)
                        goto LABEL_302;
                      v228 = (unsigned __int8 *)&v143[v225];
                    }
                    v229 = &v227[v220];
                    while (*v227 == *v228)
                    {
                      ++v228;
                      ++v227;
                      if (!--v220)
                      {
                        v227 = v229;
                        break;
                      }
                    }
LABEL_302:
                    v230 = v227 - v224;
LABEL_304:
                    v215 = a3;
                    if (v230 >= 4)
                    {
                      v231 = __clz(v219);
                      if (v146 < 135 * v230 - 30 * (v231 ^ 0x1F) + 1920)
                      {
                        v182 = 0;
                        v202 = v230;
                        v181 = v219;
                        v146 = 135 * v230 - 30 * (v231 ^ 0x1F) + 1920;
                        v138 = v230;
                      }
                    }
                  }
                }
                while ((v216 & 0x80000000) == 0);
              }
              ++v183;
              v138 = v202;
              a6 = v352;
            }
            while (v183 != v351);
          }
          else
          {
            v202 = v138;
          }
          if (v146 < v334 + 175)
            break;
          v126 = v336 + 1;
          if (v333 > 2)
          {
            v232 = v337;
            v122 = a7;
            goto LABEL_391;
          }
          v122 = a7;
          v121 = v333 + 1;
          v125 = v331 + 1;
          v124 = v330;
          v341 = v181;
          v37 = v146;
          v342 = v182;
          result = (_WORD *)v202;
          v27 = v128;
          v232 = v337;
          v123 = (unint64_t)v337;
          if ((unint64_t)v340 + 5 >= v324)
            goto LABEL_391;
        }
        v232 = v340;
        v181 = v341;
        v257 = (unint64_t)v340 + v325;
        if ((unint64_t)v340 + v325 >= v326)
          v257 = v326;
        v332 = v257;
        v182 = v342;
        v202 = (unint64_t)v323;
        v122 = a7;
        v126 = v336;
LABEL_391:
        result = v232;
        v280 = v319;
        v281 = v126;
        if (v181 > v332 + v316)
        {
LABEL_392:
          v282 = v181 + 15;
          goto LABEL_393;
        }
        v283 = *a8;
        if (v181 == v283)
        {
          v282 = 0;
          goto LABEL_398;
        }
        v293 = a8[1];
        if (v181 == v293)
        {
          v282 = 1;
        }
        else
        {
          v294 = v181 + 3 - v283;
          if (v294 > 6)
          {
            v297 = v181 + 3 - v293;
            if (v297 > 6)
            {
              if (v181 == a8[2])
              {
                v282 = 2;
              }
              else
              {
                if (v181 != a8[3])
                  goto LABEL_392;
                v282 = 3;
              }
              goto LABEL_393;
            }
            v295 = 4 * v297;
            v296 = 266017486;
          }
          else
          {
            v295 = 4 * v294;
            v296 = 158663784;
          }
          v282 = (v296 >> v295) & 0xF;
        }
LABEL_393:
        if (v181 <= v332 + v316 && v282)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v181;
        }
LABEL_398:
        *v319 = v126;
        v319[1] = v202 | (v182 << 25);
        v284 = a6[15];
        v285 = v284 + 16;
        if (v284 + 16 <= v282)
        {
          v287 = a6[14];
          v288 = v282 - v284 + (4 << v287) - 16;
          v289 = (__clz(v288) ^ 0x1F) - 1;
          v290 = ((v288 >> v289) & 1 | 2) << v289;
          v280 = v319;
          v282 = ((v288 & ~(-1 << v287))
                + v285
                + ((((v288 >> v289) & 1 | (2 * (v289 - v287))) + 65534) << v287)) | ((v289 - v287) << 10);
          v122 = a7;
          v286 = (v288 - v290) >> v287;
        }
        else
        {
          LODWORD(v286) = 0;
        }
        *((_WORD *)v280 + 7) = v282;
        v280[2] = v286;
        if (v281 > 5)
        {
          if (v281 > 0x81)
          {
            if (v281 > 0x841)
            {
              if (v281 >> 1 >= 0xC21)
              {
                if (v281 < 0x5842)
                  LOWORD(v291) = 22;
                else
                  LOWORD(v291) = 23;
              }
              else
              {
                LOWORD(v291) = 21;
              }
            }
            else
            {
              v291 = (__clz(v281 - 66) ^ 0x1F) + 10;
            }
          }
          else
          {
            v292 = __clz(v281 - 2);
            v291 = ((v281 - 2) >> ((v292 ^ 0x1F) - 1)) + 2 * ((v292 ^ 0x1F) - 1) + 2;
          }
        }
        else
        {
          LOWORD(v291) = v281;
        }
        v298 = v182 + (int)v202;
        if (v298 > 9)
        {
          if (v298 > 0x85)
          {
            if (v298 > 0x845)
              LOWORD(v299) = 23;
            else
              v299 = (__clz(v298 - 70) ^ 0x1F) + 12;
          }
          else
          {
            v300 = v298 - 6;
            v301 = (__clz(v300) ^ 0x1F) - 1;
            v299 = (v300 >> v301) + 2 * v301 + 4;
          }
        }
        else
        {
          LOWORD(v299) = v182 + v202 - 2;
        }
        v302 = v299 & 7 | (8 * (v291 & 7));
        if ((v282 & 0x3FF) != 0 || (unsigned __int16)v291 > 7u || (unsigned __int16)v299 > 0xFu)
        {
          v304 = 3 * ((unsigned __int16)v291 >> 3) + ((unsigned __int16)(v299 & 0xFFF8) >> 3);
          v303 = ((((0x520D40u >> (2 * v304)) & 0xC0) + (v304 << 6)) | v302) + 64;
        }
        else
        {
          LOWORD(v303) = v302 | 0x40;
          if ((v299 & 0xFFF8) == 0)
            LOWORD(v303) = v299 & 7 | (8 * (v291 & 7));
        }
        *((_WORD *)v280 + 6) = v303;
        *a12 += v281;
        v305 = (unint64_t)(result + 1);
        v248 = (unint64_t)result + v202;
        if ((unint64_t)result + v202 >= v318)
          v306 = (char *)v318;
        else
          v306 = (char *)result + v202;
        if (v181 < v202 >> 2)
        {
          v307 = (char *)(v248 - 4 * v181);
          if (v305 > (unint64_t)v307)
            v307 = (char *)(result + 1);
          if (v306 >= v307)
            v305 = (unint64_t)v307;
          else
            v305 = (unint64_t)v306;
        }
        v16 = (char *)&result[v202] + v317;
        v319 = v280 + 4;
        if (v305 >= (unint64_t)v306)
        {
          v17 = 0;
          v13 = v324;
          goto LABEL_450;
        }
        v308 = *(_QWORD *)(v122 + 96);
        v309 = *(_QWORD *)(v122 + 104);
        v310 = v308 + 0x20000;
        v253 = *(_WORD *)(v122 + 80);
        do
        {
          v311 = (506832829 * *(_DWORD *)((char *)a3 + (v305 & a4))) >> 17;
          v312 = v305 - *(unsigned int *)(v308 + 4 * v311);
          *(_BYTE *)(v308 + 196608 + (unsigned __int16)v305) = v311;
          if (v312 >= 0xFFFF)
            LOWORD(v312) = -1;
          result = (_WORD *)(v309 + 4 * v253);
          *result = v312;
          result[1] = *(_WORD *)(v310 + 2 * v311);
          *(_WORD *)(v310 + 2 * v311) = v253++;
          *(_DWORD *)(v308 + 4 * v311) = v305++;
        }
        while (v306 != (char *)v305);
        v17 = 0;
LABEL_448:
        v13 = v324;
        *(_WORD *)(a7 + 80) = v253;
        goto LABEL_450;
      }
      v17 = v335 + 1;
      v248 = v339 + 1;
      v16 = (char *)v349;
      if (v339 + 1 > v349)
      {
        if (v248 <= v349 + v315)
        {
          v273 = v314;
          if (v339 + 9 < v314)
            v273 = v339 + 9;
          if (v248 < v273)
          {
            v274 = *(_QWORD *)(a7 + 96);
            v275 = *(_QWORD *)(a7 + 104);
            v276 = v274 + 0x20000;
            v253 = *(_WORD *)(a7 + 80);
            result = a3;
            do
            {
              v277 = (506832829 * *(_DWORD *)((char *)a3 + (v248 & a4))) >> 17;
              v278 = v248 - *(unsigned int *)(v274 + 4 * v277);
              *(_BYTE *)(v274 + 196608 + (unsigned __int16)v248) = v277;
              if (v278 >= 0xFFFF)
                LOWORD(v278) = -1;
              v279 = (_WORD *)(v275 + 4 * v253);
              *v279 = v278;
              v279[1] = *(_WORD *)(v276 + 2 * v277);
              *(_WORD *)(v276 + 2 * v277) = v253++;
              *(_DWORD *)(v274 + 4 * v277) = v248;
              v17 += 2;
              v248 += 2;
            }
            while (v248 < v273);
            goto LABEL_448;
          }
        }
        else
        {
          v249 = v313;
          if (v339 + 17 < v313)
            v249 = v339 + 17;
          if (v248 < v249)
          {
            v250 = *(_QWORD *)(a7 + 96);
            v251 = *(_QWORD *)(a7 + 104);
            v252 = v250 + 0x20000;
            v253 = *(_WORD *)(a7 + 80);
            result = a3;
            do
            {
              v254 = (506832829 * *(_DWORD *)((char *)a3 + (v248 & a4))) >> 17;
              v255 = v248 - *(unsigned int *)(v250 + 4 * v254);
              *(_BYTE *)(v250 + 196608 + (unsigned __int16)v248) = v254;
              if (v255 >= 0xFFFF)
                LOWORD(v255) = -1;
              v256 = (_WORD *)(v251 + 4 * v253);
              *v256 = v255;
              v256[1] = *(_WORD *)(v252 + 2 * v254);
              *(_WORD *)(v252 + 2 * v254) = v253++;
              *(_DWORD *)(v250 + 4 * v254) = v248;
              v17 += 4;
              v248 += 4;
            }
            while (v248 < v249);
            goto LABEL_448;
          }
        }
      }
      v13 = v324;
LABEL_450:
      v12 = v248;
      if (v248 + 4 >= v13)
        goto LABEL_457;
    }
    if (v12)
    {
      v20 = *((unsigned __int8 *)a3 + ((v12 - 1) & a4));
      if (v12 != 1)
      {
        v21 = *((unsigned __int8 *)a3 + ((v12 - 2) & a4));
LABEL_22:
        v328 = v20;
        v22 = *((unsigned __int8 *)a6 + (*(_BYTE *)(v321 + v21) | *(_BYTE *)(a5 + v20)) + 629);
        goto LABEL_23;
      }
    }
    else
    {
      v20 = 0;
    }
    v21 = 0;
    goto LABEL_22;
  }
  v319 = a10;
  v248 = a2;
  v17 = *a9;
LABEL_457:
  *a9 = v17 + v13 - v248;
  *a11 += ((char *)v319 - (char *)a10) >> 4;
  return result;
}

uint64_t CreateBackwardReferencesDH41(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, int *a8, unint64_t *a9, _DWORD *a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  int32x4_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t i;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t j;
  unint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unint64_t v70;
  unsigned int v71;
  unsigned __int16 *v72;
  uint64_t v73;
  _WORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  int *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unint64_t v104;
  unint64_t v105;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  BOOL v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unsigned int v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  unsigned __int16 *v175;
  __int16 v176;
  __int16 *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  int v198;
  int v199;
  unint64_t v200;
  int *v201;
  char *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  unsigned __int8 *v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  unint64_t v213;
  unint64_t v214;
  int v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  BOOL v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unint64_t v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  char v239;
  unint64_t v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unsigned __int8 *v245;
  unsigned __int8 *v246;
  BOOL v247;
  unsigned int v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned __int16 v254;
  unsigned int v255;
  unint64_t v256;
  _WORD *v257;
  unint64_t v258;
  uint64_t v259;
  char v260;
  unint64_t v261;
  unint64_t v262;
  char v263;
  unint64_t v264;
  unsigned __int8 *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  BOOL v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unint64_t v278;
  _WORD *v279;
  _DWORD *v280;
  unint64_t v281;
  int32x4_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  unint64_t v294;
  char v295;
  unsigned int v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unint64_t v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  int v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _DWORD *v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  unsigned int v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  int v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned __int8 *v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;

  v12 = a2;
  v13 = a6[2];
  v14 = *a9;
  v15 = a2 + a1;
  v16 = a2 + a1 - 3;
  if (a1 <= 3)
    v17 = a2;
  else
    v17 = a2 + a1 - 3;
  v18 = *((_DWORD *)a6 + 2);
  v19 = 64;
  if (*((int *)a6 + 1) >= 9)
    v19 = 512;
  result = a6[12];
  v21 = (int32x4_t)vld1q_dup_f32((const float *)a8);
  *((int32x4_t *)a8 + 1) = vaddq_s32(v21, (int32x4_t)xmmword_19D02CCA0);
  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x3FFFFFFFDLL);
  if (a2 + 4 < v15)
  {
    v318 = v19;
    v319 = v17;
    v317 = result;
    v326 = v13;
    v327 = (1 << v18) - 16;
    v22 = v19 + a2;
    v322 = a5 + 256;
    v320 = a10;
    v321 = result + 1;
    v314 = v16;
    v315 = 4 * v19;
    v313 = v15 - 4;
    v316 = v13 + 1;
    v351 = a6;
    v352 = a3;
    v337 = a7;
    v325 = v15;
    while (1)
    {
      v23 = v12 >= v327 ? v327 : v12;
      v24 = v12 + v13 >= v327 ? v327 : v12 + v13;
      v335 = v14;
      v348 = v22;
      if (*((_DWORD *)a6 + 156))
        break;
      v27 = 0;
      v328 = 0;
LABEL_22:
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = v15 - v12;
      v329 = v27;
      v33 = a6[v27 + 87];
      v34 = a6[9];
      v36 = *(_QWORD *)(a7 + 96);
      v35 = *(_QWORD *)(a7 + 104);
      v37 = v36 + 196608;
      v38 = v12 & a4;
      v39 = (unsigned __int8 *)(v352 + (v12 & a4));
      result = (506832829 * *(_DWORD *)v39) >> 17;
      v40 = 2020;
      v41 = 2020;
      v338 = v12;
      do
      {
        v42 = a8[v28];
        v43 = v12 - v42;
        if ((!v28 || *(unsigned __int8 *)(v37 + (unsigned __int16)(v12 - v42)) == result)
          && v23 >= v42
          && v43 < v12)
        {
          v45 = v352 + (v43 & a4);
          if (v32 < 8)
          {
            v50 = (unsigned __int8 *)(v352 + (v43 & a4));
            v49 = v39;
            i = v32;
            if (v32)
            {
LABEL_36:
              v51 = &v50[i];
              while (*v50 == *v49)
              {
                ++v49;
                ++v50;
                if (!--i)
                {
                  v50 = v51;
                  break;
                }
              }
              v12 = v338;
            }
          }
          else
          {
            v46 = 0;
            for (i = v32; i > 7; i -= 8)
            {
              v48 = *(_QWORD *)(v45 + v46) ^ *(_QWORD *)&v39[v46];
              if (v48)
              {
                v52 = v46 + (__clz(__rbit64(v48)) >> 3);
                goto LABEL_43;
              }
              v46 += 8;
            }
            v49 = &v39[v46];
            v50 = (unsigned __int8 *)(v45 + v46);
            if (i)
              goto LABEL_36;
          }
          v52 = (unint64_t)&v50[-v45];
LABEL_43:
          v53 = 135 * v52 + 1935;
          if (v52 >= 2 && v40 < v53)
          {
            if (v28)
              v53 -= ((0x1CA10u >> (v28 & 0xE)) & 0xE) + 39;
            if (v40 < v53)
            {
              v31 = a8[v28];
              v41 = v53;
              v30 = v52;
              v40 = v53;
              v29 = v52;
            }
          }
        }
        ++v28;
      }
      while (v28 != 10);
      v55 = v36 + 0x20000;
      v56 = *(_QWORD *)(v337 + 88);
      v57 = v12 - *(unsigned int *)(v36 + 4 * result);
      if (v56)
      {
        v58 = 0;
        v59 = *(unsigned __int16 *)(v55 + 2 * result);
        v60 = v57;
        while (1)
        {
          v58 += v60;
          if (v58 > v23)
            goto LABEL_78;
          if (v29 + v38 <= a4)
          {
            v61 = (v338 - v58) & a4;
            if (v61 + v29 <= a4 && *(unsigned __int8 *)(v352 + v29 + v38) == *(unsigned __int8 *)(v352 + v61 + v29))
              break;
          }
LABEL_77:
          v72 = (unsigned __int16 *)(v35 + 4 * v59);
          v59 = v72[1];
          v60 = *v72;
          if (!--v56)
            goto LABEL_78;
        }
        v62 = v352 + v61;
        v63 = v31;
        v64 = v41;
        if (v32 < 8)
        {
          v69 = (unsigned __int8 *)(v352 + v61);
          v68 = v39;
          j = v32;
          if (!v32)
            goto LABEL_65;
LABEL_67:
          v345 = &v69[j];
          while (*v69 == *v68)
          {
            ++v68;
            ++v69;
            if (!--j)
            {
              v69 = v345;
              break;
            }
          }
          v41 = v64;
          v31 = v63;
        }
        else
        {
          v65 = 0;
          for (j = v32; j > 7; j -= 8)
          {
            v67 = *(_QWORD *)(v62 + v65) ^ *(_QWORD *)&v39[v65];
            if (v67)
            {
              v70 = v65 + (__clz(__rbit64(v67)) >> 3);
              v31 = v63;
              goto LABEL_74;
            }
            v65 += 8;
          }
          v68 = &v39[v65];
          v69 = (unsigned __int8 *)(v62 + v65);
          if (j)
            goto LABEL_67;
LABEL_65:
          v41 = v64;
          v31 = v63;
        }
        v70 = (unint64_t)&v69[-v62];
LABEL_74:
        if (v70 >= 4)
        {
          v71 = __clz(v58);
          if (v40 < 135 * v70 - 30 * (v71 ^ 0x1F) + 1920)
          {
            v31 = v58;
            v41 = 135 * v70 - 30 * (v71 ^ 0x1F) + 1920;
            v30 = v70;
            v40 = v41;
            v29 = v70;
          }
        }
        goto LABEL_77;
      }
LABEL_78:
      v73 = *(unsigned __int16 *)(v337 + 80);
      *(_WORD *)(v337 + 80) = v73 + 1;
      *(_BYTE *)(v37 + (unsigned __int16)v338) = result;
      if (v57 >= 0xFFFF)
        LOWORD(v57) = -1;
      v74 = (_WORD *)(v35 + 4 * v73);
      *v74 = v57;
      v74[1] = *(_WORD *)(v55 + 2 * result);
      *(_DWORD *)(v36 + 4 * result) = v338;
      *(_WORD *)(v55 + 2 * result) = v73;
      if (v41 == 2020)
      {
        v75 = *(_QWORD *)(v337 + 112);
        v77 = *(_QWORD *)(v75 + 40);
        v76 = *(_QWORD *)(v75 + 48);
        if (v76 >= v77 >> 7)
        {
          v341 = 0;
          v259 = ((506832829 * *(_DWORD *)v39) >> 17) & 0x7FFE;
          result = *(_QWORD *)(v33 + 32);
          v260 = 1;
          v261 = v30;
          v41 = 2020;
          v262 = v31;
          do
          {
            v263 = v260;
            *(_QWORD *)(v75 + 40) = ++v77;
            v264 = *(unsigned __int8 *)(result + v259);
            if (!*(_BYTE *)(result + v259) || v32 < v264)
              goto LABEL_376;
            v265 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v33 + 168)
                                     + *(unsigned int *)(*(_QWORD *)v33 + 4 * *(unsigned __int8 *)(result + v259) + 32)
                                     + *(unsigned __int16 *)(*(_QWORD *)(v33 + 24) + 2 * v259)
                                     * (unint64_t)*(unsigned __int8 *)(result + v259));
            if (v264 < 8)
            {
              v267 = *(unsigned __int8 *)(result + v259);
              v269 = v39;
            }
            else
            {
              v266 = 0;
              v267 = *(unsigned __int8 *)(result + v259);
              do
              {
                v268 = *(_QWORD *)&v39[v266] ^ *(_QWORD *)&v265[v266];
                if (v268)
                {
                  v30 = v266 + (__clz(__rbit64(v268)) >> 3);
                  goto LABEL_369;
                }
                v267 -= 8;
                v266 += 8;
              }
              while (v267 > 7);
              v269 = &v39[v266];
              if (!v267)
                goto LABEL_367;
              v265 += v266;
            }
            v270 = &v269[v267];
            while (*v269 == *v265)
            {
              ++v265;
              ++v269;
              if (!--v267)
              {
                v269 = v270;
                break;
              }
            }
LABEL_367:
            v30 = v269 - v39;
LABEL_369:
            v271 = v30 && v30 + *(unsigned int *)(v33 + 12) > v264;
            if (v271
              && (v31 = v321
                      + v24
                      + *(unsigned __int16 *)(*(_QWORD *)(v33 + 24) + 2 * v259)
                      + ((((*(_QWORD *)(v33 + 16) >> (6 * (v264 - v30))) & 0x3FLL)
                        + 4 * (v264 - v30)) << *(_BYTE *)(*(_QWORD *)v33 + v264)),
                  v31 <= v34)
              && (v272 = 135 * v30 - 30 * (__clz(v31) ^ 0x1F) + 1920, v272 >= v41))
            {
              v341 = v264 - v30;
              *(_QWORD *)(v75 + 48) = ++v76;
              v41 = v272;
            }
            else
            {
LABEL_376:
              v31 = v262;
              v30 = v261;
            }
            v260 = 0;
            ++v259;
            v261 = v30;
            v262 = v31;
          }
          while ((v263 & 1) != 0);
        }
        else
        {
          v341 = 0;
          v41 = 2020;
        }
      }
      else
      {
        v341 = 0;
      }
      a6 = v351;
      v78 = v351[9];
      v79 = v351[11];
      v340 = v31;
      if (v79)
      {
        v80 = 0;
        v81 = v351[12] + v24;
        do
        {
          v82 = &a6[v80];
          v83 = v82[13];
          v85 = *(_DWORD *)(v83 + 16);
          v84 = *(_DWORD *)(v83 + 20);
          v86 = v83 + 24 + 4 * (1 << v84);
          v87 = v86 + 2 * (1 << v85);
          result = v87 + 4 * *(unsigned int *)(v83 + 4);
          if (*(_DWORD *)v83 != -558043680)
            result = *(_QWORD *)result;
          v88 = 0;
          v89 = v81 - v82[45];
          v90 = *(unsigned int *)(v83 + 8);
          v91 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v39 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v83 + 12)))) >> -(char)v85;
          v92 = *(unsigned __int16 *)(v86 + 2 * v91);
          v93 = (int *)(v87
                      + 4
                      * (*(_DWORD *)(v83 + 24 + 4 * ((0xFFFFFFFF >> -(char)v84) & v91))
                                     + v92));
          v94 = v30;
          do
          {
            v95 = a8[v88];
            if (v89 - v90 < v95 && v89 >= v95)
            {
              if (v90 - (v89 - v95) >= v32)
                v97 = v32;
              else
                v97 = v90 - (v89 - v95);
              v98 = result + v89 - v95;
              if (v97 < 8)
              {
                v102 = (unsigned __int8 *)(result + v89 - v95);
                v101 = v39;
                if (v97)
                {
LABEL_104:
                  v103 = &v102[v97];
                  while (*v102 == *v101)
                  {
                    ++v101;
                    ++v102;
                    if (!--v97)
                    {
                      v102 = v103;
                      break;
                    }
                  }
                }
              }
              else
              {
                v99 = 0;
                do
                {
                  v100 = *(_QWORD *)(v98 + v99) ^ *(_QWORD *)&v39[v99];
                  if (v100)
                  {
                    v104 = v99 + (__clz(__rbit64(v100)) >> 3);
                    goto LABEL_110;
                  }
                  v97 -= 8;
                  v99 += 8;
                }
                while (v97 > 7);
                v101 = &v39[v99];
                v102 = (unsigned __int8 *)(v98 + v99);
                if (v97)
                  goto LABEL_104;
              }
              v104 = (unint64_t)&v102[-v98];
LABEL_110:
              v105 = 135 * v104 + 1935;
              if (v104 >= 2 && v41 < v105)
              {
                if (v88)
                  v105 -= ((0x1CA10u >> (v88 & 0xE)) & 0xE) + 39;
                if (v41 < v105)
                {
                  v341 = 0;
                  if (v104 > v30)
                    v30 = v104;
                  v340 = a8[v88];
                  v41 = v105;
                  v94 = v104;
                }
              }
            }
            ++v88;
          }
          while (v88 != 4);
          if (v92 != 0xFFFF)
          {
            do
            {
              v108 = *v93++;
              v107 = v108;
              v109 = v108 & 0x7FFFFFFF;
              v110 = v89 - v109;
              if (v90 - v109 >= v32)
                v111 = v32;
              else
                v111 = v90 - v109;
              v112 = v30 + v38;
              v114 = v110 > v78 || v112 > a4 || v30 >= v111;
              if (!v114 && *(unsigned __int8 *)(v352 + v112) == *(unsigned __int8 *)(result + v30 + v109))
              {
                v115 = (unsigned __int8 *)(result + v109);
                if (v111 < 8)
                {
                  v119 = v39;
                  v118 = v115;
                }
                else
                {
                  v116 = 0;
                  do
                  {
                    v117 = *(_QWORD *)&v115[v116] ^ *(_QWORD *)&v39[v116];
                    if (v117)
                    {
                      v121 = v116 + (__clz(__rbit64(v117)) >> 3);
                      goto LABEL_151;
                    }
                    v111 -= 8;
                    v116 += 8;
                  }
                  while (v111 > 7);
                  v118 = &v115[v116];
                  if (!v111)
                    goto LABEL_149;
                  v119 = &v39[v116];
                }
                v120 = &v118[v111];
                while (*v118 == *v119)
                {
                  ++v119;
                  ++v118;
                  if (!--v111)
                  {
                    v118 = v120;
                    break;
                  }
                }
LABEL_149:
                v121 = v118 - v115;
LABEL_151:
                if (v121 >= 4)
                {
                  v122 = __clz(v110);
                  if (v41 < 135 * v121 - 30 * (v122 ^ 0x1F) + 1920)
                  {
                    v341 = 0;
                    v340 = v110;
                    v41 = 135 * v121 - 30 * (v122 ^ 0x1F) + 1920;
                    v94 = v121;
                    v30 = v121;
                  }
                }
              }
            }
            while ((v107 & 0x80000000) == 0);
          }
          ++v80;
          v123 = v94;
          v30 = v94;
          a6 = v351;
        }
        while (v80 != v79);
      }
      else
      {
        v123 = v30;
      }
      if (v41 >= 0x7E5)
      {
        v124 = 0;
        a7 = v337;
        v125 = v338;
        v126 = *(unsigned __int16 *)(v337 + 80);
        v127 = v316 + v338;
        a3 = v352;
        v13 = v326;
        while (1)
        {
          if (v127 >= v327)
            v128 = v327;
          else
            v128 = v127;
          v129 = v32 - 1;
          v130 = v123 - 1;
          if (v123 - 1 >= v32 - 1)
            v130 = v32 - 1;
          if (*((int *)a6 + 1) >= 5)
            v131 = 0;
          else
            v131 = v130;
          v132 = v125 + 1;
          if (v125 + 1 < v327)
            v133 = v125 + 1;
          else
            v133 = v327;
          v134 = v132 + v13;
          if (v132 + v13 >= v327)
            v134 = v327;
          v331 = v127;
          v332 = v134;
          v339 = v125;
          v334 = v41;
          v324 = v123;
          v333 = v124;
          v342 = v128;
          v135 = v126;
          if (*((_DWORD *)a6 + 156))
          {
            v136 = *((unsigned __int8 *)a6
                   + (*(_BYTE *)(v322 + v328) | *(_BYTE *)(a5 + *(unsigned __int8 *)(a3 + (v125 & a4))))
                   + 629);
            v328 = *(unsigned __int8 *)(a3 + (v125 & a4));
          }
          else
          {
            v136 = v329;
          }
          v137 = 0;
          v349 = 0;
          v138 = 0;
          v329 = v136;
          v344 = a6[v136 + 87];
          v139 = *(_QWORD *)(a7 + 104);
          v140 = *(_QWORD *)(a7 + 96);
          v141 = v140 + 196608;
          v142 = v132 & a4;
          v143 = (_DWORD *)(a3 + (v132 & a4));
          v144 = (506832829 * *v143) >> 17;
          v145 = 2020;
          v146 = 2020;
          do
          {
            v147 = a8[v137];
            v148 = v132 - v147;
            if ((!v137 || *(unsigned __int8 *)(v141 + (unsigned __int16)(v132 - v147)) == v144)
              && v133 >= v147
              && v148 < v132)
            {
              v150 = (_QWORD *)(a3 + (v148 & a4));
              if (v129 < 8)
              {
                v153 = (_QWORD *)(a3 + (v148 & a4));
                v152 = v143;
                v155 = v32 - 1;
                if (v32 != 1)
                {
LABEL_189:
                  v156 = (_QWORD *)((char *)v153 + v155);
                  while (*(unsigned __int8 *)v153 == *(unsigned __int8 *)v152)
                  {
                    v152 = (_QWORD *)((char *)v152 + 1);
                    v153 = (_QWORD *)((char *)v153 + 1);
                    if (!--v155)
                    {
                      v153 = v156;
                      break;
                    }
                  }
                }
              }
              else
              {
                v151 = 0;
                v152 = v143;
                v153 = v150;
                do
                {
                  v154 = *v153 ^ *v152;
                  if (v154)
                  {
                    v157 = (__clz(__rbit64(v154)) >> 3) - v151;
                    a3 = v352;
                    goto LABEL_195;
                  }
                  ++v153;
                  ++v152;
                  v151 -= 8;
                  v155 = v32 + v151 - 1;
                }
                while (v155 > 7);
                if (v32 + v151 != 1)
                  goto LABEL_189;
              }
              a3 = v352;
              v157 = (char *)v153 - (char *)v150;
LABEL_195:
              v158 = 135 * v157 + 1935;
              if (v157 >= 2 && v145 < v158)
              {
                if (v137)
                  v158 -= ((0x1CA10u >> (v137 & 0xE)) & 0xE) + 39;
                if (v145 < v158)
                {
                  v138 = v157;
                  v349 = a8[v137];
                  v146 = v158;
                  v145 = v158;
                  v131 = v157;
                }
              }
            }
            ++v137;
          }
          while (v137 != 10);
          v160 = *(_QWORD *)(v337 + 88);
          v161 = v132 - *(unsigned int *)(v140 + 4 * v144);
          v336 = v132;
          v346 = v140 + 0x20000;
          if (v160)
          {
            v162 = 0;
            v163 = *(unsigned __int16 *)(v140 + 0x20000 + 2 * v144);
            v164 = v132 - *(unsigned int *)(v140 + 4 * v144);
            do
            {
              v162 += v164;
              if (v162 > v133)
                break;
              if (v131 + v142 <= a4)
              {
                v165 = (v132 - v162) & a4;
                if (v165 + v131 <= a4
                  && *(unsigned __int8 *)(v352 + v131 + v142) == *(unsigned __int8 *)(v352 + v165 + v131))
                {
                  v166 = v352 + v165;
                  if (v129 < 8)
                  {
                    v169 = (_QWORD *)(v352 + v165);
                    v168 = v143;
                    v171 = v32 - 1;
                    if (v32 != 1)
                    {
LABEL_219:
                      v172 = (_QWORD *)((char *)v169 + v171);
                      while (*(unsigned __int8 *)v169 == *(unsigned __int8 *)v168)
                      {
                        v168 = (_QWORD *)((char *)v168 + 1);
                        v169 = (_QWORD *)((char *)v169 + 1);
                        if (!--v171)
                        {
                          v169 = v172;
                          break;
                        }
                      }
                      v132 = v336;
                    }
                  }
                  else
                  {
                    v167 = 0;
                    v168 = v143;
                    v169 = (_QWORD *)(v352 + v165);
                    do
                    {
                      v170 = *v169 ^ *v168;
                      if (v170)
                      {
                        v173 = (__clz(__rbit64(v170)) >> 3) - v167;
                        goto LABEL_226;
                      }
                      ++v169;
                      ++v168;
                      v167 -= 8;
                      v171 = v32 + v167 - 1;
                    }
                    while (v171 > 7);
                    if (v32 + v167 != 1)
                      goto LABEL_219;
                  }
                  v173 = (unint64_t)v169 - v166;
LABEL_226:
                  if (v173 >= 4)
                  {
                    v174 = 135 * v173 - 30 * (__clz(v162) ^ 0x1F) + 1920;
                    if (v145 < v174)
                    {
                      v138 = v173;
                      v349 = v162;
                      v146 = v174;
                      v145 = v174;
                      v131 = v173;
                    }
                  }
                }
              }
              v175 = (unsigned __int16 *)(v139 + 4 * v163);
              v163 = v175[1];
              v164 = *v175;
              --v160;
            }
            while (v160);
          }
          v330 = v135 + 1;
          *(_WORD *)(v337 + 80) = v135 + 1;
          *(_BYTE *)(v141 + (unsigned __int16)v132) = v144;
          v176 = -1;
          if (v161 < 0xFFFF)
            v176 = v161;
          v177 = (__int16 *)(v139 + 4 * (unsigned __int16)v135);
          *v177 = v176;
          v177[1] = *(_WORD *)(v346 + 2 * v144);
          *(_DWORD *)(v140 + 4 * v144) = v132;
          *(_WORD *)(v346 + 2 * v144) = v135;
          if (v146 == 2020)
          {
            v178 = *(_QWORD *)(v337 + 112);
            v180 = *(_QWORD *)(v178 + 40);
            v179 = *(_QWORD *)(v178 + 48);
            v181 = v349;
            v182 = 0;
            if (v179 >= v180 >> 7)
            {
              v234 = ((506832829 * *v143) >> 17) & 0x7FFE;
              v235 = *(_QWORD *)(v344 + 32);
              v236 = 1;
              v146 = 2020;
              v237 = v349;
              v238 = v138;
              do
              {
                v239 = v236;
                *(_QWORD *)(v178 + 40) = ++v180;
                v240 = *(unsigned __int8 *)(v235 + v234);
                if (!*(_BYTE *)(v235 + v234) || v129 < v240)
                  goto LABEL_336;
                v241 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v344 + 168)
                                         + *(unsigned int *)(*(_QWORD *)v344
                                                           + 4 * *(unsigned __int8 *)(v235 + v234)
                                                           + 32)
                                         + *(unsigned __int16 *)(*(_QWORD *)(v344 + 24) + 2 * v234)
                                         * (unint64_t)*(unsigned __int8 *)(v235 + v234));
                if (v240 < 8)
                {
                  v243 = *(unsigned __int8 *)(v235 + v234);
                  v245 = (unsigned __int8 *)v143;
                }
                else
                {
                  v242 = 0;
                  v243 = *(unsigned __int8 *)(v235 + v234);
                  do
                  {
                    v244 = *(_QWORD *)&v143[v242] ^ *(_QWORD *)&v241[v242 * 4];
                    if (v244)
                    {
                      v138 = v242 * 4 + (__clz(__rbit64(v244)) >> 3);
                      goto LABEL_329;
                    }
                    v243 -= 8;
                    v242 += 2;
                  }
                  while (v243 > 7);
                  v245 = (unsigned __int8 *)&v143[v242];
                  if (!v243)
                    goto LABEL_327;
                  v241 += v242 * 4;
                }
                v246 = &v245[v243];
                while (*v245 == *v241)
                {
                  ++v241;
                  ++v245;
                  if (!--v243)
                  {
                    v245 = v246;
                    break;
                  }
                }
LABEL_327:
                v138 = v245 - (unsigned __int8 *)v143;
LABEL_329:
                v247 = v138 && v138 + *(unsigned int *)(v344 + 12) > v240;
                if (v247
                  && (v181 = v321
                           + v332
                           + *(unsigned __int16 *)(*(_QWORD *)(v344 + 24) + 2 * v234)
                           + ((((*(_QWORD *)(v344 + 16) >> (6 * (v240 - v138))) & 0x3FLL)
                             + 4 * (v240 - v138)) << *(_BYTE *)(*(_QWORD *)v344 + v240)),
                      v181 <= v78)
                  && (v248 = __clz(v181) ^ 0x1F, 135 * v138 - 30 * v248 + 1920 >= v146))
                {
                  v182 = v240 - v138;
                  *(_QWORD *)(v178 + 48) = ++v179;
                  v146 = 135 * v138 - 30 * v248 + 1920;
                }
                else
                {
LABEL_336:
                  v138 = v238;
                  v181 = v237;
                }
                v236 = 0;
                ++v234;
                v237 = v181;
                v238 = v138;
              }
              while ((v239 & 1) != 0);
            }
            else
            {
              v146 = 2020;
            }
          }
          else
          {
            v182 = 0;
            v181 = v349;
          }
          a6 = v351;
          v78 = v351[9];
          v350 = v351[11];
          if (v350)
          {
            v183 = 0;
            v184 = v351[12];
            v347 = v184 + v332;
            v343 = v184 + v342;
            do
            {
              v185 = &a6[v183];
              v186 = v185[13];
              v187 = *(_DWORD *)(v186 + 16);
              v188 = *(_DWORD *)(v186 + 20);
              v189 = v186 + 24 + 4 * (1 << v188);
              v190 = v189 + 2 * (1 << v187);
              v191 = (_QWORD *)(v190 + 4 * *(unsigned int *)(v186 + 4));
              if (*(_DWORD *)v186 != -558043680)
                v191 = (_QWORD *)*v191;
              v192 = 0;
              v193 = v185[45];
              v194 = v347 - v193;
              v195 = *(unsigned int *)(v186 + 8);
              v196 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v143 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v186 + 12)))) >> -(char)v187;
              v197 = (0xFFFFFFFF >> -(char)v188) & v196;
              v198 = *(unsigned __int16 *)(v189 + 2 * v196);
              v199 = *(_DWORD *)(v186 + 24 + 4 * v197);
              v200 = v347 - v193 - v195;
              v201 = (int *)(v190 + 4 * (v199 + v198));
              v202 = (char *)v191 + v343 - v193;
              v203 = v138;
              do
              {
                v204 = a8[v192];
                if (v200 < v204 && v194 >= v204)
                {
                  if (v195 - (v194 - v204) >= v129)
                    v206 = v129;
                  else
                    v206 = v195 - (v194 - v204);
                  if (v206 < 8)
                  {
                    v211 = (unsigned __int8 *)v191 + v194 - v204;
                    v210 = (unsigned __int8 *)v143;
                    if (v206)
                    {
LABEL_256:
                      v212 = &v211[v206];
                      while (*v211 == *v210)
                      {
                        ++v210;
                        ++v211;
                        if (!--v206)
                        {
                          v211 = v212;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v207 = 0;
                    v208 = &v202[-v204];
                    do
                    {
                      v209 = *(_QWORD *)&v208[v207 * 4] ^ *(_QWORD *)&v143[v207];
                      if (v209)
                      {
                        v213 = v207 * 4 + (__clz(__rbit64(v209)) >> 3);
                        goto LABEL_262;
                      }
                      v206 -= 8;
                      v207 += 2;
                    }
                    while (v206 > 7);
                    v210 = (unsigned __int8 *)&v143[v207];
                    v211 = (unsigned __int8 *)&v208[v207 * 4];
                    if (v206)
                      goto LABEL_256;
                  }
                  v213 = v211 - ((unsigned __int8 *)v191 + v194 - v204);
LABEL_262:
                  v214 = 135 * v213 + 1935;
                  if (v213 >= 2 && v146 < v214)
                  {
                    if (v192)
                      v214 -= ((0x1CA10u >> (v192 & 0xE)) & 0xE) + 39;
                    if (v146 < v214)
                    {
                      v182 = 0;
                      if (v213 > v138)
                        v138 = v213;
                      v203 = v213;
                      v181 = a8[v192];
                      v146 = v214;
                    }
                  }
                }
                ++v192;
              }
              while (v192 != 4);
              a3 = v352;
              if (v198 != 0xFFFF)
              {
                do
                {
                  v217 = *v201++;
                  v216 = v217;
                  v218 = v217 & 0x7FFFFFFF;
                  v219 = v194 - v218;
                  if (v195 - v218 >= v129)
                    v220 = v129;
                  else
                    v220 = v195 - v218;
                  v221 = v138 + v142;
                  v223 = v219 > v78 || v221 > a4 || v138 >= v220;
                  if (!v223 && *(unsigned __int8 *)(a3 + v221) == *((unsigned __int8 *)v191 + v138 + v218))
                  {
                    v224 = (unsigned __int8 *)v191 + v218;
                    if (v220 < 8)
                    {
                      v228 = (unsigned __int8 *)v143;
                      v227 = v224;
                    }
                    else
                    {
                      v225 = 0;
                      do
                      {
                        v226 = *(_QWORD *)&v224[v225 * 4] ^ *(_QWORD *)&v143[v225];
                        if (v226)
                        {
                          v230 = v225 * 4 + (__clz(__rbit64(v226)) >> 3);
                          goto LABEL_303;
                        }
                        v220 -= 8;
                        v225 += 2;
                      }
                      while (v220 > 7);
                      v227 = &v224[v225 * 4];
                      if (!v220)
                        goto LABEL_301;
                      v228 = (unsigned __int8 *)&v143[v225];
                    }
                    v229 = &v227[v220];
                    while (*v227 == *v228)
                    {
                      ++v228;
                      ++v227;
                      if (!--v220)
                      {
                        v227 = v229;
                        break;
                      }
                    }
LABEL_301:
                    v230 = v227 - v224;
                    a3 = v352;
LABEL_303:
                    if (v230 >= 4)
                    {
                      v231 = __clz(v219);
                      if (v146 < 135 * v230 - 30 * (v231 ^ 0x1F) + 1920)
                      {
                        v182 = 0;
                        v203 = v230;
                        v181 = v219;
                        v146 = 135 * v230 - 30 * (v231 ^ 0x1F) + 1920;
                        v138 = v230;
                      }
                    }
                  }
                }
                while ((v216 & 0x80000000) == 0);
              }
              ++v183;
              v138 = v203;
              a6 = v351;
            }
            while (v183 != v350);
          }
          else
          {
            v203 = v138;
            a3 = v352;
          }
          if (v146 < v334 + 175)
            break;
          ++v335;
          if (v333 > 2)
          {
            v233 = v336;
            a7 = v337;
            v13 = v326;
            v232 = v181;
            goto LABEL_390;
          }
          a7 = v337;
          v124 = v333 + 1;
          v127 = v331 + 1;
          v126 = v330;
          v232 = v181;
          v340 = v181;
          v41 = v146;
          v341 = v182;
          v123 = v203;
          v32 = v129;
          v233 = v336;
          v125 = v336;
          v13 = v326;
          if (v339 + 5 >= v325)
            goto LABEL_390;
        }
        v13 = v326;
        v232 = v340;
        v258 = v339 + v326;
        if (v339 + v326 >= v327)
          v258 = v327;
        v332 = v258;
        v182 = v341;
        v203 = v324;
        v233 = v339;
        a7 = v337;
LABEL_390:
        v280 = v320;
        result = v335;
        if (v232 > v332 + v317)
        {
LABEL_391:
          v281 = v232 + 15;
          goto LABEL_392;
        }
        v283 = *a8;
        if (v232 == v283)
        {
          v281 = 0;
          goto LABEL_397;
        }
        v293 = a8[1];
        if (v232 == v293)
        {
          v281 = 1;
        }
        else
        {
          v294 = v232 + 3 - v283;
          if (v294 > 6)
          {
            v297 = v232 + 3 - v293;
            if (v297 > 6)
            {
              if (v232 == a8[2])
              {
                v281 = 2;
              }
              else
              {
                if (v232 != a8[3])
                  goto LABEL_391;
                v281 = 3;
              }
              goto LABEL_392;
            }
            v295 = 4 * v297;
            v296 = 266017486;
          }
          else
          {
            v295 = 4 * v294;
            v296 = 158663784;
          }
          v281 = (v296 >> v295) & 0xF;
        }
LABEL_392:
        if (v232 <= v332 + v317 && v281)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v232;
          v282 = vdupq_n_s32(v232);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v282, (int32x4_t)xmmword_19D02CCA0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v282.i8, (int32x2_t)0x3FFFFFFFDLL);
        }
LABEL_397:
        *v320 = v335;
        v320[1] = v203 | (v182 << 25);
        v284 = *((unsigned int *)a6 + 15);
        v285 = v284 + 16;
        if (v284 + 16 <= v281)
        {
          v287 = *((unsigned int *)a6 + 14);
          v288 = v281 - v284 + (4 << v287) - 16;
          v289 = (__clz(v288) ^ 0x1F) - 1;
          v290 = ((v288 >> v289) & 1 | 2) << v289;
          a7 = v337;
          v281 = ((v288 & ~(-1 << v287))
                + v285
                + ((((v288 >> v289) & 1 | (2 * (v289 - v287))) + 65534) << v287)) | ((v289 - v287) << 10);
          v280 = v320;
          v286 = (v288 - v290) >> v287;
        }
        else
        {
          LODWORD(v286) = 0;
        }
        *((_WORD *)v280 + 7) = v281;
        v280[2] = v286;
        if (v335 > 5)
        {
          if (v335 > 0x81)
          {
            if (v335 > 0x841)
            {
              if (v335 >> 1 >= 0xC21)
              {
                if (v335 < 0x5842)
                  LOWORD(v291) = 22;
                else
                  LOWORD(v291) = 23;
              }
              else
              {
                LOWORD(v291) = 21;
              }
            }
            else
            {
              v291 = (__clz(v335 - 66) ^ 0x1F) + 10;
            }
          }
          else
          {
            v292 = (__clz(v335 - 2) ^ 0x1F) - 1;
            v291 = ((v335 - 2) >> v292) + 2 * v292 + 2;
          }
        }
        else
        {
          LOWORD(v291) = v335;
        }
        v298 = v182 + (int)v203;
        if (v298 > 9)
        {
          if (v298 > 0x85)
          {
            if (v298 > 0x845)
              LOWORD(v299) = 23;
            else
              v299 = (__clz(v298 - 70) ^ 0x1F) + 12;
          }
          else
          {
            v300 = v298 - 6;
            v301 = (__clz(v300) ^ 0x1F) - 1;
            v299 = (v300 >> v301) + 2 * v301 + 4;
          }
        }
        else
        {
          LOWORD(v299) = v182 + v203 - 2;
        }
        v302 = v299 & 7 | (8 * (v291 & 7));
        if ((v281 & 0x3FF) != 0 || (unsigned __int16)v291 > 7u || (unsigned __int16)v299 > 0xFu)
        {
          v304 = 3 * ((unsigned __int16)v291 >> 3) + ((unsigned __int16)(v299 & 0xFFF8) >> 3);
          v303 = ((((0x520D40u >> (2 * v304)) & 0xC0) + (v304 << 6)) | v302) + 64;
        }
        else
        {
          LOWORD(v303) = v302 | 0x40;
          if ((v299 & 0xFFF8) == 0)
            LOWORD(v303) = v299 & 7 | (8 * (v291 & 7));
        }
        *((_WORD *)v280 + 6) = v303;
        *a12 += v335;
        v305 = v233 + 2;
        v249 = v233 + v203;
        if (v233 + v203 >= v319)
          v306 = v319;
        else
          v306 = v233 + v203;
        if (v232 < v203 >> 2)
        {
          v307 = v249 - 4 * v232;
          if (v305 > v307)
            v307 = v233 + 2;
          if (v306 >= v307)
            v305 = v307;
          else
            v305 = v306;
        }
        v22 = v318 + 2 * v203 + v233;
        v320 = v280 + 4;
        if (v305 >= v306)
        {
          v14 = 0;
          v15 = v325;
          goto LABEL_449;
        }
        v308 = *(_QWORD *)(a7 + 96);
        v309 = *(_QWORD *)(a7 + 104);
        v310 = v308 + 0x20000;
        v254 = *(_WORD *)(a7 + 80);
        do
        {
          v311 = (506832829 * *(_DWORD *)(a3 + (v305 & a4))) >> 17;
          v312 = v305 - *(unsigned int *)(v308 + 4 * v311);
          *(_BYTE *)(v308 + 196608 + (unsigned __int16)v305) = v311;
          if (v312 >= 0xFFFF)
            LOWORD(v312) = -1;
          result = v309 + 4 * v254;
          *(_WORD *)result = v312;
          *(_WORD *)(result + 2) = *(_WORD *)(v310 + 2 * v311);
          *(_WORD *)(v310 + 2 * v311) = v254++;
          *(_DWORD *)(v308 + 4 * v311) = v305++;
        }
        while (v306 != v305);
        v14 = 0;
LABEL_447:
        a7 = v337;
        v15 = v325;
        v13 = v326;
        *(_WORD *)(v337 + 80) = v254;
        goto LABEL_449;
      }
      v14 = v335 + 1;
      v249 = v338 + 1;
      v22 = v348;
      if (v338 + 1 > v348)
      {
        if (v249 <= v348 + v315)
        {
          v273 = v314;
          if (v338 + 9 < v314)
            v273 = v338 + 9;
          if (v249 < v273)
          {
            v274 = *(_QWORD *)(v337 + 96);
            v275 = *(_QWORD *)(v337 + 104);
            v276 = v274 + 0x20000;
            v254 = *(_WORD *)(v337 + 80);
            a3 = v352;
            result = 506832829;
            do
            {
              v277 = (506832829 * *(_DWORD *)(v352 + (v249 & a4))) >> 17;
              v278 = v249 - *(unsigned int *)(v274 + 4 * v277);
              *(_BYTE *)(v274 + 196608 + (unsigned __int16)v249) = v277;
              if (v278 >= 0xFFFF)
                LOWORD(v278) = -1;
              v279 = (_WORD *)(v275 + 4 * v254);
              *v279 = v278;
              v279[1] = *(_WORD *)(v276 + 2 * v277);
              *(_WORD *)(v276 + 2 * v277) = v254++;
              *(_DWORD *)(v274 + 4 * v277) = v249;
              v14 += 2;
              v249 += 2;
            }
            while (v249 < v273);
            goto LABEL_447;
          }
        }
        else
        {
          v250 = v313;
          if (v338 + 17 < v313)
            v250 = v338 + 17;
          if (v249 < v250)
          {
            v251 = *(_QWORD *)(v337 + 96);
            v252 = *(_QWORD *)(v337 + 104);
            v253 = v251 + 0x20000;
            v254 = *(_WORD *)(v337 + 80);
            a3 = v352;
            result = 506832829;
            do
            {
              v255 = (506832829 * *(_DWORD *)(v352 + (v249 & a4))) >> 17;
              v256 = v249 - *(unsigned int *)(v251 + 4 * v255);
              *(_BYTE *)(v251 + 196608 + (unsigned __int16)v249) = v255;
              if (v256 >= 0xFFFF)
                LOWORD(v256) = -1;
              v257 = (_WORD *)(v252 + 4 * v254);
              *v257 = v256;
              v257[1] = *(_WORD *)(v253 + 2 * v255);
              *(_WORD *)(v253 + 2 * v255) = v254++;
              *(_DWORD *)(v251 + 4 * v255) = v249;
              v14 += 4;
              v249 += 4;
            }
            while (v249 < v250);
            goto LABEL_447;
          }
        }
      }
      a7 = v337;
      a3 = v352;
      v15 = v325;
      v13 = v326;
LABEL_449:
      v12 = v249;
      if (v249 + 4 >= v15)
        goto LABEL_456;
    }
    if (v12)
    {
      v25 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
      if (v12 != 1)
      {
        v26 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_21:
        v328 = v25;
        v27 = *((unsigned __int8 *)a6 + (*(_BYTE *)(v322 + v26) | *(_BYTE *)(a5 + v25)) + 629);
        goto LABEL_22;
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = 0;
    goto LABEL_21;
  }
  v320 = a10;
  v249 = a2;
LABEL_456:
  *a9 = v14 + v15 - v249;
  *a11 += ((char *)v320 - (char *)a10) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesDH42(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8, double a9, double a10, int32x4_t a11, unint64_t *a12, _DWORD *a13, _QWORD *a14, _QWORD *a15)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t result;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t i;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t j;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unint64_t v75;
  unsigned int v76;
  unsigned __int16 *v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  __int16 *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  int *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v124;
  unsigned __int8 *v125;
  uint64_t v126;
  unint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _DWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  unsigned int v181;
  unsigned __int16 *v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  __int16 *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  unint64_t v207;
  unsigned int *v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v213;
  uint64_t v214;
  char *v215;
  unint64_t v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  BOOL v229;
  unsigned __int8 *v230;
  uint64_t v231;
  unint64_t v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  __int16 v262;
  uint64_t v263;
  unint64_t v264;
  _WORD *v265;
  __int16 v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  unint64_t v271;
  unint64_t v272;
  char v273;
  unint64_t v274;
  unsigned __int8 *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  BOOL v282;
  unint64_t v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  __int16 v290;
  uint64_t v291;
  unint64_t v292;
  _WORD *v293;
  __int16 v294;
  _DWORD *v295;
  unint64_t v296;
  _QWORD *v297;
  int32x4_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  unint64_t v311;
  char v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int v316;
  unint64_t v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  int v321;
  unint64_t v322;
  unint64_t v323;
  _DWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  __int16 v329;
  uint64_t v330;
  unint64_t v331;
  _WORD *v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  _DWORD *v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unsigned int v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  int v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;

  v15 = *(_QWORD *)(a6 + 16);
  v354 = *a12;
  v16 = a2 + a1;
  v17 = a2 + a1 - 3;
  if (a1 <= 3)
    v18 = a2;
  else
    v18 = a2 + a1 - 3;
  v19 = *(_DWORD *)(a6 + 8);
  v20 = 64;
  if (*(int *)(a6 + 4) >= 9)
    v20 = 512;
  result = *(_QWORD *)(a6 + 96);
  a11.i64[0] = *(_QWORD *)a8;
  v22 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)a8, 0), (int32x4_t)xmmword_19D02CCA0);
  *((int32x4_t *)a8 + 1) = v22;
  *((int32x4_t *)a8 + 2) = vaddq_s32(vzip1q_s32(a11, a11), (int32x4_t)xmmword_19D02CCB0);
  v23 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)a11.i8, 1), (int32x4_t)xmmword_19D02CCC0);
  *((int32x4_t *)a8 + 3) = v23;
  if (a2 + 4 < v16)
  {
    v24 = a3;
    v338 = v20;
    v339 = v18;
    v347 = v15;
    v348 = a7 + 10;
    v337 = result;
    v346 = (1 << v19) - 16;
    v25 = v20 + a2;
    v342 = a5 + 256;
    v341 = result + 1;
    v334 = v17;
    v335 = 4 * v20;
    v333 = v16 - 4;
    v336 = v15 + 1;
    v26 = a13;
    v375 = a6;
    v27 = v16;
    v28 = a2;
    v345 = v27;
    while (1)
    {
      if (v28 >= v346)
        v29 = v346;
      else
        v29 = v28;
      v30 = v28 + v347;
      if (v28 + v347 >= v346)
        v30 = v346;
      v367 = v25;
      v369 = v30;
      v340 = v26;
      if (*(_DWORD *)(a6 + 624))
        break;
      v33 = 0;
      v349 = 0;
LABEL_21:
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v362 = 0;
      v37 = v27 - v28;
      v350 = v33;
      v38 = *(_QWORD *)(a6 + 8 * v33 + 696);
      v372 = *(_QWORD *)(a6 + 72);
      v39 = a7[139];
      v40 = v39 + 196608;
      v41 = a7[140];
      v42 = v28 & a4;
      result = v24 + (v28 & a4);
      v43 = (506832829 * *(_DWORD *)result) >> 17;
      v44 = 2020;
      v45 = 2020;
      do
      {
        v46 = a8[v34];
        v47 = v28 - v46;
        if ((!v34 || *(unsigned __int8 *)(v40 + (unsigned __int16)(v28 - v46)) == v43)
          && v29 >= v46
          && v47 < v28)
        {
          v49 = v24 + (v47 & a4);
          if (v37 < 8)
          {
            v54 = (unsigned __int8 *)(v24 + (v47 & a4));
            v53 = (unsigned __int8 *)(v24 + (v28 & a4));
            i = v37;
            if (v37)
            {
LABEL_35:
              v55 = &v54[i];
              while (*v54 == *v53)
              {
                ++v53;
                ++v54;
                if (!--i)
                {
                  v54 = v55;
                  break;
                }
              }
            }
          }
          else
          {
            v50 = 0;
            for (i = v37; i > 7; i -= 8)
            {
              v52 = *(_QWORD *)(v49 + v50) ^ *(_QWORD *)(result + v50);
              if (v52)
              {
                v56 = v50 + (__clz(__rbit64(v52)) >> 3);
                goto LABEL_41;
              }
              v50 += 8;
            }
            v53 = (unsigned __int8 *)(result + v50);
            v54 = (unsigned __int8 *)(v49 + v50);
            if (i)
              goto LABEL_35;
          }
          v56 = (unint64_t)&v54[-v49];
LABEL_41:
          v57 = 135 * v56 + 1935;
          if (v56 >= 2 && v44 < v57)
          {
            if (v34)
              v57 -= ((0x1CA10u >> (v34 & 0xE)) & 0xE) + 39;
            if (v44 < v57)
            {
              v362 = a8[v34];
              v45 = v57;
              v36 = v56;
              v44 = v57;
              v35 = v56;
            }
          }
        }
        ++v34;
      }
      while (v34 != 16);
      v59 = v39 + 0x20000;
      v60 = ((unsigned __int16)((506832829 * *(_DWORD *)result) >> 16) >> 1) & 0x1FF;
      v61 = a7[138];
      v62 = *(unsigned int *)(v39 + 4 * v43);
      v63 = v28 - v62;
      v356 = v28;
      v358 = v45;
      if (v61)
      {
        v64 = 0;
        v65 = *(unsigned __int16 *)(v59 + 2 * v43);
        v66 = v28 - v62;
        while (1)
        {
          v64 += v66;
          if (v64 > v29)
            goto LABEL_76;
          if (v35 + v42 <= a4)
          {
            v67 = (v28 - v64) & a4;
            if (v67 + v35 <= a4 && *(unsigned __int8 *)(a3 + v35 + v42) == *(unsigned __int8 *)(a3 + v67 + v35))
              break;
          }
LABEL_75:
          v77 = (unsigned __int16 *)(v41 + (v60 << 11) + 4 * v65);
          v65 = v77[1];
          v66 = *v77;
          if (!--v61)
            goto LABEL_76;
        }
        v68 = a3 + v67;
        if (v37 < 8)
        {
          v73 = (unsigned __int8 *)(a3 + v67);
          v72 = (unsigned __int8 *)result;
          j = v37;
          if (!v37)
            goto LABEL_63;
LABEL_65:
          v74 = &v73[j];
          while (*v73 == *v72)
          {
            ++v72;
            ++v73;
            if (!--j)
            {
              v73 = v74;
              break;
            }
          }
          a6 = v375;
          v28 = v356;
        }
        else
        {
          v69 = 0;
          for (j = v37; j > 7; j -= 8)
          {
            v71 = *(_QWORD *)(v68 + v69) ^ *(_QWORD *)(result + v69);
            if (v71)
            {
              v75 = v69 + (__clz(__rbit64(v71)) >> 3);
              a6 = v375;
              goto LABEL_72;
            }
            v69 += 8;
          }
          v72 = (unsigned __int8 *)(result + v69);
          v73 = (unsigned __int8 *)(v68 + v69);
          if (j)
            goto LABEL_65;
LABEL_63:
          a6 = v375;
        }
        v75 = (unint64_t)&v73[-v68];
LABEL_72:
        if (v75 >= 4)
        {
          v76 = __clz(v64);
          v28 = v356;
          if (v44 < 135 * v75 - 30 * (v76 ^ 0x1F) + 1920)
          {
            v362 = v64;
            v358 = 135 * v75 - 30 * (v76 ^ 0x1F) + 1920;
            v36 = v75;
            v44 = v358;
            v35 = v75;
          }
        }
        goto LABEL_75;
      }
LABEL_76:
      v78 = *((_WORD *)v348 + v60);
      *((_WORD *)v348 + v60) = v78 + 1;
      v79 = v78 & 0x1FF;
      *(_BYTE *)(v40 + (unsigned __int16)v28) = v43;
      v80 = -1;
      if (v63 < 0xFFFF)
        v80 = v63;
      v81 = (__int16 *)(v41 + (v60 << 11) + 4 * v79);
      *v81 = v80;
      v81[1] = *(_WORD *)(v59 + 2 * v43);
      *(_DWORD *)(v39 + 4 * v43) = v28;
      *(_WORD *)(v59 + 2 * v43) = v79;
      if (v358 != 2020)
      {
        v361 = 0;
        goto LABEL_82;
      }
      v82 = a7[141];
      v84 = *(_QWORD *)(v82 + 40);
      v83 = *(_QWORD *)(v82 + 48);
      if (v83 < v84 >> 7)
      {
        v361 = 0;
        v358 = 2020;
LABEL_82:
        v24 = a3;
        v85 = v362;
        goto LABEL_83;
      }
      v361 = 0;
      v268 = ((506832829 * *(_DWORD *)result) >> 17) & 0x7FFE;
      v269 = *(_QWORD *)(v38 + 32);
      v270 = 1;
      v271 = v36;
      v358 = 2020;
      v272 = v362;
      v24 = a3;
      do
      {
        v273 = v270;
        *(_QWORD *)(v82 + 40) = ++v84;
        v274 = *(unsigned __int8 *)(v269 + v268);
        if (!*(_BYTE *)(v269 + v268) || v37 < v274)
          goto LABEL_376;
        v275 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v38 + 168)
                                 + *(unsigned int *)(*(_QWORD *)v38 + 4 * *(unsigned __int8 *)(v269 + v268) + 32)
                                 + *(unsigned __int16 *)(*(_QWORD *)(v38 + 24) + 2 * v268)
                                 * (unint64_t)*(unsigned __int8 *)(v269 + v268));
        if (v274 < 8)
        {
          v277 = *(unsigned __int8 *)(v269 + v268);
          v280 = (unsigned __int8 *)result;
        }
        else
        {
          v276 = 0;
          v277 = *(unsigned __int8 *)(v269 + v268);
          do
          {
            v278 = *(_QWORD *)&v275[v276];
            v279 = *(_QWORD *)(result + v276);
            if (v279 != v278)
            {
              v36 = v276 + (__clz(__rbit64(v279 ^ v278)) >> 3);
              goto LABEL_369;
            }
            v277 -= 8;
            v276 += 8;
          }
          while (v277 > 7);
          v280 = (unsigned __int8 *)(result + v276);
          if (!v277)
            goto LABEL_367;
          v275 += v276;
        }
        v281 = &v280[v277];
        while (*v280 == *v275)
        {
          ++v275;
          ++v280;
          if (!--v277)
          {
            v280 = v281;
            break;
          }
        }
LABEL_367:
        v36 = (unint64_t)&v280[-result];
LABEL_369:
        v282 = v36 && v36 + *(unsigned int *)(v38 + 12) > v274;
        if (v282
          && (v283 = v341
                   + v369
                   + *(unsigned __int16 *)(*(_QWORD *)(v38 + 24) + 2 * v268)
                   + ((((*(_QWORD *)(v38 + 16) >> (6 * (v274 - v36))) & 0x3FLL)
                     + 4 * (v274 - v36)) << *(_BYTE *)(*(_QWORD *)v38 + v274)),
              v283 <= v372)
          && (v284 = __clz(v283), 135 * v36 - 30 * (v284 ^ 0x1F) + 1920 >= v358))
        {
          v361 = v274 - v36;
          *(_QWORD *)(v82 + 48) = ++v83;
          v358 = 135 * v36 - 30 * (v284 ^ 0x1F) + 1920;
          v85 = v283;
        }
        else
        {
LABEL_376:
          v85 = v272;
          v36 = v271;
        }
        v270 = 0;
        ++v268;
        v271 = v36;
        v272 = v85;
      }
      while ((v273 & 1) != 0);
LABEL_83:
      v86 = *(_QWORD *)(a6 + 72);
      v87 = *(_QWORD *)(a6 + 88);
      v363 = v85;
      if (v87)
      {
        v88 = 0;
        v89 = v358;
        do
        {
          v90 = a6 + 8 * v88;
          v91 = *(_QWORD *)(v90 + 104);
          v93 = *(_DWORD *)(v91 + 16);
          v92 = *(_DWORD *)(v91 + 20);
          v94 = v91 + 24 + 4 * (1 << v92);
          v95 = v94 + 2 * (1 << v93);
          v96 = (_QWORD *)(v95 + 4 * *(unsigned int *)(v91 + 4));
          if (*(_DWORD *)v91 != -558043680)
            v96 = (_QWORD *)*v96;
          v97 = 0;
          v98 = *(_QWORD *)(a6 + 96) + v369 - *(_QWORD *)(v90 + 360);
          v99 = *(unsigned int *)(v91 + 8);
          v100 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)result & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v91 + 12)))) >> -(char)v93;
          v101 = *(unsigned __int16 *)(v94 + 2 * v100);
          v102 = (int *)(v95
                       + 4
                       * (*(_DWORD *)(v91 + 24 + 4 * ((0xFFFFFFFF >> -(char)v92) & v100))
                                      + v101));
          v103 = v36;
          do
          {
            v104 = a8[v97];
            if (v98 - v99 < v104 && v98 >= v104)
            {
              v106 = v99 - (v98 - v104);
              if (v106 >= v37)
                v106 = v37;
              v107 = (unsigned __int8 *)v96 + v98 - v104;
              if (v106 < 8)
              {
                v111 = (unsigned __int8 *)v96 + v98 - v104;
                v110 = (unsigned __int8 *)result;
                if (v106)
                {
LABEL_102:
                  v112 = &v111[v106];
                  while (*v111 == *v110)
                  {
                    ++v110;
                    ++v111;
                    if (!--v106)
                    {
                      v111 = v112;
                      break;
                    }
                  }
                  v24 = a3;
                }
              }
              else
              {
                v108 = 0;
                do
                {
                  v109 = *(_QWORD *)&v107[v108] ^ *(_QWORD *)(result + v108);
                  if (v109)
                  {
                    v113 = v108 + (__clz(__rbit64(v109)) >> 3);
                    goto LABEL_109;
                  }
                  v106 -= 8;
                  v108 += 8;
                }
                while (v106 > 7);
                v110 = (unsigned __int8 *)(result + v108);
                v111 = &v107[v108];
                if (v106)
                  goto LABEL_102;
              }
              v113 = v111 - v107;
LABEL_109:
              v114 = 135 * v113 + 1935;
              if (v113 >= 2 && v89 < v114)
              {
                if (v97)
                  v114 -= ((0x1CA10u >> (v97 & 0xE)) & 0xE) + 39;
                if (v89 < v114)
                {
                  v361 = 0;
                  if (v113 > v36)
                    v36 = v113;
                  v363 = a8[v97];
                  v89 = v114;
                  v103 = v113;
                }
              }
            }
            ++v97;
          }
          while (v97 != 4);
          v116 = v89;
          if (v101 != 0xFFFF)
          {
            do
            {
              v118 = *v102++;
              v117 = v118;
              v119 = v118 & 0x7FFFFFFF;
              v120 = v98 - v119;
              if (v99 - v119 >= v37)
                v121 = v37;
              else
                v121 = v99 - v119;
              v122 = v36 + v42;
              v124 = v120 > v86 || v122 > a4 || v36 >= v121;
              if (!v124 && *(unsigned __int8 *)(v24 + v122) == *((unsigned __int8 *)v96 + v36 + v119))
              {
                v125 = (unsigned __int8 *)v96 + v119;
                if (v121 < 8)
                {
                  v129 = (unsigned __int8 *)result;
                  v128 = (unsigned __int8 *)v96 + v119;
                }
                else
                {
                  v126 = 0;
                  do
                  {
                    v127 = *(_QWORD *)&v125[v126] ^ *(_QWORD *)(result + v126);
                    if (v127)
                    {
                      v131 = v126 + (__clz(__rbit64(v127)) >> 3);
                      goto LABEL_150;
                    }
                    v121 -= 8;
                    v126 += 8;
                  }
                  while (v121 > 7);
                  v128 = &v125[v126];
                  if (!v121)
                    goto LABEL_148;
                  v129 = (unsigned __int8 *)(result + v126);
                }
                v130 = &v128[v121];
                while (*v128 == *v129)
                {
                  ++v129;
                  ++v128;
                  if (!--v121)
                  {
                    v128 = v130;
                    break;
                  }
                }
LABEL_148:
                v131 = v128 - v125;
LABEL_150:
                if (v131 >= 4)
                {
                  v132 = 135 * v131 - 30 * (__clz(v120) ^ 0x1F) + 1920;
                  if (v116 < v132)
                  {
                    v361 = 0;
                    v363 = v120;
                    v116 = v132;
                    v103 = v131;
                    v36 = v131;
                  }
                }
              }
            }
            while ((v117 & 0x80000000) == 0);
          }
          ++v88;
          v133 = v103;
          v36 = v103;
          v89 = v116;
        }
        while (v88 != v87);
      }
      else
      {
        v133 = v36;
        v89 = v358;
      }
      if (v89 >= 0x7E5)
      {
        v134 = 0;
        v135 = v354;
        v136 = v356;
        result = v336 + v356;
        while (1)
        {
          if (result >= v346)
            v137 = v346;
          else
            v137 = result;
          v138 = v37 - 1;
          v139 = v133 - 1;
          if (v133 - 1 >= v37 - 1)
            v139 = v37 - 1;
          if (*(int *)(a6 + 4) >= 5)
            v140 = 0;
          else
            v140 = v139;
          v141 = v136 + 1;
          if (v136 + 1 < v346)
            v142 = v136 + 1;
          else
            v142 = v346;
          v143 = v141 + v347;
          if (v141 + v347 >= v346)
            v143 = v346;
          v351 = result;
          v352 = v143;
          v355 = v135;
          v357 = v136;
          v359 = v89;
          v344 = v133;
          v353 = v134;
          v365 = v137;
          if (*(_DWORD *)(a6 + 624))
          {
            v144 = *(unsigned __int8 *)(a6
                                      + (*(_BYTE *)(v342 + v349) | *(_BYTE *)(a5
                                                                                             + *(unsigned __int8 *)(v24 + (v136 & a4))))
                                      + 629);
            v349 = *(unsigned __int8 *)(v24 + (v136 & a4));
          }
          else
          {
            v144 = v350;
          }
          v145 = 0;
          v146 = 0;
          v350 = v144;
          v368 = *(_QWORD *)(a6 + 8 * v144 + 696);
          v147 = a7[139];
          v148 = v147 + 196608;
          v370 = a7[140];
          v373 = 0;
          v149 = v141 & a4;
          v150 = (_DWORD *)(v24 + (v141 & a4));
          v151 = (506832829 * *v150) >> 17;
          v152 = 2020;
          v153 = 2020;
          v364 = v141;
          do
          {
            result = a8[v145];
            v154 = v141 - result;
            if ((!v145 || *(unsigned __int8 *)(v148 + (unsigned __int16)(v141 - result)) == v151)
              && v142 >= result
              && v154 < v141)
            {
              v156 = (_QWORD *)(v24 + (v154 & a4));
              if (v138 < 8)
              {
                v159 = (_QWORD *)(v24 + (v154 & a4));
                v158 = v150;
                v161 = v37 - 1;
                if (v37 != 1)
                {
LABEL_188:
                  v162 = (_QWORD *)((char *)v159 + v161);
                  while (*(unsigned __int8 *)v159 == *(unsigned __int8 *)v158)
                  {
                    v158 = (_QWORD *)((char *)v158 + 1);
                    v159 = (_QWORD *)((char *)v159 + 1);
                    if (!--v161)
                    {
                      v159 = v162;
                      break;
                    }
                  }
                }
              }
              else
              {
                v157 = 0;
                v158 = v150;
                v159 = v156;
                do
                {
                  v160 = *v159 ^ *v158;
                  if (v160)
                  {
                    v163 = (__clz(__rbit64(v160)) >> 3) - v157;
                    goto LABEL_194;
                  }
                  ++v159;
                  ++v158;
                  v157 -= 8;
                  v161 = v37 + v157 - 1;
                }
                while (v161 > 7);
                if (v37 + v157 != 1)
                  goto LABEL_188;
              }
              v163 = (char *)v159 - (char *)v156;
LABEL_194:
              v141 = v364;
              v164 = 135 * v163 + 1935;
              if (v163 >= 2 && v152 < v164)
              {
                if (v145)
                  v164 -= ((0x1CA10u >> (v145 & 0xE)) & 0xE) + 39;
                if (v152 < v164)
                {
                  v146 = v163;
                  v373 = a8[v145];
                  v153 = v164;
                  v152 = v164;
                  v140 = v163;
                }
              }
            }
            ++v145;
          }
          while (v145 != 16);
          v166 = v147 + 0x20000;
          v167 = ((unsigned __int16)((506832829 * *v150) >> 16) >> 1) & 0x1FF;
          v168 = a7[138];
          v169 = v141 - *(unsigned int *)(v147 + 4 * v151);
          if (v168)
          {
            result = 0;
            v170 = *(unsigned __int16 *)(v166 + 2 * v151);
            v171 = v141 - *(unsigned int *)(v147 + 4 * v151);
            do
            {
              result += v171;
              if (result > v142)
                break;
              if (v140 + v149 <= a4)
              {
                v172 = (v141 - result) & a4;
                if (v172 + v140 <= a4
                  && *(unsigned __int8 *)(a3 + v140 + v149) == *(unsigned __int8 *)(a3 + v172 + v140))
                {
                  v173 = a3 + v172;
                  if (v138 < 8)
                  {
                    v176 = (_QWORD *)(a3 + v172);
                    v175 = v150;
                    v178 = v37 - 1;
                    if (v37 != 1)
                    {
LABEL_218:
                      v179 = (_QWORD *)((char *)v176 + v178);
                      while (*(unsigned __int8 *)v176 == *(unsigned __int8 *)v175)
                      {
                        v175 = (_QWORD *)((char *)v175 + 1);
                        v176 = (_QWORD *)((char *)v176 + 1);
                        if (!--v178)
                        {
                          v176 = v179;
                          break;
                        }
                      }
                      v141 = v364;
                    }
                  }
                  else
                  {
                    v174 = 0;
                    v175 = v150;
                    v176 = (_QWORD *)(a3 + v172);
                    do
                    {
                      v177 = *v176 ^ *v175;
                      if (v177)
                      {
                        v180 = (__clz(__rbit64(v177)) >> 3) - v174;
                        v141 = v364;
                        goto LABEL_225;
                      }
                      ++v176;
                      ++v175;
                      v174 -= 8;
                      v178 = v37 + v174 - 1;
                    }
                    while (v178 > 7);
                    v141 = v364;
                    if (v178)
                      goto LABEL_218;
                  }
                  v180 = (unint64_t)v176 - v173;
LABEL_225:
                  if (v180 >= 4)
                  {
                    v181 = __clz(result);
                    if (v152 < 135 * v180 - 30 * (v181 ^ 0x1F) + 1920)
                    {
                      v146 = v180;
                      v373 = result;
                      v153 = 135 * v180 - 30 * (v181 ^ 0x1F) + 1920;
                      v152 = v153;
                      v140 = v180;
                    }
                  }
                }
              }
              v182 = (unsigned __int16 *)(v370 + (v167 << 11) + 4 * v170);
              v170 = v182[1];
              v171 = *v182;
              --v168;
            }
            while (v168);
          }
          v183 = *((_WORD *)v348 + v167);
          *((_WORD *)v348 + v167) = v183 + 1;
          v184 = v183 & 0x1FF;
          *(_BYTE *)(v148 + (unsigned __int16)v141) = v151;
          v185 = -1;
          if (v169 < 0xFFFF)
            v185 = v169;
          v186 = (__int16 *)(v370 + (v167 << 11) + 4 * v184);
          *v186 = v185;
          v186[1] = *(_WORD *)(v166 + 2 * v151);
          *(_DWORD *)(v147 + 4 * v151) = v141;
          *(_WORD *)(v166 + 2 * v151) = v184;
          if (v153 == 2020)
          {
            v187 = a7[141];
            v189 = *(_QWORD *)(v187 + 40);
            v188 = *(_QWORD *)(v187 + 48);
            a6 = v375;
            v24 = a3;
            v190 = v373;
            v191 = 0;
            if (v188 >= v189 >> 7)
            {
              v239 = ((506832829 * *v150) >> 17) & 0x7FFE;
              v240 = *(_QWORD *)(v368 + 32);
              v241 = v368;
              v242 = 1;
              v153 = 2020;
              v243 = v373;
              v244 = v146;
              do
              {
                result = v242;
                *(_QWORD *)(v187 + 40) = ++v189;
                v245 = *(unsigned __int8 *)(v240 + v239);
                if (!*(_BYTE *)(v240 + v239) || v138 < v245)
                  goto LABEL_332;
                v246 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v241 + 168)
                                         + *(unsigned int *)(*(_QWORD *)v241
                                                           + 4 * *(unsigned __int8 *)(v240 + v239)
                                                           + 32)
                                         + *(unsigned __int16 *)(*(_QWORD *)(v241 + 24) + 2 * v239)
                                         * (unint64_t)*(unsigned __int8 *)(v240 + v239));
                if (v245 < 8)
                {
                  v248 = *(unsigned __int8 *)(v240 + v239);
                  v250 = (unsigned __int8 *)v150;
                }
                else
                {
                  v247 = 0;
                  v248 = *(unsigned __int8 *)(v240 + v239);
                  do
                  {
                    v249 = *(_QWORD *)&v150[v247] ^ *(_QWORD *)&v246[v247 * 4];
                    if (v249)
                    {
                      v146 = v247 * 4 + (__clz(__rbit64(v249)) >> 3);
                      goto LABEL_328;
                    }
                    v248 -= 8;
                    v247 += 2;
                  }
                  while (v248 > 7);
                  v250 = (unsigned __int8 *)&v150[v247];
                  if (!v248)
                    goto LABEL_326;
                  v246 += v247 * 4;
                }
                v251 = &v250[v248];
                while (*v250 == *v246)
                {
                  ++v246;
                  ++v250;
                  if (!--v248)
                  {
                    v250 = v251;
                    break;
                  }
                }
                v24 = a3;
LABEL_326:
                v146 = v250 - (unsigned __int8 *)v150;
LABEL_328:
                if (v146 && v146 + *(unsigned int *)(v241 + 12) > v245)
                {
                  v253 = v341
                       + v352
                       + *(unsigned __int16 *)(*(_QWORD *)(v241 + 24) + 2 * v239)
                       + ((((*(_QWORD *)(v241 + 16) >> (6 * (v245 - v146))) & 0x3FLL)
                         + 4 * (v245 - v146)) << *(_BYTE *)(*(_QWORD *)v241 + v245));
                  if (v253 <= v86 && (v254 = 135 * v146 - 30 * (__clz(v253) ^ 0x1F) + 1920, v254 >= v153))
                  {
                    v190 = v253;
                    v191 = v245 - v146;
                    *(_QWORD *)(v187 + 48) = ++v188;
                    v153 = v254;
                  }
                  else
                  {
                    v146 = v244;
                    v190 = v243;
                  }
                  v241 = v368;
                }
                else
                {
LABEL_332:
                  v146 = v244;
                  v190 = v243;
                }
                v242 = 0;
                ++v239;
                v243 = v190;
                v244 = v146;
              }
              while ((result & 1) != 0);
            }
            else
            {
              v153 = 2020;
            }
          }
          else
          {
            v191 = 0;
            a6 = v375;
            v24 = a3;
            v190 = v373;
          }
          v86 = *(_QWORD *)(a6 + 72);
          v374 = *(_QWORD *)(a6 + 88);
          v192 = v190;
          if (v374)
          {
            v193 = 0;
            v194 = *(_QWORD *)(a6 + 96);
            v371 = v194 + v352;
            v366 = v194 + v365;
            do
            {
              v195 = a6 + 8 * v193;
              v196 = *(_QWORD *)(v195 + 104);
              v197 = *(_DWORD *)(v196 + 16);
              v198 = *(_DWORD *)(v196 + 20);
              v199 = v196 + 24 + 4 * (1 << v198);
              v200 = v199 + 2 * (1 << v197);
              v201 = (_QWORD *)(v200 + 4 * *(unsigned int *)(v196 + 4));
              if (*(_DWORD *)v196 != -558043680)
                v201 = (_QWORD *)*v201;
              result = 0;
              v202 = *(_QWORD *)(v195 + 360);
              v203 = v371 - v202;
              v204 = *(unsigned int *)(v196 + 8);
              v205 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v150 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v196 + 12)))) >> -(char)v197;
              v206 = *(unsigned __int16 *)(v199 + 2 * v205);
              v207 = v371 - v202 - v204;
              v208 = (unsigned int *)(v200
                                    + 4
                                    * (*(_DWORD *)(v196
                                                               + 24
                                                               + 4
                                                               * ((0xFFFFFFFF >> -(char)v198) & v205))
                                                   + v206));
              v209 = (char *)v201 + v366 - v202;
              v210 = v146;
              do
              {
                v211 = a8[result];
                if (v207 < v211 && v203 >= v211)
                {
                  v213 = v204 - (v203 - v211);
                  if (v213 >= v138)
                    v213 = v138;
                  if (v213 < 8)
                  {
                    v218 = (unsigned __int8 *)v201 + v203 - v211;
                    v217 = (unsigned __int8 *)v150;
                    if (v213)
                    {
LABEL_254:
                      v219 = &v218[v213];
                      while (*v218 == *v217)
                      {
                        ++v217;
                        ++v218;
                        if (!--v213)
                        {
                          v218 = v219;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v214 = 0;
                    v215 = &v209[-v211];
                    do
                    {
                      v216 = *(_QWORD *)&v215[v214 * 4] ^ *(_QWORD *)&v150[v214];
                      if (v216)
                      {
                        v220 = v214 * 4 + (__clz(__rbit64(v216)) >> 3);
                        goto LABEL_260;
                      }
                      v213 -= 8;
                      v214 += 2;
                    }
                    while (v213 > 7);
                    v217 = (unsigned __int8 *)&v150[v214];
                    v218 = (unsigned __int8 *)&v215[v214 * 4];
                    if (v213)
                      goto LABEL_254;
                  }
                  v220 = v218 - ((unsigned __int8 *)v201 + v203 - v211);
LABEL_260:
                  v221 = 135 * v220 + 1935;
                  if (v220 >= 2 && v153 < v221)
                  {
                    if (result)
                      v221 -= ((0x1CA10u >> (result & 0xE)) & 0xE) + 39;
                    if (v153 < v221)
                    {
                      v191 = 0;
                      if (v220 > v146)
                        v146 = v220;
                      v210 = v220;
                      v192 = a8[result];
                      v153 = v221;
                    }
                  }
                }
                ++result;
              }
              while (result != 4);
              v24 = a3;
              if (v206 != 0xFFFF)
              {
                do
                {
                  v223 = *v208++;
                  result = v223;
                  v224 = v223 & 0x7FFFFFFF;
                  v225 = v203 - v224;
                  if (v204 - v224 >= v138)
                    v226 = v138;
                  else
                    v226 = v204 - v224;
                  v227 = v146 + v149;
                  v229 = v225 > v86 || v227 > a4 || v146 >= v226;
                  if (!v229 && *(unsigned __int8 *)(a3 + v227) == *((unsigned __int8 *)v201 + v146 + v224))
                  {
                    v230 = (unsigned __int8 *)v201 + v224;
                    if (v226 < 8)
                    {
                      v234 = (unsigned __int8 *)v150;
                      v233 = v230;
                    }
                    else
                    {
                      v231 = 0;
                      do
                      {
                        v232 = *(_QWORD *)&v230[v231 * 4] ^ *(_QWORD *)&v150[v231];
                        if (v232)
                        {
                          v236 = v231 * 4 + (__clz(__rbit64(v232)) >> 3);
                          goto LABEL_301;
                        }
                        v226 -= 8;
                        v231 += 2;
                      }
                      while (v226 > 7);
                      v233 = &v230[v231 * 4];
                      if (!v226)
                        goto LABEL_299;
                      v234 = (unsigned __int8 *)&v150[v231];
                    }
                    v235 = &v233[v226];
                    while (*v233 == *v234)
                    {
                      ++v234;
                      ++v233;
                      if (!--v226)
                      {
                        v233 = v235;
                        break;
                      }
                    }
LABEL_299:
                    v236 = v233 - v230;
LABEL_301:
                    if (v236 >= 4)
                    {
                      v237 = 135 * v236 - 30 * (__clz(v225) ^ 0x1F) + 1920;
                      if (v153 < v237)
                      {
                        v191 = 0;
                        v210 = v236;
                        v192 = v225;
                        v153 = v237;
                        v146 = v236;
                      }
                    }
                  }
                }
                while ((result & 0x80000000) == 0);
              }
              ++v193;
              v146 = v210;
              a6 = v375;
            }
            while (v193 != v374);
          }
          else
          {
            v210 = v146;
          }
          if (v153 < v359 + 175)
            break;
          v135 = v355 + 1;
          if (v353 > 2)
          {
            v238 = v364;
            goto LABEL_391;
          }
          v134 = v353 + 1;
          result = v351 + 1;
          v363 = v192;
          v89 = v153;
          v361 = v191;
          v133 = v210;
          v37 = v138;
          v238 = v364;
          v136 = v364;
          if (v357 + 5 >= v345)
            goto LABEL_391;
        }
        v135 = v355;
        v267 = v357 + v347;
        if (v357 + v347 >= v346)
          v267 = v346;
        v352 = v267;
        v192 = v363;
        v191 = v361;
        v210 = v344;
        v238 = v357;
LABEL_391:
        v295 = v340;
        if (v192 > v352 + v337)
        {
LABEL_392:
          v296 = v192 + 15;
          goto LABEL_393;
        }
        v299 = *a8;
        if (v192 == v299)
        {
          v296 = 0;
          v297 = v348;
LABEL_398:
          *v340 = v135;
          v340[1] = v210 | (v191 << 25);
          v300 = *(unsigned int *)(a6 + 60);
          v301 = v300 + 16;
          if (v300 + 16 <= v296)
          {
            v303 = *(unsigned int *)(a6 + 56);
            v304 = v296 - v300 + (4 << v303) - 16;
            v305 = (__clz(v304) ^ 0x1F) - 1;
            v306 = ((v304 >> v305) & 1 | 2) << v305;
            result = 65534;
            v296 = ((v304 & ~(-1 << v303))
                  + v301
                  + ((((v304 >> v305) & 1 | (2 * (v305 - v303))) + 65534) << v303)) | ((v305 - v303) << 10);
            v307 = v304 - v306;
            v295 = v340;
            v302 = v307 >> v303;
          }
          else
          {
            LODWORD(v302) = 0;
          }
          *((_WORD *)v295 + 7) = v296;
          v295[2] = v302;
          if (v135 > 5)
          {
            if (v135 > 0x81)
            {
              if (v135 > 0x841)
              {
                if (v135 >> 1 >= 0xC21)
                {
                  if (v135 < 0x5842)
                    LOWORD(v308) = 22;
                  else
                    LOWORD(v308) = 23;
                }
                else
                {
                  LOWORD(v308) = 21;
                }
              }
              else
              {
                v308 = (__clz(v135 - 66) ^ 0x1F) + 10;
              }
            }
            else
            {
              v309 = (__clz(v135 - 2) ^ 0x1F) - 1;
              v308 = ((v135 - 2) >> v309) + 2 * v309 + 2;
            }
          }
          else
          {
            LOWORD(v308) = v135;
          }
          v315 = v191 + (int)v210;
          if (v315 > 9)
          {
            if (v315 > 0x85)
            {
              if (v315 > 0x845)
                LOWORD(v316) = 23;
              else
                v316 = (__clz(v315 - 70) ^ 0x1F) + 12;
            }
            else
            {
              v317 = v315 - 6;
              v318 = (__clz(v317) ^ 0x1F) - 1;
              v316 = (v317 >> v318) + 2 * v318 + 4;
            }
          }
          else
          {
            LOWORD(v316) = v191 + v210 - 2;
          }
          v319 = v316 & 7 | (8 * (v308 & 7));
          if ((v296 & 0x3FF) != 0 || (unsigned __int16)v308 > 7u || (unsigned __int16)v316 > 0xFu)
          {
            v321 = 3 * ((unsigned __int16)v308 >> 3) + ((unsigned __int16)(v316 & 0xFFF8) >> 3);
            v320 = ((((0x520D40u >> (2 * v321)) & 0xC0) + (v321 << 6)) | v319) + 64;
          }
          else
          {
            LOWORD(v320) = v319 | 0x40;
            if ((v316 & 0xFFF8) == 0)
              LOWORD(v320) = v316 & 7 | (8 * (v308 & 7));
          }
          *((_WORD *)v295 + 6) = v320;
          *a15 += v135;
          v322 = v238 + 2;
          v256 = v238 + v210;
          v323 = v339;
          if (v238 + v210 < v339)
            v323 = v238 + v210;
          if (v192 < v210 >> 2)
          {
            if (v322 <= v256 - 4 * v192)
              v322 = v256 - 4 * v192;
            if (v323 < v322)
              v322 = v323;
          }
          v25 = v338 + 2 * v210 + v238;
          v26 = v295 + 4;
          if (v322 >= v323)
          {
            v354 = 0;
            v27 = v345;
          }
          else
          {
            v324 = v26;
            v325 = a7[139];
            v326 = v325 + 0x20000;
            v327 = a7[140];
            do
            {
              v328 = (506832829 * *(_DWORD *)(v24 + (v322 & a4))) >> 17;
              v329 = *((_WORD *)v297 + (v328 & 0x1FF));
              *((_WORD *)v297 + (v328 & 0x1FF)) = v329 + 1;
              v330 = v329 & 0x1FF;
              v331 = v322 - *(unsigned int *)(v325 + 4 * v328);
              *(_BYTE *)(v325 + 196608 + (unsigned __int16)v322) = v328;
              if (v331 >= 0xFFFF)
                LOWORD(v331) = -1;
              v332 = (_WORD *)(v327 + ((unint64_t)(v328 & 0x1FF) << 11) + 4 * v330);
              *v332 = v331;
              result = *(unsigned __int16 *)(v326 + 2 * v328);
              v332[1] = result;
              *(_DWORD *)(v325 + 4 * v328) = v322;
              *(_WORD *)(v326 + 2 * v328) = v330;
              ++v322;
            }
            while (v323 != v322);
            v354 = 0;
            v27 = v345;
            v26 = v324;
          }
          goto LABEL_447;
        }
        v310 = a8[1];
        if (v192 == v310)
        {
          v296 = 1;
        }
        else
        {
          v311 = v192 + 3 - v299;
          if (v311 > 6)
          {
            v314 = v192 + 3 - v310;
            if (v314 > 6)
            {
              if (v192 == a8[2])
              {
                v296 = 2;
              }
              else
              {
                if (v192 != a8[3])
                  goto LABEL_392;
                v296 = 3;
              }
              goto LABEL_393;
            }
            v312 = 4 * v314;
            v313 = 266017486;
          }
          else
          {
            v312 = 4 * v311;
            v313 = 158663784;
          }
          v296 = (v313 >> v312) & 0xF;
        }
LABEL_393:
        v297 = v348;
        if (v192 <= v352 + v337 && v296)
        {
          a8[3] = a8[2];
          v23.i64[0] = *(_QWORD *)a8;
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v192;
          v22.i32[0] = v192;
          v298 = vzip1q_s32(v22, v23);
          v22 = vaddq_s32(vzip1q_s32(v298, v298), (int32x4_t)xmmword_19D02CCB0);
          *((int32x4_t *)a8 + 1) = vaddq_s32(vdupq_n_s32(v192), (int32x4_t)xmmword_19D02CCA0);
          *((int32x4_t *)a8 + 2) = v22;
          v23 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v23.i8, 0), (int32x4_t)xmmword_19D02CCC0);
          *((int32x4_t *)a8 + 3) = v23;
        }
        goto LABEL_398;
      }
      v255 = v354 + 1;
      v256 = v356 + 1;
      v25 = v367;
      v27 = v345;
      if (v356 + 1 <= v367)
      {
LABEL_388:
        ++v354;
        goto LABEL_389;
      }
      if (v256 <= v367 + v335)
      {
        v285 = v356 + 9;
        if (v356 + 9 >= v334)
          v285 = v334;
        if (v256 >= v285)
          goto LABEL_388;
        v286 = a7[139];
        v287 = v286 + 0x20000;
        v288 = a7[140];
        do
        {
          v289 = (506832829 * *(_DWORD *)(v24 + (v256 & a4))) >> 17;
          v290 = *((_WORD *)v348 + (v289 & 0x1FF));
          *((_WORD *)v348 + (v289 & 0x1FF)) = v290 + 1;
          v291 = v290 & 0x1FF;
          v292 = v256 - *(unsigned int *)(v286 + 4 * v289);
          result = (unsigned __int16)v256;
          *(_BYTE *)(v286 + 196608 + (unsigned __int16)v256) = v289;
          if (v292 >= 0xFFFF)
            LOWORD(v292) = -1;
          v293 = (_WORD *)(v288 + ((unint64_t)(v289 & 0x1FF) << 11) + 4 * v291);
          *v293 = v292;
          v294 = *(_WORD *)(v287 + 2 * v289);
          *(_DWORD *)(v286 + 4 * v289) = v256;
          v293[1] = v294;
          *(_WORD *)(v287 + 2 * v289) = v291;
          v255 += 2;
          v256 += 2;
        }
        while (v256 < v285);
      }
      else
      {
        v257 = v356 + 17;
        if (v356 + 17 >= v333)
          v257 = v333;
        if (v256 >= v257)
          goto LABEL_388;
        v258 = a7[139];
        v259 = v258 + 0x20000;
        v260 = a7[140];
        do
        {
          v261 = (506832829 * *(_DWORD *)(v24 + (v256 & a4))) >> 17;
          v262 = *((_WORD *)v348 + (v261 & 0x1FF));
          *((_WORD *)v348 + (v261 & 0x1FF)) = v262 + 1;
          v263 = v262 & 0x1FF;
          v264 = v256 - *(unsigned int *)(v258 + 4 * v261);
          result = (unsigned __int16)v256;
          *(_BYTE *)(v258 + 196608 + (unsigned __int16)v256) = v261;
          if (v264 >= 0xFFFF)
            LOWORD(v264) = -1;
          v265 = (_WORD *)(v260 + ((unint64_t)(v261 & 0x1FF) << 11) + 4 * v263);
          *v265 = v264;
          v266 = *(_WORD *)(v259 + 2 * v261);
          *(_DWORD *)(v258 + 4 * v261) = v256;
          v265[1] = v266;
          *(_WORD *)(v259 + 2 * v261) = v263;
          v255 += 4;
          v256 += 4;
        }
        while (v256 < v257);
      }
      v354 = v255;
      v27 = v345;
LABEL_389:
      v26 = v340;
LABEL_447:
      v28 = v256;
      if (v256 + 4 >= v27)
        goto LABEL_454;
    }
    if (v28)
    {
      v31 = *(unsigned __int8 *)(v24 + ((v28 - 1) & a4));
      if (v28 != 1)
      {
        v32 = *(unsigned __int8 *)(v24 + ((v28 - 2) & a4));
LABEL_20:
        v349 = v31;
        v33 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v342 + v32) | *(_BYTE *)(a5 + v31)) + 629);
        goto LABEL_21;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = 0;
    goto LABEL_20;
  }
  v26 = a13;
  v256 = a2;
  v27 = v16;
LABEL_454:
  *a12 = v354 + v27 - v256;
  *a14 += ((char *)v26 - (char *)a13) >> 4;
  return result;
}

uint64_t CreateBackwardReferencesDH55(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v43;
  uint64_t v44;
  unint64_t j;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  int *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unint64_t v103;
  unint64_t v104;
  int v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unint64_t v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t v146;
  int64x2_t v147;
  int8x16_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unsigned __int8 *v178;
  unsigned __int8 *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int v200;
  int v201;
  int *v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  unsigned __int8 *v213;
  unint64_t v214;
  unint64_t v215;
  int v217;
  int v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  BOOL v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unsigned __int8 *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  unsigned int v256;
  unint64_t v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unsigned int v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v292;
  unint64_t v293;
  int8x16_t v294;
  int8x16_t v295;
  uint64_t v296;

  v11 = a2;
  v296 = *MEMORY[0x1E0C80C00];
  v12 = *a8;
  v13 = a2 + a1;
  v14 = a2 + a1 - 7;
  v266 = v14;
  if (a1 <= 7)
    v14 = a2;
  v269 = v14;
  if (*(int *)(a5 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (a2 + 8 < v13)
  {
    v274 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v16 = v15 + a2;
    v17 = *(_QWORD *)(a6 + 88);
    v268 = v15;
    v265 = 4 * v15;
    v273 = *(_QWORD *)(a5 + 16);
    v267 = *(_QWORD *)(a5 + 96);
    v18 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
    result = a9;
    v284 = v17;
    v272 = v13;
    while (1)
    {
      v270 = result;
      v279 = v12;
      v20 = v13 - v11;
      if (v11 >= v274)
        v21 = v274;
      else
        v21 = v11;
      if (v11 + v273 >= v274)
        v22 = v274;
      else
        v22 = v11 + v273;
      v23 = v11 & a4;
      v24 = (unsigned __int8 *)(a3 + (v11 & a4));
      v25 = *v24;
      v26 = *a7;
      v288 = v16;
      if (v11 < v26)
        goto LABEL_32;
      v27 = (unsigned __int8 *)(a3 + (a4 & (v11 - v26)));
      if (v25 != *v27)
        goto LABEL_32;
      if (v20 < 8)
      {
        v32 = (unsigned __int8 *)(a3 + (a4 & (v11 - v26)));
        v31 = (unsigned __int8 *)(a3 + (v11 & a4));
        i = v20;
        if (v20)
        {
LABEL_23:
          v33 = &v32[i];
          while (*v32 == *v31)
          {
            ++v31;
            ++v32;
            if (!--i)
            {
              v32 = v33;
              break;
            }
          }
        }
      }
      else
      {
        v28 = 0;
        for (i = v20; i > 7; i -= 8)
        {
          v30 = *(_QWORD *)&v27[v28] ^ *(_QWORD *)&v24[v28];
          if (v30)
          {
            v34 = v28 + (__clz(__rbit64(v30)) >> 3);
            goto LABEL_29;
          }
          v28 += 8;
        }
        v31 = &v24[v28];
        v32 = &v27[v28];
        if (i)
          goto LABEL_23;
      }
      v34 = v32 - v27;
LABEL_29:
      if (v34 >= 4 && (v35 = 135 * v34 + 1935, v35 >= 0x7E5))
      {
        v283 = *a7;
        v25 = *(unsigned __int8 *)(a3 + v34 + v23);
      }
      else
      {
LABEL_32:
        v283 = 0;
        v34 = 0;
        v35 = 2020;
      }
      v36 = 0;
      v37 = vdupq_n_s64((0xE35A7BD3579BD300 * *(_QWORD *)v24) >> 44);
      v294 = vandq_s8((int8x16_t)vaddq_s64(v37, (int64x2_t)xmmword_19D02CCD0), v18);
      v295 = vandq_s8((int8x16_t)vaddq_s64(v37, (int64x2_t)xmmword_19D02CCE0), v18);
      v38 = *(uint64_t *)((char *)v294.i64 + (v11 & 0x18));
      v280 = v11;
      do
      {
        v39 = *(unsigned int *)(v17 + 4 * v294.i64[v36]);
        v40 = v11 - v39;
        if (v25 == *(unsigned __int8 *)(a3 + (v39 & a4) + v34) && v11 != v39 && v40 <= v21)
        {
          v43 = a3 + (v39 & a4);
          if (v20 < 8)
          {
            v48 = (unsigned __int8 *)(a3 + (v39 & a4));
            v47 = v24;
            j = v20;
            if (v20)
            {
LABEL_48:
              v49 = &v48[j];
              while (*v48 == *v47)
              {
                ++v47;
                ++v48;
                if (!--j)
                {
                  v48 = v49;
                  break;
                }
              }
              v17 = v284;
              v11 = v280;
            }
          }
          else
          {
            v44 = 0;
            for (j = v20; j > 7; j -= 8)
            {
              v46 = *(_QWORD *)(v43 + v44) ^ *(_QWORD *)&v24[v44];
              if (v46)
              {
                v50 = v44 + (__clz(__rbit64(v46)) >> 3);
                goto LABEL_55;
              }
              v44 += 8;
            }
            v47 = &v24[v44];
            v48 = (unsigned __int8 *)(v43 + v44);
            if (j)
              goto LABEL_48;
          }
          v50 = (unint64_t)&v48[-v43];
LABEL_55:
          if (v50 >= 4)
          {
            v51 = 135 * v50 - 30 * (__clz(v40) ^ 0x1F) + 1920;
            if (v35 < v51)
            {
              v25 = *(unsigned __int8 *)(a3 + v50 + v23);
              v283 = v40;
              v35 = v51;
              v34 = v50;
            }
          }
        }
        ++v36;
      }
      while (v36 != 4);
      *(_DWORD *)(v17 + 4 * v38) = v11;
      if ((v11 & 3) == 0 && v20 >= 0x20)
      {
        v52 = a6;
        v53 = *(_QWORD *)(a6 + 112);
        if (v53 <= v11)
        {
          v54 = *(_DWORD *)(a6 + 124);
          v55 = *(_DWORD *)(a6 + 128);
          v56 = *(_DWORD *)(a6 + 96);
          do
          {
            v57 = *(unsigned __int8 *)(a3 + (v53 & a4));
            v58 = *(unsigned __int8 *)(a3 + ((v53 + 32) & a4));
            if ((v56 & 0x3F000000) == 0)
            {
              v59 = *(_QWORD *)(a6 + 104);
              v60 = *(unsigned int *)(v59 + 4 * (v56 & 0x3FFFFFFF));
              *(_DWORD *)(v59 + 4 * (v56 & 0x3FFFFFFF)) = v53;
              if (v53 == v11 && (_DWORD)v60 != -1)
              {
                v61 = (v11 - v60);
                if (v21 >= v61)
                {
                  v62 = 0;
                  v63 = 0;
                  v64 = a3 + (v60 & a4);
                  do
                  {
                    v65 = *(_QWORD *)(v64 + v63) ^ *(_QWORD *)&v24[v63];
                    if (v65)
                    {
                      v71 = v63 + (__clz(__rbit64(v65)) >> 3);
                      goto LABEL_77;
                    }
                    v63 += 8;
                    v62 -= 8;
                    v66 = v20 + v62;
                  }
                  while (v20 + v62 > 7);
                  v67 = (unsigned __int8 *)(v64 + v63);
                  v68 = v20 - v63;
                  if (v20 != v63)
                  {
                    v69 = &v24[v63];
                    v70 = &v67[v68];
                    while (*v67 == *v69)
                    {
                      ++v69;
                      ++v67;
                      if (!--v66)
                      {
                        v67 = v70;
                        break;
                      }
                    }
                  }
                  v71 = (unint64_t)&v67[-v64];
LABEL_77:
                  v72 = 135 * v71 - 30 * (__clz(v61) ^ 0x1F) + 1920;
                  v73 = v283;
                  if (v72 > v35)
                  {
                    v74 = v71;
                  }
                  else
                  {
                    v61 = v283;
                    v72 = v35;
                    v74 = v34;
                  }
                  v75 = v71 >= 4 && v71 > v34;
                  if (v75)
                    v73 = v61;
                  v283 = v73;
                  if (v75)
                    v35 = v72;
                  if (v75)
                    v34 = v74;
                  v11 = v280;
                }
              }
            }
            v56 = v58 + v54 * v56 + v55 * ~v57 + 1;
            v53 += 4;
          }
          while (v53 <= v11);
          v52 = a6;
          *(_DWORD *)(a6 + 96) = v56;
        }
        *(_QWORD *)(v52 + 112) = v11 + 4;
      }
      v76 = *(_QWORD *)(a5 + 72);
      v290 = *(_QWORD *)(a5 + 88);
      v287 = *(_QWORD *)(a5 + 96);
      if (v290)
      {
        v77 = 0;
        v292 = *(_QWORD *)(a5 + 96) + v22;
        do
        {
          v78 = a5 + 8 * v77;
          v79 = *(_QWORD *)(v78 + 104);
          v81 = *(_DWORD *)(v79 + 16);
          v80 = *(_DWORD *)(v79 + 20);
          v82 = v79 + 24;
          v83 = v79 + 24 + 4 * (1 << v80);
          v84 = v83 + 2 * (1 << v81);
          v85 = (_QWORD *)(v84 + 4 * *(unsigned int *)(v79 + 4));
          if (*(_DWORD *)v79 != -558043680)
            v85 = (_QWORD *)*v85;
          v86 = 0;
          v87 = v292 - *(_QWORD *)(v78 + 360);
          v88 = *(unsigned int *)(v79 + 8);
          v89 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v24 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v79 + 12)))) >> -(char)v81;
          v90 = 0xFFFFFFFF >> -(char)v80;
          v91 = *(unsigned __int16 *)(v83 + 2 * v89);
          v92 = (int *)(v84 + 4 * (*(_DWORD *)(v82 + 4 * (v90 & v89)) + v91));
          v93 = v34;
          do
          {
            v94 = a7[v86];
            if (v87 - v88 < v94 && v87 >= v94)
            {
              v96 = v88 - (v87 - v94);
              if (v96 >= v20)
                v96 = v20;
              v97 = (unsigned __int8 *)v85 + v87 - v94;
              if (v96 < 8)
              {
                v101 = (unsigned __int8 *)v85 + v87 - v94;
                v100 = v24;
                if (v96)
                {
LABEL_115:
                  v102 = &v101[v96];
                  while (*v101 == *v100)
                  {
                    ++v100;
                    ++v101;
                    if (!--v96)
                    {
                      v101 = v102;
                      break;
                    }
                  }
                }
              }
              else
              {
                v98 = 0;
                do
                {
                  v99 = *(_QWORD *)&v97[v98] ^ *(_QWORD *)&v24[v98];
                  if (v99)
                  {
                    v103 = v98 + (__clz(__rbit64(v99)) >> 3);
                    goto LABEL_121;
                  }
                  v96 -= 8;
                  v98 += 8;
                }
                while (v96 > 7);
                v100 = &v24[v98];
                v101 = &v97[v98];
                if (v96)
                  goto LABEL_115;
              }
              v103 = v101 - v97;
LABEL_121:
              v104 = 135 * v103 + 1935;
              if (v103 >= 2 && v35 < v104)
              {
                if (v86)
                  v104 -= ((0x1CA10u >> (v86 & 0xE)) & 0xE) + 39;
                if (v35 < v104)
                {
                  if (v103 > v34)
                    v34 = v103;
                  v283 = a7[v86];
                  v35 = v104;
                  v93 = v103;
                }
              }
            }
            ++v86;
          }
          while (v86 != 4);
          if (v91 != 0xFFFF)
          {
            do
            {
              v107 = *v92++;
              v106 = v107;
              v108 = v107 & 0x7FFFFFFF;
              v109 = v87 - v108;
              v110 = v88 - v108;
              if (v88 - v108 >= v20)
                v110 = v20;
              v111 = v34 + v23;
              v113 = v109 > v76 || v111 > a4 || v34 >= v110;
              if (!v113 && *(unsigned __int8 *)(a3 + v111) == *((unsigned __int8 *)v85 + v34 + v108))
              {
                v114 = (unsigned __int8 *)v85 + v108;
                if (v110 < 8)
                {
                  v118 = v24;
                  v117 = v114;
                }
                else
                {
                  v115 = 0;
                  do
                  {
                    v116 = *(_QWORD *)&v114[v115] ^ *(_QWORD *)&v24[v115];
                    if (v116)
                    {
                      v120 = v115 + (__clz(__rbit64(v116)) >> 3);
                      goto LABEL_161;
                    }
                    v110 -= 8;
                    v115 += 8;
                  }
                  while (v110 > 7);
                  v117 = &v114[v115];
                  if (!v110)
                    goto LABEL_159;
                  v118 = &v24[v115];
                }
                v119 = &v117[v110];
                while (*v117 == *v118)
                {
                  ++v118;
                  ++v117;
                  if (!--v110)
                  {
                    v117 = v119;
                    break;
                  }
                }
LABEL_159:
                v120 = v117 - v114;
LABEL_161:
                if (v120 >= 4)
                {
                  v121 = 135 * v120 - 30 * (__clz(v109) ^ 0x1F) + 1920;
                  if (v35 < v121)
                  {
                    v283 = v109;
                    v35 = v121;
                    v93 = v120;
                    v34 = v120;
                  }
                }
              }
            }
            while ((v106 & 0x80000000) == 0);
          }
          ++v77;
          v34 = v93;
        }
        while (v77 != v290);
      }
      else
      {
        v93 = v34;
      }
      if (v35 < 0x7E5)
      {
        v12 = v279 + 1;
        v235 = v280 + 1;
        v16 = v288;
        v17 = v284;
        result = v270;
        if (v280 + 1 <= v288)
        {
          v13 = v272;
        }
        else
        {
          v13 = v272;
          if (v235 <= v288 + v265)
          {
            v238 = v280 + 9;
            if (v280 + 9 >= v266)
              v238 = v266;
            while (v235 < v238)
            {
              *(_DWORD *)(v284
                        + 4
                        * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v235 & a4))) >> 32) >> 12)
                          + (v235 & 0x18)) & 0xFFFFF)) = v235;
              v12 += 2;
              v235 += 2;
            }
          }
          else
          {
            v236 = v280 + 17;
            if (v280 + 17 >= v266)
              v236 = v266;
            while (v235 < v236)
            {
              *(_DWORD *)(v284
                        + 4
                        * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v235 & a4))) >> 32) >> 12)
                          + (v235 & 0x18)) & 0xFFFFF)) = v235;
              v12 += 4;
              v235 += 4;
            }
          }
        }
        goto LABEL_410;
      }
      v122 = 0;
      v123 = v280;
      v124 = v273 + 1 + v280;
      v17 = v284;
      while (1)
      {
        v276 = v124;
        if (v124 >= v274)
          v125 = v274;
        else
          v125 = v124;
        v289 = v125;
        v126 = v20 - 1;
        v127 = v93 - 1;
        if (v93 - 1 >= v20 - 1)
          v127 = v20 - 1;
        if (*(int *)(a5 + 4) >= 5)
          v128 = 0;
        else
          v128 = v127;
        v129 = v123 + 1;
        v281 = v123;
        if (v123 + 1 < v274)
          v130 = v123 + 1;
        else
          v130 = v274;
        v131 = v129 + v273;
        if (v129 + v273 >= v274)
          v131 = v274;
        v275 = v131;
        v132 = v129 & a4;
        v133 = *(unsigned __int8 *)(a3 + v128 + (v129 & a4));
        v134 = (_QWORD *)(a3 + (v129 & a4));
        v135 = *a7;
        v278 = v35;
        v271 = v93;
        v277 = v122;
        if (v129 < v135)
          goto LABEL_201;
        v136 = a4 & (v129 - v135);
        if (v133 != *(unsigned __int8 *)(a3 + v136 + v128))
          goto LABEL_201;
        v137 = (_QWORD *)(a3 + v136);
        if (v126 < 8)
        {
          v140 = v137;
          v139 = (_QWORD *)(a3 + (v129 & a4));
          v142 = v20 - 1;
          if (v20 != 1)
          {
LABEL_191:
            v143 = v135;
            v144 = (_QWORD *)((char *)v140 + v142);
            while (*(unsigned __int8 *)v140 == *(unsigned __int8 *)v139)
            {
              v139 = (_QWORD *)((char *)v139 + 1);
              v140 = (_QWORD *)((char *)v140 + 1);
              if (!--v142)
              {
                v140 = v144;
                break;
              }
            }
            v135 = v143;
          }
        }
        else
        {
          v138 = 0;
          v139 = (_QWORD *)(a3 + (v129 & a4));
          v140 = v137;
          do
          {
            v141 = *v140 ^ *v139;
            if (v141)
            {
              v145 = (__clz(__rbit64(v141)) >> 3) - v138;
              v135 = *a7;
              goto LABEL_198;
            }
            ++v140;
            ++v139;
            v138 -= 8;
            v142 = v20 + v138 - 1;
          }
          while (v142 > 7);
          v135 = *a7;
          if (v142)
            goto LABEL_191;
        }
        v145 = (char *)v140 - (char *)v137;
LABEL_198:
        if (v145 >= 4 && (v35 = 135 * v145 + 1935, v35 >= 0x7E5))
        {
          v293 = v135;
          v133 = *(unsigned __int8 *)(a3 + v145 + v132);
          v128 = v145;
        }
        else
        {
LABEL_201:
          v293 = 0;
          v35 = 2020;
        }
        v146 = 0;
        v147 = vdupq_n_s64((0xE35A7BD3579BD300 * *v134) >> 44);
        v148 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
        v294 = vandq_s8((int8x16_t)vaddq_s64(v147, (int64x2_t)xmmword_19D02CCD0), v148);
        v295 = vandq_s8((int8x16_t)vaddq_s64(v147, (int64x2_t)xmmword_19D02CCE0), v148);
        v149 = *(uint64_t *)((char *)v294.i64 + (v129 & 0x18));
        v285 = v129;
        do
        {
          v150 = *(unsigned int *)(v17 + 4 * v294.i64[v146]);
          v151 = v129 - v150;
          if (v133 == *(unsigned __int8 *)(a3 + (v150 & a4) + v128) && v129 != v150 && v151 <= v130)
          {
            v154 = a3 + (v150 & a4);
            if (v126 < 8)
            {
              v157 = (_QWORD *)(a3 + (v150 & a4));
              v156 = v134;
              v159 = v20 - 1;
              if (v20 != 1)
              {
LABEL_217:
                v160 = (_QWORD *)((char *)v157 + v159);
                while (*(unsigned __int8 *)v157 == *(unsigned __int8 *)v156)
                {
                  v156 = (_QWORD *)((char *)v156 + 1);
                  v157 = (_QWORD *)((char *)v157 + 1);
                  if (!--v159)
                  {
                    v157 = v160;
                    break;
                  }
                }
                v17 = v284;
                v129 = v285;
              }
            }
            else
            {
              v155 = 0;
              v156 = v134;
              v157 = (_QWORD *)(a3 + (v150 & a4));
              do
              {
                v158 = *v157 ^ *v156;
                if (v158)
                {
                  v161 = (__clz(__rbit64(v158)) >> 3) - v155;
                  v129 = v285;
                  goto LABEL_224;
                }
                ++v157;
                ++v156;
                v155 -= 8;
                v159 = v20 + v155 - 1;
              }
              while (v159 > 7);
              v129 = v285;
              if (v20 + v155 != 1)
                goto LABEL_217;
            }
            v161 = (unint64_t)v157 - v154;
LABEL_224:
            if (v161 >= 4)
            {
              v162 = 135 * v161 - 30 * (__clz(v151) ^ 0x1F) + 1920;
              if (v35 < v162)
              {
                v133 = *(unsigned __int8 *)(a3 + v161 + v132);
                v128 = v161;
                v293 = v151;
                v35 = v162;
              }
            }
          }
          ++v146;
        }
        while (v146 != 4);
        *(_DWORD *)(v17 + 4 * v149) = v129;
        if (v126 >= 0x20 && (v129 & 3) == 0)
        {
          v163 = a6;
          v164 = *(_QWORD *)(a6 + 112);
          if (v164 <= v129)
          {
            v165 = *(_DWORD *)(a6 + 124);
            v166 = *(_DWORD *)(a6 + 128);
            v167 = *(_DWORD *)(a6 + 96);
            do
            {
              v168 = *(unsigned __int8 *)(a3 + (v164 & a4));
              v169 = *(unsigned __int8 *)(a3 + ((v164 + 32) & a4));
              if ((v167 & 0x3F000000) == 0)
              {
                v170 = *(_QWORD *)(a6 + 104);
                v171 = *(unsigned int *)(v170 + 4 * (v167 & 0x3FFFFFFF));
                *(_DWORD *)(v170 + 4 * (v167 & 0x3FFFFFFF)) = v164;
                if (v164 == v129 && (_DWORD)v171 != -1)
                {
                  v172 = (v129 - v171);
                  if (v130 >= v172)
                  {
                    v173 = 0;
                    v174 = 0;
                    v175 = a3 + (v171 & a4);
                    do
                    {
                      v176 = *(_QWORD *)(v175 + v174) ^ v134[v174 / 8];
                      if (v176)
                      {
                        v180 = v174 + (__clz(__rbit64(v176)) >> 3);
                        goto LABEL_246;
                      }
                      v174 += 8;
                      v173 -= 8;
                      v177 = v20 + v173 - 1;
                    }
                    while (v177 > 7);
                    v178 = (unsigned __int8 *)(v175 + v174);
                    if (v174 + 1 != v20)
                    {
                      v179 = (unsigned __int8 *)&v134[v174 / 8];
                      while (*v178 == *v179)
                      {
                        ++v179;
                        ++v178;
                        if (!--v177)
                        {
                          v178 = (unsigned __int8 *)(v175 - 8 + v20 + 7);
                          break;
                        }
                      }
                    }
                    v180 = (unint64_t)&v178[-v175];
LABEL_246:
                    v181 = 135 * v180 - 30 * (__clz(v172) ^ 0x1F) + 1920;
                    if (v181 > v35)
                      v182 = v180;
                    else
                      v182 = v128;
                    v183 = v293;
                    if (v181 <= v35)
                    {
                      v172 = v293;
                      v181 = v35;
                    }
                    v184 = v180 >= 4 && v180 > v128;
                    if (v184)
                      v128 = v182;
                    if (v184)
                      v183 = v172;
                    v293 = v183;
                    if (v184)
                      v35 = v181;
                    v129 = v285;
                  }
                }
              }
              v167 = v169 + v165 * v167 + v166 * ~v168 + 1;
              v164 += 4;
            }
            while (v164 <= v129);
            v163 = a6;
            *(_DWORD *)(a6 + 96) = v167;
          }
          *(_QWORD *)(v163 + 112) = v281 + 5;
        }
        if (v290)
        {
          v185 = 0;
          v286 = v275 + v287;
          do
          {
            v186 = a5 + 8 * v185;
            v187 = *(_QWORD *)(v186 + 104);
            v188 = *(_DWORD *)(v187 + 16);
            v189 = *(_DWORD *)(v187 + 20);
            v190 = v187 + 24;
            v191 = v187 + 24 + 4 * (1 << v189);
            v192 = v191 + 2 * (1 << v188);
            v193 = (_QWORD *)(v192 + 4 * *(unsigned int *)(v187 + 4));
            if (*(_DWORD *)v187 != -558043680)
              v193 = (_QWORD *)*v193;
            v194 = 0;
            v195 = *(_QWORD *)(v186 + 360);
            v196 = v286 - v195;
            v197 = *(unsigned int *)(v187 + 8);
            v198 = (0x1FE35A7BD3579BD3 * (*v134 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v187 + 12)))) >> -(char)v188;
            v199 = v286 - v195 - v197;
            v200 = (0xFFFFFFFF >> -(char)v189) & v198;
            v201 = *(unsigned __int16 *)(v191 + 2 * v198);
            v202 = (int *)(v192 + 4 * (*(_DWORD *)(v190 + 4 * v200) + v201));
            v203 = (char *)v193 + v287 + v289 - v195;
            v204 = v128;
            do
            {
              v205 = a7[v194];
              if (v199 < v205 && v196 >= v205)
              {
                v207 = v197 - (v196 - v205);
                if (v207 >= v126)
                  v207 = v126;
                if (v207 < 8)
                {
                  v212 = (unsigned __int8 *)v193 + v196 - v205;
                  v211 = (unsigned __int8 *)v134;
                  if (v207)
                  {
LABEL_286:
                    v213 = &v212[v207];
                    while (*v212 == *v211)
                    {
                      ++v211;
                      ++v212;
                      if (!--v207)
                      {
                        v212 = v213;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v208 = 0;
                  v209 = &v203[-v205];
                  do
                  {
                    v210 = *(_QWORD *)&v209[v208 * 8] ^ v134[v208];
                    if (v210)
                    {
                      v214 = v208 * 8 + (__clz(__rbit64(v210)) >> 3);
                      goto LABEL_292;
                    }
                    v207 -= 8;
                    ++v208;
                  }
                  while (v207 > 7);
                  v211 = (unsigned __int8 *)&v134[v208];
                  v212 = (unsigned __int8 *)&v209[v208 * 8];
                  if (v207)
                    goto LABEL_286;
                }
                v214 = v212 - ((unsigned __int8 *)v193 + v196 - v205);
LABEL_292:
                v215 = 135 * v214 + 1935;
                if (v214 >= 2 && v35 < v215)
                {
                  if (v194)
                    v215 -= ((0x1CA10u >> (v194 & 0xE)) & 0xE) + 39;
                  if (v35 < v215)
                  {
                    if (v214 > v128)
                      v128 = v214;
                    v204 = v214;
                    v293 = a7[v194];
                    v35 = v215;
                  }
                }
              }
              ++v194;
            }
            while (v194 != 4);
            if (v201 != 0xFFFF)
            {
              do
              {
                v218 = *v202++;
                v217 = v218;
                v219 = v218 & 0x7FFFFFFF;
                v220 = v196 - v219;
                v221 = v197 - v219;
                if (v197 - v219 >= v126)
                  v221 = v126;
                v222 = v128 + v132;
                v224 = v220 > v76 || v222 > a4 || v128 >= v221;
                if (!v224 && *(unsigned __int8 *)(a3 + v222) == *((unsigned __int8 *)v193 + v128 + v219))
                {
                  v225 = (unsigned __int8 *)v193 + v219;
                  if (v221 < 8)
                  {
                    v229 = (unsigned __int8 *)v134;
                    v228 = (unsigned __int8 *)v193 + v219;
                  }
                  else
                  {
                    v226 = 0;
                    do
                    {
                      v227 = *(_QWORD *)&v225[v226 * 8] ^ v134[v226];
                      if (v227)
                      {
                        v231 = v226 * 8 + (__clz(__rbit64(v227)) >> 3);
                        goto LABEL_332;
                      }
                      v221 -= 8;
                      ++v226;
                    }
                    while (v221 > 7);
                    v228 = &v225[v226 * 8];
                    if (!v221)
                      goto LABEL_330;
                    v229 = (unsigned __int8 *)&v134[v226];
                  }
                  v230 = &v228[v221];
                  while (*v228 == *v229)
                  {
                    ++v229;
                    ++v228;
                    if (!--v221)
                    {
                      v228 = v230;
                      break;
                    }
                  }
LABEL_330:
                  v231 = v228 - v225;
LABEL_332:
                  if (v231 >= 4)
                  {
                    v232 = 135 * v231 - 30 * (__clz(v220) ^ 0x1F) + 1920;
                    if (v35 < v232)
                    {
                      v204 = v231;
                      v293 = v220;
                      v35 = v232;
                      v128 = v231;
                    }
                  }
                }
              }
              while ((v217 & 0x80000000) == 0);
            }
            ++v185;
            v128 = v204;
          }
          while (v185 != v290);
        }
        else
        {
          v204 = v128;
        }
        v233 = v293;
        if (v35 < v278 + 175)
          break;
        ++v279;
        if (v277 > 2)
        {
          v17 = v284;
          v234 = v285;
          goto LABEL_357;
        }
        v122 = v277 + 1;
        v124 = v276 + 1;
        v283 = v293;
        v93 = v204;
        v20 = v126;
        v234 = v285;
        v123 = v285;
        v17 = v284;
        if (v281 + 9 >= v272)
          goto LABEL_357;
      }
      v237 = v281 + v273;
      if (v281 + v273 >= v274)
        v237 = v274;
      v275 = v237;
      v233 = v283;
      v17 = v284;
      v204 = v271;
      v234 = v281;
LABEL_357:
      if (v233 > v275 + v267)
        goto LABEL_358;
      v243 = *a7;
      if (v233 != v243)
        break;
      LOWORD(v239) = 0;
      LODWORD(v242) = 0;
      *(_DWORD *)v270 = v279;
      *(_DWORD *)(v270 + 4) = v204;
      v13 = v272;
LABEL_368:
      *(_WORD *)(v270 + 14) = v239;
      *(_DWORD *)(v270 + 8) = v242;
      if (v279 > 5)
      {
        if (v279 > 0x81)
        {
          if (v279 > 0x841)
          {
            if (v279 >> 1 >= 0xC21)
            {
              if (v279 < 0x5842)
                LOWORD(v248) = 22;
              else
                LOWORD(v248) = 23;
            }
            else
            {
              LOWORD(v248) = 21;
            }
          }
          else
          {
            v248 = (__clz(v279 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v249 = (__clz(v279 - 2) ^ 0x1F) - 1;
          v248 = ((v279 - 2) >> v249) + 2 * v249 + 2;
        }
      }
      else
      {
        LOWORD(v248) = v279;
      }
      v255 = (unint64_t)v204 >> 1;
      if (v255 > 4)
      {
        if (v255 > 0x42)
        {
          if (v255 > 0x422)
            LOWORD(v256) = 23;
          else
            v256 = (__clz(v204 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v257 = (int)v204 - 6;
          v258 = (__clz(v257) ^ 0x1F) - 1;
          v256 = (v257 >> v258) + 2 * v258 + 4;
        }
      }
      else
      {
        LOWORD(v256) = v204 - 2;
      }
      v259 = v256 & 7 | (8 * (v248 & 7));
      if ((v239 & 0x3FF) != 0 || (unsigned __int16)v248 > 7u || (unsigned __int16)v256 > 0xFu)
      {
        v261 = 3 * ((unsigned __int16)v248 >> 3) + ((unsigned __int16)(v256 & 0xFFF8) >> 3);
        v260 = ((((0x520D40u >> (2 * v261)) & 0xC0) + (v261 << 6)) | v259) + 64;
      }
      else
      {
        LOWORD(v260) = v259 | 0x40;
        if ((v256 & 0xFFF8) == 0)
          LOWORD(v260) = v256 & 7 | (8 * (v248 & 7));
      }
      *(_WORD *)(v270 + 12) = v260;
      *a11 += v279;
      v262 = v234 + 2;
      v235 = v234 + v204;
      v263 = v269;
      if (v234 + v204 < v269)
        v263 = v234 + v204;
      if (v233 < v204 >> 2)
      {
        if (v262 <= v235 - 4 * v233)
          v262 = v235 - 4 * v233;
        if (v263 < v262)
          v262 = v263;
      }
      v16 = v268 + 2 * v204 + v234;
      result = v270 + 16;
      if (v262 < v263)
      {
        do
        {
          *(_DWORD *)(v17
                    + 4
                    * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v262 & a4))) >> 32) >> 12)
                      + (v262 & 0x18)) & 0xFFFFF)) = v262;
          ++v262;
        }
        while (v263 != v262);
      }
      v12 = 0;
LABEL_410:
      v11 = v235;
      if (v235 + 8 >= v13)
        goto LABEL_417;
    }
    v250 = a7[1];
    v13 = v272;
    if (v233 == v250)
    {
      v239 = 1;
      goto LABEL_360;
    }
    v251 = v233 + 3;
    v252 = v233 + 3 - v243;
    if (v252 > 6)
    {
      if (v251 - v250 > 6)
      {
        if (v233 == a7[2])
        {
          v239 = 2;
        }
        else
        {
          if (v233 == a7[3])
            v239 = 3;
          else
LABEL_358:
            v239 = v233 + 15;
          v13 = v272;
        }
LABEL_360:
        if (v233 <= v275 + v267 && v239)
        {
          a7[3] = a7[2];
          *(_QWORD *)(a7 + 1) = *(_QWORD *)a7;
          *a7 = v233;
        }
        *(_DWORD *)v270 = v279;
        *(_DWORD *)(v270 + 4) = v204;
        v240 = *(unsigned int *)(a5 + 60);
        v241 = v240 + 16;
        if (v240 + 16 <= v239)
        {
          v244 = *(unsigned int *)(a5 + 56);
          v245 = v239 - v240 + (4 << v244) - 16;
          v246 = (__clz(v245) ^ 0x1F) - 1;
          v247 = ((v245 >> v246) & 1 | 2) << v246;
          v239 = ((v245 & ~(-1 << v244))
                + v241
                + ((((v245 >> v246) & 1 | (2 * (v246 - v244))) + 65534) << v244)) | ((v246 - v244) << 10);
          v242 = (v245 - v247) >> v244;
        }
        else
        {
          LODWORD(v242) = 0;
        }
        goto LABEL_368;
      }
      v253 = 4 * (v251 - v250);
      v254 = 266017486;
    }
    else
    {
      v253 = 4 * v252;
      v254 = 158663784;
    }
    v239 = (v254 >> v253) & 0xF;
    goto LABEL_360;
  }
  result = a9;
  v235 = a2;
LABEL_417:
  *a8 = v12 + v13 - v235;
  *a10 += (result - a9) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesDH65(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int32x4_t v18;
  const float *v19;
  int32x4_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t i;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  BOOL v107;
  unint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unint64_t v127;
  unint64_t v128;
  BOOL v129;
  unint64_t v130;
  int v131;
  int v132;
  unint64_t v133;
  BOOL v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  int *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  unint64_t v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  unint64_t v162;
  unint64_t v163;
  BOOL v164;
  BOOL v165;
  int v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  BOOL v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unint64_t v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  unsigned __int8 *v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  BOOL v203;
  uint64_t v204;
  unint64_t v205;
  BOOL v206;
  unint64_t v207;
  BOOL v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t j;
  unint64_t v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  int v245;
  unint64_t v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  BOOL v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  int v283;
  int *v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v289;
  uint64_t v290;
  char *v291;
  unint64_t v292;
  unsigned __int8 *v293;
  unsigned __int8 *v294;
  unsigned __int8 *v295;
  unint64_t v296;
  unint64_t v297;
  int v299;
  int v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  BOOL v306;
  unsigned __int8 *v307;
  uint64_t v308;
  unint64_t v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  unint64_t v313;
  unsigned int v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  unint64_t v320;
  unint64_t v321;
  char v322;
  unint64_t v323;
  unsigned __int8 *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unsigned __int8 *v328;
  unsigned __int8 *v329;
  BOOL v330;
  unsigned int v331;
  unint64_t v332;
  unint64_t v333;
  int v334;
  int v335;
  unint64_t v336;
  unsigned int v337;
  unint64_t v338;
  unint64_t v339;
  int v340;
  int v341;
  unint64_t v342;
  unsigned int v343;
  unint64_t v344;
  int32x2_t v345;
  int v346;
  int32x4_t v347;
  int32x4_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  unint64_t v360;
  char v361;
  unsigned int v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int v365;
  unint64_t v366;
  unsigned int v367;
  int v368;
  unsigned int v369;
  int v370;
  unint64_t v371;
  unint64_t v372;
  int v373;
  int v374;
  unint64_t v375;
  unsigned int v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unsigned int v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;

  v388 = *(_QWORD *)(a6 + 16);
  v13 = *a9;
  v391 = a2 + result;
  v377 = a2 + result - 7;
  if (result <= 7)
    v14 = a2;
  else
    v14 = a2 + result - 7;
  v15 = *(_DWORD *)(a6 + 8);
  v16 = 512;
  if (*(int *)(a6 + 4) < 9)
    v16 = 64;
  v380 = v16;
  v378 = v14;
  v379 = *(_QWORD *)(a6 + 96);
  v17 = *(_DWORD *)(a7 + 112);
  if (v17 >= 5)
  {
    v18 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v18, (int32x4_t)xmmword_19D02CCA0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v18.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v17 >= 0xB)
    {
      v19 = (const float *)(a8 + 1);
      v20 = (int32x4_t)vld1q_dup_f32(v19);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v20, (int32x4_t)xmmword_19D02CCA0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (a2 + 8 >= v391)
  {
    v23 = a10;
    v332 = a2;
    goto LABEL_571;
  }
  v21 = v380 + a2;
  v387 = (1 << v15) - 16;
  v22 = *(_QWORD *)(a7 + 128);
  v390 = *(_QWORD *)(a7 + 136);
  v389 = *(_QWORD *)(a7 + 96);
  v382 = v379 + 1;
  v383 = a5 + 256;
  v23 = a10;
  v406 = a7;
  v412 = a6;
  v417 = a3;
  v400 = v22;
  do
  {
    if (a2 >= v387)
      v24 = v387;
    else
      v24 = a2;
    v25 = a2 + v388;
    if (a2 + v388 >= v387)
      v25 = v387;
    v414 = v25;
    v399 = v13;
    v381 = v23;
    v407 = v21;
    if (!*(_DWORD *)(a6 + 624))
    {
      v28 = 0;
      v394 = 0;
      goto LABEL_24;
    }
    if (!a2)
    {
      v26 = 0;
LABEL_22:
      v27 = 0;
      goto LABEL_23;
    }
    v26 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
    if (a2 == 1)
      goto LABEL_22;
    v27 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_23:
    v394 = v26;
    v28 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v383 + v27) | *(_BYTE *)(a5 + v26)) + 629);
LABEL_24:
    v29 = v391 - a2;
    v30 = *(_QWORD *)(a6 + 8 * v28 + 696);
    v31 = *(_QWORD *)(a6 + 72);
    v32 = a2 & a4;
    v33 = *(int *)(a7 + 112);
    v403 = a2;
    v395 = v28;
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = (unsigned __int8 *)(a3 + v32);
      v39 = 2020;
      v40 = 2020;
      do
      {
        v41 = a8[v34];
        v42 = a2 - v41;
        v43 = v24 < v41 || v42 >= a2;
        v44 = v42 & a4;
        v45 = v35 + v32;
        v46 = v43 || v45 > a4;
        v47 = v44 + v35;
        v48 = v46 || v47 > a4;
        if (!v48 && *(unsigned __int8 *)(a3 + v45) == *(unsigned __int8 *)(a3 + v47))
        {
          v49 = v37;
          v50 = a3 + v44;
          if (v29 < 8)
          {
            v55 = (unsigned __int8 *)(a3 + v44);
            v54 = v38;
            i = v29;
            if (v29)
            {
LABEL_47:
              v56 = &v55[i];
              while (*v55 == *v54)
              {
                ++v54;
                ++v55;
                if (!--i)
                {
                  v55 = v56;
                  break;
                }
              }
              a3 = v417;
            }
          }
          else
          {
            v51 = 0;
            for (i = v29; i > 7; i -= 8)
            {
              v53 = *(_QWORD *)(v50 + v51) ^ *(_QWORD *)&v38[v51];
              if (v53)
              {
                v57 = v51 + (__clz(__rbit64(v53)) >> 3);
                a2 = v403;
                v37 = v49;
                goto LABEL_54;
              }
              v51 += 8;
            }
            v54 = &v38[v51];
            v55 = (unsigned __int8 *)(v50 + v51);
            if (i)
              goto LABEL_47;
          }
          a2 = v403;
          v37 = v49;
          v57 = (unint64_t)&v55[-v50];
LABEL_54:
          if (v57 > 2 || v34 <= 1 && v57 == 2)
          {
            v58 = 135 * v57 + 1935;
            if (v39 >= v58)
            {
              v37 = v49;
            }
            else
            {
              if (v34)
                v59 = v58 - (((0x1CA10u >> (v34 & 0xE)) & 0xE) + 39);
              else
                v59 = 135 * v57 + 1935;
              v37 = v49;
              if (v39 < v59)
              {
                v37 = a8[v34];
                v40 = v59;
                v36 = v57;
                v39 = v59;
                v35 = v57;
              }
            }
          }
        }
        ++v34;
      }
      while (v34 != v33);
    }
    else
    {
      v37 = 0;
      v36 = 0;
      v35 = 0;
      v40 = 2020;
      v39 = 2020;
    }
    v392 = v37;
    v60 = (unsigned __int8 *)(a3 + v32);
    v61 = a3;
    v62 = *(_QWORD *)(a3 + v32);
    v63 = (unint64_t)(v62 * v389) >> 49;
    v64 = *(unsigned int *)(v406 + 104);
    v65 = v390 + 4 * (v63 << *(_DWORD *)(v406 + 108));
    v66 = *(unsigned __int16 *)(v22 + 2 * v63);
    v67 = *(_QWORD *)(v406 + 88);
    v386 = v67;
    if (v66 >= v67)
      v68 = v66 - v67;
    else
      v68 = 0;
    v401 = v40;
    if (v68 < v66)
    {
      v69 = v32 + v61 + 4;
      v70 = *(unsigned __int16 *)(v22 + 2 * v63);
      do
      {
        v71 = *(unsigned int *)(v65 + 4 * (--v70 & v64));
        v72 = v403 - v71;
        if (v403 - v71 > v24)
          break;
        if (v35 + v32 <= a4)
        {
          v73 = v71 & a4;
          if (v73 + v35 <= a4
            && *(unsigned __int8 *)(v417 + v35 + v32) == *(unsigned __int8 *)(v417 + v73 + v35)
            && *(_DWORD *)(v417 + v73) == (_DWORD)v62)
          {
            v74 = v73 + v417 + 4;
            v75 = v39;
            if (v29 - 4 < 8)
            {
              v80 = (unsigned __int8 *)(v73 + v417 + 4);
              v79 = (unsigned __int8 *)v69;
              v77 = v29 - 4;
              if (v29 != 4)
              {
LABEL_82:
                v81 = &v80[v77];
                while (*v80 == *v79)
                {
                  ++v79;
                  ++v80;
                  if (!--v77)
                  {
                    v80 = v81;
                    break;
                  }
                }
              }
            }
            else
            {
              v76 = 0;
              v77 = v29 - 4;
              do
              {
                v78 = *(_QWORD *)(v74 + v76) ^ *(_QWORD *)(v69 + v76);
                if (v78)
                {
                  v82 = (unsigned __int8 *)(v76 + (__clz(__rbit64(v78)) >> 3));
                  goto LABEL_88;
                }
                v77 -= 8;
                v76 += 8;
              }
              while (v77 > 7);
              v79 = (unsigned __int8 *)(v69 + v76);
              v80 = (unsigned __int8 *)(v74 + v76);
              if (v77)
                goto LABEL_82;
            }
            v82 = &v80[-v74];
LABEL_88:
            v39 = v75;
            v83 = (unint64_t)(v82 + 4);
            v84 = __clz(v72);
            v22 = v400;
            if (v75 < 135 * v83 - 30 * (v84 ^ 0x1F) + 1920)
            {
              v392 = v72;
              v401 = 135 * v83 - 30 * (v84 ^ 0x1F) + 1920;
              v36 = v83;
              v39 = v401;
              v35 = v83;
            }
          }
        }
      }
      while (v70 > v68);
    }
    v85 = v401;
    *(_DWORD *)(v65 + 4 * (v64 & v66)) = v403;
    *(_WORD *)(v22 + 2 * v63) = v66 + 1;
    if (v401 == 2020)
    {
      v86 = *(_QWORD *)(v406 + 120);
      v87 = *(_QWORD *)(v86 + 40);
      v88 = *(_QWORD *)(v86 + 48);
      if (v88 >= v87 >> 7)
      {
        v405 = 0;
        v93 = ((506832829 * *(_DWORD *)v60) >> 17) & 0x7FFE;
        v94 = *(_QWORD *)(v30 + 32);
        v95 = 1;
        v96 = v36;
        v85 = 2020;
        v97 = v392;
        a6 = v412;
        do
        {
          v98 = v95;
          *(_QWORD *)(v86 + 40) = ++v87;
          v99 = *(unsigned __int8 *)(v94 + v93);
          if (!*(_BYTE *)(v94 + v93) || v29 < v99)
            goto LABEL_122;
          v100 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v30 + 168)
                                   + *(unsigned int *)(*(_QWORD *)v30 + 4 * *(unsigned __int8 *)(v94 + v93) + 32)
                                   + *(unsigned __int16 *)(*(_QWORD *)(v30 + 24) + 2 * v93)
                                   * (unint64_t)*(unsigned __int8 *)(v94 + v93));
          if (v99 < 8)
          {
            v104 = v85;
            v102 = *(unsigned __int8 *)(v94 + v93);
            v105 = v60;
          }
          else
          {
            v101 = 0;
            v102 = *(unsigned __int8 *)(v94 + v93);
            do
            {
              v103 = *(_QWORD *)&v60[v101] ^ *(_QWORD *)&v100[v101];
              if (v103)
              {
                v36 = v101 + (__clz(__rbit64(v103)) >> 3);
                goto LABEL_116;
              }
              v102 -= 8;
              v101 += 8;
            }
            while (v102 > 7);
            v104 = v85;
            v105 = &v60[v101];
            if (!v102)
              goto LABEL_114;
            v100 += v101;
          }
          v106 = &v105[v102];
          while (*v105 == *v100)
          {
            ++v100;
            ++v105;
            if (!--v102)
            {
              v105 = v106;
              break;
            }
          }
LABEL_114:
          v36 = v105 - v60;
          a6 = v412;
          v85 = v104;
LABEL_116:
          v107 = v36 && v36 + *(unsigned int *)(v30 + 12) > v99;
          if (v107
            && (v89 = v382
                    + v414
                    + *(unsigned __int16 *)(*(_QWORD *)(v30 + 24) + 2 * v93)
                    + ((((*(_QWORD *)(v30 + 16) >> (6 * (v99 - v36))) & 0x3FLL)
                      + 4 * (v99 - v36)) << *(_BYTE *)(*(_QWORD *)v30 + v99)),
                v89 <= v31))
          {
            v108 = 135 * v36 - 30 * (__clz(v89) ^ 0x1F) + 1920;
            if (v108 >= v85)
            {
              v405 = v99 - v36;
              *(_QWORD *)(v86 + 48) = ++v88;
              v85 = v108;
            }
            else
            {
              v89 = v97;
              v36 = v96;
            }
          }
          else
          {
LABEL_122:
            v89 = v97;
            v36 = v96;
          }
          v95 = 0;
          ++v93;
          v96 = v36;
          v97 = v89;
        }
        while ((v98 & 1) != 0);
        goto LABEL_96;
      }
      v405 = 0;
      v85 = 2020;
    }
    else
    {
      v405 = 0;
    }
    a6 = v412;
    v89 = v392;
LABEL_96:
    if (v29 < 0x20)
    {
      a3 = v417;
      goto LABEL_176;
    }
    v90 = v406;
    v91 = *(_QWORD *)(v406 + 160);
    v92 = v403;
    if (v91 > v403)
    {
      a3 = v417;
      goto LABEL_175;
    }
    v109 = *(_DWORD *)(v406 + 172);
    v110 = *(_DWORD *)(v406 + 176);
    v111 = *(_DWORD *)(v406 + 144);
    a3 = v417;
    do
    {
      v112 = *(unsigned __int8 *)(a3 + (v91 & a4));
      v113 = *(unsigned __int8 *)(a3 + ((v91 + 32) & a4));
      if ((v111 & 0x3F000000) != 0)
        goto LABEL_173;
      v114 = v89;
      v115 = *(_QWORD *)(v90 + 152);
      v116 = *(unsigned int *)(v115 + 4 * (v111 & 0x3FFFFFFF));
      *(_DWORD *)(v115 + 4 * (v111 & 0x3FFFFFFF)) = v91;
      if (v91 != v92 || (_DWORD)v116 == -1)
        goto LABEL_134;
      v117 = (v403 - v116);
      if (v24 < v117)
      {
        v90 = v406;
LABEL_134:
        v92 = v403;
        v89 = v114;
        goto LABEL_173;
      }
      v118 = 0;
      v119 = 0;
      v120 = a3 + (v116 & a4);
      do
      {
        v121 = *(_QWORD *)(v120 + v119) ^ *(_QWORD *)&v60[v119];
        if (v121)
        {
          v127 = v119 + (__clz(__rbit64(v121)) >> 3);
          goto LABEL_146;
        }
        v119 += 8;
        v118 -= 8;
        v122 = v29 + v118;
      }
      while (v29 + v118 > 7);
      v123 = (unsigned __int8 *)(v120 + v119);
      v124 = v29 - v119;
      if (v29 != v119)
      {
        v125 = &v60[v119];
        v126 = &v123[v124];
        while (*v123 == *v125)
        {
          ++v125;
          ++v123;
          if (!--v122)
          {
            v123 = v126;
            break;
          }
        }
        a3 = v417;
      }
      v127 = (unint64_t)&v123[-v120];
LABEL_146:
      v128 = 135 * v127 - 30 * (__clz(v117) ^ 0x1F) + 1920;
      v129 = v128 > v85;
      if (v128 > v85)
        v130 = v117;
      else
        v130 = v114;
      if (v128 <= v85)
        v128 = v85;
      v131 = v405;
      if (v129)
        v132 = 0;
      else
        v132 = v405;
      if (v129)
        v133 = v127;
      else
        v133 = v36;
      v134 = v127 >= 4 && v127 > v36;
      if (v134)
        v114 = v130;
      if (v134)
        v85 = v128;
      if (v134)
        v131 = v132;
      v405 = v131;
      if (v134)
        v36 = v133;
      v89 = v114;
      v90 = v406;
      v92 = v403;
LABEL_173:
      v111 = v113 + v109 * v111 + v110 * ~v112 + 1;
      ++v91;
    }
    while (v91 <= v92);
    *(_DWORD *)(v90 + 144) = v111;
LABEL_175:
    *(_QWORD *)(v90 + 160) = v92 + 1;
LABEL_176:
    v413 = *(_QWORD *)(a6 + 88);
    v410 = *(_QWORD *)(a6 + 96);
    v135 = v89;
    if (v413)
    {
      v136 = 0;
      v415 = *(_QWORD *)(a6 + 96) + v414;
      do
      {
        v137 = a6 + 8 * v136;
        v138 = *(_QWORD *)(v137 + 104);
        v139 = *(_DWORD *)(v138 + 16);
        v140 = *(_DWORD *)(v138 + 20);
        v141 = v138 + 24;
        v142 = v138 + 24 + 4 * (1 << v140);
        v143 = v142 + 2 * (1 << v139);
        v144 = (_QWORD *)(v143 + 4 * *(unsigned int *)(v138 + 4));
        v145 = v85;
        if (*(_DWORD *)v138 != -558043680)
          v144 = (_QWORD *)*v144;
        v146 = 0;
        v147 = v415 - *(_QWORD *)(v137 + 360);
        v148 = *(unsigned int *)(v138 + 8);
        v149 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v60 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v138 + 12)))) >> -(char)v139;
        v150 = *(unsigned __int16 *)(v142 + 2 * v149);
        v151 = (int *)(v143
                     + 4
                     * (*(_DWORD *)(v141 + 4 * ((0xFFFFFFFF >> -(char)v140) & v149)) + v150));
        v152 = v36;
        do
        {
          v153 = a8[v146];
          if (v147 - v148 < v153 && v147 >= v153)
          {
            if (v148 - (v147 - v153) >= v29)
              v155 = v29;
            else
              v155 = v148 - (v147 - v153);
            v156 = (unsigned __int8 *)v144 + v147 - v153;
            if (v155 < 8)
            {
              v160 = (unsigned __int8 *)v144 + v147 - v153;
              v159 = v60;
              if (v155)
              {
LABEL_196:
                v161 = &v160[v155];
                while (*v160 == *v159)
                {
                  ++v159;
                  ++v160;
                  if (!--v155)
                  {
                    v160 = v161;
                    break;
                  }
                }
              }
            }
            else
            {
              v157 = 0;
              do
              {
                v158 = *(_QWORD *)&v156[v157] ^ *(_QWORD *)&v60[v157];
                if (v158)
                {
                  v162 = v157 + (__clz(__rbit64(v158)) >> 3);
                  goto LABEL_202;
                }
                v155 -= 8;
                v157 += 8;
              }
              while (v155 > 7);
              v159 = &v60[v157];
              v160 = &v156[v157];
              if (v155)
                goto LABEL_196;
            }
            v162 = v160 - v156;
LABEL_202:
            v163 = 135 * v162 + 1935;
            v164 = v162 < 2 || v145 >= v163;
            a3 = v417;
            if (!v164)
            {
              if (v146)
                v163 -= ((0x1CA10u >> (v146 & 0xE)) & 0xE) + 39;
              if (v145 < v163)
              {
                v405 = 0;
                if (v162 > v36)
                  v36 = v162;
                v135 = a8[v146];
                v145 = v163;
                v152 = v162;
              }
            }
          }
          ++v146;
        }
        while (v146 != 4);
        v165 = v150 == 0xFFFF;
        v85 = v145;
        if (!v165)
        {
          do
          {
            v167 = *v151++;
            v166 = v167;
            v168 = v167 & 0x7FFFFFFF;
            v169 = v147 - v168;
            if (v148 - v168 >= v29)
              v170 = v29;
            else
              v170 = v148 - v168;
            v171 = v36 + v32;
            v173 = v169 > v31 || v171 > a4 || v36 >= v170;
            if (!v173 && *(unsigned __int8 *)(a3 + v171) == *((unsigned __int8 *)v144 + v36 + v168))
            {
              v174 = (unsigned __int8 *)v144 + v168;
              if (v170 < 8)
              {
                v178 = v60;
                v177 = v174;
              }
              else
              {
                v175 = 0;
                do
                {
                  v176 = *(_QWORD *)&v174[v175] ^ *(_QWORD *)&v60[v175];
                  if (v176)
                  {
                    v180 = v175 + (__clz(__rbit64(v176)) >> 3);
                    goto LABEL_244;
                  }
                  v170 -= 8;
                  v175 += 8;
                }
                while (v170 > 7);
                v177 = &v174[v175];
                if (!v170)
                  goto LABEL_242;
                v178 = &v60[v175];
              }
              v179 = &v177[v170];
              while (*v177 == *v178)
              {
                ++v178;
                ++v177;
                if (!--v170)
                {
                  v177 = v179;
                  break;
                }
              }
              a3 = v417;
LABEL_242:
              v180 = v177 - v174;
LABEL_244:
              if (v180 >= 4)
              {
                v181 = 135 * v180 - 30 * (__clz(v169) ^ 0x1F) + 1920;
                if (v85 < v181)
                {
                  v405 = 0;
                  v135 = v169;
                  v85 = v181;
                  v152 = v180;
                  v36 = v180;
                }
              }
            }
          }
          while ((v166 & 0x80000000) == 0);
        }
        ++v136;
        result = v152;
        v36 = v152;
      }
      while (v136 != v413);
    }
    else
    {
      result = v36;
    }
    if (v85 < 0x7E5)
    {
      v13 = v399 + 1;
      v332 = v403 + 1;
      v21 = v407;
      if (v403 + 1 > v407)
      {
        if (v332 <= v407 + 4 * v380)
        {
          v339 = v403 + 9;
          if (v403 + 9 >= v377)
            v339 = v377;
          if (v332 < v339)
          {
            a7 = v406;
            v340 = *(_DWORD *)(v406 + 104);
            v341 = *(_DWORD *)(v406 + 108);
            v22 = v400;
            result = v390;
            do
            {
              v342 = (unint64_t)(*(_QWORD *)(a3 + (v332 & a4)) * v389) >> 49;
              v343 = *(unsigned __int16 *)(v400 + 2 * v342);
              *(_WORD *)(v400 + 2 * v342) = v343 + 1;
              *(_DWORD *)(v390 + 4 * ((v342 << v341) + (v340 & v343))) = v332;
              v13 += 2;
              v332 += 2;
            }
            while (v332 < v339);
            goto LABEL_507;
          }
        }
        else
        {
          v333 = v403 + 17;
          if (v403 + 17 >= v377)
            v333 = v377;
          if (v332 < v333)
          {
            a7 = v406;
            v334 = *(_DWORD *)(v406 + 104);
            v335 = *(_DWORD *)(v406 + 108);
            v22 = v400;
            result = v390;
            do
            {
              v336 = (unint64_t)(*(_QWORD *)(a3 + (v332 & a4)) * v389) >> 49;
              v337 = *(unsigned __int16 *)(v400 + 2 * v336);
              *(_WORD *)(v400 + 2 * v336) = v337 + 1;
              *(_DWORD *)(v390 + 4 * ((v336 << v335) + (v334 & v337))) = v332;
              v13 += 4;
              v332 += 4;
            }
            while (v332 < v333);
            goto LABEL_507;
          }
        }
      }
      a7 = v406;
      v22 = v400;
LABEL_507:
      v23 = v381;
      goto LABEL_564;
    }
    v182 = 0;
    v183 = v403;
    v184 = v388 + 1 + v403;
    a7 = v406;
    v185 = v135;
    while (1)
    {
      if (v184 >= v387)
        v186 = v387;
      else
        v186 = v184;
      v411 = v186;
      v187 = v29 - 1;
      v188 = result - 1;
      if (result - 1 >= v29 - 1)
        v188 = v29 - 1;
      if (*(int *)(a6 + 4) >= 5)
        v189 = 0;
      else
        v189 = v188;
      v190 = v183 + 1;
      if (v183 + 1 < v387)
        v191 = v183 + 1;
      else
        v191 = v387;
      v192 = v190 + v388;
      if (v190 + v388 >= v387)
        v192 = v387;
      v396 = v184;
      v397 = v192;
      v404 = v183;
      v393 = v185;
      v385 = result;
      v398 = v182;
      if (*(_DWORD *)(a6 + 624))
      {
        v193 = *(unsigned __int8 *)(a6
                                  + (*(_BYTE *)(v383 + v394) | *(_BYTE *)(a5
                                                                                         + *(unsigned __int8 *)(a3 + (v183 & a4))))
                                  + 629);
        v394 = *(unsigned __int8 *)(a3 + (v183 & a4));
      }
      else
      {
        v193 = v395;
      }
      v408 = *(_QWORD *)(a6 + 8 * v193 + 696);
      v194 = v190 & a4;
      v195 = *(int *)(a7 + 112);
      v416 = v183 + 1;
      v395 = v193;
      v402 = v85;
      if ((_DWORD)v195)
      {
        v196 = 0;
        v197 = 0;
        v198 = 0;
        v199 = (_QWORD *)(a3 + v194);
        v200 = 2020;
        v85 = 2020;
        do
        {
          v201 = a8[v196];
          v202 = v190 - v201;
          v203 = v191 < v201 || v202 >= v190;
          v204 = v202 & a4;
          v205 = v189 + v194;
          v206 = v203 || v205 > a4;
          v207 = v204 + v189;
          v208 = v206 || v207 > a4;
          if (!v208 && *(unsigned __int8 *)(a3 + v205) == *(unsigned __int8 *)(a3 + v207))
          {
            v209 = (_QWORD *)(a3 + v204);
            if (v187 < 8)
            {
              v212 = v209;
              v211 = v199;
              v214 = v29 - 1;
              if (v29 != 1)
              {
LABEL_291:
                v215 = (_QWORD *)((char *)v212 + v214);
                while (*(unsigned __int8 *)v212 == *(unsigned __int8 *)v211)
                {
                  v211 = (_QWORD *)((char *)v211 + 1);
                  v212 = (_QWORD *)((char *)v212 + 1);
                  if (!--v214)
                  {
                    v212 = v215;
                    break;
                  }
                }
                v190 = v416;
                a3 = v417;
              }
            }
            else
            {
              v210 = 0;
              v211 = v199;
              v212 = v209;
              do
              {
                v213 = *v212 ^ *v211;
                if (v213)
                {
                  v216 = (__clz(__rbit64(v213)) >> 3) - v210;
                  v190 = v416;
                  goto LABEL_298;
                }
                ++v212;
                ++v211;
                v210 -= 8;
                v214 = v29 + v210 - 1;
              }
              while (v214 > 7);
              v190 = v416;
              if (v214)
                goto LABEL_291;
            }
            v216 = (char *)v212 - (char *)v209;
LABEL_298:
            if (v216 > 2 || v196 <= 1 && v216 == 2)
            {
              v217 = 135 * v216 + 1935;
              if (v200 < v217)
              {
                if (v196)
                  v217 -= ((0x1CA10u >> (v196 & 0xE)) & 0xE) + 39;
                if (v200 < v217)
                {
                  v198 = v216;
                  v197 = a8[v196];
                  v85 = v217;
                  v200 = v217;
                  v189 = v216;
                }
              }
            }
          }
          ++v196;
        }
        while (v196 != v195);
      }
      else
      {
        v198 = 0;
        v197 = 0;
        v85 = 2020;
        v200 = 2020;
      }
      v218 = (unsigned __int8 *)(a3 + v194);
      v219 = *(_QWORD *)(a3 + v194);
      v220 = (unint64_t)(v219 * v389) >> 49;
      v221 = v390 + 4 * (v220 << *(_DWORD *)(a7 + 108));
      v222 = *(unsigned __int16 *)(v400 + 2 * v220);
      if (v222 >= v386)
        v223 = v222 - v386;
      else
        v223 = 0;
      if (v223 < v222)
      {
        v224 = v29 - 5;
        v225 = *(unsigned int *)(a7 + 104);
        v226 = v194 + a3 + 4;
        v227 = *(unsigned __int16 *)(v400 + 2 * v220);
        do
        {
          v228 = *(unsigned int *)(v221 + 4 * (--v227 & v225));
          v229 = v416 - v228;
          if (v416 - v228 > v191)
            break;
          if (v189 + v194 <= a4)
          {
            v230 = v228 & a4;
            if (v230 + v189 <= a4
              && *(unsigned __int8 *)(v417 + v189 + v194) == *(unsigned __int8 *)(v417 + v230 + v189)
              && *(_DWORD *)(v417 + v230) == (_DWORD)v219)
            {
              v231 = v230 + v417 + 4;
              v232 = v200;
              if (v224 < 8)
              {
                v237 = (unsigned __int8 *)(v230 + v417 + 4);
                v236 = (unsigned __int8 *)v226;
                j = v224;
                if (v224)
                {
LABEL_324:
                  v238 = &v237[j];
                  while (*v237 == *v236)
                  {
                    ++v236;
                    ++v237;
                    if (!--j)
                    {
                      v237 = v238;
                      break;
                    }
                  }
                  a7 = v406;
                }
              }
              else
              {
                v233 = 0;
                for (j = v224; j > 7; j -= 8)
                {
                  v235 = *(_QWORD *)(v231 + v233) ^ *(_QWORD *)(v226 + v233);
                  if (v235)
                  {
                    v239 = (unsigned __int8 *)(v233 + (__clz(__rbit64(v235)) >> 3));
                    goto LABEL_331;
                  }
                  v233 += 8;
                }
                v236 = (unsigned __int8 *)(v226 + v233);
                v237 = (unsigned __int8 *)(v231 + v233);
                if (j)
                  goto LABEL_324;
              }
              v239 = &v237[-v231];
LABEL_331:
              v240 = (unint64_t)(v239 + 4);
              v241 = 135 * v240 - 30 * (__clz(v229) ^ 0x1F) + 1920;
              v200 = v232;
              v43 = v232 >= v241;
              v220 = (unint64_t)(v219 * v389) >> 49;
              v224 = v29 - 5;
              if (!v43)
              {
                v198 = v240;
                v197 = v229;
                v85 = v241;
                v200 = v241;
                v189 = v240;
              }
            }
          }
        }
        while (v227 > v223);
      }
      *(_DWORD *)(v221 + 4 * (*(_DWORD *)(a7 + 104) & v222)) = v416;
      *(_WORD *)(v400 + 2 * v220) = v222 + 1;
      if (v85 == 2020)
      {
        v242 = *(_QWORD *)(a7 + 120);
        v244 = *(_QWORD *)(v242 + 40);
        v243 = *(_QWORD *)(v242 + 48);
        if (v243 >= v244 >> 7)
        {
          v245 = 0;
          v316 = ((506832829 * *(_DWORD *)v218) >> 17) & 0x7FFE;
          v317 = *(_QWORD *)(v408 + 32);
          v318 = v408;
          v319 = 1;
          v85 = 2020;
          v320 = v197;
          v321 = v198;
          do
          {
            v322 = v319;
            *(_QWORD *)(v242 + 40) = ++v244;
            v323 = *(unsigned __int8 *)(v317 + v316);
            if (!*(_BYTE *)(v317 + v316) || v187 < v323)
              goto LABEL_482;
            v324 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v318 + 168)
                                     + *(unsigned int *)(*(_QWORD *)v318 + 4 * *(unsigned __int8 *)(v317 + v316) + 32)
                                     + *(unsigned __int16 *)(*(_QWORD *)(v318 + 24) + 2 * v316)
                                     * (unint64_t)*(unsigned __int8 *)(v317 + v316));
            if (v323 < 8)
            {
              v326 = *(unsigned __int8 *)(v317 + v316);
              v328 = v218;
            }
            else
            {
              v325 = 0;
              v326 = *(unsigned __int8 *)(v317 + v316);
              do
              {
                v327 = *(_QWORD *)&v218[v325] ^ *(_QWORD *)&v324[v325];
                if (v327)
                {
                  v198 = v325 + (__clz(__rbit64(v327)) >> 3);
                  a7 = v406;
                  goto LABEL_476;
                }
                v326 -= 8;
                v325 += 8;
              }
              while (v326 > 7);
              v328 = &v218[v325];
              if (!v326)
                goto LABEL_474;
              v324 += v325;
            }
            v329 = &v328[v326];
            while (*v328 == *v324)
            {
              ++v324;
              ++v328;
              if (!--v326)
              {
                v328 = v329;
                break;
              }
            }
LABEL_474:
            a7 = v406;
            v198 = v328 - v218;
LABEL_476:
            v330 = v198 && v198 + *(unsigned int *)(v318 + 12) > v323;
            if (v330
              && (v197 = v382
                       + v397
                       + *(unsigned __int16 *)(*(_QWORD *)(v318 + 24) + 2 * v316)
                       + ((((*(_QWORD *)(v318 + 16) >> (6 * (v323 - v198))) & 0x3FLL)
                         + 4 * (v323 - v198)) << *(_BYTE *)(*(_QWORD *)v318 + v323)),
                  v197 <= v31))
            {
              v331 = __clz(v197) ^ 0x1F;
              if (135 * v198 - 30 * v331 + 1920 >= v85)
              {
                v245 = v323 - v198;
                *(_QWORD *)(v242 + 48) = ++v243;
                v85 = 135 * v198 - 30 * v331 + 1920;
              }
              else
              {
                v198 = v321;
                v197 = v320;
              }
              v318 = v408;
            }
            else
            {
LABEL_482:
              v198 = v321;
              v197 = v320;
            }
            v319 = 0;
            ++v316;
            v320 = v197;
            v321 = v198;
          }
          while ((v322 & 1) != 0);
        }
        else
        {
          v245 = 0;
          v85 = 2020;
        }
      }
      else
      {
        v245 = 0;
      }
      a3 = v417;
      if (v187 >= 0x20)
      {
        v246 = *(_QWORD *)(a7 + 160);
        if (v246 <= v416)
        {
          v247 = *(_DWORD *)(a7 + 172);
          v248 = *(_DWORD *)(a7 + 176);
          v249 = *(_DWORD *)(a7 + 144);
          do
          {
            v250 = *(unsigned __int8 *)(a3 + (v246 & a4));
            v251 = *(unsigned __int8 *)(a3 + ((v246 + 32) & a4));
            if ((v249 & 0x3F000000) == 0)
            {
              v252 = *(_QWORD *)(v406 + 152);
              v253 = *(unsigned int *)(v252 + 4 * (v249 & 0x3FFFFFFF));
              *(_DWORD *)(v252 + 4 * (v249 & 0x3FFFFFFF)) = v246;
              if (v246 == v416 && (_DWORD)v253 != -1)
              {
                v254 = (v416 - v253);
                if (v191 >= v254)
                {
                  v255 = 0;
                  v256 = 0;
                  v257 = v417 + (v253 & a4);
                  do
                  {
                    v258 = *(_QWORD *)(v257 + v256) ^ *(_QWORD *)&v218[v256];
                    if (v258)
                    {
                      v262 = v256 + (__clz(__rbit64(v258)) >> 3);
                      goto LABEL_355;
                    }
                    v256 += 8;
                    v255 -= 8;
                    v259 = v29 + v255 - 1;
                  }
                  while (v259 > 7);
                  v260 = (unsigned __int8 *)(v257 + v256);
                  if (v256 + 1 != v29)
                  {
                    v261 = &v218[v256];
                    while (*v260 == *v261)
                    {
                      ++v261;
                      ++v260;
                      if (!--v259)
                      {
                        v260 = (unsigned __int8 *)(v257 - 8 + v29 + 7);
                        break;
                      }
                    }
                  }
                  v262 = (unint64_t)&v260[-v257];
LABEL_355:
                  v263 = 135 * v262 - 30 * (__clz(v254) ^ 0x1F) + 1920;
                  if (v263 > v85)
                    v264 = v262;
                  else
                    v264 = v198;
                  if (v263 > v85)
                    v265 = v254;
                  else
                    v265 = v197;
                  if (v263 > v85)
                  {
                    v266 = 0;
                  }
                  else
                  {
                    v263 = v85;
                    v266 = v245;
                  }
                  v267 = v262 >= 4 && v262 > v198;
                  if (v267)
                    v198 = v264;
                  if (v267)
                    v197 = v265;
                  if (v267)
                    v85 = v263;
                  if (v267)
                    v245 = v266;
                }
                a3 = v417;
              }
            }
            v249 = v251 + v247 * v249 + v248 * ~v250 + 1;
            ++v246;
          }
          while (v246 <= v416);
          a7 = v406;
          *(_DWORD *)(v406 + 144) = v249;
        }
        *(_QWORD *)(a7 + 160) = v404 + 2;
      }
      if (v413)
      {
        v268 = 0;
        v409 = v397 + v410;
        do
        {
          v269 = v412 + 8 * v268;
          v270 = *(_QWORD *)(v269 + 104);
          v271 = *(_DWORD *)(v270 + 16);
          v272 = *(_DWORD *)(v270 + 20);
          v273 = v270 + 24;
          v274 = v270 + 24 + 4 * (1 << v272);
          v275 = v274 + 2 * (1 << v271);
          v276 = (_QWORD *)(v275 + 4 * *(unsigned int *)(v270 + 4));
          if (*(_DWORD *)v270 != -558043680)
            v276 = (_QWORD *)*v276;
          v277 = 0;
          v278 = *(_QWORD *)(v269 + 360);
          v279 = v409 - v278;
          v280 = *(unsigned int *)(v270 + 8);
          v281 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v218 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v270 + 12)))) >> -(char)v271;
          v282 = v409 - v278 - v280;
          v283 = *(unsigned __int16 *)(v274 + 2 * v281);
          v284 = (int *)(v275
                       + 4
                       * (*(_DWORD *)(v273 + 4 * ((0xFFFFFFFF >> -(char)v272) & v281))
                                      + v283));
          v285 = (char *)v276 + v410 + v411 - v278;
          v286 = v198;
          do
          {
            v287 = a8[v277];
            if (v282 < v287 && v279 >= v287)
            {
              if (v280 - (v279 - v287) >= v187)
                v289 = v187;
              else
                v289 = v280 - (v279 - v287);
              if (v289 < 8)
              {
                v294 = (unsigned __int8 *)v276 + v279 - v287;
                v293 = v218;
                if (v289)
                {
LABEL_403:
                  v295 = &v294[v289];
                  while (*v294 == *v293)
                  {
                    ++v293;
                    ++v294;
                    if (!--v289)
                    {
                      v294 = v295;
                      break;
                    }
                  }
                }
              }
              else
              {
                v290 = 0;
                v291 = &v285[-v287];
                do
                {
                  v292 = *(_QWORD *)&v291[v290] ^ *(_QWORD *)&v218[v290];
                  if (v292)
                  {
                    v296 = v290 + (__clz(__rbit64(v292)) >> 3);
                    goto LABEL_409;
                  }
                  v289 -= 8;
                  v290 += 8;
                }
                while (v289 > 7);
                v293 = &v218[v290];
                v294 = (unsigned __int8 *)&v291[v290];
                if (v289)
                  goto LABEL_403;
              }
              v296 = v294 - ((unsigned __int8 *)v276 + v279 - v287);
LABEL_409:
              v297 = 135 * v296 + 1935;
              if (v296 >= 2 && v85 < v297)
              {
                if (v277)
                  v297 -= ((0x1CA10u >> (v277 & 0xE)) & 0xE) + 39;
                if (v85 < v297)
                {
                  v245 = 0;
                  if (v296 > v198)
                    v198 = v296;
                  v286 = v296;
                  v197 = a8[v277];
                  v85 = v297;
                }
              }
            }
            ++v277;
          }
          while (v277 != 4);
          a3 = v417;
          if (v283 != 0xFFFF)
          {
            do
            {
              v300 = *v284++;
              v299 = v300;
              v301 = v300 & 0x7FFFFFFF;
              v302 = v279 - v301;
              if (v280 - v301 >= v187)
                v303 = v187;
              else
                v303 = v280 - v301;
              v304 = v198 + v194;
              v306 = v302 > v31 || v304 > a4 || v198 >= v303;
              if (!v306 && *(unsigned __int8 *)(v417 + v304) == *((unsigned __int8 *)v276 + v198 + v301))
              {
                v307 = (unsigned __int8 *)v276 + v301;
                if (v303 < 8)
                {
                  v311 = v218;
                  v310 = v307;
                }
                else
                {
                  v308 = 0;
                  do
                  {
                    v309 = *(_QWORD *)&v307[v308] ^ *(_QWORD *)&v218[v308];
                    if (v309)
                    {
                      v313 = v308 + (__clz(__rbit64(v309)) >> 3);
                      goto LABEL_450;
                    }
                    v303 -= 8;
                    v308 += 8;
                  }
                  while (v303 > 7);
                  v310 = &v307[v308];
                  if (!v303)
                    goto LABEL_448;
                  v311 = &v218[v308];
                }
                v312 = &v310[v303];
                while (*v310 == *v311)
                {
                  ++v311;
                  ++v310;
                  if (!--v303)
                  {
                    v310 = v312;
                    break;
                  }
                }
LABEL_448:
                v313 = v310 - v307;
LABEL_450:
                if (v313 >= 4)
                {
                  v314 = __clz(v302);
                  if (v85 < 135 * v313 - 30 * (v314 ^ 0x1F) + 1920)
                  {
                    v245 = 0;
                    v286 = v313;
                    v197 = v302;
                    v85 = 135 * v313 - 30 * (v314 ^ 0x1F) + 1920;
                    v198 = v313;
                  }
                }
              }
            }
            while ((v299 & 0x80000000) == 0);
          }
          ++v268;
          v198 = v286;
        }
        while (v268 != v413);
      }
      else
      {
        v286 = v198;
      }
      if (v85 < v402 + 175)
        break;
      ++v399;
      if (v398 > 2)
      {
        a7 = v406;
        a6 = v412;
        v315 = v416;
        goto LABEL_509;
      }
      v182 = v398 + 1;
      v184 = v396 + 1;
      v185 = v197;
      v405 = v245;
      result = v286;
      v29 = v187;
      v315 = v416;
      v183 = v416;
      a7 = v406;
      a6 = v412;
      if (v404 + 9 >= v391)
        goto LABEL_509;
    }
    v338 = v404 + v388;
    if (v404 + v388 >= v387)
      v338 = v387;
    v397 = v338;
    v197 = v393;
    v245 = v405;
    v286 = v385;
    v315 = v404;
    a7 = v406;
    a6 = v412;
LABEL_509:
    result = v390;
    if (v197 > v397 + v379)
    {
LABEL_510:
      v344 = v197 + 15;
      goto LABEL_511;
    }
    v349 = *a8;
    if (v197 == v349)
    {
      v344 = 0;
      v22 = v400;
      goto LABEL_518;
    }
    v359 = a8[1];
    if (v197 == v359)
    {
      v344 = 1;
    }
    else
    {
      v360 = v197 + 3 - v349;
      if (v360 > 6)
      {
        v363 = v197 + 3 - v359;
        if (v363 > 6)
        {
          if (v197 == a8[2])
          {
            v344 = 2;
          }
          else
          {
            if (v197 != a8[3])
              goto LABEL_510;
            v344 = 3;
          }
          goto LABEL_511;
        }
        v361 = 4 * v363;
        v362 = 266017486;
      }
      else
      {
        v361 = 4 * v360;
        v362 = 158663784;
      }
      v344 = (v362 >> v361) & 0xF;
    }
LABEL_511:
    v22 = v400;
    if (v197 <= v397 + v379)
    {
      if (v344)
      {
        a8[3] = a8[2];
        v345 = *(int32x2_t *)a8;
        *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
        *a8 = v197;
        v346 = *(_DWORD *)(a7 + 112);
        if (v346 >= 5)
        {
          v347 = vdupq_n_s32(v197);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v347, (int32x4_t)xmmword_19D02CCA0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v347.i8, (int32x2_t)0x3FFFFFFFDLL);
          if (v346 >= 0xB)
          {
            v348 = vdupq_lane_s32(v345, 0);
            *(int32x4_t *)(a8 + 10) = vaddq_s32(v348, (int32x4_t)xmmword_19D02CCA0);
            *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v348.i8, (int32x2_t)0x3FFFFFFFDLL);
          }
        }
      }
    }
LABEL_518:
    *(_DWORD *)v381 = v399;
    *(_DWORD *)(v381 + 4) = v286 | (v245 << 25);
    v350 = *(unsigned int *)(a6 + 60);
    v351 = v350 + 16;
    if (v350 + 16 <= v344)
    {
      v353 = *(unsigned int *)(a6 + 56);
      v354 = v344 - v350 + (4 << v353) - 16;
      v355 = (__clz(v354) ^ 0x1F) - 1;
      v356 = ((v354 >> v355) & 1 | 2) << v355;
      v344 = ((v354 & ~(-1 << v353))
            + v351
            + ((((v354 >> v355) & 1 | (2 * (v355 - v353))) + 65534) << v353)) | ((v355 - v353) << 10);
      v352 = (v354 - v356) >> v353;
    }
    else
    {
      LODWORD(v352) = 0;
    }
    *(_WORD *)(v381 + 14) = v344;
    *(_DWORD *)(v381 + 8) = v352;
    if (v399 > 5)
    {
      if (v399 > 0x81)
      {
        if (v399 > 0x841)
        {
          if (v399 >> 1 >= 0xC21)
          {
            if (v399 < 0x5842)
              LOWORD(v357) = 22;
            else
              LOWORD(v357) = 23;
          }
          else
          {
            LOWORD(v357) = 21;
          }
        }
        else
        {
          v357 = (__clz(v399 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v358 = (__clz(v399 - 2) ^ 0x1F) - 1;
        v357 = ((v399 - 2) >> v358) + 2 * v358 + 2;
      }
    }
    else
    {
      LOWORD(v357) = v399;
    }
    v364 = v245 + (int)v286;
    if (v364 > 9)
    {
      if (v364 > 0x85)
      {
        if (v364 > 0x845)
          LOWORD(v365) = 23;
        else
          v365 = (__clz(v364 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v366 = v364 - 6;
        v367 = (__clz(v366) ^ 0x1F) - 1;
        v365 = (v366 >> v367) + 2 * v367 + 4;
      }
    }
    else
    {
      LOWORD(v365) = v245 + v286 - 2;
    }
    v368 = v365 & 7 | (8 * (v357 & 7));
    if ((v344 & 0x3FF) != 0 || (unsigned __int16)v357 > 7u || (unsigned __int16)v365 > 0xFu)
    {
      v370 = 3 * ((unsigned __int16)v357 >> 3) + ((unsigned __int16)(v365 & 0xFFF8) >> 3);
      v369 = ((((0x520D40u >> (2 * v370)) & 0xC0) + (v370 << 6)) | v368) + 64;
    }
    else
    {
      LOWORD(v369) = v368 | 0x40;
      if ((v365 & 0xFFF8) == 0)
        LOWORD(v369) = v365 & 7 | (8 * (v357 & 7));
    }
    *(_WORD *)(v381 + 12) = v369;
    v371 = v378;
    *a12 += v399;
    v372 = v315 + 2;
    v332 = v315 + v286;
    if (v315 + v286 < v378)
      v371 = v315 + v286;
    if (v197 < v286 >> 2)
    {
      if (v372 <= v332 - 4 * v197)
        v372 = v332 - 4 * v197;
      if (v371 < v372)
        v372 = v371;
    }
    v21 = v380 + 2 * v286 + v315;
    v23 = v381 + 16;
    if (v372 < v371)
    {
      v373 = *(_DWORD *)(a7 + 104);
      v374 = *(_DWORD *)(a7 + 108);
      do
      {
        v375 = (unint64_t)(*(_QWORD *)(a3 + (v372 & a4)) * v389) >> 49;
        v376 = *(unsigned __int16 *)(v22 + 2 * v375);
        *(_WORD *)(v22 + 2 * v375) = v376 + 1;
        *(_DWORD *)(v390 + 4 * ((v375 << v374) + (v373 & v376))) = v372++;
      }
      while (v371 != v372);
    }
    v13 = 0;
LABEL_564:
    a2 = v332;
  }
  while (v332 + 8 < v391);
LABEL_571:
  *a9 = v13 + v391 - v332;
  *a11 += (v23 - a10) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH2(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t j;
  unint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unint64_t i;
  unint64_t v112;
  unsigned __int8 *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unsigned int v129;
  BOOL v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unint64_t v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;

  v12 = a2;
  v13 = *a9;
  v14 = a2 + result;
  if (result <= 7)
    v15 = a2;
  else
    v15 = a2 + result - 7;
  v147 = v15;
  if (*(int *)(a6 + 4) >= 9)
    v16 = 512;
  else
    v16 = 64;
  if (a2 + 8 >= v14)
  {
    v21 = a10;
    v131 = a2;
    goto LABEL_248;
  }
  v17 = a5;
  v18 = (1 << *(_DWORD *)(a6 + 8)) - 16;
  v161 = *(_QWORD *)(a6 + 16);
  v19 = v16 + a2;
  v158 = a5 + 256;
  v145 = *(_QWORD *)(a6 + 96);
  v144 = v145 + 1;
  v149 = 4 * v16;
  v150 = a2 + result - 7;
  v20 = *(_QWORD *)(a7 + 88);
  v21 = a10;
  v153 = a7;
  v155 = a6;
  v156 = a2 + result;
  v146 = v16;
  v154 = v18;
  v148 = a8;
  do
  {
    if (v12 >= v18)
      v22 = v18;
    else
      v22 = v12;
    v23 = v12 + v161;
    if (v12 + v161 >= v18)
      v23 = v18;
    if (*(_DWORD *)(a6 + 624))
    {
      if (v12)
      {
        v24 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
        if (v12 != 1)
        {
          v25 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_21:
          v26 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v158 + v25) | *(_BYTE *)(v17 + v24)) + 629);
          goto LABEL_22;
        }
      }
      else
      {
        v24 = 0;
      }
      v25 = 0;
      goto LABEL_21;
    }
    v26 = 0;
    v24 = 0;
LABEL_22:
    v27 = v14 - v12;
    v162 = v26;
    v28 = *(_QWORD *)(a6 + 8 * v26 + 696);
    v157 = *(_QWORD *)(a6 + 72);
    v29 = (unsigned __int8 *)(a3 + (v12 & a4));
    v30 = *v29;
    v31 = (unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)v29) >> 48;
    v32 = *a8;
    if (v12 < v32)
      goto LABEL_41;
    v33 = (unsigned __int8 *)(a3 + (a4 & (v12 - v32)));
    if (v30 != *v33)
      goto LABEL_41;
    if (v27 < 8)
    {
      v38 = (unsigned __int8 *)(a3 + (a4 & (v12 - v32)));
      v37 = (unsigned __int8 *)(a3 + (v12 & a4));
      v35 = v14 - v12;
      if (v27)
      {
LABEL_31:
        v39 = &v38[v35];
        while (*v38 == *v37)
        {
          ++v37;
          ++v38;
          if (!--v35)
          {
            v38 = v39;
            break;
          }
        }
        v18 = v154;
        a6 = v155;
      }
    }
    else
    {
      v34 = 0;
      v35 = v14 - v12;
      do
      {
        v36 = *(_QWORD *)&v33[v34] ^ *(_QWORD *)&v29[v34];
        if (v36)
        {
          v40 = v34 + (__clz(__rbit64(v36)) >> 3);
          goto LABEL_38;
        }
        v35 -= 8;
        v34 += 8;
      }
      while (v35 > 7);
      v37 = &v29[v34];
      v38 = &v33[v34];
      if (v35)
        goto LABEL_31;
    }
    v40 = v38 - v33;
LABEL_38:
    if (v40 >= 4 && (v41 = 135 * v40 + 1935, v41 >= 0x7E5))
    {
      v151 = v21;
      v42 = 0;
      *(_DWORD *)(v20 + 4 * v31) = v12;
    }
    else
    {
LABEL_41:
      v43 = *(unsigned int *)(v20 + 4 * v31);
      *(_DWORD *)(v20 + 4 * v31) = v12;
      v32 = v12 - v43;
      v44 = (unsigned __int8 *)(a3 + (v43 & a4));
      result = *v44;
      if (v30 != (_DWORD)result || v12 == v43 || v32 > v22)
        goto LABEL_198;
      if (v27 < 8)
      {
        v49 = (unsigned __int8 *)(a3 + (v43 & a4));
        result = a3 + (v12 & a4);
        v48 = v14 - v12;
        if (v27)
        {
LABEL_55:
          v50 = &v49[v48];
          while (*v49 == *(unsigned __int8 *)result)
          {
            ++result;
            ++v49;
            if (!--v48)
            {
              v49 = v50;
              break;
            }
          }
        }
      }
      else
      {
        v47 = 0;
        v48 = v14 - v12;
        do
        {
          result = *(_QWORD *)&v44[v47] ^ *(_QWORD *)&v29[v47];
          if (result)
          {
            v40 = v47 + (__clz(__rbit64(result)) >> 3);
            goto LABEL_61;
          }
          v48 -= 8;
          v47 += 8;
        }
        while (v48 > 7);
        result = (unint64_t)&v29[v47];
        v49 = &v44[v47];
        if (v48)
          goto LABEL_55;
      }
      v40 = v49 - v44;
LABEL_61:
      if (v40 < 4 || (v41 = 135 * v40 - 30 * (__clz(v32) ^ 0x1F) + 1920, v41 <= 0x7E4))
      {
        v104 = *(_QWORD *)(a7 + 80);
        v106 = *(_QWORD *)(v104 + 40);
        v105 = *(_QWORD *)(v104 + 48);
        if (v105 < v106 >> 7)
          goto LABEL_198;
        v107 = ((506832829 * *(_DWORD *)v29) >> 17) & 0x7FFELL;
        result = *(_QWORD *)(v28 + 32);
        *(_QWORD *)(v104 + 40) = v106 + 1;
        v108 = *(unsigned __int8 *)(result + v107);
        if (!*(_BYTE *)(result + v107) || v27 < v108)
          goto LABEL_198;
        v151 = v21;
        v109 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 24) + 2 * v107);
        v110 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v28 + 168)
                                 + *(unsigned int *)(*(_QWORD *)v28 + 4 * v108 + 32)
                                 + v109 * (unint64_t)v108);
        if (v108 < 8)
        {
          i = v108;
          v113 = (unsigned __int8 *)(a3 + (v12 & a4));
        }
        else
        {
          result = 0;
          for (i = v108; i > 7; i -= 8)
          {
            v112 = *(_QWORD *)&v29[result] ^ *(_QWORD *)&v110[result];
            if (v112)
            {
              v40 = result + (__clz(__rbit64(v112)) >> 3);
              goto LABEL_190;
            }
            result += 8;
          }
          v113 = &v29[result];
          if (!i)
            goto LABEL_184;
          v110 += result;
        }
        result = (unint64_t)&v113[i];
        while (*v113 == *v110)
        {
          ++v110;
          ++v113;
          if (!--i)
          {
            v113 = (unsigned __int8 *)result;
            break;
          }
        }
LABEL_184:
        v40 = v113 - v29;
LABEL_190:
        v130 = v40 && v40 + *(unsigned int *)(v28 + 12) > v108;
        if (!v130
          || (v32 = v144
                  + v23
                  + v109
                  + ((((*(_QWORD *)(v28 + 16) >> (6 * (v108 - v40))) & 0x3FLL)
                    + 4 * (v108 - v40)) << *(_BYTE *)(*(_QWORD *)v28 + v108)),
              v32 > v157)
          || (v41 = 135 * v40 - 30 * (__clz(v32) ^ 0x1F) + 1920, v41 < 0x7E4)
          || (*(_QWORD *)(v104 + 48) = v105 + 1, v41 == 2020))
        {
LABEL_198:
          ++v13;
          v131 = v12 + 1;
          if (v12 + 1 > v19)
          {
            if (v131 <= v19 + v149)
            {
              v133 = v12 + 9;
              if (v12 + 9 >= v150)
                v133 = v150;
              while (v131 < v133)
              {
                *(_DWORD *)(v20
                          + (((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v131 & a4))) >> 46) & 0x3FFFC)) = v131;
                v13 += 2;
                v131 += 2;
              }
            }
            else
            {
              v132 = v12 + 17;
              if (v12 + 17 >= v150)
                v132 = v150;
              while (v131 < v132)
              {
                *(_DWORD *)(v20
                          + (((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v131 & a4))) >> 46) & 0x3FFFC)) = v131;
                v13 += 4;
                v131 += 4;
              }
            }
          }
          goto LABEL_240;
        }
        v42 = v108 - v40;
      }
      else
      {
        v151 = v21;
        v42 = 0;
      }
    }
    v51 = 0;
    v160 = *a8;
    while (1)
    {
      v52 = v27 - 1;
      v53 = v40 - 1;
      if (v40 - 1 >= v27 - 1)
        v53 = v27 - 1;
      if (*(int *)(a6 + 4) >= 5)
        v54 = 0;
      else
        v54 = v53;
      v55 = v12 + 1;
      if (v12 + 1 < v18)
        v56 = v12 + 1;
      else
        v56 = v18;
      v57 = v55 + v161;
      if (v55 + v161 >= v18)
        v57 = v18;
      v159 = v57;
      if (*(_DWORD *)(a6 + 624))
      {
        v58 = *(unsigned __int8 *)(a6
                                 + (*(_BYTE *)(v158 + v24) | *(_BYTE *)(v17
                                                                                       + *(unsigned __int8 *)(a3 + (v12 & a4))))
                                 + 629);
        v24 = *(unsigned __int8 *)(a3 + (v12 & a4));
      }
      else
      {
        v58 = v162;
      }
      v162 = v58;
      v59 = *(_QWORD *)(a6 + 8 * v58 + 696);
      v60 = *(unsigned __int8 *)(a3 + v54 + (v55 & a4));
      result = a3 + (v55 & a4);
      v61 = (unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)result) >> 48;
      if (v55 >= v160)
      {
        v62 = a4 & (v55 - v160);
        if (v60 == *(unsigned __int8 *)(a3 + v62 + v54))
        {
          v63 = (_QWORD *)(a3 + v62);
          if (v52 < 8)
          {
            v68 = v63;
            v67 = (_QWORD *)(a3 + (v55 & a4));
            v70 = v27 - 1;
            if (v27 != 1)
            {
LABEL_87:
              v71 = v24;
              v72 = (_QWORD *)((char *)v68 + v70);
              while (*(unsigned __int8 *)v68 == *(unsigned __int8 *)v67)
              {
                v67 = (_QWORD *)((char *)v67 + 1);
                v68 = (_QWORD *)((char *)v68 + 1);
                if (!--v70)
                {
                  v68 = v72;
                  break;
                }
              }
              v17 = a5;
              v14 = v156;
              v24 = v71;
              a7 = v153;
            }
          }
          else
          {
            v64 = v17;
            v65 = v24;
            v66 = 0;
            v67 = (_QWORD *)(a3 + (v55 & a4));
            v68 = v63;
            do
            {
              v69 = *v68 ^ *v67;
              if (v69)
              {
                v73 = (__clz(__rbit64(v69)) >> 3) - v66;
                a6 = v155;
                v14 = v156;
                v24 = v65;
                v17 = v64;
                v18 = v154;
                goto LABEL_94;
              }
              ++v68;
              ++v67;
              v66 -= 8;
              v70 = v27 + v66 - 1;
            }
            while (v70 > 7);
            a6 = v155;
            v14 = v156;
            v24 = v65;
            v17 = v64;
            v18 = v154;
            if (v70)
              goto LABEL_87;
          }
          v73 = (char *)v68 - (char *)v63;
LABEL_94:
          if (v73 >= 4)
          {
            v74 = 135 * v73 + 1935;
            if (v74 >= 0x7E5)
            {
              LODWORD(v75) = 0;
              *(_DWORD *)(v20 + 4 * v61) = v55;
              v76 = v160;
              goto LABEL_143;
            }
          }
        }
      }
      v77 = *(unsigned int *)(v20 + 4 * v61);
      *(_DWORD *)(v20 + 4 * v61) = v55;
      if (v60 != *(unsigned __int8 *)(a3 + (v77 & a4) + v54))
      {
LABEL_141:
        v76 = 0;
        LODWORD(v75) = 0;
        goto LABEL_142;
      }
      LODWORD(v75) = 0;
      if (v55 == v77 || (v76 = v55 - v77, v55 - v77 > v56))
      {
LABEL_125:
        v76 = 0;
LABEL_142:
        v73 = v54;
        v74 = 2020;
        goto LABEL_143;
      }
      v78 = v77 & a4;
      v79 = a3 + (v77 & a4);
      if (v52 < 8)
      {
        v82 = (_QWORD *)(a3 + v78);
        v81 = (_QWORD *)(a3 + (v55 & a4));
        v84 = v27 - 1;
        if (v27 != 1)
        {
LABEL_107:
          v85 = (_QWORD *)((char *)v82 + v84);
          while (*(unsigned __int8 *)v82 == *(unsigned __int8 *)v81)
          {
            v81 = (_QWORD *)((char *)v81 + 1);
            v82 = (_QWORD *)((char *)v82 + 1);
            if (!--v84)
            {
              v82 = v85;
              break;
            }
          }
        }
      }
      else
      {
        v80 = 0;
        v81 = (_QWORD *)(a3 + (v55 & a4));
        v82 = (_QWORD *)(a3 + v78);
        do
        {
          v83 = *v82 ^ *v81;
          if (v83)
          {
            v73 = (__clz(__rbit64(v83)) >> 3) - v80;
            goto LABEL_113;
          }
          ++v82;
          ++v81;
          v80 -= 8;
          v84 = v27 + v80 - 1;
        }
        while (v84 > 7);
        if (v27 + v80 != 1)
          goto LABEL_107;
      }
      v73 = (unint64_t)v82 - v79;
LABEL_113:
      if (v73 >= 4)
      {
        v74 = 135 * v73 - 30 * (__clz(v76) ^ 0x1F) + 1920;
        if (v74 > 0x7E4)
        {
          LODWORD(v75) = 0;
          goto LABEL_143;
        }
      }
      v86 = *(_QWORD *)(a7 + 80);
      v87 = *(_QWORD *)(v86 + 40);
      v88 = *(_QWORD *)(v86 + 48);
      if (v88 < v87 >> 7)
        goto LABEL_141;
      v89 = ((506832829 * *(_DWORD *)result) >> 17) & 0x7FFELL;
      v90 = *(_QWORD *)(v59 + 32);
      *(_QWORD *)(v86 + 40) = v87 + 1;
      v75 = *(unsigned __int8 *)(v90 + v89);
      if (!(_DWORD)v75)
        goto LABEL_125;
      if (v52 < v75)
        goto LABEL_141;
      v91 = a7;
      v92 = v24;
      v93 = *(unsigned __int16 *)(*(_QWORD *)(v59 + 24) + 2 * v89);
      v94 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v59 + 168)
                              + *(unsigned int *)(*(_QWORD *)v59 + 4 * v75 + 32)
                              + v93 * v75);
      if (v75 < 8)
      {
        j = v75;
        v100 = (unsigned __int8 *)(a3 + (v55 & a4));
LABEL_127:
        v101 = &v100[j];
        while (*v100 == *v94)
        {
          ++v94;
          ++v100;
          if (!--j)
          {
            v100 = v101;
            break;
          }
        }
        v17 = a5;
        v14 = v156;
        v24 = v92;
        a7 = v153;
      }
      else
      {
        v95 = v17;
        v96 = v91;
        v97 = 0;
        for (j = v75; j > 7; j -= 8)
        {
          v99 = *(_QWORD *)(result + v97) ^ *(_QWORD *)&v94[v97];
          if (v99)
          {
            v73 = v97 + (__clz(__rbit64(v99)) >> 3);
            a6 = v155;
            v14 = v156;
            v24 = v92;
            a7 = v96;
            v17 = v95;
            v18 = v154;
            goto LABEL_134;
          }
          v97 += 8;
        }
        v100 = (unsigned __int8 *)(result + v97);
        if (j)
        {
          v94 += v97;
          v18 = v154;
          a6 = v155;
          goto LABEL_127;
        }
        a6 = v155;
        v14 = v156;
        v24 = v92;
        a7 = v96;
        v17 = v95;
        v18 = v154;
      }
      v73 = (unint64_t)&v100[-result];
LABEL_134:
      if (!v73 || v73 + *(unsigned int *)(v59 + 12) <= v75)
        goto LABEL_141;
      result = (((*(_QWORD *)(v59 + 16) >> (6 * (v75 - v73))) & 0x3FLL)
              + 4 * (v75 - v73)) << *(_BYTE *)(*(_QWORD *)v59 + v75);
      v76 = v144 + v159 + v93 + result;
      if (v76 > v157)
        goto LABEL_141;
      result = 30 * (__clz(v76) ^ 0x1F);
      v74 = 135 * v73 - result + 1920;
      if (v74 < 0x7E4)
        goto LABEL_141;
      LODWORD(v75) = v75 - v73;
      *(_QWORD *)(v86 + 48) = v88 + 1;
LABEL_143:
      if (v74 < v41 + 175)
        break;
      ++v13;
      if (v51 <= 2)
      {
        v103 = v12 + 9;
        ++v51;
        v32 = v76;
        v41 = v74;
        v42 = v75;
        v40 = v73;
        v27 = v52;
        ++v12;
        if (v103 < v14)
          continue;
      }
      goto LABEL_161;
    }
    v114 = v12 + v161;
    if (v12 + v161 >= v18)
      v114 = v18;
    v159 = v114;
    v76 = v32;
    LODWORD(v75) = v42;
    v73 = v40;
    v55 = v12;
LABEL_161:
    if (v76 > v159 + v145)
    {
LABEL_162:
      v115 = v76 + 15;
      goto LABEL_163;
    }
    v116 = *v148;
    if (v76 == v116)
    {
      v115 = 0;
      goto LABEL_168;
    }
    v126 = v148[1];
    if (v76 == v126)
    {
      v115 = 1;
    }
    else
    {
      v127 = v76 + 3 - v116;
      if (v127 > 6)
      {
        v134 = v76 + 3 - v126;
        if (v134 > 6)
        {
          if (v76 == v148[2])
          {
            v115 = 2;
          }
          else
          {
            if (v76 != v148[3])
              goto LABEL_162;
            v115 = 3;
          }
          goto LABEL_163;
        }
        v128 = 4 * v134;
        v129 = 266017486;
      }
      else
      {
        v128 = 4 * v127;
        v129 = 158663784;
      }
      v115 = (v129 >> v128) & 0xF;
    }
LABEL_163:
    if (v76 <= v159 + v145 && v115)
    {
      v148[3] = v148[2];
      *(_QWORD *)(v148 + 1) = *(_QWORD *)v148;
      *v148 = v76;
    }
LABEL_168:
    *(_DWORD *)v151 = v13;
    *(_DWORD *)(v151 + 4) = v73 | ((_DWORD)v75 << 25);
    v117 = *(unsigned int *)(a6 + 60);
    v118 = v117 + 16;
    if (v117 + 16 <= v115)
    {
      v120 = *(unsigned int *)(a6 + 56);
      v121 = v115 - v117 + (4 << v120) - 16;
      v122 = (__clz(v121) ^ 0x1F) - 1;
      v123 = ((v121 >> v122) & 1 | 2) << v122;
      result = 65534;
      v115 = ((v121 & ~(-1 << v120))
            + v118
            + ((((v121 >> v122) & 1 | (2 * (v122 - v120))) + 65534) << v120)) | ((v122 - v120) << 10);
      v119 = (v121 - v123) >> v120;
    }
    else
    {
      LODWORD(v119) = 0;
    }
    *(_WORD *)(v151 + 14) = v115;
    *(_DWORD *)(v151 + 8) = v119;
    if (v13 > 5)
    {
      if (v13 > 0x81)
      {
        if (v13 > 0x841)
        {
          if (v13 >> 1 >= 0xC21)
          {
            if (v13 < 0x5842)
              LOWORD(v124) = 22;
            else
              LOWORD(v124) = 23;
          }
          else
          {
            LOWORD(v124) = 21;
          }
        }
        else
        {
          v124 = (__clz(v13 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v125 = (__clz(v13 - 2) ^ 0x1F) - 1;
        v124 = ((v13 - 2) >> v125) + 2 * v125 + 2;
      }
    }
    else
    {
      LOWORD(v124) = v13;
    }
    v135 = (int)v75 + (int)v73;
    if (v135 > 9)
    {
      if (v135 > 0x85)
      {
        if (v135 > 0x845)
          LOWORD(v136) = 23;
        else
          v136 = (__clz(v135 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v137 = v135 - 6;
        v138 = (__clz(v137) ^ 0x1F) - 1;
        v136 = (v137 >> v138) + 2 * v138 + 4;
      }
    }
    else
    {
      LOWORD(v136) = v75 + v73 - 2;
    }
    v139 = v136 & 7 | (8 * (v124 & 7));
    if ((v115 & 0x3FF) != 0 || (unsigned __int16)v124 > 7u || (unsigned __int16)v136 > 0xFu)
    {
      v141 = 3 * ((unsigned __int16)v124 >> 3) + ((unsigned __int16)(v136 & 0xFFF8) >> 3);
      v140 = ((((0x520D40u >> (2 * v141)) & 0xC0) + (v141 << 6)) | v139) + 64;
    }
    else
    {
      LOWORD(v140) = v139 | 0x40;
      if ((v136 & 0xFFF8) == 0)
        LOWORD(v140) = v136 & 7 | (8 * (v124 & 7));
    }
    *(_WORD *)(v151 + 12) = v140;
    *a12 += v13;
    v142 = v55 + 2;
    v131 = v55 + v73;
    v143 = v147;
    if (v55 + v73 < v147)
      v143 = v55 + v73;
    if (v76 < v73 >> 2)
    {
      if (v142 <= v131 - 4 * v76)
        v142 = v131 - 4 * v76;
      if (v143 < v142)
        v142 = v143;
    }
    v19 = v146 + 2 * v73 + v55;
    v21 = v151 + 16;
    if (v142 >= v143)
    {
      v13 = 0;
      a8 = v148;
    }
    else
    {
      a8 = v148;
      do
      {
        *(_DWORD *)(v20 + (((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v142 & a4))) >> 46) & 0x3FFFC)) = v142;
        ++v142;
      }
      while (v143 != v142);
      v13 = 0;
    }
LABEL_240:
    v12 = v131;
  }
  while (v131 + 8 < v14);
LABEL_248:
  *a9 = v13 + v14 - v131;
  *a11 += (v21 - a10) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH3(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v11 = a2;
  v131 = *MEMORY[0x1E0C80C00];
  v12 = *a8;
  v13 = a2 + result;
  v14 = a2 + result - 7;
  v117 = v14;
  if (result <= 7)
    v14 = a2;
  v121 = v14;
  if (*(int *)(a5 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (a2 + 8 < v13)
  {
    v127 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v118 = *(_QWORD *)(a5 + 96);
    v119 = *(_QWORD *)(a5 + 16);
    v16 = v15 + a2;
    v124 = v13;
    v116 = 4 * v15;
    v17 = *(_QWORD *)(a6 + 88);
    v122 = a7;
    v123 = a9;
    v125 = a5;
    v120 = v15;
    while (1)
    {
      v18 = v13 - v11;
      if (v11 >= v127)
        v19 = v127;
      else
        v19 = v11;
      v20 = v11 & a4;
      v21 = (_QWORD *)(a3 + (v11 & a4));
      v22 = *(unsigned __int8 *)v21;
      v23 = *a7;
      if (v11 < v23)
        goto LABEL_29;
      v24 = (unsigned __int8 *)(a3 + (a4 & (v11 - v23)));
      if (v22 != *v24)
        goto LABEL_29;
      if (v18 < 8)
      {
        v29 = (unsigned __int8 *)(a3 + (a4 & (v11 - v23)));
        v28 = (unsigned __int8 *)(a3 + (v11 & a4));
        v26 = v13 - v11;
        if (v18)
        {
LABEL_20:
          v30 = &v29[v26];
          while (*v29 == *v28)
          {
            ++v28;
            ++v29;
            if (!--v26)
            {
              v29 = v30;
              break;
            }
          }
        }
      }
      else
      {
        v25 = 0;
        v26 = v13 - v11;
        do
        {
          v27 = *(_QWORD *)&v24[v25 * 8] ^ v21[v25];
          if (v27)
          {
            v31 = v25 * 8 + (__clz(__rbit64(v27)) >> 3);
            goto LABEL_26;
          }
          v26 -= 8;
          ++v25;
        }
        while (v26 > 7);
        v28 = (unsigned __int8 *)&v21[v25];
        v29 = &v24[v25 * 8];
        if (v26)
          goto LABEL_20;
      }
      v31 = v29 - v24;
LABEL_26:
      if (v31 >= 4 && (v128 = *a7, v32 = 135 * v31 + 1935, v32 >= 0x7E5))
      {
        v22 = *(unsigned __int8 *)(a3 + v31 + v20);
      }
      else
      {
LABEL_29:
        v128 = 0;
        v31 = 0;
        v32 = 2020;
      }
      v33 = 0;
      v129 = (unint64_t)(0x7BD3579BD3000000 * *v21) >> 48;
      v130 = (unsigned __int16)(v129 + 8);
      v34 = 1;
      do
      {
        v35 = v34;
        v36 = *(unsigned int *)(v17 + 4 * *(&v129 + v33));
        v37 = v11 - v36;
        result = *(unsigned __int8 *)(a3 + (v36 & a4) + v31);
        if (v22 == (_DWORD)result && v11 != v36 && v37 <= v19)
        {
          v40 = a3 + (v36 & a4);
          if (v18 < 8)
          {
            v44 = (unsigned __int8 *)(a3 + (v36 & a4));
            v43 = (unsigned __int8 *)(a3 + (v11 & a4));
            result = v13 - v11;
            if (v18)
            {
LABEL_45:
              v45 = &v44[result];
              while (*v44 == *v43)
              {
                ++v43;
                ++v44;
                if (!--result)
                {
                  v44 = v45;
                  break;
                }
              }
            }
          }
          else
          {
            v41 = 0;
            result = v13 - v11;
            do
            {
              v42 = *(_QWORD *)(v40 + v41 * 8) ^ v21[v41];
              if (v42)
              {
                v46 = v41 * 8 + (__clz(__rbit64(v42)) >> 3);
                goto LABEL_51;
              }
              result -= 8;
              ++v41;
            }
            while (result > 7);
            v43 = (unsigned __int8 *)&v21[v41];
            v44 = (unsigned __int8 *)(v40 + v41 * 8);
            if (result)
              goto LABEL_45;
          }
          v46 = (unint64_t)&v44[-v40];
LABEL_51:
          if (v46 >= 4)
          {
            result = 135;
            v47 = 135 * v46 - 30 * (__clz(v37) ^ 0x1F) + 1920;
            if (v32 < v47)
            {
              v22 = *(unsigned __int8 *)(a3 + v46 + v20);
              v128 = v37;
              v32 = v47;
              v31 = v46;
            }
          }
        }
        v34 = 0;
        v33 = 1;
      }
      while ((v35 & 1) != 0);
      *(_DWORD *)(v17 + 4 * *(unint64_t *)((char *)&v129 + (v11 & 8))) = v11;
      if (v32 < 0x7E5)
      {
        ++v12;
        v85 = v11 + 1;
        if (v11 + 1 > v16)
        {
          if (v85 <= v16 + v116)
          {
            v100 = v11 + 9;
            if (v11 + 9 >= v117)
              v100 = v117;
            while (v85 < v100)
            {
              *(_DWORD *)(v17
                        + 4
                        * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v85 & a4))) >> 48)
                                           + (v85 & 8))) = v85;
              v12 += 2;
              v85 += 2;
            }
          }
          else
          {
            v86 = v11 + 17;
            if (v11 + 17 >= v117)
              v86 = v117;
            while (v85 < v86)
            {
              *(_DWORD *)(v17
                        + 4
                        * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v85 & a4))) >> 48)
                                           + (v85 & 8))) = v85;
              v12 += 4;
              v85 += 4;
            }
          }
        }
        goto LABEL_180;
      }
      v48 = 0;
      v126 = *a7;
      while (1)
      {
        v49 = v18 - 1;
        v50 = v31 - 1;
        if (v31 - 1 >= v18 - 1)
          v50 = v18 - 1;
        v51 = *(int *)(a5 + 4) >= 5 ? 0 : v50;
        v52 = v11 + 1;
        v53 = v11 + 1 < v127 ? v11 + 1 : v127;
        v54 = v52 & a4;
        v55 = *(unsigned __int8 *)(a3 + v51 + (v52 & a4));
        result = a3 + (v52 & a4);
        if (v52 < v126)
          goto LABEL_83;
        v56 = a4 & (v52 - v126);
        if (v55 != *(unsigned __int8 *)(a3 + v56 + v51))
          goto LABEL_83;
        v57 = (_QWORD *)(a3 + v56);
        if (v49 < 8)
        {
          v60 = v57;
          v59 = (_QWORD *)(a3 + (v52 & a4));
          v62 = v18 - 1;
          if (v18 != 1)
          {
LABEL_74:
            v63 = (_QWORD *)((char *)v60 + v62);
            while (*(unsigned __int8 *)v60 == *(unsigned __int8 *)v59)
            {
              v59 = (_QWORD *)((char *)v59 + 1);
              v60 = (_QWORD *)((char *)v60 + 1);
              if (!--v62)
              {
                v60 = v63;
                break;
              }
            }
          }
        }
        else
        {
          v58 = 0;
          v59 = (_QWORD *)(a3 + (v52 & a4));
          v60 = v57;
          do
          {
            v61 = *v60 ^ *v59;
            if (v61)
            {
              v64 = (__clz(__rbit64(v61)) >> 3) - v58;
              goto LABEL_80;
            }
            ++v60;
            ++v59;
            v58 -= 8;
            v62 = v18 + v58 - 1;
          }
          while (v62 > 7);
          if (v18 + v58 != 1)
            goto LABEL_74;
        }
        v64 = (char *)v60 - (char *)v57;
LABEL_80:
        if (v64 >= 4 && (v65 = 135 * v64 + 1935, v65 >= 0x7E5))
        {
          v55 = *(unsigned __int8 *)(a3 + v64 + v54);
          v51 = v64;
          v66 = v126;
        }
        else
        {
LABEL_83:
          v66 = 0;
          v65 = 2020;
        }
        v67 = 0;
        v129 = (unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)result) >> 48;
        v130 = (unsigned __int16)(v129 + 8);
        v68 = 1;
        do
        {
          v69 = v68;
          v70 = *(unsigned int *)(v17 + 4 * *(&v129 + v67));
          v71 = v52 - v70;
          if (v55 == *(unsigned __int8 *)(a3 + (v70 & a4) + v51) && v52 != v70 && v71 <= v53)
          {
            v72 = v70 & a4;
            v75 = a3 + (v70 & a4);
            if (v49 < 8)
            {
              v78 = (_QWORD *)(a3 + v72);
              v77 = (_QWORD *)(a3 + (v52 & a4));
              v80 = v18 - 1;
              if (v18 != 1)
              {
LABEL_99:
                v81 = (_QWORD *)((char *)v78 + v80);
                while (*(unsigned __int8 *)v78 == *(unsigned __int8 *)v77)
                {
                  v77 = (_QWORD *)((char *)v77 + 1);
                  v78 = (_QWORD *)((char *)v78 + 1);
                  if (!--v80)
                  {
                    v78 = v81;
                    break;
                  }
                }
              }
            }
            else
            {
              v76 = 0;
              v77 = (_QWORD *)(a3 + (v52 & a4));
              v78 = (_QWORD *)(a3 + v72);
              do
              {
                v79 = *v78 ^ *v77;
                if (v79)
                {
                  v82 = (__clz(__rbit64(v79)) >> 3) - v76;
                  goto LABEL_105;
                }
                ++v78;
                ++v77;
                v76 -= 8;
                v80 = v18 + v76 - 1;
              }
              while (v80 > 7);
              if (v18 + v76 != 1)
                goto LABEL_99;
            }
            v82 = (unint64_t)v78 - v75;
LABEL_105:
            if (v82 >= 4)
            {
              v83 = 135 * v82 - 30 * (__clz(v71) ^ 0x1F) + 1920;
              if (v65 < v83)
              {
                v55 = *(unsigned __int8 *)(a3 + v82 + v54);
                v51 = v82;
                v66 = v71;
                v65 = v83;
              }
            }
          }
          v68 = 0;
          v67 = 1;
        }
        while ((v69 & 1) != 0);
        *(_DWORD *)(v17 + 4 * *(unint64_t *)((char *)&v129 + (v52 & 8))) = v52;
        if (v65 < v32 + 175)
          break;
        ++v12;
        v13 = v124;
        a5 = v125;
        if (v48 <= 2)
        {
          v84 = v11 + 9;
          ++v48;
          v128 = v66;
          v32 = v65;
          v31 = v51;
          --v18;
          ++v11;
          if (v84 < v124)
            continue;
        }
        goto LABEL_120;
      }
      v66 = v128;
      v51 = v31;
      v52 = v11;
      v13 = v124;
      a5 = v125;
LABEL_120:
      v87 = v52 + v119;
      if (v52 + v119 >= v127)
        v87 = v127;
      v88 = v87 + v118;
      if (v66 > v87 + v118)
        goto LABEL_123;
      v93 = *v122;
      if (v66 != v93)
        break;
      LOWORD(v89) = 0;
      LODWORD(v92) = 0;
      *(_DWORD *)v123 = v12;
      *(_DWORD *)(v123 + 4) = v51;
LABEL_132:
      *(_WORD *)(v123 + 14) = v89;
      *(_DWORD *)(v123 + 8) = v92;
      if (v12 > 5)
      {
        if (v12 > 0x81)
        {
          if (v12 > 0x841)
          {
            if (v12 >> 1 >= 0xC21)
            {
              if (v12 < 0x5842)
                LOWORD(v98) = 22;
              else
                LOWORD(v98) = 23;
            }
            else
            {
              LOWORD(v98) = 21;
            }
          }
          else
          {
            v98 = (__clz(v12 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v99 = (__clz(v12 - 2) ^ 0x1F) - 1;
          v98 = ((v12 - 2) >> v99) + 2 * v99 + 2;
        }
      }
      else
      {
        LOWORD(v98) = v12;
      }
      v106 = (unint64_t)v51 >> 1;
      if (v106 > 4)
      {
        if (v106 > 0x42)
        {
          if (v106 > 0x422)
            LOWORD(v107) = 23;
          else
            v107 = (__clz(v51 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v108 = (int)v51 - 6;
          v109 = (__clz(v108) ^ 0x1F) - 1;
          v107 = (v108 >> v109) + 2 * v109 + 4;
        }
      }
      else
      {
        LOWORD(v107) = v51 - 2;
      }
      v110 = v107 & 7 | (8 * (v98 & 7));
      if ((v89 & 0x3FF) != 0 || (unsigned __int16)v98 > 7u || (unsigned __int16)v107 > 0xFu)
      {
        v112 = 3 * ((unsigned __int16)v98 >> 3) + ((unsigned __int16)(v107 & 0xFFF8) >> 3);
        v111 = ((((0x520D40u >> (2 * v112)) & 0xC0) + (v112 << 6)) | v110) + 64;
      }
      else
      {
        LOWORD(v111) = v110 | 0x40;
        if ((v107 & 0xFFF8) == 0)
          LOWORD(v111) = v107 & 7 | (8 * (v98 & 7));
      }
      *(_WORD *)(v123 + 12) = v111;
      *a11 += v12;
      v113 = v52 + 2;
      v85 = v52 + v51;
      v114 = v121;
      if (v52 + v51 < v121)
        v114 = v52 + v51;
      if (v66 < v51 >> 2)
      {
        if (v113 <= v85 - 4 * v66)
          v113 = v85 - 4 * v66;
        if (v114 < v113)
          v113 = v114;
      }
      v16 = v120 + 2 * v51 + v52;
      v123 += 16;
      if (v113 >= v114)
      {
        v12 = 0;
        a7 = v122;
      }
      else
      {
        a7 = v122;
        do
        {
          *(_DWORD *)(v17
                    + 4
                    * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v113 & a4))) >> 48)
                                       + (v113 & 8))) = v113;
          ++v113;
        }
        while (v114 != v113);
        v12 = 0;
      }
LABEL_180:
      v11 = v85;
      if (v85 + 8 >= v13)
        goto LABEL_187;
    }
    v101 = v122[1];
    if (v66 == v101)
    {
      v89 = 1;
      goto LABEL_124;
    }
    v102 = v66 + 3;
    v103 = v66 + 3 - v93;
    if (v103 > 6)
    {
      if (v102 - v101 > 6)
      {
        if (v66 == v122[2])
        {
          v89 = 2;
        }
        else if (v66 == v122[3])
        {
          v89 = 3;
        }
        else
        {
LABEL_123:
          v89 = v66 + 15;
        }
LABEL_124:
        if (v66 <= v88 && v89)
        {
          v122[3] = v122[2];
          *(_QWORD *)(v122 + 1) = *(_QWORD *)v122;
          *v122 = v66;
        }
        *(_DWORD *)v123 = v12;
        *(_DWORD *)(v123 + 4) = v51;
        v90 = *(unsigned int *)(a5 + 60);
        v91 = v90 + 16;
        if (v90 + 16 <= v89)
        {
          v94 = *(unsigned int *)(a5 + 56);
          v95 = v89 - v90 + (4 << v94) - 16;
          v96 = (__clz(v95) ^ 0x1F) - 1;
          v97 = ((v95 >> v96) & 1 | 2) << v96;
          v89 = ((v95 & ~(-1 << v94)) + v91 + ((((v95 >> v96) & 1 | (2 * (v96 - v94))) + 65534) << v94)) | ((v96 - v94) << 10);
          v92 = (v95 - v97) >> v94;
        }
        else
        {
          LODWORD(v92) = 0;
        }
        goto LABEL_132;
      }
      v104 = 4 * (v102 - v101);
      v105 = 266017486;
    }
    else
    {
      v104 = 4 * v103;
      v105 = 158663784;
    }
    v89 = (v105 >> v104) & 0xF;
    goto LABEL_124;
  }
  v123 = a9;
  v85 = a2;
LABEL_187:
  *a8 = v12 + v13 - v85;
  *a10 += (v123 - a9) >> 4;
  return result;
}

_DWORD *CreateBackwardReferencesNH4(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, _DWORD *a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unint64_t i;
  unint64_t v64;
  unsigned __int8 *v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  unsigned __int8 *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int64x2_t v89;
  uint64_t v90;
  int8x16_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unint64_t j;
  unint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned __int8 *v137;
  unint64_t v138;
  char v139;
  unsigned int v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unint64_t v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  int8x16_t v178;
  int8x16_t v179;
  uint64_t v180;

  v12 = a2;
  v180 = *MEMORY[0x1E0C80C00];
  v13 = *a9;
  v14 = (uint64_t)result + a2 - 7;
  v162 = v14;
  if ((unint64_t)result <= 7)
    v14 = a2;
  v160 = v14;
  if (*(int *)(a6 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  v172 = (unint64_t)result + a2;
  if (a2 + 8 >= (unint64_t)result + a2)
  {
    v163 = a10;
    v143 = a2;
    goto LABEL_257;
  }
  result = (_DWORD *)a6;
  v170 = *(_QWORD *)(a6 + 16);
  v171 = (1 << *(_DWORD *)(a6 + 8)) - 16;
  v16 = v15 + a2;
  v166 = a5 + 256;
  v17 = *(_QWORD *)(a7 + 88);
  v157 = *(_QWORD *)(a6 + 96);
  v156 = v157 + 1;
  v158 = v15;
  v161 = 4 * v15;
  v18 = (int8x16_t)vdupq_n_s64(0x1FFFFuLL);
  v163 = a10;
  v159 = a8;
  v165 = a7;
  do
  {
    v19 = v171;
    if (v12 >= v171)
      v20 = v171;
    else
      v20 = v12;
    if (v12 + v170 < v171)
      v19 = v12 + v170;
    if (result[156])
    {
      if (v12)
      {
        v21 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
        if (v12 != 1)
        {
          v22 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_20:
          v176 = *((unsigned __int8 *)result + (*(_BYTE *)(v166 + v22) | *(_BYTE *)(a5 + v21)) + 629);
          goto LABEL_21;
        }
      }
      else
      {
        v21 = 0;
      }
      v22 = 0;
      goto LABEL_20;
    }
    v176 = 0;
    v21 = 0;
LABEL_21:
    v23 = v172 - v12;
    v24 = v12 & a4;
    v25 = (unsigned __int8 *)(a3 + (v12 & a4));
    v26 = *v25;
    v27 = *a8;
    v173 = v21;
    if (v12 < v27)
      goto LABEL_39;
    v28 = (unsigned __int8 *)(a3 + (a4 & (v12 - v27)));
    if (v26 != *v28)
      goto LABEL_39;
    v177 = *a8;
    if (v23 < 8)
    {
      v33 = (unsigned __int8 *)(a3 + (a4 & (v12 - v27)));
      v32 = (unsigned __int8 *)(a3 + (v12 & a4));
      v30 = v172 - v12;
      if (v23)
      {
LABEL_30:
        v34 = &v33[v30];
        while (*v33 == *v32)
        {
          ++v32;
          ++v33;
          if (!--v30)
          {
            v33 = v34;
            break;
          }
        }
      }
    }
    else
    {
      v29 = 0;
      v30 = v172 - v12;
      do
      {
        v31 = *(_QWORD *)&v28[v29] ^ *(_QWORD *)&v25[v29];
        if (v31)
        {
          v35 = v29 + (__clz(__rbit64(v31)) >> 3);
          goto LABEL_36;
        }
        v30 -= 8;
        v29 += 8;
      }
      while (v30 > 7);
      v32 = &v25[v29];
      v33 = &v28[v29];
      if (v30)
        goto LABEL_30;
    }
    v35 = v33 - v28;
LABEL_36:
    if (v35 >= 4 && (v36 = 135 * v35 + 1935, v36 >= 0x7E5))
    {
      v26 = *(unsigned __int8 *)(a3 + v35 + v24);
    }
    else
    {
LABEL_39:
      v177 = 0;
      v35 = 0;
      v36 = 2020;
    }
    v37 = 0;
    v38 = *(_QWORD *)(a6 + 8 * v176 + 696);
    v164 = *(_QWORD *)(a6 + 72);
    v39 = vdupq_n_s64((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)v25) >> 47);
    v178 = vandq_s8((int8x16_t)vaddq_s64(v39, (int64x2_t)xmmword_19D02CCD0), v18);
    v179 = vandq_s8((int8x16_t)vaddq_s64(v39, (int64x2_t)xmmword_19D02CCE0), v18);
    v40 = *(uint64_t *)((char *)v178.i64 + (v12 & 0x18));
    do
    {
      v41 = *(unsigned int *)(v17 + 4 * v178.i64[v37]);
      v42 = v12 - v41;
      if (v26 == *(unsigned __int8 *)(a3 + (v41 & a4) + v35) && v12 != v41 && v42 <= v20)
      {
        v45 = a3 + (v41 & a4);
        if (v23 < 8)
        {
          v50 = (unsigned __int8 *)(a3 + (v41 & a4));
          v49 = (unsigned __int8 *)(a3 + (v12 & a4));
          v47 = v172 - v12;
          if (v23)
          {
LABEL_55:
            v51 = &v50[v47];
            while (*v50 == *v49)
            {
              ++v49;
              ++v50;
              if (!--v47)
              {
                v50 = v51;
                break;
              }
            }
          }
        }
        else
        {
          v46 = 0;
          v47 = v172 - v12;
          do
          {
            v48 = *(_QWORD *)(v45 + v46) ^ *(_QWORD *)&v25[v46];
            if (v48)
            {
              v52 = v46 + (__clz(__rbit64(v48)) >> 3);
              goto LABEL_61;
            }
            v47 -= 8;
            v46 += 8;
          }
          while (v47 > 7);
          v49 = &v25[v46];
          v50 = (unsigned __int8 *)(v45 + v46);
          if (v47)
            goto LABEL_55;
        }
        v52 = (unint64_t)&v50[-v45];
LABEL_61:
        if (v52 >= 4)
        {
          v53 = 135 * v52 - 30 * (__clz(v42) ^ 0x1F) + 1920;
          if (v36 < v53)
          {
            v26 = *(unsigned __int8 *)(a3 + v52 + v24);
            v177 = v42;
            v36 = v53;
            v35 = v52;
          }
        }
      }
      ++v37;
    }
    while (v37 != 4);
    if (v36 == 2020)
    {
      v54 = *(_QWORD *)(a7 + 80);
      v56 = *(_QWORD *)(v54 + 40);
      v55 = *(_QWORD *)(v54 + 48);
      if (v55 < v56 >> 7)
        goto LABEL_208;
      v57 = ((506832829 * *(_DWORD *)v25) >> 17) & 0x7FFELL;
      v58 = *(_QWORD *)(v38 + 32);
      *(_QWORD *)(v54 + 40) = v56 + 1;
      v59 = *(unsigned __int8 *)(v58 + v57);
      if (!*(_BYTE *)(v58 + v57) || v23 < v59)
        goto LABEL_208;
      v60 = *(unsigned __int16 *)(*(_QWORD *)(v38 + 24) + 2 * v57);
      v61 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v38 + 168)
                              + *(unsigned int *)(*(_QWORD *)v38 + 4 * *(unsigned __int8 *)(v58 + v57) + 32)
                              + v60 * *(unsigned __int8 *)(v58 + v57));
      if (v59 < 8)
      {
        i = v59;
        v65 = (unsigned __int8 *)(a3 + (v12 & a4));
      }
      else
      {
        v62 = 0;
        for (i = v59; i > 7; i -= 8)
        {
          v64 = *(_QWORD *)&v25[v62] ^ *(_QWORD *)&v61[v62];
          if (v64)
          {
            v35 = v62 + (__clz(__rbit64(v64)) >> 3);
            goto LABEL_201;
          }
          v62 += 8;
        }
        v65 = &v25[v62];
        if (!i)
          goto LABEL_195;
        v61 += v62;
      }
      v137 = &v65[i];
      while (*v65 == *v61)
      {
        ++v61;
        ++v65;
        if (!--i)
        {
          v65 = v137;
          break;
        }
      }
LABEL_195:
      v35 = v65 - v25;
LABEL_201:
      v141 = v35 && v35 + *(unsigned int *)(v38 + 12) > v59;
      if (!v141
        || (v142 = v156
                 + v19
                 + v60
                 + ((((*(_QWORD *)(v38 + 16) >> (6 * (v59 - v35))) & 0x3FLL)
                   + 4 * (v59 - v35)) << *(_BYTE *)(*(_QWORD *)v38 + v59)),
            v142 > v164)
        || (v36 = 135 * v35 - 30 * (__clz(v142) ^ 0x1F) + 1920, v36 < 0x7E4))
      {
LABEL_208:
        *(_DWORD *)(v17 + 4 * v40) = v12;
        result = (_DWORD *)a6;
LABEL_209:
        ++v13;
        v143 = v12 + 1;
        if (v12 + 1 > v16)
        {
          if (v143 <= v16 + v161)
          {
            v145 = v12 + 9;
            if (v12 + 9 >= v162)
              v145 = v162;
            while (v143 < v145)
            {
              *(_DWORD *)(v17
                        + 4
                        * (((((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v143 & a4))) >> 32) >> 15)
                          + (v143 & 0x18)) & 0x1FFFF)) = v143;
              v13 += 2;
              v143 += 2;
            }
          }
          else
          {
            v144 = v12 + 17;
            if (v12 + 17 >= v162)
              v144 = v162;
            while (v143 < v144)
            {
              *(_DWORD *)(v17
                        + 4
                        * (((((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v143 & a4))) >> 32) >> 15)
                          + (v143 & 0x18)) & 0x1FFFF)) = v143;
              v13 += 4;
              v143 += 4;
            }
          }
        }
        goto LABEL_249;
      }
      v177 = v142;
      v66 = v59 - v35;
      *(_QWORD *)(v54 + 48) = v55 + 1;
    }
    else
    {
      v66 = 0;
    }
    *(_DWORD *)(v17 + 4 * v40) = v12;
    result = (_DWORD *)a6;
    if (v36 < 0x7E5)
      goto LABEL_209;
    v67 = 0;
    v168 = *a8;
    while (1)
    {
      v68 = v23 - 1;
      v69 = v35 - 1;
      if (v35 - 1 >= v23 - 1)
        v69 = v23 - 1;
      if ((int)result[1] >= 5)
        v70 = 0;
      else
        v70 = v69;
      v71 = v12 + 1;
      if (v12 + 1 < v171)
        v72 = v12 + 1;
      else
        v72 = v171;
      v73 = v71 + v170;
      if (v71 + v170 >= v171)
        v73 = v171;
      v169 = v73;
      if (result[156])
      {
        v176 = *((unsigned __int8 *)result
               + (*(_BYTE *)(v166 + v173) | *(_BYTE *)(a5 + *(unsigned __int8 *)(a3 + (v12 & a4))))
               + 629);
        v173 = *(unsigned __int8 *)(a3 + (v12 & a4));
      }
      v74 = v71 & a4;
      v75 = *(unsigned __int8 *)(a3 + v70 + (v71 & a4));
      v76 = (unsigned __int8 *)(a3 + (v71 & a4));
      if (v71 < v168)
        goto LABEL_108;
      v77 = a4 & (v71 - v168);
      if (v75 != *(unsigned __int8 *)(a3 + v77 + v70))
        goto LABEL_108;
      v78 = a3 + v77;
      if (v68 < 8)
      {
        v81 = (_QWORD *)(a3 + v77);
        v80 = (_QWORD *)(a3 + (v71 & a4));
        v83 = v23 - 1;
        if (v23 != 1)
        {
LABEL_99:
          v84 = (_QWORD *)((char *)v81 + v83);
          while (*(unsigned __int8 *)v81 == *(unsigned __int8 *)v80)
          {
            v80 = (_QWORD *)((char *)v80 + 1);
            v81 = (_QWORD *)((char *)v81 + 1);
            if (!--v83)
            {
              v81 = v84;
              break;
            }
          }
        }
      }
      else
      {
        v79 = 0;
        v80 = (_QWORD *)(a3 + (v71 & a4));
        v81 = (_QWORD *)(a3 + v77);
        do
        {
          v82 = *v81 ^ *v80;
          if (v82)
          {
            v85 = (__clz(__rbit64(v82)) >> 3) - v79;
            goto LABEL_105;
          }
          ++v81;
          ++v80;
          v79 -= 8;
          v83 = v23 + v79 - 1;
        }
        while (v83 > 7);
        if (v23 + v79 != 1)
          goto LABEL_99;
      }
      v85 = (unint64_t)v81 - v78;
LABEL_105:
      result = (_DWORD *)a6;
      if (v85 >= 4 && (v86 = 135 * v85 + 1935, v86 >= 0x7E5))
      {
        v75 = *(unsigned __int8 *)(a3 + v85 + v74);
        v70 = v85;
        v87 = v168;
      }
      else
      {
LABEL_108:
        v87 = 0;
        v86 = 2020;
      }
      v88 = 0;
      v89 = vdupq_n_s64((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)v76) >> 47);
      v90 = *(_QWORD *)&result[2 * v176 + 174];
      v91 = (int8x16_t)vdupq_n_s64(0x1FFFFuLL);
      v178 = vandq_s8((int8x16_t)vaddq_s64(v89, (int64x2_t)xmmword_19D02CCD0), v91);
      v179 = vandq_s8((int8x16_t)vaddq_s64(v89, (int64x2_t)xmmword_19D02CCE0), v91);
      v175 = *(uint64_t *)((char *)v178.i64 + (v71 & 0x18));
      do
      {
        v92 = *(unsigned int *)(v17 + 4 * v178.i64[v88]);
        v93 = v71 - v92;
        if (v75 == *(unsigned __int8 *)(a3 + (v92 & a4) + v70) && v71 != v92 && v93 <= v72)
        {
          v94 = v92 & a4;
          v97 = a3 + (v92 & a4);
          if (v68 < 8)
          {
            v100 = (_QWORD *)(a3 + v94);
            v99 = (_QWORD *)(a3 + (v71 & a4));
            v102 = v23 - 1;
            if (v23 != 1)
            {
LABEL_124:
              v103 = (_QWORD *)((char *)v100 + v102);
              while (*(unsigned __int8 *)v100 == *(unsigned __int8 *)v99)
              {
                v99 = (_QWORD *)((char *)v99 + 1);
                v100 = (_QWORD *)((char *)v100 + 1);
                if (!--v102)
                {
                  v100 = v103;
                  break;
                }
              }
            }
          }
          else
          {
            v98 = 0;
            v99 = (_QWORD *)(a3 + (v71 & a4));
            v100 = (_QWORD *)(a3 + v94);
            do
            {
              v101 = *v100 ^ *v99;
              if (v101)
              {
                v104 = (__clz(__rbit64(v101)) >> 3) - v98;
                goto LABEL_130;
              }
              ++v100;
              ++v99;
              v98 -= 8;
              v102 = v23 + v98 - 1;
            }
            while (v102 > 7);
            if (v23 + v98 != 1)
              goto LABEL_124;
          }
          v104 = (unint64_t)v100 - v97;
LABEL_130:
          if (v104 >= 4)
          {
            v105 = 135 * v104 - 30 * (__clz(v93) ^ 0x1F) + 1920;
            if (v86 < v105)
            {
              v75 = *(unsigned __int8 *)(a3 + v104 + v74);
              v70 = v104;
              v87 = v93;
              v86 = v105;
            }
          }
        }
        ++v88;
      }
      while (v88 != 4);
      if (v86 == 2020)
      {
        v106 = *(_QWORD *)(v165 + 80);
        v108 = *(_QWORD *)(v106 + 40);
        v107 = *(_QWORD *)(v106 + 48);
        result = (_DWORD *)a6;
        if (v107 < v108 >> 7)
          goto LABEL_138;
        v109 = ((506832829 * *(_DWORD *)v76) >> 17) & 0x7FFELL;
        v110 = *(_QWORD *)(v90 + 32);
        *(_QWORD *)(v106 + 40) = v108 + 1;
        v111 = *(unsigned __int8 *)(v110 + v109);
        if (!(_DWORD)v111)
          goto LABEL_139;
        if (v68 < v111)
        {
LABEL_138:
          LODWORD(v111) = 0;
LABEL_139:
          v86 = 2020;
          goto LABEL_142;
        }
        v113 = *(unsigned __int16 *)(*(_QWORD *)(v90 + 24) + 2 * v109);
        v114 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v90 + 168)
                                 + *(unsigned int *)(*(_QWORD *)v90 + 4 * v111 + 32)
                                 + v113 * v111);
        if (v111 < 8)
        {
          j = v111;
          v118 = (unsigned __int8 *)(a3 + (v71 & a4));
        }
        else
        {
          v115 = 0;
          for (j = v111; j > 7; j -= 8)
          {
            v117 = *(_QWORD *)&v76[v115] ^ *(_QWORD *)&v114[v115];
            if (v117)
            {
              v120 = v115 + (__clz(__rbit64(v117)) >> 3);
              goto LABEL_159;
            }
            v115 += 8;
          }
          v118 = &v76[v115];
          if (!j)
            goto LABEL_157;
          v114 += v115;
        }
        v119 = &v118[j];
        while (*v118 == *v114)
        {
          ++v114;
          ++v118;
          if (!--j)
          {
            v118 = v119;
            break;
          }
        }
LABEL_157:
        v120 = v118 - v76;
LABEL_159:
        v121 = v120 && v120 + *(unsigned int *)(v90 + 12) > v111;
        if (v121
          && (v122 = v156
                   + v169
                   + v113
                   + ((((*(_QWORD *)(v90 + 16) >> (6 * (v111 - v120))) & 0x3FLL)
                     + 4 * (v111 - v120)) << *(_BYTE *)(*(_QWORD *)v90 + v111)),
              v122 <= v164)
          && (v86 = 135 * v120 - 30 * (__clz(v122) ^ 0x1F) + 1920, v86 >= 0x7E4))
        {
          LODWORD(v111) = v111 - v120;
          *(_QWORD *)(v106 + 48) = v107 + 1;
          v70 = v120;
          v87 = v122;
        }
        else
        {
          LODWORD(v111) = 0;
          v86 = 2020;
        }
      }
      else
      {
        LODWORD(v111) = 0;
      }
      result = (_DWORD *)a6;
LABEL_142:
      *(_DWORD *)(v17 + 4 * v175) = v71;
      if (v86 < v36 + 175)
        break;
      ++v13;
      if (v67 <= 2)
      {
        v112 = v12 + 9;
        ++v67;
        v177 = v87;
        v36 = v86;
        v66 = v111;
        v35 = v70;
        --v23;
        ++v12;
        if (v112 < v172)
          continue;
      }
      goto LABEL_171;
    }
    v123 = v12 + v170;
    if (v12 + v170 >= v171)
      v123 = v171;
    v169 = v123;
    v87 = v177;
    LODWORD(v111) = v66;
    v70 = v35;
    v71 = v12;
LABEL_171:
    a8 = v159;
    v124 = v163;
    if (v87 > v169 + v157)
    {
LABEL_172:
      v125 = v87 + 15;
      goto LABEL_173;
    }
    v126 = *v159;
    if (v87 == v126)
    {
      v125 = 0;
LABEL_178:
      a7 = v165;
      goto LABEL_179;
    }
    v136 = v159[1];
    if (v87 == v136)
    {
      v125 = 1;
    }
    else
    {
      v138 = v87 + 3 - v126;
      if (v138 > 6)
      {
        v146 = v87 + 3 - v136;
        if (v146 > 6)
        {
          if (v87 == v159[2])
          {
            v125 = 2;
          }
          else
          {
            if (v87 != v159[3])
              goto LABEL_172;
            v125 = 3;
          }
          goto LABEL_173;
        }
        v139 = 4 * v146;
        v140 = 266017486;
      }
      else
      {
        v139 = 4 * v138;
        v140 = 158663784;
      }
      v125 = (v140 >> v139) & 0xF;
    }
LABEL_173:
    if (v87 > v169 + v157)
      goto LABEL_178;
    a7 = v165;
    if (v125)
    {
      v159[3] = v159[2];
      *(_QWORD *)(v159 + 1) = *(_QWORD *)v159;
      *v159 = v87;
    }
LABEL_179:
    *v163 = v13;
    v163[1] = v70 | ((_DWORD)v111 << 25);
    v127 = result[15];
    v128 = v127 + 16;
    if (v127 + 16 <= v125)
    {
      v130 = result[14];
      v131 = v125 - v127 + (4 << v130) - 16;
      v132 = (__clz(v131) ^ 0x1F) - 1;
      v133 = ((v131 >> v132) & 1 | 2) << v132;
      v124 = v163;
      v125 = ((v131 & ~(-1 << v130))
            + v128
            + ((((v131 >> v132) & 1 | (2 * (v132 - v130))) + 65534) << v130)) | ((v132 - v130) << 10);
      v129 = (v131 - v133) >> v130;
    }
    else
    {
      LODWORD(v129) = 0;
    }
    *((_WORD *)v124 + 7) = v125;
    v124[2] = v129;
    if (v13 > 5)
    {
      if (v13 > 0x81)
      {
        if (v13 > 0x841)
        {
          if (v13 >> 1 >= 0xC21)
          {
            if (v13 < 0x5842)
              LOWORD(v134) = 22;
            else
              LOWORD(v134) = 23;
          }
          else
          {
            LOWORD(v134) = 21;
          }
        }
        else
        {
          v134 = (__clz(v13 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v135 = (__clz(v13 - 2) ^ 0x1F) - 1;
        v134 = ((v13 - 2) >> v135) + 2 * v135 + 2;
      }
    }
    else
    {
      LOWORD(v134) = v13;
    }
    v147 = (int)v111 + (int)v70;
    if (v147 > 9)
    {
      if (v147 > 0x85)
      {
        if (v147 > 0x845)
          LOWORD(v148) = 23;
        else
          v148 = (__clz(v147 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v149 = v147 - 6;
        v150 = (__clz(v149) ^ 0x1F) - 1;
        v148 = (v149 >> v150) + 2 * v150 + 4;
      }
    }
    else
    {
      LOWORD(v148) = v111 + v70 - 2;
    }
    v151 = v148 & 7 | (8 * (v134 & 7));
    if ((v125 & 0x3FF) != 0 || (unsigned __int16)v134 > 7u || (unsigned __int16)v148 > 0xFu)
    {
      v153 = 3 * ((unsigned __int16)v134 >> 3) + ((unsigned __int16)(v148 & 0xFFF8) >> 3);
      v152 = ((((0x520D40u >> (2 * v153)) & 0xC0) + (v153 << 6)) | v151) + 64;
    }
    else
    {
      LOWORD(v152) = v151 | 0x40;
      if ((v148 & 0xFFF8) == 0)
        LOWORD(v152) = v148 & 7 | (8 * (v134 & 7));
    }
    *((_WORD *)v124 + 6) = v152;
    *a12 += v13;
    v154 = v71 + 2;
    v143 = v71 + v70;
    v155 = v160;
    if (v71 + v70 < v160)
      v155 = v71 + v70;
    if (v87 < v70 >> 2)
    {
      if (v154 <= v143 - 4 * v87)
        v154 = v143 - 4 * v87;
      if (v155 < v154)
        v154 = v155;
    }
    v16 = v158 + 2 * v70 + v71;
    v163 = v124 + 4;
    if (v154 < v155)
    {
      do
      {
        *(_DWORD *)(v17
                  + 4
                  * (((((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v154 & a4))) >> 32) >> 15)
                    + (v154 & 0x18)) & 0x1FFFF)) = v154;
        ++v154;
      }
      while (v155 != v154);
    }
    v13 = 0;
LABEL_249:
    v12 = v143;
  }
  while (v143 + 8 < v172);
LABEL_257:
  *a9 = v13 + v172 - v143;
  *a11 += ((char *)v163 - (char *)a10) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH5(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  BOOL v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t i;
  unint64_t v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t j;
  unint64_t v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  unint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  BOOL v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unint64_t v180;
  int32x2_t v181;
  int v182;
  int32x4_t v183;
  int32x4_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unsigned int v198;
  unint64_t v199;
  uint64_t v200;
  unsigned int v201;
  unint64_t v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  int v227;
  unsigned int v228;
  int v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unsigned int v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;

  v12 = a2;
  v234 = *(_QWORD *)(a6 + 16);
  v13 = *a9;
  v14 = a2 + result;
  v215 = a2 + result - 3;
  if (result <= 3)
    v15 = a2;
  else
    v15 = a2 + result - 3;
  v16 = *(_DWORD *)(a6 + 8);
  v17 = 512;
  if (*(int *)(a6 + 4) < 9)
    v17 = 64;
  v218 = v17;
  v216 = v15;
  v217 = *(_QWORD *)(a6 + 96);
  v18 = *(_DWORD *)(a7 + 108);
  if (v18 >= 5)
  {
    v19 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v19, (int32x4_t)xmmword_19D02CCA0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v18 >= 0xB)
    {
      v20 = (const float *)(a8 + 1);
      v21 = (int32x4_t)vld1q_dup_f32(v20);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v21, (int32x4_t)xmmword_19D02CCA0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (a2 + 4 < v14)
  {
    v22 = v218 + a2;
    v233 = (1 << v16) - 16;
    v220 = v217 + 1;
    v221 = a5 + 256;
    v214 = v14 - 4;
    v219 = a10;
    v232 = a6;
    v223 = v14;
    v243 = *(_QWORD *)(a7 + 120);
    v235 = *(_QWORD *)(a7 + 128);
    while (1)
    {
      if (v12 >= v233)
        v23 = v233;
      else
        v23 = v12;
      v24 = v12 + v234;
      if (v12 + v234 >= v233)
        v24 = v233;
      v241 = v24;
      if (!*(_DWORD *)(a6 + 624))
      {
        v27 = 0;
        v25 = 0;
        goto LABEL_24;
      }
      if (!v12)
        break;
      v25 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
      if (v12 == 1)
        goto LABEL_22;
      v26 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_23:
      v27 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v221 + v26) | *(_BYTE *)(a5 + v25)) + 629);
LABEL_24:
      v245 = v22;
      v237 = v25;
      v28 = v14 - v12;
      v238 = v27;
      v29 = *(_QWORD *)(a6 + 8 * v27 + 696);
      v239 = *(_QWORD *)(a6 + 72);
      v30 = v12 & a4;
      v31 = *(int *)(a7 + 108);
      if ((_DWORD)v31)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = a3 + v30;
        result = 2020;
        v244 = 2020;
        do
        {
          v37 = a8[v32];
          v38 = v12 - v37;
          v39 = v23 < v37 || v38 >= v12;
          v40 = v38 & a4;
          v41 = v33 + v30;
          v42 = v39 || v41 > a4;
          v43 = v40 + v33;
          v44 = v42 || v43 > a4;
          if (!v44 && *(unsigned __int8 *)(a3 + v41) == *(unsigned __int8 *)(a3 + v43))
          {
            v45 = a3 + v40;
            if (v28 < 8)
            {
              v50 = (unsigned __int8 *)(a3 + v40);
              v49 = (unsigned __int8 *)(a3 + v30);
              v47 = v14 - v12;
              if (v28)
              {
LABEL_47:
                v51 = &v50[v47];
                while (*v50 == *v49)
                {
                  ++v49;
                  ++v50;
                  if (!--v47)
                  {
                    v50 = v51;
                    break;
                  }
                }
              }
            }
            else
            {
              v46 = 0;
              v47 = v14 - v12;
              do
              {
                v48 = *(_QWORD *)(v45 + v46) ^ *(_QWORD *)(v36 + v46);
                if (v48)
                {
                  v52 = v46 + (__clz(__rbit64(v48)) >> 3);
                  goto LABEL_53;
                }
                v47 -= 8;
                v46 += 8;
              }
              while (v47 > 7);
              v49 = (unsigned __int8 *)(v36 + v46);
              v50 = (unsigned __int8 *)(v45 + v46);
              if (v47)
                goto LABEL_47;
            }
            v52 = (unint64_t)&v50[-v45];
LABEL_53:
            if (v52 > 2 || v32 <= 1 && v52 == 2)
            {
              v53 = 135 * v52 + 1935;
              if (result < v53)
              {
                if (v32)
                  v53 -= ((0x1CA10u >> (v32 & 0xE)) & 0xE) + 39;
                if (result < v53)
                {
                  v35 = a8[v32];
                  v244 = v53;
                  v34 = v52;
                  result = v53;
                  v33 = v52;
                }
              }
            }
          }
          ++v32;
        }
        while (v32 != v31);
      }
      else
      {
        v35 = 0;
        v34 = 0;
        v33 = 0;
        v244 = 2020;
        result = 2020;
      }
      v54 = (unsigned __int8 *)(a3 + v30);
      v55 = *(unsigned int *)(a7 + 100);
      v56 = (506832829 * *(_DWORD *)(a3 + v30)) >> *(_DWORD *)(a7 + 96);
      v57 = v235 + 4 * ((_DWORD)v56 << *(_DWORD *)(a7 + 104));
      v58 = *(unsigned __int16 *)(v243 + 2 * v56);
      v59 = *(_QWORD *)(a7 + 88);
      v231 = v59;
      if (v58 >= v59)
        v60 = v58 - v59;
      else
        v60 = 0;
      if (v60 < v58)
      {
        v61 = *(unsigned __int16 *)(v243 + 2 * v56);
        do
        {
          v62 = *(unsigned int *)(v57 + 4 * (--v61 & v55));
          v63 = v12 - v62;
          if (v12 - v62 > v23)
            break;
          if (v33 + v30 <= a4)
          {
            v64 = v62 & a4;
            if (v64 + v33 <= a4 && *(unsigned __int8 *)(a3 + v33 + v30) == *(unsigned __int8 *)(a3 + v64 + v33))
            {
              v65 = a3 + v64;
              if (v28 < 8)
              {
                v70 = (unsigned __int8 *)(a3 + v64);
                v69 = (unsigned __int8 *)(a3 + v30);
                v67 = v14 - v12;
                if (v28)
                {
LABEL_78:
                  v71 = &v70[v67];
                  while (*v70 == *v69)
                  {
                    ++v69;
                    ++v70;
                    if (!--v67)
                    {
                      v70 = v71;
                      break;
                    }
                  }
                }
              }
              else
              {
                v66 = 0;
                v67 = v14 - v12;
                do
                {
                  v68 = *(_QWORD *)(v65 + v66) ^ *(_QWORD *)&v54[v66];
                  if (v68)
                  {
                    v72 = v66 + (__clz(__rbit64(v68)) >> 3);
                    goto LABEL_84;
                  }
                  v67 -= 8;
                  v66 += 8;
                }
                while (v67 > 7);
                v69 = &v54[v66];
                v70 = (unsigned __int8 *)(v65 + v66);
                if (v67)
                  goto LABEL_78;
              }
              v72 = (unint64_t)&v70[-v65];
LABEL_84:
              if (v72 >= 4)
              {
                v73 = 135 * v72 - 30 * (__clz(v63) ^ 0x1F) + 1920;
                if (result < v73)
                {
                  v35 = v63;
                  v244 = v73;
                  v34 = v72;
                  result = v73;
                  v33 = v72;
                }
              }
            }
          }
        }
        while (v61 > v60);
      }
      *(_DWORD *)(v57 + 4 * (v55 & v58)) = v12;
      *(_WORD *)(v243 + 2 * v56) = v58 + 1;
      if (v244 == 2020)
      {
        v74 = *(_QWORD *)(a7 + 112);
        v76 = *(_QWORD *)(v74 + 40);
        v75 = *(_QWORD *)(v74 + 48);
        if (v75 < v76 >> 7)
          goto LABEL_235;
        v230 = 0;
        v77 = ((506832829 * *(_DWORD *)v54) >> 17) & 0x7FFE;
        v78 = *(_QWORD *)(v29 + 32);
        v79 = 1;
        v80 = v34;
        v244 = 2020;
        v81 = v35;
        do
        {
          v82 = v79;
          *(_QWORD *)(v74 + 40) = ++v76;
          v83 = *(unsigned __int8 *)(v78 + v77);
          if (!*(_BYTE *)(v78 + v77) || v28 < v83)
            goto LABEL_113;
          result = *(_QWORD *)v29;
          v84 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v29 + 168)
                                  + *(unsigned int *)(*(_QWORD *)v29 + 4 * *(unsigned __int8 *)(v78 + v77) + 32)
                                  + *(unsigned __int16 *)(*(_QWORD *)(v29 + 24) + 2 * v77)
                                  * (unint64_t)*(unsigned __int8 *)(v78 + v77));
          if (v83 < 8)
          {
            v86 = *(unsigned __int8 *)(v78 + v77);
            v88 = v54;
          }
          else
          {
            v85 = 0;
            v86 = *(unsigned __int8 *)(v78 + v77);
            do
            {
              v87 = *(_QWORD *)&v54[v85] ^ *(_QWORD *)&v84[v85];
              if (v87)
              {
                v34 = v85 + (__clz(__rbit64(v87)) >> 3);
                goto LABEL_106;
              }
              v86 -= 8;
              v85 += 8;
            }
            while (v86 > 7);
            v88 = &v54[v85];
            if (!v86)
              goto LABEL_104;
            v84 += v85;
          }
          v89 = &v88[v86];
          while (*v88 == *v84)
          {
            ++v84;
            ++v88;
            if (!--v86)
            {
              v88 = v89;
              break;
            }
          }
LABEL_104:
          v34 = v88 - v54;
LABEL_106:
          v90 = v34 && v34 + *(unsigned int *)(v29 + 12) > v83;
          if (v90
            && (result = *(unsigned __int8 *)(result + v83),
                v35 = v220
                    + v241
                    + *(unsigned __int16 *)(*(_QWORD *)(v29 + 24) + 2 * v77)
                    + ((((*(_QWORD *)(v29 + 16) >> (6 * (v83 - v34))) & 0x3FLL)
                      + 4 * (v83 - v34)) << result),
                v35 <= v239)
            && (v91 = __clz(v35) ^ 0x1F, result = 32 * v91, 135 * v34 - 30 * v91 + 1920 >= v244))
          {
            v230 = v83 - v34;
            *(_QWORD *)(v74 + 48) = ++v75;
            v244 = 135 * v34 - 30 * v91 + 1920;
          }
          else
          {
LABEL_113:
            v35 = v81;
            v34 = v80;
          }
          v79 = 0;
          ++v77;
          v80 = v34;
          v81 = v35;
        }
        while ((v82 & 1) != 0);
      }
      else
      {
        v230 = 0;
      }
      if (v244 < 0x7E5)
      {
LABEL_235:
        ++v13;
        v166 = v12 + 1;
        v22 = v245;
        a6 = v232;
        if (v12 + 1 > v245)
        {
          if (v166 <= v245 + 4 * v218)
          {
            v174 = v12 + 9;
            if (v12 + 9 >= v215)
              v174 = v215;
            if (v166 < v174)
            {
              v175 = *(_DWORD *)(a7 + 96);
              v176 = *(_DWORD *)(a7 + 100);
              v177 = *(_DWORD *)(a7 + 104);
              do
              {
                v178 = (506832829 * *(_DWORD *)(a3 + (v166 & a4))) >> v175;
                v179 = *(unsigned __int16 *)(v243 + 2 * v178);
                *(_DWORD *)(v235 + 4 * ((v178 << v177) + (unint64_t)(v176 & v179))) = v166;
                *(_WORD *)(v243 + 2 * v178) = v179 + 1;
                v13 += 2;
                v166 += 2;
              }
              while (v166 < v174);
            }
          }
          else
          {
            v167 = v12 + 17;
            if (v12 + 17 >= v214)
              v167 = v214;
            if (v166 < v167)
            {
              v168 = *(_DWORD *)(a7 + 96);
              v169 = *(_DWORD *)(a7 + 100);
              v170 = *(_DWORD *)(a7 + 104);
              do
              {
                v171 = (506832829 * *(_DWORD *)(a3 + (v166 & a4))) >> v168;
                v172 = *(unsigned __int16 *)(v243 + 2 * v171);
                *(_DWORD *)(v235 + 4 * ((v171 << v170) + (unint64_t)(v169 & v172))) = v166;
                *(_WORD *)(v243 + 2 * v171) = v172 + 1;
                v13 += 4;
                v166 += 4;
              }
              while (v166 < v167);
            }
          }
        }
        goto LABEL_308;
      }
      v225 = v35;
      v242 = v13;
      v92 = 0;
      v93 = *(unsigned int *)(a7 + 100);
      v226 = *(_DWORD *)(a7 + 96);
      v227 = *(_DWORD *)(a7 + 104);
      v228 = *(_DWORD *)(a7 + 108);
      if (v228 <= 1)
        v94 = 1;
      else
        v94 = *(_DWORD *)(a7 + 108);
      v95 = v94;
      a6 = v232;
      while (1)
      {
        --v28;
        v96 = v34 - 1;
        if (v34 - 1 >= v28)
          v96 = v28;
        if (*(int *)(a6 + 4) >= 5)
          v97 = 0;
        else
          v97 = v96;
        v98 = v12 + 1;
        if (v12 + 1 < v233)
          v99 = v12 + 1;
        else
          v99 = v233;
        v100 = v98 + v234;
        if (v98 + v234 >= v233)
          v100 = v233;
        v236 = v100;
        v240 = v92;
        if (*(_DWORD *)(a6 + 624))
        {
          v101 = *(unsigned __int8 *)(a6
                                    + (*(_BYTE *)(v221 + v237) | *(_BYTE *)(a5
                                                                                           + *(unsigned __int8 *)(a3 + (v12 & a4))))
                                    + 629);
          v237 = *(unsigned __int8 *)(a3 + (v12 & a4));
        }
        else
        {
          v101 = v238;
        }
        v102 = *(_QWORD *)(a6 + 8 * v101 + 696);
        v103 = v98 & a4;
        v238 = v101;
        if (v228)
        {
          v104 = 0;
          v105 = 0;
          v106 = 0;
          v107 = a3 + v103;
          v108 = 2020;
          v246 = 2020;
          do
          {
            v109 = a8[v104];
            v110 = v98 - v109;
            v111 = v99 < v109 || v110 >= v98;
            v112 = v110 & a4;
            v113 = v97 + v103;
            v114 = v111 || v113 > a4;
            v115 = v112 + v97;
            v116 = v114 || v115 > a4;
            if (!v116 && *(unsigned __int8 *)(a3 + v113) == *(unsigned __int8 *)(a3 + v115))
            {
              v117 = a3 + v112;
              if (v28 < 8)
              {
                v122 = (unsigned __int8 *)(a3 + v112);
                v121 = (unsigned __int8 *)(a3 + v103);
                i = v28;
                if (v28)
                {
LABEL_159:
                  v123 = &v122[i];
                  while (*v122 == *v121)
                  {
                    ++v121;
                    ++v122;
                    if (!--i)
                    {
                      v122 = v123;
                      break;
                    }
                  }
                }
              }
              else
              {
                v118 = 0;
                for (i = v28; i > 7; i -= 8)
                {
                  v120 = *(_QWORD *)(v117 + v118) ^ *(_QWORD *)(v107 + v118);
                  if (v120)
                  {
                    v124 = v118 + (__clz(__rbit64(v120)) >> 3);
                    goto LABEL_165;
                  }
                  v118 += 8;
                }
                v121 = (unsigned __int8 *)(v107 + v118);
                v122 = (unsigned __int8 *)(v117 + v118);
                if (i)
                  goto LABEL_159;
              }
              v124 = (unint64_t)&v122[-v117];
LABEL_165:
              if (v124 > 2 || v104 <= 1 && v124 == 2)
              {
                v125 = 135 * v124 + 1935;
                if (v108 < v125)
                {
                  if (v104)
                    v125 -= ((0x1CA10u >> (v104 & 0xE)) & 0xE) + 39;
                  if (v108 < v125)
                  {
                    v106 = v124;
                    v105 = a8[v104];
                    v246 = v125;
                    v108 = v125;
                    v97 = v124;
                  }
                }
              }
            }
            ++v104;
          }
          while (v104 != v95);
        }
        else
        {
          v106 = 0;
          v105 = 0;
          v246 = 2020;
          v108 = 2020;
        }
        v224 = v34;
        v126 = (unsigned __int8 *)(a3 + v103);
        v127 = (506832829 * *(_DWORD *)(a3 + v103)) >> v226;
        v128 = v235 + 4 * ((_DWORD)v127 << v227);
        v129 = *(unsigned __int16 *)(v243 + 2 * v127);
        if (v129 >= v231)
          v130 = v129 - v231;
        else
          v130 = 0;
        if (v130 < v129)
        {
          v131 = *(unsigned __int16 *)(v243 + 2 * v127);
          do
          {
            v132 = *(unsigned int *)(v128 + 4 * (--v131 & v93));
            v133 = v98 - v132;
            if (v98 - v132 > v99)
              break;
            if (v97 + v103 <= a4)
            {
              v134 = v132 & a4;
              if (v134 + v97 <= a4 && *(unsigned __int8 *)(a3 + v97 + v103) == *(unsigned __int8 *)(a3 + v134 + v97))
              {
                v135 = a3 + v134;
                if (v28 < 8)
                {
                  v140 = (unsigned __int8 *)(a3 + v134);
                  v139 = (unsigned __int8 *)(a3 + v103);
                  j = v28;
                  if (v28)
                  {
LABEL_190:
                    v141 = &v140[j];
                    while (*v140 == *v139)
                    {
                      ++v139;
                      ++v140;
                      if (!--j)
                      {
                        v140 = v141;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v136 = 0;
                  for (j = v28; j > 7; j -= 8)
                  {
                    v138 = *(_QWORD *)(v135 + v136) ^ *(_QWORD *)&v126[v136];
                    if (v138)
                    {
                      v142 = v136 + (__clz(__rbit64(v138)) >> 3);
                      goto LABEL_196;
                    }
                    v136 += 8;
                  }
                  v139 = &v126[v136];
                  v140 = (unsigned __int8 *)(v135 + v136);
                  if (j)
                    goto LABEL_190;
                }
                v142 = (unint64_t)&v140[-v135];
LABEL_196:
                if (v142 >= 4)
                {
                  v143 = __clz(v133);
                  if (v108 < 135 * v142 - 30 * (v143 ^ 0x1F) + 1920)
                  {
                    v106 = v142;
                    v105 = v133;
                    v246 = 135 * v142 - 30 * (v143 ^ 0x1F) + 1920;
                    v108 = v246;
                    v97 = v142;
                  }
                }
              }
            }
          }
          while (v131 > v130);
        }
        *(_DWORD *)(v128 + 4 * (v93 & v129)) = v98;
        *(_WORD *)(v243 + 2 * v127) = v129 + 1;
        if (v246 == 2020)
        {
          v144 = *(_QWORD *)(a7 + 112);
          v146 = *(_QWORD *)(v144 + 40);
          v145 = *(_QWORD *)(v144 + 48);
          if (v145 >= v146 >> 7)
          {
            v147 = 0;
            v150 = ((506832829 * *(_DWORD *)v126) >> 17) & 0x7FFE;
            v151 = *(_QWORD *)(v102 + 32);
            v152 = 1;
            v246 = 2020;
            v153 = v105;
            v154 = v106;
            do
            {
              v155 = v152;
              *(_QWORD *)(v144 + 40) = ++v146;
              v156 = *(unsigned __int8 *)(v151 + v150);
              if (!*(_BYTE *)(v151 + v150) || v28 < v156)
                goto LABEL_231;
              v157 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v102 + 168)
                                       + *(unsigned int *)(*(_QWORD *)v102 + 4 * *(unsigned __int8 *)(v151 + v150) + 32)
                                       + *(unsigned __int16 *)(*(_QWORD *)(v102 + 24) + 2 * v150)
                                       * (unint64_t)*(unsigned __int8 *)(v151 + v150));
              if (v156 < 8)
              {
                v159 = *(unsigned __int8 *)(v151 + v150);
                v162 = v126;
              }
              else
              {
                v158 = 0;
                v159 = *(unsigned __int8 *)(v151 + v150);
                do
                {
                  v160 = *(_QWORD *)&v157[v158];
                  v161 = *(_QWORD *)&v126[v158];
                  if (v161 != v160)
                  {
                    v106 = v158 + (__clz(__rbit64(v161 ^ v160)) >> 3);
                    goto LABEL_224;
                  }
                  v159 -= 8;
                  v158 += 8;
                }
                while (v159 > 7);
                v162 = &v126[v158];
                if (!v159)
                  goto LABEL_222;
                v157 += v158;
              }
              v163 = &v162[v159];
              while (*v162 == *v157)
              {
                ++v157;
                ++v162;
                if (!--v159)
                {
                  v162 = v163;
                  break;
                }
              }
LABEL_222:
              v106 = v162 - v126;
LABEL_224:
              v164 = v106 && v106 + *(unsigned int *)(v102 + 12) > v156;
              if (v164
                && (v105 = v220
                         + v236
                         + *(unsigned __int16 *)(*(_QWORD *)(v102 + 24) + 2 * v150)
                         + ((((*(_QWORD *)(v102 + 16) >> (6 * (v156 - v106))) & 0x3FLL)
                           + 4 * (v156 - v106)) << *(_BYTE *)(*(_QWORD *)v102 + v156)),
                    v105 <= v239)
                && (v165 = 135 * v106 - 30 * (__clz(v105) ^ 0x1F) + 1920, v165 >= v246))
              {
                v147 = v156 - v106;
                *(_QWORD *)(v144 + 48) = ++v145;
                v246 = v165;
              }
              else
              {
LABEL_231:
                v106 = v154;
                v105 = v153;
              }
              v152 = 0;
              ++v150;
              v153 = v105;
              v154 = v106;
            }
            while ((v155 & 1) != 0);
          }
          else
          {
            v147 = 0;
            v246 = 2020;
          }
        }
        else
        {
          v147 = 0;
        }
        if (v246 < v244 + 175)
          break;
        ++v242;
        if (v240 > 2)
        {
          a6 = v232;
          v14 = v223;
          v149 = v147;
          goto LABEL_253;
        }
        v148 = v12 + 5;
        v92 = v240 + 1;
        v225 = v105;
        v244 = v246;
        v149 = v147;
        v230 = v147;
        v34 = v106;
        ++v12;
        v14 = v223;
        a6 = v232;
        if (v148 >= v223)
          goto LABEL_253;
      }
      v173 = v12 + v234;
      if (v12 + v234 >= v233)
        v173 = v233;
      v236 = v173;
      v106 = v224;
      v105 = v225;
      v149 = v230;
      v98 = v12;
      a6 = v232;
      v14 = v223;
LABEL_253:
      result = 506832829;
      if (v105 > v236 + v217)
        goto LABEL_254;
      v185 = *a8;
      if (v105 != v185)
      {
        v195 = a8[1];
        if (v105 == v195)
        {
          v180 = 1;
          goto LABEL_255;
        }
        v196 = v105 + 3 - v185;
        if (v196 > 6)
        {
          v199 = v105 + 3 - v195;
          if (v199 > 6)
          {
            if (v105 == a8[2])
            {
              v180 = 2;
            }
            else if (v105 == a8[3])
            {
              v180 = 3;
            }
            else
            {
LABEL_254:
              v180 = v105 + 15;
            }
LABEL_255:
            if (v105 <= v236 + v217)
            {
              if (v180)
              {
                a8[3] = a8[2];
                v181 = *(int32x2_t *)a8;
                *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
                *a8 = v105;
                v182 = *(_DWORD *)(a7 + 108);
                if (v182 >= 5)
                {
                  v183 = vdupq_n_s32(v105);
                  *((int32x4_t *)a8 + 1) = vaddq_s32(v183, (int32x4_t)xmmword_19D02CCA0);
                  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v183.i8, (int32x2_t)0x3FFFFFFFDLL);
                  if (v182 >= 0xB)
                  {
                    v184 = vdupq_lane_s32(v181, 0);
                    *(int32x4_t *)(a8 + 10) = vaddq_s32(v184, (int32x4_t)xmmword_19D02CCA0);
                    *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v184.i8, (int32x2_t)0x3FFFFFFFDLL);
                  }
                }
              }
            }
            goto LABEL_262;
          }
          v197 = 4 * v199;
          v198 = 266017486;
        }
        else
        {
          v197 = 4 * v196;
          v198 = 158663784;
        }
        v180 = (v198 >> v197) & 0xF;
        goto LABEL_255;
      }
      v180 = 0;
LABEL_262:
      *(_DWORD *)v219 = v242;
      *(_DWORD *)(v219 + 4) = v106 | (v149 << 25);
      v186 = *(unsigned int *)(a6 + 60);
      v187 = v186 + 16;
      if (v186 + 16 <= v180)
      {
        v189 = *(unsigned int *)(a6 + 56);
        v190 = v180 - v186 + (4 << v189) - 16;
        v191 = (__clz(v190) ^ 0x1F) - 1;
        v192 = ((v190 >> v191) & 1 | 2) << v191;
        v180 = ((v190 & ~(-1 << v189))
              + v187
              + ((((v190 >> v191) & 1 | (2 * (v191 - v189))) + 65534) << v189)) | ((v191 - v189) << 10);
        v188 = (v190 - v192) >> v189;
      }
      else
      {
        LODWORD(v188) = 0;
      }
      *(_WORD *)(v219 + 14) = v180;
      *(_DWORD *)(v219 + 8) = v188;
      if (v242 > 5)
      {
        if (v242 > 0x81)
        {
          if (v242 > 0x841)
          {
            if (v242 >> 1 >= 0xC21)
            {
              if (v242 < 0x5842)
                LOWORD(v193) = 22;
              else
                LOWORD(v193) = 23;
            }
            else
            {
              LOWORD(v193) = 21;
            }
          }
          else
          {
            v193 = (__clz(v242 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v194 = (__clz(v242 - 2) ^ 0x1F) - 1;
          v193 = ((v242 - 2) >> v194) + 2 * v194 + 2;
        }
      }
      else
      {
        LOWORD(v193) = v242;
      }
      v200 = v149 + (int)v106;
      if (v200 > 9)
      {
        if (v200 > 0x85)
        {
          if (v200 > 0x845)
            LOWORD(v201) = 23;
          else
            v201 = (__clz(v200 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v202 = v200 - 6;
          v203 = (__clz(v202) ^ 0x1F) - 1;
          v201 = (v202 >> v203) + 2 * v203 + 4;
        }
      }
      else
      {
        LOWORD(v201) = v149 + v106 - 2;
      }
      v204 = v201 & 7 | (8 * (v193 & 7));
      if ((v180 & 0x3FF) != 0 || (unsigned __int16)v193 > 7u || (unsigned __int16)v201 > 0xFu)
      {
        v206 = 3 * ((unsigned __int16)v193 >> 3) + ((unsigned __int16)(v201 & 0xFFF8) >> 3);
        v205 = ((((0x520D40u >> (2 * v206)) & 0xC0) + (v206 << 6)) | v204) + 64;
      }
      else
      {
        LOWORD(v205) = v204 | 0x40;
        if ((v201 & 0xFFF8) == 0)
          LOWORD(v205) = v201 & 7 | (8 * (v193 & 7));
      }
      *(_WORD *)(v219 + 12) = v205;
      v207 = v216;
      *a12 += v242;
      v208 = v98 + 2;
      v166 = v98 + v106;
      if (v98 + v106 < v216)
        v207 = v98 + v106;
      if (v105 < v106 >> 2)
      {
        if (v208 <= v166 - 4 * v105)
          v208 = v166 - 4 * v105;
        if (v207 < v208)
          v208 = v207;
      }
      v22 = v218 + 2 * v106 + v98;
      v219 += 16;
      if (v208 < v207)
      {
        v209 = *(_DWORD *)(a7 + 96);
        v210 = *(_DWORD *)(a7 + 100);
        v211 = *(_DWORD *)(a7 + 104);
        do
        {
          v212 = (506832829 * *(_DWORD *)(a3 + (v208 & a4))) >> v209;
          v213 = *(unsigned __int16 *)(v243 + 2 * v212);
          *(_DWORD *)(v235 + 4 * ((v212 << v211) + (unint64_t)(v210 & v213))) = v208;
          *(_WORD *)(v243 + 2 * v212) = v213 + 1;
          ++v208;
        }
        while (v207 != v208);
      }
      v13 = 0;
LABEL_308:
      v12 = v166;
      if (v166 + 4 >= v14)
        goto LABEL_315;
    }
    v25 = 0;
LABEL_22:
    v26 = 0;
    goto LABEL_23;
  }
  v219 = a10;
  v166 = a2;
LABEL_315:
  *a9 = v13 + v14 - v166;
  *a11 += (v219 - a10) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH6(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  unint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  BOOL v122;
  unint64_t v123;
  BOOL v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t i;
  unint64_t v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  char v170;
  unint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unsigned __int8 *v178;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unint64_t v187;
  unint64_t v188;
  int32x2_t v189;
  int v190;
  int32x4_t v191;
  int32x4_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  unint64_t v203;
  int v204;
  int v205;
  unint64_t v206;
  unsigned int v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  int v223;
  int v224;
  unint64_t v225;
  unsigned int v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v235;
  int v236;
  unsigned int v237;
  uint64_t v239;
  int v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  int *v251;
  unint64_t v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;

  v12 = a2;
  v243 = *(_QWORD *)(a6 + 16);
  v13 = *a9;
  v246 = a2 + result;
  v14 = a2 + result - 7;
  v227 = v14;
  if (result <= 7)
    v14 = a2;
  v228 = v14;
  v15 = *(_DWORD *)(a6 + 8);
  v16 = 512;
  if (*(int *)(a6 + 4) < 9)
    v16 = 64;
  v230 = v16;
  v229 = *(_QWORD *)(a6 + 96);
  v18 = *(_DWORD *)(a7 + 112);
  if (v18 >= 5)
  {
    v19 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v19, (int32x4_t)xmmword_19D02CCA0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v18 >= 0xB)
    {
      v20 = (const float *)(a8 + 1);
      v21 = (int32x4_t)vld1q_dup_f32(v20);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v21, (int32x4_t)xmmword_19D02CCA0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (a2 + 8 >= v246)
  {
    v231 = a10;
    v181 = a2;
    goto LABEL_322;
  }
  v22 = v230 + a2;
  v242 = (1 << v15) - 16;
  v24 = *(_QWORD *)(a7 + 128);
  v23 = *(_QWORD *)(a7 + 136);
  v245 = *(_QWORD *)(a7 + 96);
  v232 = v229 + 1;
  v233 = a5 + 256;
  v231 = a10;
  v251 = a8;
  v25 = a6;
  v239 = a6;
  v255 = *(_QWORD *)(a7 + 128);
  v256 = a3;
  v244 = *(_QWORD *)(a7 + 136);
  do
  {
    if (v12 >= v242)
      v26 = v242;
    else
      v26 = v12;
    v27 = v12 + v243;
    if (v12 + v243 >= v242)
      v27 = v242;
    v259 = v27;
    if (*(_DWORD *)(v25 + 624))
    {
      if (v12)
      {
        v28 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
        if (v12 != 1)
        {
          v29 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_22:
          v30 = *(unsigned __int8 *)(v25 + (*(_BYTE *)(v233 + v29) | *(_BYTE *)(a5 + v28)) + 629);
          goto LABEL_23;
        }
      }
      else
      {
        v28 = 0;
      }
      v29 = 0;
      goto LABEL_22;
    }
    v30 = 0;
    v28 = 0;
LABEL_23:
    v31 = v246 - v12;
    v250 = v30;
    v32 = *(_QWORD *)(v25 + 8 * v30 + 696);
    v252 = *(_QWORD *)(v25 + 72);
    v33 = v12 & a4;
    v34 = *(int *)(a7 + 112);
    if ((_DWORD)v34)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v248 = 0;
      v38 = a3 + v33;
      v39 = 2020;
      v258 = 2020;
      do
      {
        result = a8[v35];
        v40 = v12 - result;
        v41 = v26 < result || v40 >= v12;
        v42 = v40 & a4;
        v43 = v36 + v33;
        v44 = v41 || v43 > a4;
        v45 = v42 + v36;
        v46 = v44 || v45 > a4;
        if (!v46 && *(unsigned __int8 *)(a3 + v43) == *(unsigned __int8 *)(a3 + v45))
        {
          v47 = (unsigned __int8 *)(a3 + v42);
          if (v31 < 8)
          {
            v52 = v47;
            v51 = (unsigned __int8 *)(a3 + v33);
            v49 = v246 - v12;
            if (v31)
            {
LABEL_46:
              v53 = &v52[v49];
              while (*v52 == *v51)
              {
                ++v51;
                ++v52;
                if (!--v49)
                {
                  v52 = v53;
                  break;
                }
              }
            }
          }
          else
          {
            v48 = 0;
            v49 = v246 - v12;
            do
            {
              v50 = *(_QWORD *)&v47[v48] ^ *(_QWORD *)(v38 + v48);
              if (v50)
              {
                v54 = v48 + (__clz(__rbit64(v50)) >> 3);
                goto LABEL_52;
              }
              v49 -= 8;
              v48 += 8;
            }
            while (v49 > 7);
            v51 = (unsigned __int8 *)(v38 + v48);
            v52 = &v47[v48];
            if (v49)
              goto LABEL_46;
          }
          v54 = v52 - v47;
LABEL_52:
          if (v54 > 2 || v35 <= 1 && v54 == 2)
          {
            v55 = 135 * v54 + 1935;
            if (v39 < v55)
            {
              if (v35)
                v55 -= ((0x1CA10u >> (v35 & 0xE)) & 0xE) + 39;
              if (v39 < v55)
              {
                v248 = a8[v35];
                v258 = v55;
                v37 = v54;
                v39 = v55;
                v36 = v54;
              }
            }
          }
        }
        ++v35;
      }
      while (v35 != v34);
    }
    else
    {
      v248 = 0;
      v37 = 0;
      v36 = 0;
      v258 = 2020;
      v39 = 2020;
    }
    v261 = v28;
    v263 = v22;
    v56 = (unsigned __int8 *)(a3 + v33);
    v57 = *(_QWORD *)(a3 + v33);
    v58 = (v57 * v245) >> 49;
    v59 = *(unsigned int *)(a7 + 104);
    v60 = v23 + 4 * (v58 << *(_DWORD *)(a7 + 108));
    v61 = *(unsigned __int16 *)(v24 + 2 * v58);
    v62 = *(_QWORD *)(a7 + 88);
    v241 = v62;
    if (v61 >= v62)
      v63 = v61 - v62;
    else
      v63 = 0;
    v64 = v37;
    if (v63 < v61)
    {
      v65 = v33 + a3 + 4;
      result = *(unsigned __int16 *)(v24 + 2 * v58);
      do
      {
        v66 = *(unsigned int *)(v60 + 4 * (--result & v59));
        v67 = v12 - v66;
        if (v12 - v66 > v26)
          break;
        if (v36 + v33 <= a4)
        {
          v68 = v12;
          v69 = v66 & a4;
          if (v69 + v36 <= a4
            && *(unsigned __int8 *)(a3 + v36 + v33) == *(unsigned __int8 *)(a3 + v69 + v36)
            && *(_DWORD *)(a3 + v69) == (_DWORD)v57)
          {
            v70 = v69 + a3 + 4;
            v71 = v39;
            v72 = v13;
            if (v31 - 4 < 8)
            {
              v77 = (unsigned __int8 *)(v69 + a3 + 4);
              v76 = (unsigned __int8 *)v65;
              v74 = v31 - 4;
              if (v31 != 4)
              {
LABEL_80:
                v78 = &v77[v74];
                while (*v77 == *v76)
                {
                  ++v76;
                  ++v77;
                  if (!--v74)
                  {
                    v77 = v78;
                    break;
                  }
                }
                v24 = v255;
                a3 = v256;
                v23 = v244;
              }
            }
            else
            {
              v73 = 0;
              v74 = v31 - 4;
              do
              {
                v75 = *(_QWORD *)(v70 + v73) ^ *(_QWORD *)(v65 + v73);
                if (v75)
                {
                  v79 = (unsigned __int8 *)(v73 + (__clz(__rbit64(v75)) >> 3));
                  v23 = v244;
                  v13 = v72;
                  v39 = v71;
                  goto LABEL_87;
                }
                v74 -= 8;
                v73 += 8;
              }
              while (v74 > 7);
              v76 = (unsigned __int8 *)(v65 + v73);
              v77 = (unsigned __int8 *)(v70 + v73);
              v23 = v244;
              if (v74)
                goto LABEL_80;
            }
            v13 = v72;
            v39 = v71;
            v79 = &v77[-v70];
LABEL_87:
            v80 = (unint64_t)(v79 + 4);
            v81 = __clz(v67);
            v12 = v68;
            if (v39 < 135 * v80 - 30 * (v81 ^ 0x1F) + 1920)
            {
              v248 = v67;
              v258 = 135 * v80 - 30 * (v81 ^ 0x1F) + 1920;
              v64 = v80;
              v39 = v258;
              v36 = v80;
            }
          }
        }
      }
      while (result > v63);
    }
    *(_DWORD *)(v60 + 4 * (v59 & v61)) = v12;
    *(_WORD *)(v24 + 2 * v58) = v61 + 1;
    v82 = v64;
    if (v258 == 2020)
    {
      v83 = *(_QWORD *)(a7 + 120);
      v85 = *(_QWORD *)(v83 + 40);
      v84 = *(_QWORD *)(v83 + 48);
      a8 = v251;
      v86 = v248;
      if (v84 < v85 >> 7)
        goto LABEL_241;
      v240 = 0;
      v87 = ((506832829 * *(_DWORD *)v56) >> 17) & 0x7FFE;
      v88 = *(_QWORD *)(v32 + 32);
      v89 = 1;
      result = v82;
      v258 = 2020;
      do
      {
        v90 = v89;
        *(_QWORD *)(v83 + 40) = ++v85;
        v91 = *(unsigned __int8 *)(v88 + v87);
        if (!*(_BYTE *)(v88 + v87) || v31 < v91)
          goto LABEL_114;
        v92 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v32 + 168)
                                + *(unsigned int *)(*(_QWORD *)v32 + 4 * *(unsigned __int8 *)(v88 + v87) + 32)
                                + *(unsigned __int16 *)(*(_QWORD *)(v32 + 24) + 2 * v87)
                                * (unint64_t)*(unsigned __int8 *)(v88 + v87));
        if (v91 < 8)
        {
          v94 = *(unsigned __int8 *)(v88 + v87);
          v96 = v56;
        }
        else
        {
          v93 = 0;
          v94 = *(unsigned __int8 *)(v88 + v87);
          do
          {
            v95 = *(_QWORD *)&v56[v93] ^ *(_QWORD *)&v92[v93];
            if (v95)
            {
              v82 = v93 + (__clz(__rbit64(v95)) >> 3);
              goto LABEL_107;
            }
            v94 -= 8;
            v93 += 8;
          }
          while (v94 > 7);
          v96 = &v56[v93];
          if (!v94)
            goto LABEL_105;
          v92 += v93;
        }
        v97 = &v96[v94];
        while (*v96 == *v92)
        {
          ++v92;
          ++v96;
          if (!--v94)
          {
            v96 = v97;
            break;
          }
        }
LABEL_105:
        v82 = v96 - v56;
LABEL_107:
        a8 = v251;
        v98 = v82 && v82 + *(unsigned int *)(v32 + 12) > v91;
        if (v98
          && (v99 = v232
                  + v259
                  + *(unsigned __int16 *)(*(_QWORD *)(v32 + 24) + 2 * v87)
                  + ((((*(_QWORD *)(v32 + 16) >> (6 * (v91 - v82))) & 0x3FLL)
                    + 4 * (v91 - v82)) << *(_BYTE *)(*(_QWORD *)v32 + v91)),
              v99 <= v252)
          && (v100 = 135 * v82 - 30 * (__clz(v99) ^ 0x1F) + 1920, v100 >= v258))
        {
          v240 = v91 - v82;
          *(_QWORD *)(v83 + 48) = ++v84;
          v258 = v100;
        }
        else
        {
LABEL_114:
          v99 = v86;
          v82 = result;
        }
        v89 = 0;
        ++v87;
        result = v82;
        v86 = v99;
      }
      while ((v90 & 1) != 0);
    }
    else
    {
      v240 = 0;
      a8 = v251;
      v99 = v248;
    }
    if (v258 < 0x7E5)
    {
LABEL_241:
      ++v13;
      v181 = v12 + 1;
      v22 = v263;
      v25 = v239;
      if (v12 + 1 > v263)
      {
        if (v181 <= v263 + 4 * v230)
        {
          v203 = v12 + 9;
          if (v12 + 9 >= v227)
            v203 = v227;
          if (v181 < v203)
          {
            v204 = *(_DWORD *)(a7 + 104);
            v205 = *(_DWORD *)(a7 + 108);
            do
            {
              v206 = (*(_QWORD *)(a3 + (v181 & a4)) * v245) >> 49;
              v207 = *(unsigned __int16 *)(v24 + 2 * v206);
              *(_WORD *)(v24 + 2 * v206) = v207 + 1;
              *(_DWORD *)(v23 + 4 * ((v206 << v205) + (v204 & v207))) = v181;
              v13 += 2;
              v181 += 2;
            }
            while (v181 < v203);
          }
        }
        else
        {
          v182 = v12 + 17;
          if (v12 + 17 >= v227)
            v182 = v227;
          if (v181 < v182)
          {
            v183 = *(_DWORD *)(a7 + 104);
            v184 = *(_DWORD *)(a7 + 108);
            do
            {
              v185 = (*(_QWORD *)(a3 + (v181 & a4)) * v245) >> 49;
              v186 = *(unsigned __int16 *)(v24 + 2 * v185);
              *(_WORD *)(v24 + 2 * v185) = v186 + 1;
              *(_DWORD *)(v23 + 4 * ((v185 << v184) + (v183 & v186))) = v181;
              v13 += 4;
              v181 += 4;
            }
            while (v181 < v182);
          }
        }
      }
      goto LABEL_315;
    }
    v254 = v13;
    v101 = 0;
    v25 = v239;
    v236 = *(_DWORD *)(a7 + 108);
    v102 = *(unsigned int *)(a7 + 104);
    v237 = *(_DWORD *)(a7 + 112);
    if (v237 <= 1)
      v103 = 1;
    else
      v103 = *(_DWORD *)(a7 + 112);
    v104 = v103;
    v105 = v261;
    while (1)
    {
      v106 = v82 - 1;
      v262 = v31 - 1;
      if (v82 - 1 >= v31 - 1)
        v106 = v31 - 1;
      if (*(int *)(v25 + 4) >= 5)
        v107 = 0;
      else
        v107 = v106;
      v108 = v12 + 1;
      if (v12 + 1 < v242)
        v109 = v12 + 1;
      else
        v109 = v242;
      v110 = v108 + v243;
      if (v108 + v243 >= v242)
        v110 = v242;
      v247 = v110;
      v249 = v99;
      v235 = v82;
      if (*(_DWORD *)(v25 + 624))
      {
        v111 = *(unsigned __int8 *)(v25
                                  + (*(_BYTE *)(v233 + v105) | *(_BYTE *)(a5
                                                                                         + *(unsigned __int8 *)(a3 + (v12 & a4))))
                                  + 629);
        v105 = *(unsigned __int8 *)(a3 + (v12 & a4));
      }
      else
      {
        v111 = v250;
      }
      v260 = *(_QWORD *)(v25 + 8 * v111 + 696);
      v112 = v108 & a4;
      v250 = v111;
      v253 = v101;
      if (v237)
      {
        v113 = 0;
        v114 = 0;
        v115 = 0;
        v116 = 2020;
        v264 = 2020;
        do
        {
          v117 = a8[v113];
          v118 = v108 - v117;
          v119 = v109 < v117 || v118 >= v108;
          v120 = v118 & a4;
          v121 = v107 + v112;
          v122 = v119 || v121 > a4;
          v123 = v120 + v107;
          v124 = v122 || v123 > a4;
          if (!v124 && *(unsigned __int8 *)(a3 + v121) == *(unsigned __int8 *)(a3 + v123))
          {
            v125 = (_QWORD *)(a3 + v120);
            v126 = v31 - 1;
            if (v262 < 8)
            {
              v129 = v125;
              v128 = (_QWORD *)(a3 + v112);
              if (v31 != 1)
              {
LABEL_160:
                v131 = (_QWORD *)((char *)v129 + v126);
                while (*(unsigned __int8 *)v129 == *(unsigned __int8 *)v128)
                {
                  v128 = (_QWORD *)((char *)v128 + 1);
                  v129 = (_QWORD *)((char *)v129 + 1);
                  if (!--v126)
                  {
                    v129 = v131;
                    break;
                  }
                }
              }
            }
            else
            {
              v127 = 0;
              v128 = (_QWORD *)(a3 + v112);
              v129 = v125;
              do
              {
                v130 = *v129 ^ *v128;
                if (v130)
                {
                  v132 = (__clz(__rbit64(v130)) >> 3) - v127;
                  goto LABEL_166;
                }
                ++v129;
                ++v128;
                v127 -= 8;
                v126 = v31 + v127 - 1;
              }
              while (v126 > 7);
              if (v31 + v127 != 1)
                goto LABEL_160;
            }
            v132 = (char *)v129 - (char *)v125;
LABEL_166:
            if (v132 > 2 || v113 <= 1 && v132 == 2)
            {
              v133 = 135 * v132 + 1935;
              if (v116 < v133)
              {
                if (v113)
                  v133 -= ((0x1CA10u >> (v113 & 0xE)) & 0xE) + 39;
                if (v116 < v133)
                {
                  v115 = v132;
                  v114 = a8[v113];
                  v264 = v133;
                  v116 = v133;
                  v107 = v132;
                }
              }
            }
          }
          ++v113;
        }
        while (v113 != v104);
      }
      else
      {
        v115 = 0;
        v114 = 0;
        v264 = 2020;
        v116 = 2020;
      }
      v257 = v116;
      v134 = v25;
      v135 = (unsigned __int8 *)(a3 + v112);
      v136 = *(_QWORD *)(a3 + v112);
      v137 = (v136 * v245) >> 49;
      v138 = v244 + 4 * (v137 << v236);
      v139 = *(unsigned __int16 *)(v24 + 2 * v137);
      if (v139 >= v241)
        v140 = v139 - v241;
      else
        v140 = 0;
      if (v140 < v139)
      {
        v141 = v31 - 5;
        v142 = v112 + a3 + 4;
        v143 = *(unsigned __int16 *)(v24 + 2 * v137);
        v144 = v260;
        while (1)
        {
          v145 = *(unsigned int *)(v138 + 4 * (--v143 & v102));
          v146 = v108 - v145;
          if (v108 - v145 > v109)
            goto LABEL_204;
          if (v107 + v112 <= a4)
          {
            v147 = v145 & a4;
            if (v147 + v107 <= a4
              && *(unsigned __int8 *)(a3 + v107 + v112) == *(unsigned __int8 *)(a3 + v147 + v107)
              && *(_DWORD *)(a3 + v147) == (_DWORD)v136)
            {
              break;
            }
          }
LABEL_201:
          if (v143 <= v140)
            goto LABEL_204;
        }
        v148 = v147 + a3 + 4;
        if (v141 < 8)
        {
          v153 = (unsigned __int8 *)(v147 + a3 + 4);
          v152 = (unsigned __int8 *)v142;
          i = v141;
          if (v141)
          {
LABEL_192:
            v154 = &v153[i];
            while (*v153 == *v152)
            {
              ++v152;
              ++v153;
              if (!--i)
              {
                v153 = v154;
                break;
              }
            }
            v134 = v239;
            v24 = v255;
            a3 = v256;
            v144 = v260;
LABEL_197:
            v155 = &v153[-v148];
LABEL_199:
            v156 = (unint64_t)(v155 + 4);
            v157 = 135 * v156 - 30 * (__clz(v146) ^ 0x1F) + 1920;
            if (v257 < v157)
            {
              v115 = v156;
              v114 = v146;
              v264 = v157;
              v257 = v157;
              v107 = v156;
            }
            goto LABEL_201;
          }
        }
        else
        {
          v149 = 0;
          for (i = v141; i > 7; i -= 8)
          {
            v151 = *(_QWORD *)(v148 + v149) ^ *(_QWORD *)(v142 + v149);
            if (v151)
            {
              v155 = (unsigned __int8 *)(v149 + (__clz(__rbit64(v151)) >> 3));
              v134 = v239;
              v24 = v255;
              a3 = v256;
              goto LABEL_199;
            }
            v149 += 8;
          }
          v152 = (unsigned __int8 *)(v142 + v149);
          v153 = (unsigned __int8 *)(v148 + v149);
          if (i)
            goto LABEL_192;
        }
        v134 = v239;
        v24 = v255;
        a3 = v256;
        goto LABEL_197;
      }
      v144 = v260;
LABEL_204:
      *(_DWORD *)(v138 + 4 * (v102 & v139)) = v108;
      *(_WORD *)(v24 + 2 * v137) = v139 + 1;
      if (v264 == 2020)
      {
        v158 = *(_QWORD *)(a7 + 120);
        v160 = *(_QWORD *)(v158 + 40);
        v159 = *(_QWORD *)(v158 + 48);
        v25 = v134;
        v161 = v262;
        v162 = 0;
        if (v159 >= v160 >> 7)
        {
          v164 = ((506832829 * *(_DWORD *)v135) >> 17) & 0x7FFE;
          v165 = *(_QWORD *)(v144 + 32);
          v166 = v260;
          v167 = 1;
          v264 = 2020;
          v168 = v114;
          v169 = v115;
          do
          {
            v170 = v167;
            *(_QWORD *)(v158 + 40) = ++v160;
            v171 = *(unsigned __int8 *)(v165 + v164);
            if (!*(_BYTE *)(v165 + v164) || v161 < v171)
              goto LABEL_233;
            v172 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v166 + 168)
                                     + *(unsigned int *)(*(_QWORD *)v166 + 4 * *(unsigned __int8 *)(v165 + v164) + 32)
                                     + *(unsigned __int16 *)(*(_QWORD *)(v166 + 24) + 2 * v164)
                                     * (unint64_t)*(unsigned __int8 *)(v165 + v164));
            if (v171 < 8)
            {
              v177 = v12;
              v174 = *(unsigned __int8 *)(v165 + v164);
              v176 = v135;
            }
            else
            {
              v173 = 0;
              v174 = *(unsigned __int8 *)(v165 + v164);
              do
              {
                v175 = *(_QWORD *)&v135[v173] ^ *(_QWORD *)&v172[v173];
                if (v175)
                {
                  v115 = v173 + (__clz(__rbit64(v175)) >> 3);
                  goto LABEL_229;
                }
                v174 -= 8;
                v173 += 8;
              }
              while (v174 > 7);
              v176 = &v135[v173];
              if (!v174)
                goto LABEL_227;
              v177 = v12;
              v172 += v173;
            }
            v178 = &v176[v174];
            while (*v176 == *v172)
            {
              ++v172;
              ++v176;
              if (!--v174)
              {
                v176 = v178;
                break;
              }
            }
            v12 = v177;
            v161 = v262;
LABEL_227:
            v115 = v176 - v135;
LABEL_229:
            if (v115 && v115 + *(unsigned int *)(v166 + 12) > v171)
            {
              v114 = v232
                   + v247
                   + *(unsigned __int16 *)(*(_QWORD *)(v166 + 24) + 2 * v164)
                   + ((((*(_QWORD *)(v166 + 16) >> (6 * (v171 - v115))) & 0x3FLL)
                     + 4 * (v171 - v115)) << *(_BYTE *)(*(_QWORD *)v166 + v171));
              if (v114 <= v252 && (v180 = __clz(v114) ^ 0x1F, 135 * v115 - 30 * v180 + 1920 >= v264))
              {
                v162 = v171 - v115;
                *(_QWORD *)(v158 + 48) = ++v159;
                v264 = 135 * v115 - 30 * v180 + 1920;
              }
              else
              {
                v115 = v169;
                v114 = v168;
              }
              v166 = v260;
            }
            else
            {
LABEL_233:
              v115 = v169;
              v114 = v168;
            }
            v167 = 0;
            ++v164;
            v168 = v114;
            v169 = v115;
          }
          while ((v170 & 1) != 0);
        }
        else
        {
          v264 = 2020;
        }
      }
      else
      {
        v162 = 0;
        v25 = v134;
        v161 = v262;
      }
      if (v264 < v258 + 175)
        break;
      ++v254;
      if (v253 > 2)
        goto LABEL_252;
      v163 = v12 + 9;
      v101 = v253 + 1;
      v99 = v114;
      v258 = v264;
      v240 = v162;
      v82 = v115;
      v31 = v161;
      v12 = v108;
      v24 = v255;
      a3 = v256;
      a8 = v251;
      if (v163 >= v246)
        goto LABEL_253;
    }
    v187 = v12 + v243;
    if (v12 + v243 >= v242)
      v187 = v242;
    v247 = v187;
    v114 = v249;
    v162 = v240;
    v115 = v235;
    v108 = v12;
LABEL_252:
    v24 = v255;
    a3 = v256;
    a8 = v251;
LABEL_253:
    v23 = v244;
    result = v245;
    if (v114 > v247 + v229)
    {
LABEL_254:
      v188 = v114 + 15;
      goto LABEL_255;
    }
    v193 = *a8;
    if (v114 == v193)
    {
      v188 = 0;
      goto LABEL_262;
    }
    v208 = a8[1];
    if (v114 == v208)
    {
      v188 = 1;
    }
    else
    {
      v209 = v114 + 3 - v193;
      if (v209 > 6)
      {
        v212 = v114 + 3 - v208;
        if (v212 > 6)
        {
          if (v114 == a8[2])
          {
            v188 = 2;
          }
          else
          {
            if (v114 != a8[3])
              goto LABEL_254;
            v188 = 3;
          }
          goto LABEL_255;
        }
        v210 = 4 * v212;
        v211 = 266017486;
      }
      else
      {
        v210 = 4 * v209;
        v211 = 158663784;
      }
      v188 = (v211 >> v210) & 0xF;
    }
LABEL_255:
    if (v114 <= v247 + v229)
    {
      if (v188)
      {
        a8[3] = a8[2];
        v189 = *(int32x2_t *)a8;
        *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
        *a8 = v114;
        v190 = *(_DWORD *)(a7 + 112);
        if (v190 >= 5)
        {
          v191 = vdupq_n_s32(v114);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v191, (int32x4_t)xmmword_19D02CCA0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v191.i8, (int32x2_t)0x3FFFFFFFDLL);
          if (v190 >= 0xB)
          {
            v192 = vdupq_lane_s32(v189, 0);
            *(int32x4_t *)(a8 + 10) = vaddq_s32(v192, (int32x4_t)xmmword_19D02CCA0);
            *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v192.i8, (int32x2_t)0x3FFFFFFFDLL);
          }
        }
      }
    }
LABEL_262:
    *(_DWORD *)v231 = v254;
    *(_DWORD *)(v231 + 4) = v115 | (v162 << 25);
    v194 = *(unsigned int *)(v25 + 60);
    v195 = v194 + 16;
    if (v194 + 16 <= v188)
    {
      v197 = *(unsigned int *)(v25 + 56);
      v198 = v188 - v194 + (4 << v197) - 16;
      v199 = (__clz(v198) ^ 0x1F) - 1;
      v200 = ((v198 >> v199) & 1 | 2) << v199;
      v188 = ((v198 & ~(-1 << v197))
            + v195
            + ((((v198 >> v199) & 1 | (2 * (v199 - v197))) + 65534) << v197)) | ((v199 - v197) << 10);
      v196 = (v198 - v200) >> v197;
    }
    else
    {
      LODWORD(v196) = 0;
    }
    *(_WORD *)(v231 + 14) = v188;
    *(_DWORD *)(v231 + 8) = v196;
    if (v254 > 5)
    {
      if (v254 > 0x81)
      {
        if (v254 > 0x841)
        {
          if (v254 >> 1 >= 0xC21)
          {
            if (v254 < 0x5842)
              LOWORD(v201) = 22;
            else
              LOWORD(v201) = 23;
          }
          else
          {
            LOWORD(v201) = 21;
          }
        }
        else
        {
          v201 = (__clz(v254 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v202 = (__clz(v254 - 2) ^ 0x1F) - 1;
        v201 = ((v254 - 2) >> v202) + 2 * v202 + 2;
      }
    }
    else
    {
      LOWORD(v201) = v254;
    }
    v213 = v162 + (int)v115;
    if (v213 > 9)
    {
      if (v213 > 0x85)
      {
        if (v213 > 0x845)
          LOWORD(v214) = 23;
        else
          v214 = (__clz(v213 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v215 = v213 - 6;
        v216 = (__clz(v215) ^ 0x1F) - 1;
        v214 = (v215 >> v216) + 2 * v216 + 4;
      }
    }
    else
    {
      LOWORD(v214) = v162 + v115 - 2;
    }
    v217 = v214 & 7 | (8 * (v201 & 7));
    if ((v188 & 0x3FF) != 0 || (unsigned __int16)v201 > 7u || (unsigned __int16)v214 > 0xFu)
    {
      v219 = 3 * ((unsigned __int16)v201 >> 3) + ((unsigned __int16)(v214 & 0xFFF8) >> 3);
      v218 = ((((0x520D40u >> (2 * v219)) & 0xC0) + (v219 << 6)) | v217) + 64;
    }
    else
    {
      LOWORD(v218) = v217 | 0x40;
      if ((v214 & 0xFFF8) == 0)
        LOWORD(v218) = v214 & 7 | (8 * (v201 & 7));
    }
    *(_WORD *)(v231 + 12) = v218;
    v220 = v228;
    *a12 += v254;
    v221 = v108 + 2;
    v181 = v108 + v115;
    if (v108 + v115 < v228)
      v220 = v108 + v115;
    if (v114 < v115 >> 2)
    {
      v222 = v181 - 4 * v114;
      if (v221 > v222)
        v222 = v108 + 2;
      if (v220 >= v222)
        v221 = v222;
      else
        v221 = v220;
    }
    v22 = v230 + 2 * v115 + v108;
    v231 += 16;
    if (v221 < v220)
    {
      v223 = *(_DWORD *)(a7 + 104);
      v224 = *(_DWORD *)(a7 + 108);
      do
      {
        v225 = (*(_QWORD *)(a3 + (v221 & a4)) * v245) >> 49;
        v226 = *(unsigned __int16 *)(v255 + 2 * v225);
        *(_WORD *)(v255 + 2 * v225) = v226 + 1;
        *(_DWORD *)(v244 + 4 * ((v225 << v224) + (v223 & v226))) = v221++;
      }
      while (v220 != v221);
    }
    v13 = 0;
LABEL_315:
    v12 = v181;
  }
  while (v181 + 8 < v246);
LABEL_322:
  *a9 = v13 + v246 - v181;
  *a11 += (v231 - a10) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH40(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t i;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unint64_t j;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  __int16 v67;
  __int16 *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unint64_t v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned __int16 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  unsigned __int16 *v139;
  __int16 v140;
  __int16 *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  BOOL v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int16 v165;
  unsigned int v166;
  unint64_t v167;
  _WORD *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unint64_t v186;
  _WORD *v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v240;
  unint64_t v241;

  v12 = a2;
  v13 = a10;
  v14 = *a9;
  v15 = a2 + result;
  v16 = a2 + result - 3;
  v209 = v16;
  if (result <= 3)
    v16 = a2;
  v213 = v16;
  if (*(int *)(a6 + 4) >= 9)
    v17 = 512;
  else
    v17 = 64;
  if (a2 + 4 < v15)
  {
    v212 = v17;
    v223 = (1 << *(_DWORD *)(a6 + 8)) - 16;
    v18 = v17 + a2;
    v215 = a10;
    v216 = a5 + 256;
    v211 = *(_QWORD *)(a6 + 96);
    v214 = v211 + 1;
    v222 = *(_QWORD *)(a6 + 16);
    v210 = 4 * v17;
    v208 = v15 - 4;
    v238 = a3;
    v217 = a5;
    v218 = a6;
    v220 = a2 + result;
    while (1)
    {
      if (v12 >= v223)
        v19 = v223;
      else
        v19 = v12;
      v20 = v12 + v222;
      if (v12 + v222 >= v223)
        v20 = v223;
      v231 = v20;
      v233 = v18;
      if (*(_DWORD *)(a6 + 624))
        break;
      v23 = 0;
      v225 = 0;
LABEL_21:
      v24 = 0;
      v25 = 0;
      v226 = v23;
      v227 = 0;
      v26 = 0;
      v27 = v15 - v12;
      v28 = *(_QWORD *)(a6 + 8 * v23 + 696);
      v236 = *(_QWORD *)(a6 + 72);
      v29 = *(_QWORD *)(a7 + 104);
      v240 = *(_QWORD *)(a7 + 96);
      v30 = v240 + 196608;
      v31 = v12 & a4;
      v32 = (unsigned __int8 *)(a3 + (v12 & a4));
      v33 = (506832829 * *(_DWORD *)v32) >> 17;
      v34 = 2020;
      v235 = 2020;
      v35 = v12;
      do
      {
        v36 = a8[v24];
        v37 = v12 - v36;
        if ((!v24 || *(unsigned __int8 *)(v30 + (unsigned __int16)(v12 - v36)) == v33)
          && v19 >= v36
          && v37 < v12)
        {
          v39 = (unsigned __int8 *)(a3 + (v37 & a4));
          if (v27 < 8)
          {
            v44 = v39;
            v43 = v32;
            i = v27;
            if (v27)
            {
LABEL_35:
              v45 = &v44[i];
              while (*v44 == *v43)
              {
                ++v43;
                ++v44;
                if (!--i)
                {
                  v44 = v45;
                  break;
                }
              }
              v12 = v35;
            }
          }
          else
          {
            v40 = 0;
            for (i = v27; i > 7; i -= 8)
            {
              v42 = *(_QWORD *)&v39[v40] ^ *(_QWORD *)&v32[v40];
              if (v42)
              {
                v46 = v40 + (__clz(__rbit64(v42)) >> 3);
                goto LABEL_42;
              }
              v40 += 8;
            }
            v43 = &v32[v40];
            v44 = &v39[v40];
            if (i)
              goto LABEL_35;
          }
          v46 = v44 - v39;
LABEL_42:
          v47 = 135 * v46 + 1935;
          if (v46 >= 2 && v34 < v47)
          {
            if (v24)
              v47 -= ((0x1CA10u >> (v24 & 0xE)) & 0xE) + 39;
            if (v34 < v47)
            {
              v26 = a8[v24];
              v235 = v47;
              v227 = v46;
              v34 = v47;
              v25 = v46;
            }
          }
        }
        ++v24;
      }
      while (v24 != 4);
      v49 = v240 + 0x20000;
      result = *(_QWORD *)(a7 + 88);
      v50 = v12 - *(unsigned int *)(v240 + 4 * v33);
      if (result)
      {
        v51 = 0;
        v52 = *(unsigned __int16 *)(v49 + 2 * v33);
        v53 = v12 - *(unsigned int *)(v240 + 4 * v33);
        do
        {
          v51 += v53;
          if (v51 > v19)
            break;
          if (v25 + v31 <= a4)
          {
            v54 = (v12 - v51) & a4;
            if (v54 + v25 <= a4 && *(unsigned __int8 *)(a3 + v25 + v31) == *(unsigned __int8 *)(a3 + v54 + v25))
            {
              v55 = (unsigned __int8 *)(a3 + v54);
              if (v27 < 8)
              {
                v60 = v55;
                v59 = v32;
                j = v27;
                if (v27)
                {
LABEL_66:
                  v61 = v14;
                  v62 = &v60[j];
                  while (*v60 == *v59)
                  {
                    ++v59;
                    ++v60;
                    if (!--j)
                    {
                      v60 = v62;
                      break;
                    }
                  }
                  a6 = v218;
                  a3 = v238;
                  v14 = v61;
                }
              }
              else
              {
                v56 = 0;
                for (j = v27; j > 7; j -= 8)
                {
                  v58 = *(_QWORD *)&v55[v56] ^ *(_QWORD *)&v32[v56];
                  if (v58)
                  {
                    v63 = v56 + (__clz(__rbit64(v58)) >> 3);
                    goto LABEL_73;
                  }
                  v56 += 8;
                }
                v59 = &v32[v56];
                v60 = &v55[v56];
                if (j)
                  goto LABEL_66;
              }
              v63 = v60 - v55;
LABEL_73:
              v12 = v35;
              if (v63 >= 4)
              {
                v64 = 135 * v63 - 30 * (__clz(v51) ^ 0x1F) + 1920;
                if (v34 < v64)
                {
                  v26 = v51;
                  v235 = v64;
                  v227 = v63;
                  v34 = v64;
                  v25 = v63;
                }
              }
            }
          }
          v65 = (unsigned __int16 *)(v29 + 4 * v52);
          v52 = v65[1];
          v53 = *v65;
          --result;
        }
        while (result);
      }
      v66 = *(unsigned __int16 *)(a7 + 80);
      *(_WORD *)(a7 + 80) = v66 + 1;
      *(_BYTE *)(v30 + (unsigned __int16)v12) = v33;
      if (v50 >= 0xFFFF)
        v67 = -1;
      else
        v67 = v50;
      v68 = (__int16 *)(v29 + 4 * v66);
      *v68 = v67;
      v68[1] = *(_WORD *)(v49 + 2 * v33);
      *(_DWORD *)(v240 + 4 * v33) = v12;
      *(_WORD *)(v49 + 2 * v33) = v66;
      if (v235 == 2020)
      {
        v69 = *(_QWORD *)(a7 + 112);
        v71 = *(_QWORD *)(v69 + 40);
        v70 = *(_QWORD *)(v69 + 48);
        result = v227;
        if (v70 < v71 >> 7)
          goto LABEL_217;
        v221 = 0;
        v72 = ((506832829 * *(_DWORD *)v32) >> 17) & 0x7FFE;
        v73 = *(_QWORD *)(v28 + 32);
        v74 = v214 + v231;
        v75 = 1;
        v235 = 2020;
        v76 = v26;
        do
        {
          v77 = v75;
          *(_QWORD *)(v69 + 40) = ++v71;
          v78 = *(unsigned __int8 *)(v73 + v72);
          if (*(_BYTE *)(v73 + v72) && v27 >= v78)
          {
            v81 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v28 + 168)
                                    + *(unsigned int *)(*(_QWORD *)v28 + 4 * *(unsigned __int8 *)(v73 + v72) + 32)
                                    + *(unsigned __int16 *)(*(_QWORD *)(v28 + 24) + 2 * v72)
                                    * (unint64_t)*(unsigned __int8 *)(v73 + v72));
            if (v78 < 8)
            {
              v83 = *(unsigned __int8 *)(v73 + v72);
              v85 = v32;
            }
            else
            {
              v82 = 0;
              v83 = *(unsigned __int8 *)(v73 + v72);
              do
              {
                v84 = *(_QWORD *)&v32[v82] ^ *(_QWORD *)&v81[v82];
                if (v84)
                {
                  v87 = v82 + (__clz(__rbit64(v84)) >> 3);
                  goto LABEL_99;
                }
                v83 -= 8;
                v82 += 8;
              }
              while (v83 > 7);
              v85 = &v32[v82];
              if (!v83)
                goto LABEL_97;
              v81 += v82;
            }
            v86 = &v85[v83];
            while (*v85 == *v81)
            {
              ++v81;
              ++v85;
              if (!--v83)
              {
                v85 = v86;
                break;
              }
            }
LABEL_97:
            v87 = v85 - v32;
LABEL_99:
            if (v87)
              v88 = v87 + *(unsigned int *)(v28 + 12) > v78;
            else
              v88 = 0;
            if (v88
              && (v80 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 24) + 2 * v72),
                  v89 = v74
                      + v80
                      + ((((*(_QWORD *)(v28 + 16) >> (6 * (v78 - v87))) & 0x3FLL)
                        + 4 * (v78 - v87)) << *(_BYTE *)(*(_QWORD *)v28 + v78)),
                  v89 <= v236)
              && (v26 = v74
                      + v80
                      + ((((*(_QWORD *)(v28 + 16) >> (6 * (v78 - v87))) & 0x3FLL)
                        + 4 * (v78 - v87)) << *(_BYTE *)(*(_QWORD *)v28 + v78)),
                  v90 = 135 * v87 - 30 * (__clz(v89) ^ 0x1F) + 1920,
                  v90 >= v235))
            {
              v79 = v87;
              v221 = v78 - v87;
              *(_QWORD *)(v69 + 48) = ++v70;
              v235 = v90;
            }
            else
            {
              v26 = v76;
              v79 = result;
            }
          }
          else
          {
            v26 = v76;
            v79 = result;
          }
          v75 = 0;
          ++v72;
          result = v79;
          v76 = v26;
        }
        while ((v77 & 1) != 0);
      }
      else
      {
        v221 = 0;
        v79 = v227;
      }
      v219 = v26;
      if (v235 >= 0x7E5)
      {
        v91 = 0;
        v92 = *(_WORD *)(a7 + 80);
        while (1)
        {
          v93 = v27 - 1;
          v94 = v79 - 1;
          if (v79 - 1 >= v27 - 1)
            v94 = v27 - 1;
          if (*(int *)(a6 + 4) >= 5)
            v95 = 0;
          else
            v95 = v94;
          v96 = v12 + 1;
          if (v12 + 1 < v223)
            v97 = v12 + 1;
          else
            v97 = v223;
          v98 = v96 + v222;
          if (v96 + v222 >= v223)
            v98 = v223;
          v224 = v98;
          v230 = v12;
          v232 = v14;
          v228 = v79;
          v229 = v91;
          if (*(_DWORD *)(a6 + 624))
          {
            v99 = *(unsigned __int8 *)(a6
                                     + (*(_BYTE *)(v216 + v225) | *(_BYTE *)(v217
                                                                                            + *(unsigned __int8 *)(a3 + (v12 & a4))))
                                     + 629);
            v225 = *(unsigned __int8 *)(a3 + (v12 & a4));
          }
          else
          {
            v99 = v226;
          }
          v100 = 0;
          v101 = 0;
          v102 = 0;
          v226 = v99;
          v103 = *(_QWORD *)(a6 + 8 * v99 + 696);
          v234 = *(_QWORD *)(a6 + 72);
          v104 = *(_QWORD *)(a7 + 104);
          v237 = *(_QWORD *)(a7 + 96);
          v105 = v237 + 196608;
          v106 = v96 & a4;
          v107 = (unsigned __int8 *)(a3 + (v96 & a4));
          v108 = (506832829 * *(_DWORD *)v107) >> 17;
          v109 = 2020;
          v241 = 2020;
          do
          {
            v110 = a8[v100];
            v111 = v96 - v110;
            if ((!v100 || *(unsigned __int8 *)(v105 + (unsigned __int16)(v96 - v110)) == v108)
              && v97 >= v110
              && v111 < v96)
            {
              v113 = a3 + (v111 & a4);
              if (v93 < 8)
              {
                v116 = (_QWORD *)(a3 + (v111 & a4));
                v115 = (_QWORD *)(a3 + (v96 & a4));
                v118 = v27 - 1;
                if (v27 != 1)
                {
LABEL_140:
                  v119 = (_QWORD *)((char *)v116 + v118);
                  while (*(unsigned __int8 *)v116 == *(unsigned __int8 *)v115)
                  {
                    v115 = (_QWORD *)((char *)v115 + 1);
                    v116 = (_QWORD *)((char *)v116 + 1);
                    if (!--v118)
                    {
                      v116 = v119;
                      break;
                    }
                  }
                }
              }
              else
              {
                v114 = 0;
                v115 = (_QWORD *)(a3 + (v96 & a4));
                v116 = (_QWORD *)(a3 + (v111 & a4));
                do
                {
                  v117 = *v116 ^ *v115;
                  if (v117)
                  {
                    v120 = (__clz(__rbit64(v117)) >> 3) - v114;
                    goto LABEL_146;
                  }
                  ++v116;
                  ++v115;
                  v114 -= 8;
                  v118 = v27 + v114 - 1;
                }
                while (v118 > 7);
                if (v27 + v114 != 1)
                  goto LABEL_140;
              }
              v120 = (unint64_t)v116 - v113;
LABEL_146:
              v121 = 135 * v120 + 1935;
              if (v120 >= 2 && v109 < v121)
              {
                if (v100)
                  v121 -= ((0x1CA10u >> (v100 & 0xE)) & 0xE) + 39;
                if (v109 < v121)
                {
                  v102 = v120;
                  v101 = a8[v100];
                  v241 = v121;
                  v109 = v121;
                  v95 = v120;
                }
              }
            }
            ++v100;
          }
          while (v100 != 4);
          v123 = v237 + 0x20000;
          result = *(_QWORD *)(a7 + 88);
          v124 = *(unsigned int *)(v237 + 4 * v108);
          v125 = v96 - v124;
          if (result)
          {
            v126 = 0;
            v127 = *(unsigned __int16 *)(v123 + 2 * v108);
            v128 = v96 - v124;
            do
            {
              v126 += v128;
              if (v126 > v97)
                break;
              if (v95 + v106 <= a4)
              {
                v129 = (v96 - v126) & a4;
                if (v129 + v95 <= a4
                  && *(unsigned __int8 *)(v238 + v95 + v106) == *(unsigned __int8 *)(v238 + v129 + v95))
                {
                  v130 = (_QWORD *)(v238 + v129);
                  if (v93 < 8)
                  {
                    v133 = (_QWORD *)(v238 + v129);
                    v132 = (_QWORD *)(a3 + (v96 & a4));
                    v135 = v27 - 1;
                    if (v27 != 1)
                    {
LABEL_170:
                      v136 = (_QWORD *)((char *)v133 + v135);
                      while (*(unsigned __int8 *)v133 == *(unsigned __int8 *)v132)
                      {
                        v132 = (_QWORD *)((char *)v132 + 1);
                        v133 = (_QWORD *)((char *)v133 + 1);
                        if (!--v135)
                        {
                          v133 = v136;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v131 = 0;
                    v132 = (_QWORD *)(a3 + (v96 & a4));
                    v133 = v130;
                    do
                    {
                      v134 = *v133 ^ *v132;
                      if (v134)
                      {
                        v137 = (__clz(__rbit64(v134)) >> 3) - v131;
                        goto LABEL_176;
                      }
                      ++v133;
                      ++v132;
                      v131 -= 8;
                      v135 = v27 + v131 - 1;
                    }
                    while (v135 > 7);
                    if (v27 + v131 != 1)
                      goto LABEL_170;
                  }
                  v137 = (char *)v133 - (char *)v130;
LABEL_176:
                  if (v137 >= 4)
                  {
                    v138 = 135 * v137 - 30 * (__clz(v126) ^ 0x1F) + 1920;
                    if (v109 < v138)
                    {
                      v102 = v137;
                      v101 = v126;
                      v241 = v138;
                      v109 = v138;
                      v95 = v137;
                    }
                  }
                }
              }
              v139 = (unsigned __int16 *)(v104 + 4 * v127);
              v127 = v139[1];
              v128 = *v139;
              --result;
            }
            while (result);
          }
          *(_WORD *)(a7 + 80) = v92 + 1;
          *(_BYTE *)(v105 + (unsigned __int16)v96) = v108;
          v140 = -1;
          if (v125 < 0xFFFF)
            v140 = v125;
          v141 = (__int16 *)(v104 + 4 * v92);
          *v141 = v140;
          v141[1] = *(_WORD *)(v123 + 2 * v108);
          *(_DWORD *)(v237 + 4 * v108) = v96;
          *(_WORD *)(v123 + 2 * v108) = v92;
          if (v241 == 2020)
          {
            v142 = *(_QWORD *)(a7 + 112);
            v144 = *(_QWORD *)(v142 + 40);
            v143 = *(_QWORD *)(v142 + 48);
            a6 = v218;
            a3 = v238;
            v145 = 0;
            if (v143 >= v144 >> 7)
            {
              v146 = ((506832829 * *(_DWORD *)v107) >> 17) & 0x7FFE;
              v147 = *(_QWORD *)(v103 + 32);
              v148 = 1;
              v241 = 2020;
              v149 = v101;
              v150 = v102;
              do
              {
                result = v148;
                *(_QWORD *)(v142 + 40) = ++v144;
                v151 = *(unsigned __int8 *)(v147 + v146);
                if (!*(_BYTE *)(v147 + v146) || v93 < v151)
                  goto LABEL_213;
                v152 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v103 + 168)
                                         + *(unsigned int *)(*(_QWORD *)v103
                                                           + 4 * *(unsigned __int8 *)(v147 + v146)
                                                           + 32)
                                         + *(unsigned __int16 *)(*(_QWORD *)(v103 + 24) + 2 * v146)
                                         * (unint64_t)*(unsigned __int8 *)(v147 + v146));
                if (v151 < 8)
                {
                  v154 = *(unsigned __int8 *)(v147 + v146);
                  v156 = v107;
                }
                else
                {
                  v153 = 0;
                  v154 = *(unsigned __int8 *)(v147 + v146);
                  do
                  {
                    v155 = *(_QWORD *)&v107[v153] ^ *(_QWORD *)&v152[v153];
                    if (v155)
                    {
                      v102 = v153 + (__clz(__rbit64(v155)) >> 3);
                      goto LABEL_206;
                    }
                    v154 -= 8;
                    v153 += 8;
                  }
                  while (v154 > 7);
                  v156 = &v107[v153];
                  if (!v154)
                    goto LABEL_204;
                  v152 += v153;
                }
                v157 = &v156[v154];
                while (*v156 == *v152)
                {
                  ++v152;
                  ++v156;
                  if (!--v154)
                  {
                    v156 = v157;
                    break;
                  }
                }
LABEL_204:
                v102 = v156 - v107;
LABEL_206:
                v158 = v102 && v102 + *(unsigned int *)(v103 + 12) > v151;
                if (v158
                  && (v101 = v214
                           + v224
                           + *(unsigned __int16 *)(*(_QWORD *)(v103 + 24) + 2 * v146)
                           + ((((*(_QWORD *)(v103 + 16) >> (6 * (v151 - v102))) & 0x3FLL)
                             + 4 * (v151 - v102)) << *(_BYTE *)(*(_QWORD *)v103 + v151)),
                      v101 <= v234)
                  && (v159 = 135 * v102 - 30 * (__clz(v101) ^ 0x1F) + 1920, v159 >= v241))
                {
                  v145 = v151 - v102;
                  *(_QWORD *)(v142 + 48) = ++v143;
                  v241 = v159;
                }
                else
                {
LABEL_213:
                  v102 = v150;
                  v101 = v149;
                }
                v148 = 0;
                ++v146;
                v149 = v101;
                v150 = v102;
              }
              while ((result & 1) != 0);
            }
            else
            {
              v241 = 2020;
            }
          }
          else
          {
            v145 = 0;
            a6 = v218;
            a3 = v238;
          }
          if (v241 < v235 + 175)
            break;
          v14 = v232 + 1;
          if (v229 <= 2)
          {
            v91 = v229 + 1;
            ++v92;
            v219 = v101;
            v235 = v241;
            v221 = v145;
            v79 = v102;
            --v27;
            v12 = v96;
            if (v230 + 5 < v220)
              continue;
          }
          goto LABEL_231;
        }
        v96 = v230;
        v14 = v232;
        v169 = v230 + v222;
        if (v230 + v222 >= v223)
          v169 = v223;
        v224 = v169;
        v101 = v219;
        v145 = v221;
        v102 = v228;
LABEL_231:
        if (v101 > v224 + v211)
        {
LABEL_232:
          v170 = v101 + 15;
          goto LABEL_233;
        }
        v171 = *a8;
        if (v101 == v171)
        {
          v170 = 0;
LABEL_238:
          *(_DWORD *)v215 = v14;
          *(_DWORD *)(v215 + 4) = v102 | (v145 << 25);
          v172 = *(unsigned int *)(a6 + 60);
          v173 = v172 + 16;
          if (v172 + 16 <= v170)
          {
            v175 = *(unsigned int *)(a6 + 56);
            v176 = v170 - v172 + (4 << v175) - 16;
            v177 = (__clz(v176) ^ 0x1F) - 1;
            v178 = ((v176 >> v177) & 1 | 2) << v177;
            v170 = ((v176 & ~(-1 << v175))
                  + v173
                  + ((((v176 >> v177) & 1 | (2 * (v177 - v175))) + 65534) << v175)) | ((v177 - v175) << 10);
            v174 = (v176 - v178) >> v175;
          }
          else
          {
            LODWORD(v174) = 0;
          }
          *(_WORD *)(v215 + 14) = v170;
          *(_DWORD *)(v215 + 8) = v174;
          if (v14 > 5)
          {
            if (v14 > 0x81)
            {
              if (v14 > 0x841)
              {
                if (v14 >> 1 >= 0xC21)
                {
                  if (v14 < 0x5842)
                    LOWORD(v179) = 22;
                  else
                    LOWORD(v179) = 23;
                }
                else
                {
                  LOWORD(v179) = 21;
                }
              }
              else
              {
                v179 = (__clz(v14 - 66) ^ 0x1F) + 10;
              }
            }
            else
            {
              v180 = (__clz(v14 - 2) ^ 0x1F) - 1;
              v179 = ((v14 - 2) >> v180) + 2 * v180 + 2;
            }
          }
          else
          {
            LOWORD(v179) = v14;
          }
          v193 = v145 + (int)v102;
          if (v193 > 9)
          {
            if (v193 > 0x85)
            {
              if (v193 > 0x845)
                LOWORD(v194) = 23;
              else
                v194 = (__clz(v193 - 70) ^ 0x1F) + 12;
            }
            else
            {
              v195 = v193 - 6;
              v196 = (__clz(v195) ^ 0x1F) - 1;
              v194 = (v195 >> v196) + 2 * v196 + 4;
            }
          }
          else
          {
            LOWORD(v194) = v145 + v102 - 2;
          }
          v197 = v194 & 7 | (8 * (v179 & 7));
          if ((v170 & 0x3FF) != 0 || (unsigned __int16)v179 > 7u || (unsigned __int16)v194 > 0xFu)
          {
            v199 = 3 * ((unsigned __int16)v179 >> 3) + ((unsigned __int16)(v194 & 0xFFF8) >> 3);
            v198 = ((((0x520D40u >> (2 * v199)) & 0xC0) + (v199 << 6)) | v197) + 64;
          }
          else
          {
            LOWORD(v198) = v197 | 0x40;
            if ((v194 & 0xFFF8) == 0)
              LOWORD(v198) = v194 & 7 | (8 * (v179 & 7));
          }
          *(_WORD *)(v215 + 12) = v198;
          *a12 += v14;
          v200 = v96 + 2;
          v160 = v96 + v102;
          if (v96 + v102 >= v213)
            v201 = v213;
          else
            v201 = v96 + v102;
          if (v101 < v102 >> 2)
          {
            v202 = v160 - 4 * v101;
            if (v200 > v202)
              v202 = v96 + 2;
            if (v201 >= v202)
              v200 = v202;
            else
              v200 = v201;
          }
          v18 = v212 + 2 * v102 + v96;
          v215 += 16;
          if (v200 >= v201)
          {
            v14 = 0;
            v13 = a10;
            a5 = v217;
            v15 = v220;
            goto LABEL_299;
          }
          v203 = *(_QWORD *)(a7 + 96);
          v204 = *(_QWORD *)(a7 + 104);
          v205 = v203 + 0x20000;
          v165 = *(_WORD *)(a7 + 80);
          do
          {
            v206 = (506832829 * *(_DWORD *)(a3 + (v200 & a4))) >> 17;
            v207 = v200 - *(unsigned int *)(v203 + 4 * v206);
            *(_BYTE *)(v203 + 196608 + (unsigned __int16)v200) = v206;
            if (v207 >= 0xFFFF)
              LOWORD(v207) = -1;
            result = v204 + 4 * v165;
            *(_WORD *)result = v207;
            *(_WORD *)(result + 2) = *(_WORD *)(v205 + 2 * v206);
            *(_WORD *)(v205 + 2 * v206) = v165++;
            *(_DWORD *)(v203 + 4 * v206) = v200++;
          }
          while (v201 != v200);
          v14 = 0;
          goto LABEL_297;
        }
        v188 = a8[1];
        if (v101 == v188)
        {
          v170 = 1;
        }
        else
        {
          v189 = v101 + 3 - v171;
          if (v189 > 6)
          {
            v192 = v101 + 3 - v188;
            if (v192 > 6)
            {
              if (v101 == a8[2])
              {
                v170 = 2;
              }
              else
              {
                if (v101 != a8[3])
                  goto LABEL_232;
                v170 = 3;
              }
              goto LABEL_233;
            }
            v190 = 4 * v192;
            v191 = 266017486;
          }
          else
          {
            v190 = 4 * v189;
            v191 = 158663784;
          }
          v170 = (v191 >> v190) & 0xF;
        }
LABEL_233:
        if (v101 <= v224 + v211 && v170)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v101;
        }
        goto LABEL_238;
      }
LABEL_217:
      ++v14;
      v160 = v12 + 1;
      v18 = v233;
      if (v12 + 1 <= v233)
      {
        v13 = a10;
        a5 = v217;
        v15 = v220;
      }
      else
      {
        v15 = v220;
        if (v160 <= v233 + v210)
        {
          v181 = v209;
          if (v12 + 9 < v209)
            v181 = v12 + 9;
          if (v160 < v181)
          {
            v182 = *(_QWORD *)(a7 + 96);
            v183 = *(_QWORD *)(a7 + 104);
            v184 = v182 + 0x20000;
            v165 = *(_WORD *)(a7 + 80);
            result = 506832829;
            do
            {
              v185 = (506832829 * *(_DWORD *)(a3 + (v160 & a4))) >> 17;
              v186 = v160 - *(unsigned int *)(v182 + 4 * v185);
              *(_BYTE *)(v182 + 196608 + (unsigned __int16)v160) = v185;
              if (v186 >= 0xFFFF)
                LOWORD(v186) = -1;
              v187 = (_WORD *)(v183 + 4 * v165);
              *v187 = v186;
              v187[1] = *(_WORD *)(v184 + 2 * v185);
              *(_WORD *)(v184 + 2 * v185) = v165++;
              *(_DWORD *)(v182 + 4 * v185) = v160;
              v14 += 2;
              v160 += 2;
            }
            while (v160 < v181);
            goto LABEL_297;
          }
        }
        else
        {
          v161 = v208;
          if (v12 + 17 < v208)
            v161 = v12 + 17;
          if (v160 < v161)
          {
            v162 = *(_QWORD *)(a7 + 96);
            v163 = *(_QWORD *)(a7 + 104);
            v164 = v162 + 0x20000;
            v165 = *(_WORD *)(a7 + 80);
            result = 506832829;
            do
            {
              v166 = (506832829 * *(_DWORD *)(a3 + (v160 & a4))) >> 17;
              v167 = v160 - *(unsigned int *)(v162 + 4 * v166);
              *(_BYTE *)(v162 + 196608 + (unsigned __int16)v160) = v166;
              if (v167 >= 0xFFFF)
                LOWORD(v167) = -1;
              v168 = (_WORD *)(v163 + 4 * v165);
              *v168 = v167;
              v168[1] = *(_WORD *)(v164 + 2 * v166);
              *(_WORD *)(v164 + 2 * v166) = v165++;
              *(_DWORD *)(v162 + 4 * v166) = v160;
              v14 += 4;
              v160 += 4;
            }
            while (v160 < v161);
LABEL_297:
            v13 = a10;
            a5 = v217;
            v15 = v220;
            *(_WORD *)(a7 + 80) = v165;
            goto LABEL_299;
          }
        }
        v13 = a10;
        a5 = v217;
      }
LABEL_299:
      v12 = v160;
      if (v160 + 4 >= v15)
        goto LABEL_306;
    }
    if (v12)
    {
      v21 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
      if (v12 != 1)
      {
        v22 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_20:
        v225 = v21;
        v23 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v216 + v22) | *(_BYTE *)(a5 + v21)) + 629);
        goto LABEL_21;
      }
    }
    else
    {
      v21 = 0;
    }
    v22 = 0;
    goto LABEL_20;
  }
  v215 = a10;
  v160 = a2;
LABEL_306:
  *a9 = v14 + v15 - v160;
  *a11 += (v215 - v13) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH41(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t i;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t j;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  __int16 v69;
  __int16 *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  BOOL v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unsigned __int16 *v138;
  __int16 v139;
  __int16 *v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  BOOL v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int16 v164;
  unsigned int v165;
  unint64_t v166;
  _WORD *v167;
  unint64_t v168;
  unint64_t v169;
  int32x4_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unint64_t v186;
  _WORD *v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;

  v12 = a10;
  v223 = *(_QWORD *)(a6 + 16);
  v13 = *a9;
  v14 = a2 + result;
  v15 = a2 + result - 3;
  v209 = v15;
  if (result <= 3)
    v15 = a2;
  v213 = v15;
  v16 = *(_DWORD *)(a6 + 8);
  v17 = 64;
  if (*(int *)(a6 + 4) >= 9)
    v17 = 512;
  v18 = *(_QWORD *)(a6 + 96);
  v19 = (int32x4_t)vld1q_dup_f32((const float *)a8);
  *((int32x4_t *)a8 + 1) = vaddq_s32(v19, (int32x4_t)xmmword_19D02CCA0);
  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
  if (a2 + 4 < v14)
  {
    v211 = v18;
    v222 = (1 << v16) - 16;
    v20 = v17 + a2;
    v215 = a10;
    v216 = a5 + 256;
    v214 = v18 + 1;
    v212 = v17;
    v210 = 4 * v17;
    v208 = v14 - 4;
    v240 = a7;
    v241 = a3;
    v219 = a6;
    v220 = a2 + result;
    v217 = a5;
    while (1)
    {
      if (a2 >= v222)
        v21 = v222;
      else
        v21 = a2;
      v22 = a2 + v223;
      if (a2 + v223 >= v222)
        v22 = v222;
      v230 = v22;
      v232 = v20;
      if (*(_DWORD *)(a6 + 624))
        break;
      v25 = 0;
      v225 = 0;
LABEL_20:
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v226 = v25;
      v227 = 0;
      v29 = v14 - a2;
      v242 = *(_QWORD *)(a6 + 8 * v25 + 696);
      v30 = *(_QWORD *)(a7 + 104);
      v236 = *(_QWORD *)(a6 + 72);
      v238 = *(_QWORD *)(a7 + 96);
      v31 = v238 + 196608;
      v32 = a2 & a4;
      v33 = (unsigned __int8 *)(a3 + (a2 & a4));
      result = (506832829 * *(_DWORD *)v33) >> 17;
      v34 = 2020;
      v35 = 2020;
      v36 = a2;
      do
      {
        v37 = a8[v26];
        v38 = a2 - v37;
        if ((!v26 || *(unsigned __int8 *)(v31 + (unsigned __int16)(a2 - v37)) == result)
          && v21 >= v37
          && v38 < a2)
        {
          v40 = a3 + (v38 & a4);
          if (v29 < 8)
          {
            v45 = (unsigned __int8 *)(a3 + (v38 & a4));
            v44 = v33;
            i = v29;
            if (v29)
            {
LABEL_34:
              v46 = &v45[i];
              while (*v45 == *v44)
              {
                ++v44;
                ++v45;
                if (!--i)
                {
                  v45 = v46;
                  break;
                }
              }
              a2 = v36;
            }
          }
          else
          {
            v41 = 0;
            for (i = v29; i > 7; i -= 8)
            {
              v43 = *(_QWORD *)(v40 + v41) ^ *(_QWORD *)&v33[v41];
              if (v43)
              {
                v47 = v41 + (__clz(__rbit64(v43)) >> 3);
                goto LABEL_41;
              }
              v41 += 8;
            }
            v44 = &v33[v41];
            v45 = (unsigned __int8 *)(v40 + v41);
            if (i)
              goto LABEL_34;
          }
          v47 = (unint64_t)&v45[-v40];
LABEL_41:
          v48 = 135 * v47 + 1935;
          if (v47 >= 2 && v34 < v48)
          {
            if (v26)
              v48 -= ((0x1CA10u >> (v26 & 0xE)) & 0xE) + 39;
            if (v34 < v48)
            {
              v227 = a8[v26];
              v35 = v48;
              v28 = v47;
              v34 = v48;
              v27 = v47;
            }
          }
        }
        ++v26;
      }
      while (v26 != 10);
      v50 = *(_QWORD *)(a7 + 88);
      v51 = a2 - *(unsigned int *)(v238 + 4 * result);
      v234 = v238 + 0x20000;
      if (v50)
      {
        v52 = 0;
        v53 = *(unsigned __int16 *)(v238 + 0x20000 + 2 * result);
        v54 = a2 - *(unsigned int *)(v238 + 4 * result);
        do
        {
          v52 += v54;
          if (v52 > v21)
            break;
          if (v27 + v32 <= a4)
          {
            v55 = (a2 - v52) & a4;
            if (v55 + v27 <= a4 && *(unsigned __int8 *)(a3 + v27 + v32) == *(unsigned __int8 *)(a3 + v55 + v27))
            {
              v56 = a3 + v55;
              v57 = v28;
              if (v29 < 8)
              {
                v62 = (unsigned __int8 *)(a3 + v55);
                v61 = v33;
                j = v29;
                if (v29)
                {
LABEL_65:
                  v63 = v35;
                  v64 = &v62[j];
                  while (*v62 == *v61)
                  {
                    ++v61;
                    ++v62;
                    if (!--j)
                    {
                      v62 = v64;
                      break;
                    }
                  }
                  a3 = v241;
                  a6 = v219;
                  v35 = v63;
                  a7 = v240;
                }
              }
              else
              {
                v58 = 0;
                for (j = v29; j > 7; j -= 8)
                {
                  v60 = *(_QWORD *)(v56 + v58) ^ *(_QWORD *)&v33[v58];
                  if (v60)
                  {
                    v65 = v58 + (__clz(__rbit64(v60)) >> 3);
                    goto LABEL_72;
                  }
                  v58 += 8;
                }
                v61 = &v33[v58];
                v62 = (unsigned __int8 *)(v56 + v58);
                if (j)
                  goto LABEL_65;
              }
              v65 = (unint64_t)&v62[-v56];
LABEL_72:
              a2 = v36;
              v28 = v57;
              if (v65 >= 4)
              {
                v66 = 135 * v65 - 30 * (__clz(v52) ^ 0x1F) + 1920;
                if (v34 < v66)
                {
                  v227 = v52;
                  v35 = v66;
                  v28 = v65;
                  v34 = v66;
                  v27 = v65;
                }
              }
            }
          }
          v67 = (unsigned __int16 *)(v30 + 4 * v53);
          v53 = v67[1];
          v54 = *v67;
          --v50;
        }
        while (v50);
      }
      v68 = *(unsigned __int16 *)(a7 + 80);
      *(_WORD *)(a7 + 80) = v68 + 1;
      *(_BYTE *)(v31 + (unsigned __int16)a2) = result;
      if (v51 >= 0xFFFF)
        v69 = -1;
      else
        v69 = v51;
      v70 = (__int16 *)(v30 + 4 * v68);
      *v70 = v69;
      v70[1] = *(_WORD *)(v234 + 2 * result);
      *(_DWORD *)(v238 + 4 * result) = a2;
      *(_WORD *)(v234 + 2 * result) = v68;
      if (v35 == 2020)
      {
        v71 = *(_QWORD *)(a7 + 112);
        result = *(_QWORD *)(v71 + 40);
        v72 = *(_QWORD *)(v71 + 48);
        if (v72 < result >> 7)
          goto LABEL_215;
        v221 = 0;
        v73 = ((506832829 * *(_DWORD *)v33) >> 17) & 0x7FFE;
        v74 = *(_QWORD *)(v242 + 32);
        v75 = 1;
        v76 = v28;
        v35 = 2020;
        v77 = v227;
        do
        {
          v78 = v75;
          *(_QWORD *)(v71 + 40) = ++result;
          v79 = *(unsigned __int8 *)(v74 + v73);
          if (!*(_BYTE *)(v74 + v73) || v29 < v79)
            goto LABEL_104;
          v80 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v242 + 168)
                                  + *(unsigned int *)(*(_QWORD *)v242 + 4 * *(unsigned __int8 *)(v74 + v73) + 32)
                                  + *(unsigned __int16 *)(*(_QWORD *)(v242 + 24) + 2 * v73)
                                  * (unint64_t)*(unsigned __int8 *)(v74 + v73));
          if (v79 < 8)
          {
            v82 = *(unsigned __int8 *)(v74 + v73);
            v84 = v33;
          }
          else
          {
            v81 = 0;
            v82 = *(unsigned __int8 *)(v74 + v73);
            do
            {
              v83 = *(_QWORD *)&v33[v81] ^ *(_QWORD *)&v80[v81];
              if (v83)
              {
                v28 = v81 + (__clz(__rbit64(v83)) >> 3);
                goto LABEL_97;
              }
              v82 -= 8;
              v81 += 8;
            }
            while (v82 > 7);
            v84 = &v33[v81];
            if (!v82)
              goto LABEL_95;
            v80 += v81;
          }
          v85 = &v84[v82];
          while (*v84 == *v80)
          {
            ++v80;
            ++v84;
            if (!--v82)
            {
              v84 = v85;
              break;
            }
          }
LABEL_95:
          v28 = v84 - v33;
LABEL_97:
          v86 = v28 && v28 + *(unsigned int *)(v242 + 12) > v79;
          if (v86
            && (v87 = v214
                    + v230
                    + *(unsigned __int16 *)(*(_QWORD *)(v242 + 24) + 2 * v73)
                    + ((((*(_QWORD *)(v242 + 16) >> (6 * (v79 - v28))) & 0x3FLL)
                      + 4 * (v79 - v28)) << *(_BYTE *)(*(_QWORD *)v242 + v79)),
                v87 <= v236)
            && (v88 = __clz(v87) ^ 0x1F, 135 * v28 - 30 * v88 + 1920 >= v35))
          {
            v221 = v79 - v28;
            *(_QWORD *)(v71 + 48) = ++v72;
            v35 = 135 * v28 - 30 * v88 + 1920;
          }
          else
          {
LABEL_104:
            v87 = v77;
            v28 = v76;
          }
          v75 = 0;
          ++v73;
          v76 = v28;
          v77 = v87;
        }
        while ((v78 & 1) != 0);
      }
      else
      {
        v221 = 0;
        v87 = v227;
      }
      if (v35 >= 0x7E5)
      {
        v228 = v87;
        v237 = v35;
        v89 = 0;
        v90 = *(unsigned __int16 *)(a7 + 80);
        while (1)
        {
          v91 = v29 - 1;
          v92 = v28 - 1;
          if (v28 - 1 >= v29 - 1)
            v92 = v29 - 1;
          if (*(int *)(a6 + 4) >= 5)
            v93 = 0;
          else
            v93 = v92;
          v94 = a2 + 1;
          if (a2 + 1 < v222)
            v95 = a2 + 1;
          else
            v95 = v222;
          v96 = v94 + v223;
          if (v94 + v223 >= v222)
            v96 = v222;
          v224 = v96;
          v231 = a2;
          v233 = v13;
          v218 = v28;
          v229 = v89;
          v235 = v90;
          if (*(_DWORD *)(a6 + 624))
          {
            v97 = *(unsigned __int8 *)(a6
                                     + (*(_BYTE *)(v216 + v225) | *(_BYTE *)(v217
                                                                                            + *(unsigned __int8 *)(a3 + (a2 & a4))))
                                     + 629);
            v225 = *(unsigned __int8 *)(a3 + (a2 & a4));
          }
          else
          {
            v97 = v226;
          }
          v98 = 0;
          v99 = 0;
          v100 = 0;
          v226 = v97;
          v101 = *(_QWORD *)(a6 + 8 * v97 + 696);
          v239 = *(_QWORD *)(a6 + 72);
          result = *(_QWORD *)(v240 + 104);
          v102 = *(_QWORD *)(v240 + 96);
          v103 = v102 + 196608;
          v104 = v94 & a4;
          v105 = (unsigned __int8 *)(a3 + (v94 & a4));
          v106 = (506832829 * *(_DWORD *)v105) >> 17;
          v107 = 2020;
          v243 = 2020;
          do
          {
            v108 = a8[v98];
            v109 = v94 - v108;
            if ((!v98 || *(unsigned __int8 *)(v103 + (unsigned __int16)(v94 - v108)) == v106)
              && v95 >= v108
              && v109 < v94)
            {
              v111 = a3 + (v109 & a4);
              if (v91 < 8)
              {
                v114 = (_QWORD *)(a3 + (v109 & a4));
                v113 = (_QWORD *)(a3 + (v94 & a4));
                v116 = v29 - 1;
                if (v29 != 1)
                {
LABEL_138:
                  v117 = (_QWORD *)((char *)v114 + v116);
                  while (*(unsigned __int8 *)v114 == *(unsigned __int8 *)v113)
                  {
                    v113 = (_QWORD *)((char *)v113 + 1);
                    v114 = (_QWORD *)((char *)v114 + 1);
                    if (!--v116)
                    {
                      v114 = v117;
                      break;
                    }
                  }
                }
              }
              else
              {
                v112 = 0;
                v113 = (_QWORD *)(a3 + (v94 & a4));
                v114 = (_QWORD *)(a3 + (v109 & a4));
                do
                {
                  v115 = *v114 ^ *v113;
                  if (v115)
                  {
                    v118 = (__clz(__rbit64(v115)) >> 3) - v112;
                    goto LABEL_144;
                  }
                  ++v114;
                  ++v113;
                  v112 -= 8;
                  v116 = v29 + v112 - 1;
                }
                while (v116 > 7);
                if (v29 + v112 != 1)
                  goto LABEL_138;
              }
              v118 = (unint64_t)v114 - v111;
LABEL_144:
              v119 = 135 * v118 + 1935;
              if (v118 >= 2 && v107 < v119)
              {
                if (v98)
                  v119 -= ((0x1CA10u >> (v98 & 0xE)) & 0xE) + 39;
                if (v107 < v119)
                {
                  v100 = v118;
                  v99 = a8[v98];
                  v243 = v119;
                  v107 = v119;
                  v93 = v118;
                }
              }
            }
            ++v98;
          }
          while (v98 != 10);
          v121 = v102 + 0x20000;
          v122 = *(_QWORD *)(v240 + 88);
          v123 = *(unsigned int *)(v102 + 4 * v106);
          v124 = v94 - v123;
          if (v122)
          {
            v125 = 0;
            v126 = *(unsigned __int16 *)(v121 + 2 * v106);
            v127 = v94 - v123;
            do
            {
              v125 += v127;
              if (v125 > v95)
                break;
              if (v93 + v104 <= a4)
              {
                v128 = (v94 - v125) & a4;
                if (v128 + v93 <= a4
                  && *(unsigned __int8 *)(v241 + v93 + v104) == *(unsigned __int8 *)(v241 + v128 + v93))
                {
                  v129 = (_QWORD *)(v241 + v128);
                  if (v91 < 8)
                  {
                    v132 = (_QWORD *)(v241 + v128);
                    v131 = (_QWORD *)(a3 + (v94 & a4));
                    v134 = v29 - 1;
                    if (v29 != 1)
                    {
LABEL_168:
                      v135 = (_QWORD *)((char *)v132 + v134);
                      while (*(unsigned __int8 *)v132 == *(unsigned __int8 *)v131)
                      {
                        v131 = (_QWORD *)((char *)v131 + 1);
                        v132 = (_QWORD *)((char *)v132 + 1);
                        if (!--v134)
                        {
                          v132 = v135;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v130 = 0;
                    v131 = (_QWORD *)(a3 + (v94 & a4));
                    v132 = v129;
                    do
                    {
                      v133 = *v132 ^ *v131;
                      if (v133)
                      {
                        v136 = (__clz(__rbit64(v133)) >> 3) - v130;
                        goto LABEL_174;
                      }
                      ++v132;
                      ++v131;
                      v130 -= 8;
                      v134 = v29 + v130 - 1;
                    }
                    while (v134 > 7);
                    if (v29 + v130 != 1)
                      goto LABEL_168;
                  }
                  v136 = (char *)v132 - (char *)v129;
LABEL_174:
                  if (v136 >= 4)
                  {
                    v137 = 135 * v136 - 30 * (__clz(v125) ^ 0x1F) + 1920;
                    if (v107 < v137)
                    {
                      v100 = v136;
                      v99 = v125;
                      v243 = v137;
                      v107 = v137;
                      v93 = v136;
                    }
                  }
                }
              }
              v138 = (unsigned __int16 *)(result + 4 * v126);
              v126 = v138[1];
              v127 = *v138;
              --v122;
            }
            while (v122);
          }
          *(_WORD *)(v240 + 80) = v235 + 1;
          *(_BYTE *)(v103 + (unsigned __int16)v94) = v106;
          v139 = -1;
          if (v124 < 0xFFFF)
            v139 = v124;
          v140 = (__int16 *)(result + 4 * (unsigned __int16)v235);
          *v140 = v139;
          v140[1] = *(_WORD *)(v121 + 2 * v106);
          *(_DWORD *)(v102 + 4 * v106) = v94;
          *(_WORD *)(v121 + 2 * v106) = v235;
          if (v243 == 2020)
          {
            v141 = *(_QWORD *)(v240 + 112);
            result = *(_QWORD *)(v141 + 40);
            v142 = *(_QWORD *)(v141 + 48);
            a6 = v219;
            a3 = v241;
            v143 = 0;
            if (v142 >= result >> 7)
            {
              v144 = ((506832829 * *(_DWORD *)v105) >> 17) & 0x7FFE;
              v145 = *(_QWORD *)(v101 + 32);
              v146 = 1;
              v243 = 2020;
              v147 = v99;
              v148 = v100;
              do
              {
                v149 = v146;
                *(_QWORD *)(v141 + 40) = ++result;
                v150 = *(unsigned __int8 *)(v145 + v144);
                if (!*(_BYTE *)(v145 + v144) || v91 < v150)
                  goto LABEL_211;
                v151 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v101 + 168)
                                         + *(unsigned int *)(*(_QWORD *)v101
                                                           + 4 * *(unsigned __int8 *)(v145 + v144)
                                                           + 32)
                                         + *(unsigned __int16 *)(*(_QWORD *)(v101 + 24) + 2 * v144)
                                         * (unint64_t)*(unsigned __int8 *)(v145 + v144));
                if (v150 < 8)
                {
                  v153 = *(unsigned __int8 *)(v145 + v144);
                  v155 = v105;
                }
                else
                {
                  v152 = 0;
                  v153 = *(unsigned __int8 *)(v145 + v144);
                  do
                  {
                    v154 = *(_QWORD *)&v105[v152] ^ *(_QWORD *)&v151[v152];
                    if (v154)
                    {
                      v100 = v152 + (__clz(__rbit64(v154)) >> 3);
                      goto LABEL_204;
                    }
                    v153 -= 8;
                    v152 += 8;
                  }
                  while (v153 > 7);
                  v155 = &v105[v152];
                  if (!v153)
                    goto LABEL_202;
                  v151 += v152;
                }
                v156 = &v155[v153];
                while (*v155 == *v151)
                {
                  ++v151;
                  ++v155;
                  if (!--v153)
                  {
                    v155 = v156;
                    break;
                  }
                }
LABEL_202:
                v100 = v155 - v105;
LABEL_204:
                v157 = v100 && v100 + *(unsigned int *)(v101 + 12) > v150;
                if (v157
                  && (v99 = v214
                          + v224
                          + *(unsigned __int16 *)(*(_QWORD *)(v101 + 24) + 2 * v144)
                          + ((((*(_QWORD *)(v101 + 16) >> (6 * (v150 - v100))) & 0x3FLL)
                            + 4 * (v150 - v100)) << *(_BYTE *)(*(_QWORD *)v101 + v150)),
                      v99 <= v239)
                  && (v158 = 135 * v100 - 30 * (__clz(v99) ^ 0x1F) + 1920, v158 >= v243))
                {
                  v143 = v150 - v100;
                  *(_QWORD *)(v141 + 48) = ++v142;
                  v243 = v158;
                }
                else
                {
LABEL_211:
                  v100 = v148;
                  v99 = v147;
                }
                v146 = 0;
                ++v144;
                v147 = v99;
                v148 = v100;
              }
              while ((v149 & 1) != 0);
            }
            else
            {
              v243 = 2020;
            }
          }
          else
          {
            v143 = 0;
            a6 = v219;
            a3 = v241;
          }
          if (v243 < v237 + 175)
            break;
          v13 = v233 + 1;
          if (v229 <= 2)
          {
            v89 = v229 + 1;
            v90 = v235 + 1;
            v228 = v99;
            v237 = v243;
            v221 = v143;
            v28 = v100;
            --v29;
            a2 = v94;
            if (v231 + 5 < v220)
              continue;
          }
          goto LABEL_229;
        }
        v94 = v231;
        v13 = v233;
        v168 = v231 + v223;
        if (v231 + v223 >= v222)
          v168 = v222;
        v224 = v168;
        v99 = v228;
        v143 = v221;
        v100 = v218;
LABEL_229:
        a7 = v240;
        if (v99 > v224 + v211)
        {
LABEL_230:
          v169 = v99 + 15;
          goto LABEL_231;
        }
        v171 = *a8;
        if (v99 == v171)
        {
          v169 = 0;
          v12 = a10;
LABEL_237:
          *(_DWORD *)v215 = v13;
          *(_DWORD *)(v215 + 4) = v100 | (v143 << 25);
          v172 = *(unsigned int *)(a6 + 60);
          v173 = v172 + 16;
          if (v172 + 16 <= v169)
          {
            v175 = *(unsigned int *)(a6 + 56);
            v176 = v169 - v172 + (4 << v175) - 16;
            v177 = (__clz(v176) ^ 0x1F) - 1;
            v178 = ((v176 >> v177) & 1 | 2) << v177;
            v169 = ((v176 & ~(-1 << v175))
                  + v173
                  + ((((v176 >> v177) & 1 | (2 * (v177 - v175))) + 65534) << v175)) | ((v177 - v175) << 10);
            v174 = (v176 - v178) >> v175;
          }
          else
          {
            LODWORD(v174) = 0;
          }
          *(_WORD *)(v215 + 14) = v169;
          *(_DWORD *)(v215 + 8) = v174;
          if (v13 > 5)
          {
            if (v13 > 0x81)
            {
              if (v13 > 0x841)
              {
                if (v13 >> 1 >= 0xC21)
                {
                  if (v13 < 0x5842)
                    LOWORD(v179) = 22;
                  else
                    LOWORD(v179) = 23;
                }
                else
                {
                  LOWORD(v179) = 21;
                }
              }
              else
              {
                v179 = (__clz(v13 - 66) ^ 0x1F) + 10;
              }
            }
            else
            {
              v180 = (__clz(v13 - 2) ^ 0x1F) - 1;
              v179 = ((v13 - 2) >> v180) + 2 * v180 + 2;
            }
          }
          else
          {
            LOWORD(v179) = v13;
          }
          v193 = v143 + (int)v100;
          if (v193 > 9)
          {
            if (v193 > 0x85)
            {
              if (v193 > 0x845)
                LOWORD(v194) = 23;
              else
                v194 = (__clz(v193 - 70) ^ 0x1F) + 12;
            }
            else
            {
              v195 = v193 - 6;
              v196 = (__clz(v195) ^ 0x1F) - 1;
              v194 = (v195 >> v196) + 2 * v196 + 4;
            }
          }
          else
          {
            LOWORD(v194) = v143 + v100 - 2;
          }
          v197 = v194 & 7 | (8 * (v179 & 7));
          if ((v169 & 0x3FF) != 0 || (unsigned __int16)v179 > 7u || (unsigned __int16)v194 > 0xFu)
          {
            v199 = 3 * ((unsigned __int16)v179 >> 3) + ((unsigned __int16)(v194 & 0xFFF8) >> 3);
            v198 = ((((0x520D40u >> (2 * v199)) & 0xC0) + (v199 << 6)) | v197) + 64;
          }
          else
          {
            LOWORD(v198) = v197 | 0x40;
            if ((v194 & 0xFFF8) == 0)
              LOWORD(v198) = v194 & 7 | (8 * (v179 & 7));
          }
          *(_WORD *)(v215 + 12) = v198;
          *a12 += v13;
          v200 = v94 + 2;
          v159 = v94 + v100;
          if (v94 + v100 >= v213)
            v201 = v213;
          else
            v201 = v94 + v100;
          if (v99 < v100 >> 2)
          {
            v202 = v159 - 4 * v99;
            if (v200 > v202)
              v202 = v94 + 2;
            if (v201 >= v202)
              v200 = v202;
            else
              v200 = v201;
          }
          v20 = v212 + 2 * v100 + v94;
          v215 += 16;
          if (v200 >= v201)
          {
            v13 = 0;
            goto LABEL_298;
          }
          v203 = *(_QWORD *)(v240 + 96);
          v204 = *(_QWORD *)(v240 + 104);
          v205 = v203 + 0x20000;
          v164 = *(_WORD *)(v240 + 80);
          do
          {
            v206 = (506832829 * *(_DWORD *)(a3 + (v200 & a4))) >> 17;
            v207 = v200 - *(unsigned int *)(v203 + 4 * v206);
            *(_BYTE *)(v203 + 196608 + (unsigned __int16)v200) = v206;
            if (v207 >= 0xFFFF)
              LOWORD(v207) = -1;
            result = v204 + 4 * v164;
            *(_WORD *)result = v207;
            *(_WORD *)(result + 2) = *(_WORD *)(v205 + 2 * v206);
            *(_WORD *)(v205 + 2 * v206) = v164++;
            *(_DWORD *)(v203 + 4 * v206) = v200++;
          }
          while (v201 != v200);
          v13 = 0;
          goto LABEL_296;
        }
        v188 = a8[1];
        v12 = a10;
        if (v99 == v188)
        {
          v169 = 1;
        }
        else
        {
          v189 = v99 + 3 - v171;
          if (v189 > 6)
          {
            v192 = v99 + 3 - v188;
            if (v192 > 6)
            {
              if (v99 == a8[2])
              {
                v169 = 2;
              }
              else
              {
                if (v99 != a8[3])
                  goto LABEL_230;
                v169 = 3;
LABEL_231:
                v12 = a10;
              }
              goto LABEL_232;
            }
            v190 = 4 * v192;
            v191 = 266017486;
          }
          else
          {
            v190 = 4 * v189;
            v191 = 158663784;
          }
          v169 = (v191 >> v190) & 0xF;
        }
LABEL_232:
        if (v99 <= v224 + v211 && v169)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v99;
          v170 = vdupq_n_s32(v99);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v170, (int32x4_t)xmmword_19D02CCA0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v170.i8, (int32x2_t)0x3FFFFFFFDLL);
        }
        goto LABEL_237;
      }
LABEL_215:
      ++v13;
      v159 = a2 + 1;
      v20 = v232;
      if (a2 + 1 <= v232)
      {
        v12 = a10;
LABEL_298:
        a5 = v217;
        v14 = v220;
        goto LABEL_299;
      }
      v12 = a10;
      v14 = v220;
      if (v159 <= v232 + v210)
      {
        v181 = v209;
        if (a2 + 9 < v209)
          v181 = a2 + 9;
        if (v159 < v181)
        {
          v182 = *(_QWORD *)(a7 + 96);
          v183 = *(_QWORD *)(a7 + 104);
          v184 = v182 + 0x20000;
          v164 = *(_WORD *)(a7 + 80);
          result = 0xFFFFLL;
          do
          {
            v185 = (506832829 * *(_DWORD *)(a3 + (v159 & a4))) >> 17;
            v186 = v159 - *(unsigned int *)(v182 + 4 * v185);
            *(_BYTE *)(v182 + 196608 + (unsigned __int16)v159) = v185;
            if (v186 >= 0xFFFF)
              LOWORD(v186) = -1;
            v187 = (_WORD *)(v183 + 4 * v164);
            *v187 = v186;
            v187[1] = *(_WORD *)(v184 + 2 * v185);
            *(_WORD *)(v184 + 2 * v185) = v164++;
            *(_DWORD *)(v182 + 4 * v185) = v159;
            v13 += 2;
            v159 += 2;
          }
          while (v159 < v181);
          goto LABEL_296;
        }
      }
      else
      {
        v160 = v208;
        if (a2 + 17 < v208)
          v160 = a2 + 17;
        if (v159 < v160)
        {
          v161 = *(_QWORD *)(a7 + 96);
          v162 = *(_QWORD *)(a7 + 104);
          v163 = v161 + 0x20000;
          v164 = *(_WORD *)(a7 + 80);
          result = 0xFFFFLL;
          do
          {
            v165 = (506832829 * *(_DWORD *)(a3 + (v159 & a4))) >> 17;
            v166 = v159 - *(unsigned int *)(v161 + 4 * v165);
            *(_BYTE *)(v161 + 196608 + (unsigned __int16)v159) = v165;
            if (v166 >= 0xFFFF)
              LOWORD(v166) = -1;
            v167 = (_WORD *)(v162 + 4 * v164);
            *v167 = v166;
            v167[1] = *(_WORD *)(v163 + 2 * v165);
            *(_WORD *)(v163 + 2 * v165) = v164++;
            *(_DWORD *)(v161 + 4 * v165) = v159;
            v13 += 4;
            v159 += 4;
          }
          while (v159 < v160);
LABEL_296:
          a5 = v217;
          v14 = v220;
          *(_WORD *)(a7 + 80) = v164;
          goto LABEL_299;
        }
      }
      a5 = v217;
LABEL_299:
      a2 = v159;
      if (v159 + 4 >= v14)
        goto LABEL_306;
    }
    if (a2)
    {
      v23 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
      if (a2 != 1)
      {
        v24 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_19:
        v225 = v23;
        v25 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v216 + v24) | *(_BYTE *)(a5 + v23)) + 629);
        goto LABEL_20;
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = 0;
    goto LABEL_19;
  }
  v215 = a10;
  v159 = a2;
LABEL_306:
  *a9 = v13 + v14 - v159;
  *a11 += (v215 - v12) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH42(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8, double a9, double a10, int32x4_t a11, unint64_t *a12, uint64_t a13, _QWORD *a14, _QWORD *a15)
{
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t i;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t j;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unint64_t v70;
  unsigned int v71;
  unsigned __int16 *v72;
  __int16 v73;
  uint64_t v74;
  unint64_t v75;
  __int16 v76;
  __int16 *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  unint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  _QWORD *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  unsigned __int16 *v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  _WORD *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  BOOL v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  __int16 v185;
  uint64_t v186;
  unint64_t v187;
  _WORD *v188;
  __int16 v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  __int16 v196;
  uint64_t v197;
  unint64_t v198;
  _WORD *v199;
  __int16 v200;
  unint64_t v201;
  int32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unsigned int v216;
  unint64_t v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  __int16 v231;
  uint64_t v232;
  unint64_t v233;
  _WORD *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  int *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t v273;

  v16 = a13;
  v248 = *(_QWORD *)(a6 + 16);
  v17 = *a12;
  v18 = a2 + result;
  v19 = a2 + result - 3;
  v236 = v19;
  if (result <= 3)
    v19 = a2;
  v240 = v19;
  v20 = *(_DWORD *)(a6 + 8);
  v21 = 64;
  if (*(int *)(a6 + 4) >= 9)
    v21 = 512;
  v22 = *(_QWORD *)(a6 + 96);
  a11.i64[0] = *(_QWORD *)a8;
  v23 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)a8, 0), (int32x4_t)xmmword_19D02CCA0);
  *((int32x4_t *)a8 + 1) = v23;
  *((int32x4_t *)a8 + 2) = vaddq_s32(vzip1q_s32(a11, a11), (int32x4_t)xmmword_19D02CCB0);
  v24 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)a11.i8, 1), (int32x4_t)xmmword_19D02CCC0);
  *((int32x4_t *)a8 + 3) = v24;
  if (a2 + 4 < v18)
  {
    v25 = a7 + 10;
    v238 = v22;
    v247 = (1 << v20) - 16;
    v261 = v21 + a2;
    v242 = a13;
    v243 = a5 + 256;
    v241 = v22 + 1;
    v237 = 4 * v21;
    v235 = v18 - 4;
    v244 = a5;
    v245 = a2 + result;
    v249 = a7 + 10;
    v250 = a8;
    v268 = a3;
    v239 = v21;
    v273 = a4;
    while (1)
    {
      if (a2 >= v247)
        v26 = v247;
      else
        v26 = a2;
      v27 = a2 + v248;
      if (a2 + v248 >= v247)
        v27 = v247;
      v265 = v27;
      if (*(_DWORD *)(a6 + 624))
        break;
      v30 = 0;
      v252 = 0;
LABEL_20:
      v31 = 0;
      v32 = 0;
      v254 = 0;
      v256 = 0;
      v33 = v18 - a2;
      v253 = v30;
      v269 = *(_QWORD *)(a6 + 72);
      v271 = *(_QWORD **)(a6 + 8 * v30 + 696);
      v34 = a7[139];
      v35 = v34 + 196608;
      v36 = a2 & v273;
      v37 = (unsigned __int8 *)(a3 + (a2 & v273));
      result = (506832829 * *(_DWORD *)v37) >> 17;
      v38 = 2020;
      v267 = 2020;
      v39 = a2;
      do
      {
        v40 = a8[v31];
        v41 = a2 - v40;
        if ((!v31 || *(unsigned __int8 *)(v35 + (unsigned __int16)(a2 - v40)) == result)
          && v26 >= v40
          && v41 < a2)
        {
          v43 = a3 + (v41 & v273);
          if (v33 < 8)
          {
            v48 = (unsigned __int8 *)(a3 + (v41 & v273));
            v47 = v37;
            i = v33;
            if (v33)
            {
LABEL_34:
              v49 = &v48[i];
              while (*v48 == *v47)
              {
                ++v47;
                ++v48;
                if (!--i)
                {
                  v48 = v49;
                  break;
                }
              }
              a2 = v39;
            }
          }
          else
          {
            v44 = 0;
            for (i = v33; i > 7; i -= 8)
            {
              v46 = *(_QWORD *)(v43 + v44) ^ *(_QWORD *)&v37[v44];
              if (v46)
              {
                v50 = v44 + (__clz(__rbit64(v46)) >> 3);
                goto LABEL_41;
              }
              v44 += 8;
            }
            v47 = &v37[v44];
            v48 = (unsigned __int8 *)(v43 + v44);
            if (i)
              goto LABEL_34;
          }
          v50 = (unint64_t)&v48[-v43];
LABEL_41:
          v51 = 135 * v50 + 1935;
          if (v50 >= 2 && v38 < v51)
          {
            if (v31)
              v51 -= ((0x1CA10u >> (v31 & 0xE)) & 0xE) + 39;
            if (v38 < v51)
            {
              v254 = a8[v31];
              v256 = v50;
              v267 = v51;
              v38 = v51;
              v32 = v50;
            }
          }
        }
        ++v31;
      }
      while (v31 != 16);
      v263 = v17;
      v53 = v34 + 0x20000;
      v54 = ((unsigned __int16)((506832829 * *(_DWORD *)v37) >> 16) >> 1) & 0x1FF;
      v55 = a7[138];
      v56 = *(unsigned int *)(v34 + 4 * result);
      v57 = a2 - v56;
      if (v55)
      {
        v58 = 0;
        v59 = *(unsigned __int16 *)(v53 + 2 * result);
        v60 = a2 - v56;
        v61 = a7[140];
        do
        {
          v58 += v60;
          if (v58 > v26)
            break;
          if (v32 + v36 <= v273)
          {
            v62 = (v39 - v58) & v273;
            if (v62 + v32 <= v273 && *(unsigned __int8 *)(a3 + v32 + v36) == *(unsigned __int8 *)(a3 + v62 + v32))
            {
              v63 = a3 + v62;
              if (v33 < 8)
              {
                v68 = (unsigned __int8 *)(a3 + v62);
                v67 = v37;
                j = v33;
                if (v33)
                {
LABEL_65:
                  v69 = &v68[j];
                  while (*v68 == *v67)
                  {
                    ++v67;
                    ++v68;
                    if (!--j)
                    {
                      v68 = v69;
                      break;
                    }
                  }
                }
              }
              else
              {
                v64 = 0;
                for (j = v33; j > 7; j -= 8)
                {
                  v66 = *(_QWORD *)(v63 + v64) ^ *(_QWORD *)&v37[v64];
                  if (v66)
                  {
                    v70 = v64 + (__clz(__rbit64(v66)) >> 3);
                    goto LABEL_71;
                  }
                  v64 += 8;
                }
                v67 = &v37[v64];
                v68 = (unsigned __int8 *)(v63 + v64);
                if (j)
                  goto LABEL_65;
              }
              v70 = (unint64_t)&v68[-v63];
LABEL_71:
              v25 = a7 + 10;
              a8 = v250;
              a3 = v268;
              if (v70 >= 4)
              {
                v71 = __clz(v58) ^ 0x1F;
                if (v38 < 135 * v70 - 30 * v71 + 1920)
                {
                  v254 = v58;
                  v256 = v70;
                  v267 = 135 * v70 - 30 * v71 + 1920;
                  v38 = v267;
                  v32 = v70;
                }
              }
            }
          }
          v72 = (unsigned __int16 *)(a7[140] + (v54 << 11) + 4 * v59);
          v59 = v72[1];
          v60 = *v72;
          --v55;
        }
        while (v55);
      }
      else
      {
        v61 = a7[140];
      }
      v73 = *((_WORD *)v25 + v54);
      *((_WORD *)v25 + v54) = v73 + 1;
      v74 = v73 & 0x1FF;
      v75 = v39;
      *(_BYTE *)(v35 + (unsigned __int16)v39) = result;
      if (v57 >= 0xFFFF)
        v76 = -1;
      else
        v76 = v57;
      v77 = (__int16 *)(v61 + (v54 << 11) + 4 * v74);
      *v77 = v76;
      v77[1] = *(_WORD *)(v53 + 2 * result);
      *(_DWORD *)(v34 + 4 * result) = v39;
      *(_WORD *)(v53 + 2 * result) = v74;
      if (v267 == 2020)
      {
        v78 = a7[141];
        v80 = *(_QWORD *)(v78 + 40);
        v79 = *(_QWORD *)(v78 + 48);
        a5 = v244;
        v81 = v254;
        v82 = v256;
        a4 = v273;
        if (v79 < v80 >> 7)
          goto LABEL_220;
        v246 = 0;
        result = ((506832829 * *(_DWORD *)v37) >> 17) & 0x7FFE;
        v83 = v271[4];
        v84 = 1;
        v267 = 2020;
        do
        {
          v85 = v84;
          *(_QWORD *)(v78 + 40) = ++v80;
          v86 = *(unsigned __int8 *)(v83 + result);
          if (!*(_BYTE *)(v83 + result) || v33 < v86)
            goto LABEL_105;
          v87 = (unsigned __int8 *)(*(_QWORD *)(*v271 + 168)
                                  + *(unsigned int *)(*v271 + 4 * *(unsigned __int8 *)(v83 + result) + 32)
                                  + *(unsigned __int16 *)(v271[3] + 2 * result)
                                  * (unint64_t)*(unsigned __int8 *)(v83 + result));
          if (v86 < 8)
          {
            v89 = *(unsigned __int8 *)(v83 + result);
            v91 = v37;
          }
          else
          {
            v88 = 0;
            v89 = *(unsigned __int8 *)(v83 + result);
            do
            {
              v90 = *(_QWORD *)&v37[v88] ^ *(_QWORD *)&v87[v88];
              if (v90)
              {
                v94 = v88 + (__clz(__rbit64(v90)) >> 3);
                v93 = v271;
                goto LABEL_98;
              }
              v89 -= 8;
              v88 += 8;
            }
            while (v89 > 7);
            v91 = &v37[v88];
            if (!v89)
              goto LABEL_96;
            v87 += v88;
          }
          v92 = &v91[v89];
          while (*v91 == *v87)
          {
            ++v87;
            ++v91;
            if (!--v89)
            {
              v91 = v92;
              break;
            }
          }
LABEL_96:
          v93 = v271;
          v94 = v91 - v37;
LABEL_98:
          v95 = v94 && v94 + *((unsigned int *)v93 + 3) > v86;
          if (v95
            && (v96 = v241
                    + v265
                    + *(unsigned __int16 *)(v271[3] + 2 * result)
                    + ((((v93[2] >> (6 * (v86 - v94))) & 0x3FLL) + 4 * (v86 - v94)) << *(_BYTE *)(*v271 + v86)),
                v96 <= v269)
            && (v97 = v96, v98 = 135 * v94 - 30 * (__clz(v96) ^ 0x1F) + 1920, v98 >= v267))
          {
            v246 = v86 - v94;
            *(_QWORD *)(v78 + 48) = ++v79;
            v267 = v98;
            v100 = v94;
            v99 = v97;
          }
          else
          {
LABEL_105:
            v99 = v81;
            v100 = v82;
          }
          v84 = 0;
          ++result;
          v82 = v100;
          v81 = v99;
        }
        while ((v85 & 1) != 0);
      }
      else
      {
        v246 = 0;
        a5 = v244;
        v99 = v254;
        v100 = v256;
        a4 = v273;
      }
      v75 = v39;
      if (v267 < 0x7E5)
      {
LABEL_220:
        v17 = v263 + 1;
        v179 = v75 + 1;
        if (v75 + 1 > v261)
        {
          v16 = a13;
          v18 = v245;
          if (v179 <= v261 + v237)
          {
            v191 = v75 + 9;
            if (v75 + 9 >= v236)
              v191 = v236;
            if (v179 < v191)
            {
              v192 = a7[139];
              v193 = v192 + 0x20000;
              v194 = a7[140];
              do
              {
                v195 = (506832829 * *(_DWORD *)(a3 + (v179 & a4))) >> 17;
                v196 = *((_WORD *)v25 + (v195 & 0x1FF));
                *((_WORD *)v25 + (v195 & 0x1FF)) = v196 + 1;
                v197 = v196 & 0x1FF;
                v198 = v179 - *(unsigned int *)(v192 + 4 * v195);
                result = (unsigned __int16)v179;
                *(_BYTE *)(v192 + 196608 + (unsigned __int16)v179) = v195;
                if (v198 >= 0xFFFF)
                  LOWORD(v198) = -1;
                v199 = (_WORD *)(v194 + ((unint64_t)(v195 & 0x1FF) << 11) + 4 * v197);
                *v199 = v198;
                v200 = *(_WORD *)(v193 + 2 * v195);
                *(_DWORD *)(v192 + 4 * v195) = v179;
                v199[1] = v200;
                *(_WORD *)(v193 + 2 * v195) = v197;
                v17 += 2;
                v179 += 2;
              }
              while (v179 < v191);
            }
          }
          else
          {
            v180 = v75 + 17;
            if (v75 + 17 >= v235)
              v180 = v235;
            if (v179 < v180)
            {
              v181 = a7[139];
              v182 = v181 + 0x20000;
              v183 = a7[140];
              do
              {
                v184 = (506832829 * *(_DWORD *)(a3 + (v179 & a4))) >> 17;
                v185 = *((_WORD *)v25 + (v184 & 0x1FF));
                *((_WORD *)v25 + (v184 & 0x1FF)) = v185 + 1;
                v186 = v185 & 0x1FF;
                v187 = v179 - *(unsigned int *)(v181 + 4 * v184);
                result = (unsigned __int16)v179;
                *(_BYTE *)(v181 + 196608 + (unsigned __int16)v179) = v184;
                if (v187 >= 0xFFFF)
                  LOWORD(v187) = -1;
                v188 = (_WORD *)(v183 + ((unint64_t)(v184 & 0x1FF) << 11) + 4 * v186);
                *v188 = v187;
                v189 = *(_WORD *)(v182 + 2 * v184);
                *(_DWORD *)(v181 + 4 * v184) = v179;
                v188[1] = v189;
                *(_WORD *)(v182 + 2 * v184) = v186;
                v17 += 4;
                v179 += 4;
              }
              while (v179 < v180);
            }
          }
          goto LABEL_298;
        }
        goto LABEL_297;
      }
      v101 = 0;
      v102 = v263;
      while (1)
      {
        v103 = v33 - 1;
        v104 = v100 - 1;
        if (v100 - 1 >= v33 - 1)
          v104 = v33 - 1;
        if (*(int *)(a6 + 4) >= 5)
          v105 = 0;
        else
          v105 = v104;
        v106 = v75 + 1;
        if (v75 + 1 < v247)
          v107 = v75 + 1;
        else
          v107 = v247;
        v108 = v106 + v248;
        if (v106 + v248 >= v247)
          v108 = v247;
        v251 = v108;
        v264 = v102;
        v259 = v75;
        v255 = v99;
        v257 = v100;
        v258 = v101;
        if (*(_DWORD *)(a6 + 624))
        {
          v109 = *(unsigned __int8 *)(a3 + (v75 & a4));
          v110 = a4;
          v111 = a5;
          v112 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v243 + v252) | *(_BYTE *)(a5 + v109)) + 629);
          v252 = v109;
        }
        else
        {
          v110 = a4;
          v111 = a5;
          v112 = v253;
        }
        v113 = 0;
        v114 = 0;
        v115 = 0;
        v253 = v112;
        v272 = *(_QWORD *)(a6 + 8 * v112 + 696);
        v262 = *(_QWORD *)(a6 + 72);
        v116 = a7[139];
        v117 = v116 + 196608;
        v266 = a7[140];
        v118 = v106 & v110;
        v119 = (_DWORD *)(a3 + (v106 & v110));
        v120 = (506832829 * *v119) >> 17;
        v121 = 2020;
        v122 = 2020;
        do
        {
          v123 = a8[v113];
          v124 = v106 - v123;
          if ((!v113 || *(unsigned __int8 *)(v117 + (unsigned __int16)(v106 - v123)) == v120)
            && v107 >= v123
            && v124 < v106)
          {
            v126 = (_QWORD *)(a3 + (v124 & v273));
            if (v103 < 8)
            {
              v129 = (_QWORD *)(a3 + (v124 & v273));
              v128 = v119;
              v131 = v33 - 1;
              if (v33 != 1)
              {
LABEL_139:
                v132 = (_QWORD *)((char *)v129 + v131);
                while (*(unsigned __int8 *)v129 == *(unsigned __int8 *)v128)
                {
                  v128 = (_QWORD *)((char *)v128 + 1);
                  v129 = (_QWORD *)((char *)v129 + 1);
                  if (!--v131)
                  {
                    v129 = v132;
                    break;
                  }
                }
              }
            }
            else
            {
              v127 = 0;
              v128 = v119;
              v129 = v126;
              do
              {
                v130 = *v129 ^ *v128;
                if (v130)
                {
                  v133 = (__clz(__rbit64(v130)) >> 3) - v127;
                  goto LABEL_145;
                }
                ++v129;
                ++v128;
                v127 -= 8;
                v131 = v33 + v127 - 1;
              }
              while (v131 > 7);
              if (v33 + v127 != 1)
                goto LABEL_139;
            }
            v133 = (char *)v129 - (char *)v126;
LABEL_145:
            v134 = 135 * v133 + 1935;
            if (v133 >= 2 && v121 < v134)
            {
              if (v113)
                v134 -= ((0x1CA10u >> (v113 & 0xE)) & 0xE) + 39;
              if (v121 < v134)
              {
                v115 = v133;
                v114 = a8[v113];
                v122 = v134;
                v121 = v134;
                v105 = v133;
              }
            }
          }
          ++v113;
        }
        while (v113 != 16);
        v136 = a7[139];
        v137 = ((unsigned __int16)((506832829 * *v119) >> 16) >> 1) & 0x1FF;
        v138 = a7[138];
        v139 = v106 - *(unsigned int *)(v116 + 4 * v120);
        v270 = v122;
        v260 = v116 + 0x20000;
        if (v138)
        {
          v140 = 0;
          v141 = *(unsigned __int16 *)(v116 + 0x20000 + 2 * v120);
          v142 = v106 - *(unsigned int *)(v116 + 4 * v120);
          a5 = v111;
          v143 = (_QWORD *)v272;
          a4 = v273;
          do
          {
            v140 += v142;
            if (v140 > v107)
              break;
            if (v105 + v118 <= v273)
            {
              v144 = (v106 - v140) & v273;
              if (v144 + v105 <= v273
                && *(unsigned __int8 *)(v268 + v105 + v118) == *(unsigned __int8 *)(v268 + v144 + v105))
              {
                v145 = (_QWORD *)(v268 + v144);
                if (v103 < 8)
                {
                  v148 = v145;
                  v147 = v119;
                  v150 = v33 - 1;
                  if (v33 != 1)
                  {
LABEL_169:
                    v151 = (_QWORD *)((char *)v148 + v150);
                    while (*(unsigned __int8 *)v148 == *(unsigned __int8 *)v147)
                    {
                      v147 = (_QWORD *)((char *)v147 + 1);
                      v148 = (_QWORD *)((char *)v148 + 1);
                      if (!--v150)
                      {
                        v148 = v151;
                        break;
                      }
                    }
                    a5 = v244;
                  }
                }
                else
                {
                  v146 = 0;
                  v147 = v119;
                  v148 = v145;
                  do
                  {
                    v149 = *v148 ^ *v147;
                    if (v149)
                    {
                      v152 = (__clz(__rbit64(v149)) >> 3) - v146;
                      goto LABEL_176;
                    }
                    ++v148;
                    ++v147;
                    v146 -= 8;
                    v150 = v33 + v146 - 1;
                  }
                  while (v150 > 7);
                  if (v33 + v146 != 1)
                    goto LABEL_169;
                }
                v152 = (char *)v148 - (char *)v145;
LABEL_176:
                v143 = (_QWORD *)v272;
                if (v152 >= 4)
                {
                  v153 = 135 * v152 - 30 * (__clz(v140) ^ 0x1F) + 1920;
                  if (v121 < v153)
                  {
                    v115 = v152;
                    v114 = v140;
                    v270 = v153;
                    v121 = v153;
                    v105 = v152;
                  }
                }
              }
            }
            v154 = (unsigned __int16 *)(v266 + (v137 << 11) + 4 * v141);
            v141 = v154[1];
            v142 = *v154;
            --v138;
          }
          while (v138);
        }
        else
        {
          a5 = v111;
          v143 = (_QWORD *)v272;
          a4 = v273;
        }
        v25 = a7 + 10;
        v155 = *((_WORD *)v249 + v137);
        *((_WORD *)v249 + v137) = v155 + 1;
        v156 = v155 & 0x1FF;
        *(_BYTE *)(v117 + (unsigned __int16)v106) = v120;
        v157 = v139 >= 0xFFFF ? -1 : v139;
        v158 = (_WORD *)(v266 + (v137 << 11) + 4 * v156);
        *v158 = v157;
        v158[1] = *(_WORD *)(v260 + 2 * v120);
        *(_DWORD *)(v136 + 4 * v120) = v106;
        *(_WORD *)(v260 + 2 * v120) = v156;
        if (v270 == 2020)
        {
          v159 = a7[141];
          v161 = *(_QWORD *)(v159 + 40);
          v160 = *(_QWORD *)(v159 + 48);
          a8 = v250;
          a3 = v268;
          result = 0;
          if (v160 >= v161 >> 7)
          {
            v162 = ((506832829 * *v119) >> 17) & 0x7FFE;
            v163 = v143[4];
            v164 = 1;
            v270 = 2020;
            v165 = v114;
            v166 = v115;
            do
            {
              v167 = v164;
              *(_QWORD *)(v159 + 40) = ++v161;
              v168 = *(unsigned __int8 *)(v163 + v162);
              if (!*(_BYTE *)(v163 + v162) || v103 < v168)
                goto LABEL_216;
              v169 = *(unsigned __int16 *)(v143[3] + 2 * v162);
              v170 = *v143;
              v171 = (unsigned __int8 *)(*(_QWORD *)(*v143 + 168)
                                       + *(unsigned int *)(*v143 + 4 * *(unsigned __int8 *)(v163 + v162) + 32)
                                       + v169 * *(unsigned __int8 *)(v163 + v162));
              if (v168 < 8)
              {
                v173 = *(unsigned __int8 *)(v163 + v162);
                v175 = (unsigned __int8 *)v119;
              }
              else
              {
                v172 = 0;
                v173 = *(unsigned __int8 *)(v163 + v162);
                do
                {
                  v174 = *(_QWORD *)&v119[v172] ^ *(_QWORD *)&v171[v172 * 4];
                  if (v174)
                  {
                    v115 = v172 * 4 + (__clz(__rbit64(v174)) >> 3);
                    goto LABEL_209;
                  }
                  v173 -= 8;
                  v172 += 2;
                }
                while (v173 > 7);
                v175 = (unsigned __int8 *)&v119[v172];
                if (!v173)
                  goto LABEL_207;
                v171 += v172 * 4;
              }
              v176 = &v175[v173];
              while (*v175 == *v171)
              {
                ++v171;
                ++v175;
                if (!--v173)
                {
                  v175 = v176;
                  break;
                }
              }
LABEL_207:
              v115 = v175 - (unsigned __int8 *)v119;
LABEL_209:
              v143 = (_QWORD *)v272;
              v177 = v115 && v115 + *(unsigned int *)(v272 + 12) > v168;
              if (v177
                && (v114 = v241
                         + v251
                         + v169
                         + ((((*(_QWORD *)(v272 + 16) >> (6 * (v168 - v115))) & 0x3FLL)
                           + 4 * (v168 - v115)) << *(_BYTE *)(v170 + v168)),
                    v114 <= v262)
                && (v178 = 135 * v115 - 30 * (__clz(v114) ^ 0x1F) + 1920, v178 >= v270))
              {
                result = (v168 - v115);
                *(_QWORD *)(v159 + 48) = ++v160;
                v270 = v178;
              }
              else
              {
LABEL_216:
                v115 = v166;
                v114 = v165;
              }
              v164 = 0;
              ++v162;
              v165 = v114;
              v166 = v115;
            }
            while ((v167 & 1) != 0);
          }
          else
          {
            v270 = 2020;
          }
        }
        else
        {
          result = 0;
          a8 = v250;
          a3 = v268;
        }
        if (v270 < v267 + 175)
          break;
        v102 = v264 + 1;
        if (v258 <= 2)
        {
          v101 = v258 + 1;
          v99 = v114;
          v267 = v270;
          v246 = result;
          v100 = v115;
          v33 = v103;
          v75 = v106;
          if (v259 + 5 < v245)
            continue;
        }
        goto LABEL_241;
      }
      v106 = v259;
      v190 = v259 + v248;
      if (v259 + v248 >= v247)
        v190 = v247;
      v251 = v190;
      v114 = v255;
      v115 = v257;
      result = v246;
      v102 = v264;
LABEL_241:
      if (v114 > v251 + v238)
        goto LABEL_242;
      v203 = *a8;
      if (v114 != v203)
      {
        v213 = a8[1];
        if (v114 == v213)
        {
          v201 = 1;
          goto LABEL_243;
        }
        v214 = v114 + 3 - v203;
        if (v214 > 6)
        {
          v217 = v114 + 3 - v213;
          if (v217 > 6)
          {
            if (v114 == a8[2])
            {
              v201 = 2;
            }
            else if (v114 == a8[3])
            {
              v201 = 3;
            }
            else
            {
LABEL_242:
              v201 = v114 + 15;
            }
LABEL_243:
            if (v114 <= v251 + v238 && v201)
            {
              a8[3] = a8[2];
              v24.i64[0] = *(_QWORD *)a8;
              *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
              *a8 = v114;
              v23.i32[0] = v114;
              v202 = vzip1q_s32(v23, v24);
              v23 = vaddq_s32(vzip1q_s32(v202, v202), (int32x4_t)xmmword_19D02CCB0);
              *((int32x4_t *)a8 + 1) = vaddq_s32(vdupq_n_s32(v114), (int32x4_t)xmmword_19D02CCA0);
              *((int32x4_t *)a8 + 2) = v23;
              v24 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v24.i8, 0), (int32x4_t)xmmword_19D02CCC0);
              *((int32x4_t *)a8 + 3) = v24;
            }
            goto LABEL_248;
          }
          v215 = 4 * v217;
          v216 = 266017486;
        }
        else
        {
          v215 = 4 * v214;
          v216 = 158663784;
        }
        v201 = (v216 >> v215) & 0xF;
        goto LABEL_243;
      }
      v201 = 0;
LABEL_248:
      *(_DWORD *)v242 = v102;
      *(_DWORD *)(v242 + 4) = v115 | ((_DWORD)result << 25);
      v204 = *(unsigned int *)(a6 + 60);
      v205 = v204 + 16;
      if (v204 + 16 <= v201)
      {
        v207 = *(unsigned int *)(a6 + 56);
        v208 = v201 - v204 + (4 << v207) - 16;
        v209 = (__clz(v208) ^ 0x1F) - 1;
        v210 = ((v208 >> v209) & 1 | 2) << v209;
        v201 = ((v208 & ~(-1 << v207))
              + v205
              + ((((v208 >> v209) & 1 | (2 * (v209 - v207))) + 65534) << v207)) | ((v209 - v207) << 10);
        v206 = (v208 - v210) >> v207;
      }
      else
      {
        LODWORD(v206) = 0;
      }
      *(_WORD *)(v242 + 14) = v201;
      *(_DWORD *)(v242 + 8) = v206;
      if (v102 > 5)
      {
        if (v102 > 0x81)
        {
          if (v102 > 0x841)
          {
            if (v102 >> 1 >= 0xC21)
            {
              if (v102 < 0x5842)
                LOWORD(v211) = 22;
              else
                LOWORD(v211) = 23;
            }
            else
            {
              LOWORD(v211) = 21;
            }
          }
          else
          {
            v211 = (__clz(v102 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v212 = (__clz(v102 - 2) ^ 0x1F) - 1;
          v211 = ((v102 - 2) >> v212) + 2 * v212 + 2;
        }
      }
      else
      {
        LOWORD(v211) = v102;
      }
      v218 = (int)result + (int)v115;
      if (v218 > 9)
      {
        if (v218 > 0x85)
        {
          if (v218 > 0x845)
            LOWORD(v219) = 23;
          else
            v219 = (__clz(v218 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v220 = v218 - 6;
          v221 = (__clz(v220) ^ 0x1F) - 1;
          v219 = (v220 >> v221) + 2 * v221 + 4;
        }
      }
      else
      {
        LOWORD(v219) = result + v115 - 2;
      }
      v222 = v219 & 7 | (8 * (v211 & 7));
      if ((v201 & 0x3FF) != 0 || (unsigned __int16)v211 > 7u || (unsigned __int16)v219 > 0xFu)
      {
        v224 = 3 * ((unsigned __int16)v211 >> 3) + ((unsigned __int16)(v219 & 0xFFF8) >> 3);
        v223 = ((((0x520D40u >> (2 * v224)) & 0xC0) + (v224 << 6)) | v222) + 64;
      }
      else
      {
        LOWORD(v223) = v222 | 0x40;
        if ((v219 & 0xFFF8) == 0)
          LOWORD(v223) = v219 & 7 | (8 * (v211 & 7));
      }
      *(_WORD *)(v242 + 12) = v223;
      *a15 += v102;
      v225 = v106 + 2;
      v179 = v106 + v115;
      v226 = v240;
      if (v106 + v115 < v240)
        v226 = v106 + v115;
      if (v114 < v115 >> 2)
      {
        if (v225 <= v179 - 4 * v114)
          v225 = v179 - 4 * v114;
        if (v226 < v225)
          v225 = v226;
      }
      v261 = v239 + 2 * v115 + v106;
      v242 += 16;
      if (v225 < v226)
      {
        v227 = a7[139];
        v228 = v227 + 0x20000;
        v229 = a7[140];
        v18 = v245;
        do
        {
          v230 = (506832829 * *(_DWORD *)(a3 + (v225 & a4))) >> 17;
          v231 = *((_WORD *)v249 + (v230 & 0x1FF));
          *((_WORD *)v249 + (v230 & 0x1FF)) = v231 + 1;
          v232 = v231 & 0x1FF;
          v233 = v225 - *(unsigned int *)(v227 + 4 * v230);
          *(_BYTE *)(v227 + 196608 + (unsigned __int16)v225) = v230;
          if (v233 >= 0xFFFF)
            LOWORD(v233) = -1;
          v234 = (_WORD *)(v229 + ((unint64_t)(v230 & 0x1FF) << 11) + 4 * v232);
          *v234 = v233;
          result = *(unsigned __int16 *)(v228 + 2 * v230);
          v234[1] = result;
          *(_DWORD *)(v227 + 4 * v230) = v225;
          *(_WORD *)(v228 + 2 * v230) = v232;
          ++v225;
        }
        while (v226 != v225);
        v17 = 0;
        v16 = a13;
        goto LABEL_298;
      }
      v17 = 0;
LABEL_297:
      v16 = a13;
      v18 = v245;
LABEL_298:
      a2 = v179;
      if (v179 + 4 >= v18)
        goto LABEL_305;
    }
    if (a2)
    {
      v28 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
      if (a2 != 1)
      {
        v29 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_19:
        v252 = v28;
        v30 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v243 + v29) | *(_BYTE *)(a5 + v28)) + 629);
        goto LABEL_20;
      }
    }
    else
    {
      v28 = 0;
    }
    v29 = 0;
    goto LABEL_19;
  }
  v242 = a13;
  v179 = a2;
LABEL_305:
  *a12 = v17 + v18 - v179;
  *a14 += (v242 - v16) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH54(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *i, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  int8x16_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int8x16_t v130;
  int8x16_t v131;
  uint64_t v132;

  v11 = a2;
  v132 = *MEMORY[0x1E0C80C00];
  v12 = *a8;
  v13 = a2 + result;
  v14 = a2 + result - 7;
  v118 = v14;
  if (result <= 7)
    v14 = a2;
  v122 = v14;
  if (*(int *)(a5 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (a2 + 8 < v13)
  {
    v129 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v119 = *(_QWORD *)(a5 + 96);
    v120 = *(_QWORD *)(a5 + 16);
    v16 = v15 + a2;
    v17 = *(_QWORD *)(a6 + 88);
    v117 = 4 * v15;
    v18 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
    v123 = a9;
    v124 = i;
    v125 = a2 + result;
    v126 = a5;
    v121 = v15;
    while (1)
    {
      v19 = v13 - v11;
      if (v11 >= v129)
        v20 = v129;
      else
        v20 = v11;
      v21 = v11 & a4;
      v22 = (_QWORD *)(a3 + (v11 & a4));
      v23 = *(unsigned __int8 *)v22;
      v24 = *i;
      if (v11 < v24)
        goto LABEL_29;
      v25 = (unsigned __int8 *)(a3 + (a4 & (v11 - v24)));
      if (v23 != *v25)
        goto LABEL_29;
      if (v19 < 8)
      {
        v30 = (unsigned __int8 *)(a3 + (a4 & (v11 - v24)));
        v29 = (unsigned __int8 *)(a3 + (v11 & a4));
        v27 = v13 - v11;
        if (v19)
        {
LABEL_20:
          v31 = &v30[v27];
          while (*v30 == *v29)
          {
            ++v29;
            ++v30;
            if (!--v27)
            {
              v30 = v31;
              break;
            }
          }
        }
      }
      else
      {
        v26 = 0;
        v27 = v13 - v11;
        do
        {
          v28 = *(_QWORD *)&v25[v26 * 8] ^ v22[v26];
          if (v28)
          {
            v32 = v26 * 8 + (__clz(__rbit64(v28)) >> 3);
            goto LABEL_26;
          }
          v27 -= 8;
          ++v26;
        }
        while (v27 > 7);
        v29 = (unsigned __int8 *)&v22[v26];
        v30 = &v25[v26 * 8];
        if (v27)
          goto LABEL_20;
      }
      v32 = v30 - v25;
LABEL_26:
      if (v32 >= 4 && (v33 = 135 * v32 + 1935, v33 >= 0x7E5))
      {
        v23 = *(unsigned __int8 *)(a3 + v32 + v21);
      }
      else
      {
LABEL_29:
        v24 = 0;
        v32 = 0;
        v33 = 2020;
      }
      v34 = 0;
      v35 = vdupq_n_s64((0xE35A7BD3579BD300 * *v22) >> 44);
      v130 = vandq_s8((int8x16_t)vaddq_s64(v35, (int64x2_t)xmmword_19D02CCD0), v18);
      v131 = vandq_s8((int8x16_t)vaddq_s64(v35, (int64x2_t)xmmword_19D02CCE0), v18);
      do
      {
        v36 = *(unsigned int *)(v17 + 4 * v130.i64[v34]);
        v37 = v11 - v36;
        result = *(unsigned __int8 *)(a3 + (v36 & a4) + v32);
        if (v23 == (_DWORD)result && v11 != v36 && v37 <= v20)
        {
          v40 = a3 + (v36 & a4);
          if (v19 < 8)
          {
            v44 = (unsigned __int8 *)(a3 + (v36 & a4));
            v43 = (unsigned __int8 *)(a3 + (v11 & a4));
            result = v13 - v11;
            if (v19)
            {
LABEL_45:
              v45 = &v44[result];
              while (*v44 == *v43)
              {
                ++v43;
                ++v44;
                if (!--result)
                {
                  v44 = v45;
                  break;
                }
              }
            }
          }
          else
          {
            v41 = 0;
            result = v13 - v11;
            do
            {
              v42 = *(_QWORD *)(v40 + v41 * 8) ^ v22[v41];
              if (v42)
              {
                v46 = v41 * 8 + (__clz(__rbit64(v42)) >> 3);
                goto LABEL_51;
              }
              result -= 8;
              ++v41;
            }
            while (result > 7);
            v43 = (unsigned __int8 *)&v22[v41];
            v44 = (unsigned __int8 *)(v40 + v41 * 8);
            if (result)
              goto LABEL_45;
          }
          v46 = (unint64_t)&v44[-v40];
LABEL_51:
          if (v46 >= 4)
          {
            result = 135;
            v47 = 135 * v46 - 30 * (__clz(v37) ^ 0x1F) + 1920;
            if (v33 < v47)
            {
              v23 = *(unsigned __int8 *)(a3 + v46 + v21);
              v24 = v37;
              v33 = v47;
              v32 = v46;
            }
          }
        }
        ++v34;
      }
      while (v34 != 4);
      *(_DWORD *)(v17 + 4 * *(uint64_t *)((char *)v130.i64 + (v11 & 0x18))) = v11;
      if (v33 < 0x7E5)
      {
        ++v12;
        v85 = v11 + 1;
        if (v11 + 1 <= v16)
        {
          i = v124;
        }
        else if (v85 <= v16 + v117)
        {
          v101 = v11 + 9;
          if (v11 + 9 >= v118)
            v101 = v118;
          for (i = v124; v85 < v101; v85 += 2)
          {
            *(_DWORD *)(v17
                      + 4
                      * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v85 & a4))) >> 32) >> 12)
                        + (v85 & 0x18)) & 0xFFFFF)) = v85;
            v12 += 2;
          }
        }
        else
        {
          v86 = v11 + 17;
          if (v11 + 17 >= v118)
            v86 = v118;
          for (i = v124; v85 < v86; v85 += 4)
          {
            *(_DWORD *)(v17
                      + 4
                      * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v85 & a4))) >> 32) >> 12)
                        + (v85 & 0x18)) & 0xFFFFF)) = v85;
            v12 += 4;
          }
        }
        goto LABEL_181;
      }
      v48 = 0;
      v128 = *v124;
      while (1)
      {
        v49 = v19 - 1;
        v50 = v32 - 1;
        if (v32 - 1 >= v19 - 1)
          v50 = v19 - 1;
        v51 = *(int *)(a5 + 4) >= 5 ? 0 : v50;
        v52 = v11 + 1;
        v53 = v11 + 1 < v129 ? v11 + 1 : v129;
        v54 = v52 & a4;
        v55 = *(unsigned __int8 *)(a3 + v51 + (v52 & a4));
        result = a3 + (v52 & a4);
        v127 = v24;
        if (v52 < v128)
          goto LABEL_83;
        v56 = a4 & (v52 - v128);
        if (v55 != *(unsigned __int8 *)(a3 + v56 + v51))
          goto LABEL_83;
        v57 = a3 + v56;
        if (v49 < 8)
        {
          v60 = (_QWORD *)(a3 + v56);
          v59 = (_QWORD *)(a3 + (v52 & a4));
          v62 = v19 - 1;
          if (v19 != 1)
          {
LABEL_74:
            v63 = (_QWORD *)((char *)v60 + v62);
            while (*(unsigned __int8 *)v60 == *(unsigned __int8 *)v59)
            {
              v59 = (_QWORD *)((char *)v59 + 1);
              v60 = (_QWORD *)((char *)v60 + 1);
              if (!--v62)
              {
                v60 = v63;
                break;
              }
            }
          }
        }
        else
        {
          v58 = 0;
          v59 = (_QWORD *)(a3 + (v52 & a4));
          v60 = (_QWORD *)(a3 + v56);
          do
          {
            v61 = *v60 ^ *v59;
            if (v61)
            {
              v64 = (__clz(__rbit64(v61)) >> 3) - v58;
              goto LABEL_80;
            }
            ++v60;
            ++v59;
            v58 -= 8;
            v62 = v19 + v58 - 1;
          }
          while (v62 > 7);
          if (v19 + v58 != 1)
            goto LABEL_74;
        }
        v64 = (unint64_t)v60 - v57;
LABEL_80:
        if (v64 >= 4 && (v65 = 135 * v64 + 1935, v65 >= 0x7E5))
        {
          v55 = *(unsigned __int8 *)(a3 + v64 + v54);
          v51 = v64;
          v66 = v128;
        }
        else
        {
LABEL_83:
          v66 = 0;
          v65 = 2020;
        }
        v67 = 0;
        v68 = vdupq_n_s64((0xE35A7BD3579BD300 * *(_QWORD *)result) >> 44);
        v69 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
        v130 = vandq_s8((int8x16_t)vaddq_s64(v68, (int64x2_t)xmmword_19D02CCD0), v69);
        v131 = vandq_s8((int8x16_t)vaddq_s64(v68, (int64x2_t)xmmword_19D02CCE0), v69);
        do
        {
          v70 = *(unsigned int *)(v17 + 4 * v130.i64[v67]);
          v71 = v52 - v70;
          if (v55 == *(unsigned __int8 *)(a3 + (v70 & a4) + v51) && v52 != v70 && v71 <= v53)
          {
            v72 = v70 & a4;
            v75 = a3 + (v70 & a4);
            if (v49 < 8)
            {
              v78 = (_QWORD *)(a3 + v72);
              v77 = (_QWORD *)(a3 + (v52 & a4));
              v80 = v19 - 1;
              if (v19 != 1)
              {
LABEL_99:
                v81 = (_QWORD *)((char *)v78 + v80);
                while (*(unsigned __int8 *)v78 == *(unsigned __int8 *)v77)
                {
                  v77 = (_QWORD *)((char *)v77 + 1);
                  v78 = (_QWORD *)((char *)v78 + 1);
                  if (!--v80)
                  {
                    v78 = v81;
                    break;
                  }
                }
              }
            }
            else
            {
              v76 = 0;
              v77 = (_QWORD *)(a3 + (v52 & a4));
              v78 = (_QWORD *)(a3 + v72);
              do
              {
                v79 = *v78 ^ *v77;
                if (v79)
                {
                  v82 = (__clz(__rbit64(v79)) >> 3) - v76;
                  goto LABEL_105;
                }
                ++v78;
                ++v77;
                v76 -= 8;
                v80 = v19 + v76 - 1;
              }
              while (v80 > 7);
              if (v19 + v76 != 1)
                goto LABEL_99;
            }
            v82 = (unint64_t)v78 - v75;
LABEL_105:
            if (v82 >= 4)
            {
              v83 = 135 * v82 - 30 * (__clz(v71) ^ 0x1F) + 1920;
              if (v65 < v83)
              {
                v55 = *(unsigned __int8 *)(a3 + v82 + v54);
                v51 = v82;
                v66 = v71;
                v65 = v83;
              }
            }
          }
          ++v67;
        }
        while (v67 != 4);
        *(_DWORD *)(v17 + 4 * *(uint64_t *)((char *)v130.i64 + (v52 & 0x18))) = v52;
        if (v65 < v33 + 175)
          break;
        ++v12;
        v13 = v125;
        a5 = v126;
        if (v48 <= 2)
        {
          v84 = v11 + 9;
          ++v48;
          v24 = v66;
          v33 = v65;
          v32 = v51;
          --v19;
          ++v11;
          if (v84 < v125)
            continue;
        }
        goto LABEL_121;
      }
      a5 = v126;
      v66 = v127;
      v51 = v32;
      v52 = v11;
      v13 = v125;
LABEL_121:
      v87 = v52 + v120;
      if (v52 + v120 >= v129)
        v87 = v129;
      v88 = v87 + v119;
      i = v124;
      if (v66 > v87 + v119)
        goto LABEL_124;
      v94 = *v124;
      if (v66 != v94)
        break;
      LOWORD(v89) = 0;
      LODWORD(v93) = 0;
      *(_DWORD *)v123 = v12;
      *(_DWORD *)(v123 + 4) = v51;
      v92 = v121;
LABEL_134:
      *(_WORD *)(v123 + 14) = v89;
      *(_DWORD *)(v123 + 8) = v93;
      if (v12 > 5)
      {
        if (v12 > 0x81)
        {
          if (v12 > 0x841)
          {
            if (v12 >> 1 >= 0xC21)
            {
              if (v12 < 0x5842)
                LOWORD(v99) = 22;
              else
                LOWORD(v99) = 23;
            }
            else
            {
              LOWORD(v99) = 21;
            }
          }
          else
          {
            v99 = (__clz(v12 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v100 = (__clz(v12 - 2) ^ 0x1F) - 1;
          v99 = ((v12 - 2) >> v100) + 2 * v100 + 2;
        }
      }
      else
      {
        LOWORD(v99) = v12;
      }
      v107 = (unint64_t)v51 >> 1;
      if (v107 > 4)
      {
        if (v107 > 0x42)
        {
          if (v107 > 0x422)
            LOWORD(v108) = 23;
          else
            v108 = (__clz(v51 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v109 = (int)v51 - 6;
          v110 = (__clz(v109) ^ 0x1F) - 1;
          v108 = (v109 >> v110) + 2 * v110 + 4;
        }
      }
      else
      {
        LOWORD(v108) = v51 - 2;
      }
      v111 = v108 & 7 | (8 * (v99 & 7));
      if ((v89 & 0x3FF) != 0 || (unsigned __int16)v99 > 7u || (unsigned __int16)v108 > 0xFu)
      {
        v113 = 3 * ((unsigned __int16)v99 >> 3) + ((unsigned __int16)(v108 & 0xFFF8) >> 3);
        v112 = ((((0x520D40u >> (2 * v113)) & 0xC0) + (v113 << 6)) | v111) + 64;
      }
      else
      {
        LOWORD(v112) = v111 | 0x40;
        if ((v108 & 0xFFF8) == 0)
          LOWORD(v112) = v108 & 7 | (8 * (v99 & 7));
      }
      *(_WORD *)(v123 + 12) = v112;
      *a11 += v12;
      v114 = v52 + 2;
      v85 = v52 + v51;
      v115 = v122;
      if (v52 + v51 < v122)
        v115 = v52 + v51;
      if (v66 < v51 >> 2)
      {
        if (v114 <= v85 - 4 * v66)
          v114 = v85 - 4 * v66;
        if (v115 < v114)
          v114 = v115;
      }
      v16 = v92 + 2 * v51 + v52;
      v123 += 16;
      if (v114 < v115)
      {
        do
        {
          *(_DWORD *)(v17
                    + 4
                    * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v114 & a4))) >> 32) >> 12)
                      + (v114 & 0x18)) & 0xFFFFF)) = v114;
          ++v114;
        }
        while (v115 != v114);
      }
      v12 = 0;
LABEL_181:
      v11 = v85;
      if (v85 + 8 >= v13)
        goto LABEL_188;
    }
    v102 = v124[1];
    if (v66 == v102)
    {
      v89 = 1;
      goto LABEL_125;
    }
    v103 = v66 + 3;
    v104 = v66 + 3 - v94;
    if (v104 > 6)
    {
      if (v103 - v102 > 6)
      {
        if (v66 == v124[2])
        {
          v89 = 2;
        }
        else if (v66 == v124[3])
        {
          v89 = 3;
        }
        else
        {
LABEL_124:
          v89 = v66 + 15;
        }
LABEL_125:
        if (v66 <= v88 && v89)
        {
          v124[3] = v124[2];
          *(_QWORD *)(v124 + 1) = *(_QWORD *)v124;
          *v124 = v66;
        }
        *(_DWORD *)v123 = v12;
        *(_DWORD *)(v123 + 4) = v51;
        v90 = *(unsigned int *)(a5 + 60);
        v91 = v90 + 16;
        v92 = v121;
        if (v90 + 16 <= v89)
        {
          v95 = *(unsigned int *)(a5 + 56);
          v96 = v89 - v90 + (4 << v95) - 16;
          v97 = (__clz(v96) ^ 0x1F) - 1;
          v98 = ((v96 >> v97) & 1 | 2) << v97;
          v89 = ((v96 & ~(-1 << v95)) + v91 + ((((v96 >> v97) & 1 | (2 * (v97 - v95))) + 65534) << v95)) | ((v97 - v95) << 10);
          v93 = (v96 - v98) >> v95;
        }
        else
        {
          LODWORD(v93) = 0;
        }
        goto LABEL_134;
      }
      v105 = 4 * (v103 - v102);
      v106 = 266017486;
    }
    else
    {
      v105 = 4 * v104;
      v106 = 158663784;
    }
    v89 = (v106 >> v105) & 0xF;
    goto LABEL_125;
  }
  v123 = a9;
  v85 = a2;
LABEL_188:
  *a8 = v12 + v13 - v85;
  *a10 += (v123 - a9) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH35(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  _QWORD *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v11 = a2;
  v183 = *MEMORY[0x1E0C80C00];
  v12 = *a8;
  v13 = a2 + result;
  v14 = a2 + result - 7;
  v165 = v14;
  if (result <= 7)
    v14 = a2;
  v169 = v14;
  if (*(int *)(a5 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (a2 + 8 < v13)
  {
    v16 = a7;
    v176 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v167 = *(_QWORD *)(a5 + 16);
    v166 = *(_QWORD *)(a5 + 96);
    v18 = v15 + a2;
    v172 = v13;
    v168 = v15;
    v164 = 4 * v15;
    v19 = *(_QWORD *)(a6 + 88);
    v20 = a9;
    while (1)
    {
      v21 = v13 - v11;
      if (v11 >= v176)
        v22 = v176;
      else
        v22 = v11;
      v23 = v11 & a4;
      v24 = (_QWORD *)(a3 + (v11 & a4));
      v25 = *(unsigned __int8 *)v24;
      v26 = *v16;
      v171 = v20;
      v178 = v18;
      v180 = v12;
      if (v11 < v26)
        goto LABEL_29;
      v27 = (unsigned __int8 *)(a3 + (a4 & (v11 - v26)));
      if (v25 != *v27)
        goto LABEL_29;
      if (v21 < 8)
      {
        v32 = (unsigned __int8 *)(a3 + (a4 & (v11 - v26)));
        v31 = (unsigned __int8 *)(a3 + (v11 & a4));
        v29 = v13 - v11;
        if (v21)
        {
LABEL_20:
          v33 = &v32[v29];
          while (*v32 == *v31)
          {
            ++v31;
            ++v32;
            if (!--v29)
            {
              v32 = v33;
              break;
            }
          }
        }
      }
      else
      {
        v28 = 0;
        v29 = v13 - v11;
        do
        {
          v30 = *(_QWORD *)&v27[v28 * 8] ^ v24[v28];
          if (v30)
          {
            v34 = v28 * 8 + (__clz(__rbit64(v30)) >> 3);
            goto LABEL_26;
          }
          v29 -= 8;
          ++v28;
        }
        while (v29 > 7);
        v31 = (unsigned __int8 *)&v24[v28];
        v32 = &v27[v28 * 8];
        if (v29)
          goto LABEL_20;
      }
      v34 = v32 - v27;
LABEL_26:
      if (v34 >= 4 && (v35 = 135 * v34 + 1935, v35 >= 0x7E5))
      {
        v36 = *v16;
        v25 = *(unsigned __int8 *)(a3 + v34 + v23);
      }
      else
      {
LABEL_29:
        v36 = 0;
        v34 = 0;
        v35 = 2020;
      }
      v37 = 0;
      v181 = (unint64_t)(0x7BD3579BD3000000 * *v24) >> 48;
      v182 = (unsigned __int16)(v181 + 8);
      v38 = 1;
      do
      {
        v39 = v38;
        result = *(unsigned int *)(v19 + 4 * *(&v181 + v37));
        v40 = v11 - result;
        if (v25 == *(unsigned __int8 *)(a3 + (result & a4) + v34) && v11 != result && v40 <= v22)
        {
          v41 = result & a4;
          result = a3 + (result & a4);
          if (v21 < 8)
          {
            v48 = (unsigned __int8 *)(a3 + v41);
            v47 = (unsigned __int8 *)(a3 + (v11 & a4));
            v45 = v13 - v11;
            if (v21)
            {
LABEL_45:
              v49 = &v48[v45];
              while (*v48 == *v47)
              {
                ++v47;
                ++v48;
                if (!--v45)
                {
                  v48 = v49;
                  break;
                }
              }
            }
          }
          else
          {
            v44 = 0;
            v45 = v13 - v11;
            do
            {
              v46 = *(_QWORD *)(result + v44 * 8) ^ v24[v44];
              if (v46)
              {
                v50 = v44 * 8 + (__clz(__rbit64(v46)) >> 3);
                goto LABEL_51;
              }
              v45 -= 8;
              ++v44;
            }
            while (v45 > 7);
            v47 = (unsigned __int8 *)&v24[v44];
            v48 = (unsigned __int8 *)(result + v44 * 8);
            if (v45)
              goto LABEL_45;
          }
          v50 = (unint64_t)&v48[-result];
LABEL_51:
          if (v50 >= 4)
          {
            result = 135 * v50 - 30 * (__clz(v40) ^ 0x1F) + 1920;
            if (v35 < result)
            {
              v25 = *(unsigned __int8 *)(a3 + v50 + v23);
              v36 = v40;
              v35 = result;
              v34 = v50;
            }
          }
        }
        v38 = 0;
        v37 = 1;
      }
      while ((v39 & 1) != 0);
      *(_DWORD *)(v19 + 4 * *(unint64_t *)((char *)&v181 + (v11 & 8))) = v11;
      if ((v11 & 3) != 0)
      {
        v51 = v36;
      }
      else
      {
        v51 = v36;
        if (v21 >= 0x20)
        {
          v52 = *(_QWORD *)(a6 + 112);
          if (v52 <= v11)
          {
            v53 = *(_DWORD *)(a6 + 124);
            v54 = *(_DWORD *)(a6 + 128);
            v55 = *(_DWORD *)(a6 + 96);
            do
            {
              v56 = *(unsigned __int8 *)(a3 + (v52 & a4));
              v57 = *(unsigned __int8 *)(a3 + ((v52 + 32) & a4));
              if ((v55 & 0x3F000000) == 0)
              {
                result = v55 & 0x3FFFFFFF;
                v58 = *(_QWORD *)(a6 + 104);
                v59 = *(unsigned int *)(v58 + 4 * result);
                *(_DWORD *)(v58 + 4 * result) = v52;
                if (v52 == v11 && (_DWORD)v59 != -1)
                {
                  result = (v11 - v59);
                  if (v22 >= result)
                  {
                    v60 = 0;
                    v61 = 0;
                    v62 = a3 + (v59 & a4);
                    do
                    {
                      v63 = *(_QWORD *)(v62 + v61) ^ v24[v61 / 8];
                      if (v63)
                      {
                        v69 = v61 + (__clz(__rbit64(v63)) >> 3);
                        goto LABEL_73;
                      }
                      v61 += 8;
                      v60 -= 8;
                      v64 = v21 + v60;
                    }
                    while (v21 + v60 > 7);
                    v65 = (unsigned __int8 *)(v62 + v61);
                    v66 = v21 - v61;
                    if (v21 != v61)
                    {
                      v67 = (unsigned __int8 *)&v24[v61 / 8];
                      v68 = &v65[v66];
                      while (*v65 == *v67)
                      {
                        ++v67;
                        ++v65;
                        if (!--v64)
                        {
                          v65 = v68;
                          break;
                        }
                      }
                    }
                    v69 = (unint64_t)&v65[-v62];
LABEL_73:
                    v70 = 135 * v69 - 30 * (__clz(result) ^ 0x1F) + 1920;
                    if (v70 > v35)
                    {
                      v71 = v69;
                    }
                    else
                    {
                      result = v51;
                      v70 = v35;
                      v71 = v34;
                    }
                    v72 = v69 >= 4 && v69 > v34;
                    if (v72)
                      v51 = result;
                    if (v72)
                      v35 = v70;
                    if (v72)
                      v34 = v71;
                  }
                }
              }
              v55 = v57 + v53 * v55 + v54 * ~v56 + 1;
              v52 += 4;
            }
            while (v52 <= v11);
            *(_DWORD *)(a6 + 96) = v55;
          }
          *(_QWORD *)(a6 + 112) = v11 + 4;
        }
      }
      if (v35 < 0x7E5)
      {
        v18 = v178;
        v12 = v180 + 1;
        v132 = v11 + 1;
        v20 = v171;
        if (v11 + 1 > v178)
        {
          if (v132 <= v178 + v164)
          {
            v148 = v11 + 9;
            if (v148 >= v165)
              v148 = v165;
            while (v132 < v148)
            {
              *(_DWORD *)(v19
                        + 4
                        * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v132 & a4))) >> 48)
                                           + (v132 & 8))) = v132;
              v12 += 2;
              v132 += 2;
            }
          }
          else
          {
            v133 = v11 + 17;
            if (v133 >= v165)
              v133 = v165;
            while (v132 < v133)
            {
              *(_DWORD *)(v19
                        + 4
                        * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v132 & a4))) >> 48)
                                           + (v132 & 8))) = v132;
              v12 += 4;
              v132 += 4;
            }
          }
        }
        goto LABEL_255;
      }
      v179 = v35;
      v73 = 0;
      v174 = v51;
      v175 = *v16;
      v74 = v34;
      while (1)
      {
        v177 = v73;
        v75 = v21 - 1;
        v173 = v74;
        v76 = v74 - 1;
        if (v74 - 1 >= v21 - 1)
          v76 = v21 - 1;
        v77 = *(int *)(a5 + 4) >= 5 ? 0 : v76;
        v78 = v11 + 1;
        v79 = v11 + 1 < v176 ? v11 + 1 : v176;
        v80 = v78 & a4;
        v81 = *(unsigned __int8 *)(a3 + v77 + (v78 & a4));
        v82 = (_QWORD *)(a3 + (v78 & a4));
        if (v78 < v175)
          goto LABEL_120;
        v83 = a4 & (v78 - v175);
        if (v81 != *(unsigned __int8 *)(a3 + v83 + v77))
          goto LABEL_120;
        v84 = (_QWORD *)(a3 + v83);
        if (v75 < 8)
        {
          v87 = v84;
          v86 = (_QWORD *)(a3 + (v78 & a4));
          v89 = v21 - 1;
          if (v21 != 1)
          {
LABEL_111:
            v90 = (_QWORD *)((char *)v87 + v89);
            while (*(unsigned __int8 *)v87 == *(unsigned __int8 *)v86)
            {
              v86 = (_QWORD *)((char *)v86 + 1);
              v87 = (_QWORD *)((char *)v87 + 1);
              if (!--v89)
              {
                v87 = v90;
                break;
              }
            }
          }
        }
        else
        {
          v85 = 0;
          v86 = (_QWORD *)(a3 + (v78 & a4));
          v87 = v84;
          do
          {
            v88 = *v87 ^ *v86;
            if (v88)
            {
              v91 = (__clz(__rbit64(v88)) >> 3) - v85;
              goto LABEL_117;
            }
            ++v87;
            ++v86;
            v85 -= 8;
            v89 = v21 + v85 - 1;
          }
          while (v89 > 7);
          if (v21 + v85 != 1)
            goto LABEL_111;
        }
        v91 = (char *)v87 - (char *)v84;
LABEL_117:
        if (v91 >= 4 && (v92 = 135 * v91 + 1935, v92 >= 0x7E5))
        {
          v81 = *(unsigned __int8 *)(a3 + v91 + v80);
          v77 = v91;
          v93 = v175;
        }
        else
        {
LABEL_120:
          v93 = 0;
          v92 = 2020;
        }
        v94 = 0;
        v181 = (unint64_t)(0x7BD3579BD3000000 * *v82) >> 48;
        v182 = (unsigned __int16)(v181 + 8);
        v95 = 1;
        do
        {
          v96 = v95;
          v97 = *(unsigned int *)(v19 + 4 * *(&v181 + v94));
          v98 = v78 - v97;
          result = *(unsigned __int8 *)(a3 + (v97 & a4) + v77);
          if (v81 == (_DWORD)result && v78 != v97 && v98 <= v79)
          {
            v99 = v97 & a4;
            result = a3 + (v97 & a4);
            if (v75 < 8)
            {
              v104 = (_QWORD *)(a3 + v99);
              v103 = (_QWORD *)(a3 + (v78 & a4));
              v106 = v21 - 1;
              if (v21 != 1)
              {
LABEL_136:
                v107 = (_QWORD *)((char *)v104 + v106);
                while (*(unsigned __int8 *)v104 == *(unsigned __int8 *)v103)
                {
                  v103 = (_QWORD *)((char *)v103 + 1);
                  v104 = (_QWORD *)((char *)v104 + 1);
                  if (!--v106)
                  {
                    v104 = v107;
                    break;
                  }
                }
              }
            }
            else
            {
              v102 = 0;
              v103 = (_QWORD *)(a3 + (v78 & a4));
              v104 = (_QWORD *)(a3 + v99);
              do
              {
                v105 = *v104 ^ *v103;
                if (v105)
                {
                  v108 = (__clz(__rbit64(v105)) >> 3) - v102;
                  goto LABEL_142;
                }
                ++v104;
                ++v103;
                v102 -= 8;
                v106 = v21 + v102 - 1;
              }
              while (v106 > 7);
              if (v21 + v102 != 1)
                goto LABEL_136;
            }
            v108 = (unint64_t)v104 - result;
LABEL_142:
            if (v108 >= 4)
            {
              v109 = __clz(v98) ^ 0x1F;
              result = 32 * v109;
              v110 = 135 * v108 - 30 * v109 + 1920;
              if (v92 < v110)
              {
                v81 = *(unsigned __int8 *)(a3 + v108 + v80);
                v77 = v108;
                v93 = v98;
                v92 = v110;
              }
            }
          }
          v95 = 0;
          v94 = 1;
        }
        while ((v96 & 1) != 0);
        *(_DWORD *)(v19 + 4 * *(unint64_t *)((char *)&v181 + (v78 & 8))) = v78;
        if (v75 >= 0x20 && (v78 & 3) == 0)
        {
          v111 = *(_QWORD *)(a6 + 112);
          if (v111 <= v78)
          {
            v112 = *(_DWORD *)(a6 + 124);
            v113 = *(_DWORD *)(a6 + 128);
            v114 = *(_DWORD *)(a6 + 96);
            do
            {
              v115 = *(unsigned __int8 *)(a3 + (v111 & a4));
              v116 = *(unsigned __int8 *)(a3 + ((v111 + 32) & a4));
              if ((v114 & 0x3F000000) == 0)
              {
                result = *(_QWORD *)(a6 + 104);
                v117 = *(unsigned int *)(result + 4 * (v114 & 0x3FFFFFFF));
                *(_DWORD *)(result + 4 * (v114 & 0x3FFFFFFF)) = v111;
                if (v111 == v78 && (_DWORD)v117 != -1)
                {
                  result = (v78 - v117);
                  if (v79 >= result)
                  {
                    v118 = 0;
                    v119 = 0;
                    v120 = a3 + (v117 & a4);
                    do
                    {
                      v121 = *(_QWORD *)(v120 + v119) ^ v82[v119 / 8];
                      if (v121)
                      {
                        v127 = v119 + (__clz(__rbit64(v121)) >> 3);
                        goto LABEL_164;
                      }
                      v119 += 8;
                      v118 -= 8;
                      v122 = v21 + v118 - 1;
                    }
                    while (v122 > 7);
                    v123 = (unsigned __int8 *)(v120 + v119);
                    if (v119 + 1 != v21)
                    {
                      v124 = v21 - v119 + 7;
                      v125 = (unsigned __int8 *)&v82[v119 / 8];
                      v126 = &v123[v124 - 8];
                      while (*v123 == *v125)
                      {
                        ++v125;
                        ++v123;
                        if (!--v122)
                        {
                          v123 = v126;
                          break;
                        }
                      }
                    }
                    v127 = (unint64_t)&v123[-v120];
LABEL_164:
                    v128 = 135 * v127 - 30 * (__clz(result) ^ 0x1F) + 1920;
                    if (v128 > v92)
                      v129 = v127;
                    else
                      v129 = v77;
                    if (v128 <= v92)
                    {
                      result = v93;
                      v128 = v92;
                    }
                    v130 = v127 >= 4 && v127 > v77;
                    if (v130)
                      v77 = v129;
                    if (v130)
                      v93 = result;
                    if (v130)
                      v92 = v128;
                  }
                }
              }
              v114 = v116 + v112 * v114 + v113 * ~v115 + 1;
              v111 += 4;
            }
            while (v111 <= v78);
            *(_DWORD *)(a6 + 96) = v114;
          }
          *(_QWORD *)(a6 + 112) = v11 + 5;
        }
        if (v92 < v179 + 175)
          break;
        ++v180;
        if (v177 <= 2)
        {
          v131 = v11 + 9;
          v73 = v177 + 1;
          v174 = v93;
          v179 = v92;
          v74 = v77;
          --v21;
          ++v11;
          if (v131 < v172)
            continue;
        }
        goto LABEL_195;
      }
      v77 = v173;
      v93 = v174;
      v78 = v11;
LABEL_195:
      v134 = v78 + v167;
      if (v78 + v167 >= v176)
        v134 = v176;
      v135 = v134 + v166;
      v136 = v180;
      if (v93 > v134 + v166)
        goto LABEL_198;
      v141 = *a7;
      if (v93 != v141)
        break;
      LOWORD(v137) = 0;
      LODWORD(v140) = 0;
      *(_DWORD *)v171 = v180;
      *(_DWORD *)(v171 + 4) = v77;
LABEL_207:
      *(_WORD *)(v171 + 14) = v137;
      *(_DWORD *)(v171 + 8) = v140;
      if (v136 > 5)
      {
        if (v136 > 0x81)
        {
          if (v136 > 0x841)
          {
            if (v136 >> 1 >= 0xC21)
            {
              if (v136 < 0x5842)
                LOWORD(v146) = 22;
              else
                LOWORD(v146) = 23;
            }
            else
            {
              LOWORD(v146) = 21;
            }
          }
          else
          {
            v146 = (__clz(v136 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v147 = (__clz(v136 - 2) ^ 0x1F) - 1;
          v146 = ((v136 - 2) >> v147) + 2 * v147 + 2;
        }
      }
      else
      {
        LOWORD(v146) = v136;
      }
      v154 = (unint64_t)v77 >> 1;
      if (v154 > 4)
      {
        if (v154 > 0x42)
        {
          if (v154 > 0x422)
            LOWORD(v155) = 23;
          else
            v155 = (__clz(v77 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v156 = (int)v77 - 6;
          v157 = (__clz(v156) ^ 0x1F) - 1;
          v155 = (v156 >> v157) + 2 * v157 + 4;
        }
      }
      else
      {
        LOWORD(v155) = v77 - 2;
      }
      v158 = v155 & 7 | (8 * (v146 & 7));
      if ((v137 & 0x3FF) != 0 || (unsigned __int16)v146 > 7u || (unsigned __int16)v155 > 0xFu)
      {
        v160 = 3 * ((unsigned __int16)v146 >> 3) + ((unsigned __int16)(v155 & 0xFFF8) >> 3);
        v159 = ((((0x520D40u >> (2 * v160)) & 0xC0) + (v160 << 6)) | v158) + 64;
      }
      else
      {
        LOWORD(v159) = v158 | 0x40;
        if ((v155 & 0xFFF8) == 0)
          LOWORD(v159) = v155 & 7 | (8 * (v146 & 7));
      }
      *(_WORD *)(v171 + 12) = v159;
      *a11 += v136;
      v161 = v78 + 2;
      v132 = v78 + v77;
      v162 = v169;
      if (v78 + v77 < v169)
        v162 = v78 + v77;
      if (v93 < v77 >> 2)
      {
        if (v161 <= v132 - 4 * v93)
          v161 = v132 - 4 * v93;
        if (v162 < v161)
          v161 = v162;
      }
      v18 = v168 + 2 * v77 + v78;
      v20 = v171 + 16;
      if (v161 >= v162)
      {
        v12 = 0;
        v16 = a7;
        v13 = v172;
      }
      else
      {
        v16 = a7;
        v13 = v172;
        do
        {
          *(_DWORD *)(v19
                    + 4
                    * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a3 + (v161 & a4))) >> 48)
                                       + (v161 & 8))) = v161;
          ++v161;
        }
        while (v162 != v161);
        v12 = 0;
      }
LABEL_255:
      v11 = v132;
      if (v132 + 8 >= v13)
        goto LABEL_262;
    }
    v149 = a7[1];
    if (v93 == v149)
    {
      v137 = 1;
      goto LABEL_199;
    }
    v150 = v93 + 3;
    v151 = v93 + 3 - v141;
    if (v151 > 6)
    {
      if (v150 - v149 > 6)
      {
        if (v93 == a7[2])
        {
          v137 = 2;
        }
        else if (v93 == a7[3])
        {
          v137 = 3;
        }
        else
        {
LABEL_198:
          v137 = v93 + 15;
        }
LABEL_199:
        if (v93 <= v135 && v137)
        {
          a7[3] = a7[2];
          *(_QWORD *)(a7 + 1) = *(_QWORD *)a7;
          *a7 = v93;
        }
        *(_DWORD *)v171 = v180;
        *(_DWORD *)(v171 + 4) = v77;
        v138 = *(unsigned int *)(a5 + 60);
        v139 = v138 + 16;
        if (v138 + 16 <= v137)
        {
          v142 = *(unsigned int *)(a5 + 56);
          v143 = v137 - v138 + (4 << v142) - 16;
          v144 = (__clz(v143) ^ 0x1F) - 1;
          v145 = ((v143 >> v144) & 1 | 2) << v144;
          v136 = v180;
          v137 = ((v143 & ~(-1 << v142))
                + v139
                + ((((v143 >> v144) & 1 | (2 * (v144 - v142))) + 65534) << v142)) | ((v144 - v142) << 10);
          v140 = (v143 - v145) >> v142;
        }
        else
        {
          LODWORD(v140) = 0;
        }
        goto LABEL_207;
      }
      v152 = 4 * (v150 - v149);
      v153 = 266017486;
    }
    else
    {
      v152 = 4 * v151;
      v153 = 158663784;
    }
    v137 = (v153 >> v152) & 0xF;
    goto LABEL_199;
  }
  v20 = a9;
  v132 = a2;
LABEL_262:
  *a8 = v12 + v13 - v132;
  *a10 += (v20 - a9) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH55(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  int64x2_t v93;
  int8x16_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char v153;
  unsigned int v154;
  unint64_t v155;
  unsigned int v156;
  unint64_t v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v174;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int8x16_t v180;
  int8x16_t v181;
  uint64_t v182;

  v11 = a2;
  v182 = *MEMORY[0x1E0C80C00];
  v179 = *a8;
  v12 = a2 + result;
  v13 = a2 + result - 7;
  v166 = v13;
  if (result <= 7)
    v13 = a2;
  v170 = v13;
  if (*(int *)(a5 + 4) >= 9)
    v14 = 512;
  else
    v14 = 64;
  if (a2 + 8 < v12)
  {
    v174 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v168 = *(_QWORD *)(a5 + 16);
    v167 = *(_QWORD *)(a5 + 96);
    v15 = v14 + a2;
    v16 = *(_QWORD *)(a6 + 88);
    v165 = 4 * v14;
    v17 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
    v171 = a9;
    v172 = a2 + result;
    v169 = v14;
    while (1)
    {
      v18 = v12 - v11;
      v19 = v11 >= v174 ? v174 : v11;
      v20 = v11 & a4;
      v21 = (_QWORD *)(a3 + (v11 & a4));
      v22 = *(unsigned __int8 *)v21;
      v23 = *a7;
      if (v11 < v23)
        goto LABEL_29;
      v24 = (unsigned __int8 *)(a3 + (a4 & (v11 - v23)));
      if (v22 != *v24)
        goto LABEL_29;
      v176 = *a7;
      if (v18 < 8)
      {
        v29 = (unsigned __int8 *)(a3 + (a4 & (v11 - v23)));
        v28 = (unsigned __int8 *)(a3 + (v11 & a4));
        v26 = v12 - v11;
        if (v18)
        {
LABEL_20:
          v30 = &v29[v26];
          while (*v29 == *v28)
          {
            ++v28;
            ++v29;
            if (!--v26)
            {
              v29 = v30;
              break;
            }
          }
        }
      }
      else
      {
        v25 = 0;
        v26 = v12 - v11;
        do
        {
          v27 = *(_QWORD *)&v24[v25 * 8] ^ v21[v25];
          if (v27)
          {
            v31 = v25 * 8 + (__clz(__rbit64(v27)) >> 3);
            goto LABEL_26;
          }
          v26 -= 8;
          ++v25;
        }
        while (v26 > 7);
        v28 = (unsigned __int8 *)&v21[v25];
        v29 = &v24[v25 * 8];
        if (v26)
          goto LABEL_20;
      }
      v31 = v29 - v24;
LABEL_26:
      if (v31 >= 4 && (v32 = 135 * v31 + 1935, v32 >= 0x7E5))
      {
        v22 = *(unsigned __int8 *)(a3 + v31 + v20);
      }
      else
      {
LABEL_29:
        v176 = 0;
        v31 = 0;
        v32 = 2020;
      }
      v33 = 0;
      v34 = vdupq_n_s64((0xE35A7BD3579BD300 * *v21) >> 44);
      v180 = vandq_s8((int8x16_t)vaddq_s64(v34, (int64x2_t)xmmword_19D02CCD0), v17);
      v181 = vandq_s8((int8x16_t)vaddq_s64(v34, (int64x2_t)xmmword_19D02CCE0), v17);
      do
      {
        v35 = *(unsigned int *)(v16 + 4 * v180.i64[v33]);
        v36 = v11 - v35;
        result = *(unsigned __int8 *)(a3 + (v35 & a4) + v31);
        v38 = v22 != (_DWORD)result || v11 == v35 || v36 > v19;
        if (!v38)
        {
          result = a3 + (v35 & a4);
          if (v18 < 8)
          {
            v43 = (unsigned __int8 *)(a3 + (v35 & a4));
            v42 = (unsigned __int8 *)(a3 + (v11 & a4));
            v40 = v12 - v11;
            if (v18)
            {
LABEL_45:
              v44 = &v43[v40];
              while (*v43 == *v42)
              {
                ++v42;
                ++v43;
                if (!--v40)
                {
                  v43 = v44;
                  break;
                }
              }
            }
          }
          else
          {
            v39 = 0;
            v40 = v12 - v11;
            do
            {
              v41 = *(_QWORD *)(result + v39 * 8) ^ v21[v39];
              if (v41)
              {
                v45 = v39 * 8 + (__clz(__rbit64(v41)) >> 3);
                goto LABEL_51;
              }
              v40 -= 8;
              ++v39;
            }
            while (v40 > 7);
            v42 = (unsigned __int8 *)&v21[v39];
            v43 = (unsigned __int8 *)(result + v39 * 8);
            if (v40)
              goto LABEL_45;
          }
          v45 = (unint64_t)&v43[-result];
LABEL_51:
          if (v45 >= 4)
          {
            v46 = __clz(v36) ^ 0x1F;
            result = 32 * v46;
            v47 = 135 * v45 - 30 * v46 + 1920;
            if (v32 < v47)
            {
              v22 = *(unsigned __int8 *)(a3 + v45 + v20);
              v176 = v36;
              v32 = v47;
              v31 = v45;
            }
          }
        }
        ++v33;
      }
      while (v33 != 4);
      *(_DWORD *)(v16 + 4 * *(uint64_t *)((char *)v180.i64 + (v11 & 0x18))) = v11;
      if ((v11 & 3) == 0 && v18 >= 0x20)
      {
        v48 = *(_QWORD *)(a6 + 112);
        if (v48 <= v11)
        {
          v49 = *(_DWORD *)(a6 + 124);
          v50 = *(_DWORD *)(a6 + 128);
          v51 = *(_DWORD *)(a6 + 96);
          do
          {
            v52 = *(unsigned __int8 *)(a3 + (v48 & a4));
            v53 = *(unsigned __int8 *)(a3 + ((v48 + 32) & a4));
            if ((v51 & 0x3F000000) == 0)
            {
              v54 = *(_QWORD *)(a6 + 104);
              v55 = *(unsigned int *)(v54 + 4 * (v51 & 0x3FFFFFFF));
              *(_DWORD *)(v54 + 4 * (v51 & 0x3FFFFFFF)) = v48;
              if (v48 == v11 && (_DWORD)v55 != -1)
              {
                result = (v11 - v55);
                if (v19 >= result)
                {
                  v56 = v31;
                  v57 = 0;
                  v58 = 0;
                  v59 = a3 + (v55 & a4);
                  do
                  {
                    v60 = *(_QWORD *)(v59 + v58) ^ v21[v58 / 8];
                    if (v60)
                    {
                      v66 = v58 + (__clz(__rbit64(v60)) >> 3);
                      goto LABEL_74;
                    }
                    v58 += 8;
                    v57 -= 8;
                    v61 = v18 + v57;
                  }
                  while (v18 + v57 > 7);
                  v62 = (unsigned __int8 *)(v59 + v58);
                  v63 = v18 - v58;
                  if (v18 != v58)
                  {
                    v64 = (unsigned __int8 *)&v21[v58 / 8];
                    v65 = &v62[v63];
                    while (*v62 == *v64)
                    {
                      ++v64;
                      ++v62;
                      if (!--v61)
                      {
                        v62 = v65;
                        break;
                      }
                    }
                    v12 = v172;
                  }
                  v66 = (unint64_t)&v62[-v59];
LABEL_74:
                  v31 = v56;
                  v67 = 135 * v66 - 30 * (__clz(result) ^ 0x1F) + 1920;
                  v38 = v67 > v32;
                  v68 = v32;
                  v69 = v176;
                  if (v38)
                  {
                    v70 = v66;
                  }
                  else
                  {
                    result = v176;
                    v67 = v68;
                    v70 = v31;
                  }
                  v71 = v66 >= 4 && v66 > v31;
                  if (v71)
                    v69 = result;
                  v176 = v69;
                  if (v71)
                    v32 = v67;
                  else
                    v32 = v68;
                  if (v71)
                    v31 = v70;
                }
              }
            }
            v51 = v53 + v49 * v51 + v50 * ~v52 + 1;
            v48 += 4;
          }
          while (v48 <= v11);
          *(_DWORD *)(a6 + 96) = v51;
        }
        *(_QWORD *)(a6 + 112) = v11 + 4;
      }
      if (v32 >= 0x7E5)
        break;
      ++v179;
      v132 = v11 + 1;
      if (v11 + 1 > v15)
      {
        if (v132 <= v15 + v165)
        {
          v149 = v11 + 9;
          if (v11 + 9 >= v166)
            v149 = v166;
          if (v132 >= v149)
            goto LABEL_260;
          v134 = v179;
          do
          {
            *(_DWORD *)(v16
                      + 4
                      * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v132 & a4))) >> 32) >> 12)
                        + (v132 & 0x18)) & 0xFFFFF)) = v132;
            v134 += 2;
            v132 += 2;
          }
          while (v132 < v149);
        }
        else
        {
          v133 = v11 + 17;
          if (v11 + 17 >= v166)
            v133 = v166;
          if (v132 >= v133)
            goto LABEL_260;
          v134 = v179;
          do
          {
            *(_DWORD *)(v16
                      + 4
                      * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v132 & a4))) >> 32) >> 12)
                        + (v132 & 0x18)) & 0xFFFFF)) = v132;
            v134 += 4;
            v132 += 4;
          }
          while (v132 < v133);
        }
        v179 = v134;
      }
LABEL_260:
      v11 = v132;
      if (v132 + 8 >= v12)
        goto LABEL_267;
    }
    v72 = 0;
    while (1)
    {
      v73 = v18 - 1;
      v74 = v31 - 1;
      if (v31 - 1 >= v18 - 1)
        v74 = v18 - 1;
      v75 = *(int *)(a5 + 4) >= 5 ? 0 : v74;
      v76 = v11 + 1;
      v77 = v11 + 1 < v174 ? v11 + 1 : v174;
      v78 = v76 & a4;
      v79 = *(unsigned __int8 *)(a3 + v75 + (v76 & a4));
      v80 = (_QWORD *)(a3 + (v76 & a4));
      v81 = *a7;
      v177 = v31;
      v178 = v32;
      if (v76 < v81)
      {
        v81 = 0;
        v89 = 2020;
      }
      else
      {
        v82 = a4 & (v76 - v81);
        if (v79 != *(unsigned __int8 *)(a3 + v82 + v75))
          goto LABEL_121;
        v83 = (_QWORD *)(a3 + v82);
        if (v73 < 8)
        {
          v86 = v83;
          v85 = (_QWORD *)(a3 + (v76 & a4));
          v88 = v18 - 1;
          if (v18 != 1)
          {
LABEL_112:
            v90 = (_QWORD *)((char *)v86 + v88);
            while (*(unsigned __int8 *)v86 == *(unsigned __int8 *)v85)
            {
              v85 = (_QWORD *)((char *)v85 + 1);
              v86 = (_QWORD *)((char *)v86 + 1);
              if (!--v88)
              {
                v86 = v90;
                break;
              }
            }
          }
        }
        else
        {
          v84 = 0;
          v85 = (_QWORD *)(a3 + (v76 & a4));
          v86 = v83;
          do
          {
            v87 = *v86 ^ *v85;
            if (v87)
            {
              v91 = (__clz(__rbit64(v87)) >> 3) - v84;
              goto LABEL_118;
            }
            ++v86;
            ++v85;
            v84 -= 8;
            v88 = v18 + v84 - 1;
          }
          while (v88 > 7);
          if (v18 + v84 != 1)
            goto LABEL_112;
        }
        v91 = (char *)v86 - (char *)v83;
LABEL_118:
        if (v91 >= 4 && (v89 = 135 * v91 + 1935, v89 >= 0x7E5))
        {
          v79 = *(unsigned __int8 *)(a3 + v91 + v78);
          v75 = v91;
        }
        else
        {
LABEL_121:
          v81 = 0;
          v89 = 2020;
        }
      }
      v92 = 0;
      v93 = vdupq_n_s64((0xE35A7BD3579BD300 * *v80) >> 44);
      v94 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
      v180 = vandq_s8((int8x16_t)vaddq_s64(v93, (int64x2_t)xmmword_19D02CCD0), v94);
      v181 = vandq_s8((int8x16_t)vaddq_s64(v93, (int64x2_t)xmmword_19D02CCE0), v94);
      do
      {
        v95 = *(unsigned int *)(v16 + 4 * v180.i64[v92]);
        v96 = v76 - v95;
        if (v79 == *(unsigned __int8 *)(a3 + (v95 & a4) + v75) && v76 != v95 && v96 <= v77)
        {
          v97 = v95 & a4;
          v100 = a3 + (v95 & a4);
          if (v73 < 8)
          {
            v103 = (_QWORD *)(a3 + v97);
            v102 = (_QWORD *)(a3 + (v76 & a4));
            v105 = v18 - 1;
            if (v18 != 1)
            {
LABEL_137:
              v106 = (_QWORD *)((char *)v103 + v105);
              while (*(unsigned __int8 *)v103 == *(unsigned __int8 *)v102)
              {
                v102 = (_QWORD *)((char *)v102 + 1);
                v103 = (_QWORD *)((char *)v103 + 1);
                if (!--v105)
                {
                  v103 = v106;
                  break;
                }
              }
            }
          }
          else
          {
            v101 = 0;
            v102 = (_QWORD *)(a3 + (v76 & a4));
            v103 = (_QWORD *)(a3 + v97);
            do
            {
              v104 = *v103 ^ *v102;
              if (v104)
              {
                v107 = (__clz(__rbit64(v104)) >> 3) - v101;
                goto LABEL_143;
              }
              ++v103;
              ++v102;
              v101 -= 8;
              v105 = v18 + v101 - 1;
            }
            while (v105 > 7);
            if (v18 + v101 != 1)
              goto LABEL_137;
          }
          v107 = (unint64_t)v103 - v100;
LABEL_143:
          if (v107 >= 4)
          {
            v108 = 135 * v107 - 30 * (__clz(v96) ^ 0x1F) + 1920;
            if (v89 < v108)
            {
              v79 = *(unsigned __int8 *)(a3 + v107 + v78);
              v75 = v107;
              v81 = v96;
              v89 = v108;
            }
          }
        }
        ++v92;
      }
      while (v92 != 4);
      *(_DWORD *)(v16 + 4 * *(uint64_t *)((char *)v180.i64 + (v76 & 0x18))) = v76;
      if (v73 >= 0x20 && (v76 & 3) == 0)
      {
        v109 = *(_QWORD *)(a6 + 112);
        if (v109 <= v76)
        {
          v110 = *(_DWORD *)(a6 + 124);
          v111 = *(_DWORD *)(a6 + 128);
          v112 = *(_DWORD *)(a6 + 96);
          do
          {
            v113 = *(unsigned __int8 *)(a3 + (v109 & a4));
            v114 = *(unsigned __int8 *)(a3 + ((v109 + 32) & a4));
            if ((v112 & 0x3F000000) == 0)
            {
              v115 = *(_QWORD *)(a6 + 104);
              v116 = *(unsigned int *)(v115 + 4 * (v112 & 0x3FFFFFFF));
              *(_DWORD *)(v115 + 4 * (v112 & 0x3FFFFFFF)) = v109;
              if (v109 == v76 && (_DWORD)v116 != -1)
              {
                v117 = (v76 - v116);
                if (v77 >= v117)
                {
                  v118 = 0;
                  v119 = 0;
                  v120 = a3 + (v116 & a4);
                  do
                  {
                    v121 = *(_QWORD *)(v120 + v119) ^ v80[v119 / 8];
                    if (v121)
                    {
                      v127 = v119 + (__clz(__rbit64(v121)) >> 3);
                      goto LABEL_165;
                    }
                    v119 += 8;
                    v118 -= 8;
                    v122 = v18 + v118 - 1;
                  }
                  while (v122 > 7);
                  v123 = (unsigned __int8 *)(v120 + v119);
                  if (v119 + 1 != v18)
                  {
                    v124 = v18 - v119 + 7;
                    v125 = (unsigned __int8 *)&v80[v119 / 8];
                    v126 = &v123[v124 - 8];
                    while (*v123 == *v125)
                    {
                      ++v125;
                      ++v123;
                      if (!--v122)
                      {
                        v123 = v126;
                        break;
                      }
                    }
                  }
                  v127 = (unint64_t)&v123[-v120];
LABEL_165:
                  v128 = 135 * v127 - 30 * (__clz(v117) ^ 0x1F) + 1920;
                  if (v128 > v89)
                    v129 = v127;
                  else
                    v129 = v75;
                  if (v128 <= v89)
                  {
                    v117 = v81;
                    v128 = v89;
                  }
                  v130 = v127 >= 4 && v127 > v75;
                  if (v130)
                    v75 = v129;
                  if (v130)
                    v81 = v117;
                  if (v130)
                    v89 = v128;
                }
              }
            }
            v112 = v114 + v110 * v112 + v111 * ~v113 + 1;
            v109 += 4;
          }
          while (v109 <= v76);
          *(_DWORD *)(a6 + 96) = v112;
        }
        *(_QWORD *)(a6 + 112) = v11 + 5;
      }
      if (v89 < v178 + 175)
        break;
      ++v179;
      if (v72 <= 2)
      {
        v131 = v11 + 9;
        ++v72;
        v176 = v81;
        v32 = v89;
        v31 = v75;
        --v18;
        ++v11;
        if (v131 < v172)
          continue;
      }
      goto LABEL_198;
    }
    v81 = v176;
    v75 = v177;
    v76 = v11;
LABEL_198:
    v135 = v76 + v168;
    if (v76 + v168 >= v174)
      v135 = v174;
    v136 = v135 + v167;
    if (v81 > v135 + v167)
      goto LABEL_201;
    v142 = *a7;
    if (v81 == v142)
    {
      LOWORD(v137) = 0;
      LODWORD(v141) = 0;
      *(_DWORD *)v171 = v179;
      *(_DWORD *)(v171 + 4) = v75;
      v140 = v169;
LABEL_210:
      *(_WORD *)(v171 + 14) = v137;
      *(_DWORD *)(v171 + 8) = v141;
      if (v179 > 5)
      {
        if (v179 > 0x81)
        {
          if (v179 > 0x841)
          {
            if (v179 >> 1 >= 0xC21)
            {
              if (v179 < 0x5842)
                LOWORD(v147) = 22;
              else
                LOWORD(v147) = 23;
            }
            else
            {
              LOWORD(v147) = 21;
            }
          }
          else
          {
            v147 = (__clz(v179 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v148 = (__clz(v179 - 2) ^ 0x1F) - 1;
          v147 = ((v179 - 2) >> v148) + 2 * v148 + 2;
        }
      }
      else
      {
        LOWORD(v147) = v179;
      }
      v155 = (unint64_t)v75 >> 1;
      if (v155 > 4)
      {
        if (v155 > 0x42)
        {
          if (v155 > 0x422)
            LOWORD(v156) = 23;
          else
            v156 = (__clz(v75 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v157 = (int)v75 - 6;
          v158 = (__clz(v157) ^ 0x1F) - 1;
          v156 = (v157 >> v158) + 2 * v158 + 4;
        }
      }
      else
      {
        LOWORD(v156) = v75 - 2;
      }
      v159 = v156 & 7 | (8 * (v147 & 7));
      if ((v137 & 0x3FF) != 0 || (unsigned __int16)v147 > 7u || (unsigned __int16)v156 > 0xFu)
      {
        v161 = 3 * ((unsigned __int16)v147 >> 3) + ((unsigned __int16)(v156 & 0xFFF8) >> 3);
        v160 = ((((0x520D40u >> (2 * v161)) & 0xC0) + (v161 << 6)) | v159) + 64;
      }
      else
      {
        LOWORD(v160) = v159 | 0x40;
        if ((v156 & 0xFFF8) == 0)
          LOWORD(v160) = v156 & 7 | (8 * (v147 & 7));
      }
      *(_WORD *)(v171 + 12) = v160;
      *a11 += v179;
      v162 = v76 + 2;
      v132 = v76 + v75;
      v163 = v170;
      if (v76 + v75 < v170)
        v163 = v76 + v75;
      if (v81 < v75 >> 2)
      {
        if (v162 <= v132 - 4 * v81)
          v162 = v132 - 4 * v81;
        if (v163 < v162)
          v162 = v163;
      }
      v15 = v140 + 2 * v75 + v76;
      result = v171 + 16;
      v171 += 16;
      if (v162 >= v163)
      {
        v179 = 0;
        v12 = v172;
      }
      else
      {
        v12 = v172;
        do
        {
          *(_DWORD *)(v16
                    + 4
                    * (((((0xE35A7BD3579BD300 * *(_QWORD *)(a3 + (v162 & a4))) >> 32) >> 12)
                      + (v162 & 0x18)) & 0xFFFFF)) = v162;
          ++v162;
        }
        while (v163 != v162);
        v179 = 0;
      }
      goto LABEL_260;
    }
    v150 = a7[1];
    if (v81 == v150)
    {
      v137 = 1;
      goto LABEL_202;
    }
    v151 = v81 + 3;
    v152 = v81 + 3 - v142;
    if (v152 > 6)
    {
      if (v151 - v150 > 6)
      {
        if (v81 == a7[2])
        {
          v137 = 2;
        }
        else
        {
          if (v81 != a7[3])
          {
LABEL_201:
            v137 = v81 + 15;
            goto LABEL_202;
          }
          v137 = 3;
        }
LABEL_202:
        if (v81 <= v136 && v137)
        {
          a7[3] = a7[2];
          *(_QWORD *)(a7 + 1) = *(_QWORD *)a7;
          *a7 = v81;
        }
        *(_DWORD *)v171 = v179;
        *(_DWORD *)(v171 + 4) = v75;
        v138 = *(unsigned int *)(a5 + 60);
        v139 = v138 + 16;
        v140 = v169;
        if (v138 + 16 <= v137)
        {
          v143 = *(unsigned int *)(a5 + 56);
          v144 = v137 - v138 + (4 << v143) - 16;
          v145 = (__clz(v144) ^ 0x1F) - 1;
          v146 = ((v144 >> v145) & 1 | 2) << v145;
          v137 = ((v144 & ~(-1 << v143))
                + v139
                + ((((v144 >> v145) & 1 | (2 * (v145 - v143))) + 65534) << v143)) | ((v145 - v143) << 10);
          v141 = (v144 - v146) >> v143;
        }
        else
        {
          LODWORD(v141) = 0;
        }
        goto LABEL_210;
      }
      v153 = 4 * (v151 - v150);
      v154 = 266017486;
    }
    else
    {
      v153 = 4 * v152;
      v154 = 158663784;
    }
    v137 = (v154 >> v153) & 0xF;
    goto LABEL_202;
  }
  v171 = a9;
  v132 = a2;
LABEL_267:
  *a8 = v179 + v12 - v132;
  *a10 += (v171 - a9) >> 4;
  return result;
}

unint64_t CreateBackwardReferencesNH65(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int32x4_t v20;
  const float *v21;
  int32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  BOOL v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  BOOL v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unint64_t v119;
  BOOL v120;
  int v121;
  int v122;
  unint64_t v123;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  uint64_t v142;
  unint64_t v143;
  BOOL v144;
  unint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  unint64_t v201;
  unint64_t v202;
  BOOL v203;
  unint64_t v204;
  int v205;
  BOOL v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  unint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  unsigned __int8 *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  BOOL v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  int v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unint64_t v231;
  int32x2_t v232;
  int v233;
  int32x4_t v234;
  int32x4_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  unint64_t v246;
  int v247;
  int v248;
  unint64_t v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  int v266;
  unint64_t v267;
  unsigned int v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 *v275;
  uint64_t v276;
  unint64_t v279;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unsigned int v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;

  v12 = a8;
  v13 = a7;
  v14 = a6;
  v284 = *(_QWORD *)(a6 + 16);
  v15 = *a9;
  v285 = a2 + result;
  v16 = a2 + result - 7;
  v269 = v16;
  if (result <= 7)
    v16 = a2;
  v270 = v16;
  v17 = *(_DWORD *)(a6 + 8);
  v18 = 512;
  if (*(int *)(a6 + 4) < 9)
    v18 = 64;
  v272 = v18;
  v271 = *(_QWORD *)(a6 + 96);
  v19 = *(_DWORD *)(a7 + 112);
  if (v19 >= 5)
  {
    v20 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v20, (int32x4_t)xmmword_19D02CCA0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v19 >= 0xB)
    {
      v21 = (const float *)(a8 + 1);
      v22 = (int32x4_t)vld1q_dup_f32(v21);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v22, (int32x4_t)xmmword_19D02CCA0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v22.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (a2 + 8 >= v285)
  {
    v273 = a10;
    v224 = a2;
    goto LABEL_407;
  }
  v23 = v272 + a2;
  v283 = (1 << v17) - 16;
  v276 = a5 + 256;
  v300 = *(_QWORD *)(a7 + 128);
  v287 = *(_QWORD *)(a7 + 136);
  v24 = *(_QWORD *)(a7 + 96);
  v274 = v271 + 1;
  v273 = a10;
  v286 = v24;
  do
  {
    v25 = v283;
    if (a2 >= v283)
      v26 = v283;
    else
      v26 = a2;
    if (a2 + v284 < v283)
      v25 = a2 + v284;
    v299 = v15;
    v295 = v25;
    if (!*(_DWORD *)(v14 + 624))
    {
      v29 = 0;
      v291 = 0;
      goto LABEL_23;
    }
    if (!a2)
    {
      v27 = 0;
LABEL_21:
      v28 = 0;
      goto LABEL_22;
    }
    v27 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
    if (a2 == 1)
      goto LABEL_21;
    v28 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_22:
    v291 = v27;
    v29 = *(unsigned __int8 *)(v14 + (*(_BYTE *)(v276 + v28) | *(_BYTE *)(a5 + v27)) + 629);
LABEL_23:
    v30 = v285 - a2;
    v31 = *(_QWORD *)(v14 + 8 * v29 + 696);
    v293 = v29;
    v294 = *(_QWORD *)(v14 + 72);
    v32 = a2 & a4;
    v33 = *(int *)(v13 + 112);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = a3 + v32;
      v39 = 2020;
      v40 = 2020;
      do
      {
        v41 = v12[v34];
        v42 = a2 - v41;
        v43 = v26 < v41 || v42 >= a2;
        v44 = v42 & a4;
        v45 = v35 + v32;
        v46 = v43 || v45 > a4;
        v47 = v44 + v35;
        v48 = v46 || v47 > a4;
        if (!v48 && *(unsigned __int8 *)(a3 + v45) == *(unsigned __int8 *)(a3 + v47))
        {
          v49 = (unsigned __int8 *)(a3 + v44);
          if (v30 < 8)
          {
            v54 = v49;
            v53 = (unsigned __int8 *)(a3 + v32);
            v51 = v285 - a2;
            if (v30)
            {
LABEL_46:
              v55 = &v54[v51];
              while (*v54 == *v53)
              {
                ++v53;
                ++v54;
                if (!--v51)
                {
                  v54 = v55;
                  break;
                }
              }
              v24 = v286;
            }
          }
          else
          {
            v50 = 0;
            v51 = v285 - a2;
            do
            {
              v52 = *(_QWORD *)&v49[v50] ^ *(_QWORD *)(v38 + v50);
              if (v52)
              {
                v56 = v50 + (__clz(__rbit64(v52)) >> 3);
                goto LABEL_53;
              }
              v51 -= 8;
              v50 += 8;
            }
            while (v51 > 7);
            v53 = (unsigned __int8 *)(v38 + v50);
            v54 = &v49[v50];
            if (v51)
              goto LABEL_46;
          }
          v56 = v54 - v49;
LABEL_53:
          if (v56 > 2 || v34 <= 1 && v56 == 2)
          {
            v57 = 135 * v56 + 1935;
            if (v39 < v57)
            {
              if (v34)
                v57 -= ((0x1CA10u >> (v34 & 0xE)) & 0xE) + 39;
              if (v39 < v57)
              {
                v37 = v12[v34];
                v40 = v57;
                v36 = v56;
                v39 = v57;
                v35 = v56;
              }
            }
          }
        }
        ++v34;
      }
      while (v34 != v33);
    }
    else
    {
      v37 = 0;
      v36 = 0;
      v35 = 0;
      v40 = 2020;
      v39 = 2020;
    }
    v58 = (unsigned __int8 *)(a3 + v32);
    v59 = *(_QWORD *)(a3 + v32);
    result = (unint64_t)(v59 * v24) >> 49;
    v60 = *(unsigned int *)(v13 + 104);
    v61 = v287 + 4 * (result << *(_DWORD *)(v13 + 108));
    v62 = *(unsigned __int16 *)(v300 + 2 * result);
    v282 = *(_QWORD *)(v13 + 88);
    if (v62 >= v282)
      v63 = v62 - v282;
    else
      v63 = 0;
    v301 = a2;
    v303 = v26;
    v289 = v37;
    v297 = v23;
    v64 = v36;
    if (v63 < v62)
    {
      v65 = v32 + a3 + 4;
      v66 = *(unsigned __int16 *)(v300 + 2 * result);
      while (1)
      {
        v67 = *(unsigned int *)(v61 + 4 * (--v66 & v60));
        v68 = a2 - v67;
        if (a2 - v67 > v26)
          goto LABEL_90;
        if (v35 + v32 <= a4)
        {
          v69 = v67 & a4;
          if (v69 + v35 <= a4
            && *(unsigned __int8 *)(a3 + v35 + v32) == *(unsigned __int8 *)(a3 + v69 + v35)
            && *(_DWORD *)(a3 + v69) == (_DWORD)v59)
          {
            break;
          }
        }
LABEL_89:
        if (v66 <= v63)
          goto LABEL_90;
      }
      v70 = v40;
      v71 = v69 + a3 + 4;
      if (v30 - 4 < 8)
      {
        v76 = (unsigned __int8 *)(v69 + a3 + 4);
        v75 = (unsigned __int8 *)(v32 + a3 + 4);
        v73 = v30 - 4;
        if (v30 == 4)
          goto LABEL_78;
LABEL_80:
        v77 = &v76[v73];
        while (*v76 == *v75)
        {
          ++v75;
          ++v76;
          if (!--v73)
          {
            v76 = v77;
            break;
          }
        }
        v14 = a6;
        v13 = a7;
      }
      else
      {
        v72 = 0;
        v73 = v30 - 4;
        do
        {
          v74 = *(_QWORD *)(v71 + v72) ^ *(_QWORD *)(v65 + v72);
          if (v74)
          {
            v78 = (unsigned __int8 *)(v72 + (__clz(__rbit64(v74)) >> 3));
            a2 = v301;
            v26 = v303;
            goto LABEL_87;
          }
          v73 -= 8;
          v72 += 8;
        }
        while (v73 > 7);
        v75 = (unsigned __int8 *)(v65 + v72);
        v76 = (unsigned __int8 *)(v71 + v72);
        if (v73)
          goto LABEL_80;
LABEL_78:
        v13 = a7;
      }
      a2 = v301;
      v26 = v303;
      v78 = &v76[-v71];
LABEL_87:
      v40 = v70;
      v79 = (unint64_t)(v78 + 4);
      v80 = 135 * v79 - 30 * (__clz(v68) ^ 0x1F) + 1920;
      if (v39 < v80)
      {
        v289 = v68;
        v40 = v80;
        v64 = v79;
        v39 = v80;
        v35 = v79;
      }
      goto LABEL_89;
    }
LABEL_90:
    *(_DWORD *)(v61 + 4 * (v60 & v62)) = a2;
    *(_WORD *)(v300 + 2 * result) = v62 + 1;
    v81 = v64;
    if (v40 == 2020)
    {
      v82 = *(_QWORD *)(v13 + 120);
      result = *(_QWORD *)(v82 + 40);
      v83 = *(_QWORD *)(v82 + 48);
      if (v83 >= result >> 7)
      {
        v292 = 0;
        v87 = ((506832829 * *(_DWORD *)v58) >> 17) & 0x7FFE;
        v88 = *(_QWORD *)(v31 + 32);
        v89 = 1;
        v90 = v64;
        v40 = 2020;
        v91 = v289;
        do
        {
          v92 = v89;
          *(_QWORD *)(v82 + 40) = ++result;
          v93 = *(unsigned __int8 *)(v88 + v87);
          if (!*(_BYTE *)(v88 + v87) || v30 < v93)
            goto LABEL_123;
          v94 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v31 + 168)
                                  + *(unsigned int *)(*(_QWORD *)v31 + 4 * *(unsigned __int8 *)(v88 + v87) + 32)
                                  + *(unsigned __int16 *)(*(_QWORD *)(v31 + 24) + 2 * v87)
                                  * (unint64_t)*(unsigned __int8 *)(v88 + v87));
          if (v93 < 8)
          {
            v99 = v40;
            v96 = *(unsigned __int8 *)(v88 + v87);
            v98 = v58;
          }
          else
          {
            v95 = 0;
            v96 = *(unsigned __int8 *)(v88 + v87);
            do
            {
              v97 = *(_QWORD *)&v58[v95] ^ *(_QWORD *)&v94[v95];
              if (v97)
              {
                v81 = v95 + (__clz(__rbit64(v97)) >> 3);
                goto LABEL_116;
              }
              v96 -= 8;
              v95 += 8;
            }
            while (v96 > 7);
            v98 = &v58[v95];
            if (!v96)
              goto LABEL_114;
            v99 = v40;
            v94 += v95;
          }
          v100 = &v98[v96];
          while (*v98 == *v94)
          {
            ++v94;
            ++v98;
            if (!--v96)
            {
              v98 = v100;
              break;
            }
          }
          v40 = v99;
          a2 = v301;
          v26 = v303;
LABEL_114:
          v81 = v98 - v58;
LABEL_116:
          v101 = v81 && v81 + *(unsigned int *)(v31 + 12) > v93;
          if (v101
            && (v84 = v274
                    + v295
                    + *(unsigned __int16 *)(*(_QWORD *)(v31 + 24) + 2 * v87)
                    + ((((*(_QWORD *)(v31 + 16) >> (6 * (v93 - v81))) & 0x3FLL)
                      + 4 * (v93 - v81)) << *(_BYTE *)(*(_QWORD *)v31 + v93)),
                v84 <= v294)
            && (v102 = __clz(v84) ^ 0x1F, 135 * v81 - 30 * v102 + 1920 >= v40))
          {
            v292 = v93 - v81;
            *(_QWORD *)(v82 + 48) = ++v83;
            v40 = 135 * v81 - 30 * v102 + 1920;
          }
          else
          {
LABEL_123:
            v84 = v91;
            v81 = v90;
          }
          v89 = 0;
          ++v87;
          v90 = v81;
          v91 = v84;
        }
        while ((v92 & 1) != 0);
        goto LABEL_95;
      }
      v292 = 0;
      v40 = 2020;
    }
    else
    {
      v292 = 0;
    }
    v84 = v289;
LABEL_95:
    if (v30 >= 0x20)
    {
      v86 = *(_QWORD *)(v13 + 160);
      if (v86 <= a2)
      {
        v103 = *(_DWORD *)(v13 + 172);
        v104 = *(_DWORD *)(v13 + 176);
        v105 = *(_DWORD *)(v13 + 144);
        v24 = v286;
        v85 = v287;
        do
        {
          v106 = *(unsigned __int8 *)(a3 + (v86 & a4));
          v107 = *(unsigned __int8 *)(a3 + ((v86 + 32) & a4));
          if ((v105 & 0x3F000000) == 0)
          {
            v108 = *(_QWORD *)(v13 + 152);
            result = *(unsigned int *)(v108 + 4 * (v105 & 0x3FFFFFFF));
            *(_DWORD *)(v108 + 4 * (v105 & 0x3FFFFFFF)) = v86;
            if (v86 == a2 && (_DWORD)result != -1)
            {
              v109 = (a2 - result);
              if (v26 >= v109)
              {
                v110 = 0;
                v111 = 0;
                v112 = a3 + (result & a4);
                do
                {
                  v113 = *(_QWORD *)(v112 + v111) ^ *(_QWORD *)&v58[v111];
                  if (v113)
                  {
                    result = v111 + (__clz(__rbit64(v113)) >> 3);
                    goto LABEL_143;
                  }
                  v111 += 8;
                  v110 -= 8;
                  v114 = v30 + v110;
                }
                while (v30 + v110 > 7);
                v115 = (unsigned __int8 *)(v112 + v111);
                if (v30 != v111)
                {
                  v116 = v30 - v111 + 8;
                  v117 = &v58[v111];
                  v118 = &v115[v116 - 8];
                  while (*v115 == *v117)
                  {
                    ++v117;
                    ++v115;
                    if (!--v114)
                    {
                      v115 = v118;
                      break;
                    }
                  }
                  v24 = v286;
                  v85 = v287;
                }
                result = (unint64_t)&v115[-v112];
LABEL_143:
                v119 = 135 * result - 30 * (__clz(v109) ^ 0x1F) + 1920;
                v120 = v119 > v40;
                if (v119 <= v40)
                {
                  v109 = v84;
                  v119 = v40;
                }
                v121 = v292;
                if (v120)
                  v122 = 0;
                else
                  v122 = v292;
                if (v120)
                  v123 = result;
                else
                  v123 = v81;
                v124 = result >= 4 && result > v81;
                if (v124)
                  v84 = v109;
                if (v124)
                  v40 = v119;
                if (v124)
                  v121 = v122;
                v292 = v121;
                if (v124)
                  v81 = v123;
              }
            }
          }
          v105 = v107 + v103 * v105 + v104 * ~v106 + 1;
          ++v86;
        }
        while (v86 <= a2);
        *(_DWORD *)(v13 + 144) = v105;
      }
      else
      {
        v24 = v286;
        v85 = v287;
      }
      *(_QWORD *)(v13 + 160) = a2 + 1;
    }
    else
    {
      v24 = v286;
      v85 = v287;
    }
    if (v40 < 0x7E5)
    {
      v23 = v297;
      v15 = v299 + 1;
      v224 = a2 + 1;
      if (a2 + 1 > v297)
      {
        if (v224 <= v297 + 4 * v272)
        {
          v246 = a2 + 9;
          if (a2 + 9 >= v269)
            v246 = v269;
          if (v224 < v246)
          {
            v247 = *(_DWORD *)(v13 + 104);
            v248 = *(_DWORD *)(v13 + 108);
            do
            {
              v249 = (unint64_t)(*(_QWORD *)(a3 + (v224 & a4)) * v24) >> 49;
              v250 = *(unsigned __int16 *)(v300 + 2 * v249);
              *(_WORD *)(v300 + 2 * v249) = v250 + 1;
              *(_DWORD *)(v85 + 4 * ((v249 << v248) + (v247 & v250))) = v224;
              v15 += 2;
              v224 += 2;
            }
            while (v224 < v246);
          }
        }
        else
        {
          v225 = a2 + 17;
          if (a2 + 17 >= v269)
            v225 = v269;
          if (v224 < v225)
          {
            v226 = *(_DWORD *)(v13 + 104);
            v227 = *(_DWORD *)(v13 + 108);
            do
            {
              v228 = (unint64_t)(*(_QWORD *)(a3 + (v224 & a4)) * v24) >> 49;
              v229 = *(unsigned __int16 *)(v300 + 2 * v228);
              *(_WORD *)(v300 + 2 * v228) = v229 + 1;
              *(_DWORD *)(v85 + 4 * ((v228 << v227) + (v226 & v229))) = v224;
              v15 += 4;
              v224 += 4;
            }
            while (v224 < v225);
          }
        }
      }
      goto LABEL_400;
    }
    v290 = v84;
    v296 = 0;
    while (1)
    {
      v125 = v30 - 1;
      v126 = v81 - 1;
      if (v81 - 1 >= v30 - 1)
        v126 = v30 - 1;
      if (*(int *)(v14 + 4) >= 5)
        v127 = 0;
      else
        v127 = v126;
      v128 = a2 + 1;
      if (a2 + 1 < v283)
        v129 = a2 + 1;
      else
        v129 = v283;
      v130 = v128 + v284;
      if (v128 + v284 >= v283)
        v130 = v283;
      v288 = v130;
      if (*(_DWORD *)(v14 + 624))
      {
        v131 = *(unsigned __int8 *)(v14
                                  + (*(_BYTE *)(v276 + v291) | *(_BYTE *)(a5
                                                                                         + *(unsigned __int8 *)(a3 + (a2 & a4))))
                                  + 629);
        v291 = *(unsigned __int8 *)(a3 + (a2 & a4));
      }
      else
      {
        v131 = v293;
      }
      v132 = *(_QWORD *)(v14 + 8 * v131 + 696);
      v133 = v128 & a4;
      v134 = *(int *)(v13 + 112);
      v293 = v131;
      if ((_DWORD)v134)
      {
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v138 = 2020;
        v304 = 2020;
        do
        {
          v139 = v12[v135];
          v140 = v128 - v139;
          v141 = v129 < v139 || v140 >= v128;
          v142 = v140 & a4;
          v143 = v127 + v133;
          v144 = v141 || v143 > a4;
          v145 = v142 + v127;
          v146 = v144 || v145 > a4;
          if (!v146 && *(unsigned __int8 *)(a3 + v143) == *(unsigned __int8 *)(a3 + v145))
          {
            v147 = a3 + v142;
            if (v125 < 8)
            {
              v150 = (_QWORD *)(a3 + v142);
              v149 = (_QWORD *)(a3 + v133);
              v152 = v30 - 1;
              if (v30 != 1)
              {
LABEL_207:
                v153 = (_QWORD *)((char *)v150 + v152);
                while (*(unsigned __int8 *)v150 == *(unsigned __int8 *)v149)
                {
                  v149 = (_QWORD *)((char *)v149 + 1);
                  v150 = (_QWORD *)((char *)v150 + 1);
                  if (!--v152)
                  {
                    v150 = v153;
                    break;
                  }
                }
              }
            }
            else
            {
              v148 = 0;
              v149 = (_QWORD *)(a3 + v133);
              v150 = (_QWORD *)(a3 + v142);
              do
              {
                v151 = *v150 ^ *v149;
                if (v151)
                {
                  v154 = (__clz(__rbit64(v151)) >> 3) - v148;
                  goto LABEL_213;
                }
                ++v150;
                ++v149;
                v148 -= 8;
                v152 = v30 + v148 - 1;
              }
              while (v152 > 7);
              if (v30 + v148 != 1)
                goto LABEL_207;
            }
            v154 = (unint64_t)v150 - v147;
LABEL_213:
            if (v154 > 2 || v135 <= 1 && v154 == 2)
            {
              v155 = 135 * v154 + 1935;
              if (v138 < v155)
              {
                if (v135)
                  v155 -= ((0x1CA10u >> (v135 & 0xE)) & 0xE) + 39;
                if (v138 < v155)
                {
                  v137 = v154;
                  v136 = v12[v135];
                  v304 = v155;
                  v138 = v155;
                  v127 = v154;
                }
              }
            }
          }
          ++v135;
        }
        while (v135 != v134);
      }
      else
      {
        v137 = 0;
        v136 = 0;
        v304 = 2020;
        v138 = 2020;
      }
      v279 = v81;
      v298 = v40;
      v302 = a2;
      v156 = (unsigned __int8 *)(a3 + v133);
      v157 = *(_QWORD *)(a3 + v133);
      v158 = (unint64_t)(v157 * v286) >> 49;
      v159 = *(unsigned int *)(v13 + 104);
      v160 = v287 + 4 * (v158 << *(_DWORD *)(v13 + 108));
      v161 = *(unsigned __int16 *)(v300 + 2 * v158);
      if (v161 >= v282)
        v162 = v161 - v282;
      else
        v162 = 0;
      if (v162 < v161)
      {
        v163 = v133 + a3 + 4;
        v164 = *(unsigned __int16 *)(v300 + 2 * v158);
        while (1)
        {
          v165 = *(unsigned int *)(v160 + 4 * (--v164 & v159));
          v166 = v128 - v165;
          if (v128 - v165 > v129)
            goto LABEL_249;
          if (v127 + v133 <= a4)
          {
            v167 = v165 & a4;
            if (v167 + v127 <= a4
              && *(unsigned __int8 *)(a3 + v127 + v133) == *(unsigned __int8 *)(a3 + v167 + v127)
              && *(_DWORD *)(a3 + v167) == (_DWORD)v157)
            {
              break;
            }
          }
LABEL_248:
          if (v164 <= v162)
            goto LABEL_249;
        }
        v168 = v167 + a3 + 4;
        v169 = v125;
        if (v30 - 5 < 8)
        {
          v174 = (unsigned __int8 *)(v167 + a3 + 4);
          v173 = (unsigned __int8 *)(v133 + a3 + 4);
          v171 = v30 - 5;
          if (v30 != 5)
          {
LABEL_239:
            v275 = &v174[v171];
            while (*v174 == *v173)
            {
              ++v173;
              ++v174;
              if (!--v171)
              {
                v174 = v275;
                break;
              }
            }
            v13 = a7;
LABEL_244:
            v175 = &v174[-v168];
LABEL_246:
            v176 = (unint64_t)(v175 + 4);
            v177 = __clz(v166);
            v125 = v169;
            if (v138 < 135 * v176 - 30 * (v177 ^ 0x1F) + 1920)
            {
              v137 = v176;
              v136 = v166;
              v304 = 135 * v176 - 30 * (v177 ^ 0x1F) + 1920;
              v138 = v304;
              v127 = v176;
            }
            goto LABEL_248;
          }
        }
        else
        {
          v170 = 0;
          v171 = v30 - 5;
          do
          {
            v172 = *(_QWORD *)(v168 + v170) ^ *(_QWORD *)(v163 + v170);
            if (v172)
            {
              v175 = (unsigned __int8 *)(v170 + (__clz(__rbit64(v172)) >> 3));
              v13 = a7;
              goto LABEL_246;
            }
            v171 -= 8;
            v170 += 8;
          }
          while (v171 > 7);
          v173 = (unsigned __int8 *)(v163 + v170);
          v174 = (unsigned __int8 *)(v168 + v170);
          if (v171)
            goto LABEL_239;
        }
        v13 = a7;
        goto LABEL_244;
      }
LABEL_249:
      *(_DWORD *)(v160 + 4 * (v159 & v161)) = v128;
      *(_WORD *)(v300 + 2 * v158) = v161 + 1;
      if (v304 == 2020)
      {
        v178 = *(_QWORD *)(v13 + 120);
        v179 = *(_QWORD *)(v178 + 40);
        v180 = *(_QWORD *)(v178 + 48);
        if (v180 >= v179 >> 7)
        {
          v181 = 0;
          v208 = ((506832829 * *(_DWORD *)v156) >> 17) & 0x7FFE;
          v209 = *(_QWORD *)(v132 + 32);
          v210 = 1;
          v304 = 2020;
          v211 = v136;
          v212 = v137;
          do
          {
            v213 = v210;
            *(_QWORD *)(v178 + 40) = ++v179;
            v214 = *(unsigned __int8 *)(v209 + v208);
            if (!*(_BYTE *)(v209 + v208) || v125 < v214)
              goto LABEL_324;
            v215 = v125;
            v216 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v132 + 168)
                                     + *(unsigned int *)(*(_QWORD *)v132 + 4 * *(unsigned __int8 *)(v209 + v208) + 32)
                                     + *(unsigned __int16 *)(*(_QWORD *)(v132 + 24) + 2 * v208)
                                     * (unint64_t)*(unsigned __int8 *)(v209 + v208));
            if (v214 < 8)
            {
              v218 = *(unsigned __int8 *)(v209 + v208);
              v220 = v156;
            }
            else
            {
              v217 = 0;
              v218 = *(unsigned __int8 *)(v209 + v208);
              do
              {
                v219 = *(_QWORD *)&v156[v217] ^ *(_QWORD *)&v216[v217];
                if (v219)
                {
                  v137 = v217 + (__clz(__rbit64(v219)) >> 3);
                  v125 = v215;
                  goto LABEL_317;
                }
                v218 -= 8;
                v217 += 8;
              }
              while (v218 > 7);
              v220 = &v156[v217];
              if (!v218)
                goto LABEL_315;
              v216 += v217;
            }
            v221 = &v220[v218];
            while (*v220 == *v216)
            {
              ++v216;
              ++v220;
              if (!--v218)
              {
                v220 = v221;
                break;
              }
            }
LABEL_315:
            v125 = v215;
            v137 = v220 - v156;
LABEL_317:
            v222 = v137 && v137 + *(unsigned int *)(v132 + 12) > v214;
            if (v222
              && (v136 = v274
                       + v288
                       + *(unsigned __int16 *)(*(_QWORD *)(v132 + 24) + 2 * v208)
                       + ((((*(_QWORD *)(v132 + 16) >> (6 * (v214 - v137))) & 0x3FLL)
                         + 4 * (v214 - v137)) << *(_BYTE *)(*(_QWORD *)v132 + v214)),
                  v136 <= v294)
              && (v223 = 135 * v137 - 30 * (__clz(v136) ^ 0x1F) + 1920, v223 >= v304))
            {
              v181 = v214 - v137;
              *(_QWORD *)(v178 + 48) = ++v180;
              v304 = v223;
            }
            else
            {
LABEL_324:
              v137 = v212;
              v136 = v211;
            }
            v210 = 0;
            ++v208;
            v211 = v136;
            v212 = v137;
          }
          while ((v213 & 1) != 0);
        }
        else
        {
          v181 = 0;
          v304 = 2020;
        }
      }
      else
      {
        v181 = 0;
      }
      if (v125 >= 0x20)
      {
        v185 = *(_QWORD *)(v13 + 160);
        v14 = a6;
        v184 = v302;
        v40 = v304;
        v183 = v298;
        if (v185 <= v128)
        {
          v186 = *(_DWORD *)(v13 + 172);
          v187 = *(_DWORD *)(v13 + 176);
          v188 = *(_DWORD *)(v13 + 144);
          do
          {
            v189 = *(unsigned __int8 *)(a3 + (v185 & a4));
            v190 = *(unsigned __int8 *)(a3 + ((v185 + 32) & a4));
            if ((v188 & 0x3F000000) == 0)
            {
              v191 = *(_QWORD *)(v13 + 152);
              v192 = *(unsigned int *)(v191 + 4 * (v188 & 0x3FFFFFFF));
              *(_DWORD *)(v191 + 4 * (v188 & 0x3FFFFFFF)) = v185;
              if (v185 == v128 && (_DWORD)v192 != -1)
              {
                v193 = (v128 - v192);
                if (v129 >= v193)
                {
                  v194 = 0;
                  v195 = 0;
                  v196 = a3 + (v192 & a4);
                  do
                  {
                    v197 = *(_QWORD *)(v196 + v195) ^ *(_QWORD *)&v156[v195];
                    if (v197)
                    {
                      v201 = v195 + (__clz(__rbit64(v197)) >> 3);
                      goto LABEL_271;
                    }
                    v195 += 8;
                    v194 -= 8;
                    v198 = v30 + v194 - 1;
                  }
                  while (v198 > 7);
                  v199 = (unsigned __int8 *)(v196 + v195);
                  if (v195 + 1 != v30)
                  {
                    v200 = &v156[v195];
                    while (*v199 == *v200)
                    {
                      ++v200;
                      ++v199;
                      if (!--v198)
                      {
                        v199 = (unsigned __int8 *)(v196 - 8 + v30 + 7);
                        break;
                      }
                    }
                  }
                  v201 = (unint64_t)&v199[-v196];
LABEL_271:
                  v202 = 135 * v201 - 30 * (__clz(v193) ^ 0x1F) + 1920;
                  v203 = v202 > v40;
                  if (v202 > v40)
                    v204 = v201;
                  else
                    v204 = v137;
                  if (v202 <= v40)
                  {
                    v193 = v136;
                    v202 = v40;
                  }
                  if (v203)
                    v205 = 0;
                  else
                    v205 = v181;
                  v206 = v201 >= 4 && v201 > v137;
                  if (v206)
                    v137 = v204;
                  if (v206)
                    v136 = v193;
                  if (v206)
                    v40 = v202;
                  if (v206)
                    v181 = v205;
                }
              }
            }
            v188 = v190 + v186 * v188 + v187 * ~v189 + 1;
            ++v185;
          }
          while (v185 <= v128);
          *(_DWORD *)(v13 + 144) = v188;
        }
        *(_QWORD *)(v13 + 160) = v302 + 2;
        v12 = a8;
        v182 = v299;
      }
      else
      {
        v12 = a8;
        v14 = a6;
        v183 = v298;
        v182 = v299;
        v184 = v302;
        v40 = v304;
      }
      if (v40 < v183 + 175)
        break;
      v299 = v182 + 1;
      if (v296 <= 2)
      {
        v207 = v184 + 9;
        ++v296;
        v290 = v136;
        v292 = v181;
        v81 = v137;
        v30 = v125;
        a2 = v128;
        if (v207 < v285)
          continue;
      }
      goto LABEL_339;
    }
    v230 = v184 + v284;
    if (v184 + v284 >= v283)
      v230 = v283;
    v288 = v230;
    v136 = v290;
    v181 = v292;
    v137 = v279;
    v128 = v184;
LABEL_339:
    if (v136 > v288 + v271)
    {
LABEL_340:
      v231 = v136 + 15;
      goto LABEL_341;
    }
    v236 = *a8;
    if (v136 == v236)
    {
      v231 = 0;
      result = v300;
      goto LABEL_348;
    }
    v251 = a8[1];
    if (v136 == v251)
    {
      v231 = 1;
    }
    else
    {
      v252 = v136 + 3 - v236;
      if (v252 > 6)
      {
        v255 = v136 + 3 - v251;
        if (v255 > 6)
        {
          if (v136 == a8[2])
          {
            v231 = 2;
          }
          else
          {
            if (v136 != a8[3])
              goto LABEL_340;
            v231 = 3;
          }
          goto LABEL_341;
        }
        v253 = 4 * v255;
        v254 = 266017486;
      }
      else
      {
        v253 = 4 * v252;
        v254 = 158663784;
      }
      v231 = (v254 >> v253) & 0xF;
    }
LABEL_341:
    result = v300;
    if (v136 <= v288 + v271)
    {
      if (v231)
      {
        a8[3] = a8[2];
        v232 = *(int32x2_t *)a8;
        *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
        *a8 = v136;
        v233 = *(_DWORD *)(v13 + 112);
        if (v233 >= 5)
        {
          v234 = vdupq_n_s32(v136);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v234, (int32x4_t)xmmword_19D02CCA0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v234.i8, (int32x2_t)0x3FFFFFFFDLL);
          if (v233 >= 0xB)
          {
            v235 = vdupq_lane_s32(v232, 0);
            *(int32x4_t *)(a8 + 10) = vaddq_s32(v235, (int32x4_t)xmmword_19D02CCA0);
            *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v235.i8, (int32x2_t)0x3FFFFFFFDLL);
          }
        }
      }
    }
LABEL_348:
    *(_DWORD *)v273 = v299;
    *(_DWORD *)(v273 + 4) = v137 | (v181 << 25);
    v237 = *(unsigned int *)(v14 + 60);
    v238 = v237 + 16;
    if (v237 + 16 <= v231)
    {
      v240 = *(unsigned int *)(v14 + 56);
      v241 = v231 - v237 + (4 << v240) - 16;
      v242 = (__clz(v241) ^ 0x1F) - 1;
      v243 = ((v241 >> v242) & 1 | 2) << v242;
      v231 = ((v241 & ~(-1 << v240))
            + v238
            + ((((v241 >> v242) & 1 | (2 * (v242 - v240))) + 65534) << v240)) | ((v242 - v240) << 10);
      v239 = (v241 - v243) >> v240;
    }
    else
    {
      LODWORD(v239) = 0;
    }
    *(_WORD *)(v273 + 14) = v231;
    *(_DWORD *)(v273 + 8) = v239;
    if (v299 > 5)
    {
      if (v299 > 0x81)
      {
        if (v299 > 0x841)
        {
          if (v299 >> 1 >= 0xC21)
          {
            if (v299 < 0x5842)
              LOWORD(v244) = 22;
            else
              LOWORD(v244) = 23;
          }
          else
          {
            LOWORD(v244) = 21;
          }
        }
        else
        {
          v244 = (__clz(v299 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v245 = (__clz(v299 - 2) ^ 0x1F) - 1;
        v244 = ((v299 - 2) >> v245) + 2 * v245 + 2;
      }
    }
    else
    {
      LOWORD(v244) = v299;
    }
    v256 = v181 + (int)v137;
    if (v256 > 9)
    {
      if (v256 > 0x85)
      {
        if (v256 > 0x845)
          LOWORD(v257) = 23;
        else
          v257 = (__clz(v256 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v258 = v256 - 6;
        v259 = (__clz(v258) ^ 0x1F) - 1;
        v257 = (v258 >> v259) + 2 * v259 + 4;
      }
    }
    else
    {
      LOWORD(v257) = v181 + v137 - 2;
    }
    v24 = v286;
    v260 = v257 & 7 | (8 * (v244 & 7));
    if ((v231 & 0x3FF) != 0 || (unsigned __int16)v244 > 7u || (unsigned __int16)v257 > 0xFu)
    {
      v262 = 3 * ((unsigned __int16)v244 >> 3) + ((unsigned __int16)(v257 & 0xFFF8) >> 3);
      v261 = ((((0x520D40u >> (2 * v262)) & 0xC0) + (v262 << 6)) | v260) + 64;
    }
    else
    {
      LOWORD(v261) = v260 | 0x40;
      if ((v257 & 0xFFF8) == 0)
        LOWORD(v261) = v257 & 7 | (8 * (v244 & 7));
    }
    *(_WORD *)(v273 + 12) = v261;
    v263 = v270;
    *a12 += v299;
    v264 = v128 + 2;
    v224 = v128 + v137;
    if (v128 + v137 < v270)
      v263 = v128 + v137;
    if (v136 < v137 >> 2)
    {
      if (v264 <= v224 - 4 * v136)
        v264 = v224 - 4 * v136;
      if (v263 < v264)
        v264 = v263;
    }
    v23 = v272 + 2 * v137 + v128;
    v273 += 16;
    if (v264 < v263)
    {
      v265 = *(_DWORD *)(v13 + 104);
      v266 = *(_DWORD *)(v13 + 108);
      do
      {
        v267 = (unint64_t)(*(_QWORD *)(a3 + (v264 & a4)) * v286) >> 49;
        v268 = *(unsigned __int16 *)(result + 2 * v267);
        *(_WORD *)(result + 2 * v267) = v268 + 1;
        *(_DWORD *)(v287 + 4 * ((v267 << v266) + (v265 & v268))) = v264++;
      }
      while (v263 != v264);
    }
    v15 = 0;
LABEL_400:
    a2 = v224;
  }
  while (v224 + 8 < v285);
LABEL_407:
  *a9 = v15 + v285 - v224;
  *a11 += (v273 - a10) >> 4;
  return result;
}

void BrotliCompareAndPushToQueueLiteral(uint64_t a1, char *__dst, uint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7, unint64_t *a8)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  if (a4 != a5)
  {
    v13 = a5 >= a4 ? a4 : a5;
    v14 = *(unsigned int *)(a3 + 4 * v13);
    v15 = a5 <= a4 ? a4 : a5;
    v16 = *(unsigned int *)(a3 + 4 * v15);
    v17 = (double)v14;
    v18 = v14 > 0xFF ? log2((double)v14) : kBrotliLog2Table[v14];
    v19 = v16 + v14;
    v20 = v16 > 0xFF ? log2((double)v16) : kBrotliLog2Table[v16];
    v21 = v20 * (double)v16 + v17 * v18;
    v22 = v19 > 0xFF ? log2((double)v19) : kBrotliLog2Table[v19];
    v23 = a1 + 1040 * v13;
    v24 = (v21 - (double)v19 * v22) * 0.5 - *(double *)(v23 + 1032);
    v25 = a1 + 1040 * v15;
    v26 = *(double *)(v25 + 1032);
    v27 = v24 - v26;
    if (!*(_QWORD *)(v23 + 1024))
      goto LABEL_27;
    v28 = a1 + 1040 * v15;
    v26 = *(double *)(v23 + 1032);
    if (!*(_QWORD *)(v28 + 1024))
      goto LABEL_27;
    v29 = (_QWORD *)(v28 + 1024);
    if (*a8)
      v30 = *(double *)(a7 + 16) >= 0.0 ? *(double *)(a7 + 16) : 0.0;
    else
      v30 = 1.0e99;
    memcpy(__dst, (const void *)v23, 0x410uLL);
    v31 = 0;
    *((_QWORD *)__dst + 128) += *v29;
    do
    {
      *(_DWORD *)&__dst[v31] += *(_DWORD *)(v25 + v31);
      v31 += 4;
    }
    while (v31 != 1024);
    BrotliPopulationCostLiteral((uint64_t)__dst);
    if (v26 < v30 - v27)
    {
LABEL_27:
      v32 = v27 + v26;
      v33 = *a8;
      if (*a8)
      {
        v34 = *(double *)(a7 + 16);
        if (v34 == v32)
        {
          if (*(_DWORD *)(a7 + 4) - *(_DWORD *)a7 > v15 - v13)
            goto LABEL_30;
        }
        else if (v34 > v32)
        {
LABEL_30:
          if (v33 < a6)
          {
            v35 = a7 + 24 * v33;
            *(_OWORD *)v35 = *(_OWORD *)a7;
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(a7 + 16);
            ++*a8;
          }
          *(_DWORD *)a7 = v13;
          *(_DWORD *)(a7 + 4) = v15;
          *(double *)(a7 + 8) = v26;
          *(double *)(a7 + 16) = v32;
          return;
        }
      }
      if (v33 < a6)
      {
        v36 = a7 + 24 * v33;
        *(_DWORD *)v36 = v13;
        *(_DWORD *)(v36 + 4) = v15;
        *(double *)(v36 + 8) = v26;
        *(double *)(v36 + 16) = v32;
        *a8 = v33 + 1;
      }
    }
  }
}

unint64_t BrotliHistogramCombineLiteral(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, unsigned int *a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  double v42;
  double v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v54;
  unint64_t v55;
  char *v57;
  unint64_t v58;

  v58 = 0;
  if (a7)
  {
    v13 = 0;
    v14 = a10;
    v15 = a7 - 1;
    v16 = a5 + 1;
    v57 = a2;
    v54 = a7;
    do
    {
      v18 = v13 + 1;
      if (v13 + 1 < a7)
      {
        v19 = v16;
        v20 = v15;
        do
        {
          v21 = *v19++;
          BrotliCompareAndPushToQueueLiteral(a1, a2, a3, a5[v13], v21, v14, (uint64_t)a6, &v58);
          v14 = a10;
          a2 = v57;
          --v20;
        }
        while (v20);
      }
      --v15;
      ++v16;
      ++v13;
      a7 = v54;
    }
    while (v18 != v54);
    if (v54 >= 2)
    {
      v22 = 0.0;
      v23 = 1;
      do
      {
        if (*((double *)a6 + 2) >= v22)
        {
          v22 = 1.0e99;
          v23 = a9;
        }
        else
        {
          v24 = 0;
          v26 = *a6;
          v25 = a6[1];
          v27 = a1 + 1040 * v26;
          v28 = a1 + 1040 * v25;
          *(_QWORD *)(v27 + 1024) += *(_QWORD *)(v28 + 1024);
          do
          {
            *(_DWORD *)(v27 + v24) += *(_DWORD *)(v28 + v24);
            v24 += 4;
          }
          while (v24 != 1024);
          *(_QWORD *)(a1 + 1040 * v26 + 1032) = *((_QWORD *)a6 + 1);
          *(_DWORD *)(a3 + 4 * v26) += *(_DWORD *)(a3 + 4 * v25);
          v29 = a4;
          for (i = a8; i; --i)
          {
            if (*v29 == (_DWORD)v25)
              *v29 = v26;
            ++v29;
          }
          v31 = a7 - 1;
          if (a7 <= 1)
            v32 = 1;
          else
            v32 = a7;
          v33 = 4 * a7 - 4;
          v34 = a5;
          while (*v34 != (_DWORD)v25)
          {
            v33 -= 4;
            ++v34;
            if (!--v32)
              goto LABEL_25;
          }
          memmove(v34, v34 + 1, v33);
LABEL_25:
          v35 = v58;
          if (v58)
          {
            v36 = 0;
            v37 = (double *)a6;
            while (2)
            {
              v38 = *(_DWORD *)v37;
              if (*(_DWORD *)v37 == (_DWORD)v26)
                goto LABEL_41;
              v39 = *((_DWORD *)v37 + 1);
              v40 = v39 == (_DWORD)v25 || v38 == (_DWORD)v25;
              if (v40 || v39 == (_DWORD)v26)
                goto LABEL_41;
              v42 = *((double *)a6 + 2);
              v43 = v37[2];
              if (v42 == v43)
              {
                if (a6[1] - *a6 <= v39 - v38)
                  goto LABEL_39;
LABEL_37:
                v44 = *(_OWORD *)a6;
                v45 = *((_QWORD *)a6 + 2);
                v46 = *((_QWORD *)v37 + 2);
                *(_OWORD *)a6 = *(_OWORD *)v37;
                *((_QWORD *)a6 + 2) = v46;
              }
              else
              {
                if (v42 > v43)
                  goto LABEL_37;
LABEL_39:
                v44 = *(_OWORD *)v37;
                v45 = *((_QWORD *)v37 + 2);
              }
              v47 = &a6[6 * v36];
              *((_QWORD *)v47 + 2) = v45;
              *(_OWORD *)v47 = v44;
              ++v36;
LABEL_41:
              v37 += 3;
              if (!--v35)
                goto LABEL_44;
              continue;
            }
          }
          v36 = 0;
LABEL_44:
          v58 = v36;
          if (!v31)
            return 0;
          v55 = v23;
          v48 = a5;
          v49 = v31;
          do
          {
            v50 = *v48++;
            BrotliCompareAndPushToQueueLiteral(a1, v57, a3, v26, v50, a10, (uint64_t)a6, &v58);
            --v49;
          }
          while (v49);
          a7 = v31;
          v23 = v55;
        }
      }
      while (a7 > v23);
    }
  }
  return a7;
}

double BrotliHistogramBitCostDistanceLiteral(_QWORD *__src, uint64_t a2, char *__dst)
{
  uint64_t v5;
  double v6;

  if (!__src[128])
    return 0.0;
  memcpy(__dst, __src, 0x410uLL);
  v5 = 0;
  *((_QWORD *)__dst + 128) += *(_QWORD *)(a2 + 1024);
  do
  {
    *(_DWORD *)&__dst[v5] += *(_DWORD *)(a2 + v5);
    v5 += 4;
  }
  while (v5 != 1024);
  BrotliPopulationCostLiteral((uint64_t)__dst);
  return v6 - *(double *)(a2 + 1032);
}

void BrotliHistogramRemapLiteral(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, char *__dst, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  double v16;
  double v17;
  unsigned int *v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = a7;
  v11 = a2;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v14 = i - 1;
      if (!i)
        v14 = 0;
      v15 = *(_DWORD *)(v7 + 4 * v14);
      v16 = BrotliHistogramBitCostDistanceLiteral((_QWORD *)(a1 + 1040 * i), a5 + 1040 * v15, __dst);
      if (a4)
      {
        v17 = v16;
        v18 = a3;
        v19 = a4;
        do
        {
          v20 = BrotliHistogramBitCostDistanceLiteral((_QWORD *)(a1 + 1040 * i), a5 + 1040 * *v18, __dst);
          if (v20 < v17)
          {
            v15 = *v18;
            v17 = v20;
          }
          ++v18;
          --v19;
        }
        while (v19);
      }
      v11 = a2;
      v7 = a7;
      *(_DWORD *)(a7 + 4 * i) = v15;
    }
  }
  for (; a4; --a4)
  {
    v21 = *a3++;
    v22 = (_QWORD *)(a5 + 1040 * v21);
    bzero(v22, 0x400uLL);
    v22[128] = 0;
    v22[129] = 0x7FF0000000000000;
  }
  if (v11)
  {
    v23 = 0;
    v24 = a1;
    do
    {
      v25 = 0;
      v26 = a5 + 1040 * *(unsigned int *)(v7 + 4 * v23);
      *(_QWORD *)(v26 + 1024) += *(_QWORD *)(a1 + 1040 * v23 + 1024);
      do
      {
        *(_DWORD *)(v26 + v25) += *(_DWORD *)(v24 + v25);
        v25 += 4;
      }
      while (v25 != 1024);
      ++v23;
      v24 += 1040;
    }
    while (v23 != v11);
  }
}

uint64_t BrotliHistogramReindexLiteral(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v4 = a4;
  if (a4)
  {
    v8 = (void *)BrotliAllocate(a1);
    memset(v8, 255, 4 * v4);
    v9 = 0;
    v10 = a3;
    v11 = v4;
    do
    {
      v13 = *v10++;
      v12 = v13;
      if (*((_DWORD *)v8 + v13) == -1)
        *((_DWORD *)v8 + v12) = v9++;
      --v11;
    }
    while (v11);
    if (v9)
      v14 = BrotliAllocate(a1);
    else
      v14 = 0;
    v15 = 0;
    do
    {
      v16 = *a3;
      v17 = *((_DWORD *)v8 + v16);
      if (v17 == v15)
      {
        memcpy((void *)(v14 + 1040 * v15++), (const void *)(a2 + 1040 * v16), 0x410uLL);
        v17 = *((_DWORD *)v8 + *a3);
      }
      *a3++ = v17;
      --v4;
    }
    while (v4);
    BrotliFree(a1);
    if (v15)
    {
      v18 = 0;
      v4 = v15;
      do
      {
        memcpy((void *)(a2 + v18), (const void *)(v14 + v18), 0x410uLL);
        v18 += 1040;
      }
      while (1040 * v15 != v18);
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    BrotliFree(a1);
  }
  BrotliFree(a1);
  return v4;
}

uint64_t BrotliClusterHistogramsLiteral(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6, unsigned int *a7)
{
  size_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  void *__b;

  v13 = 4 * a3;
  if (a3)
  {
    __b = (void *)BrotliAllocate(a1);
    v14 = (unsigned int *)BrotliAllocate(a1);
  }
  else
  {
    __b = 0;
    v14 = 0;
  }
  v15 = (unsigned int *)BrotliAllocate(a1);
  v33 = a1;
  v34 = a6;
  v35 = (char *)BrotliAllocate(a1);
  v32 = a2;
  if (a3)
  {
    memset_pattern16(__b, &unk_19D02CD00, v13);
    v16 = 0;
    v17 = 0;
    do
    {
      memcpy((void *)(a5 + v16), (const void *)(a2 + v16), 0x410uLL);
      BrotliPopulationCostLiteral(a2 + v16);
      *(_QWORD *)(a5 + v16 + 1032) = v18;
      a7[v17] = v17;
      ++v17;
      v16 += 1040;
    }
    while (a3 != v17);
    v19 = 0;
    v20 = 0;
    v21 = a3;
    do
    {
      v22 = v21 - 64;
      if (v21 >= 0x40)
        v21 = 64;
      if (a3 - v19 >= 0x40)
        v23 = 64;
      else
        v23 = a3 - v19;
      if (v23)
      {
        v24 = 0;
        do
        {
          v14[v20 + v24] = v19 + v24;
          ++v24;
        }
        while (v21 != v24);
      }
      v20 += BrotliHistogramCombineLiteral(a5, v35, (uint64_t)__b, &a7[v19], &v14[v20], v15, v23, v23, a4, 0x800uLL);
      v19 += 64;
      v21 = v22;
    }
    while (v19 < a3);
  }
  else
  {
    v20 = 0;
  }
  if (v20 << 6 >= (v20 >> 1) * v20)
    v25 = (v20 >> 1) * v20;
  else
    v25 = v20 << 6;
  if (v25 < 0x800)
  {
    v28 = v33;
  }
  else
  {
    v26 = 2048;
    do
    {
      v27 = v26;
      v26 *= 2;
    }
    while (v27 <= v25);
    v28 = v33;
    v29 = (void *)BrotliAllocate(v33);
    memcpy(v29, v15, 0xC000uLL);
    BrotliFree(v33);
    v15 = (unsigned int *)v29;
  }
  v30 = BrotliHistogramCombineLiteral(a5, v35, (uint64_t)__b, a7, v14, v15, v20, a3, a4, v25);
  BrotliFree(v28);
  BrotliFree(v28);
  BrotliHistogramRemapLiteral(v32, a3, v14, v30, a5, v35, (uint64_t)a7);
  BrotliFree(v28);
  BrotliFree(v28);
  result = BrotliHistogramReindexLiteral(v28, a5, a7, a3);
  *v34 = result;
  return result;
}

void BrotliCompareAndPushToQueueCommand(uint64_t a1, char *__dst, uint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7, unint64_t *a8)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  if (a4 != a5)
  {
    v13 = a5 >= a4 ? a4 : a5;
    v14 = *(unsigned int *)(a3 + 4 * v13);
    v15 = a5 <= a4 ? a4 : a5;
    v16 = *(unsigned int *)(a3 + 4 * v15);
    v17 = (double)v14;
    v18 = v14 > 0xFF ? log2((double)v14) : kBrotliLog2Table[v14];
    v19 = v16 + v14;
    v20 = v16 > 0xFF ? log2((double)v16) : kBrotliLog2Table[v16];
    v21 = v20 * (double)v16 + v17 * v18;
    v22 = v19 > 0xFF ? log2((double)v19) : kBrotliLog2Table[v19];
    v23 = a1 + 2832 * v13;
    v24 = (v21 - (double)v19 * v22) * 0.5 - *(double *)(v23 + 2824);
    v25 = a1 + 2832 * v15;
    v26 = *(double *)(v25 + 2824);
    v27 = v24 - v26;
    if (!*(_QWORD *)(v23 + 2816))
      goto LABEL_27;
    v28 = a1 + 2832 * v15;
    v26 = *(double *)(v23 + 2824);
    if (!*(_QWORD *)(v28 + 2816))
      goto LABEL_27;
    v29 = (_QWORD *)(v28 + 2816);
    if (*a8)
      v30 = *(double *)(a7 + 16) >= 0.0 ? *(double *)(a7 + 16) : 0.0;
    else
      v30 = 1.0e99;
    memcpy(__dst, (const void *)v23, 0xB10uLL);
    v31 = 0;
    *((_QWORD *)__dst + 352) += *v29;
    do
    {
      *(_DWORD *)&__dst[v31] += *(_DWORD *)(v25 + v31);
      v31 += 4;
    }
    while (v31 != 2816);
    BrotliPopulationCostCommand((uint64_t)__dst);
    if (v26 < v30 - v27)
    {
LABEL_27:
      v32 = v27 + v26;
      v33 = *a8;
      if (*a8)
      {
        v34 = *(double *)(a7 + 16);
        if (v34 == v32)
        {
          if (*(_DWORD *)(a7 + 4) - *(_DWORD *)a7 > v15 - v13)
            goto LABEL_30;
        }
        else if (v34 > v32)
        {
LABEL_30:
          if (v33 < a6)
          {
            v35 = a7 + 24 * v33;
            *(_OWORD *)v35 = *(_OWORD *)a7;
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(a7 + 16);
            ++*a8;
          }
          *(_DWORD *)a7 = v13;
          *(_DWORD *)(a7 + 4) = v15;
          *(double *)(a7 + 8) = v26;
          *(double *)(a7 + 16) = v32;
          return;
        }
      }
      if (v33 < a6)
      {
        v36 = a7 + 24 * v33;
        *(_DWORD *)v36 = v13;
        *(_DWORD *)(v36 + 4) = v15;
        *(double *)(v36 + 8) = v26;
        *(double *)(v36 + 16) = v32;
        *a8 = v33 + 1;
      }
    }
  }
}

unint64_t BrotliHistogramCombineCommand(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, unsigned int *a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  double v42;
  double v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v54;
  unint64_t v55;
  char *v57;
  unint64_t v58;

  v58 = 0;
  if (a7)
  {
    v13 = 0;
    v14 = a10;
    v15 = a7 - 1;
    v16 = a5 + 1;
    v57 = a2;
    v54 = a7;
    do
    {
      v18 = v13 + 1;
      if (v13 + 1 < a7)
      {
        v19 = v16;
        v20 = v15;
        do
        {
          v21 = *v19++;
          BrotliCompareAndPushToQueueCommand(a1, a2, a3, a5[v13], v21, v14, (uint64_t)a6, &v58);
          v14 = a10;
          a2 = v57;
          --v20;
        }
        while (v20);
      }
      --v15;
      ++v16;
      ++v13;
      a7 = v54;
    }
    while (v18 != v54);
    if (v54 >= 2)
    {
      v22 = 0.0;
      v23 = 1;
      do
      {
        if (*((double *)a6 + 2) >= v22)
        {
          v22 = 1.0e99;
          v23 = a9;
        }
        else
        {
          v24 = 0;
          v26 = *a6;
          v25 = a6[1];
          v27 = a1 + 2832 * v26;
          v28 = a1 + 2832 * v25;
          *(_QWORD *)(v27 + 2816) += *(_QWORD *)(v28 + 2816);
          do
          {
            *(_DWORD *)(v27 + v24) += *(_DWORD *)(v28 + v24);
            v24 += 4;
          }
          while (v24 != 2816);
          *(_QWORD *)(a1 + 2832 * v26 + 2824) = *((_QWORD *)a6 + 1);
          *(_DWORD *)(a3 + 4 * v26) += *(_DWORD *)(a3 + 4 * v25);
          v29 = a4;
          for (i = a8; i; --i)
          {
            if (*v29 == (_DWORD)v25)
              *v29 = v26;
            ++v29;
          }
          v31 = a7 - 1;
          if (a7 <= 1)
            v32 = 1;
          else
            v32 = a7;
          v33 = 4 * a7 - 4;
          v34 = a5;
          while (*v34 != (_DWORD)v25)
          {
            v33 -= 4;
            ++v34;
            if (!--v32)
              goto LABEL_25;
          }
          memmove(v34, v34 + 1, v33);
LABEL_25:
          v35 = v58;
          if (v58)
          {
            v36 = 0;
            v37 = (double *)a6;
            while (2)
            {
              v38 = *(_DWORD *)v37;
              if (*(_DWORD *)v37 == (_DWORD)v26)
                goto LABEL_41;
              v39 = *((_DWORD *)v37 + 1);
              v40 = v39 == (_DWORD)v25 || v38 == (_DWORD)v25;
              if (v40 || v39 == (_DWORD)v26)
                goto LABEL_41;
              v42 = *((double *)a6 + 2);
              v43 = v37[2];
              if (v42 == v43)
              {
                if (a6[1] - *a6 <= v39 - v38)
                  goto LABEL_39;
LABEL_37:
                v44 = *(_OWORD *)a6;
                v45 = *((_QWORD *)a6 + 2);
                v46 = *((_QWORD *)v37 + 2);
                *(_OWORD *)a6 = *(_OWORD *)v37;
                *((_QWORD *)a6 + 2) = v46;
              }
              else
              {
                if (v42 > v43)
                  goto LABEL_37;
LABEL_39:
                v44 = *(_OWORD *)v37;
                v45 = *((_QWORD *)v37 + 2);
              }
              v47 = &a6[6 * v36];
              *((_QWORD *)v47 + 2) = v45;
              *(_OWORD *)v47 = v44;
              ++v36;
LABEL_41:
              v37 += 3;
              if (!--v35)
                goto LABEL_44;
              continue;
            }
          }
          v36 = 0;
LABEL_44:
          v58 = v36;
          if (!v31)
            return 0;
          v55 = v23;
          v48 = a5;
          v49 = v31;
          do
          {
            v50 = *v48++;
            BrotliCompareAndPushToQueueCommand(a1, v57, a3, v26, v50, a10, (uint64_t)a6, &v58);
            --v49;
          }
          while (v49);
          a7 = v31;
          v23 = v55;
        }
      }
      while (a7 > v23);
    }
  }
  return a7;
}

double BrotliHistogramBitCostDistanceCommand(_QWORD *__src, uint64_t a2, char *__dst)
{
  uint64_t v5;
  double v6;

  if (!__src[352])
    return 0.0;
  memcpy(__dst, __src, 0xB10uLL);
  v5 = 0;
  *((_QWORD *)__dst + 352) += *(_QWORD *)(a2 + 2816);
  do
  {
    *(_DWORD *)&__dst[v5] += *(_DWORD *)(a2 + v5);
    v5 += 4;
  }
  while (v5 != 2816);
  BrotliPopulationCostCommand((uint64_t)__dst);
  return v6 - *(double *)(a2 + 2824);
}

void BrotliCompareAndPushToQueueDistance(uint64_t a1, char *__dst, uint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7, unint64_t *a8)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  if (a4 != a5)
  {
    v13 = a5 >= a4 ? a4 : a5;
    v14 = *(unsigned int *)(a3 + 4 * v13);
    v15 = a5 <= a4 ? a4 : a5;
    v16 = *(unsigned int *)(a3 + 4 * v15);
    v17 = (double)v14;
    v18 = v14 > 0xFF ? log2((double)v14) : kBrotliLog2Table[v14];
    v19 = v16 + v14;
    v20 = v16 > 0xFF ? log2((double)v16) : kBrotliLog2Table[v16];
    v21 = v20 * (double)v16 + v17 * v18;
    v22 = v19 > 0xFF ? log2((double)v19) : kBrotliLog2Table[v19];
    v23 = a1 + 2192 * v13;
    v24 = (v21 - (double)v19 * v22) * 0.5 - *(double *)(v23 + 2184);
    v25 = a1 + 2192 * v15;
    v26 = *(double *)(v25 + 2184);
    v27 = v24 - v26;
    if (!*(_QWORD *)(v23 + 2176))
      goto LABEL_27;
    v28 = a1 + 2192 * v15;
    v26 = *(double *)(v23 + 2184);
    if (!*(_QWORD *)(v28 + 2176))
      goto LABEL_27;
    v29 = (_QWORD *)(v28 + 2176);
    if (*a8)
      v30 = *(double *)(a7 + 16) >= 0.0 ? *(double *)(a7 + 16) : 0.0;
    else
      v30 = 1.0e99;
    memcpy(__dst, (const void *)v23, 0x890uLL);
    v31 = 0;
    *((_QWORD *)__dst + 272) += *v29;
    do
    {
      *(_DWORD *)&__dst[v31] += *(_DWORD *)(v25 + v31);
      v31 += 4;
    }
    while (v31 != 2176);
    BrotliPopulationCostDistance((uint64_t)__dst);
    if (v26 < v30 - v27)
    {
LABEL_27:
      v32 = v27 + v26;
      v33 = *a8;
      if (*a8)
      {
        v34 = *(double *)(a7 + 16);
        if (v34 == v32)
        {
          if (*(_DWORD *)(a7 + 4) - *(_DWORD *)a7 > v15 - v13)
            goto LABEL_30;
        }
        else if (v34 > v32)
        {
LABEL_30:
          if (v33 < a6)
          {
            v35 = a7 + 24 * v33;
            *(_OWORD *)v35 = *(_OWORD *)a7;
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(a7 + 16);
            ++*a8;
          }
          *(_DWORD *)a7 = v13;
          *(_DWORD *)(a7 + 4) = v15;
          *(double *)(a7 + 8) = v26;
          *(double *)(a7 + 16) = v32;
          return;
        }
      }
      if (v33 < a6)
      {
        v36 = a7 + 24 * v33;
        *(_DWORD *)v36 = v13;
        *(_DWORD *)(v36 + 4) = v15;
        *(double *)(v36 + 8) = v26;
        *(double *)(v36 + 16) = v32;
        *a8 = v33 + 1;
      }
    }
  }
}

unint64_t BrotliHistogramCombineDistance(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, unsigned int *a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  double v42;
  double v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v54;
  unint64_t v55;
  char *v57;
  unint64_t v58;

  v58 = 0;
  if (a7)
  {
    v13 = 0;
    v14 = a10;
    v15 = a7 - 1;
    v16 = a5 + 1;
    v57 = a2;
    v54 = a7;
    do
    {
      v18 = v13 + 1;
      if (v13 + 1 < a7)
      {
        v19 = v16;
        v20 = v15;
        do
        {
          v21 = *v19++;
          BrotliCompareAndPushToQueueDistance(a1, a2, a3, a5[v13], v21, v14, (uint64_t)a6, &v58);
          v14 = a10;
          a2 = v57;
          --v20;
        }
        while (v20);
      }
      --v15;
      ++v16;
      ++v13;
      a7 = v54;
    }
    while (v18 != v54);
    if (v54 >= 2)
    {
      v22 = 0.0;
      v23 = 1;
      do
      {
        if (*((double *)a6 + 2) >= v22)
        {
          v22 = 1.0e99;
          v23 = a9;
        }
        else
        {
          v24 = 0;
          v26 = *a6;
          v25 = a6[1];
          v27 = a1 + 2192 * v26;
          v28 = a1 + 2192 * v25;
          *(_QWORD *)(v27 + 2176) += *(_QWORD *)(v28 + 2176);
          do
          {
            *(_DWORD *)(v27 + v24) += *(_DWORD *)(v28 + v24);
            v24 += 4;
          }
          while (v24 != 2176);
          *(_QWORD *)(a1 + 2192 * v26 + 2184) = *((_QWORD *)a6 + 1);
          *(_DWORD *)(a3 + 4 * v26) += *(_DWORD *)(a3 + 4 * v25);
          v29 = a4;
          for (i = a8; i; --i)
          {
            if (*v29 == (_DWORD)v25)
              *v29 = v26;
            ++v29;
          }
          v31 = a7 - 1;
          if (a7 <= 1)
            v32 = 1;
          else
            v32 = a7;
          v33 = 4 * a7 - 4;
          v34 = a5;
          while (*v34 != (_DWORD)v25)
          {
            v33 -= 4;
            ++v34;
            if (!--v32)
              goto LABEL_25;
          }
          memmove(v34, v34 + 1, v33);
LABEL_25:
          v35 = v58;
          if (v58)
          {
            v36 = 0;
            v37 = (double *)a6;
            while (2)
            {
              v38 = *(_DWORD *)v37;
              if (*(_DWORD *)v37 == (_DWORD)v26)
                goto LABEL_41;
              v39 = *((_DWORD *)v37 + 1);
              v40 = v39 == (_DWORD)v25 || v38 == (_DWORD)v25;
              if (v40 || v39 == (_DWORD)v26)
                goto LABEL_41;
              v42 = *((double *)a6 + 2);
              v43 = v37[2];
              if (v42 == v43)
              {
                if (a6[1] - *a6 <= v39 - v38)
                  goto LABEL_39;
LABEL_37:
                v44 = *(_OWORD *)a6;
                v45 = *((_QWORD *)a6 + 2);
                v46 = *((_QWORD *)v37 + 2);
                *(_OWORD *)a6 = *(_OWORD *)v37;
                *((_QWORD *)a6 + 2) = v46;
              }
              else
              {
                if (v42 > v43)
                  goto LABEL_37;
LABEL_39:
                v44 = *(_OWORD *)v37;
                v45 = *((_QWORD *)v37 + 2);
              }
              v47 = &a6[6 * v36];
              *((_QWORD *)v47 + 2) = v45;
              *(_OWORD *)v47 = v44;
              ++v36;
LABEL_41:
              v37 += 3;
              if (!--v35)
                goto LABEL_44;
              continue;
            }
          }
          v36 = 0;
LABEL_44:
          v58 = v36;
          if (!v31)
            return 0;
          v55 = v23;
          v48 = a5;
          v49 = v31;
          do
          {
            v50 = *v48++;
            BrotliCompareAndPushToQueueDistance(a1, v57, a3, v26, v50, a10, (uint64_t)a6, &v58);
            --v49;
          }
          while (v49);
          a7 = v31;
          v23 = v55;
        }
      }
      while (a7 > v23);
    }
  }
  return a7;
}

double BrotliHistogramBitCostDistanceDistance(_QWORD *__src, uint64_t a2, char *__dst)
{
  uint64_t v5;
  double v6;

  if (!__src[272])
    return 0.0;
  memcpy(__dst, __src, 0x890uLL);
  v5 = 0;
  *((_QWORD *)__dst + 272) += *(_QWORD *)(a2 + 2176);
  do
  {
    *(_DWORD *)&__dst[v5] += *(_DWORD *)(a2 + v5);
    v5 += 4;
  }
  while (v5 != 2176);
  BrotliPopulationCostDistance((uint64_t)__dst);
  return v6 - *(double *)(a2 + 2184);
}

void BrotliHistogramRemapDistance(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, char *__dst, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  double v16;
  double v17;
  unsigned int *v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = a7;
  v11 = a2;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v14 = i - 1;
      if (!i)
        v14 = 0;
      v15 = *(_DWORD *)(v7 + 4 * v14);
      v16 = BrotliHistogramBitCostDistanceDistance((_QWORD *)(a1 + 2192 * i), a5 + 2192 * v15, __dst);
      if (a4)
      {
        v17 = v16;
        v18 = a3;
        v19 = a4;
        do
        {
          v20 = BrotliHistogramBitCostDistanceDistance((_QWORD *)(a1 + 2192 * i), a5 + 2192 * *v18, __dst);
          if (v20 < v17)
          {
            v15 = *v18;
            v17 = v20;
          }
          ++v18;
          --v19;
        }
        while (v19);
      }
      v11 = a2;
      v7 = a7;
      *(_DWORD *)(a7 + 4 * i) = v15;
    }
  }
  for (; a4; --a4)
  {
    v21 = *a3++;
    v22 = (_QWORD *)(a5 + 2192 * v21);
    bzero(v22, 0x880uLL);
    v22[272] = 0;
    v22[273] = 0x7FF0000000000000;
  }
  if (v11)
  {
    v23 = 0;
    v24 = a1;
    do
    {
      v25 = 0;
      v26 = a5 + 2192 * *(unsigned int *)(v7 + 4 * v23);
      *(_QWORD *)(v26 + 2176) += *(_QWORD *)(a1 + 2192 * v23 + 2176);
      do
      {
        *(_DWORD *)(v26 + v25) += *(_DWORD *)(v24 + v25);
        v25 += 4;
      }
      while (v25 != 2176);
      ++v23;
      v24 += 2192;
    }
    while (v23 != v11);
  }
}

uint64_t BrotliHistogramReindexDistance(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v4 = a4;
  if (a4)
  {
    v8 = (void *)BrotliAllocate(a1);
    memset(v8, 255, 4 * v4);
    v9 = 0;
    v10 = a3;
    v11 = v4;
    do
    {
      v13 = *v10++;
      v12 = v13;
      if (*((_DWORD *)v8 + v13) == -1)
        *((_DWORD *)v8 + v12) = v9++;
      --v11;
    }
    while (v11);
    if (v9)
      v14 = BrotliAllocate(a1);
    else
      v14 = 0;
    v15 = 0;
    do
    {
      v16 = *a3;
      v17 = *((_DWORD *)v8 + v16);
      if (v17 == v15)
      {
        memcpy((void *)(v14 + 2192 * v15++), (const void *)(a2 + 2192 * v16), 0x890uLL);
        v17 = *((_DWORD *)v8 + *a3);
      }
      *a3++ = v17;
      --v4;
    }
    while (v4);
    BrotliFree(a1);
    if (v15)
    {
      v18 = 0;
      v4 = v15;
      do
      {
        memcpy((void *)(a2 + v18), (const void *)(v14 + v18), 0x890uLL);
        v18 += 2192;
      }
      while (2192 * v15 != v18);
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    BrotliFree(a1);
  }
  BrotliFree(a1);
  return v4;
}

uint64_t BrotliClusterHistogramsDistance(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6, unsigned int *a7)
{
  size_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  void *__b;

  v13 = 4 * a3;
  if (a3)
  {
    __b = (void *)BrotliAllocate(a1);
    v14 = (unsigned int *)BrotliAllocate(a1);
  }
  else
  {
    __b = 0;
    v14 = 0;
  }
  v15 = (unsigned int *)BrotliAllocate(a1);
  v33 = a1;
  v34 = a6;
  v35 = (char *)BrotliAllocate(a1);
  v32 = a2;
  if (a3)
  {
    memset_pattern16(__b, &unk_19D02CD00, v13);
    v16 = 0;
    v17 = 0;
    do
    {
      memcpy((void *)(a5 + v16), (const void *)(a2 + v16), 0x890uLL);
      BrotliPopulationCostDistance(a2 + v16);
      *(_QWORD *)(a5 + v16 + 2184) = v18;
      a7[v17] = v17;
      ++v17;
      v16 += 2192;
    }
    while (a3 != v17);
    v19 = 0;
    v20 = 0;
    v21 = a3;
    do
    {
      v22 = v21 - 64;
      if (v21 >= 0x40)
        v21 = 64;
      if (a3 - v19 >= 0x40)
        v23 = 64;
      else
        v23 = a3 - v19;
      if (v23)
      {
        v24 = 0;
        do
        {
          v14[v20 + v24] = v19 + v24;
          ++v24;
        }
        while (v21 != v24);
      }
      v20 += BrotliHistogramCombineDistance(a5, v35, (uint64_t)__b, &a7[v19], &v14[v20], v15, v23, v23, a4, 0x800uLL);
      v19 += 64;
      v21 = v22;
    }
    while (v19 < a3);
  }
  else
  {
    v20 = 0;
  }
  if (v20 << 6 >= (v20 >> 1) * v20)
    v25 = (v20 >> 1) * v20;
  else
    v25 = v20 << 6;
  if (v25 < 0x800)
  {
    v28 = v33;
  }
  else
  {
    v26 = 2048;
    do
    {
      v27 = v26;
      v26 *= 2;
    }
    while (v27 <= v25);
    v28 = v33;
    v29 = (void *)BrotliAllocate(v33);
    memcpy(v29, v15, 0xC000uLL);
    BrotliFree(v33);
    v15 = (unsigned int *)v29;
  }
  v30 = BrotliHistogramCombineDistance(a5, v35, (uint64_t)__b, a7, v14, v15, v20, a3, a4, v25);
  BrotliFree(v28);
  BrotliFree(v28);
  BrotliHistogramRemapDistance(v32, a3, v14, v30, a5, v35, (uint64_t)a7);
  BrotliFree(v28);
  BrotliFree(v28);
  result = BrotliHistogramReindexDistance(v28, a5, a7, a3);
  *v34 = result;
  return result;
}

__CFString *JEGestaltGetMarketingDeviceFamilyName()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;

  v0 = (__CFString *)MGGetStringAnswer();
  v1 = v0;
  if (!v0)
    v0 = CFSTR("Unknown");
  v2 = v0;

  return v2;
}

__CFString *JEGestaltGetLocalizedDeviceModel()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;

  v0 = (__CFString *)MGGetStringAnswer();
  v1 = v0;
  if (v0)
  {
    if (-[__CFString isEqualToString:](v0, "isEqualToString:", CFSTR("iPod")))
      v2 = CFSTR("iPod touch");
    else
      v2 = v1;
  }
  else
  {
    v2 = CFSTR("Unknown");
  }
  v3 = v2;

  return v3;
}

uint64_t JEGestaltHasHEVCDecoding()
{
  return MGGetBoolAnswer();
}

uint64_t JEGestaltHasWAPICapability()
{
  return MGGetBoolAnswer();
}

uint64_t JEGestaltIsAppleSiliconMac()
{
  return 0;
}

id NullableValueForKeyPathArray(void *a1, void *a2, unint64_t a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t i;
  void *v27;
  void *v29;
  void *v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v5;
  v29 = v7;
  if (!v7)
  {
LABEL_17:
    v18 = 0;
LABEL_19:
    v19 = v18;
    v20 = v19;
    goto LABEL_34;
  }
  v31 = v7;
  while (1)
  {
    if (a3 >= objc_msgSend(v6, "count"))
    {
      v18 = v31;
      goto LABEL_19;
    }
    objc_msgSend(v6, "objectAtIndexedSubscript:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hasSuffix:", CFSTR("]")))
      break;
    objc_msgSend(v31, "valueForKeyPath:", v8);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = v31;
    v14 = (id)v12;
LABEL_16:

    ++a3;
    v31 = v14;
    if (!v14)
      goto LABEL_17;
  }
  v9 = objc_msgSend(v8, "rangeOfString:", CFSTR("["));
  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
  {
    JEMetricsOSLog();
    v21 = objc_claimAutoreleasedReturnValue();
    v30 = v21;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v8;
      _os_log_impl(&dword_19CCBB000, v21, OS_LOG_TYPE_ERROR, "JetEngine: Invalid key path %@", buf, 0xCu);
    }
LABEL_22:
    v20 = 0;
    goto LABEL_33;
  }
  objc_msgSend(v8, "substringToIndex:", v9);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "valueForKeyPath:");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v10;
  else
    v11 = 0;

  if (!v11)
    goto LABEL_22;
  objc_msgSend(v8, "substringWithRange:", v9 + 1, objc_msgSend(v8, "length") - v9 - 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v15, "length"))
  {
    v16 = objc_msgSend(v15, "integerValue");
    if ((v16 & 0x8000000000000000) == 0 && v16 < objc_msgSend(v11, "count"))
    {
      objc_msgSend(v11, "objectAtIndexedSubscript:", v16);
      v17 = objc_claimAutoreleasedReturnValue();

      v31 = (id)v17;
    }

    v13 = v30;
    v14 = v31;
    goto LABEL_16;
  }
  v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v22 = v11;
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v23)
  {
    v24 = *(_QWORD *)v33;
    v25 = a3 + 1;
    do
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v33 != v24)
          objc_enumerationMutation(v22);
        NullableValueForKeyPathArray(*(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * i), v6, v25);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        if (v27)
          objc_msgSend(v20, "addObject:", v27);

      }
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v23);
  }

LABEL_33:
  v19 = v31;
LABEL_34:

  return v20;
}

void sub_19CD96BD0(_Unwind_Exception *exception_object, int a2)
{
  id v2;
  void *v3;
  int v4;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(exception_object);
    objc_msgSend(v2, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("NSUnknownKeyException"));

    if (v4)
    {

      objc_end_catch();
      JUMPOUT(0x19CD96B84);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void *BrotliGetDictionary()
{
  return &kBrotliDictionary;
}

void BrotliEstimateBitCostsForLiterals(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  float v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (BrotliIsMostlyUTF8(a4, a1, a3, a2, 0.75))
  {
    v56 = 0;
    v57 = 0;
    v58 = 0;
    if (a2)
    {
      v11 = 0;
      v12 = a1;
      v13 = a2;
      do
      {
        if (*(char *)(a4 + (v12 & a3)) < 0)
        {
          v15 = 2 * (v11 > 0xDF);
          if (*(unsigned __int8 *)(a4 + (v12 & a3)) <= 0xBFu)
            v14 = v15;
          else
            v14 = 1;
        }
        else
        {
          v14 = 0;
        }
        v11 = *(unsigned __int8 *)(a4 + (v12 & a3));
        ++*(&v56 + v14);
        ++v12;
        --v13;
      }
      while (v13);
      v16 = (unint64_t)(v57 + v58) > 0x18;
    }
    else
    {
      v16 = 0;
    }
    if (a2 >= 0x1EF)
      v29 = 495;
    else
      v29 = a2;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    bzero(a5, 0x1800uLL);
    if (v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a1;
      do
      {
        v33 = *(char *)(a4 + (v32 & a3));
        v34 = *(unsigned __int8 *)(a4 + (v32 & a3));
        ++*(_QWORD *)&a5[(8 * v34) | (v31 << 11)];
        ++*(&v56 + v31);
        v31 = v30 >= 0xE0 && v16;
        if (v33 > 0xBFu)
          v31 = v16;
        if (v33 >= 0)
          v31 = 0;
        ++v32;
        v30 = v34;
        --v29;
      }
      while (v29);
    }
    if (a2)
    {
      v35 = 0;
      v36 = 2000;
      do
      {
        if (v35 >= 0x1EF)
        {
          if (v35 != 495
            && ((v37 = a1 + v35, v35 >= 0x1F1) ? (v38 = *(unsigned __int8 *)(a4 + ((v37 - 497) & a3))) : (v38 = 0),
                v39 = *(unsigned __int8 *)(a4 + ((v37 - 496) & a3)),
                (v39 & 0x80) != 0))
          {
            v40 = v16;
            if (v39 <= 0xBF)
              v40 = v38 >= 0xE0 && v16;
          }
          else
          {
            v40 = 0;
          }
          v41 = (8 * *(unsigned __int8 *)(a4 + ((a1 + v35 - 495) & a3))) | (v40 << 11);
          --*(_QWORD *)&a5[v41];
          --*(&v56 + v40);
        }
        if (v35 + 495 < a2)
        {
          v42 = *(unsigned __int8 *)(a4 + ((a1 + v35 + 493) & a3)) >= 0xE0u && v16;
          if (*(unsigned __int8 *)(a4 + ((a1 + v35 + 494) & a3)) > 0xBFu)
            v42 = v16;
          if (*(char *)(a4 + ((a1 + v35 + 494) & a3)) >= 0)
            v42 = 0;
          v43 = (8 * *(unsigned __int8 *)(a4 + ((a1 + v35 + 495) & a3))) | (v42 << 11);
          ++*(_QWORD *)&a5[v43];
          ++*(&v56 + v42);
        }
        if (v35)
        {
          v44 = a1 + v35;
          if (v35 == 1)
            v45 = 0;
          else
            v45 = *(unsigned __int8 *)(a4 + ((v44 - 2) & a3));
          v47 = *(unsigned __int8 *)(a4 + ((v44 - 1) & a3));
          v48 = v45 >= 0xE0 && v16;
          if (v47 > 0xBF)
            v48 = v16;
          v46 = (v47 & 0x80) != 0 && v48;
        }
        else
        {
          v46 = 0;
        }
        if (*(_QWORD *)&a5[(8 * *(unsigned __int8 *)(a4 + ((a1 + v35) & a3))) | (v46 << 11)] <= 1uLL)
          v49 = 1;
        else
          v49 = *(_QWORD *)&a5[(8 * *(unsigned __int8 *)(a4 + ((a1 + v35) & a3))) | (v46 << 11)];
        v50 = *(&v56 + v46);
        if (v50 > 0xFF)
          v51 = log2((double)v50);
        else
          v51 = kBrotliLog2Table[v50];
        if (v49 > 0xFF)
          v52 = log2((double)v49);
        else
          v52 = kBrotliLog2Table[v49];
        v53 = v51 - v52 + 0.02905;
        if (v53 < 1.0)
          v53 = v53 * 0.5 + 0.5;
        if (v35 <= 0x7CF)
          v53 = (double)v36 / -2000.0 * 0.35 + 0.7 + v53;
        v54 = v53;
        *(float *)(a6 + 4 * v35++) = v54;
        --v36;
      }
      while (a2 != v35);
    }
  }
  else
  {
    if (a2 >= 0x7D0)
      v17 = 2000;
    else
      v17 = a2;
    bzero(a5, 0x800uLL);
    if (v17)
    {
      v18 = a1;
      v19 = v17;
      do
      {
        ++*(_QWORD *)&a5[8 * *(unsigned __int8 *)(a4 + (v18++ & a3))];
        --v19;
      }
      while (v19);
    }
    if (a2)
    {
      v20 = 0;
      do
      {
        if (v20 >= 0x7D0)
        {
          v21 = *(unsigned __int8 *)(a4 + ((a1 + v20 - 2000) & a3));
          --*(_QWORD *)&a5[8 * v21];
          --v17;
        }
        v22 = v20 + 2000;
        if (v20 + 2000 < a2)
        {
          v23 = *(unsigned __int8 *)(a4 + ((a1 + v20 + 2000) & a3));
          ++*(_QWORD *)&a5[8 * v23];
          ++v17;
        }
        if (*(_QWORD *)&a5[8 * *(unsigned __int8 *)(a4 + ((a1 + v20) & a3))] <= 1uLL)
          v24 = 1;
        else
          v24 = *(_QWORD *)&a5[8 * *(unsigned __int8 *)(a4 + ((a1 + v20) & a3))];
        if (v17 > 0xFF)
          v25 = log2((double)v17);
        else
          v25 = kBrotliLog2Table[v17];
        if (v24 > 0xFF)
          v26 = log2((double)v24);
        else
          v26 = kBrotliLog2Table[v24];
        v27 = v25 - v26 + 0.029;
        if (v27 < 1.0)
          v27 = v27 * 0.5 + 0.5;
        v28 = v27;
        *(float *)(a6 + 4 * v20++) = v28;
      }
      while (v22 - 1999 != a2);
    }
  }
}

uint64_t BrotliEncoderSetParameter(uint64_t a1, int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 6972))
    return 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)a1 = a3;
      break;
    case 1:
      *(_DWORD *)(a1 + 4) = a3;
      break;
    case 2:
      *(_DWORD *)(a1 + 8) = a3;
      break;
    case 3:
      *(_DWORD *)(a1 + 12) = a3;
      break;
    case 4:
      if (a3 > 1)
        return 0;
      *(_DWORD *)(a1 + 32) = a3 != 0;
      break;
    case 5:
      *(_QWORD *)(a1 + 24) = a3;
      break;
    case 6:
      *(_DWORD *)(a1 + 36) = a3 != 0;
      break;
    case 7:
      *(_DWORD *)(a1 + 56) = a3;
      break;
    case 8:
      *(_DWORD *)(a1 + 60) = a3;
      break;
    case 9:
      if (a3 > 0x40000000)
        return 0;
      *(_QWORD *)(a1 + 16) = a3;
      break;
    default:
      return 0;
  }
  return 1;
}

void *(**BrotliEncoderCreateInstance(void *(*a1)(int a1, size_t size), void (*a2)(int a1, void *a2), void *(*a3)(int a1, size_t size)))(int a1, size_t size)
{
  void *(**v6)(int, size_t);
  void *(**v7)(int, size_t);

  v6 = (void *(**)(int, size_t))BrotliBootstrapAlloc(0x1B40uLL, (unint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v7 = v6;
  if (v6)
  {
    BrotliInitMemoryManager(v6 + 175, a1, a2, a3);
    *((_DWORD *)v7 + 9) = 0;
    *v7 = (void *(*)(int, size_t))0xB00000000;
    *((_DWORD *)v7 + 2) = 22;
    *(void *(**)(int, size_t))((char *)v7 + 12) = 0;
    *(void *(**)(int, size_t))((char *)v7 + 28) = 0;
    *(void *(**)(int, size_t))((char *)v7 + 20) = 0;
    BrotliInitSharedEncoderDictionary((uint64_t)(v7 + 10));
    *(_OWORD *)(v7 + 7) = xmmword_19D04B270;
    v7[9] = (void *(*)(int, size_t))67108860;
    v7[178] = 0;
    *((_WORD *)v7 + 806) = 0;
    *((_DWORD *)v7 + 1741) = 0;
    v7[871] = 0;
    *(_OWORD *)(v7 + 181) = 0u;
    *(_OWORD *)(v7 + 183) = 0u;
    *(_OWORD *)(v7 + 185) = 0u;
    *(_OWORD *)(v7 + 187) = 0u;
    *(_OWORD *)(v7 + 189) = 0u;
    *((_OWORD *)v7 + 101) = 0u;
    *((_OWORD *)v7 + 102) = 0u;
    *((_OWORD *)v7 + 103) = 0u;
    *((_DWORD *)v7 + 416) = 0;
    *((_OWORD *)v7 + 429) = 0u;
    *((_OWORD *)v7 + 430) = 0u;
    *((_OWORD *)v7 + 431) = 0u;
    *((_OWORD *)v7 + 432) = 0u;
    *((_OWORD *)v7 + 433) = 0u;
    *(_OWORD *)(v7 + 191) = xmmword_19D04B280;
    *(_OWORD *)(v7 + 199) = *(_OWORD *)(v7 + 191);
  }
  return v7;
}

uint64_t BrotliEncoderDestroyInstance(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = result + 1400;
    BrotliFree(result + 1400);
    v1[203] = 0;
    BrotliFree(v2);
    v1[185] = 0;
    BrotliFree(v2);
    v1[182] = 0;
    if (v1[204])
    {
      BrotliFree(v2);
      v1[204] = 0;
    }
    if (v1[205])
    {
      BrotliFree(v2);
      v1[205] = 0;
    }
    if (v1[206])
    {
      BrotliFree(v2);
      v1[206] = 0;
    }
    if (v1[207])
    {
      BrotliFree(v2);
      v1[207] = 0;
    }
    BrotliFree(v2);
    v1[858] = 0;
    BrotliFree(v2);
    v1[860] = 0;
    BrotliFree(v2);
    v1[861] = 0;
    BrotliFree(v2);
    v1[862] = 0;
    BrotliFree(v2);
    v1[863] = 0;
    BrotliCleanupSharedEncoderDictionary(v2, (uint64_t)(v1 + 10));
    return BrotliBootstrapFree((uint64_t)v1, v2);
  }
  return result;
}

uint64_t BrotliEncoderMaxCompressedSize(unint64_t a1)
{
  unint64_t v1;

  v1 = a1 + 4 * (a1 >> 14) + 6;
  if (v1 < a1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return 2;
}

uint64_t BrotliEncoderCompress(int a1, int a2, int a3, unint64_t a4, char *a5, unint64_t *a6, _WORD *a7)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v17;
  size_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  size_t v32;
  const void *v33;
  unint64_t v34;

  v9 = *a6;
  if (a4)
  {
    v10 = a4;
    if (a4 + 4 * (a4 >> 14) + 6 >= a4)
      v11 = a4 + 4 * (a4 >> 14) + 6;
    else
      v11 = 0;
    if (v9)
    {
      result = (uint64_t)BrotliEncoderCreateInstance(0, 0, 0);
      if (!result)
        return result;
      v17 = result;
      v33 = a5;
      v34 = v10;
      v18 = *a6;
      v31 = a7;
      v32 = v18;
      v30 = 0;
      if (!*(_DWORD *)(result + 6972))
      {
        *(_DWORD *)(result + 4) = a1;
        *(_DWORD *)(result + 8) = a2;
        *(_DWORD *)result = a3;
        *(_QWORD *)(result + 24) = v10;
        if (a2 >= 25)
          *(_DWORD *)(result + 36) = 1;
      }
      v19 = BrotliEncoderCompressStream(result, 2, &v34, &v33, &v32, &v31, &v30);
      if (*(_DWORD *)(v17 + 6964) == 2 && !*(_QWORD *)(v17 + 6928))
        v20 = v19;
      else
        v20 = 0;
      *a6 = v30;
      BrotliEncoderDestroyInstance(v17);
      if (v20 && (!v11 || *a6 <= v11))
        return 1;
      *a6 = 0;
      if (v11 - 1 < v9)
      {
        v21 = 0;
        *a7 = 801;
        v22 = 2;
        do
        {
          if (v10 >= 0x1000000)
            v23 = 0x1000000;
          else
            v23 = v10;
          if (v23 <= 0x100000)
            v24 = 1;
          else
            v24 = 2;
          if (v23 <= 0x10000)
            v24 = 0;
          v25 = 8 * v23 - 8;
          v26 = v25 | (2 * v24);
          v27 = (1 << ((4 * v24) | 0x13)) | v26;
          v28 = (char *)a7 + v22;
          *v28 = v26;
          v28[1] = BYTE1(v25);
          v29 = v22 + 3;
          v28[2] = BYTE2(v27);
          if (v23 > 0x100000)
          {
            *((_BYTE *)a7 + v29) = HIBYTE(v27);
            v29 = v22 + 4;
          }
          memcpy((char *)a7 + v29, &a5[v21], v23);
          v22 = v29 + v23;
          v21 += v23;
          v10 -= v23;
        }
        while (v10);
        *((_BYTE *)a7 + v22) = 3;
        *a6 = v22 + 1;
        return 1;
      }
    }
  }
  else if (v9)
  {
    result = 1;
    *a6 = 1;
    *(_BYTE *)a7 = 6;
    return result;
  }
  return 0;
}

uint64_t BrotliEncoderCompressStream(uint64_t a1, int a2, unint64_t *a3, const void **a4, size_t *a5, void **a6, size_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  __int128 v21;
  int v22;
  int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _WORD *v41;
  __n128 v42;
  __n128 v43;
  int32x4_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  size_t v66;
  char *v67;
  unsigned int v68;
  _BYTE *v69;
  _BYTE *v70;
  const void *v71;
  uint64_t v72;
  unint64_t v73;
  __n128 v74;
  __n128 v75;
  int32x4_t v76;
  int v77;
  unsigned int v78;
  _BYTE *v79;
  _BYTE *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  void *v86;
  char *v87;
  size_t v88;
  int v89;
  _DWORD *v90;
  int v91;
  int v92;
  unint64_t v93;
  _BOOL8 v94;
  _BOOL4 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  size_t v101;
  size_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  _BOOL4 v107;
  unint64_t v109;
  _BYTE *v110;
  int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  char v114;
  unint64_t v115;
  size_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  size_t v120;
  unint64_t v121;
  unint64_t *v122;
  int v123;
  uint64_t v124;
  unint64_t *v125;
  int v126[2];
  unint64_t v127;

  v14 = a1 + 1400;
  if (!*(_DWORD *)(a1 + 6972))
  {
    *(_DWORD *)(a1 + 1608) = -33554432;
    *(_DWORD *)(a1 + 6960) = -1;
    v15 = *(_DWORD *)(a1 + 4) & ~(*(int *)(a1 + 4) >> 31);
    if ((int)v15 >= 11)
      v15 = 11;
    *(_DWORD *)(a1 + 4) = v15;
    if (v15 <= 2)
      *(_DWORD *)(a1 + 36) = 0;
    v16 = *(_DWORD *)(a1 + 8);
    if (v16 >= 10)
    {
      if (*(_DWORD *)(a1 + 36))
        v17 = 30;
      else
        v17 = 24;
      if (v16 <= v17)
      {
LABEL_13:
        if (v15 >= 2)
        {
          if (v15 >= 4)
          {
            v38 = *(_DWORD *)(a1 + 12);
            if (v38)
            {
              if (v38 <= 16)
                v39 = 16;
              else
                v39 = *(_DWORD *)(a1 + 12);
              if (v39 >= 24)
                v40 = 24;
              else
                v40 = v39;
            }
            else
            {
              v40 = 16;
              if (v15 >= 9)
              {
                if (v16 >= 18)
                  v58 = 18;
                else
                  v58 = v16;
                if (v58 <= 16)
                  v40 = 16;
                else
                  v40 = v58;
              }
            }
            *(_DWORD *)(a1 + 12) = v40;
            if (*(_DWORD *)a1 == 2)
            {
              v19 = 12;
              v18 = 1;
            }
            else
            {
              v18 = *(_DWORD *)(a1 + 56);
              v19 = *(_DWORD *)(a1 + 60);
            }
            if (v18 > 3 || v19 > 0x78 || ((v19 >> v18) & 0xF) << v18 != v19)
            {
              v18 = 0;
              v19 = 0;
            }
            goto LABEL_17;
          }
          v16 = 14;
        }
        v18 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 12) = v16;
LABEL_17:
        BrotliInitDistanceParams(a1 + 56, v18, v19, *(_DWORD *)(a1 + 36));
        v20 = *(_QWORD *)(a1 + 16);
        if (v20)
        {
          *(_BYTE *)(a1 + 1611) = 2;
          *(_QWORD *)&v21 = 0xF0000000FLL;
          *((_QWORD *)&v21 + 1) = 0xF0000000FLL;
          *(_OWORD *)(a1 + 1528) = v21;
          *(_OWORD *)(a1 + 1592) = *(_OWORD *)(a1 + 1528);
        }
        v23 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a1 + 12);
        v24 = *(_DWORD *)(a1 + 4);
        if (v23 <= v22)
          v25 = *(_DWORD *)(a1 + 12);
        else
          v25 = *(_DWORD *)(a1 + 8);
        v26 = 1 << (v25 + 1);
        *(_DWORD *)(a1 + 1436) = v26 - 1;
        *(_DWORD *)(a1 + 1432) = v26;
        v27 = 1 << v22;
        *(_DWORD *)(a1 + 1440) = v27;
        *(_DWORD *)(a1 + 1444) = v26 + v27;
        if (v23 <= 18)
          v28 = 18;
        else
          v28 = v23;
        if (v24 >= 2)
          v28 = v23;
        if (v20)
        {
          v29 = (1 << v28) - 16;
          if (v20 >= v29)
            v20 = v29;
          *(_QWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (*(_DWORD *)(a1 + 36))
          {
            v30 = ((v28 & 0x3F) << 8) | 0x11;
            v31 = 14;
          }
          else if (v28 == 16)
          {
            v30 = 0;
            v31 = 1;
          }
          else if (v28 == 17)
          {
            v31 = 7;
            v30 = 1;
          }
          else if (v28 < 18)
          {
            v30 = 16 * v28 - 127;
            v31 = 7;
          }
          else
          {
            v30 = 2 * v28 - 33;
            v31 = 4;
          }
          *(_WORD *)(a1 + 1608) = v30;
          *(_BYTE *)(a1 + 1610) = v31;
        }
        if (v24 == 1)
        {
          *(_QWORD *)(a1 + 6888) = BrotliAllocate(v14);
        }
        else if (!v24)
        {
          v32 = BrotliAllocate(v14);
          *(_QWORD *)(a1 + 6880) = v32;
          *(_OWORD *)(v32 + 800) = xmmword_19D04AD71;
          *(_OWORD *)(v32 + 816) = unk_19D04AD81;
          *(_OWORD *)(v32 + 768) = InitCommandPrefixCodes_kDefaultCommandDepths;
          *(_OWORD *)(v32 + 784) = *(_OWORD *)algn_19D04AD61;
          *(_OWORD *)(v32 + 864) = xmmword_19D04ADB1;
          *(_OWORD *)(v32 + 880) = unk_19D04ADC1;
          *(_OWORD *)(v32 + 832) = xmmword_19D04AD91;
          *(_OWORD *)(v32 + 848) = unk_19D04ADA1;
          *(_OWORD *)(v32 + 928) = xmmword_19D04ADF2;
          *(_OWORD *)(v32 + 944) = unk_19D04AE02;
          *(_OWORD *)(v32 + 896) = InitCommandPrefixCodes_kDefaultCommandBits;
          *(_OWORD *)(v32 + 912) = unk_19D04ADE2;
          *(_OWORD *)(v32 + 992) = xmmword_19D04AE32;
          *(_OWORD *)(v32 + 1008) = unk_19D04AE42;
          *(_OWORD *)(v32 + 960) = xmmword_19D04AE12;
          *(_OWORD *)(v32 + 976) = unk_19D04AE22;
          *(_OWORD *)(v32 + 1072) = unk_19D04AE82;
          *(_OWORD *)(v32 + 1056) = xmmword_19D04AE72;
          *(_OWORD *)(v32 + 1040) = unk_19D04AE62;
          *(_OWORD *)(v32 + 1024) = xmmword_19D04AE52;
          *(_OWORD *)(v32 + 1136) = unk_19D04AEC2;
          *(_OWORD *)(v32 + 1120) = xmmword_19D04AEB2;
          *(_OWORD *)(v32 + 1104) = unk_19D04AEA2;
          *(_OWORD *)(v32 + 1088) = xmmword_19D04AE92;
          *(_OWORD *)(v32 + 1664) = InitCommandPrefixCodes_kDefaultCommandCode;
          *(_OWORD *)(v32 + 1680) = unk_19D04AEE2;
          *(_OWORD *)(v32 + 1696) = xmmword_19D04AEF2;
          *(_OWORD *)(v32 + 1705) = *(__int128 *)((char *)&xmmword_19D04AEF2 + 9);
          *(_QWORD *)(v32 + 2176) = 448;
        }
        *(_DWORD *)(a1 + 6972) = 1;
        goto LABEL_39;
      }
    }
    else
    {
      v17 = 10;
    }
    *(_DWORD *)(a1 + 8) = v17;
    v16 = v17;
    goto LABEL_13;
  }
LABEL_39:
  v33 = *(unsigned int *)(a1 + 6960);
  v125 = a3;
  if ((_DWORD)v33 != -1)
  {
    result = 0;
    if (a2 != 3 || *a3 != v33)
      return result;
LABEL_44:
    if (!*(_QWORD *)(a1 + 24))
    {
      v35 = 0x40000000;
      if (!((*(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1520)) >> 30))
        v35 = (*(_DWORD *)(a1 + 1424) - *(_DWORD *)(a1 + 1520));
      *(_QWORD *)(a1 + 24) = v35;
    }
    if (*a3 <= 0x1000000)
    {
      v36 = *(_DWORD *)(a1 + 6964);
      if (!v36)
      {
        *(_DWORD *)(a1 + 6960) = *a3;
        *(_DWORD *)(a1 + 6964) = 3;
LABEL_64:
        v41 = (_WORD *)(a1 + 6944);
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (InjectFlushOrPushOutput(a1, a5, a6, a7))
                ;
              if (*(_QWORD *)(a1 + 6928))
                return 1;
              if (*(_QWORD *)(a1 + 1424) == *(_QWORD *)(a1 + 1512))
                break;
              result = EncodeData(a1, 0, 1, (unint64_t *)(a1 + 6928), (_QWORD *)(a1 + 6920), v42, v43, v44);
              if (!(_DWORD)result)
                return result;
            }
            if (*(_DWORD *)(a1 + 6964) == 3)
              break;
            v49 = *(unsigned int *)(a1 + 6960);
            if (!(_DWORD)v49)
            {
              *(_QWORD *)(a1 + 6960) = 0xFFFFFFFFLL;
              return 1;
            }
            if (*a5)
            {
              if (v49 >= *a5)
                v50 = *a5;
              else
                v50 = *(unsigned int *)(a1 + 6960);
              memcpy(*a6, *a4, v50);
              *a4 = (char *)*a4 + v50;
              *a3 -= v50;
              *(_QWORD *)(a1 + 6912) += v50;
              *(_DWORD *)(a1 + 6960) -= v50;
              *a6 = (char *)*a6 + v50;
              *a5 -= v50;
            }
            else
            {
              if (v49 >= 0x10)
                v51 = 16;
              else
                v51 = v49;
              *(_QWORD *)(a1 + 6920) = v41;
              memcpy((void *)(a1 + 6944), *a4, v51);
              *a4 = (char *)*a4 + v51;
              *a3 -= v51;
              *(_QWORD *)(a1 + 6912) += v51;
              *(_DWORD *)(a1 + 6960) -= v51;
              *(_QWORD *)(a1 + 6928) = v51;
            }
          }
          *(_QWORD *)(a1 + 6920) = v41;
          v45 = *(unsigned int *)(a1 + 6960);
          v46 = *(unsigned __int8 *)(a1 + 1610);
          *v41 = *(_WORD *)(a1 + 1608);
          *(_WORD *)(a1 + 1608) = 0;
          *(_QWORD *)((char *)v41 + (v46 >> 3)) = *((unsigned __int8 *)v41 + (v46 >> 3));
          *(_BYTE *)(a1 + 1610) = 0;
          *(_QWORD *)((char *)v41 + ((v46 + 1) >> 3)) = (3 << ((v46 + 1) & 7)) | *((unsigned __int8 *)v41
                                                                                   + ((v46 + 1) >> 3));
          *(_QWORD *)((char *)v41 + ((v46 + 3) >> 3)) = *((unsigned __int8 *)v41 + ((v46 + 3) >> 3));
          v47 = v46 + 4;
          if ((_DWORD)v45 == 1)
          {
            v52 = 1;
          }
          else
          {
            if (!(_DWORD)v45)
            {
              *(_QWORD *)((char *)v41 + (v47 >> 3)) = *((unsigned __int8 *)v41 + (v47 >> 3));
              v48 = v46 + 6;
              goto LABEL_87;
            }
            v52 = ((__clz(v45 - 1) ^ 0x18) + 8) >> 3;
          }
          *(_QWORD *)((char *)v41 + (v47 >> 3)) = ((unint64_t)v52 << (v47 & 7)) | *((unsigned __int8 *)v41
                                                                                         + (v47 >> 3));
          v53 = v46 + 6;
          *(_QWORD *)((char *)v41 + (v53 >> 3)) = ((v45 - 1) << (v53 & 7)) | *((unsigned __int8 *)v41 + (v53 >> 3));
          v48 = v53 + 8 * v52;
LABEL_87:
          *(_QWORD *)(a1 + 6928) = (v48 + 7) >> 3;
          *(_DWORD *)(a1 + 6964) = 4;
        }
      }
      if ((v36 - 3) <= 1)
        goto LABEL_64;
    }
    return 0;
  }
  if (a2 == 3)
    goto LABEL_44;
  v37 = *(_DWORD *)(a1 + 6964);
  if ((v37 - 3) < 2 || v37 && *a3)
    return 0;
  v54 = *(_DWORD *)(a1 + 4);
  v124 = v14;
  v123 = a2;
  if (v54 < 2)
  {
    v55 = *a3;
    v121 = 1 << *(_DWORD *)(a1 + 8);
    if (*a3 >= v121)
      v55 = 1 << *(_DWORD *)(a1 + 8);
    if (v55 >= 0x20000)
      v56 = 0x20000;
    else
      v56 = v55;
    if (v54 == 1)
    {
      v119 = *(unsigned __int8 **)(a1 + 6896);
      if (!v119 && v55 >> 17)
      {
        *(_QWORD *)(a1 + 6896) = BrotliAllocate(v14);
        v57 = BrotliAllocate(v14);
        *(_QWORD *)(a1 + 6904) = v57;
        v118 = (unsigned __int8 *)v57;
        v119 = *(unsigned __int8 **)(a1 + 6896);
        if (v119)
        {
          while (1)
          {
LABEL_205:
            while (InjectFlushOrPushOutput(a1, a5, a6, a7))
              ;
            if (*(_QWORD *)(a1 + 6928) || *(_DWORD *)(a1 + 6964) || (v104 = *a3, !a2) && !v104)
            {
              BrotliFree(v14);
              BrotliFree(v14);
              if (*(_DWORD *)(a1 + 6964) == 1 && !*(_QWORD *)(a1 + 6928))
              {
LABEL_244:
                *(_DWORD *)(a1 + 6964) = 0;
                *(_QWORD *)(a1 + 6920) = 0;
              }
              return 1;
            }
            if (v121 >= v104)
              v105 = *a3;
            else
              v105 = v121;
            v106 = v104 <= v121 && a2 == 2;
            v107 = v104 <= v121 && a2 == 1;
            v127 = *(unsigned __int8 *)(a1 + 1610);
            *(_QWORD *)v126 = 0;
            if (v107 && v105 == 0)
            {
              v111 = 1;
LABEL_238:
              *(_DWORD *)(a1 + 6964) = v111;
              goto LABEL_239;
            }
            v109 = 2 * v105 + 503;
            v120 = *a5;
            v110 = v109 <= *a5 ? *a6 : (_BYTE *)GetBrotliStorage(a1, 2 * v105 + 503);
            *v110 = *(_BYTE *)(a1 + 1608);
            v110[1] = *(_BYTE *)(a1 + 1609);
            GetHashTable((_QWORD *)a1, *(_DWORD *)(a1 + 4), v105, (unint64_t *)v126);
            v113 = (unsigned __int8 *)*a4;
            if (*(_DWORD *)(a1 + 4))
              break;
            BrotliCompressFragmentFast(*(_QWORD *)(a1 + 6880), v113, v105, v106, v112, v126[0], &v127, (uint64_t)v110);
            if (v105)
              goto LABEL_229;
LABEL_230:
            v114 = v127;
            v115 = v127 >> 3;
            if (v109 <= v120)
            {
              *a6 = (char *)*a6 + v115;
              *a5 -= v115;
              v116 = *(_QWORD *)(a1 + 6936) + v115;
              *(_QWORD *)(a1 + 6936) = v116;
              v14 = v124;
              if (a7)
                *a7 = v116;
            }
            else
            {
              *(_QWORD *)(a1 + 6920) = v110;
              *(_QWORD *)(a1 + 6928) = v115;
              v14 = v124;
            }
            *(_WORD *)(a1 + 1608) = v110[v115];
            *(_BYTE *)(a1 + 1610) = v114 & 7;
            a3 = v125;
            if ((v107 | v106) == 1)
            {
              if (v106)
                v111 = 2;
              else
                v111 = 1;
              goto LABEL_238;
            }
LABEL_239:
            a2 = v123;
          }
          BrotliCompressFragmentTwoPass(*(unsigned int **)(a1 + 6888), (char *)v113, v105, v106, v119, v118, v112, v126[0], &v127, (uint64_t)v110);
          if (!v105)
            goto LABEL_230;
LABEL_229:
          *a4 = (char *)*a4 + v105;
          *v125 -= v105;
          *(_QWORD *)(a1 + 6912) += v105;
          goto LABEL_230;
        }
LABEL_203:
        v117 = BrotliAllocate(v14);
        v118 = (unsigned __int8 *)BrotliAllocate(v14);
        v119 = (unsigned __int8 *)v117;
        goto LABEL_205;
      }
      if (v119)
      {
        v118 = *(unsigned __int8 **)(a1 + 6904);
        goto LABEL_205;
      }
      if (v56)
        goto LABEL_203;
    }
    v118 = 0;
    v119 = 0;
    goto LABEL_205;
  }
  v122 = (unint64_t *)(a1 + 6928);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v59 = *(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1520);
        v60 = 1 << *(_DWORD *)(a1 + 12);
        v61 = v60 >= v59;
        v62 = v60 - v59;
        if (!v61)
          v62 = 0;
        v63 = *(char *)(a1 + 1611);
        v64 = v62 >= v63 ? *(char *)(a1 + 1611) : v62;
        v65 = (v63 & 0x80000000) == 0 ? v64 : v62;
        if (!v65 || !*a3)
          break;
        if (v65 >= *a3)
          v66 = *a3;
        else
          v66 = v65;
        v67 = (char *)*a4;
        v68 = *(_DWORD *)(a1 + 1452);
        if (v68 || v66 >= *(unsigned int *)(a1 + 1440))
        {
          v78 = *(_DWORD *)(a1 + 1444);
          if (*(_DWORD *)(a1 + 1448) < v78)
          {
            v79 = (_BYTE *)BrotliAllocate(v124);
            v80 = v79;
            v81 = *(const void **)(a1 + 1456);
            if (v81)
            {
              memcpy(v79, v81, (*(_DWORD *)(a1 + 1448) + 2) + 7);
              BrotliFree(v124);
            }
            v82 = 0;
            *(_QWORD *)(a1 + 1456) = v80;
            *(_DWORD *)(a1 + 1448) = v78;
            *(_QWORD *)(a1 + 1464) = v80 + 2;
            v80[1] = 0;
            *(_BYTE *)(*(_QWORD *)(a1 + 1464) - 2) = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a1 + 1464) + *(unsigned int *)(a1 + 1448) + v82++) = 0;
            while (v82 != 7);
            *(_BYTE *)(*(_QWORD *)(a1 + 1464) + (*(_DWORD *)(a1 + 1432) - 2)) = 0;
            *(_BYTE *)(*(_QWORD *)(a1 + 1464) + (*(_DWORD *)(a1 + 1432) - 1)) = 0;
            *(_BYTE *)(*(_QWORD *)(a1 + 1464) + *(unsigned int *)(a1 + 1432)) = -15;
            v68 = *(_DWORD *)(a1 + 1452);
          }
          v83 = *(_DWORD *)(a1 + 1436) & v68;
          v84 = *(unsigned int *)(a1 + 1440);
          v85 = *(unsigned int *)(a1 + 1432);
          if (v83 < v84)
          {
            if (v66 >= v84 - v83)
              v101 = v84 - v83;
            else
              v101 = v66;
            memcpy((void *)(*(_QWORD *)(a1 + 1464) + v85 + v83), v67, v101);
            v85 = *(unsigned int *)(a1 + 1432);
          }
          v86 = (void *)(*(_QWORD *)(a1 + 1464) + v83);
          if (v66 + v83 > v85)
          {
            if (v66 >= (unint64_t)*(unsigned int *)(a1 + 1444) - v83)
              v102 = *(unsigned int *)(a1 + 1444) - v83;
            else
              v102 = v66;
            memcpy(v86, v67, v102);
            v86 = *(void **)(a1 + 1464);
            v103 = *(unsigned int *)(a1 + 1432) - v83;
            v87 = &v67[v103];
            v88 = v66 - v103;
          }
          else
          {
            v87 = v67;
            v88 = v66;
          }
          memcpy(v86, v87, v88);
          v89 = *(_DWORD *)(a1 + 1452);
          *(_BYTE *)(*(_QWORD *)(a1 + 1464) - 2) = *(_BYTE *)(*(_QWORD *)(a1 + 1464)
                                                              + (*(_DWORD *)(a1 + 1432) - 2));
          *(_BYTE *)(*(_QWORD *)(a1 + 1464) - 1) = *(_BYTE *)(*(_QWORD *)(a1 + 1464)
                                                              + (*(_DWORD *)(a1 + 1432) - 1));
          if (v89 >= 0)
            v73 = (*(_DWORD *)(a1 + 1452) & 0x7FFFFFFF) + (v66 & 0x7FFFFFFF);
          else
            v73 = ((*(_DWORD *)(a1 + 1452) & 0x7FFFFFFF) + (v66 & 0x7FFFFFFF)) | 0x80000000;
          *(_DWORD *)(a1 + 1452) = v73;
        }
        else
        {
          *(_DWORD *)(a1 + 1452) = v66;
          v69 = (_BYTE *)BrotliAllocate(v124);
          v70 = v69;
          v71 = *(const void **)(a1 + 1456);
          if (v71)
          {
            memcpy(v69, v71, (*(_DWORD *)(a1 + 1448) + 2) + 7);
            BrotliFree(v124);
          }
          v72 = 0;
          *(_QWORD *)(a1 + 1456) = v70;
          *(_DWORD *)(a1 + 1448) = v66;
          *(_QWORD *)(a1 + 1464) = v70 + 2;
          v70[1] = 0;
          *(_BYTE *)(*(_QWORD *)(a1 + 1464) - 2) = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 1464) + *(unsigned int *)(a1 + 1448) + v72++) = 0;
          while (v72 != 7);
          memcpy(*(void **)(a1 + 1464), v67, v66);
          v73 = *(unsigned int *)(a1 + 1452);
        }
        a3 = v125;
        *(_QWORD *)(a1 + 1424) += v66;
        if (v73 <= *(unsigned int *)(a1 + 1436))
        {
          v90 = (_DWORD *)(*(_QWORD *)(a1 + 1464) + v73);
          *(_DWORD *)((char *)v90 + 3) = 0;
          *v90 = 0;
        }
        *a4 = (char *)*a4 + v66;
        *v125 -= v66;
        *(_QWORD *)(a1 + 6912) += v66;
        v91 = *(char *)(a1 + 1611);
        if (v91 >= 1)
          *(_BYTE *)(a1 + 1611) = v91 - v66;
      }
      if (!InjectFlushOrPushOutput(a1, a5, a6, a7))
        break;
      if (*(unsigned __int8 *)(a1 + 1611) == 255)
      {
        v77 = *(_DWORD *)(a1 + 6964);
        if (!v77)
          goto LABEL_143;
        if (v77 == 1 && !*v122)
        {
          *(_DWORD *)(a1 + 6964) = 0;
          *(_QWORD *)(a1 + 6920) = 0;
LABEL_143:
          *(_BYTE *)(a1 + 1611) = -2;
        }
      }
    }
    if (*v122)
      return 1;
    v92 = *(_DWORD *)(a1 + 6964);
    if (v92)
    {
      if (v92 == 1)
        goto LABEL_244;
      return 1;
    }
    if (!v123 && v65)
      return 1;
    v93 = *a3;
    if (*a3)
      v94 = 0;
    else
      v94 = v123 == 2;
    if (*a3)
      v95 = 0;
    else
      v95 = v123 == 1;
    if (!v94 && !*(_BYTE *)(a1 + 1611))
    {
      *(_BYTE *)(a1 + 1611) = -1;
      v95 = 1;
    }
    if (!*(_QWORD *)(a1 + 24))
    {
      v96 = *(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1520);
      v97 = v96 | v93;
      v99 = v96 + v93;
      v98 = (v97 | v99) >> 30;
      v99 = v99;
      if (v98)
        v99 = 0x40000000;
      *(_QWORD *)(a1 + 24) = v99;
    }
    result = EncodeData(a1, v94, v95, v122, (_QWORD *)(a1 + 6920), v74, v75, v76);
    if (!(_DWORD)result)
      return result;
    if (v94 || v95)
    {
      if (v94)
        v100 = 2;
      else
        v100 = 1;
      *(_DWORD *)(a1 + 6964) = v100;
    }
  }
}

BOOL BrotliEncoderIsFinished(uint64_t a1)
{
  return *(_DWORD *)(a1 + 6964) == 2 && *(_QWORD *)(a1 + 6928) == 0;
}

uint64_t InjectFlushOrPushOutput(uint64_t a1, size_t *a2, void **a3, size_t *a4)
{
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  _BYTE *v12;
  size_t v13;
  size_t v14;
  size_t v15;

  if (*(_DWORD *)(a1 + 6964) == 1 && (v8 = *(unsigned __int8 *)(a1 + 1610), *(_BYTE *)(a1 + 1610)))
  {
    v9 = *(_WORD *)(a1 + 1608);
    *(_WORD *)(a1 + 1608) = 0;
    *(_BYTE *)(a1 + 1610) = 0;
    v10 = (6 << v8) | v9;
    v11 = *(_QWORD *)(a1 + 6920);
    if (v11)
    {
      v12 = (_BYTE *)(v11 + *(_QWORD *)(a1 + 6928));
    }
    else
    {
      v12 = (_BYTE *)(a1 + 6944);
      *(_QWORD *)(a1 + 6920) = a1 + 6944;
    }
    *v12 = v10;
    if (v8 >= 3)
    {
      v12[1] = HIBYTE(v10);
      if (v8 >= 0xB)
        v12[2] = (6 << v8) >> 16;
    }
    *(_QWORD *)(a1 + 6928) += (unint64_t)(v8 + 13) >> 3;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 6928);
    if (!v13 || !*a2)
      return 0;
    if (v13 >= *a2)
      v14 = *a2;
    else
      v14 = *(_QWORD *)(a1 + 6928);
    memcpy(*a3, *(const void **)(a1 + 6920), v14);
    *a3 = (char *)*a3 + v14;
    *a2 -= v14;
    *(_QWORD *)(a1 + 6920) += v14;
    *(_QWORD *)(a1 + 6928) -= v14;
    v15 = *(_QWORD *)(a1 + 6936) + v14;
    *(_QWORD *)(a1 + 6936) = v15;
    if (a4)
      *a4 = v15;
  }
  return 1;
}

uint64_t EncodeData(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, _QWORD *a5, __n128 a6, __n128 a7, int32x4_t a8)
{
  _QWORD *v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  unsigned __int8 v23;
  int v24;
  _BYTE *BrotliStorage;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  unint64_t v32;
  const void *v33;
  BOOL v34;
  int v35;
  _OWORD *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t i;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  const float *v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 v74;
  unint64_t v75;
  _WORD *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _WORD *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int16 v89;
  __int16 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v144;
  unint64_t v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t v156;
  _DWORD *v157;
  int *v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  unint64_t v178;
  __int16 v179;
  __int16 *v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  unint64_t v187;
  __int16 v188;
  __int16 *v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  __int16 v194;
  uint64_t v195;
  unint64_t v196;
  __int16 v197;
  __int16 *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  _BYTE *v212;
  int v213;
  int v214;
  int v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _WORD *v226;
  unsigned int v227;
  unsigned int v228;
  _BYTE *v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int v232;
  unint64_t v233;
  uint64_t v234;
  _OWORD *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  size_t v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  double v245;
  int *v246;
  uint64_t v247;
  double v248;
  uint64_t v249;
  double v250;
  double v251;
  double v252;
  int v253;
  BOOL v254;
  int v255;
  int v256;
  double v257;
  int v258;
  size_t v259;
  _DWORD *v260;
  uint64_t v261;
  unint64_t v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t j;
  unint64_t v270;
  unsigned __int8 v271;
  unsigned int v272;
  unint64_t v273;
  uint64_t v274;
  double v275;
  unsigned int *v276;
  uint64_t v277;
  double v278;
  uint64_t v279;
  double v280;
  double v281;
  double v282;
  _OWORD *v283;
  unint64_t v284;
  uint64_t v285;
  double v286;
  char *v287;
  uint64_t v288;
  double v289;
  uint64_t v290;
  double v291;
  double v292;
  uint64_t v293;
  double v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int v299;
  unint64_t v300;
  int v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  double v305;
  char v306;
  uint64_t v307;
  double v308;
  unint64_t v309;
  double v310;
  uint64_t v311;
  double v312;
  double v313;
  uint64_t v314;
  uint64_t v315;
  double v316;
  char v317;
  uint64_t v318;
  double v319;
  unint64_t v320;
  double v321;
  uint64_t v322;
  double v323;
  double v324;
  uint64_t v325;
  uint64_t v326;
  double v327;
  _QWORD *v328;
  uint64_t v329;
  double v330;
  unint64_t v331;
  double v332;
  uint64_t v333;
  double v334;
  double v335;
  uint64_t v336;
  double v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char v341;
  double v342;
  uint64_t v343;
  double v344;
  unint64_t v345;
  double v346;
  uint64_t v347;
  double v348;
  uint64_t v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  unint64_t v360;
  unint64_t v361;
  int v362;
  _BYTE *v363;
  _BYTE *v364;
  unint64_t *v365;
  _OWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char v370;
  unint64_t v371;
  char v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int *v375;
  unint64_t v376;
  unsigned int v377;
  unint64_t v378;
  uint64_t v379;
  int *v380;
  int v381;
  _DWORD *v382;
  __n128 *v383;
  _OWORD *v384;
  uint64_t v386;
  unint64_t v387;
  unsigned int v388;
  unsigned int v389;
  _OWORD __dst[88];
  int v391[4];
  __int128 v392;
  __int128 v393;
  _OWORD v394[3];
  _OWORD v395[3];
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  _QWORD v401[3];
  uint64_t v402;
  int v403;
  uint64_t v404;

  v8 = a5;
  v404 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 1424);
  v14 = *(_QWORD *)(a1 + 1520);
  v15 = v13 - v14;
  v389 = v13 - v14;
  if (v14 >> 30 >= 3)
    v16 = (((2 * (int)v14) >> 1) & 0xC0000000 | v14 & 0x3FFFFFFF) ^ 0x80000000;
  else
    v16 = v14;
  v388 = v16;
  v17 = *(_DWORD *)(a1 + 4);
  v18 = *(uint64_t **)(a1 + 1464);
  v19 = *(unsigned int *)(a1 + 1436);
  if (v13 != v14)
  {
LABEL_14:
    if ((signed int)v17 > *(_DWORD *)(a1 + 1392) || *(_DWORD *)(a1 + 6968))
      return 0;
    if ((_DWORD)a2)
      *(_DWORD *)(a1 + 6968) = 1;
    if (v15 > 1 << *(_DWORD *)(a1 + 12))
      return 0;
    if (!v17)
      goto LABEL_26;
    v386 = a1 + 1400;
    if (v17 == 1)
    {
      if (!*(_QWORD *)(a1 + 6896))
      {
        *(_QWORD *)(a1 + 6896) = BrotliAllocate(v386);
        *(_QWORD *)(a1 + 6904) = BrotliAllocate(v386);
      }
LABEL_26:
      *(_QWORD *)&__dst[0] = *(unsigned __int8 *)(a1 + 1610);
      *(_QWORD *)v391 = 0;
      BrotliStorage = (_BYTE *)GetBrotliStorage(a1, (2 * v15 + 503));
      *BrotliStorage = *(_BYTE *)(a1 + 1608);
      BrotliStorage[1] = *(_BYTE *)(a1 + 1609);
      GetHashTable((_QWORD *)a1, *(_DWORD *)(a1 + 4), v15, (unint64_t *)v391);
      v27 = (char *)v18 + (v19 & v16);
      if (*(_DWORD *)(a1 + 4))
        BrotliCompressFragmentTwoPass(*(unsigned int **)(a1 + 6888), v27, v15, a2, *(unsigned __int8 **)(a1 + 6896), *(unsigned __int8 **)(a1 + 6904), v26, v391[0], (unint64_t *)__dst, (uint64_t)BrotliStorage);
      else
        BrotliCompressFragmentFast(*(_QWORD *)(a1 + 6880), (unsigned __int8 *)v27, v15, a2, v26, v391[0], (unint64_t *)__dst, (uint64_t)BrotliStorage);
      v31 = __dst[0];
      v32 = *(_QWORD *)&__dst[0] >> 3;
      *(_WORD *)(a1 + 1608) = BrotliStorage[*(_QWORD *)&__dst[0] >> 3];
      *(_BYTE *)(a1 + 1610) = v31 & 7;
      UpdateLastProcessedPos(a1);
      *v8 = BrotliStorage;
LABEL_33:
      *a4 = v32;
      return 1;
    }
    v28 = (v15 >> 1) + *(_QWORD *)(a1 + 1488) + 1;
    if (v28 > *(_QWORD *)(a1 + 1472))
    {
      v29 = v28 + (v15 >> 2) + 16;
      *(_QWORD *)(a1 + 1472) = v29;
      if (v29)
        v30 = (void *)BrotliAllocate(v386);
      else
        v30 = 0;
      v33 = *(const void **)(a1 + 1480);
      if (v33)
      {
        memcpy(v30, v33, 16 * *(_QWORD *)(a1 + 1488));
        BrotliFree(v386);
      }
      *(_QWORD *)(a1 + 1480) = v30;
      v8 = a5;
    }
    v383 = (__n128 *)(a1 + 1632);
    if ((_DWORD)a2)
      v34 = (_DWORD)v16 == 0;
    else
      v34 = 0;
    v35 = v34;
    if (*(_DWORD *)(a1 + 1664))
    {
      v382 = (_DWORD *)(a1 + 1704);
      if (*(_DWORD *)(a1 + 1704))
        goto LABEL_143;
      goto LABEL_121;
    }
    memset(__dst, 0, 32);
    v36 = (_OWORD *)(a1 + 40);
    v37 = *(_DWORD *)(a1 + 4);
    if ((int)v37 < 10)
    {
      if (v37 == 4)
      {
        if (*(_QWORD *)(a1 + 24) >= 0x100000uLL)
          v37 = 54;
      }
      else if ((int)v37 > 4)
      {
        v40 = *(_DWORD *)(a1 + 8);
        if (v40 > 16)
        {
          v47 = v37 - 1;
          if (v40 < 0x13 || *(_QWORD *)(a1 + 24) < 0x100000uLL)
          {
            if (v37 >= 9)
              v253 = 16;
            else
              v253 = 10;
            v254 = v37 >= 7;
            if (v37 < 7)
              v255 = 14;
            else
              v255 = 15;
            *(_DWORD *)(a1 + 40) = 5;
            *(_DWORD *)(a1 + 44) = v255;
            if (v254)
              v256 = v253;
            else
              v256 = 4;
            *(_DWORD *)(a1 + 48) = v47;
            *(_DWORD *)(a1 + 52) = v256;
            v37 = 5;
          }
          else
          {
            *(_QWORD *)(a1 + 40) = 0xF00000006;
            if (v37 >= 9)
              v48 = 16;
            else
              v48 = 10;
            if (v37 >= 7)
              v49 = v48;
            else
              v49 = 4;
            *(_DWORD *)(a1 + 48) = v47;
            *(_DWORD *)(a1 + 52) = v49;
            v37 = 6;
          }
LABEL_50:
          v38 = *(_DWORD *)(a1 + 8);
          if (v38 >= 25)
          {
            switch(v37)
            {
              case 0x36u:
                *(_DWORD *)(a1 + 40) = 55;
                v380 = (int *)(a1 + 1688);
                *(_OWORD *)(a1 + 1688) = *v36;
                *(_QWORD *)(a1 + 1680) = 0;
                *(_QWORD *)(a1 + 1672) = 0;
                a6 = (__n128)xmmword_19D04B2A0;
LABEL_72:
                a7.n128_u64[0] = 0x4000000;
                __dst[0] = a6;
                __dst[1] = xmmword_19D04B290;
                goto LABEL_94;
              case 6u:
                *(_DWORD *)(a1 + 40) = 65;
                v380 = (int *)(a1 + 1688);
                *(_OWORD *)(a1 + 1688) = *v36;
                *(_QWORD *)(a1 + 1680) = 0;
                *(_QWORD *)(a1 + 1672) = 0;
                v42 = *(_DWORD *)(a1 + 44);
                v43 = *(_DWORD *)(a1 + 48);
                *(_QWORD *)&__dst[0] = 2 << v42;
                *((_QWORD *)&__dst[0] + 1) = 4 << v42 << v43;
                a6.n128_u64[0] = 0x4000000;
                __dst[1] = xmmword_19D04B290;
LABEL_94:
                for (i = 0; i != 32; i += 8)
                {
                  if (*(_QWORD *)((char *)__dst + i))
                    *(_QWORD *)(a1 + i + 1632) = BrotliAllocate(v386);
                }
                v52 = *v380;
                if (*v380 <= 34)
                {
                  v8 = a5;
                  switch(v52)
                  {
                    case 2:
                    case 3:
                    case 4:
                      goto LABEL_111;
                    case 5:
                      a6.n128_u64[0] = InitializeH5(v383, a1 + 1712).n128_u64[0];
                      break;
                    case 6:
                      *(_QWORD *)(a1 + 1752) = v383;
                      *(_QWORD *)(a1 + 1728) = 0x7BD3579BD3000000;
                      *(_QWORD *)(a1 + 1712) = 1 << *(_DWORD *)(a1 + 1692);
                      v60 = *(_QWORD *)(a1 + 1696);
                      *(_QWORD *)(a1 + 1740) = v60;
                      *(_QWORD *)(a1 + 1720) = 1 << v60;
                      *(_DWORD *)(a1 + 1736) = (1 << v60) - 1;
                      a6 = *(__n128 *)(a1 + 1632);
                      *(__n128 *)(a1 + 1760) = a6;
                      break;
                    case 10:
                      *(_QWORD *)(a1 + 1720) = *(_QWORD *)(a1 + 1632);
                      *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 1640);
                      v61 = -1 << *(_DWORD *)(a1 + 8);
                      *(_QWORD *)(a1 + 1712) = ~v61;
                      *(_DWORD *)(a1 + 1728) = v61 + 1;
                      break;
                    default:
                      break;
                  }
                }
                else
                {
                  v8 = a5;
                  if (v52 > 53)
                  {
                    switch(v52)
                    {
                      case '6':
LABEL_111:
                        *(_QWORD *)(a1 + 1712) = v383;
                        v55 = *(_QWORD *)(a1 + 1632);
LABEL_112:
                        *(_QWORD *)(a1 + 1720) = v55;
                        break;
                      case '7':
LABEL_113:
                        *(_QWORD *)(a1 + 1928) = v383;
                        a7 = *v383;
                        a6 = *(__n128 *)(a1 + 1648);
                        *(__n128 *)(a1 + 1784) = a6;
                        a8 = *(int32x4_t *)(a1 + 1664);
                        v58 = *(_OWORD *)(a1 + 1680);
                        *(int32x4_t *)(a1 + 1800) = a8;
                        *(_OWORD *)(a1 + 1816) = v58;
                        v59 = *(_OWORD *)(a1 + 1696);
                        *(_OWORD *)(a1 + 1832) = v59;
                        *(__n128 *)(a1 + 1768) = a7;
                        *(__n128 *)(a1 + 1864) = a6;
                        *(int32x4_t *)(a1 + 1880) = a8;
                        *(_OWORD *)(a1 + 1896) = v58;
                        *(_OWORD *)(a1 + 1912) = v59;
                        *(__n128 *)(a1 + 1848) = a7;
                        *(_DWORD *)(a1 + 1936) = 1;
                        *(_QWORD *)(a1 + 1944) = a1;
                        break;
                      case 'A':
                        *(_QWORD *)(a1 + 1976) = v383;
                        a7 = *v383;
                        a6 = *(__n128 *)(a1 + 1648);
                        *(__n128 *)(a1 + 1832) = a6;
                        a8 = *(int32x4_t *)(a1 + 1664);
                        v56 = *(_OWORD *)(a1 + 1680);
                        *(int32x4_t *)(a1 + 1848) = a8;
                        *(_OWORD *)(a1 + 1864) = v56;
                        v57 = *(_OWORD *)(a1 + 1696);
                        *(_OWORD *)(a1 + 1880) = v57;
                        *(__n128 *)(a1 + 1816) = a7;
                        *(__n128 *)(a1 + 1912) = a6;
                        *(int32x4_t *)(a1 + 1928) = a8;
                        *(_OWORD *)(a1 + 1944) = v56;
                        *(_OWORD *)(a1 + 1960) = v57;
                        *(__n128 *)(a1 + 1896) = a7;
                        *(_DWORD *)(a1 + 1984) = 1;
                        *(_QWORD *)(a1 + 1992) = a1;
                        break;
                    }
                  }
                  else
                  {
                    switch(v52)
                    {
                      case '#':
                        goto LABEL_113;
                      case '(':
                      case ')':
                        *(_QWORD *)(a1 + 1744) = v383;
                        a6 = *(__n128 *)(a1 + 1632);
                        *(__n128 *)(a1 + 1728) = a6;
                        v53 = *(_DWORD *)(a1 + 4);
                        if (v53 >= 7)
                          v54 = 7;
                        else
                          v54 = 8;
                        v55 = (v54 << (v53 - 4));
                        goto LABEL_112;
                      case '*':
                        *(_QWORD *)(a1 + 2760) = v383;
                        a6 = *(__n128 *)(a1 + 1632);
                        *(__n128 *)(a1 + 2744) = a6;
                        v62 = *(_DWORD *)(a1 + 4);
                        if (v62 >= 7)
                          v63 = 7;
                        else
                          v63 = 8;
                        *(_QWORD *)(a1 + 2736) = (v63 << (v62 - 4));
                        break;
                      default:
                        break;
                    }
                  }
                }
                v382 = (_DWORD *)(a1 + 1704);
                *(_DWORD *)(a1 + 1704) = 0;
                *(_DWORD *)(a1 + 1664) = 1;
LABEL_121:
                v64 = *(_DWORD *)(a1 + 1688);
                if (v64 <= 34)
                {
                  switch(v64)
                  {
                    case 2:
                      PrepareH2(a1 + 1712, v35, v15, v18);
                      break;
                    case 3:
                      PrepareH3(a1 + 1712, v35, v15, v18);
                      break;
                    case 4:
                      PrepareH4(a1 + 1712, v35, v15, (uint64_t)v18);
                      break;
                    case 5:
                      PrepareH5((unint64_t *)(a1 + 1712), v35, v15, (int *)v18);
                      break;
                    case 6:
                      PrepareH6((unint64_t *)(a1 + 1712), v35, v15, v18);
                      break;
                    case 10:
                      v65 = 0;
                      v66 = *(_QWORD *)(a1 + 1720);
                      v67 = (const float *)(a1 + 1728);
                      a6 = (__n128)vld1q_dup_f32(v67);
                      do
                      {
                        *(__n128 *)(v66 + v65) = a6;
                        v65 += 16;
                      }
                      while (v65 != 0x80000);
                      break;
                    default:
                      break;
                  }
                }
                else if (v64 > 53)
                {
                  switch(v64)
                  {
                    case '6':
                      PrepareH54(a1 + 1712, v35, v15, (uint64_t)v18);
                      break;
                    case '7':
                      PrepareH55(a1 + 1712, v35, v15, (uint64_t)v18);
                      break;
                    case 'A':
                      PrepareH65(a1 + 1712, v35, v15, v18);
                      break;
                  }
                }
                else
                {
                  switch(v64)
                  {
                    case '#':
                      PrepareH35(a1 + 1712, v35, v15, v18);
                      break;
                    case '(':
                    case ')':
                      PrepareH40(a1 + 1712, v35, v15, (int *)v18);
                      break;
                    case '*':
                      PrepareH42((void **)(a1 + 1712), v35, v15, (int *)v18);
                      break;
                    default:
                      break;
                  }
                }
                *v382 = 1;
LABEL_143:
                v68 = *(_DWORD *)(a1 + 1688);
                if (v68 <= 34)
                {
                  switch(v68)
                  {
                    case 2:
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v91 = *(_QWORD *)(a1 + 1720);
                        *(_DWORD *)(v91
                                  + (((unint64_t)(0x7BD3579BD3000000
                                                       * *(uint64_t *)((char *)v18 + ((v16 - 3) & v19))) >> 46) & 0x3FFFC)) = v16 - 3;
                        *(_DWORD *)(v91
                                  + (((unint64_t)(0x7BD3579BD3000000
                                                       * *(uint64_t *)((char *)v18 + ((v16 - 2) & v19))) >> 46) & 0x3FFFC)) = v16 - 2;
                        *(_DWORD *)(v91
                                  + (((unint64_t)(0x7BD3579BD3000000
                                                       * *(uint64_t *)((char *)v18 + ((v16 - 1) & v19))) >> 46) & 0x3FFFC)) = v16 - 1;
                      }
                      break;
                    case 3:
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v106 = *(_QWORD *)(a1 + 1720);
                        *(_DWORD *)(v106
                                  + 4
                                  * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000
                                                                         * *(uint64_t *)((char *)v18 + ((v16 - 3) & v19))) >> 48)
                                                     + ((v16 - 3) & 8))) = v16 - 3;
                        *(_DWORD *)(v106
                                  + 4
                                  * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000
                                                                         * *(uint64_t *)((char *)v18 + ((v16 - 2) & v19))) >> 48)
                                                     + ((v16 - 2) & 8))) = v16 - 2;
                        v107 = v16 - 1;
                        v108 = (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000
                                                                    * *(uint64_t *)((char *)v18 + ((v16 - 1) & v19))) >> 48)
                                                + ((v16 - 1) & 8));
                        goto LABEL_257;
                      }
                      break;
                    case 4:
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v106 = *(_QWORD *)(a1 + 1720);
                        *(_DWORD *)(v106
                                  + 4
                                  * (((((unint64_t)(0x7BD3579BD3000000
                                                                       * *(uint64_t *)((char *)v18 + ((v16 - 3) & v19))) >> 32) >> 15)
                                    + (((_DWORD)v16 - 3) & 0x18)) & 0x1FFFF)) = v16 - 3;
                        *(_DWORD *)(v106
                                  + 4
                                  * (((((unint64_t)(0x7BD3579BD3000000
                                                                       * *(uint64_t *)((char *)v18 + ((v16 - 2) & v19))) >> 32) >> 15)
                                    + (((_DWORD)v16 - 2) & 0x18)) & 0x1FFFF)) = v16 - 2;
                        v107 = v16 - 1;
                        v108 = ((((unint64_t)(0x7BD3579BD3000000
                                                                 * *(uint64_t *)((char *)v18 + ((v16 - 1) & v19))) >> 32) >> 15)
                              + (((_DWORD)v16 - 1) & 0x18)) & 0x1FFFF;
                        goto LABEL_257;
                      }
                      break;
                    case 5:
                      if (v15 >= 3uLL && v16 >= 3)
                      {
                        v109 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 3) & v19))) >> *(_DWORD *)(a1 + 1728);
                        v110 = *(_QWORD *)(a1 + 1752);
                        v111 = *(unsigned __int16 *)(v110 + 2 * v109);
                        v112 = *(_QWORD *)(a1 + 1760);
                        *(_DWORD *)(v112
                                  + 4
                                  * ((v109 << *(_DWORD *)(a1 + 1736)) + (unint64_t)(*(_DWORD *)(a1 + 1732) & v111))) = v16 - 3;
                        *(_WORD *)(v110 + 2 * v109) = v111 + 1;
                        v113 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 2) & v19))) >> *(_DWORD *)(a1 + 1728);
                        v114 = *(unsigned __int16 *)(v110 + 2 * v113);
                        *(_DWORD *)(v112
                                  + 4
                                  * ((v113 << *(_DWORD *)(a1 + 1736)) + (unint64_t)(*(_DWORD *)(a1 + 1732) & v114))) = v16 - 2;
                        *(_WORD *)(v110 + 2 * v113) = v114 + 1;
                        v115 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 1) & v19))) >> *(_DWORD *)(a1 + 1728);
                        v116 = *(unsigned __int16 *)(v110 + 2 * v115);
                        *(_DWORD *)(v112
                                  + 4
                                  * ((v115 << *(_DWORD *)(a1 + 1736)) + (unint64_t)(*(_DWORD *)(a1 + 1732) & v116))) = v16 - 1;
                        *(_WORD *)(v110 + 2 * v115) = v116 + 1;
                      }
                      break;
                    case 6:
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v117 = *(_QWORD *)(a1 + 1760);
                        v118 = *(_QWORD *)(a1 + 1768);
                        v119 = *(_QWORD *)(a1 + 1728);
                        v120 = (unint64_t)(*(uint64_t *)((char *)v18 + ((v16 - 3) & v19)) * v119) >> 49;
                        v121 = *(unsigned __int16 *)(v117 + 2 * v120);
                        v122 = (v120 << *(_DWORD *)(a1 + 1740)) + (*(_DWORD *)(a1 + 1736) & v121);
                        *(_WORD *)(v117 + 2 * v120) = v121 + 1;
                        *(_DWORD *)(v118 + 4 * v122) = v16 - 3;
                        v123 = (unint64_t)(*(uint64_t *)((char *)v18 + ((v16 - 2) & v19)) * v119) >> 49;
                        v124 = *(unsigned __int16 *)(v117 + 2 * v123);
                        v125 = (v123 << *(_DWORD *)(a1 + 1740)) + (*(_DWORD *)(a1 + 1736) & v124);
                        *(_WORD *)(v117 + 2 * v123) = v124 + 1;
                        *(_DWORD *)(v118 + 4 * v125) = v16 - 2;
                        v126 = (unint64_t)(*(uint64_t *)((char *)v18 + ((v16 - 1) & v19)) * v119) >> 49;
                        LODWORD(v119) = *(unsigned __int16 *)(v117 + 2 * v126);
                        v127 = (v126 << *(_DWORD *)(a1 + 1740)) + (*(_DWORD *)(a1 + 1736) & v119);
                        *(_WORD *)(v117 + 2 * v126) = v119 + 1;
                        *(_DWORD *)(v118 + 4 * v127) = v16 - 1;
                      }
                      break;
                    case 10:
                      if (v15 >= 3uLL && v16 >= 0x80)
                      {
                        v128 = v16 - 127;
                        v129 = v16 - 127 + v15;
                        if (v16 < v129)
                          v129 = v16;
                        if (v128 < v129)
                        {
                          v130 = *(_QWORD *)(a1 + 1712);
                          v131 = *(_QWORD *)(a1 + 1720);
                          v132 = *(_QWORD *)(a1 + 1736);
                          do
                          {
                            v133 = v16 - v128;
                            v134 = v128 & v19;
                            if (v16 - v128 <= 0xF)
                              v133 = 15;
                            v135 = (506832829 * *(_DWORD *)((char *)v18 + (v128 & v19))) >> 15;
                            v136 = *(unsigned int *)(v131 + 4 * v135);
                            v137 = 2 * (v130 & v128);
                            v138 = v137 | 1;
                            *(_DWORD *)(v131 + 4 * v135) = v128;
                            if (v128 != v136)
                            {
                              v139 = 0;
                              v140 = 0;
                              v141 = v130 - v133;
                              v142 = 64;
                              do
                              {
                                if (v128 - v136 > v141 || v142 == 0)
                                  break;
                                v144 = v136 & v19;
                                if (v140 >= v139)
                                  v145 = v139;
                                else
                                  v145 = v140;
                                v146 = (unsigned __int8 *)v18 + v145 + v134;
                                v147 = (unsigned __int8 *)v18 + v145 + v144;
                                v148 = 128 - v145;
                                if (128 - v145 < 8)
                                {
                                  v151 = (unsigned __int8 *)v18 + v145 + v134;
LABEL_208:
                                  if (v148)
                                  {
                                    v152 = &v151[v148];
                                    while (*v151 == *v147)
                                    {
                                      ++v147;
                                      ++v151;
                                      if (!--v148)
                                      {
                                        v151 = v152;
                                        break;
                                      }
                                    }
                                  }
                                  v153 = (unsigned __int8 *)(v151 - v146);
                                }
                                else
                                {
                                  v149 = 0;
                                  while (1)
                                  {
                                    v150 = *(_QWORD *)&v146[v149] ^ *(_QWORD *)&v147[v149];
                                    if (v150)
                                      break;
                                    v148 -= 8;
                                    v149 += 8;
                                    if (v148 <= 7)
                                    {
                                      v147 += v149;
                                      v151 = &v146[v149];
                                      goto LABEL_208;
                                    }
                                  }
                                  v153 = (unsigned __int8 *)(v149 + (__clz(__rbit64(v150)) >> 3));
                                }
                                v154 = (unint64_t)&v153[v145];
                                v8 = a5;
                                if (v154 >= 0x80)
                                {
                                  v158 = (int *)(v132 + 8 * (v136 & v130));
                                  v159 = *v158;
                                  v157 = v158 + 1;
                                  *(_DWORD *)(v132 + 4 * v137) = v159;
                                  goto LABEL_221;
                                }
                                v155 = *((unsigned __int8 *)v18 + v154 + v144);
                                v156 = 2 * (v136 & v130);
                                if (*((unsigned __int8 *)v18 + v154 + v134) <= v155)
                                {
                                  *(_DWORD *)(v132 + 4 * v138) = v136;
                                  v138 = 2 * (v136 & v130);
                                  v139 = v154;
                                }
                                else
                                {
                                  *(_DWORD *)(v132 + 4 * v137) = v136;
                                  v156 |= 1uLL;
                                  v137 = v156;
                                  v140 = v154;
                                }
                                v136 = *(unsigned int *)(v132 + 4 * v156);
                                --v142;
                              }
                              while (v128 != v136);
                            }
                            *(_DWORD *)(v132 + 4 * v137) = *(_DWORD *)(a1 + 1728);
                            v157 = (_DWORD *)(a1 + 1728);
LABEL_221:
                            *(_DWORD *)(v132 + 4 * v138) = *v157;
                            ++v128;
                          }
                          while (v128 != v129);
                        }
                      }
                      break;
                    default:
                      break;
                  }
                }
                else if (v68 > 53)
                {
                  switch(v68)
                  {
                    case '6':
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v106 = *(_QWORD *)(a1 + 1720);
                        *(_DWORD *)(v106
                                  + 4
                                  * (((((0xE35A7BD3579BD300
                                                     * *(uint64_t *)((char *)v18 + ((v16 - 3) & v19))) >> 32) >> 12)
                                    + (((_DWORD)v16 - 3) & 0x18)) & 0xFFFFF)) = v16 - 3;
                        *(_DWORD *)(v106
                                  + 4
                                  * (((((0xE35A7BD3579BD300
                                                     * *(uint64_t *)((char *)v18 + ((v16 - 2) & v19))) >> 32) >> 12)
                                    + (((_DWORD)v16 - 2) & 0x18)) & 0xFFFFF)) = v16 - 2;
                        v107 = v16 - 1;
                        v108 = ((((0xE35A7BD3579BD300 * *(uint64_t *)((char *)v18 + ((v16 - 1) & v19))) >> 32) >> 12)
                              + (((_DWORD)v16 - 1) & 0x18)) & 0xFFFFF;
LABEL_257:
                        *(_DWORD *)(v106 + 4 * v108) = v107;
                      }
                      break;
                    case '7':
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v199 = *(_QWORD *)(a1 + 1720);
                        *(_DWORD *)(v199
                                  + 4
                                  * (((((0xE35A7BD3579BD300
                                                     * *(uint64_t *)((char *)v18 + ((v16 - 3) & v19))) >> 32) >> 12)
                                    + (((_DWORD)v16 - 3) & 0x18)) & 0xFFFFF)) = v16 - 3;
                        *(_DWORD *)(v199
                                  + 4
                                  * (((((0xE35A7BD3579BD300
                                                     * *(uint64_t *)((char *)v18 + ((v16 - 2) & v19))) >> 32) >> 12)
                                    + (((_DWORD)v16 - 2) & 0x18)) & 0xFFFFF)) = v16 - 2;
                        *(_DWORD *)(v199
                                  + 4
                                  * (((((0xE35A7BD3579BD300
                                                     * *(uint64_t *)((char *)v18 + ((v16 - 1) & v19))) >> 32) >> 12)
                                    + (((_DWORD)v16 - 1) & 0x18)) & 0xFFFFF)) = v16 - 1;
                      }
                      v200 = 4 - (v16 & 3);
                      if ((v16 & 3) != 0)
                        v201 = 4 - (v16 & 3);
                      else
                        v201 = 0;
                      v20 = v15 >= v200;
                      v202 = v15 - v200;
                      if (!v20)
                        v202 = 0;
                      if ((v16 & 3) != 0)
                        v203 = v202;
                      else
                        v203 = v15;
                      v165 = v201 + v16;
                      v204 = (v201 + v16) & v19;
                      v205 = v19 - v204;
                      if (v203 < v19 - v204)
                        v205 = v203;
                      if (v205 >= 0x20)
                      {
                        v206 = 0;
                        v169 = 0;
                        v207 = (char *)v18 + v204;
                        do
                        {
                          v169 = v207[v206] + v169 * *(_DWORD *)(a1 + 1756) + 1;
                          v20 = v206 >= 0x1C;
                          v206 += 4;
                        }
                        while (!v20);
LABEL_275:
                        *(_DWORD *)(a1 + 1728) = v169;
                      }
LABEL_276:
                      *(_QWORD *)(a1 + 1744) = v165;
                      break;
                    case 'A':
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v92 = *(_QWORD *)(a1 + 1760);
                        v93 = *(_QWORD *)(a1 + 1768);
                        v94 = *(_QWORD *)(a1 + 1728);
                        v95 = (unint64_t)(*(uint64_t *)((char *)v18 + ((v16 - 3) & v19)) * v94) >> 49;
                        v96 = *(unsigned __int16 *)(v92 + 2 * v95);
                        v97 = (v95 << *(_DWORD *)(a1 + 1740)) + (*(_DWORD *)(a1 + 1736) & v96);
                        *(_WORD *)(v92 + 2 * v95) = v96 + 1;
                        *(_DWORD *)(v93 + 4 * v97) = v16 - 3;
                        v98 = (unint64_t)(*(uint64_t *)((char *)v18 + ((v16 - 2) & v19)) * v94) >> 49;
                        v99 = *(unsigned __int16 *)(v92 + 2 * v98);
                        v100 = (v98 << *(_DWORD *)(a1 + 1740)) + (*(_DWORD *)(a1 + 1736) & v99);
                        *(_WORD *)(v92 + 2 * v98) = v99 + 1;
                        *(_DWORD *)(v93 + 4 * v100) = v16 - 2;
                        v101 = (unint64_t)(*(uint64_t *)((char *)v18 + ((v16 - 1) & v19)) * v94) >> 49;
                        LODWORD(v94) = *(unsigned __int16 *)(v92 + 2 * v101);
                        v102 = (v101 << *(_DWORD *)(a1 + 1740)) + (*(_DWORD *)(a1 + 1736) & v94);
                        *(_WORD *)(v92 + 2 * v101) = v94 + 1;
                        *(_DWORD *)(v93 + 4 * v102) = v16 - 1;
                      }
                      v103 = v19 - (v19 & v16);
                      if (v103 >= v15)
                        v103 = v15;
                      if (v103 >= 0x20)
                      {
                        v104 = 0;
                        v105 = 0;
                        do
                          v105 = *((unsigned __int8 *)v18 + (v19 & v16) + v104++) + v105 * *(_DWORD *)(a1 + 1804) + 1;
                        while (v104 != 32);
                        *(_DWORD *)(a1 + 1776) = v105;
                      }
                      *(_QWORD *)(a1 + 1792) = v16;
                      break;
                  }
                }
                else
                {
                  switch(v68)
                  {
                    case '#':
                      if (v15 >= 7uLL && v16 >= 3)
                      {
                        v160 = *(_QWORD *)(a1 + 1720);
                        *(_DWORD *)(v160
                                  + 4
                                  * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000
                                                                         * *(uint64_t *)((char *)v18 + ((v16 - 3) & v19))) >> 48)
                                                     + ((v16 - 3) & 8))) = v16 - 3;
                        *(_DWORD *)(v160
                                  + 4
                                  * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000
                                                                         * *(uint64_t *)((char *)v18 + ((v16 - 2) & v19))) >> 48)
                                                     + ((v16 - 2) & 8))) = v16 - 2;
                        *(_DWORD *)(v160
                                  + 4
                                  * (unsigned __int16)(((unint64_t)(0x7BD3579BD3000000
                                                                         * *(uint64_t *)((char *)v18 + ((v16 - 1) & v19))) >> 48)
                                                     + ((v16 - 1) & 8))) = v16 - 1;
                      }
                      v161 = 4 - (v16 & 3);
                      if ((v16 & 3) != 0)
                        v162 = 4 - (v16 & 3);
                      else
                        v162 = 0;
                      v20 = v15 >= v161;
                      v163 = v15 - v161;
                      if (!v20)
                        v163 = 0;
                      if ((v16 & 3) != 0)
                        v164 = v163;
                      else
                        v164 = v15;
                      v165 = v162 + v16;
                      v166 = (v162 + v16) & v19;
                      v167 = v19 - v166;
                      if (v164 < v19 - v166)
                        v167 = v164;
                      if (v167 < 0x20)
                        goto LABEL_276;
                      v168 = 0;
                      v169 = 0;
                      v170 = (char *)v18 + v166;
                      do
                      {
                        v169 = v170[v168] + v169 * *(_DWORD *)(a1 + 1756) + 1;
                        v20 = v168 >= 0x1C;
                        v168 += 4;
                      }
                      while (!v20);
                      goto LABEL_275;
                    case '(':
                    case ')':
                      if (v15 >= 3uLL && v16 >= 3)
                      {
                        v69 = *(_QWORD *)(a1 + 1728);
                        v70 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 3) & v19))) >> 17;
                        v71 = v69 + 2 * v70;
                        v72 = *(_QWORD *)(a1 + 1736);
                        v73 = *(unsigned __int16 *)(a1 + 1712);
                        v74 = v73 + 1;
                        *(_WORD *)(a1 + 1712) = v73 + 1;
                        v75 = v16 - 3 - *(unsigned int *)(v69 + 4 * v70);
                        *(_BYTE *)(v69 + (unsigned __int16)(v16 - 3) + 196608) = v70;
                        if (v75 >= 0xFFFF)
                          LOWORD(v75) = -1;
                        v76 = (_WORD *)(v72 + 4 * v73);
                        *v76 = v75;
                        v76[1] = *(_WORD *)(v71 + 0x20000);
                        *(_DWORD *)(v69 + 4 * v70) = v16 - 3;
                        *(_WORD *)(v71 + 0x20000) = v73;
                        v77 = *(_QWORD *)(a1 + 1728);
                        v78 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 2) & v19))) >> 17;
                        v79 = v77 + 2 * v78;
                        v80 = *(_QWORD *)(a1 + 1736);
                        *(_WORD *)(a1 + 1712) = v73 + 2;
                        v81 = v16 - 2 - *(unsigned int *)(v77 + 4 * v78);
                        *(_BYTE *)(v77 + (unsigned __int16)(v16 - 2) + 196608) = v78;
                        if (v81 >= 0xFFFF)
                          LOWORD(v81) = -1;
                        v82 = (_WORD *)(v80 + 4 * v74);
                        *v82 = v81;
                        v82[1] = *(_WORD *)(v79 + 0x20000);
                        *(_DWORD *)(v77 + 4 * v78) = v16 - 2;
                        *(_WORD *)(v79 + 0x20000) = v74;
                        v83 = *(_QWORD *)(a1 + 1728);
                        v84 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 1) & v19))) >> 17;
                        v85 = v83 + 2 * v84;
                        v86 = *(_QWORD *)(a1 + 1736);
                        v87 = *(unsigned __int16 *)(a1 + 1712);
                        *(_WORD *)(a1 + 1712) = v87 + 1;
                        v88 = v16 - 1 - *(unsigned int *)(v83 + 4 * v84);
                        *(_BYTE *)(v83 + (unsigned __int16)(v16 - 1) + 196608) = v84;
                        if (v88 >= 0xFFFF)
                          v89 = -1;
                        else
                          v89 = v88;
                        v90 = (__int16 *)(v86 + 4 * v87);
                        *v90 = v89;
                        v90[1] = *(_WORD *)(v85 + 0x20000);
                        *(_DWORD *)(v83 + 4 * v84) = v16 - 1;
                        *(_WORD *)(v85 + 0x20000) = v87;
                      }
                      break;
                    case '*':
                      if (v15 >= 3uLL && v16 >= 3)
                      {
                        v171 = a1 + 1712;
                        v172 = *(_QWORD *)(a1 + 2744);
                        v173 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 3) & v19))) >> 17;
                        v174 = v172 + 2 * v173;
                        v175 = *(_QWORD *)(a1 + 2752);
                        v176 = *(_WORD *)(a1 + 1712 + 2 * (v173 & 0x1FF));
                        *(_WORD *)(a1 + 1712 + 2 * (v173 & 0x1FF)) = v176 + 1;
                        v177 = v176 & 0x1FF;
                        v178 = v16 - 3 - *(unsigned int *)(v172 + 4 * v173);
                        *(_BYTE *)(v172 + (unsigned __int16)(v16 - 3) + 196608) = v173;
                        if (v178 >= 0xFFFF)
                          v179 = -1;
                        else
                          v179 = v178;
                        v180 = (__int16 *)(v175 + ((unint64_t)(v173 & 0x1FF) << 11) + 4 * v177);
                        *v180 = v179;
                        v180[1] = *(_WORD *)(v174 + 0x20000);
                        *(_DWORD *)(v172 + 4 * v173) = v16 - 3;
                        *(_WORD *)(v174 + 0x20000) = v177;
                        v181 = *(_QWORD *)(a1 + 2744);
                        v182 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 2) & v19))) >> 17;
                        v183 = v181 + 2 * v182;
                        v184 = *(_QWORD *)(a1 + 2752);
                        v185 = *(_WORD *)(v171 + 2 * (v182 & 0x1FF));
                        *(_WORD *)(v171 + 2 * (v182 & 0x1FF)) = v185 + 1;
                        v186 = v185 & 0x1FF;
                        v187 = v16 - 2 - *(unsigned int *)(v181 + 4 * v182);
                        *(_BYTE *)(v181 + (unsigned __int16)(v16 - 2) + 196608) = v182;
                        if (v187 >= 0xFFFF)
                          v188 = -1;
                        else
                          v188 = v187;
                        v189 = (__int16 *)(v184 + ((unint64_t)(v182 & 0x1FF) << 11) + 4 * v186);
                        *v189 = v188;
                        v189[1] = *(_WORD *)(v183 + 0x20000);
                        *(_DWORD *)(v181 + 4 * v182) = v16 - 2;
                        *(_WORD *)(v183 + 0x20000) = v186;
                        v190 = *(_QWORD *)(a1 + 2744);
                        v191 = (506832829 * *(_DWORD *)((char *)v18 + ((v16 - 1) & v19))) >> 17;
                        v192 = v190 + 2 * v191;
                        v193 = *(_QWORD *)(a1 + 2752);
                        v194 = *(_WORD *)(v171 + 2 * (v191 & 0x1FF));
                        *(_WORD *)(v171 + 2 * (v191 & 0x1FF)) = v194 + 1;
                        v195 = v194 & 0x1FF;
                        v196 = v16 - 1 - *(unsigned int *)(v190 + 4 * v191);
                        *(_BYTE *)(v190 + (unsigned __int16)(v16 - 1) + 196608) = v191;
                        if (v196 >= 0xFFFF)
                          v197 = -1;
                        else
                          v197 = v196;
                        v198 = (__int16 *)(v193 + ((unint64_t)(v191 & 0x1FF) << 11) + 4 * v195);
                        *v198 = v197;
                        v198[1] = *(_WORD *)(v192 + 0x20000);
                        *(_DWORD *)(v190 + 4 * v191) = v16 - 1;
                        *(_WORD *)(v192 + 0x20000) = v195;
                      }
                      break;
                    default:
                      break;
                  }
                }
                v208 = (unint64_t *)(a1 + 1488);
                v209 = *(_QWORD *)(a1 + 1512);
                if (v209 <= 0xBFFFFFFF)
                  v210 = *(_QWORD *)(a1 + 1512);
                else
                  LODWORD(v210) = (((2 * (int)v209) >> 1) & 0xC0000000 | v209 & 0x3FFFFFFF) ^ 0x80000000;
                if (*(int *)(a1 + 4) < 10
                  || BrotliIsMostlyUTF8((uint64_t)v18, v210, v19, *(_QWORD *)(a1 + 1424) - v209, 0.75))
                {
                  v211 = 2;
                }
                else
                {
                  v211 = 3;
                }
                v212 = &_kBrotliContextLookupTable[v211 << 9];
                if (*v208 && !*(_QWORD *)(a1 + 1504))
                {
                  ExtendLastCommand(a1, &v389, &v388);
                  v212 = &_kBrotliContextLookupTable[v211 << 9];
                }
                v213 = *(_DWORD *)(a1 + 4);
                v379 = (uint64_t)v212;
                if (v213 == 11)
                {
                  BrotliCreateHqZopfliBackwardReferences(v386, v389, v388, (uint64_t)v18, v19, (uint64_t)v212, a1, v383, (__int128 *)(a1 + 1528), (uint64_t *)(a1 + 1504), *(_QWORD *)(a1 + 1480) + 16 * *(_QWORD *)(a1 + 1488), (uint64_t *)(a1 + 1488), (uint64_t *)(a1 + 1496));
                }
                else if (v213 == 10)
                {
                  BrotliCreateZopfliBackwardReferences(v386, v389, v388, (uint64_t)v18, v19, (uint64_t)v212, a1, v383, (void *)(a1 + 1528), (_QWORD *)(a1 + 1504), *(_QWORD *)(a1 + 1480) + 16 * *(_QWORD *)(a1 + 1488), (_QWORD *)(a1 + 1488), (_QWORD *)(a1 + 1496));
                }
                else
                {
                  BrotliCreateBackwardReferences((_WORD *)v389, v388, v18, v19, (uint64_t)v212, a1, v383, (int *)(a1 + 1528), a6.n128_f64[0], a7.n128_f64[0], a8, (unint64_t *)(a1 + 1504), (_DWORD *)(*(_QWORD *)(a1 + 1480) + 16 * *(_QWORD *)(a1 + 1488)), (_QWORD *)(a1 + 1488), (_QWORD *)(a1 + 1496));
                }
                v214 = *(_DWORD *)(a1 + 8);
                v215 = *(_DWORD *)(a1 + 12);
                if (v214 <= v215)
                  v214 = *(_DWORD *)(a1 + 12);
                if (v214 >= 23)
                  v216 = 23;
                else
                  v216 = v214;
                v217 = *(_QWORD *)(a1 + 1424);
                v218 = *(_QWORD *)(a1 + 1512);
                v381 = v211;
                v219 = *(int *)(a1 + 4) <= 3 && *(_QWORD *)(a1 + 1488) + *(_QWORD *)(a1 + 1496) > 0x2FFEuLL;
                v220 = v217 - v218;
                if (!(a3 | a2) && !v219)
                {
                  v221 = 1 << (v216 + 1);
                  if (v220 + (1 << v215) <= v221 && *(_QWORD *)(a1 + 1496) < v221 >> 3 && *v208 < v221 >> 3)
                  {
                    if (UpdateLastProcessedPos(a1))
                      *v382 = 0;
                    goto LABEL_322;
                  }
                }
                v222 = *(_QWORD *)(a1 + 1504);
                if (v222)
                {
                  v223 = *(_QWORD *)(a1 + 1480);
                  v224 = *(_QWORD *)(a1 + 1488);
                  *(_QWORD *)(a1 + 1488) = v224 + 1;
                  v225 = v223 + 16 * v224;
                  *(_DWORD *)v225 = v222;
                  *(_QWORD *)(v225 + 4) = 0x8000000;
                  *(_WORD *)(v225 + 14) = 16;
                  v226 = (_WORD *)(v225 + 12);
                  if (v222 > 5)
                  {
                    if (v222 > 0x81)
                    {
                      if (v222 > 0x841)
                      {
                        if (v222 >> 1 >= 0xC21)
                        {
                          if (v222 < 0x5842)
                            LOWORD(v227) = 22;
                          else
                            LOWORD(v227) = 23;
                        }
                        else
                        {
                          LOWORD(v227) = 21;
                        }
                      }
                      else
                      {
                        v227 = (__clz(v222 - 66) ^ 0x1F) + 10;
                      }
                    }
                    else
                    {
                      v228 = (__clz(v222 - 2) ^ 0x1F) - 1;
                      v227 = ((v222 - 2) >> v228) + 2 * v228 + 2;
                    }
                  }
                  else
                  {
                    LOWORD(v227) = v222;
                  }
                  *v226 = ((((0x520D40u >> (6 * ((unsigned __int16)v227 >> 3))) & 0xC0)
                          + 192 * ((unsigned __int16)v227 >> 3)) & 0xFFC7 | (8 * (v227 & 7)))
                        + 66;
                  *(_QWORD *)(a1 + 1496) += v222;
                  *(_QWORD *)(a1 + 1504) = 0;
                }
                if (!(_DWORD)a2 && v217 == v218)
                  goto LABEL_322;
                v229 = (_BYTE *)GetBrotliStorage(a1, (2 * v220 + 503));
                v387 = *(unsigned __int8 *)(a1 + 1610);
                *v229 = *(_BYTE *)(a1 + 1608);
                v229[1] = *(_BYTE *)(a1 + 1609);
                v230 = *(_QWORD *)(a1 + 1512);
                v378 = v220;
                v231 = v230;
                v232 = v230;
                if (v230 > 0xBFFFFFFF)
                  v232 = (((2 * (int)v230) >> 1) & 0xC0000000 | v230 & 0x3FFFFFFF) ^ 0x80000000;
                v377 = v232;
                v373 = *(unsigned __int8 *)(a1 + 1613);
                v374 = *(unsigned __int8 *)(a1 + 1612);
                v233 = *(_QWORD *)(a1 + 1496);
                v384 = (_OWORD *)(a1 + 1528);
                v375 = *(unsigned int **)(a1 + 1480);
                v376 = *(_QWORD *)(a1 + 1488);
                memcpy(__dst, (const void *)a1, 0x578uLL);
                v234 = v378;
                if (!v378)
                {
                  v241 = v387;
                  *(_QWORD *)&v229[v387 >> 3] = (3 << (v387 & 7)) | v229[v387 >> 3];
                  v387 = (v241 + 9) & 0xFFFFFFF8;
                  v235 = (_OWORD *)(a1 + 1592);
                  goto LABEL_497;
                }
                if (v378 < 3)
                  goto LABEL_328;
                if ((v378 >> 8) + 2 > v376 && (double)v378 * 0.99 < (double)v233)
                {
                  v363 = v229;
                  bzero(v391, 0x400uLL);
                  v242 = ((v378 + 12) * (unsigned __int128)0x13B13B13B13B13B2uLL) >> 64;
                  do
                  {
                    ++v391[*((unsigned __int8 *)v18 + (v231 & v19))];
                    v231 = (v231 + 13);
                    --v242;
                  }
                  while (v242);
                  v243 = 0;
                  v244 = 0;
                  v245 = 0.0;
                  do
                  {
                    v246 = &v391[v244];
                    v247 = *v246;
                    if (v247 > 0xFF)
                      v248 = log2((double)v247);
                    else
                      v248 = kBrotliLog2Table[v247];
                    v249 = v246[1];
                    if (v249 > 0xFF)
                      v250 = log2((double)v249);
                    else
                      v250 = kBrotliLog2Table[v249];
                    v244 += 2;
                    v243 += v247 + v249;
                    v245 = v245 - (double)v247 * v248 - (double)v249 * v250;
                  }
                  while ((unint64_t)(v244 - 2) < 0xFE);
                  v251 = (double)v243;
                  if (v243)
                  {
                    v8 = a5;
                    v229 = v363;
                    v208 = (unint64_t *)(a1 + 1488);
                    v252 = v243 > 0xFF ? log2((double)v243) : kBrotliLog2Table[v243];
                    v234 = v378;
                    v245 = v245 + v251 * v252;
                  }
                  else
                  {
                    v8 = a5;
                    v229 = v363;
                    v208 = (unint64_t *)(a1 + 1488);
                    v234 = v378;
                  }
                  v257 = v245 >= v251 ? v245 : (double)v243;
                  if (v257 > (double)v378 * 7.92 / 13.0)
                  {
LABEL_328:
                    v235 = (_OWORD *)(a1 + 1592);
                    *v384 = *(_OWORD *)(a1 + 1592);
                    v236 = v377;
                    v237 = a2;
                    v238 = (uint64_t)v18;
                    v239 = v19;
                    v240 = v234;
LABEL_496:
                    BrotliStoreUncompressedMetaBlock(v237, v238, v236, v239, v240, &v387, (uint64_t)v229);
                    goto LABEL_497;
                  }
                }
                v258 = *(_DWORD *)(a1 + 4);
                v372 = v229[1];
                v371 = v387;
                v370 = *v229;
                if (v258 <= 2)
                {
                  v259 = v234;
                  BrotliStoreMetaBlockFast(v386, (uint64_t)v18, v377, v234, v19, a2, a1, (uint64_t)v375, v376, &v387, (uint64_t)v229);
LABEL_366:
                  v235 = (_OWORD *)(a1 + 1592);
                  goto LABEL_494;
                }
                if (v258 == 3)
                {
                  v259 = v234;
                  BrotliStoreMetaBlockTrivial(v386, (uint64_t)v18, v377, v234, v19, a2, a1, (uint64_t)v375, v376, &v387, (uint64_t)v229);
                  goto LABEL_366;
                }
                v400 = 0u;
                v399 = 0u;
                v398 = 0u;
                v397 = 0u;
                v396 = 0u;
                memset(v395, 0, sizeof(v395));
                memset(v394, 0, sizeof(v394));
                v393 = 0u;
                v392 = 0u;
                *(_OWORD *)v391 = 0u;
                BrotliInitBlockSplit(v391);
                BrotliInitBlockSplit(v394);
                BrotliInitBlockSplit(v395);
                v400 = 0u;
                v399 = 0u;
                v398 = 0u;
                v397 = 0u;
                v396 = 0u;
                if (*(int *)(a1 + 4) > 9)
                {
                  v263 = v381;
                  BrotliBuildMetaBlock(v386, (uint64_t)v18, v377, v19, (uint64_t)__dst, v374, v373, (uint64_t)v375, v376, v381, (unint64_t *)v391);
                  v235 = (_OWORD *)(a1 + 1592);
LABEL_491:
                  if (*(int *)(a1 + 4) >= 4)
                    BrotliOptimizeHistograms(DWORD1(__dst[4]), v391);
                  v358 = v263;
                  v259 = v378;
                  BrotliStoreMetaBlock(v386, (uint64_t)v18, v377, v378, v19, v374, v373, a2, (unsigned int *)__dst, v358, (uint64_t)v375, v376, (unint64_t *)v391, &v387, (uint64_t)v229);
                  BrotliDestroyBlockSplit(v386, (uint64_t)v391);
                  BrotliDestroyBlockSplit(v386, (uint64_t)v394);
                  BrotliDestroyBlockSplit(v386, (uint64_t)v395);
                  BrotliFree(v386);
                  *(_QWORD *)&v396 = 0;
                  BrotliFree(v386);
                  *(_QWORD *)&v397 = 0;
                  BrotliFree(v386);
                  *(_QWORD *)&v398 = 0;
                  BrotliFree(v386);
                  *(_QWORD *)&v399 = 0;
                  BrotliFree(v386);
LABEL_494:
                  if (v259 + 4 < v387 >> 3)
                  {
                    *v384 = *v235;
                    *v229 = v370;
                    v229[1] = v372;
                    v387 = v371;
                    v236 = v377;
                    v237 = a2;
                    v238 = (uint64_t)v18;
                    v239 = v19;
                    v240 = v259;
                    goto LABEL_496;
                  }
LABEL_497:
                  v356 = v387;
                  v32 = v387 >> 3;
                  *(_WORD *)(a1 + 1608) = v229[v387 >> 3];
                  *(_BYTE *)(a1 + 1610) = v356 & 7;
                  *(_QWORD *)(a1 + 1512) = *(_QWORD *)(a1 + 1424);
                  if (UpdateLastProcessedPos(a1))
                    *v382 = 0;
                  v357 = *(_QWORD *)(a1 + 1512);
                  if (v357)
                  {
                    *(_BYTE *)(a1 + 1612) = *((_BYTE *)v18 + (((_DWORD)v357 - 1) & v19));
                    if (v357 != 1)
                      *(_BYTE *)(a1 + 1613) = *((_BYTE *)v18 + (((_DWORD)v357 - 2) & v19));
                  }
                  *v208 = 0;
                  v208[1] = 0;
                  *v235 = *v384;
                  *v8 = v229;
                  goto LABEL_33;
                }
                v235 = (_OWORD *)(a1 + 1592);
                if (*(_DWORD *)(a1 + 32))
                {
                  v260 = 0;
                  v261 = v377;
                  v262 = 1;
LABEL_490:
                  BrotliBuildMetaBlockGreedy(v386, (uint64_t)v18, v261, v19, v374, v373, v379, v262, (uint64_t)v260, v375, v376, (uint64_t)v391);
                  v263 = v381;
                  goto LABEL_491;
                }
                v364 = v229;
                v365 = v208;
                v260 = 0;
                v366 = (_OWORD *)BrotliAllocate(v386);
                v367 = 1;
                if (v378 < 0x40 || (v362 = *(_DWORD *)(a1 + 4), v362 < 5))
                {
LABEL_489:
                  BrotliFree(v386);
                  v8 = a5;
                  v229 = v364;
                  v208 = v365;
                  v235 = (_OWORD *)(a1 + 1592);
                  v261 = v377;
                  v262 = v367;
                  goto LABEL_490;
                }
                v361 = v378 + v377;
                if (*(_QWORD *)(a1 + 24) >> 20)
                {
                  bzero(v366, 0x700uLL);
                  v264 = 0;
                  v265 = v377;
                  v266 = v377 + 64;
                  v360 = v266;
                  do
                  {
                    v267 = *((unsigned __int8 *)v18 + (((_DWORD)v265 + 1) & v19));
                    v268 = *((unsigned __int8 *)v18 + (v265 & v19));
                    for (j = 2; j != 64; ++j)
                    {
                      v270 = v267;
                      v267 = *((unsigned __int8 *)v18 + (((_DWORD)v265 + (_DWORD)j) & v19));
                      v271 = ShouldUseComplexStaticContextMap_kStaticContextMapComplexUTF8[(_kBrotliContextLookupTable[v268 + 1280] | _kBrotliContextLookupTable[v270 + 1024])];
                      ++*((_DWORD *)v366 + (v267 >> 3));
                      v272 = (v267 >> 3) & 0xFFFFE01F | (32 * v271);
                      v268 = v270;
                      ++*((_DWORD *)v366 + v272 + 32);
                    }
                    v264 += 62;
                    v265 += 4096;
                    v266 += 4096;
                  }
                  while (v266 <= v361);
                  v359 = v264;
                  v273 = 0;
                  v274 = 0;
                  v275 = 0.0;
                  do
                  {
                    v276 = (unsigned int *)v366 + v274;
                    v277 = *v276;
                    if (v277 > 0xFF)
                      v278 = log2((double)v277);
                    else
                      v278 = kBrotliLog2Table[v277];
                    v279 = v276[1];
                    if (v279 > 0xFF)
                      v280 = log2((double)v279);
                    else
                      v280 = kBrotliLog2Table[v279];
                    v274 += 2;
                    v273 += v277 + v279;
                    v275 = v275 - (double)v277 * v278 - (double)v279 * v280;
                  }
                  while ((unint64_t)(v274 - 2) < 0x1E);
                  if (v273)
                  {
                    if (v273 > 0xFF)
                      v281 = log2((double)v273);
                    else
                      v281 = kBrotliLog2Table[v273];
                    v275 = v275 + (double)v273 * v281;
                  }
                  v368 = 0;
                  v282 = 0.0;
                  v283 = v366;
                  do
                  {
                    v284 = 0;
                    v285 = 0;
                    v286 = 0.0;
                    do
                    {
                      v287 = (char *)v283 + 4 * v285;
                      v288 = *((unsigned int *)v287 + 32);
                      if (v288 > 0xFF)
                        v289 = log2((double)v288);
                      else
                        v289 = kBrotliLog2Table[v288];
                      v290 = *((unsigned int *)v287 + 33);
                      if (v290 > 0xFF)
                        v291 = log2((double)v290);
                      else
                        v291 = kBrotliLog2Table[v290];
                      v285 += 2;
                      v284 += v288 + v290;
                      v286 = v286 - (double)v288 * v289 - (double)v290 * v291;
                    }
                    while ((unint64_t)(v285 - 2) < 0x1E);
                    if (v284)
                    {
                      if (v284 > 0xFF)
                        v292 = log2((double)v284);
                      else
                        v292 = kBrotliLog2Table[v284];
                      v293 = v368;
                      v286 = v286 + (double)v284 * v292;
                    }
                    else
                    {
                      v293 = v368;
                    }
                    v282 = v282 + v286;
                    v283 += 8;
                    v368 = v293 + 1;
                  }
                  while (v293 != 12);
                  v294 = 1.0 / (double)v359;
                  if (v294 * v282 <= 3.0 && v294 * v275 - v294 * v282 >= 0.2)
                  {
                    v260 = ShouldUseComplexStaticContextMap_kStaticContextMapComplexUTF8;
                    v355 = 13;
LABEL_488:
                    v367 = v355;
                    goto LABEL_489;
                  }
                }
                else
                {
                  v360 = v377 + 64;
                }
                *((_DWORD *)v366 + 8) = 0;
                *v366 = 0u;
                v366[1] = 0u;
                v295 = v360;
                if (v360 <= v361)
                {
                  v296 = v377;
                  do
                  {
                    if (v296 + 1 < v295)
                    {
                      v297 = *(_DWORD *)((char *)&DecideOverLiteralContextModeling_lut
                                       + (((unint64_t)*((unsigned __int8 *)v18 + (v296 & v19)) >> 4) & 0xC));
                      v298 = 1;
                      do
                      {
                        v299 = 3 * v297;
                        v297 = *(_DWORD *)((char *)&DecideOverLiteralContextModeling_lut
                                         + (((unint64_t)*((unsigned __int8 *)v18
                                                               + (((_DWORD)v296 + (_DWORD)v298) & v19)) >> 4) & 0xC));
                        ++*((_DWORD *)v366 + v297 + v299);
                        ++v298;
                      }
                      while (v360 - v377 != v298);
                    }
                    v296 += 4096;
                    v295 += 4096;
                  }
                  while (v295 <= v361);
                }
                v300 = 0;
                v403 = 0;
                v402 = 0;
                memset(v401, 0, sizeof(v401));
                do
                {
                  v301 = *((_DWORD *)v366 + v300);
                  *((_DWORD *)&v402 + v300 % 3u) += v301;
                  v302 = v300 - 6;
                  if (v300 < 6)
                    v302 = v300;
                  *((_DWORD *)v401 + v302) += v301;
                  ++v300;
                }
                while (v300 != 9);
                v303 = 0;
                v304 = 0;
                v305 = 0.0;
                v306 = 1;
                while (1)
                {
                  v307 = *((unsigned int *)&v402 + v303);
                  v308 = v307 > 0xFF ? log2((double)v307) : kBrotliLog2Table[v307];
                  v309 = v304 + v307;
                  v310 = v305 - (double)v307 * v308;
                  if ((v306 & 1) == 0)
                    break;
                  v311 = *((unsigned int *)&v402 + (v303 | 1));
                  if (v311 > 0xFF)
                    v312 = log2((double)v311);
                  else
                    v312 = kBrotliLog2Table[v311];
                  v306 = 0;
                  v304 = v309 + v311;
                  v305 = v310 - (double)v311 * v312;
                  v303 = 2;
                }
                if (v309)
                {
                  if (v309 > 0xFF)
                    v313 = log2((double)v309);
                  else
                    v313 = kBrotliLog2Table[v309];
                  v310 = v310 + (double)v309 * v313;
                }
                v314 = 0;
                v315 = 0;
                v316 = 0.0;
                v317 = 1;
                while (1)
                {
                  v318 = LODWORD(v401[v314]);
                  v319 = v318 > 0xFF ? log2((double)v318) : kBrotliLog2Table[v318];
                  v320 = v315 + v318;
                  v321 = v316 - (double)v318 * v319;
                  if ((v317 & 1) == 0)
                    break;
                  v322 = *((unsigned int *)v401 + ((v314 * 2) | 1));
                  if (v322 > 0xFF)
                    v323 = log2((double)v322);
                  else
                    v323 = kBrotliLog2Table[v322];
                  v317 = 0;
                  v315 = v320 + v322;
                  v316 = v321 - (double)v322 * v323;
                  v314 = 1;
                }
                if (v320)
                {
                  if (v320 > 0xFF)
                    v324 = log2((double)v320);
                  else
                    v324 = kBrotliLog2Table[v320];
                  v321 = v321 + (double)v320 * v324;
                }
                v325 = 0;
                v326 = 0;
                v327 = 0.0;
                while (1)
                {
                  v328 = &v401[v325];
                  v329 = *((unsigned int *)v328 + 3);
                  v330 = v329 > 0xFF ? log2((double)v329) : kBrotliLog2Table[v329];
                  v331 = v326 + v329;
                  v332 = v327 - (double)v329 * v330;
                  if ((unint64_t)(v325 * 2 + 3) >= 5)
                    break;
                  v333 = *((unsigned int *)v328 + 4);
                  if (v333 > 0xFF)
                    v334 = log2((double)v333);
                  else
                    v334 = kBrotliLog2Table[v333];
                  v326 = v331 + v333;
                  v327 = v332 - (double)v333 * v334;
                  ++v325;
                }
                if (v331)
                {
                  if (v331 > 0xFF)
                    v335 = log2((double)v331);
                  else
                    v335 = kBrotliLog2Table[v331];
                  v332 = v332 + (double)v331 * v335;
                }
                v336 = 0;
                v337 = 0.0;
                do
                {
                  v338 = 0;
                  v339 = 0;
                  v369 = v336;
                  v340 = (char *)v366 + 12 * v336;
                  v341 = 1;
                  v342 = 0.0;
                  while (1)
                  {
                    v343 = *(unsigned int *)&v340[4 * v338];
                    v344 = v343 > 0xFF ? log2((double)v343) : kBrotliLog2Table[v343];
                    v345 = v339 + v343;
                    v346 = v342 - (double)v343 * v344;
                    if ((v341 & 1) == 0)
                      break;
                    v347 = *(unsigned int *)&v340[4 * (v338 | 1)];
                    if (v347 > 0xFF)
                      v348 = log2((double)v347);
                    else
                      v348 = kBrotliLog2Table[v347];
                    v341 = 0;
                    v339 = v345 + v347;
                    v342 = v346 - (double)v347 * v348;
                    v338 = 2;
                  }
                  if (v345)
                  {
                    v349 = v369;
                    if (v345 > 0xFF)
                      v350 = log2((double)v345);
                    else
                      v350 = kBrotliLog2Table[v345];
                    v346 = v346 + (double)v345 * v350;
                  }
                  else
                  {
                    v349 = v369;
                  }
                  v337 = v337 + v346;
                  v336 = v349 + 1;
                }
                while (v336 != 3);
                v351 = 1.0 / (double)(HIDWORD(v402) + v402 + v403);
                v352 = v310 * v351;
                v353 = (v321 + v332) * v351;
                v354 = v337 * v351;
                if (v362 < 7)
                  v354 = v352 * 10.0;
                if (v352 - v353 >= 0.2 || v352 - v354 >= 0.2)
                {
                  if (v353 - v354 >= 0.02)
                  {
                    v260 = &ChooseContextMap_kStaticContextMapContinuation;
                    v355 = 3;
                  }
                  else
                  {
                    v260 = &ChooseContextMap_kStaticContextMapSimpleUTF8;
                    v355 = 2;
                  }
                }
                else
                {
                  v260 = 0;
                  v355 = 1;
                }
                goto LABEL_488;
              case 3u:
                *(_DWORD *)(a1 + 40) = 35;
                v380 = (int *)(a1 + 1688);
                *(_OWORD *)(a1 + 1688) = *v36;
                *(_QWORD *)(a1 + 1680) = 0;
                *(_QWORD *)(a1 + 1672) = 0;
LABEL_70:
                a6 = (__n128)xmmword_19D04B2B0;
                goto LABEL_72;
            }
          }
          a6 = *(__n128 *)v36;
          *(_OWORD *)(a1 + 1688) = *v36;
          *(_QWORD *)(a1 + 1680) = 0;
          *(_QWORD *)(a1 + 1672) = 0;
          v380 = (int *)(a1 + 1688);
          switch(v37)
          {
            case 2u:
            case 3u:
              v39 = 0x40000;
              goto LABEL_87;
            case 4u:
              v39 = 0x80000;
              goto LABEL_87;
            case 5u:
            case 6u:
              v44 = *(_DWORD *)(a1 + 44);
              v45 = 2 << v44;
              v46 = 4 << v44 << *(_DWORD *)(a1 + 48);
              *(_QWORD *)&__dst[0] = v45;
              goto LABEL_91;
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_94;
            case 0xAu:
              v50 = 1 << v38;
              if ((v35 & (1 << v38 > (unint64_t)v15)) != 0)
                v50 = v15;
              v46 = 8 * v50;
              *(_QWORD *)&__dst[0] = 0x80000;
LABEL_91:
              *((_QWORD *)&__dst[0] + 1) = v46;
              break;
            default:
              switch(v37)
              {
                case '#':
                  goto LABEL_70;
                case '$':
                case '%':
                case '&':
                case '\'':
                  goto LABEL_94;
                case '(':
                case ')':
                  a6 = (__n128)vdupq_n_s64(0x40000uLL);
                  goto LABEL_93;
                case '*':
                  a6 = (__n128)xmmword_19D04B2C0;
LABEL_93:
                  __dst[0] = a6;
                  goto LABEL_94;
                default:
                  if (v37 != 54)
                    goto LABEL_94;
                  v39 = 0x400000;
                  break;
              }
LABEL_87:
              *(_QWORD *)&__dst[0] = v39;
              break;
          }
          goto LABEL_94;
        }
        if (v37 < 9)
          v41 = 41;
        else
          v41 = 42;
        if (v37 >= 7)
          v37 = v41;
        else
          v37 = 40;
      }
    }
    else
    {
      v37 = 10;
    }
    *(_DWORD *)v36 = v37;
    goto LABEL_50;
  }
  if (v18)
  {
    if (a3)
      v20 = v17 >= 2;
    else
      v20 = 0;
    v21 = !v20;
    if ((_DWORD)a2 || !v21)
      goto LABEL_14;
LABEL_322:
    *a4 = 0;
    return 1;
  }
  if (!(_DWORD)a2)
    goto LABEL_322;
  v23 = *(_BYTE *)(a1 + 1610);
  v24 = *(unsigned __int16 *)(a1 + 1608) | (3 << v23);
  *(_WORD *)(a1 + 1608) = v24;
  v23 += 2;
  *(_BYTE *)(a1 + 1610) = v23;
  *(_WORD *)(a1 + 6944) = v24;
  *a5 = a1 + 6944;
  *a4 = ((unint64_t)v23 + 7) >> 3;
  return 1;
}

BOOL BrotliEncoderHasMoreOutput(uint64_t a1)
{
  return *(_QWORD *)(a1 + 6928) != 0;
}

uint64_t BrotliEncoderTakeOutput(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 6928);
  if (*a2 >= v2)
    v3 = *(_QWORD *)(a1 + 6928);
  else
    v3 = *a2;
  if (!*a2)
    v3 = *(_QWORD *)(a1 + 6928);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 6920);
    *(_QWORD *)(a1 + 6920) = v4 + v3;
    *(_QWORD *)(a1 + 6928) = v2 - v3;
    *(_QWORD *)(a1 + 6936) += v3;
    if (*(_DWORD *)(a1 + 6964) == 1 && v2 == v3)
    {
      *(_DWORD *)(a1 + 6964) = 0;
      *(_QWORD *)(a1 + 6920) = 0;
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v3;
  return v4;
}

uint64_t BrotliEncoderVersion()
{
  return 16781312;
}

uint64_t BrotliEncoderPrepareDictionary(int a1, unint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(int a1, size_t size), void (*a6)(int a1, void *a2), void *(*a7)(int a1, size_t size))
{
  uint64_t v7;
  void *(**ManagedDictionary)(int, size_t);
  _DWORD *PreparedDictionary;

  if (a1)
    return 0;
  ManagedDictionary = BrotliCreateManagedDictionary(a5, a6, a7);
  v7 = (uint64_t)ManagedDictionary;
  if (ManagedDictionary)
  {
    PreparedDictionary = CreatePreparedDictionary((uint64_t)(ManagedDictionary + 1), a3, a2);
    *(_QWORD *)(v7 + 32) = PreparedDictionary;
    if (!PreparedDictionary)
    {
      BrotliDestroyManagedDictionary(v7);
      return 0;
    }
  }
  return v7;
}

uint64_t BrotliEncoderDestroyPreparedDictionary(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)result == -558043678)
    {
      v2 = *(_DWORD **)(result + 32);
      if (v2)
      {
        if (*v2 == -558043679)
        {
          BrotliCleanupSharedEncoderDictionary(result + 8, (uint64_t)v2);
          BrotliFree(v1 + 8);
        }
        else if (*v2 == -558043677)
        {
          DestroyPreparedDictionary(result + 8, (uint64_t)v2);
        }
      }
      *(_QWORD *)(v1 + 32) = 0;
      return BrotliDestroyManagedDictionary(v1);
    }
  }
  return result;
}

uint64_t BrotliEncoderAttachPreparedDictionary(uint64_t a1, int *a2)
{
  int *v2;
  int v4;
  uint64_t result;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = a2;
  v4 = *a2;
  if (*a2 == -558043678)
  {
    v2 = (int *)*((_QWORD *)a2 + 4);
    v4 = *v2;
  }
  if (v4 != -558043677)
  {
    if (v4 == -558043679)
    {
      v7 = !*(_DWORD *)(a1 + 624)
        && *(_BYTE *)(a1 + 628) == 1
        && (v6 = *(_QWORD *)(a1 + 696), *(_UNKNOWN **)(v6 + 24) == &kStaticDictionaryHashWords)
        && *(_QWORD *)(v6 + 32) == (_QWORD)&kStaticDictionaryHashLengths;
      v9 = !v2[136]
        && *((_BYTE *)v2 + 548) == 1
        && (v8 = *((_QWORD *)v2 + 77), *(_UNKNOWN **)(v8 + 24) == &kStaticDictionaryHashWords)
        && *(_QWORD *)(v8 + 32) == (_QWORD)&kStaticDictionaryHashLengths;
      if (!*(_DWORD *)(a1 + 6972))
      {
        v10 = *(_DWORD *)(a1 + 1392);
        if (v10 >= v2[328])
          v10 = v2[328];
        *(_DWORD *)(a1 + 1392) = v10;
        if (*((_QWORD *)v2 + 1))
        {
          v11 = 0;
          do
          {
            result = AttachPreparedDictionary((uint64_t *)(a1 + 88), *(_DWORD **)&v2[2 * v11 + 6]);
            if (!(_DWORD)result)
              return result;
          }
          while ((unint64_t)++v11 < *((_QWORD *)v2 + 1));
        }
        if (v9)
          return 1;
        if (v7)
        {
          memcpy((void *)(a1 + 624), v2 + 136, 0x300uLL);
          *(_QWORD *)(a1 + 1208) = 0;
          return 1;
        }
      }
    }
    else if (v4 == -558043680)
    {
      goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  result = AttachPreparedDictionary((uint64_t *)(a1 + 88), v2);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t GetBrotliStorage(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 1616) >= a2)
    return *(_QWORD *)(a1 + 1624);
  BrotliFree(a1 + 1400);
  *(_QWORD *)(a1 + 1624) = 0;
  result = BrotliAllocate(a1 + 1400);
  *(_QWORD *)(a1 + 1624) = result;
  *(_QWORD *)(a1 + 1616) = a2;
  return result;
}

void GetHashTable(_QWORD *a1, int a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  void *v12;

  v6 = 0x20000;
  if (!a2)
    v6 = 0x8000;
  if (v6 >= a3)
    v7 = a3;
  else
    v7 = v6;
  v8 = 256;
  do
  {
    v9 = v8;
    v8 *= 2;
  }
  while (v9 < v7);
  if ((v9 & 0xAAA00) == 0 && a2 == 0)
    v11 = v8;
  else
    v11 = v9;
  if (v11 > 0x400)
  {
    if (v11 <= a1[859])
    {
      v12 = (void *)a1[858];
    }
    else
    {
      a1[859] = v11;
      BrotliFree((uint64_t)(a1 + 175));
      a1[858] = 0;
      v12 = (void *)BrotliAllocate((uint64_t)(a1 + 175));
      a1[858] = v12;
    }
  }
  else
  {
    v12 = a1 + 346;
  }
  *a4 = v11;
  bzero(v12, 4 * v11);
}

BOOL UpdateLastProcessedPos(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 1520);
  if (v1 >> 30 >= 3)
    LODWORD(v1) = (((2 * (int)v1) >> 1) & 0xC0000000 | v1 & 0x3FFFFFFF) ^ 0x80000000;
  v2 = *(_QWORD *)(a1 + 1424);
  v3 = (((2 * (int)v2) >> 1) & 0xC0000000 | v2 & 0x3FFFFFFF) ^ 0x80000000;
  if (v2 <= 0xBFFFFFFF)
    v3 = *(_QWORD *)(a1 + 1424);
  *(_QWORD *)(a1 + 1520) = v2;
  return v3 < v1;
}

uint64_t ExtendLastCommand(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  _WORD *v42;
  unsigned int v43;
  int v44;

  v3 = *(_QWORD *)(result + 1480);
  v4 = *(_QWORD *)(result + 1488) - 1;
  v5 = (unsigned int *)(v3 + 16 * v4);
  v6 = v5 + 1;
  v7 = v5[1] & 0x1FFFFFF;
  if (*(_QWORD *)(result + 1520) - v7 >= (1 << *(_DWORD *)(result + 8)) - 16)
    v8 = (1 << *(_DWORD *)(result + 8)) - 16;
  else
    v8 = *(_QWORD *)(result + 1520) - v7;
  v9 = *(int *)(result + 1528);
  v10 = *((unsigned __int16 *)v5 + 7);
  v11 = v10 & 0x3FF;
  v12 = *(_DWORD *)(result + 60);
  if (v11 >= v12 + 16)
    v11 = v12
        + 16
        + ((v11 - v12 - 16) & ~(-1 << *(_DWORD *)(result + 56)))
        + ((v5[2] + ((((v11 - v12 - 16) >> *(_DWORD *)(result + 56)) & 1 | 2) << (v10 >> 10)) - 4) << *(_DWORD *)(result + 56));
  if (v11 < 0x10 || v11 - 15 == v9)
  {
    v14 = *(_QWORD *)(result + 1464);
    v15 = *(unsigned int *)(result + 1436);
    v16 = v9 >= v8;
    v17 = v9 - v8;
    if (v17 != 0 && v16)
    {
      v18 = *(_QWORD *)(result + 96);
      if (v17 - 1 < v18 && v17 > v7)
      {
        v20 = 0;
        v21 = v18 - v17 + v7;
        do
        {
          v22 = v20 + 1;
          v23 = *(_QWORD *)(result + 8 * v20++ + 368);
        }
        while (v21 >= v23);
        if (*a2)
        {
          v24 = v22 - 1;
          v25 = result + 8 * v22;
          v26 = *(_QWORD *)(v25 + 352);
          v27 = v23 - v26;
          v28 = *(_QWORD *)(v25 + 224);
          v29 = v21 - v26;
          v30 = *a3;
          do
          {
            if (*(unsigned __int8 *)(v14 + (v30 & v15)) != *(unsigned __int8 *)(v28 + v29))
              break;
            ++*v6;
            --*a2;
            v30 = (*a3 + 1);
            *a3 = v30;
            if (++v29 == v27)
            {
              v31 = v24 + 1;
              if (v24 + 1 == *(_QWORD *)(result + 88))
                break;
              v29 = 0;
              v28 = *(_QWORD *)(result + 8 * v31 + 232);
              v27 = *(_QWORD *)(result + 360 + 8 * v24++ + 16) - *(_QWORD *)(result + 360 + 8 * v31);
            }
          }
          while (*a2);
        }
      }
    }
    else if (*a2)
    {
      v32 = *a3;
      do
      {
        if (*(unsigned __int8 *)(v14 + (v32 & v15)) != *(unsigned __int8 *)(v14
                                                                           + (((_DWORD)v32 - (_DWORD)v9) & v15)))
          break;
        ++*v6;
        --*a2;
        v32 = (*a3 + 1);
        *a3 = v32;
      }
      while (*a2);
    }
    v33 = *v5;
    v34 = (*v6 & 0x1FFFFFFu) + (*v6 >> 25);
    v35 = v10 & 0x3FF;
    if (v33 > 5)
    {
      if (v33 > 0x81)
      {
        if (v33 > 0x841)
        {
          if (v33 >> 1 >= 0xC21)
          {
            if (v33 < 0x5842)
              LOWORD(v33) = 22;
            else
              LOWORD(v33) = 23;
          }
          else
          {
            LOWORD(v33) = 21;
          }
        }
        else
        {
          LODWORD(v33) = (__clz(v33 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v33 -= 2;
        v36 = (__clz(v33) ^ 0x1F) - 1;
        LODWORD(v33) = (v33 >> v36) + 2 * v36 + 2;
      }
    }
    v37 = v3 + 16 * v4;
    if (v34 > 9)
    {
      v39 = (__clz(v34 - 70) ^ 0x1F) + 12;
      if (v34 <= 0x845)
        v40 = v39;
      else
        v40 = 23;
      v41 = (__clz(v34 - 6) ^ 0x1F) - 1;
      v38 = ((unint64_t)(v34 - 6) >> v41) + 2 * v41 + 4;
      if (v34 > 0x85)
        LOWORD(v38) = v40;
    }
    else
    {
      LOWORD(v38) = v34 - 2;
    }
    v42 = (_WORD *)(v37 + 12);
    v43 = v38 & 7 | (8 * (v33 & 7));
    if (v35 || (unsigned __int16)v33 > 7u || (unsigned __int16)v38 > 0xFu)
    {
      v44 = 3 * ((unsigned __int16)v33 >> 3) + ((unsigned __int16)(v38 & 0xFFF8) >> 3);
      v43 = ((((0x520D40u >> (2 * v44)) & 0xC0) + (v44 << 6)) | v43) + 64;
    }
    else if ((v38 & 0xFFF8) != 0)
    {
      LOWORD(v43) = v43 | 0x40;
    }
    *v42 = v43;
  }
  return result;
}

__n128 InitializeH5(__n128 *a1, uint64_t a2)
{
  unsigned __int32 v2;
  unint64_t v3;
  char v4;
  __n128 result;
  uint64_t v6;

  *(_QWORD *)(a2 + 32) = a1;
  v2 = a1[3].n128_u32[3];
  v3 = a1[4].n128_u64[0];
  *(_QWORD *)(a2 + 24) = v3;
  v4 = v3;
  result = *a1;
  v6 = 1 << v4;
  *(__n128 *)(a2 + 40) = *a1;
  *(_QWORD *)a2 = 1 << v2;
  *(_QWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = 32 - v2;
  *(_DWORD *)(a2 + 20) = v6 - 1;
  return result;
}

void PrepareH2(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  char *v4;
  uint64_t v5;

  v4 = *(char **)(a1 + 8);
  if (a2 && a3 <= 0x800)
  {
    for (; a3; --a3)
    {
      v5 = *a4;
      a4 = (uint64_t *)((char *)a4 + 1);
      *(_DWORD *)&v4[((unint64_t)(0x7BD3579BD3000000 * v5) >> 46) & 0x3FFFC] = 0;
    }
  }
  else
  {
    bzero(v4, 0x40000uLL);
  }
}

void PrepareH3(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_DWORD **)(a1 + 8);
  if (a2 && a3 <= 0x800)
  {
    for (; a3; --a3)
    {
      v5 = *a4;
      a4 = (uint64_t *)((char *)a4 + 1);
      v6 = (unint64_t)(0x7BD3579BD3000000 * v5) >> 48;
      v4[v6] = 0;
      v4[(unsigned __int16)(v6 + 8)] = 0;
    }
  }
  else
  {
    bzero(v4, 0x40000uLL);
  }
}

void PrepareH4(uint64_t a1, int a2, unint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  uint64_t i;
  int v6;
  unint64_t v7;

  v4 = *(_DWORD **)(a1 + 8);
  if (a2 && a3 <= 0x1000)
  {
    if (a3)
    {
      for (i = 0; i != a3; ++i)
      {
        v6 = 0;
        v7 = (unint64_t)(0x7BD3579BD3000000 * *(_QWORD *)(a4 + i)) >> 47;
        do
        {
          v4[((_DWORD)v7 + v6) & 0x1FFFF] = 0;
          v6 += 8;
        }
        while (v6 != 32);
      }
    }
  }
  else
  {
    bzero(v4, 0x80000uLL);
  }
}

void PrepareH5(unint64_t *a1, int a2, unint64_t a3, int *a4)
{
  _WORD *v5;
  unint64_t v6;
  int v7;
  int v8;

  v5 = (_WORD *)a1[5];
  v6 = *a1;
  if (a2 && v6 >> 6 >= a3)
  {
    if (a3)
    {
      v7 = *((_DWORD *)a1 + 4);
      do
      {
        v8 = *a4;
        a4 = (int *)((char *)a4 + 1);
        v5[(506832829 * v8) >> v7] = 0;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    bzero(v5, 2 * v6);
  }
}

void PrepareH6(unint64_t *a1, int a2, unint64_t a3, uint64_t *a4)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = (char *)a1[6];
  v6 = *a1;
  if (a2 && v6 >> 6 >= a3)
  {
    if (a3)
    {
      v7 = a1[2];
      do
      {
        v8 = *a4;
        a4 = (uint64_t *)((char *)a4 + 1);
        *(_WORD *)&v5[((v8 * v7) >> 48) & 0xFFFE] = 0;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    bzero(v5, 2 * v6);
  }
}

void PrepareH40(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;

  v5 = *(_QWORD *)(a1 + 16);
  if (a2 && a3 <= 0x200)
  {
    for (; a3; --a3)
    {
      v6 = *a4;
      a4 = (int *)((char *)a4 + 1);
      v7 = (506832829 * v6) >> 17;
      *(_DWORD *)(v5 + 4 * v7) = -858993460;
      *(_WORD *)(v5 + 0x20000 + 2 * v7) = -13108;
    }
  }
  else
  {
    memset(*(void **)(a1 + 16), 204, 0x20000uLL);
    bzero((void *)(v5 + 0x20000), 0x10000uLL);
  }
  bzero((void *)(v5 + 196608), 0x10000uLL);
  *(_WORD *)a1 = 0;
}

void PrepareH42(void **a1, int a2, unint64_t a3, int *a4)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;

  v5 = a1[129];
  if (a2 && a3 <= 0x200)
  {
    for (; a3; --a3)
    {
      v6 = *a4;
      a4 = (int *)((char *)a4 + 1);
      v7 = (506832829 * v6) >> 17;
      v5[v7] = -858993460;
      *((_WORD *)v5 + v7 + 0x10000) = -13108;
    }
  }
  else
  {
    memset(a1[129], 204, 0x20000uLL);
    bzero(v5 + 0x8000, 0x10000uLL);
  }
  bzero(v5 + 49152, 0x10000uLL);
  bzero(a1, 0x400uLL);
}

void PrepareH54(uint64_t a1, int a2, unint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  uint64_t i;
  int v6;
  unint64_t v7;

  v4 = *(_DWORD **)(a1 + 8);
  if (a2 && a3 <= 0x8000)
  {
    if (a3)
    {
      for (i = 0; i != a3; ++i)
      {
        v6 = 0;
        v7 = (0xE35A7BD3579BD300 * *(_QWORD *)(a4 + i)) >> 44;
        do
        {
          v4[((_DWORD)v7 + v6) & 0xFFFFF] = 0;
          v6 += 8;
        }
        while (v6 != 32);
      }
    }
  }
  else
  {
    bzero(v4, 0x400000uLL);
  }
}

void PrepareH35(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;

  if (*(_DWORD *)(a1 + 224))
  {
    *(_DWORD *)(a1 + 224) = 0;
    v8 = *(uint64_t **)(a1 + 216);
    v9 = *v8;
    *(_QWORD *)(a1 + 56) = *v8;
    v10 = v8[1];
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = v10;
    v11 = (void *)v8[2];
    *(_QWORD *)(a1 + 136) = v11;
    v12 = v8[3];
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = v12;
    *(_QWORD *)a1 = a1 + 56;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 44) = 0x16C4362100010DCDLL;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = 0;
    memset(v11, 255, 0x4000000uLL);
  }
  PrepareH3(a1, a2, a3, a4);
  if (a3 >= 0x20)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v14 = *((unsigned __int8 *)a4 + v13) + v14 * *(_DWORD *)(a1 + 44) + 1;
      v15 = v13 >= 0x1C;
      v13 += 4;
    }
    while (!v15);
    *(_DWORD *)(a1 + 16) = v14;
  }
}

void PrepareH55(uint64_t a1, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;

  if (*(_DWORD *)(a1 + 224))
  {
    *(_DWORD *)(a1 + 224) = 0;
    v8 = *(uint64_t **)(a1 + 216);
    v9 = *v8;
    *(_QWORD *)(a1 + 56) = *v8;
    v10 = v8[1];
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = v10;
    v11 = (void *)v8[2];
    *(_QWORD *)(a1 + 136) = v11;
    v12 = v8[3];
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = v12;
    *(_QWORD *)a1 = a1 + 56;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 44) = 0x16C4362100010DCDLL;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = 0;
    memset(v11, 255, 0x4000000uLL);
  }
  PrepareH54(a1, a2, a3, a4);
  if (a3 >= 0x20)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v14 = *(unsigned __int8 *)(a4 + v13) + v14 * *(_DWORD *)(a1 + 44) + 1;
      v15 = v13 >= 0x1C;
      v13 += 4;
    }
    while (!v15);
    *(_DWORD *)(a1 + 16) = v14;
  }
}

void PrepareH65(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(_DWORD *)(a1 + 272))
  {
    *(_DWORD *)(a1 + 272) = 0;
    v8 = *(uint64_t **)(a1 + 264);
    v9 = *v8;
    *(_QWORD *)(a1 + 104) = *v8;
    v10 = v8[1];
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 16) = 0x7BD3579BD3000000;
    v11 = 1 << *(_DWORD *)(a1 + 164);
    v12 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 28) = v12;
    v13 = (void *)v8[2];
    *(_QWORD *)(a1 + 184) = v13;
    v14 = v8[3];
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 192) = v14;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = 1 << v12;
    *(_DWORD *)(a1 + 24) = (1 << v12) - 1;
    *(_QWORD *)(a1 + 40) = a1 + 104;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    *(_DWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 92) = 0xF1EBF08100010DCDLL;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = 0;
    memset(v13, 255, 0x4000000uLL);
  }
  PrepareH6((unint64_t *)a1, a2, a3, a4);
  if (a3 >= 0x20)
  {
    v15 = 0;
    v16 = 0;
    do
      v16 = *((unsigned __int8 *)a4 + v15++) + v16 * *(_DWORD *)(a1 + 92) + 1;
    while (v15 != 32);
    *(_DWORD *)(a1 + 64) = v16;
  }
}

void BrotliPopulationCostLiteral(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t i;
  BOOL v5;
  uint64_t j;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  _OWORD v33[4];
  uint64_t v34;
  _QWORD v35[6];

  v35[5] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 1024);
  if (!v1)
    return;
  v3 = 0;
  for (i = 0; i != 256; ++i)
  {
    if (*(_DWORD *)(a1 + 4 * i))
    {
      v35[v3] = i;
      v5 = v3++ <= 3;
      if (!v5)
        break;
    }
  }
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
      return;
    case 4:
      for (j = 0; j != 4; ++j)
        *((_DWORD *)v33 + j) = *(_DWORD *)(a1 + 4 * v35[j]);
      v7 = 0;
      do
      {
        v8 = v7++;
        if (v8 <= 2)
        {
          v9 = *((_DWORD *)v33 + v8);
          v10 = v7;
          do
          {
            v11 = *((_DWORD *)v33 + v10);
            if (v11 > v9)
            {
              *((_DWORD *)v33 + v10) = v9;
              *((_DWORD *)v33 + v8) = v11;
              v9 = v11;
            }
            ++v10;
          }
          while (v10 != 4);
        }
      }
      while (v7 != 4);
      return;
    default:
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      if (v1 > 0xFF)
        v12 = log2((double)v1);
      else
        v12 = kBrotliLog2Table[v1];
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 1;
      break;
  }
  do
  {
    v17 = *(unsigned int *)(a1 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (v17 > 0xFF)
      {
        v19 = (double)v17;
        v18 = log2((double)v17);
      }
      else
      {
        v18 = kBrotliLog2Table[v17];
        v19 = (double)v17;
      }
      v23 = v12 - v18;
      v24 = (unint64_t)(v23 + 0.5);
      v15 = v15 + v19 * v23;
      if (v24 >= 0xF)
        v24 = 15;
      if (v24 > v16)
        v16 = v24;
      ++*((_DWORD *)v33 + v24);
      ++v14;
      continue;
    }
    if (v14 == 255)
      break;
    v20 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 4 + 4 * v14 + 4 * v20))
        break;
      ++v20;
    }
    while (255 - v14 != v20);
    v21 = v20 + 1;
    v14 += (v20 + 1);
    if (v14 == 256)
      break;
    v22 = v20 - 1;
    if (v21 > 2)
    {
      do
      {
        ++v13;
        v15 = v15 + 3.0;
        v5 = v22 > 7;
        v22 >>= 3;
      }
      while (v5);
    }
    else
    {
      LODWORD(v33[0]) += v21;
    }
  }
  while (v14 < 0x100);
  v25 = 0;
  v26 = 0;
  HIDWORD(v34) = v13;
  v27 = 0.0;
  do
  {
    v28 = *((unsigned int *)v33 + v26);
    if (v28 > 0xFF)
    {
      v30 = (double)v28;
      v29 = log2((double)v28);
    }
    else
    {
      v29 = kBrotliLog2Table[v28];
      v30 = (double)v28;
    }
    v31 = *((unsigned int *)v33 + v26 + 1);
    if (v31 > 0xFF)
      v32 = log2((double)v31);
    else
      v32 = kBrotliLog2Table[v31];
    v26 += 2;
    v25 += v28 + v31;
    v27 = v27 - v30 * v29 - (double)v31 * v32;
  }
  while ((unint64_t)(v26 - 2) < 0x10);
  if (v25 >= 0x100)
    log2((double)v25);
}

void BrotliPopulationCostCommand(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t i;
  BOOL v5;
  uint64_t j;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  _OWORD v33[4];
  uint64_t v34;
  _QWORD v35[7];

  v35[5] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 2816);
  if (!v1)
    return;
  v3 = 0;
  for (i = 0; i != 704; ++i)
  {
    if (*(_DWORD *)(a1 + 4 * i))
    {
      v35[v3] = i;
      v5 = v3++ <= 3;
      if (!v5)
        break;
    }
  }
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
      return;
    case 4:
      for (j = 0; j != 4; ++j)
        *((_DWORD *)v33 + j) = *(_DWORD *)(a1 + 4 * v35[j]);
      v7 = 0;
      do
      {
        v8 = v7++;
        if (v8 <= 2)
        {
          v9 = *((_DWORD *)v33 + v8);
          v10 = v7;
          do
          {
            v11 = *((_DWORD *)v33 + v10);
            if (v11 > v9)
            {
              *((_DWORD *)v33 + v10) = v9;
              *((_DWORD *)v33 + v8) = v11;
              v9 = v11;
            }
            ++v10;
          }
          while (v10 != 4);
        }
      }
      while (v7 != 4);
      return;
    default:
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      if (v1 > 0xFF)
        v12 = log2((double)v1);
      else
        v12 = kBrotliLog2Table[v1];
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 1;
      break;
  }
  do
  {
    v17 = *(unsigned int *)(a1 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (v17 > 0xFF)
      {
        v19 = (double)v17;
        v18 = log2((double)v17);
      }
      else
      {
        v18 = kBrotliLog2Table[v17];
        v19 = (double)v17;
      }
      v22 = v12 - v18;
      v23 = (unint64_t)(v22 + 0.5);
      v15 = v15 + v19 * v22;
      if (v23 >= 0xF)
        v23 = 15;
      if (v23 > v16)
        v16 = v23;
      ++*((_DWORD *)v33 + v23);
      ++v14;
      continue;
    }
    if (v14 > 0x2BE)
    {
      if (++v14 == 704)
        break;
      v21 = 1;
      goto LABEL_41;
    }
    v20 = 0;
    v21 = 704 - v14;
    while (!*(_DWORD *)(a1 + 4 + 4 * v14 + 4 * v20))
    {
      if (703 - v14 == ++v20)
        goto LABEL_39;
    }
    v21 = v20 + 1;
LABEL_39:
    v14 += v21;
    if (v14 == 704)
      break;
    v24 = v21 - 2;
    if (v21 > 2)
    {
      do
      {
        ++v13;
        v15 = v15 + 3.0;
        v5 = v24 > 7;
        v24 >>= 3;
      }
      while (v5);
      continue;
    }
LABEL_41:
    LODWORD(v33[0]) += v21;
  }
  while (v14 < 0x2C0);
  v25 = 0;
  v26 = 0;
  HIDWORD(v34) = v13;
  v27 = 0.0;
  do
  {
    v28 = *((unsigned int *)v33 + v26);
    if (v28 > 0xFF)
    {
      v30 = (double)v28;
      v29 = log2((double)v28);
    }
    else
    {
      v29 = kBrotliLog2Table[v28];
      v30 = (double)v28;
    }
    v31 = *((unsigned int *)v33 + v26 + 1);
    if (v31 > 0xFF)
      v32 = log2((double)v31);
    else
      v32 = kBrotliLog2Table[v31];
    v26 += 2;
    v25 += v28 + v31;
    v27 = v27 - v30 * v29 - (double)v31 * v32;
  }
  while ((unint64_t)(v26 - 2) < 0x10);
  if (v25 >= 0x100)
    log2((double)v25);
}

void BrotliPopulationCostDistance(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t i;
  BOOL v5;
  uint64_t j;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  _OWORD v33[4];
  uint64_t v34;
  _QWORD v35[7];

  v35[5] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 2176);
  if (!v1)
    return;
  v3 = 0;
  for (i = 0; i != 544; ++i)
  {
    if (*(_DWORD *)(a1 + 4 * i))
    {
      v35[v3] = i;
      v5 = v3++ <= 3;
      if (!v5)
        break;
    }
  }
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
      return;
    case 4:
      for (j = 0; j != 4; ++j)
        *((_DWORD *)v33 + j) = *(_DWORD *)(a1 + 4 * v35[j]);
      v7 = 0;
      do
      {
        v8 = v7++;
        if (v8 <= 2)
        {
          v9 = *((_DWORD *)v33 + v8);
          v10 = v7;
          do
          {
            v11 = *((_DWORD *)v33 + v10);
            if (v11 > v9)
            {
              *((_DWORD *)v33 + v10) = v9;
              *((_DWORD *)v33 + v8) = v11;
              v9 = v11;
            }
            ++v10;
          }
          while (v10 != 4);
        }
      }
      while (v7 != 4);
      return;
    default:
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      if (v1 > 0xFF)
        v12 = log2((double)v1);
      else
        v12 = kBrotliLog2Table[v1];
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 1;
      break;
  }
  do
  {
    v17 = *(unsigned int *)(a1 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (v17 > 0xFF)
      {
        v19 = (double)v17;
        v18 = log2((double)v17);
      }
      else
      {
        v18 = kBrotliLog2Table[v17];
        v19 = (double)v17;
      }
      v22 = v12 - v18;
      v23 = (unint64_t)(v22 + 0.5);
      v15 = v15 + v19 * v22;
      if (v23 >= 0xF)
        v23 = 15;
      if (v23 > v16)
        v16 = v23;
      ++*((_DWORD *)v33 + v23);
      ++v14;
      continue;
    }
    if (v14 > 0x21E)
    {
      if (++v14 == 544)
        break;
      v21 = 1;
      goto LABEL_41;
    }
    v20 = 0;
    v21 = 544 - v14;
    while (!*(_DWORD *)(a1 + 4 + 4 * v14 + 4 * v20))
    {
      if (543 - v14 == ++v20)
        goto LABEL_39;
    }
    v21 = v20 + 1;
LABEL_39:
    v14 += v21;
    if (v14 == 544)
      break;
    v24 = v21 - 2;
    if (v21 > 2)
    {
      do
      {
        ++v13;
        v15 = v15 + 3.0;
        v5 = v24 > 7;
        v24 >>= 3;
      }
      while (v5);
      continue;
    }
LABEL_41:
    LODWORD(v33[0]) += v21;
  }
  while (v14 < 0x220);
  v25 = 0;
  v26 = 0;
  HIDWORD(v34) = v13;
  v27 = 0.0;
  do
  {
    v28 = *((unsigned int *)v33 + v26);
    if (v28 > 0xFF)
    {
      v30 = (double)v28;
      v29 = log2((double)v28);
    }
    else
    {
      v29 = kBrotliLog2Table[v28];
      v30 = (double)v28;
    }
    v31 = *((unsigned int *)v33 + v26 + 1);
    if (v31 > 0xFF)
      v32 = log2((double)v31);
    else
      v32 = kBrotliLog2Table[v31];
    v26 += 2;
    v25 += v28 + v31;
    v27 = v27 - v30 * v29 - (double)v31 * v32;
  }
  while ((unint64_t)(v26 - 2) < 0x10);
  if (v25 >= 0x100)
    log2((double)v25);
}

uint64_t BrotliZopfliCreateCommands(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  __int16 v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int16 v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v44;
  unsigned int v45;
  uint64_t v46;

  v46 = result;
  v8 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v8 == -1)
  {
    v9 = 0;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v11 = (1 << *(_DWORD *)(a6 + 8)) - 16;
    v12 = *(_QWORD *)(a6 + 16) + a2;
    v13 = *(_QWORD *)(a6 + 96);
    v14 = a7 + 8;
    do
    {
      v15 = (unsigned int *)(a3 + 16 * (v9 + v8));
      v16 = *v15;
      v17 = v15[2];
      v8 = v15[3];
      v18 = v17 & 0x7FFFFFF;
      if (v10)
      {
        v19 = v17 & 0x7FFFFFF;
      }
      else
      {
        v19 = *a5 + v18;
        *a5 = 0;
      }
      v20 = v16 & 0x1FFFFFF;
      v21 = v9 + v18;
      v22 = v15[1];
      v23 = (v16 & 0x1FFFFFF) - (v16 >> 25) + 9;
      v24 = v12 + v21;
      if (v12 + v21 >= v11)
        v24 = v11;
      v25 = v17 >> 27;
      if (v25)
        v26 = v25 - 1;
      else
        v26 = (v22 + 15);
      *(_DWORD *)(v14 - 8) = v19;
      *(_DWORD *)(v14 - 4) = v20 | ((v23 - v16) << 25);
      v27 = *(unsigned int *)(a6 + 60);
      v28 = v27 + 16;
      if (v27 + 16 <= v26)
      {
        v31 = *(_DWORD *)(a6 + 56);
        v32 = v26 - v27 + (4 << v31) - 16;
        v33 = (__clz(v32) ^ 0x1F) - 1;
        result = (v32 & ~(-1 << v31))
               + v28
               + ((((v32 >> v33) & 1 | (2 * (v33 - v31))) + 65534) << v31);
        v30 = ((v32 & ~(-1 << v31)) + v28 + ((((v32 >> v33) & 1 | (2 * (v33 - v31))) + 65534) << v31)) | (((_WORD)v33 - (_WORD)v31) << 10);
        v29 = (v32 - (((v32 >> v33) & 1 | 2) << v33)) >> v31;
      }
      else
      {
        LODWORD(v29) = 0;
        v30 = v26;
      }
      *(_WORD *)(v14 + 6) = v30;
      *(_DWORD *)v14 = v29;
      if (v19 > 5)
      {
        if (v19 > 0x81)
        {
          if (v19 > 0x841)
          {
            if (v19 >> 1 >= 0xC21)
            {
              if (v19 < 0x5842)
                LOWORD(v34) = 22;
              else
                LOWORD(v34) = 23;
            }
            else
            {
              LOWORD(v34) = 21;
            }
          }
          else
          {
            v34 = (__clz(v19 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v35 = (__clz(v19 - 2) ^ 0x1F) - 1;
          v34 = ((v19 - 2) >> v35) + 2 * v35 + 2;
        }
      }
      else
      {
        LOWORD(v34) = v19;
      }
      if (v23 > 9)
      {
        v37 = (__clz(v23 - 70) ^ 0x1F) + 12;
        if (v23 > 0x845)
          LOWORD(v37) = 23;
        v38 = (__clz(v23 - 6) ^ 0x1F) - 1;
        v39 = ((unint64_t)(int)(v23 - 6) >> v38) + 2 * v38 + 4;
        if (v23 <= 0x85)
          v36 = v39;
        else
          v36 = v37;
      }
      else
      {
        v36 = v23 - 2;
      }
      v40 = v30 & 0x3FF;
      v41 = v36 & 7 | (8 * (v34 & 7));
      if (v40)
        v42 = 1;
      else
        v42 = (unsigned __int16)v34 > 7u;
      if (v42 || v36 > 0xFu)
      {
        v44 = 3 * ((unsigned __int16)v34 >> 3) + ((unsigned __int16)(v36 & 0xFFF8) >> 3);
        v45 = ((((0x520D40u >> (2 * v44)) & 0xC0) + (v44 << 6)) | v41) + 64;
      }
      else if ((v36 & 0xFFF8) != 0)
      {
        LOWORD(v45) = v41 | 0x40;
      }
      else
      {
        LOWORD(v45) = v36 & 7 | (8 * (v34 & 7));
      }
      *(_WORD *)(v14 + 4) = v45;
      if (v24 + v13 >= v22 && (_DWORD)v26)
      {
        *(_DWORD *)(a4 + 12) = *(_DWORD *)(a4 + 8);
        *(_QWORD *)(a4 + 4) = *(_QWORD *)a4;
        *(_DWORD *)a4 = v22;
      }
      *a8 += v19;
      v9 = v21 + v20;
      --v10;
      v14 += 16;
    }
    while (v8 != 0xFFFFFFFFLL);
  }
  *a5 += v46 - v9;
  return result;
}

uint64_t BrotliZopfliComputeShortestPath(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8, _QWORD *a9, _DWORD *a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t i;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  int *v105;
  unint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  BOOL v113;
  BOOL v114;
  unint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t updated;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned __int8 *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  _DWORD *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unsigned __int8 *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unsigned __int8 *v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unint64_t v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  _DWORD *v185;
  unint64_t v186;
  unint64_t v187;
  int *v188;
  int v189;
  uint64_t v191;
  unint64_t v192;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  int v202[2];
  uint64_t v203;
  uint64_t v205;
  unint64_t v206;
  _DWORD *v207;
  uint64_t *v208;
  int v209;
  int v210[2];
  _OWORD v211[16];
  uint64_t v212;
  _DWORD __b[38];
  uint64_t v214;

  v16 = (uint64_t)a10;
  v214 = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(a7 + 16);
  v209 = *(_DWORD *)(a7 + 8);
  v113 = *(_DWORD *)(a7 + 4) < 11;
  v18 = 325;
  memset(&v211[14], 0, 32);
  if (v113)
    v18 = 150;
  v195 = v17;
  v196 = v18;
  memset(v211, 0, 224);
  v200 = BrotliAllocate(a1);
  if (a2 >= 0x7F)
    v19 = a2 - 127;
  else
    v19 = 0;
  v20 = *(_QWORD *)(a7 + 88);
  v203 = *(_QWORD *)(a7 + 96);
  v21 = BrotliAllocate(a1);
  *a10 = 0;
  a10[3] = 0;
  v191 = a1;
  InitZopfliCostModel(a1, v21, a7 + 56, a2);
  v205 = v21;
  ZopfliCostModelSetFromLiteralCosts(v21, a3, a4, a5);
  v212 = 0;
  if (a2 < 4)
    goto LABEL_248;
  v22 = a7;
  v23 = 0;
  v206 = (1 << v209) - 16;
  v192 = v19 + a3;
  v207 = a9 + 12;
  v201 = (uint64_t *)(v200 + ((unint64_t)(v20 != 0) << 11));
  v208 = v201 - 64;
  *(_QWORD *)v210 = a7;
  v194 = a2;
  do
  {
    v24 = v23 + a3;
    if (v23 + a3 >= v206)
      v25 = v206;
    else
      v25 = v23 + a3;
    v26 = v24 + v195;
    if (v24 + v195 >= v206)
      v26 = v206;
    v198 = v26;
    if (!*(_DWORD *)(v22 + 624))
    {
      v29 = 0;
      goto LABEL_21;
    }
    if (!v24)
    {
      v27 = 0;
LABEL_19:
      v28 = 0;
      goto LABEL_20;
    }
    v27 = *(unsigned __int8 *)(a4 + ((v24 - 1) & a5));
    if (v24 == 1)
      goto LABEL_19;
    v28 = *(unsigned __int8 *)(a4 + ((v24 - 2) & a5));
LABEL_20:
    v29 = *(unsigned __int8 *)(v22 + (*(_BYTE *)(a6 + 256 + v28) | *(_BYTE *)(a6 + v27)) + 629);
LABEL_21:
    v30 = *(_QWORD *)(v22 + 8 * v29 + 696);
    v31 = a2 - v23;
    v32 = v24 & a5;
    v33 = 16;
    if (*(_DWORD *)(v22 + 4) == 11)
      v33 = 64;
    v114 = v24 >= v33;
    v34 = v24 - v33;
    if (!v114)
      v34 = 0;
    v35 = v24 - 1;
    if (v24 - 1 <= v34)
    {
      v38 = 1;
      v37 = v201;
      v39 = v30;
    }
    else
    {
      v36 = (unsigned __int8 *)(a4 + v32);
      v37 = v201;
      v38 = 1;
      v39 = v30;
      do
      {
        if (v24 - v35 > v25)
          break;
        v40 = (unsigned __int8 *)(a4 + (v35 & a5));
        if (*v36 == *v40 && *(unsigned __int8 *)(a4 + v32 + 1) == *(unsigned __int8 *)((v35 & a5) + a4 + 1))
        {
          if (v31 < 8)
          {
            v45 = (unsigned __int8 *)(a4 + (v35 & a5));
            v44 = (unsigned __int8 *)(a4 + v32);
            i = v31;
            if (v31)
            {
LABEL_37:
              v46 = &v45[i];
              while (*v45 == *v44)
              {
                ++v44;
                ++v45;
                if (!--i)
                {
                  v45 = v46;
                  break;
                }
              }
            }
          }
          else
          {
            v41 = 0;
            for (i = v31; i > 7; i -= 8)
            {
              v43 = *(_QWORD *)&v40[v41] ^ *(_QWORD *)&v36[v41];
              if (v43)
              {
                v47 = v41 + (__clz(__rbit64(v43)) >> 3);
                goto LABEL_43;
              }
              v41 += 8;
            }
            v44 = &v36[v41];
            v45 = &v40[v41];
            if (i)
              goto LABEL_37;
          }
          v47 = v45 - v40;
LABEL_43:
          if (v47 > v38)
          {
            *(_DWORD *)v37 = v24 - v35;
            *((_DWORD *)v37++ + 1) = 32 * v47;
            v38 = v47;
          }
        }
        if (--v35 <= v34)
          break;
      }
      while (v38 < 3);
    }
    *(_QWORD *)v202 = v23;
    v199 = v23 + a3;
    if (v38 < v31)
    {
      v48 = (506832829 * *(_DWORD *)(a4 + v32)) >> 15;
      v49 = a9[13];
      v51 = a9[10];
      v50 = a9[11];
      v52 = *(unsigned int *)(v50 + 4 * v48);
      if (v31 >= 0x80)
        v53 = 128;
      else
        v53 = v31;
      if (v31 >= 0x80)
        *(_DWORD *)(v50 + 4 * v48) = v24;
      v54 = 2 * (v51 & v24);
      v55 = v54 | 1;
      if (v24 != v52)
      {
        v56 = 0;
        v57 = 0;
        v58 = 64;
        do
        {
          if (v24 - v52 > v25 || v58 == 0)
            break;
          v60 = v52 & a5;
          if (v57 >= v56)
            v61 = v56;
          else
            v61 = v57;
          v62 = a4 + v32 + v61;
          v63 = (unsigned __int8 *)(a4 + v60 + v61);
          v64 = v31 - v61;
          if (v31 - v61 < 8)
          {
            v67 = (unsigned __int8 *)(a4 + v32 + v61);
            if (v64)
            {
LABEL_71:
              v68 = &v67[v64];
              while (*v67 == *v63)
              {
                ++v63;
                ++v67;
                if (!--v64)
                {
                  v67 = v68;
                  break;
                }
              }
            }
          }
          else
          {
            v65 = 0;
            do
            {
              v66 = *(_QWORD *)(v62 + v65) ^ *(_QWORD *)&v63[v65];
              if (v66)
              {
                v69 = (unsigned __int8 *)(v65 + (__clz(__rbit64(v66)) >> 3));
                goto LABEL_77;
              }
              v64 -= 8;
              v65 += 8;
            }
            while (v64 > 7);
            v63 += v65;
            v67 = (unsigned __int8 *)(v62 + v65);
            if (v64)
              goto LABEL_71;
          }
          v69 = &v67[-v62];
LABEL_77:
          v70 = (unint64_t)&v69[v61];
          if (v37 && v70 > v38)
          {
            *(_DWORD *)v37 = v24 - v52;
            *((_DWORD *)v37++ + 1) = 32 * v70;
            v38 = v70;
          }
          if (v70 >= v53)
          {
            if (v31 < 0x80)
              goto LABEL_92;
            v188 = (int *)(v49 + 8 * (v52 & v51));
            v189 = *v188;
            v72 = v188 + 1;
            *(_DWORD *)(v49 + 4 * v54) = v189;
            goto LABEL_91;
          }
          if (*(unsigned __int8 *)(a4 + v70 + v32) <= *(unsigned __int8 *)(a4 + v70 + v60))
          {
            if (v31 >= 0x80)
              *(_DWORD *)(v49 + 4 * v55) = v52;
            v71 = 2 * (v52 & v51);
            v55 = v71;
            v56 = v70;
          }
          else
          {
            if (v31 >= 0x80)
              *(_DWORD *)(v49 + 4 * v54) = v52;
            v71 = (2 * (v52 & v51)) | 1;
            v54 = v71;
            v57 = v70;
          }
          v52 = *(unsigned int *)(v49 + 4 * v71);
          --v58;
        }
        while (v24 != v52);
      }
      if (v31 >= 0x80)
      {
        *(_DWORD *)(v49 + 4 * v54) = *v207;
        v72 = a9 + 12;
LABEL_91:
        *(_DWORD *)(v49 + 4 * v55) = *v72;
      }
    }
LABEL_92:
    memset_pattern16(__b, &unk_19CFE56A0, 0x98uLL);
    if (v38 + 1 > 4)
      v73 = v38 + 1;
    else
      v73 = 4;
    v74 = (uint64_t *)(a4 + v32);
    if (BrotliFindAllStaticDictionaryMatches(v39, (unsigned __int8 *)(a4 + v32), v73, v31, (uint64_t)__b))
    {
      if (v31 >= 0x25)
        v75 = 37;
      else
        v75 = v31;
      v76 = *(_QWORD **)v210;
      if (v73 <= v75)
      {
        v77 = v75 + 1;
        v78 = 32 * v73;
        v79 = *(_QWORD *)v202;
        do
        {
          v80 = __b[v73];
          if (v80 <= 0xFFFFFFE)
          {
            v81 = v203 + 1 + v198 + (v80 >> 5);
            if (v81 <= *(_QWORD *)(*(_QWORD *)v210 + 72))
            {
              v82 = v80 & 0x1F;
              if (v73 == v82)
                LODWORD(v82) = 0;
              *(_DWORD *)v37 = v81;
              *((_DWORD *)v37++ + 1) = v78 + v82;
            }
          }
          ++v73;
          v78 += 32;
        }
        while (v77 != v73);
        goto LABEL_110;
      }
    }
    else
    {
      v76 = *(_QWORD **)v210;
    }
    v79 = *(_QWORD *)v202;
LABEL_110:
    v83 = v37 - v201;
    v84 = v76[11];
    if (!v84)
      goto LABEL_154;
    v197 = v37 - v201;
    v85 = 0;
    v86 = 0;
    v87 = v76[9];
    v88 = *v74;
    v89 = v76[12] + v198;
    v90 = 3;
    while (2)
    {
      v91 = &v76[v86];
      v92 = v91[13];
      v94 = *(_DWORD *)(v92 + 16);
      v93 = *(_DWORD *)(v92 + 20);
      v95 = v92 + 24;
      v96 = v92 + 24 + 4 * (1 << v93);
      v97 = v96 + 2 * (1 << v94);
      v98 = (_QWORD *)(v97 + 4 * *(unsigned int *)(v92 + 4));
      if (*(_DWORD *)v92 != -558043680)
        v98 = (_QWORD *)*v98;
      v99 = (0x1FE35A7BD3579BD3 * (v88 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v92 + 12)))) >> -(char)v94;
      v100 = *(unsigned __int16 *)(v96 + 2 * v99);
      if (v100 == 0xFFFF)
      {
        v101 = 0;
        goto LABEL_147;
      }
      v101 = 0;
      v102 = v91[45];
      v103 = &v208[v85];
      v104 = *(unsigned int *)(v92 + 8);
      v105 = (int *)(v97
                   + 4
                   * (*(_DWORD *)(v95 + 4 * ((0xFFFFFFFF >> -(char)v93) & v99)) + v100));
      v106 = v90;
      while (1)
      {
        v108 = *v105++;
        v107 = v108;
        v109 = v108 & 0x7FFFFFFF;
        v110 = v89 - (v102 + v109);
        v111 = v104 - v109;
        if (v104 - v109 >= v31)
          v111 = v31;
        v112 = v106 + v32;
        v113 = v110 > v87 || v112 > a5;
        v114 = v113 || v106 >= v111;
        if (!v114 && *(unsigned __int8 *)(a4 + v112) == *((unsigned __int8 *)v98 + v106 + v109))
        {
          v116 = (unsigned __int8 *)v98 + v109;
          if (v111 < 8)
          {
            v120 = (unsigned __int8 *)(a4 + v32);
            v119 = v116;
          }
          else
          {
            v117 = 0;
            do
            {
              v118 = *(_QWORD *)&v116[v117 * 8] ^ v74[v117];
              if (v118)
              {
                v115 = v117 * 8 + (__clz(__rbit64(v118)) >> 3);
                goto LABEL_143;
              }
              v111 -= 8;
              ++v117;
            }
            while (v111 > 7);
            v119 = &v116[v117 * 8];
            if (!v111)
              goto LABEL_141;
            v120 = (unsigned __int8 *)&v74[v117];
          }
          v121 = &v119[v111];
          while (*v119 == *v120)
          {
            ++v120;
            ++v119;
            if (!--v111)
            {
              v119 = v121;
              break;
            }
          }
LABEL_141:
          v115 = v119 - v116;
LABEL_143:
          if (v115 > v106)
            break;
        }
        v115 = v106;
LABEL_127:
        v106 = v115;
        if (v107 < 0)
          goto LABEL_147;
      }
      *(_DWORD *)v103 = v110;
      *((_DWORD *)v103 + 1) = 32 * v115;
      if (++v101 != 64 - v85)
      {
        ++v103;
        goto LABEL_127;
      }
      v101 = 64 - v85;
LABEL_147:
      v85 += v101;
      v76 = *(_QWORD **)v210;
      if (!v85)
      {
LABEL_150:
        if (++v86 == v84)
          goto LABEL_153;
        continue;
      }
      break;
    }
    if (v85 != 64)
    {
      v90 = (unint64_t)HIDWORD(v208[v85 - 1]) >> 5;
      goto LABEL_150;
    }
LABEL_153:
    MergeMatches((_QWORD *)v200, v208, v85, v201, v197);
    v83 = v85 + v197;
    v79 = *(_QWORD *)v202;
LABEL_154:
    v16 = (uint64_t)a10;
    a2 = v194;
    if (v83)
    {
      v122 = v200;
      v123 = *(_QWORD *)v210;
      if (v196 < (unint64_t)*(unsigned int *)(v200 + 8 * (v83 - 1) + 4) >> 5)
      {
        *(_QWORD *)v200 = *(_QWORD *)(v200 + 8 * (v83 - 1));
        v83 = 1;
      }
    }
    else
    {
      v123 = *(_QWORD *)v210;
      v122 = v200;
    }
    updated = UpdateNodes(v194, a3, v79, a4, a5, v123, v206, a8, v83, v122, v205, (uint64_t)v211, (uint64_t)a10);
    if (updated >= 0x4000)
      v125 = updated;
    else
      v125 = 0;
    if (v83 == 1)
    {
      v126 = *(unsigned int *)(v200 + 4);
      v127 = v126 >> 5;
      if (v126 >> 5 <= v125)
        v127 = v125;
      if (v196 < v126 >> 5)
        v125 = v127;
    }
    if (v125 < 2)
    {
      v22 = *(_QWORD *)v210;
      v158 = *(_QWORD *)v202;
    }
    else
    {
      v128 = v125 + v199;
      if (v125 + v199 >= v192)
        v128 = v192;
      if (v199 + 64 > v128)
        v129 = v199 + 1;
      else
        v129 = v128 - 63;
      if (v199 + 513 <= v129)
      {
        v130 = v199 + 1;
        if (v199 + 1 < v129)
        {
          v131 = a9[10];
          v132 = a9[11];
          v133 = a9[13];
          do
          {
            v134 = v130 & a5;
            v135 = (506832829 * *(_DWORD *)(a4 + (v130 & a5))) >> 15;
            v136 = *(unsigned int *)(v132 + 4 * v135);
            v137 = 2 * (v131 & v130);
            v138 = v137 | 1;
            *(_DWORD *)(v132 + 4 * v135) = v130;
            if (v130 != v136)
            {
              v139 = 0;
              v140 = 0;
              v141 = 64;
              do
              {
                if (v130 - v136 > v131 - 15 || v141 == 0)
                  break;
                v143 = v136 & a5;
                if (v140 >= v139)
                  v144 = v139;
                else
                  v144 = v140;
                v145 = a4 + v134 + v144;
                v146 = (unsigned __int8 *)(a4 + v143 + v144);
                v147 = 128 - v144;
                if (128 - v144 < 8)
                {
                  v150 = (unsigned __int8 *)(a4 + v134 + v144);
                  if (v147)
                  {
LABEL_191:
                    v151 = &v150[v147];
                    while (*v150 == *v146)
                    {
                      ++v146;
                      ++v150;
                      if (!--v147)
                      {
                        v150 = v151;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v148 = 0;
                  do
                  {
                    v149 = *(_QWORD *)(v145 + v148) ^ *(_QWORD *)&v146[v148];
                    if (v149)
                    {
                      v152 = (unsigned __int8 *)(v148 + (__clz(__rbit64(v149)) >> 3));
                      goto LABEL_197;
                    }
                    v147 -= 8;
                    v148 += 8;
                  }
                  while (v147 > 7);
                  v146 += v148;
                  v150 = (unsigned __int8 *)(v145 + v148);
                  if (v147)
                    goto LABEL_191;
                }
                v152 = &v150[-v145];
LABEL_197:
                v153 = (unint64_t)&v152[v144];
                if (v153 >= 0x80)
                {
                  v157 = (_DWORD *)(v133 + 8 * (v136 & v131));
                  *(_DWORD *)(v133 + 4 * v137) = *v157;
                  v156 = v157[1];
                  goto LABEL_203;
                }
                v154 = *(unsigned __int8 *)(a4 + v153 + v143);
                v155 = 2 * (v136 & v131);
                if (*(unsigned __int8 *)(a4 + v153 + v134) <= v154)
                {
                  *(_DWORD *)(v133 + 4 * v138) = v136;
                  v138 = 2 * (v136 & v131);
                  v139 = v153;
                }
                else
                {
                  *(_DWORD *)(v133 + 4 * v137) = v136;
                  v155 |= 1uLL;
                  v137 = v155;
                  v140 = v153;
                }
                v136 = *(unsigned int *)(v133 + 4 * v155);
                --v141;
              }
              while (v130 != v136);
            }
            v156 = *v207;
            *(_DWORD *)(v133 + 4 * v137) = *v207;
LABEL_203:
            *(_DWORD *)(v133 + 4 * v138) = v156;
            v130 += 8;
          }
          while (v130 < v129);
        }
      }
      if (v129 < v128)
      {
        v159 = a9[10];
        v160 = a9[11];
        v161 = a9[13];
        do
        {
          v162 = v129 & a5;
          v163 = (506832829 * *(_DWORD *)(a4 + (v129 & a5))) >> 15;
          v164 = *(unsigned int *)(v160 + 4 * v163);
          v165 = 2 * (v159 & v129);
          v166 = v165 | 1;
          *(_DWORD *)(v160 + 4 * v163) = v129;
          if (v129 != v164)
          {
            v167 = 0;
            v168 = 0;
            v169 = 64;
            do
            {
              if (v129 - v164 > v159 - 15 || v169 == 0)
                break;
              v171 = v164 & a5;
              if (v168 >= v167)
                v172 = v167;
              else
                v172 = v168;
              v173 = a4 + v162 + v172;
              v174 = (unsigned __int8 *)(a4 + v171 + v172);
              v175 = 128 - v172;
              if (128 - v172 < 8)
              {
                v178 = (unsigned __int8 *)(a4 + v162 + v172);
                if (v175)
                {
LABEL_225:
                  v179 = &v178[v175];
                  while (*v178 == *v174)
                  {
                    ++v174;
                    ++v178;
                    if (!--v175)
                    {
                      v178 = v179;
                      break;
                    }
                  }
                }
              }
              else
              {
                v176 = 0;
                do
                {
                  v177 = *(_QWORD *)(v173 + v176) ^ *(_QWORD *)&v174[v176];
                  if (v177)
                  {
                    v180 = (unsigned __int8 *)(v176 + (__clz(__rbit64(v177)) >> 3));
                    goto LABEL_231;
                  }
                  v175 -= 8;
                  v176 += 8;
                }
                while (v175 > 7);
                v174 += v176;
                v178 = (unsigned __int8 *)(v173 + v176);
                if (v175)
                  goto LABEL_225;
              }
              v180 = &v178[-v173];
LABEL_231:
              v181 = (unint64_t)&v180[v172];
              if (v181 >= 0x80)
              {
                v185 = (_DWORD *)(v161 + 8 * (v164 & v159));
                *(_DWORD *)(v161 + 4 * v165) = *v185;
                v184 = v185[1];
                goto LABEL_237;
              }
              v182 = *(unsigned __int8 *)(a4 + v181 + v171);
              v183 = 2 * (v164 & v159);
              if (*(unsigned __int8 *)(a4 + v181 + v162) <= v182)
              {
                *(_DWORD *)(v161 + 4 * v166) = v164;
                v166 = 2 * (v164 & v159);
                v167 = v181;
              }
              else
              {
                *(_DWORD *)(v161 + 4 * v165) = v164;
                v183 |= 1uLL;
                v165 = v183;
                v168 = v181;
              }
              v164 = *(unsigned int *)(v161 + 4 * v183);
              --v169;
            }
            while (v129 != v164);
          }
          v184 = *v207;
          *(_DWORD *)(v161 + 4 * v165) = *v207;
LABEL_237:
          *(_DWORD *)(v161 + 4 * v166) = v184;
          ++v129;
        }
        while (v129 < v128);
      }
      v186 = v125 - 1;
      v187 = *(_QWORD *)v202 + 4;
      do
      {
        v158 = v187 - 3;
        if (v187 >= v194)
          break;
        EvaluateNode((void *)(v195 + a3), v158, v206, v203, a8, v205, (uint64_t)v211, (uint64_t)a10);
        v158 = v187 - 3;
        ++v187;
        --v186;
      }
      while (v186);
      v22 = *(_QWORD *)v210;
    }
    v23 = v158 + 1;
  }
  while (v158 + 4 < v194);
LABEL_248:
  BrotliFree(v191);
  *(_QWORD *)(v205 + 2832) = 0;
  BrotliFree(v191);
  *(_QWORD *)(v205 + 2816) = 0;
  BrotliFree(v191);
  BrotliFree(v191);
  return ComputeShortestPathFromNodes(a2, v16);
}

uint64_t InitZopfliCostModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t result;

  *(_QWORD *)(a2 + 2848) = a4;
  if (a4 == -2)
    v7 = 0;
  else
    v7 = BrotliAllocate(a1);
  *(_QWORD *)(a2 + 2832) = v7;
  v8 = *(_DWORD *)(a3 + 12);
  if (v8)
  {
    result = BrotliAllocate(a1);
    v8 = *(_DWORD *)(a3 + 12);
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 2816) = result;
  *(_DWORD *)(a2 + 2824) = v8;
  return result;
}

float ZopfliCostModelSetFromLiteralCosts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unint64_t i;
  double v14;
  float v15;
  uint64_t v16;
  uint64_t j;
  unint64_t v18;
  double v19;
  float v20;
  float result;

  v5 = *(_DWORD **)(a1 + 2832);
  v6 = *(_QWORD *)(a1 + 2816);
  v7 = *(_QWORD *)(a1 + 2848);
  v8 = (float *)(v5 + 1);
  BrotliEstimateBitCostsForLiterals(a2, v7, a4, a3, (char *)(a1 + 2856), (uint64_t)(v5 + 1));
  *v5 = 0;
  if (v7)
  {
    v9 = 0.0;
    v10 = 0.0;
    do
    {
      v11 = v10 + *v8;
      v12 = v9 + v11;
      *v8++ = v9 + v11;
      v10 = v11 - (float)((float)(v9 + v11) - v9);
      v9 = v12;
      --v7;
    }
    while (v7);
  }
  for (i = 0; i != 704; ++i)
  {
    if (i > 0xF4)
      v14 = log2((double)(i + 11));
    else
      v14 = kBrotliLog2Table[i + 11];
    v15 = v14;
    *(float *)(a1 + 4 * i) = v15;
  }
  v16 = *(unsigned int *)(a1 + 2824);
  if ((_DWORD)v16)
  {
    for (j = 0; j != v16; ++j)
    {
      v18 = (j + 20);
      if (v18 > 0xFF)
        v19 = log2((double)v18);
      else
        v19 = kBrotliLog2Table[v18];
      v20 = v19;
      *(float *)(v6 + 4 * j) = v20;
    }
  }
  result = 3.45943165;
  *(float *)(a1 + 2840) = 3.45943165;
  return result;
}

_QWORD *MergeMatches(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  for (; a3; ++result)
  {
    if (!a5)
      break;
    v5 = *((_DWORD *)a2 + 1) >> 5;
    v6 = *((_DWORD *)a4 + 1);
    if (v5 < v6 >> 5 || v5 == v6 >> 5 && *(_DWORD *)a2 < *(_DWORD *)a4)
    {
      v7 = *a2++;
      *result = v7;
      --a3;
    }
    else
    {
      v8 = *a4++;
      *result = v8;
      --a5;
    }
  }
  for (; a3; --a3)
  {
    v9 = *a2++;
    *result++ = v9;
  }
  for (; a5; --a5)
  {
    v10 = *a4++;
    *result++ = v10;
  }
  return result;
}

unint64_t UpdateNodes(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *__src, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t result;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  __int16 v44;
  __int16 v45;
  unsigned int v46;
  float v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t i;
  unint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unint64_t v75;
  float v76;
  BOOL v78;
  float *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  char v85;
  float v86;
  float v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  float v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  float *v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  float v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  unsigned __int16 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 *v121;
  uint64_t v123;
  unint64_t v124;

  v15 = a3;
  v17 = a12;
  v18 = *(_QWORD *)(a6 + 16);
  v120 = (a3 + a2) & a5;
  if (a3 + a2 >= a7)
    v19 = a7;
  else
    v19 = a3 + a2;
  v116 = a3 + a2;
  v20 = v18 + a3 + a2;
  if (v20 >= a7)
    v20 = a7;
  v117 = v20;
  v118 = v19;
  v21 = a1 - a3;
  v113 = *(_DWORD *)(a6 + 4);
  if (v113 <= 10)
    v22 = 150;
  else
    v22 = 325;
  v123 = *(_QWORD *)(a6 + 96);
  EvaluateNode((void *)(v18 + a2), a3, a7, v123, __src, a11, a12, a13);
  if (v15 + 2 <= a1)
  {
    v28 = a12 + 32 * (-*(_DWORD *)(a12 + 256) & 7);
    v29 = (float)(*(float *)(v28 + 28) + *(float *)(a11 + 2840))
        + (float)(*(float *)(*(_QWORD *)(a11 + 2832) + 4 * v15)
                - *(float *)(*(_QWORD *)(a11 + 2832) + 4 * *(_QWORD *)v28));
    v27 = a13;
    v30 = (float *)(a13 + 16 * v15 + 44);
    v23 = 2;
    v31 = 4;
    v32 = 10;
    v24 = a4;
    v25 = v123;
    v26 = v117;
    do
    {
      if (*v30 > v29)
        break;
      if (++v23 == v32)
      {
        v29 = v29 + 1.0;
        v33 = v31;
      }
      else
      {
        v33 = 0;
      }
      v31 <<= v23 == v32;
      v32 += v33;
      v30 += 4;
      v26 = v117;
    }
    while (v15 + v23 <= a1);
  }
  else
  {
    v23 = 2;
    v24 = a4;
    v25 = v123;
    v26 = v117;
    v27 = a13;
  }
  result = 0;
  v35 = 0;
  v36 = v23 - 1;
  v37 = v26 + v25;
  v121 = (unsigned __int8 *)(v24 + v120);
  v110 = v27 + 28;
  v111 = v23;
  v119 = v27 + 12;
  v124 = v15;
  v112 = v23 - 1;
  while (1)
  {
    v38 = *(_QWORD *)(v17 + 256);
    v39 = 8;
    if (v38 < 8)
      v39 = *(_QWORD *)(v17 + 256);
    if (v35 >= v39)
      return result;
    v40 = ((_BYTE)v35 - (_BYTE)v38) & 7;
    v41 = v15 - *(_QWORD *)(v17 + 32 * v40);
    if (v41 > 5)
    {
      if (v41 > 0x81)
      {
        if (v41 < 0x5842)
          v44 = 22;
        else
          v44 = 23;
        if (v41 >> 1 >= 0xC21)
          v45 = v44;
        else
          v45 = 21;
        v46 = (__clz(v41 - 66) ^ 0x1F) + 10;
        if (v41 <= 0x841)
          LOWORD(v42) = v46;
        else
          LOWORD(v42) = v45;
      }
      else
      {
        v43 = (__clz(v41 - 2) ^ 0x1F) - 1;
        LODWORD(v42) = ((v41 - 2) >> v43) + 2 * v43 + 2;
      }
    }
    else
    {
      v42 = v15 - *(_QWORD *)(v17 + 32 * v40);
    }
    v47 = (float)(*(float *)(v17 + 32 * v40 + 24) + (float)kBrotliInsExtra[(unsigned __int16)v42])
        + (float)(*(float *)(*(_QWORD *)(a11 + 2832) + 4 * v15) - **(float **)(a11 + 2832));
    v115 = v35;
    v114 = v42;
    if (v36 < v21)
    {
      v48 = 0;
      v49 = 8 * (v42 & 7);
      v50 = 3 * ((unsigned __int16)v42 >> 3);
      while (v36 + v120 <= a5)
      {
        v51 = kDistanceCacheOffset[v48] + (uint64_t)*(int *)(v17 + 32 * v40 + 4 * kDistanceCacheIndex[v48] + 8);
        if (v37 >= v51)
        {
          v52 = *(unsigned __int8 *)(v24 + v36 + v120);
          if (v118 >= v51)
          {
            v67 = (v116 - v51) & a5;
            v68 = v67 + v36;
            v69 = v116 < v51 || v68 > a5;
            if (v69 || v52 != *(unsigned __int8 *)(v24 + v68))
              goto LABEL_57;
            v60 = (unsigned __int8 *)(v24 + v67);
            if (v21 < 8)
            {
              v65 = (unsigned __int8 *)(v24 + v67);
              v73 = v121;
              i = v21;
              if (v21)
              {
LABEL_73:
                v74 = &v65[i];
                while (*v65 == *v73)
                {
                  ++v73;
                  ++v65;
                  if (!--i)
                  {
LABEL_76:
                    v65 = v74;
                    break;
                  }
                }
              }
            }
            else
            {
              v70 = 0;
              for (i = v21; i > 7; i -= 8)
              {
                v72 = *(_QWORD *)&v60[v70] ^ *(_QWORD *)&v121[v70];
                if (v72)
                {
                  v75 = v70 + (__clz(__rbit64(v72)) >> 3);
                  goto LABEL_78;
                }
                v70 += 8;
              }
              v73 = &v121[v70];
              v65 = &v60[v70];
              if (i)
                goto LABEL_73;
            }
          }
          else
          {
            if (v117 >= v51)
              goto LABEL_57;
            v53 = *(_QWORD *)(a6 + 96) + v117;
            v54 = (uint64_t *)(a6 + 368);
            do
            {
              v56 = *v54++;
              v55 = v56;
            }
            while (v53 >= v56 + v51);
            v57 = v55 + v51 - v53;
            if (v57 >= v21)
              v57 = v21;
            if (v36 >= v57)
              goto LABEL_57;
            v58 = *(v54 - 18);
            v59 = v53 - (*(v54 - 2) + v51);
            if (v52 != *(unsigned __int8 *)(v58 + v59 + v36))
              goto LABEL_57;
            v60 = (unsigned __int8 *)(v58 + v59);
            if (v57 < 8)
            {
              v66 = v121;
              v65 = v60;
            }
            else
            {
              v61 = 0;
              v62 = 0;
              do
              {
                v63 = *(_QWORD *)&v60[v62] ^ *(_QWORD *)&v121[v62];
                if (v63)
                {
                  v75 = v62 + (__clz(__rbit64(v63)) >> 3);
                  goto LABEL_78;
                }
                v62 += 8;
                v61 -= 8;
                v64 = v57 + v61;
              }
              while (v57 + v61 > 7);
              v65 = &v60[v62];
              if (v57 == v62)
                goto LABEL_77;
              v66 = &v121[v62];
              v57 = v64;
            }
            v74 = &v65[v57];
            while (*v65 == *v66)
            {
              ++v66;
              ++v65;
              if (!--v57)
                goto LABEL_76;
            }
          }
LABEL_77:
          v75 = v65 - v60;
LABEL_78:
          if (v36 + 1 <= v75)
          {
            v76 = *(float *)(*(_QWORD *)(a11 + 2816) + 4 * v48);
            v78 = v114 < 8u && v48 == 0;
            v79 = (float *)(v110 + 16 * (v124 + v36));
            v80 = v36;
            do
            {
              v81 = v80 + 1;
              if (v80 + 1 > 9)
              {
                if (v81 > 0x85)
                {
                  if (v81 > 0x845)
                  {
                    LOWORD(v82) = 23;
                    v84 = v49 | 7;
                    goto LABEL_98;
                  }
                  v82 = (__clz(v80 - 69) ^ 0x1F) + 12;
                }
                else
                {
                  v83 = __clz(v80 - 5);
                  v82 = ((v80 - 5) >> ((v83 ^ 0x1F) - 1)) + 2 * ((v83 ^ 0x1F) - 1) + 4;
                }
              }
              else
              {
                LOWORD(v82) = v80 - 1;
              }
              v84 = v82 & 7 | v49;
              v85 = !v78;
              if ((unsigned __int16)v82 > 0xFu)
                v85 = 1;
              if ((v85 & 1) == 0)
              {
                if ((v82 & 0xFFF8) != 0)
                  LOWORD(v84) = v84 | 0x40;
                goto LABEL_99;
              }
LABEL_98:
              v84 = ((((0x520D40u >> (2 * (v50 + ((unsigned __int16)(v82 & 0xFFF8) >> 3)))) & 0xC0)
                    + ((v50 + ((unsigned __int16)(v82 & 0xFFF8) >> 3)) << 6)) | v84)
                  + 64;
LABEL_99:
              if ((v84 & 0xFF80) != 0)
                v86 = v76;
              else
                v86 = -0.0;
              v87 = *(float *)(a11 + 4 * (unsigned __int16)v84)
                  + (float)((float)(v47 + v86) + (float)kBrotliCopyExtra[(unsigned __int16)v82]);
              if (v87 < *v79)
              {
                *((_DWORD *)v79 - 3) = (v80 + 1) | 0x12000000;
                *((_DWORD *)v79 - 2) = v51;
                *((_DWORD *)v79 - 1) = (((_DWORD)v48 << 27) + 0x8000000) | v41;
                *v79 = v87;
                if (result <= v81)
                  result = v80 + 1;
              }
              v36 = v80 + 1;
              v88 = v80 + 2;
              v79 += 4;
              ++v80;
            }
            while (v88 <= v75);
          }
        }
LABEL_57:
        if (v48 <= 0xE)
        {
          ++v48;
          v24 = a4;
          v17 = a12;
          if (v36 < v21)
            continue;
        }
        break;
      }
    }
    if (v115 <= 1 && a9)
    {
      v89 = 0;
      v90 = v111;
      do
      {
        v91 = *(_QWORD *)(a10 + 8 * v89);
        LOWORD(v92) = v91 + 15;
        v93 = *(unsigned int *)(a6 + 60);
        v94 = v93 + 16;
        if (v93 + 16 <= (unint64_t)v91 + 15)
        {
          v95 = *(unsigned int *)(a6 + 56);
          v96 = v91 + ~v93 + (4 << v95);
          v97 = (__clz(v96) ^ 0x1F) - 1;
          v92 = ((v96 & ~(-1 << v95)) + v94 + ((((v96 >> v97) & 1 | (2 * (v97 - v95))) - 2) << v95)) | ((v97 - v95) << 10);
        }
        v98 = v91 >> 37;
        if ((v91 >> 37 > v22 || v37 < v91) && v90 < v98)
          v90 = v91 >> 37;
        if (v90 <= v91 >> 37)
        {
          v101 = *(float *)(*(_QWORD *)(a11 + 2816) + 4 * (v92 & 0x3FF))
               + (float)(v47 + (float)((unsigned __int16)v92 >> 10));
          if ((v91 & 0x1F00000000) != 0)
            v102 = HIDWORD(v91) & 0x1F;
          else
            v102 = v91 >> 37;
          v103 = v98 + 1;
          v104 = ((_DWORD)v90 << 25) + 301989888;
          v105 = (float *)(v119 + 16 * (v124 + v90));
          do
          {
            if (v37 >= v91)
              v106 = v90;
            else
              v106 = v102;
            if (v106 > 9)
            {
              v107 = (__clz(v106 - 70) ^ 0x1F) + 12;
              if (v106 > 0x845)
                LOWORD(v107) = 23;
              v108 = (__clz(v106 - 6) ^ 0x1F) - 1;
              if (v106 <= 0x85)
                LOWORD(v107) = ((v106 - 6) >> v108) + 2 * v108 + 4;
            }
            else
            {
              LOWORD(v107) = v106 - 2;
            }
            v109 = *(float *)(a11
                            + 4
                            * (unsigned __int16)(((((0x520D40u >> (2
                                                                 * (3 * (v114 >> 3)
                                                                  + ((unsigned __int16)(v107 & 0xFFF8) >> 3)))) & 0xC0)
                                                 + ((3 * (v114 >> 3) + ((unsigned __int16)(v107 & 0xFFF8) >> 3)) << 6)) | v107 & 7 | (8 * (v114 & 7)))
                                               + 64))
                 + (float)(v101 + (float)kBrotliCopyExtra[(unsigned __int16)v107]);
            if (v109 < *v105)
            {
              *((_DWORD *)v105 - 3) = (v104 - ((_DWORD)v106 << 25)) | v90;
              *((_DWORD *)v105 - 2) = v91;
              *((_DWORD *)v105 - 1) = v41;
              *v105 = v109;
              if (result <= v90)
                result = v90;
            }
            ++v90;
            v104 += 0x2000000;
            v105 += 4;
          }
          while (v103 != v90);
          v90 = v103;
        }
        ++v89;
      }
      while (v89 != a9);
    }
    if (v113 >= 11)
    {
      v35 = v115 + 1;
      v24 = a4;
      v15 = v124;
      v17 = a12;
      v36 = v112;
      if (v115 < 4)
        continue;
    }
    return result;
  }
}

void *EvaluateNode(void *result, unint64_t a2, uint64_t a3, uint64_t a4, void *__src, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  _OWORD *v28;
  unint64_t v29;
  float *v30;
  float *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v9 = (_DWORD *)(a8 + 16 * a2);
  v10 = v9 + 3;
  v11 = *((float *)v9 + 3);
  if (a2)
  {
    v12 = v9[1];
    v13 = *v9 & 0x1FFFFFF;
    v14 = v9[2];
    if (a4 + a3 < v12 || v12 + v13 > (unint64_t)result + a2 + a4)
      goto LABEL_10;
    v16 = v12 + 15;
    if (v14 >> 27)
      v16 = (v14 >> 27) - 1;
    if (!v16)
LABEL_10:
      v17 = *(unsigned int *)(a8 + 16 * (a2 - ((v14 & 0x7FFFFFF) + v13)) + 12);
    else
      v17 = a2;
  }
  else
  {
    v17 = 0;
  }
  *v10 = v17;
  v18 = *(float *)(*(_QWORD *)(a6 + 2832) + 4 * a2) - **(float **)(a6 + 2832);
  if (v11 <= v18)
  {
    *(_QWORD *)&v36 = 0;
    v35 = a2;
    *((float *)&v36 + 2) = v11 - v18;
    *((float *)&v36 + 3) = v11;
    v19 = 0;
    if (!v17)
      goto LABEL_17;
    do
    {
      v20 = v19;
      v21 = (int *)(a8 + 16 * v17);
      v22 = *v21;
      v23 = v21[2];
      *((_DWORD *)&v35 + v20 + 2) = v21[1];
      v19 = v20 + 1;
      if (v20 > 2)
        break;
      v17 = *(unsigned int *)(a8 + 16 * (v17 - ((v22 & 0x1FFFFFF) + (v23 & 0x7FFFFFFu))) + 12);
    }
    while (v17);
    if ((v19 & 0xFFFFFFFC) == 0)
LABEL_17:
      result = memcpy((char *)&v35 + 4 * v19 + 8, __src, 16 - 4 * v19);
    v24 = *(_QWORD *)(a7 + 256);
    *(_QWORD *)(a7 + 256) = v24 + 1;
    v25 = ~(_BYTE)v24 & 7;
    if ((unint64_t)(v24 + 1) < 8)
      v26 = v24 + 1;
    else
      v26 = 8;
    v27 = v36;
    v28 = (_OWORD *)(a7 + 32 * v25);
    *v28 = v35;
    v28[1] = v27;
    if (v26 >= 2)
    {
      v29 = v26 - 1;
      do
      {
        v30 = (float *)(a7 + 32 * (v25 & 7));
        v31 = (float *)(a7 + 32 * (((_BYTE)v25 + 1) & 7));
        if (v30[6] > v31[6])
        {
          v33 = *(_OWORD *)v30;
          v32 = *((_OWORD *)v30 + 1);
          v34 = *((_OWORD *)v31 + 1);
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_OWORD *)v30 + 1) = v34;
          *(_OWORD *)v31 = v33;
          *((_OWORD *)v31 + 1) = v32;
        }
        LOBYTE(v25) = v25 + 1;
        --v29;
      }
      while (v29);
    }
  }
  return result;
}

uint64_t ComputeShortestPathFromNodes(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t i;
  uint64_t v7;

  v2 = (_DWORD *)(a2 + 16 * a1);
  if ((v2[2] & 0x7FFFFFF) == 0)
  {
    v3 = (_DWORD *)(a2 + 16 * a1);
    do
    {
      v4 = *v3;
      v3 -= 4;
      if (v4 != 1)
        break;
      --a1;
      v5 = *(v2 - 2);
      v2 = v3;
    }
    while ((v5 & 0x7FFFFFF) == 0);
  }
  *(_DWORD *)(a2 + 16 * a1 + 12) = -1;
  for (i = 0; a1; *(_DWORD *)(a2 + 16 * a1 + 12) = v7)
  {
    v7 = (*(_DWORD *)(a2 + 16 * a1 + 8) & 0x7FFFFFF) + (*(_DWORD *)(a2 + 16 * a1) & 0x1FFFFFFu);
    ++i;
    a1 -= v7;
  }
  return i;
}

uint64_t BrotliCreateZopfliBackwardReferences(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, void *a9, _QWORD *a10, uint64_t a11, _QWORD *a12, _QWORD *a13)
{
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v23;
  uint64_t v24;

  v19 = a2 + 1;
  if (a2 == -1)
  {
    v20 = 0;
  }
  else
  {
    v23 = a5;
    v24 = a6;
    v20 = (_DWORD *)BrotliAllocate(a1);
    v21 = v20 + 3;
    do
    {
      *(_QWORD *)(v21 - 3) = 1;
      *(_QWORD *)(v21 - 1) = 0x7EFFC99E00000000;
      v21 += 4;
      --v19;
    }
    while (v19);
    a5 = v23;
    a6 = v24;
  }
  *a12 += BrotliZopfliComputeShortestPath(a1, a2, a3, a4, a5, a6, a7, a9, a8, v20);
  BrotliZopfliCreateCommands(a2, a3, (uint64_t)v20, (uint64_t)a9, a10, a7, a11, a13);
  return BrotliFree(a1);
}

uint64_t BrotliCreateHqZopfliBackwardReferences(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, __int128 *a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t *a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unsigned __int8 *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  unsigned __int8 *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  int *v117;
  unint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  BOOL v126;
  unint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unsigned __int8 *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned __int8 *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unsigned __int8 *v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  int v194;
  _DWORD *v195;
  int *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void *v204;
  char v205;
  uint64_t v206;
  char v207;
  _DWORD *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int *v214;
  uint64_t v215;
  unsigned int v216;
  __int16 v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float v222;
  _DWORD *v223;
  uint64_t v224;
  float *v225;
  float v226;
  uint64_t v227;
  float v228;
  float v229;
  float v230;
  unint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  unint64_t updated;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v249;
  unint64_t v250;
  char *v254;
  void *v255;
  unint64_t v256;
  unint64_t v257;
  float *v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  unint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  _DWORD *v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v280;
  int v282[2];
  uint64_t v283;
  __int128 v285;
  _OWORD __b[16];
  uint64_t v287;
  uint64_t v288;

  v13 = a7;
  v14 = a4;
  v288 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v261 = *(_QWORD *)(a7 + 16);
    v15 = *(_DWORD *)(a7 + 8);
    v16 = 4 * a2;
    v276 = BrotliAllocate(a1);
    if (a2 >= 0x7F)
      v19 = a2 - 127;
    else
      v19 = 0;
    v20 = BrotliAllocate(a1);
    v265 = v16;
    if (v16)
      v280 = BrotliAllocate(a1);
    else
      v280 = 0;
    v23 = *(_QWORD *)(v13 + 96);
    v22 = a2;
    v24 = a5;
    if (a2 < 4)
    {
      v266 = 0;
      goto LABEL_249;
    }
    v25 = 0;
    v270 = 0;
    v257 = (1 << v15) - 16;
    v259 = v20;
    v250 = v19 + a3;
    v254 = (char *)(((unint64_t)(*(_QWORD *)(v13 + 88) != 0) << 8) | 0x80);
    v256 = (unint64_t)(*(_QWORD *)(v13 + 88) != 0) << 8;
    v274 = a8 + 12;
    *(_QWORD *)v282 = *(_QWORD *)(v13 + 96);
    v249 = v23 + 1;
    while (1)
    {
      v26 = v25 + a3;
      if (v25 + a3 >= v257)
        v27 = v257;
      else
        v27 = v25 + a3;
      v28 = v26 + v261;
      if (v26 + v261 >= v257)
        v28 = v257;
      v267 = v28;
      if (!*(_DWORD *)(v13 + 624))
      {
        v33 = 0;
        v29 = (char *)v280;
        v30 = v265;
        v34 = v270;
        goto LABEL_24;
      }
      v29 = (char *)v280;
      v30 = v265;
      if (!v26)
        break;
      v31 = *(unsigned __int8 *)(v14 + ((v26 - 1) & v24));
      if (v26 == 1)
        goto LABEL_22;
      v32 = *(unsigned __int8 *)(v14 + ((v26 - 2) & v24));
LABEL_23:
      v34 = v270;
      v33 = *(unsigned __int8 *)(v13 + (*(_BYTE *)(a6 + 256 + v32) | *(_BYTE *)(a6 + v31)) + 629);
LABEL_24:
      v272 = v25;
      v35 = v25 + a3;
      if (v30 >= (unint64_t)&v254[v34])
        goto LABEL_33;
      if (v30)
        v36 = v30;
      else
        v36 = (uint64_t)&v254[v34];
      do
      {
        v37 = (char *)v36;
        v36 *= 2;
      }
      while (v37 < &v254[v34]);
      if (!v37)
      {
        v38 = 0;
        if (!v30)
          goto LABEL_32;
LABEL_31:
        memcpy(v38, v29, 8 * v30);
        goto LABEL_32;
      }
      v38 = (char *)BrotliAllocate(a1);
      if (v30)
        goto LABEL_31;
LABEL_32:
      BrotliFree(a1);
      v265 = (uint64_t)v37;
      v29 = v38;
      v22 = a2;
      v24 = a5;
      v25 = v272;
      v26 = v35;
LABEL_33:
      v39 = v22 - v25;
      v40 = *(_QWORD *)(v13 + 8 * v33 + 696);
      v41 = v34 + v256;
      v280 = (uint64_t)v29;
      v42 = (uint64_t *)&v29[8 * v34 + 8 * v256];
      v43 = v26 & v24;
      v44 = 16;
      if (*(_DWORD *)(v13 + 4) == 11)
        v44 = 64;
      v126 = v26 >= v44;
      v45 = v26 - v44;
      if (!v126)
        v45 = 0;
      v46 = v26 - 1;
      v268 = v42;
      if (v26 - 1 <= v45)
      {
        v49 = 1;
        v47 = (char *)v42;
        v50 = v40;
      }
      else
      {
        v47 = (char *)v42;
        v48 = (unsigned __int8 *)(v14 + v43);
        v49 = 1;
        v50 = v40;
        do
        {
          if (v26 - v46 > v27)
            break;
          v51 = (unsigned __int8 *)(v14 + (v46 & v24));
          if (*v48 == *v51 && *(unsigned __int8 *)(v14 + v43 + 1) == *(unsigned __int8 *)((v46 & v24) + v14 + 1))
          {
            if (v39 < 8)
            {
              v56 = (unsigned __int8 *)(v14 + (v46 & v24));
              v55 = (unsigned __int8 *)(v14 + v43);
              v53 = v22 - v25;
              if (!v39)
                goto LABEL_53;
LABEL_49:
              v57 = &v56[v53];
              do
              {
                if (*v56 != *v55)
                  goto LABEL_53;
                ++v55;
                ++v56;
                --v53;
              }
              while (v53);
              v56 = v57;
LABEL_53:
              v58 = v56 - v51;
            }
            else
            {
              v52 = 0;
              v53 = v22 - v25;
              while (1)
              {
                v54 = *(_QWORD *)&v51[v52] ^ *(_QWORD *)&v48[v52];
                if (v54)
                  break;
                v53 -= 8;
                v52 += 8;
                if (v53 <= 7)
                {
                  v55 = &v48[v52];
                  v56 = &v51[v52];
                  if (!v53)
                    goto LABEL_53;
                  goto LABEL_49;
                }
              }
              v58 = v52 + (__clz(__rbit64(v54)) >> 3);
            }
            if (v58 > v49)
            {
              *(_DWORD *)v47 = v26 - v46;
              *((_DWORD *)v47 + 1) = 32 * v58;
              v47 += 8;
              v49 = v58;
            }
          }
          if (--v46 <= v45)
            break;
        }
        while (v49 < 3);
      }
      if (v49 >= v39)
        goto LABEL_103;
      v59 = (506832829 * *(_DWORD *)(v14 + v43)) >> 15;
      v60 = a8[13];
      v62 = a8[10];
      v61 = a8[11];
      v63 = *(unsigned int *)(v61 + 4 * v59);
      v64 = 128;
      if (v39 >= 0x80)
        *(_DWORD *)(v61 + 4 * v59) = v26;
      else
        v64 = v39;
      v65 = 2 * (v62 & v26);
      v66 = v65 | 1;
      if (v26 != v63)
      {
        v67 = 0;
        v68 = 0;
        v69 = 64;
        while (1)
        {
          v70 = v26 - v63;
          if (v26 - v63 > v27 || v69 == 0)
            goto LABEL_100;
          v72 = v63 & v24;
          v73 = v68 >= v67 ? v67 : v68;
          v74 = v14 + v43 + v73;
          v75 = (unsigned __int8 *)(v14 + v72 + v73);
          v76 = v39 - v73;
          if (v39 - v73 < 8)
          {
            v79 = (unsigned __int8 *)(v14 + v43 + v73);
            if (!v76)
              goto LABEL_86;
LABEL_81:
            v80 = &v79[v76];
            do
            {
              if (*v79 != *v75)
                goto LABEL_85;
              ++v75;
              ++v79;
              --v76;
            }
            while (v76);
            v79 = v80;
LABEL_85:
            v26 = v35;
LABEL_86:
            v81 = &v79[-v74];
          }
          else
          {
            v77 = 0;
            while (1)
            {
              v78 = *(_QWORD *)(v74 + v77) ^ *(_QWORD *)&v75[v77];
              if (v78)
                break;
              v76 -= 8;
              v77 += 8;
              if (v76 <= 7)
              {
                v75 += v77;
                v79 = (unsigned __int8 *)(v74 + v77);
                v26 = v35;
                if (!v76)
                  goto LABEL_86;
                goto LABEL_81;
              }
            }
            v81 = (unsigned __int8 *)(v77 + (__clz(__rbit64(v78)) >> 3));
            v26 = v35;
          }
          v82 = (unint64_t)&v81[v73];
          if (v47 && v82 > v49)
          {
            *(_DWORD *)v47 = v70;
            *((_DWORD *)v47 + 1) = 32 * v82;
            v47 += 8;
            v49 = v82;
          }
          if (v82 >= v64)
            break;
          if (*(unsigned __int8 *)(v14 + v82 + v43) <= *(unsigned __int8 *)(v14 + v82 + v72))
          {
            if (v39 >= 0x80)
              *(_DWORD *)(v60 + 4 * v66) = v63;
            v83 = 2 * (v63 & v62);
            v66 = v83;
            v67 = v82;
          }
          else
          {
            if (v39 >= 0x80)
              *(_DWORD *)(v60 + 4 * v65) = v63;
            v83 = (2 * (v63 & v62)) | 1;
            v65 = v83;
            v68 = v82;
          }
          v63 = *(unsigned int *)(v60 + 4 * v83);
          --v69;
          if (v26 == v63)
            goto LABEL_100;
        }
        if (v39 < 0x80)
          goto LABEL_103;
        v196 = (int *)(v60 + 8 * (v63 & v62));
        v197 = *v196;
        v84 = v196 + 1;
        *(_DWORD *)(v60 + 4 * v65) = v197;
        goto LABEL_102;
      }
LABEL_100:
      if (v39 >= 0x80)
      {
        *(_DWORD *)(v60 + 4 * v65) = *v274;
        v84 = a8 + 12;
LABEL_102:
        *(_DWORD *)(v60 + 4 * v66) = *v84;
      }
LABEL_103:
      memset_pattern16(__b, &unk_19CFE56A0, 0x98uLL);
      if (v49 + 1 > 4)
        v85 = v49 + 1;
      else
        v85 = 4;
      v86 = (unsigned __int8 *)(v14 + v43);
      if (BrotliFindAllStaticDictionaryMatches(v50, (unsigned __int8 *)(v14 + v43), v85, v39, (uint64_t)__b)&& (v39 >= 0x25 ? (v87 = 37) : (v87 = v39), v85 <= v87))
      {
        v89 = v87 + 1;
        v90 = 32 * v85;
        v24 = a5;
        v88 = v35;
        do
        {
          v91 = *((unsigned int *)__b + v85);
          if (v91 <= 0xFFFFFFE)
          {
            v92 = v249 + v267 + (v91 >> 5);
            if (v92 <= *(_QWORD *)(a7 + 72))
            {
              v93 = v91 & 0x1F;
              if (v85 == v93)
                LODWORD(v93) = 0;
              *(_DWORD *)v47 = v92;
              *((_DWORD *)v47 + 1) = v90 + v93;
              v47 += 8;
            }
          }
          ++v85;
          v90 += 32;
        }
        while (v89 != v85);
      }
      else
      {
        v24 = a5;
        v88 = v35;
      }
      v94 = (v47 - (char *)v268) >> 3;
      v13 = a7;
      v95 = *(_QWORD *)(a7 + 88);
      if (!v95)
        goto LABEL_164;
      v263 = v94;
      v96 = 0;
      v97 = 0;
      v98 = *(_QWORD *)(a7 + 72);
      v99 = (uint64_t *)(v280 + 8 * v41 - 512);
      v100 = *(_QWORD *)v86;
      v101 = *(_QWORD *)(a7 + 96) + v267;
      v102 = 3;
      while (2)
      {
        v103 = a7 + 8 * v97;
        v104 = *(_QWORD *)(v103 + 104);
        v106 = *(_DWORD *)(v104 + 16);
        v105 = *(_DWORD *)(v104 + 20);
        v107 = v104 + 24;
        v108 = v104 + 24 + 4 * (1 << v105);
        v109 = v108 + 2 * (1 << v106);
        v110 = (_QWORD *)(v109 + 4 * *(unsigned int *)(v104 + 4));
        if (*(_DWORD *)v104 != -558043680)
          v110 = (_QWORD *)*v110;
        v111 = (0x1FE35A7BD3579BD3 * (v100 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v104 + 12)))) >> -(char)v106;
        v112 = *(unsigned __int16 *)(v108 + 2 * v111);
        if (v112 == 0xFFFF)
        {
          v113 = 0;
          goto LABEL_157;
        }
        v113 = 0;
        v114 = *(_QWORD *)(v103 + 360);
        v115 = &v99[v96];
        v116 = *(unsigned int *)(v104 + 8);
        v117 = (int *)(v109
                     + 4
                     * (*(_DWORD *)(v107 + 4 * ((0xFFFFFFFF >> -(char)v105) & v111)) + v112));
        v118 = v102;
        while (1)
        {
          v120 = *v117++;
          v119 = v120;
          v121 = v120 & 0x7FFFFFFF;
          v122 = v101 - (v114 + v121);
          v123 = v116 - v121;
          if (v116 - v121 >= v39)
            v123 = v39;
          v124 = v118 + v43;
          v125 = v122 > v98 || v124 > v24;
          v126 = v125 || v118 >= v123;
          if (!v126 && *(unsigned __int8 *)(v14 + v124) == *((unsigned __int8 *)v110 + v118 + v121))
          {
            v128 = (unsigned __int8 *)v110 + v121;
            if (v123 < 8)
            {
              v132 = v86;
              v131 = v128;
            }
            else
            {
              v129 = 0;
              do
              {
                v130 = *(_QWORD *)&v128[v129] ^ *(_QWORD *)&v86[v129];
                if (v130)
                {
                  v127 = v129 + (__clz(__rbit64(v130)) >> 3);
                  goto LABEL_153;
                }
                v123 -= 8;
                v129 += 8;
              }
              while (v123 > 7);
              v131 = &v128[v129];
              if (!v123)
                goto LABEL_151;
              v132 = &v86[v129];
            }
            v133 = &v131[v123];
            while (*v131 == *v132)
            {
              ++v132;
              ++v131;
              if (!--v123)
              {
                v131 = v133;
                break;
              }
            }
            v14 = a4;
LABEL_151:
            v127 = v131 - v128;
LABEL_153:
            v24 = a5;
            if (v127 > v118)
              break;
          }
          v127 = v118;
LABEL_136:
          v118 = v127;
          if (v119 < 0)
            goto LABEL_157;
        }
        *(_DWORD *)v115 = v122;
        *((_DWORD *)v115 + 1) = 32 * v127;
        if (++v113 != 64 - v96)
        {
          ++v115;
          goto LABEL_136;
        }
        v113 = 64 - v96;
LABEL_157:
        v96 += v113;
        if (!v96)
        {
LABEL_160:
          if (++v97 == v95)
            goto LABEL_163;
          continue;
        }
        break;
      }
      if (v96 != 64)
      {
        v102 = (unint64_t)HIDWORD(v99[v96 - 1]) >> 5;
        goto LABEL_160;
      }
LABEL_163:
      MergeMatches((_QWORD *)(v280 + 8 * v270), v99, v96, v268, v263);
      v24 = a5;
      v94 = v96 + v263;
      v13 = a7;
      v88 = v35;
LABEL_164:
      v134 = v272;
      *(_DWORD *)(v276 + 4 * v272) = v94;
      v20 = v259;
      if (v94)
      {
        v135 = v94 + v270 - 1;
        v136 = *(unsigned int *)(v280 + 8 * v135 + 4);
        if (v136 >> 6 < 0xA3)
        {
          v270 += v94;
          v134 = v272;
        }
        else
        {
          *(_QWORD *)(v280 + 8 * v270) = *(_QWORD *)(v280 + 8 * v135);
          *(_DWORD *)(v276 + 4 * v272) = 1;
          v137 = v88 + 1;
          v138 = v88 + (v136 >> 5);
          if (v138 >= v250)
            v138 = v250;
          if (v88 + 64 > v138)
            v139 = v88 + 1;
          else
            v139 = v138 - 63;
          if (v88 + 513 <= v139 && v137 < v139)
          {
            v169 = a8[10];
            v170 = a8[11];
            v171 = a8[13];
            do
            {
              v172 = v137 & v24;
              v173 = (506832829 * *(_DWORD *)(v14 + (v137 & v24))) >> 15;
              v174 = *(unsigned int *)(v170 + 4 * v173);
              v175 = 2 * (v169 & v137);
              v176 = v175 | 1;
              *(_DWORD *)(v170 + 4 * v173) = v137;
              if (v137 != v174)
              {
                v177 = 0;
                v178 = 0;
                v179 = 64;
                do
                {
                  if (v137 - v174 > v169 - 15 || v179 == 0)
                    break;
                  v181 = v174 & v24;
                  if (v178 >= v177)
                    v182 = v177;
                  else
                    v182 = v178;
                  v183 = v14 + v172 + v182;
                  v184 = (unsigned __int8 *)(v14 + v181 + v182);
                  v185 = 128 - v182;
                  if (128 - v182 < 8)
                  {
                    v188 = (unsigned __int8 *)(v14 + v172 + v182);
                    if (v185)
                    {
LABEL_231:
                      v189 = &v188[v185];
                      while (*v188 == *v184)
                      {
                        ++v184;
                        ++v188;
                        if (!--v185)
                        {
                          v188 = v189;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v186 = 0;
                    do
                    {
                      v187 = *(_QWORD *)(v183 + v186) ^ *(_QWORD *)&v184[v186];
                      if (v187)
                      {
                        v190 = (unsigned __int8 *)(v186 + (__clz(__rbit64(v187)) >> 3));
                        goto LABEL_237;
                      }
                      v185 -= 8;
                      v186 += 8;
                    }
                    while (v185 > 7);
                    v184 += v186;
                    v188 = (unsigned __int8 *)(v183 + v186);
                    if (v185)
                      goto LABEL_231;
                  }
                  v190 = &v188[-v183];
LABEL_237:
                  v191 = (unint64_t)&v190[v182];
                  if (v191 >= 0x80)
                  {
                    v195 = (_DWORD *)(v171 + 8 * (v174 & v169));
                    *(_DWORD *)(v171 + 4 * v175) = *v195;
                    v194 = v195[1];
                    goto LABEL_243;
                  }
                  v192 = *(unsigned __int8 *)(v14 + v191 + v181);
                  v193 = 2 * (v174 & v169);
                  if (*(unsigned __int8 *)(v14 + v191 + v172) <= v192)
                  {
                    *(_DWORD *)(v171 + 4 * v176) = v174;
                    v176 = 2 * (v174 & v169);
                    v177 = v191;
                  }
                  else
                  {
                    *(_DWORD *)(v171 + 4 * v175) = v174;
                    v193 |= 1uLL;
                    v175 = v193;
                    v178 = v191;
                  }
                  v174 = *(unsigned int *)(v171 + 4 * v193);
                  --v179;
                }
                while (v137 != v174);
              }
              v194 = *v274;
              *(_DWORD *)(v171 + 4 * v175) = *v274;
LABEL_243:
              *(_DWORD *)(v171 + 4 * v176) = v194;
              v137 += 8;
            }
            while (v137 < v139);
          }
          if (v139 < v138)
          {
            v141 = a8[10];
            v142 = a8[11];
            v143 = a8[13];
            do
            {
              v144 = v139 & v24;
              v145 = (506832829 * *(_DWORD *)(v14 + (v139 & v24))) >> 15;
              v146 = *(unsigned int *)(v142 + 4 * v145);
              v147 = 2 * (v141 & v139);
              v148 = v147 | 1;
              *(_DWORD *)(v142 + 4 * v145) = v139;
              if (v139 != v146)
              {
                v149 = 0;
                v150 = 0;
                v151 = 64;
                do
                {
                  if (v139 - v146 > v141 - 15 || v151 == 0)
                    break;
                  v153 = v146 & v24;
                  if (v150 >= v149)
                    v154 = v149;
                  else
                    v154 = v150;
                  v155 = v14 + v144 + v154;
                  v156 = (unsigned __int8 *)(v14 + v153 + v154);
                  v157 = 128 - v154;
                  if (128 - v154 < 8)
                  {
                    v160 = (unsigned __int8 *)(v14 + v144 + v154);
                    if (v157)
                    {
LABEL_194:
                      v161 = &v160[v157];
                      while (*v160 == *v156)
                      {
                        ++v156;
                        ++v160;
                        if (!--v157)
                        {
                          v160 = v161;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v158 = 0;
                    do
                    {
                      v159 = *(_QWORD *)(v155 + v158) ^ *(_QWORD *)&v156[v158];
                      if (v159)
                      {
                        v162 = (unsigned __int8 *)(v158 + (__clz(__rbit64(v159)) >> 3));
                        goto LABEL_200;
                      }
                      v157 -= 8;
                      v158 += 8;
                    }
                    while (v157 > 7);
                    v156 += v158;
                    v160 = (unsigned __int8 *)(v155 + v158);
                    if (v157)
                      goto LABEL_194;
                  }
                  v162 = &v160[-v155];
LABEL_200:
                  v163 = (unint64_t)&v162[v154];
                  if (v163 >= 0x80)
                  {
                    v167 = (_DWORD *)(v143 + 8 * (v146 & v141));
                    *(_DWORD *)(v143 + 4 * v147) = *v167;
                    v166 = v167[1];
                    goto LABEL_206;
                  }
                  v164 = *(unsigned __int8 *)(v14 + v163 + v153);
                  v165 = 2 * (v146 & v141);
                  if (*(unsigned __int8 *)(v14 + v163 + v144) <= v164)
                  {
                    *(_DWORD *)(v143 + 4 * v148) = v146;
                    v148 = 2 * (v146 & v141);
                    v149 = v163;
                  }
                  else
                  {
                    *(_DWORD *)(v143 + 4 * v147) = v146;
                    v165 |= 1uLL;
                    v147 = v165;
                    v150 = v163;
                  }
                  v146 = *(unsigned int *)(v143 + 4 * v165);
                  --v151;
                }
                while (v139 != v146);
              }
              v166 = *v274;
              *(_DWORD *)(v143 + 4 * v147) = *v274;
LABEL_206:
              *(_DWORD *)(v143 + 4 * v148) = v166;
              ++v139;
            }
            while (v139 < v138);
          }
          v168 = (v136 >> 5) - 1;
          ++v270;
          bzero((void *)(v276 + 4 * v272 + 4), 4 * v168);
          v24 = a5;
          v134 = v168 + v272;
        }
      }
      v25 = v134 + 1;
      v22 = a2;
      if (v134 + 4 >= a2)
      {
        v266 = 1;
        v23 = *(_QWORD *)v282;
        goto LABEL_249;
      }
    }
    v31 = 0;
LABEL_22:
    v32 = 0;
    goto LABEL_23;
  }
  v21 = BrotliAllocate(a1);
  v22 = 0;
  v20 = v21;
  v266 = 0;
  v276 = 0;
  v280 = 0;
  v23 = *(_QWORD *)(v13 + 96);
LABEL_249:
  v198 = a11;
  v264 = *a13;
  v285 = *a9;
  v269 = *a10;
  v271 = *a12;
  v199 = v22 + 1;
  v283 = v23;
  if (v22 == -1)
  {
    v200 = 0;
    v201 = a1;
  }
  else
  {
    v201 = a1;
    v202 = BrotliAllocate(a1);
    v22 = a2;
    v200 = (_DWORD *)v202;
  }
  InitZopfliCostModel(v201, v20, v13 + 56, v22);
  v203 = (void *)(v20 + 2856);
  v204 = (void *)(v20 + 3880);
  v255 = (void *)(v20 + 6696);
  v258 = (float *)(v20 + 8872);
  v205 = 1;
  v206 = v20;
  v260 = (void *)(v20 + 3880);
  v262 = v199;
  do
  {
    v207 = v205;
    if (v199)
    {
      v208 = v200 + 3;
      v209 = v199;
      do
      {
        *(_QWORD *)(v208 - 3) = 1;
        *(_QWORD *)(v208 - 1) = 0x7EFFC99E00000000;
        v208 += 4;
        --v209;
      }
      while (v209);
    }
    v273 = v207;
    if ((v207 & 1) != 0)
    {
      ZopfliCostModelSetFromLiteralCosts(v20, a3, v14, a5);
      v210 = a5;
    }
    else
    {
      v211 = *a12;
      bzero(v203, 0x400uLL);
      bzero(v204, 0xB00uLL);
      bzero(v255, 0x880uLL);
      if (v211 != v271)
      {
        v212 = 0;
        v213 = a3 - v269;
        do
        {
          v214 = (unsigned int *)(v198 + 16 * v212);
          v215 = *v214;
          v216 = v214[1];
          v217 = *((_WORD *)v214 + 7);
          v218 = *((unsigned __int16 *)v214 + 6);
          ++*((_DWORD *)v204 + v218);
          if (v218 >= 0x80)
            ++*((_DWORD *)v255 + (v217 & 0x3FF));
          if ((_DWORD)v215)
          {
            v219 = v213;
            v220 = v215;
            do
            {
              ++*((_DWORD *)v203 + *(unsigned __int8 *)(v14 + (v219++ & a5)));
              --v220;
            }
            while (v220);
          }
          v213 += v215 + (v216 & 0x1FFFFFF);
          ++v212;
        }
        while (v212 != v211 - v271);
      }
      SetCost((unsigned int *)v203, 256, 1, v258);
      SetCost((unsigned int *)v204, 704, 0, (float *)v20);
      SetCost((unsigned int *)v255, *(unsigned int *)(v20 + 2824), 0, *(float **)(v20 + 2816));
      v221 = 0;
      v222 = 1.7e38;
      v13 = a7;
      do
      {
        if (v222 >= *(float *)(v20 + v221))
          v222 = *(float *)(v20 + v221);
        v221 += 4;
      }
      while (v221 != 2816);
      *(float *)(v20 + 2840) = v222;
      v223 = *(_DWORD **)(v20 + 2832);
      v224 = *(_QWORD *)(v20 + 2848);
      *v223 = 0;
      v210 = a5;
      if (v224)
      {
        v225 = (float *)(v223 + 1);
        v226 = 0.0;
        v227 = a3;
        v228 = 0.0;
        do
        {
          v229 = v228 + v258[*(unsigned __int8 *)(v14 + (v227 & a5))];
          v230 = v226 + v229;
          *v225++ = v226 + v229;
          v228 = v229 - (float)((float)(v226 + v229) - v226);
          ++v227;
          v226 = v230;
          --v224;
        }
        while (v224);
      }
    }
    *a12 = v271;
    *a13 = v264;
    *a10 = v269;
    v231 = a2;
    *a9 = v285;
    v232 = *(_QWORD *)(v13 + 16);
    v233 = *(_DWORD *)(v13 + 8);
    v234 = 325;
    if (*(int *)(v13 + 4) < 11)
      v234 = 150;
    v275 = v234;
    *v200 = 0;
    v200[3] = 0;
    v287 = 0;
    if (v266)
    {
      v235 = 0;
      v236 = 0;
      v237 = (1 << v233) - 16;
      v238 = (void *)(v232 + a3);
      memset(__b, 0, sizeof(__b));
      do
      {
        updated = UpdateNodes(v231, a3, v235, a4, v210, a7, v237, a9, *(unsigned int *)(v276 + 4 * v235), v280 + 8 * v236, v206, (uint64_t)__b, (uint64_t)v200);
        if (updated >= 0x4000)
          v240 = updated;
        else
          v240 = 0;
        v241 = *(unsigned int *)(v276 + 4 * v235);
        v236 += v241;
        if ((_DWORD)v241 == 1)
        {
          v242 = *(unsigned int *)(v280 + 8 * v236 - 4);
          v243 = v242 >> 5;
          if (v242 >> 5 <= v240)
            v243 = v240;
          if (v275 < v242 >> 5)
            v240 = v243;
        }
        if (v240 >= 2)
        {
          v244 = v240 - 1;
          v231 = a2;
          do
          {
            v245 = v235 + 1;
            if (v235 + 4 >= v231)
              break;
            EvaluateNode(v238, v235 + 1, v237, v283, a9, v206, (uint64_t)__b, (uint64_t)v200);
            v231 = a2;
            v236 += *(unsigned int *)(v276 + 4 + 4 * v235++);
            --v244;
          }
          while (v244);
          v235 = v245;
        }
        else
        {
          v231 = a2;
        }
        v246 = v235 + 4;
        ++v235;
        v210 = a5;
      }
      while (v246 < v231);
    }
    v247 = v231;
    *a12 += ComputeShortestPathFromNodes(v231, (uint64_t)v200);
    v13 = a7;
    v198 = a11;
    BrotliZopfliCreateCommands(v247, a3, (uint64_t)v200, (uint64_t)a9, a10, a7, a11, a13);
    v205 = 0;
    v14 = a4;
    v20 = v206;
    v204 = v260;
    v199 = v262;
  }
  while ((v273 & 1) != 0);
  BrotliFree(a1);
  *(_QWORD *)(v206 + 2832) = 0;
  BrotliFree(a1);
  *(_QWORD *)(v206 + 2816) = 0;
  BrotliFree(a1);
  BrotliFree(a1);
  BrotliFree(a1);
  return BrotliFree(a1);
}

void SetCost(unsigned int *a1, uint64_t a2, int a3, float *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  unsigned int *v13;
  uint64_t v14;
  double v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  float v23;
  float v24;

  v6 = a2;
  v7 = a1;
  v8 = 0;
  if (!a2)
    goto LABEL_5;
  v9 = a1;
  v10 = a2;
  do
  {
    v11 = *v9++;
    v8 += v11;
    --v10;
  }
  while (v10);
  if (v8 > 0xFF)
  {
    v12 = log2((double)v8);
    if (a3)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    v12 = kBrotliLog2Table[v8];
    if (a3)
      goto LABEL_13;
  }
  if (v6)
  {
    v13 = v7;
    v14 = v6;
    do
    {
      if (!*v13++)
        ++v8;
      --v14;
    }
    while (v14);
  }
LABEL_13:
  if (v8 > 0xFF)
  {
    v16 = log2((double)v8);
    if (!v6)
      return;
  }
  else
  {
    v16 = kBrotliLog2Table[v8];
    if (!v6)
      return;
  }
  v17 = v12;
  v18 = v16;
  v19 = v18 + 2.0;
  do
  {
    v21 = *v7++;
    v20 = v21;
    if (v21)
    {
      if (v20 > 0xFF)
        v22 = log2((double)v20);
      else
        v22 = kBrotliLog2Table[v20];
      v23 = v22;
      v24 = v17 - v23;
      *a4 = v24;
      if (v24 < 1.0)
        *a4 = 1.0;
    }
    else
    {
      *a4 = v19;
    }
    ++a4;
    --v6;
  }
  while (v6);
}

void sub_19CDA06AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

Class __getMTStandardIDServiceClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!MetricsKitLibraryCore_frameworkLibrary)
  {
    MetricsKitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!MetricsKitLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_6:
      __getMTStandardIDServiceClass_block_invoke_cold_1();
    }
  }
  result = objc_getClass("MTStandardIDService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_6;
  getMTStandardIDServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t BrotliBuildCodeLengthsHuffmanTable(uint64_t result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t i;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int32x4_t v33;
  _DWORD v34[6];
  _DWORD v35[18];
  uint64_t v36;

  v3 = 0;
  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3[1] - 1;
  v5 = v4 + a3[2] + a3[3];
  v34[2] = v4 + a3[2];
  v34[3] = v5;
  v6 = v5 + a3[4];
  v7 = v6 + a3[5];
  v34[4] = v6;
  v34[5] = v7;
  v34[0] = 17;
  v34[1] = v4;
  v8 = a2 + 17;
  do
  {
    v9 = *(unsigned __int8 *)(v8 + v3);
    v10 = (int)v34[v9];
    v35[v10] = v3 + 17;
    v34[v9] = v10 - 1;
    v11 = *(unsigned __int8 *)(v8 + v3 - 1);
    v12 = (int)v34[v11];
    v34[v11] = v12 - 1;
    v13 = *(unsigned __int8 *)(v8 + v3 - 2);
    v14 = (int)v34[v13];
    v35[v12] = v3 + 16;
    v35[v14] = v3 + 15;
    v34[v13] = v14 - 1;
    v15 = *(unsigned __int8 *)(v8 + v3 - 3);
    v16 = (int)v34[v15];
    v34[v15] = v16 - 1;
    v17 = *(unsigned __int8 *)(v8 + v3 - 4);
    v18 = (int)v34[v17];
    v35[v16] = v3 + 14;
    v35[v18] = v3 + 13;
    v34[v17] = v18 - 1;
    v19 = *(unsigned __int8 *)(v8 + v3 - 5);
    v20 = (int)v34[v19];
    v34[v19] = v20 - 1;
    v35[v20] = v3 + 12;
    v3 -= 6;
  }
  while (v3 != -18);
  if (v34[0])
  {
    v21 = 0;
    LODWORD(v22) = 0;
    v23 = 2;
    v24 = 0x8000000000000000;
    for (i = 1; i != 6; ++i)
    {
      v26 = a3[i];
      if (a3[i])
      {
        v27 = -v23;
        v22 = (int)v22;
        do
        {
          v28 = i | (v35[v22] << 16);
          v29 = result - 4 * v23 + 4 * __rbit64(v21);
          v30 = 32;
          do
          {
            *(_DWORD *)(v29 + 4 * v30) = v28;
            v31 = __OFADD__(v30, v27);
            v30 += v27;
          }
          while (!((v30 < 0) ^ v31 | (v30 == 0)));
          ++v22;
          v21 += v24;
          --v26;
        }
        while (v26);
      }
      v23 *= 2;
      v24 >>= 1;
    }
  }
  else
  {
    v32 = 0;
    v33 = vdupq_n_s32(v35[0] << 16);
    do
    {
      *(int32x4_t *)(result + v32) = v33;
      v32 += 16;
    }
    while (v32 != 128);
  }
  return result;
}

uint64_t BrotliBuildHuffmanTable(char *__src, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char *v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  char *v41;
  int v42;
  __int16 v43;

  v8 = -1;
  do
    v9 = *(__int16 *)(a3 + 2 * v8--);
  while (v9 == -1);
  v10 = 0;
  v11 = v8 + 17;
  v12 = 1;
  v13 = (1 << a2);
  if (v11 >= a2)
    v14 = a2;
  else
    v14 = v11;
  if (v11 >= a2)
    v15 = 1 << a2;
  else
    v15 = 1 << v11;
  v16 = v14;
  v17 = 2;
  v18 = 0x8000000000000000;
  do
  {
    v19 = *(unsigned __int16 *)(a4 + 2 * v12);
    if (*(_WORD *)(a4 + 2 * v12))
    {
      v20 = v12 - 16;
      do
      {
        v20 = *(unsigned __int16 *)(a3 + 2 * v20);
        v21 = &__src[4 * __rbit64(v10)];
        v22 = v15;
        do
        {
          *(_DWORD *)&v21[4 * (v22 - v17)] = v12 | (v20 << 16);
          v22 -= v17;
        }
        while (v22 > 0);
        v10 += v18;
        --v19;
      }
      while (v19);
    }
    v17 *= 2;
    v18 >>= 1;
  }
  while (v12++ < v16);
  if ((_DWORD)v13 != v15)
  {
    do
    {
      memcpy(&__src[4 * v15], __src, 4 * v15);
      v24 = (_DWORD)v13 == 2 * v15;
      v15 *= 2;
    }
    while (!v24);
  }
  if (v11 > a2)
  {
    v25 = 0;
    v26 = a2;
    v27 = v11;
    v28 = a2 + 1;
    v29 = a4 + 2 * a2 + 2;
    v30 = 0x8000000000000000;
    v31 = 2;
    v32 = __src;
    v33 = 1 << a2;
    do
    {
      v34 = v26 + 1;
      if (*(_WORD *)(a4 + 2 * (v26 + 1)))
      {
        v35 = v26 - 15;
        do
        {
          if (!v25)
          {
            v36 = v26 + 1;
            if (v26 <= 13)
            {
              v37 = 0;
              v38 = 1 << (v34 - a2);
              while (1)
              {
                v39 = v38 - *(unsigned __int16 *)(v29 + 2 * v37);
                if (v39 < 1)
                  break;
                v38 = 2 * v39;
                ++v37;
                if (v26 + v37 >= 14)
                {
                  v36 = 15;
                  goto LABEL_30;
                }
              }
              v36 = v28 + v37;
            }
LABEL_30:
            v32 += 4 * v33;
            v33 = 1 << (v36 - a2);
            v13 = (v33 + v13);
            v40 = __rbit64(v10);
            v10 += 0x8000000000000000 >> (a2 - 1);
            *(_DWORD *)&__src[4 * v40] = v36 | (((((_DWORD)v32 - (_DWORD)__src) >> 2) - (_DWORD)v40) << 16);
          }
          v35 = *(unsigned __int16 *)(a3 + 2 * v35);
          v41 = &v32[4 * __rbit64(v25)];
          v42 = v33;
          do
          {
            *(_DWORD *)&v41[4 * (v42 - v31)] = (v34 - a2) | (v35 << 16);
            v42 -= v31;
          }
          while (v42 > 0);
          v25 += v30;
          v43 = *(_WORD *)(a4 + 2 * v34) - 1;
          *(_WORD *)(a4 + 2 * v34) = v43;
        }
        while (v43);
      }
      v31 *= 2;
      v30 >>= 1;
      ++v28;
      v29 += 2;
      ++v26;
    }
    while (v34 < v27);
  }
  return v13;
}

uint64_t BrotliBuildSimpleHuffmanTable(int *__src, char a2, unsigned __int16 *a3, int a4)
{
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;

  v5 = 1;
  v6 = (1 << a2);
  switch(a4)
  {
    case 0:
      *__src = *a3 << 16;
      v5 = 1;
      break;
    case 1:
      v7 = a3[1];
      v8 = *a3;
      if (v7 <= v8)
      {
        *__src = (v7 << 16) | 1;
        v9 = (*a3 << 16) | 1;
      }
      else
      {
        *__src = (v8 << 16) | 1;
        v9 = (a3[1] << 16) | 1;
      }
      __src[1] = v9;
      v5 = 2;
      break;
    case 2:
      *__src = (*a3 << 16) | 1;
      __src[2] = (*a3 << 16) | 1;
      v10 = a3[2];
      v11 = a3[1];
      if (v10 > v11)
      {
        __src[1] = (v11 << 16) | 2;
        v12 = (a3[2] << 16) | 2;
        goto LABEL_21;
      }
      __src[1] = (v10 << 16) | 2;
      v19 = a3[1];
      goto LABEL_20;
    case 3:
      v13 = 0;
      v14 = 2;
      do
      {
        v15 = v13++;
        v16 = a3[v15];
        v17 = v14;
        do
        {
          v18 = *(unsigned __int16 *)((char *)a3 + v17);
          if (v18 < v16)
          {
            *(unsigned __int16 *)((char *)a3 + v17) = v16;
            a3[v15] = v18;
            v16 = v18;
          }
          v17 += 2;
        }
        while (v17 != 8);
        v14 += 2;
      }
      while (v13 != 3);
      *__src = (*a3 << 16) | 2;
      __src[2] = (a3[1] << 16) | 2;
      __src[1] = (a3[2] << 16) | 2;
      v19 = a3[3];
LABEL_20:
      v12 = (v19 << 16) | 2;
LABEL_21:
      __src[3] = v12;
      v5 = 4;
      break;
    case 4:
      v20 = a3[3];
      v21 = a3[2];
      if (v20 < v21)
      {
        a3[3] = v21;
        a3[2] = v20;
      }
      *__src = (*a3 << 16) | 1;
      __src[1] = (a3[1] << 16) | 2;
      __src[2] = (*a3 << 16) | 1;
      __src[3] = (a3[2] << 16) | 3;
      __src[4] = (*a3 << 16) | 1;
      __src[5] = (a3[1] << 16) | 2;
      __src[6] = (*a3 << 16) | 1;
      __src[7] = (a3[3] << 16) | 3;
      v5 = 8;
      break;
    default:
      break;
  }
  while (v5 != (_DWORD)v6)
  {
    memcpy(&__src[v5], __src, 4 * v5);
    v5 *= 2;
  }
  return v6;
}

unint64_t BrotliStoreHuffmanTree(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[4];
  uint64_t v35;
  _WORD v36[18];
  _QWORD v37[2];
  __int16 v38;
  _BYTE v39[704];
  _BYTE v40[704];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  BrotliWriteHuffmanTree(a1, a2, &v33, (uint64_t)v40, (uint64_t)v39);
  v8 = v33;
  if (v33)
  {
    v9 = v40;
    do
    {
      v10 = *v9++;
      ++*((_DWORD *)v34 + v10);
      --v8;
    }
    while (v8);
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  while (!*((_DWORD *)v34 + v13))
  {
LABEL_8:
    if (++v13 == 18)
      goto LABEL_11;
  }
  if (!v12)
  {
    v12 = 1;
    v11 = v13;
    goto LABEL_8;
  }
  v12 = 2;
LABEL_11:
  v14 = 18;
  BrotliCreateHuffmanTree((uint64_t)v34, 18, 5, a3, (uint64_t)v37);
  result = (unint64_t)BrotliConvertBitDepthsToSymbols((unsigned __int8 *)v37, 18, (uint64_t)v36);
  if (v12 >= 2)
  {
    v16 = 0x11u;
    while (!*((_BYTE *)v37 + BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask_kStorageOrder[v16]))
    {
      if (--v16 == -1)
      {
        v14 = 0;
        goto LABEL_17;
      }
    }
    v14 = v16 + 1;
  }
LABEL_17:
  v17 = 2;
  if (!BYTE3(v37[0]))
    v17 = 3;
  if (BYTE1(v37[0]) | BYTE2(v37[0]))
    v18 = 0;
  else
    v18 = v17;
  v19 = *a4;
  *(_QWORD *)(a5 + (*a4 >> 3)) = (v18 << (*a4 & 7)) | *(unsigned __int8 *)(a5 + (*a4 >> 3));
  v20 = v19 + 2;
  *a4 = v20;
  v21 = v14 - v18;
  if (v14 > v18)
  {
    v22 = &BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask_kStorageOrder[v18];
    do
    {
      v23 = *v22++;
      v24 = *((unsigned __int8 *)v37 + v23);
      v25 = BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask_kHuffmanBitLengthHuffmanCodeBitLengths[v24];
      result = v20 & 7;
      *(_QWORD *)(a5 + (v20 >> 3)) = ((unint64_t)BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask_kHuffmanBitLengthHuffmanCodeSymbols[v24] << (v20 & 7)) | *(unsigned __int8 *)(a5 + (v20 >> 3));
      v20 += v25;
      *a4 = v20;
      --v21;
    }
    while (v21);
  }
  if (v12 == 1)
    *((_BYTE *)v37 + v11) = 0;
  v26 = v33;
  if (v33)
  {
    v27 = v39;
    v28 = v40;
    while (1)
    {
      v30 = *v28++;
      v29 = v30;
      v31 = *((unsigned __int8 *)v37 + v30);
      result = *(unsigned __int8 *)(a5 + (v20 >> 3));
      *(_QWORD *)(a5 + (v20 >> 3)) = ((unint64_t)(unsigned __int16)v36[v30] << (v20 & 7)) | result;
      v20 += v31;
      *a4 = v20;
      if (v30 == 16)
        break;
      if (v29 == 17)
      {
        v32 = 3;
LABEL_33:
        result = v20 & 7;
        *(_QWORD *)(a5 + (v20 >> 3)) = ((unint64_t)*v27 << (v20 & 7)) | *(unsigned __int8 *)(a5 + (v20 >> 3));
        v20 += v32;
        *a4 = v20;
      }
      ++v27;
      if (!--v26)
        return result;
    }
    v32 = 2;
    goto LABEL_33;
  }
  return result;
}

unint64_t BrotliBuildAndStoreHuffmanTreeFast(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v88 = 0u;
  v89 = 0u;
  if (!a3)
    goto LABEL_9;
  v10 = result;
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(unsigned int *)(a2 + 4 * v12);
    if ((_DWORD)v13)
    {
      if (v11 <= 3)
        *((_QWORD *)&v88 + v11) = v12;
      ++v11;
      a3 -= v13;
    }
    ++v12;
  }
  while (a3);
  v14 = v11 - 1;
  if (v11 <= 1)
  {
LABEL_9:
    v15 = *a7;
    *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
    v15 += 4;
    *a7 = v15;
    v16 = v88;
    *(_QWORD *)(a8 + (v15 >> 3)) = ((_QWORD)v88 << (v15 & 7)) | *(unsigned __int8 *)(a8 + (v15 >> 3));
    *a7 = v15 + a4;
    a5[v16] = 0;
    *(_WORD *)(a6 + 2 * v16) = 0;
    return result;
  }
  bzero(a5, v12);
  v17 = 1;
  do
  {
    if (v12)
    {
      v18 = v12 - 1;
      v19 = v10;
      do
      {
        v20 = *(_DWORD *)(a2 + 4 * v18);
        if (v20)
        {
          if (v20 < v17)
            v20 = v17;
          *(_DWORD *)v19 = v20;
          *(_WORD *)(v19 + 4) = -1;
          *(_WORD *)(v19 + 6) = v18;
          v19 += 8;
        }
        --v18;
      }
      while (v18 != -1);
    }
    else
    {
      v19 = v10;
    }
    v21 = (v19 - v10) << 29;
    v22 = (int)((v19 - v10) >> 3);
    if (((unint64_t)(v19 - v10) >> 3) > 0xCuLL)
    {
      v28 = 2 * (HIDWORD(v21) < 0x39);
      do
      {
        v29 = kBrotliShellGaps[v28];
        if (v29 < v22)
        {
          v30 = 0;
          v31 = kBrotliShellGaps[v28];
          do
          {
            v32 = *(_QWORD *)(v10 + 8 * v31);
            v33 = v31;
            if (v31 >= v29)
            {
              v34 = v30;
              v35 = v31;
              while (*(_DWORD *)(v10 + v34) > v32)
              {
                v33 = v35 - v29;
                *(_QWORD *)(v10 + 8 * v35) = *(_QWORD *)(v10 + v34);
                v34 -= 8 * v29;
                v35 = v33;
                if (v33 < v29)
                  goto LABEL_40;
              }
              v33 = v35;
            }
LABEL_40:
            *(_QWORD *)(v10 + 8 * v33) = v32;
            ++v31;
            v30 += 8;
          }
          while (v31 != v22);
        }
        ++v28;
      }
      while (v28 != 6);
    }
    else if (v21 >> 33)
    {
      v23 = 0;
      if (v22 <= 2)
        v22 = 2;
      for (i = 1; i != v22; ++i)
      {
        v25 = *(_QWORD *)(v10 + 8 * i);
        v26 = v23;
        v27 = i;
        do
        {
          if (*(_DWORD *)(v10 + v26) <= v25)
            break;
          *(_QWORD *)(v10 + 8 * v27) = *(_QWORD *)(v10 + v26);
          v26 -= 8;
          --v27;
        }
        while (v27);
        *(_QWORD *)(v10 + 8 * v27) = v25;
        v23 += 8;
      }
    }
    v36 = (unint64_t)(v19 - v10) >> 3;
    *(_QWORD *)v19 = -1;
    *(_QWORD *)(v19 + 8) = -1;
    if ((int)v36 >= 2)
    {
      v37 = 0;
      v38 = v36 + 1;
      v39 = (_QWORD *)(v19 + 16);
      v40 = v36 + 1;
      do
      {
        v41 = *(_DWORD *)(v10 + 8 * v37);
        v42 = *(_DWORD *)(v10 + 8 * v38);
        v43 = v41 > v42;
        if (v41 > v42)
          v44 = v37;
        else
          v44 = v37 + 1;
        if (v43)
          v45 = v38 + 1;
        else
          v45 = v38;
        if (v43)
          v46 = v38;
        else
          v46 = v37;
        v47 = *(_DWORD *)(v10 + 8 * v44);
        v48 = *(_DWORD *)(v10 + 8 * v45);
        v49 = v47 > v48;
        if (v47 > v48)
          v37 = v44;
        else
          v37 = v44 + 1;
        if (v49)
          v38 = v45 + 1;
        else
          v38 = v45;
        if (v49)
          v44 = v45;
        *((_DWORD *)v39 - 2) = *(_DWORD *)(v10 + 8 * v44) + *(_DWORD *)(v10 + 8 * v46);
        *((_WORD *)v39 - 2) = v46;
        *((_WORD *)v39 - 1) = v44;
        *v39++ = -1;
        --v40;
      }
      while (v40 > 2);
    }
    v17 *= 2;
  }
  while (!BrotliSetDepth(2 * (int)v36 - 1, v10, (uint64_t)a5, 14));
  result = (unint64_t)BrotliConvertBitDepthsToSymbols(a5, v12, a6);
  if (v11 <= 4)
  {
    v50 = 0;
    v51 = *a7;
    *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
    *a7 = v51 + 2;
    *(_QWORD *)(a8 + ((v51 + 2) >> 3)) = (v14 << ((v51 + 2) & 7)) | *(unsigned __int8 *)(a8 + ((v51 + 2) >> 3));
    v52 = v51 + 4;
    *a7 = v52;
    v53 = (char *)&v88 + 8;
    do
    {
      v54 = v50 + 1;
      if (v50 + 1 < v11)
      {
        v55 = *((_QWORD *)&v88 + v50);
        v56 = (uint64_t *)v53;
        v57 = v14;
        do
        {
          v58 = *v56;
          result = a5[v55];
          if (a5[*v56] < result)
          {
            *v56 = v55;
            *((_QWORD *)&v88 + v50) = v58;
            v55 = v58;
          }
          ++v56;
          --v57;
        }
        while (v57);
      }
      --v14;
      v53 += 8;
      ++v50;
    }
    while (v54 != v11);
    v59 = v52 >> 3;
    if (v11 == 3)
    {
      v75 = *((_QWORD *)&v88 + 1);
      *(_QWORD *)(a8 + v59) = ((_QWORD)v88 << (v52 & 7)) | *(unsigned __int8 *)(a8 + v59);
      v61 = a4;
      v76 = v52 + a4;
      *a7 = v76;
      *(_QWORD *)(a8 + (v76 >> 3)) = (v75 << (v76 & 7)) | *(unsigned __int8 *)(a8 + (v76 >> 3));
      v62 = v76 + a4;
      *a7 = v62;
      *(_QWORD *)(a8 + (v62 >> 3)) = ((_QWORD)v89 << (v62 & 7)) | *(unsigned __int8 *)(a8 + (v62 >> 3));
    }
    else
    {
      if (v11 != 2)
      {
        v78 = v88;
        *(_QWORD *)(a8 + v59) = ((_QWORD)v88 << (v52 & 7)) | *(unsigned __int8 *)(a8 + v59);
        v79 = v52 + a4;
        *a7 = v79;
        *(_QWORD *)(a8 + (v79 >> 3)) = (*((_QWORD *)&v78 + 1) << (v79 & 7)) | *(unsigned __int8 *)(a8 + (v79 >> 3));
        v80 = v79 + a4;
        *a7 = v80;
        v81 = *((_QWORD *)&v89 + 1);
        *(_QWORD *)(a8 + (v80 >> 3)) = ((_QWORD)v89 << (v80 & 7)) | *(unsigned __int8 *)(a8 + (v80 >> 3));
        v82 = v80 + a4;
        *a7 = v82;
        *(_QWORD *)(a8 + (v82 >> 3)) = (v81 << (v82 & 7)) | *(unsigned __int8 *)(a8 + (v82 >> 3));
        v83 = v82 + a4;
        *a7 = v83;
        *(_QWORD *)(a8 + (v83 >> 3)) = ((unint64_t)(a5[v78] == 1) << (v83 & 7)) | *(unsigned __int8 *)(a8 + (v83 >> 3));
        v77 = v83 + 1;
        goto LABEL_100;
      }
      v60 = *((_QWORD *)&v88 + 1);
      *(_QWORD *)(a8 + v59) = ((_QWORD)v88 << (v52 & 7)) | *(unsigned __int8 *)(a8 + v59);
      v61 = a4;
      v62 = v52 + a4;
      *a7 = v62;
      *(_QWORD *)(a8 + (v62 >> 3)) = (v60 << (v62 & 7)) | *(unsigned __int8 *)(a8 + (v62 >> 3));
    }
    v77 = v62 + v61;
LABEL_100:
    *a7 = v77;
    return result;
  }
  v63 = *a7;
  *(_QWORD *)(a8 + (*a7 >> 3)) = (0xFF55555554 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
  v64 = v63 + 40;
  *a7 = v64;
  if (v12)
  {
    v65 = 0;
    v66 = 8;
    do
    {
      v67 = a5[v65];
      if (v65 + 1 >= v12)
      {
        ++v65;
        result = 1;
        if (!(_DWORD)v67)
          goto LABEL_93;
      }
      else
      {
        v68 = 0;
        result = v12 - v65;
        while (a5[v65 + 1 + v68] == (_DWORD)v67)
        {
          if (v12 - v65 - 1 == ++v68)
            goto LABEL_92;
        }
        result = v68 + 1;
LABEL_92:
        v65 += result;
        if (!(_DWORD)v67)
        {
LABEL_93:
          v74 = kZeroRepsDepth[result];
          result = (kZeroRepsBits[result] << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
          *(_QWORD *)(a8 + (v64 >> 3)) = result;
          v64 += v74;
          goto LABEL_94;
        }
      }
      if ((_DWORD)v66 != (_DWORD)v67)
      {
        v69 = kCodeLengthDepth[v67];
        *(_QWORD *)(a8 + (v64 >> 3)) = ((unint64_t)kCodeLengthBits[v67] << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
        v64 += v69;
        *a7 = v64;
        --result;
      }
      if (result <= 2)
      {
        if (result)
        {
          v70 = kCodeLengthDepth[v67];
          v71 = kCodeLengthBits[v67];
          do
          {
            *(_QWORD *)(a8 + (v64 >> 3)) = (v71 << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
            v64 += v70;
            *a7 = v64;
            --result;
          }
          while (result);
        }
        goto LABEL_95;
      }
      v72 = result - 3;
      v73 = kNonZeroRepsDepth[v72];
      result = (kNonZeroRepsBits[v72] << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
      *(_QWORD *)(a8 + (v64 >> 3)) = result;
      v64 += v73;
      v66 = v67;
LABEL_94:
      *a7 = v64;
      v67 = v66;
LABEL_95:
      v66 = v67;
    }
    while (v65 < v12);
  }
  return result;
}

uint64_t BrotliStoreMetaBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, uint64_t a8, unsigned int *a9, unsigned int a10, uint64_t a11, uint64_t a12, unint64_t *a13, unint64_t *a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t i;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t j;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  __int16 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v89;
  unint64_t v90;
  uint64_t result;
  unsigned int v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  LODWORD(v103) = a6;
  v17 = a15;
  v19 = a9[16];
  v18 = a9[17];
  v94 = a8;
  StoreCompressedMetaBlockHeader(a8, a4, a14, a15);
  v20 = BrotliAllocate(a1);
  v21 = BrotliAllocate(a1);
  v22 = v21;
  v24 = a13[2];
  v23 = (unsigned int *)a13[3];
  v25 = *a13;
  v26 = a13[1];
  *(_QWORD *)v21 = 256;
  *(_QWORD *)(v21 + 8) = v25;
  *(_QWORD *)(v21 + 16) = v24;
  *(_QWORD *)(v21 + 24) = v23;
  *(_QWORD *)(v21 + 32) = v26;
  *(_OWORD *)(v21 + 40) = xmmword_19D04BBA0;
  *(_QWORD *)(v21 + 912) = 0;
  if (v26)
    v27 = *v23;
  else
    v27 = 0;
  *(_QWORD *)(v21 + 920) = v27;
  *(_QWORD *)(v21 + 928) = 0;
  *(_QWORD *)(v21 + 944) = 0;
  *(_QWORD *)(v21 + 936) = 0;
  v29 = a13[8];
  v28 = (unsigned int *)a13[9];
  v30 = a13[6];
  v31 = a13[7];
  *(_QWORD *)(v21 + 952) = 704;
  *(_QWORD *)(v21 + 960) = v30;
  *(_QWORD *)(v21 + 968) = v29;
  *(_QWORD *)(v21 + 976) = v28;
  *(_QWORD *)(v21 + 984) = v31;
  *(_OWORD *)(v21 + 992) = xmmword_19D04BBA0;
  *(_QWORD *)(v21 + 1864) = 0;
  if (v31)
    v32 = *v28;
  else
    v32 = 0;
  v96 = (_QWORD *)(v21 + 952);
  *(_QWORD *)(v21 + 1872) = v32;
  v95 = (_QWORD *)(v21 + 1904);
  *(_QWORD *)(v21 + 1880) = 0;
  *(_QWORD *)(v21 + 1896) = 0;
  *(_QWORD *)(v21 + 1888) = 0;
  v34 = a13[14];
  v33 = (unsigned int *)a13[15];
  v35 = a13[12];
  v36 = a13[13];
  *(_QWORD *)(v21 + 1904) = v18;
  *(_QWORD *)(v21 + 1912) = v35;
  *(_QWORD *)(v21 + 1920) = v34;
  *(_QWORD *)(v21 + 1928) = v33;
  *(_QWORD *)(v21 + 1936) = v36;
  *(_QWORD *)(v21 + 1944) = 1;
  *(_QWORD *)(v21 + 1952) = 0;
  *(_QWORD *)(v21 + 2816) = 0;
  if (v36)
    v37 = *v33;
  else
    v37 = 0;
  *(_QWORD *)(v21 + 2824) = v37;
  *(_QWORD *)(v21 + 2832) = 0;
  *(_QWORD *)(v21 + 2848) = 0;
  *(_QWORD *)(v21 + 2840) = 0;
  BuildAndStoreBlockSwitchEntropyCodes(v21, v20, a14, a15);
  BuildAndStoreBlockSwitchEntropyCodes((uint64_t)v96, v20, a14, a15);
  BuildAndStoreBlockSwitchEntropyCodes((uint64_t)v95, v20, a14, a15);
  v38 = *a14;
  *(_QWORD *)(a15 + (*a14 >> 3)) = ((unint64_t)a9[14] << (*a14 & 7)) | *(unsigned __int8 *)(a15 + (*a14 >> 3));
  *a14 = v38 + 2;
  *(_QWORD *)(a15 + ((v38 + 2) >> 3)) = ((unint64_t)(a9[15] >> a9[14]) << ((v38 + 2) & 7)) | *(unsigned __int8 *)(a15 + ((v38 + 2) >> 3));
  v39 = v38 + 6;
  *a14 = v38 + 6;
  if (*a13)
  {
    v40 = 0;
    do
    {
      *(_QWORD *)(a15 + (v39 >> 3)) = ((unint64_t)a10 << (v39 & 7)) | *(unsigned __int8 *)(a15 + (v39 >> 3));
      v39 += 2;
      *a14 = v39;
      ++v40;
    }
    while (v40 < *a13);
  }
  v41 = a13[19];
  if (v41)
    EncodeContextMap(a1, (char *)(v22 + 2856), (unsigned int *)a13[18], v41, a13[23], v20, a14, a15);
  else
    StoreTrivialContextMap((_BYTE *)(v22 + 2856), a13[23], 6uLL, v20, a14, a15);
  v42 = a13[21];
  if (v42)
    EncodeContextMap(a1, (char *)(v22 + 2856), (unsigned int *)a13[20], v42, a13[27], v20, a14, a15);
  else
    StoreTrivialContextMap((_BYTE *)(v22 + 2856), a13[27], 2uLL, v20, a14, a15);
  v43 = a13[22];
  v44 = a13[23];
  if (*(_QWORD *)v22 * v44)
  {
    *(_QWORD *)(v22 + 936) = BrotliAllocate(a1);
    v45 = BrotliAllocate(a1);
  }
  else
  {
    v45 = 0;
    *(_QWORD *)(v22 + 936) = 0;
  }
  *(_QWORD *)(v22 + 944) = v45;
  if (v44)
  {
    for (i = 0; i != v44; ++i)
    {
      BuildAndStoreHuffmanTree(v43, *(_QWORD *)v22, 256, v20, (_BYTE *)(*(_QWORD *)(v22 + 936) + *(_QWORD *)v22 * i), *(_QWORD *)(v22 + 944) + 2 * *(_QWORD *)v22 * i, a14, a15);
      v43 += 1040;
    }
  }
  v47 = a13[24];
  v48 = a13[25];
  if (*v96 * v48)
  {
    *(_QWORD *)(v22 + 1888) = BrotliAllocate(a1);
    v49 = BrotliAllocate(a1);
  }
  else
  {
    v49 = 0;
    *(_QWORD *)(v22 + 1888) = 0;
  }
  *(_QWORD *)(v22 + 1896) = v49;
  if (v48)
  {
    for (j = 0; j != v48; ++j)
    {
      BuildAndStoreHuffmanTree(v47, *(_QWORD *)(v22 + 952), 704, v20, (_BYTE *)(*(_QWORD *)(v22 + 1888) + *(_QWORD *)(v22 + 952) * j), *(_QWORD *)(v22 + 1896) + 2 * *(_QWORD *)(v22 + 952) * j, a14, a15);
      v47 += 2832;
    }
  }
  v51 = a13[26];
  v52 = a13[27];
  if (*v95 * v52)
  {
    *(_QWORD *)(v22 + 2840) = BrotliAllocate(a1);
    v53 = a1;
    v54 = BrotliAllocate(a1);
  }
  else
  {
    v53 = a1;
    v54 = 0;
    *(_QWORD *)(v22 + 2840) = 0;
  }
  *(_QWORD *)(v22 + 2848) = v54;
  if (v52)
  {
    for (k = 0; k != v52; ++k)
    {
      BuildAndStoreHuffmanTree(v51, *(_QWORD *)(v22 + 1904), v19, v20, (_BYTE *)(*(_QWORD *)(v22 + 2840) + *(_QWORD *)(v22 + 1904) * k), *(_QWORD *)(v22 + 2848) + 2 * *(_QWORD *)(v22 + 1904) * k, a14, a15);
      v51 += 2192;
    }
  }
  v93 = v53;
  BrotliFree(v53);
  v56 = a2;
  v57 = a14;
  if (a12)
  {
    v58 = 0;
    v103 = v103;
    v59 = a7;
    do
    {
      v60 = (unsigned int *)(a11 + 16 * v58);
      v62 = *v60;
      v61 = v60[1];
      v63 = v60[2];
      v97 = *((unsigned __int16 *)v60 + 7);
      v99 = *((unsigned __int16 *)v60 + 6);
      StoreSymbol(v96, v99, v57, v17);
      LOWORD(v64) = v62;
      if (v62 >= 6)
      {
        if (v62 > 0x81)
        {
          if (v62 > 0x841)
          {
            v66 = 22;
            if (v62 >= 0x5842)
              v66 = 23;
            LOWORD(v64) = 21;
            if (v62 >> 1 >= 0xC21)
              LOWORD(v64) = v66;
          }
          else
          {
            LODWORD(v64) = (__clz(v62 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v65 = (__clz(v62 - 2) ^ 0x1F) - 1;
          v64 = 2 * v65 + ((unint64_t)(v62 - 2) >> v65) + 2;
        }
      }
      v67 = (v61 & 0x1FFFFFF) + (char)(HIBYTE(v61) & 0x80 | (v61 >> 25));
      v101 = v61 & 0x1FFFFFF;
      if (v67 > 9)
      {
        v69 = a5;
        if (v67 > 0x85)
        {
          LODWORD(v68) = (__clz(v67 - 70) ^ 0x1F) + 12;
          if (v67 > 0x845)
            LOWORD(v68) = 23;
        }
        else
        {
          v70 = (__clz(v67 - 6) ^ 0x1F) - 1;
          v68 = 2 * v70 + ((unint64_t)(v67 - 6) >> v70) + 4;
        }
      }
      else
      {
        LOWORD(v68) = v61 + (char)(HIBYTE(v61) & 0x80 | (v61 >> 25)) - 2;
        v69 = a5;
      }
      v71 = (unsigned __int16)v64;
      v72 = kBrotliInsExtra[v71];
      v73 = (unsigned __int16)v68;
      v74 = ((unint64_t)(v67 - *(_DWORD *)((char *)&kBrotliCopyBase + v73 * 4)) << v72) | (v62 - *(_DWORD *)((char *)&kBrotliInsBase + v71 * 4));
      v75 = kBrotliCopyExtra[v73] + v72;
      v76 = *v57;
      *(_QWORD *)(v17 + (*v57 >> 3)) = (v74 << (*(_BYTE *)v57 & 7)) | *(unsigned __int8 *)(v17 + (*v57 >> 3));
      *v57 = v76 + v75;
      v102 = v58;
      v98 = v63;
      if (a13[19])
      {
        v77 = v57;
        v78 = v69;
        v79 = v59;
        v80 = v22;
        v81 = v103;
        if ((_DWORD)v62)
        {
          do
          {
            v79 = v81;
            v82 = (_kBrotliContextLookupTable[512 * a10 + 256 + v59] | _kBrotliContextLookupTable[512 * a10 + v81]);
            v81 = *(unsigned __int8 *)(a2 + (a3 & v78));
            StoreSymbolWithContext((_QWORD *)v22, v81, v82, a13[18], v57, a15, 6);
            ++a3;
            v59 = v79;
            --v62;
          }
          while (v62);
        }
      }
      else
      {
        if ((_DWORD)v62)
        {
          do
          {
            StoreSymbol((_QWORD *)v22, *(unsigned __int8 *)(v56 + (a3++ & v69)), v57, v17);
            --v62;
          }
          while (v62);
        }
        v79 = v59;
        v77 = v57;
        v80 = v22;
        v81 = v103;
      }
      v103 = v81;
      a3 += v101;
      v83 = v77;
      v17 = a15;
      v56 = a2;
      v22 = v80;
      v57 = v83;
      if ((_DWORD)v101)
      {
        v79 = *(unsigned __int8 *)(a2 + ((a3 - 2) & a5));
        v103 = *(unsigned __int8 *)(a2 + ((a3 - 1) & a5));
        if (v99 >= 0x80)
        {
          v84 = v97 & 0x3FF;
          if (a13[21])
          {
            v85 = v99 >> 6;
            if (v99 >> 6 != 4 && v85 != 2 && v85 != 7 || (v99 & 7u) >= 3)
              v89 = 3;
            else
              v89 = v99 & 7;
            StoreSymbolWithContext(v95, v84, v89, a13[20], v57, a15, 2);
          }
          else
          {
            StoreSymbol(v95, v84, v83, a15);
          }
          v90 = *v57;
          *(_QWORD *)(a15 + (*v57 >> 3)) = (v98 << (*v57 & 7)) | *(unsigned __int8 *)(a15 + (*v57 >> 3));
          *v57 = v90 + (v97 >> 10);
        }
      }
      v58 = v102 + 1;
      v59 = v79;
    }
    while (v102 + 1 != a12);
  }
  BrotliFree(v93);
  *(_QWORD *)(v22 + 2840) = 0;
  BrotliFree(v93);
  *(_QWORD *)(v22 + 2848) = 0;
  BrotliFree(v93);
  *(_QWORD *)(v22 + 1888) = 0;
  BrotliFree(v93);
  *(_QWORD *)(v22 + 1896) = 0;
  BrotliFree(v93);
  *(_QWORD *)(v22 + 936) = 0;
  BrotliFree(v93);
  *(_QWORD *)(v22 + 944) = 0;
  result = BrotliFree(v93);
  if (v94)
  {
    v92 = *(_DWORD *)v57 + 7;
    *v57 = v92 & 0xFFFFFFF8;
    *(_BYTE *)(v17 + (v92 >> 3)) = 0;
  }
  return result;
}

uint64_t StoreCompressedMetaBlockHeader(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *a3;
  *(_QWORD *)(a4 + (*a3 >> 3)) = ((uint64_t)(int)result << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
  v5 = v4 + 1;
  *a3 = v4 + 1;
  if ((_DWORD)result)
  {
    *(_QWORD *)(a4 + (v5 >> 3)) = *(unsigned __int8 *)(a4 + (v5 >> 3));
    *a3 = v4 + 2;
    if (a2 == 1 || (v6 = __clz(a2 - 1) ^ 0x1F, v6 <= 0xE))
      v7 = 4;
    else
      v7 = (v6 + 4) >> 2;
    *(_QWORD *)(a4 + ((v4 + 2) >> 3)) = ((v7 - 4) << ((v4 + 2) & 7)) | *(unsigned __int8 *)(a4 + ((v4 + 2) >> 3));
    v10 = v4 + 4;
    *a3 = v10;
    *(_QWORD *)(a4 + (v10 >> 3)) = ((a2 - 1) << (v10 & 7)) | *(unsigned __int8 *)(a4 + (v10 >> 3));
    v11 = v10 + 4 * v7;
  }
  else
  {
    if (a2 == 1 || (v8 = __clz(a2 - 1) ^ 0x1F, v8 <= 0xE))
      v9 = 4;
    else
      v9 = (v8 + 4) >> 2;
    *(_QWORD *)(a4 + (v5 >> 3)) = ((v9 - 4) << (v5 & 7)) | *(unsigned __int8 *)(a4 + (v5 >> 3));
    v12 = v4 + 3;
    *a3 = v12;
    *(_QWORD *)(a4 + (v12 >> 3)) = ((a2 - 1) << (v12 & 7)) | *(unsigned __int8 *)(a4 + (v12 >> 3));
    v13 = v12 + 4 * v9;
    *a3 = v13;
    *(_QWORD *)(a4 + (v13 >> 3)) = *(unsigned __int8 *)(a4 + (v13 >> 3));
    v11 = v13 + 1;
  }
  *a3 = v11;
  return result;
}

unint64_t BuildAndStoreBlockSwitchEntropyCodes(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t result;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD v38[6];
  uint64_t v39;
  _DWORD v40[258];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned __int8 **)(a1 + 16);
  __memset_chk();
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  if (v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = v9[v11];
      if (v11)
      {
        if (v12 == v14)
          v15 = 0;
        else
          v15 = v14 + 2;
        if (v13 + 1 == v14)
          v15 = 1;
        ++v40[v15];
      }
      v16 = v7[v11];
      if (v16 <= 0x2F0)
        v17 = 14;
      else
        v17 = 20;
      if (v16 <= 0x28)
        v18 = 0;
      else
        v18 = 7;
      if (v16 <= 0xB0)
        v19 = v18;
      else
        v19 = v17;
      v20 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v19 + 4);
      do
      {
        v21 = v19;
        if (v19 == 25)
          break;
        ++v19;
        v22 = *v20;
        v20 += 2;
      }
      while (v16 >= v22);
      ++*((_DWORD *)v38 + v21);
      ++v11;
      v12 = v13;
      v13 = v14;
    }
    while (v11 != v8);
  }
  result = StoreVarLenUint8(v10 - 1, a3, a4);
  if (v10 >= 2)
  {
    BuildAndStoreHuffmanTree((unint64_t)v40, v10 + 2, v10 + 2, a2, (_BYTE *)(a1 + 56), a1 + 314, a3, a4);
    result = BuildAndStoreHuffmanTree((unint64_t)v38, 0x1AuLL, 26, a2, (_BYTE *)(a1 + 830), a1 + 856, a3, a4);
    v24 = *v7;
    v25 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *v9;
    *(_QWORD *)(a1 + 48) = v25;
    v26 = 14;
    if (v24 > 0x2F0)
      v26 = 20;
    v27 = 7;
    if (v24 <= 0x28)
      v27 = 0;
    if (v24 <= 0xB0)
      v28 = v27;
    else
      v28 = v26;
    v29 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v28 + 4);
    do
    {
      v30 = v28;
      if (v28 == 25)
        break;
      ++v28;
      v31 = *v29;
      v29 += 2;
    }
    while (v24 >= v31);
    v32 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v30);
    v33 = *((unsigned __int8 *)v32 + 2);
    v34 = v24 - *v32;
    v35 = *(unsigned __int8 *)(a1 + 40 + v30 + 790);
    v36 = *a3;
    *(_QWORD *)(a4 + (*a3 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 40 + 2 * v30 + 816) << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
    *a3 = v36 + v35;
    *(_QWORD *)(a4 + ((v36 + v35) >> 3)) = (v34 << ((v36 + v35) & 7)) | *(unsigned __int8 *)(a4 + ((v36 + v35) >> 3));
    *a3 = v36 + v35 + v33;
  }
  return result;
}

unint64_t StoreTrivialContextMap(_BYTE *a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  result = StoreVarLenUint8(a2 - 1, a5, a6);
  if (a2 >= 2)
  {
    v25 = a4;
    v13 = a3 - 1;
    v14 = a3 - 1 + a2;
    v15 = a1 + 1088;
    v16 = a1 + 1360;
    bzero(a1, 4 * v14);
    v17 = *a5;
    *(_QWORD *)(a6 + (*a5 >> 3)) = (1 << (*a5 & 7)) | *(unsigned __int8 *)(a6 + (*a5 >> 3));
    *a5 = v17 + 1;
    *(_QWORD *)(a6 + ((v17 + 1) >> 3)) = ((a3 - 2) << ((v17 + 1) & 7)) | *(unsigned __int8 *)(a6 + ((v17 + 1) >> 3));
    *a5 = v17 + 5;
    *(_DWORD *)&a1[4 * a3 - 4] = a2;
    *(_DWORD *)a1 = 1;
    if (v14 > a3)
      memset_pattern16(&a1[4 * a3], &unk_19D02CD00, 4 * a2 - 4);
    result = BuildAndStoreHuffmanTree((unint64_t)a1, a3 - 1 + a2, a3 - 1 + a2, v25, a1 + 1088, (uint64_t)(a1 + 1360), a5, a6);
    v18 = 0;
    v19 = *a5;
    do
    {
      v20 = v13 + v18;
      if (!v18)
        v20 = 0;
      v21 = v15[v20];
      *(_QWORD *)(a6 + (v19 >> 3)) = ((unint64_t)*(unsigned __int16 *)&v16[2 * v20] << (v19 & 7)) | *(unsigned __int8 *)(a6 + (v19 >> 3));
      v22 = v19 + v21;
      *a5 = v22;
      v23 = v15[v13];
      *(_QWORD *)(a6 + (v22 >> 3)) = ((unint64_t)*(unsigned __int16 *)&v16[2 * v13] << (v22 & 7)) | *(unsigned __int8 *)(a6 + (v22 >> 3));
      v24 = v22 + v23;
      *a5 = v24;
      *(_QWORD *)(a6 + (v24 >> 3)) = ((unint64_t)~(-1 << (a3 - 1)) << (v24 & 7)) | *(unsigned __int8 *)(a6 + (v24 >> 3));
      v19 = v24 + v13;
      *a5 = v24 + v13;
      ++v18;
    }
    while (a2 != v18);
    *(_QWORD *)(a6 + (v19 >> 3)) = (1 << (v19 & 7)) | *(unsigned __int8 *)(a6 + (v19 >> 3));
    *a5 = v24 + a3;
  }
  return result;
}

uint64_t EncodeContextMap(uint64_t a1, char *a2, unsigned int *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char __src;
  _BYTE v61[271];

  *(_QWORD *)&v61[255] = *MEMORY[0x1E0C80C00];
  result = StoreVarLenUint8(a5 - 1, a7, a8);
  if (a5 == 1)
    return result;
  v17 = BrotliAllocate(a1);
  v18 = *a3;
  v58 = a5;
  v59 = a6;
  if (a4 >= 2)
  {
    v19 = a4 - 1;
    v20 = a3 + 1;
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v22 > v18)
        v18 = v21;
      --v19;
    }
    while (v19);
  }
  v23 = 0;
  v24 = a2 + 1088;
  do
  {
    v61[v23 - 1] = v23;
    ++v23;
  }
  while (v18 + 1 != v23);
  if (!a4)
    goto LABEL_43;
  v57 = a1;
  v25 = 0;
  v26 = v18 + 1;
  LOBYTE(a1) = __src;
  do
  {
    if ((_DWORD)v26)
    {
      v27 = 0;
      LODWORD(a1) = LOBYTE(a3[v25]);
      while (v61[v27 - 1] != (_DWORD)a1)
      {
        if (v26 == ++v27)
        {
          LOBYTE(a1) = v61[v26 - 1];
          v27 = v26;
          break;
        }
      }
      *(_DWORD *)(v17 + 4 * v25) = v27;
      if (v27)
        memmove(v61, &__src, v27);
    }
    else
    {
      *(_DWORD *)(v17 + 4 * v25) = 0;
    }
    __src = a1;
    ++v25;
  }
  while (v25 != a4);
  v28 = 0;
  v29 = 0;
  a1 = v57;
  v24 = a2 + 1088;
  do
  {
    if (a4 <= v29 + 1)
      v30 = v29 + 1;
    else
      v30 = a4;
    v31 = (_DWORD *)(v17 + 4 * v29);
    while (*(_DWORD *)(v17 + 4 * v29))
    {
      ++v29;
      ++v31;
      if (v30 == v29)
      {
        v35 = 0;
LABEL_39:
        if (v35 > v28)
          v28 = v35;
        goto LABEL_41;
      }
    }
    if (a4 <= v29)
    {
      v34 = 0;
    }
    else
    {
      v32 = 0;
      while (!*v31++)
      {
        if (v29 - a4 == --v32)
        {
          v35 = a4 - v29;
          goto LABEL_39;
        }
      }
      v29 -= v32;
      v34 = -(int)v32;
    }
    if (v34 > v28)
      v28 = v34;
  }
  while (v29 < a4);
LABEL_41:
  if (v28)
    v36 = __clz(v28) ^ 0x1F;
  else
LABEL_43:
    v36 = 0;
  if (v36 >= 6)
    v37 = 6;
  else
    v37 = v36;
  if (!a4)
  {
    bzero(a2, 0x440uLL);
    v38 = 0;
    v46 = 1;
    v47 = (uint64_t)(a2 + 1360);
    goto LABEL_72;
  }
  v38 = 0;
  v39 = 0;
  v40 = 2 << v37;
  do
  {
    v41 = *(_DWORD *)(v17 + 4 * v39);
    if (v41)
    {
      *(_DWORD *)(v17 + 4 * v38) = v41 + v37;
      ++v39;
LABEL_51:
      ++v38;
      continue;
    }
    if (v39 + 1 >= a4)
    {
      v42 = 1;
      ++v39;
      goto LABEL_62;
    }
    v42 = a4 - v39;
    v43 = 1;
    while (!*(_DWORD *)(v17 + 4 * v39 + 4 * v43))
    {
      if (a4 - v39 == ++v43)
        goto LABEL_61;
    }
    v42 = v43;
LABEL_61:
    v39 += v42;
    if (v42)
    {
LABEL_62:
      while (1)
      {
        v44 = v42 - v40;
        if (v42 < v40)
          break;
        *(_DWORD *)(v17 + 4 * v38++) = v37 | (~(-1 << v37) << 9);
        v42 = v44 + 1;
        if (v44 == -1)
          goto LABEL_52;
      }
      v45 = __clz(v42);
      *(_DWORD *)(v17 + 4 * v38) = v45 ^ 0x1F | (((-1 << (v45 ^ 0x1F)) + v42) << 9);
      goto LABEL_51;
    }
LABEL_52:
    ;
  }
  while (v39 < a4);
  bzero(a2, 0x440uLL);
  v46 = v38 == 0;
  v47 = (uint64_t)(a2 + 1360);
  if (v38)
  {
    for (i = 0; i != v38; ++i)
    {
      v49 = *(_DWORD *)(v17 + 4 * i) & 0x1FF;
      ++*(_DWORD *)&a2[4 * v49];
    }
  }
  else
  {
    v46 = 1;
  }
LABEL_72:
  v50 = *a7;
  *(_QWORD *)(a8 + (*a7 >> 3)) = ((unint64_t)(v37 != 0) << (*(_BYTE *)a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
  *a7 = v50 + 1;
  if (v37)
  {
    *(_QWORD *)(a8 + ((v50 + 1) >> 3)) = ((unint64_t)(v37 - 1) << ((v50 + 1) & 7)) | *(unsigned __int8 *)(a8 + ((v50 + 1) >> 3));
    *a7 = v50 + 5;
  }
  BuildAndStoreHuffmanTree((unint64_t)a2, v58 + v37, v58 + v37, v59, v24, v47, a7, a8);
  v51 = *a7;
  if (!v46)
  {
    v52 = (unsigned int *)v17;
    do
    {
      v54 = *v52++;
      v53 = v54;
      v55 = v54 & 0x1FF;
      v56 = v24[v55];
      *(_QWORD *)(a8 + (v51 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v47 + 2 * v55) << (v51 & 7)) | *(unsigned __int8 *)(a8 + (v51 >> 3));
      v51 += v56;
      *a7 = v51;
      if ((int)v55 - 1 < v37)
      {
        *(_QWORD *)(a8 + (v51 >> 3)) = (v53 >> 9 << (v51 & 7)) | *(unsigned __int8 *)(a8 + (v51 >> 3));
        v51 += v55;
        *a7 = v51;
      }
      --v38;
    }
    while (v38);
  }
  *(_QWORD *)(a8 + (v51 >> 3)) = (1 << (v51 & 7)) | *(unsigned __int8 *)(a8 + (v51 >> 3));
  *a7 = v51 + 1;
  return BrotliFree(a1);
}

_QWORD *StoreSymbol(_QWORD *result, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = result[115];
  if (!v4)
  {
    v5 = result[114] + 1;
    result[114] = v5;
    v6 = *(unsigned int *)(result[3] + 4 * v5);
    v7 = *(unsigned __int8 *)(result[2] + v5);
    result[115] = v6;
    result[116] = *result * v7;
    v8 = result[5];
    if (v8 + 1 == v7)
    {
      v9 = 1;
    }
    else if (result[6] == v7)
    {
      v9 = 0;
    }
    else
    {
      v9 = v7 + 2;
    }
    result[5] = v7;
    result[6] = v8;
    v10 = *((unsigned __int8 *)result + v9 + 56);
    v11 = *((unsigned __int16 *)result + v9 + 157);
    v12 = *a3;
    *(_QWORD *)(a4 + (*a3 >> 3)) = (v11 << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
    v13 = v12 + v10;
    *a3 = v13;
    v14 = 14;
    if (v6 > 0x2F0)
      v14 = 20;
    v15 = 7;
    if (v6 <= 0x28)
      v15 = 0;
    if (v6 <= 0xB0)
      v16 = v15;
    else
      v16 = v14;
    v17 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v16 + 4);
    do
    {
      v18 = v16;
      if (v16 == 25)
        break;
      ++v16;
      v19 = *v17;
      v17 += 2;
    }
    while (v6 >= v19);
    v20 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v18);
    v21 = *((unsigned __int8 *)v20 + 2);
    v22 = v6 - *v20;
    v23 = *((unsigned __int8 *)result + v18 + 830);
    *(_QWORD *)(a4 + (v13 >> 3)) = ((unint64_t)*((unsigned __int16 *)result + v18 + 428) << (v13 & 7)) | *(unsigned __int8 *)(a4 + (v13 >> 3));
    v24 = v13 + v23;
    *a3 = v24;
    *(_QWORD *)(a4 + (v24 >> 3)) = (v22 << (v24 & 7)) | *(unsigned __int8 *)(a4 + (v24 >> 3));
    *a3 = v24 + v21;
    v4 = result[115];
  }
  result[115] = v4 - 1;
  v25 = result[116] + a2;
  v26 = *(unsigned __int8 *)(result[117] + v25);
  v27 = *a3;
  *(_QWORD *)(a4 + (*a3 >> 3)) = ((unint64_t)*(unsigned __int16 *)(result[118] + 2 * v25) << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
  *a3 = v27 + v26;
  return result;
}

_QWORD *StoreSymbolWithContext(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v7 = result[115];
  if (!v7)
  {
    v8 = result[114] + 1;
    result[114] = v8;
    v9 = *(unsigned int *)(result[3] + 4 * v8);
    v10 = *(unsigned __int8 *)(result[2] + v8);
    result[115] = v9;
    result[116] = v10 << a7;
    v11 = result[5];
    if (v11 + 1 == v10)
    {
      v12 = 1;
    }
    else if (result[6] == v10)
    {
      v12 = 0;
    }
    else
    {
      v12 = v10 + 2;
    }
    result[5] = v10;
    result[6] = v11;
    v13 = *((unsigned __int8 *)result + v12 + 56);
    v14 = *((unsigned __int16 *)result + v12 + 157);
    v15 = *a5;
    *(_QWORD *)(a6 + (*a5 >> 3)) = (v14 << (*(_BYTE *)a5 & 7)) | *(unsigned __int8 *)(a6 + (*a5 >> 3));
    v16 = v15 + v13;
    *a5 = v16;
    v17 = 14;
    if (v9 > 0x2F0)
      v17 = 20;
    v18 = 7;
    if (v9 <= 0x28)
      v18 = 0;
    if (v9 <= 0xB0)
      v19 = v18;
    else
      v19 = v17;
    v20 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v19 + 4);
    do
    {
      v21 = v19;
      if (v19 == 25)
        break;
      ++v19;
      v22 = *v20;
      v20 += 2;
    }
    while (v9 >= v22);
    v23 = (unsigned __int16 *)((char *)&_kBrotliPrefixCodeRanges + 4 * v21);
    v24 = *((unsigned __int8 *)v23 + 2);
    v25 = v9 - *v23;
    v26 = *((unsigned __int8 *)result + v21 + 830);
    *(_QWORD *)(a6 + (v16 >> 3)) = ((unint64_t)*((unsigned __int16 *)result + v21 + 428) << (v16 & 7)) | *(unsigned __int8 *)(a6 + (v16 >> 3));
    v27 = v16 + v26;
    *a5 = v27;
    *(_QWORD *)(a6 + (v27 >> 3)) = (v25 << (v27 & 7)) | *(unsigned __int8 *)(a6 + (v27 >> 3));
    *a5 = v27 + v24;
    v7 = result[115];
  }
  result[115] = v7 - 1;
  v28 = a2 + *result * *(unsigned int *)(a4 + 4 * (result[116] + a3));
  v29 = *(unsigned __int8 *)(result[117] + v28);
  v30 = *a5;
  *(_QWORD *)(a6 + (*a5 >> 3)) = ((unint64_t)*(unsigned __int16 *)(result[118] + 2 * v28) << (*(_BYTE *)a5 & 7)) | *(unsigned __int8 *)(a6 + (*a5 >> 3));
  *a5 = v30 + v29;
  return result;
}

uint64_t BrotliStoreMetaBlockTrivial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, uint64_t a11)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  unsigned int v20;
  uint64_t v24;
  int v25;

  v25 = a6;
  v17 = BrotliAllocate(a1);
  v24 = *(unsigned int *)(a7 + 64);
  StoreCompressedMetaBlockHeader(a6, a4, a10, a11);
  bzero((void *)v17, 0x400uLL);
  *(_QWORD *)(v17 + 1024) = 0;
  *(_QWORD *)(v17 + 1032) = 0x7FF0000000000000;
  bzero((void *)(v17 + 1040), 0xB00uLL);
  *(_QWORD *)(v17 + 3856) = 0;
  *(_QWORD *)(v17 + 3864) = 0x7FF0000000000000;
  bzero((void *)(v17 + 3872), 0x880uLL);
  *(_QWORD *)(v17 + 6048) = 0;
  *(_QWORD *)(v17 + 6056) = 0x7FF0000000000000;
  BuildHistograms(a2, a3, a5, a8, a9, v17, v17 + 1040, v17 + 3872);
  v18 = *a10;
  *(_QWORD *)(a11 + (*a10 >> 3)) = *(unsigned __int8 *)(a11 + (*a10 >> 3));
  *a10 = v18 + 13;
  BuildAndStoreHuffmanTree(v17, 0x100uLL, 256, v17 + 9364, (_BYTE *)(v17 + 6064), v17 + 6320, a10, a11);
  BuildAndStoreHuffmanTree(v17 + 1040, 0x2C0uLL, 704, v17 + 9364, (_BYTE *)(v17 + 6832), v17 + 7536, a10, a11);
  BuildAndStoreHuffmanTree(v17 + 3872, 0x8CuLL, v24, v17 + 9364, (_BYTE *)(v17 + 8944), v17 + 9084, a10, a11);
  StoreDataWithHuffmanCodes(a2, a3, a5, a8, a9, v17 + 6064, v17 + 6320, v17 + 6832, v17 + 7536, v17 + 8944, v17 + 9084, a10, a11);
  result = BrotliFree(a1);
  if (v25)
  {
    v20 = *(_DWORD *)a10 + 7;
    *a10 = v20 & 0xFFFFFFF8;
    *(_BYTE *)(a11 + (v20 >> 3)) = 0;
  }
  return result;
}

uint64_t BuildHistograms(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  if (a5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a7 + 2816);
    do
    {
      v10 = (unsigned int *)(a4 + 16 * v8);
      v12 = *v10;
      v11 = v10[1];
      v13 = *((unsigned __int16 *)v10 + 6);
      v14 = *((_WORD *)v10 + 7);
      ++*(_DWORD *)(a7 + 4 * v13);
      *(_QWORD *)(a7 + 2816) = ++v9;
      if ((_DWORD)v12)
      {
        v15 = *(_QWORD *)(a6 + 1024) + 1;
        do
        {
          ++*(_DWORD *)(a6 + 4 * *(unsigned __int8 *)(result + (a2 & a3)));
          *(_QWORD *)(a6 + 1024) = v15;
          ++a2;
          ++v15;
          --v12;
        }
        while (v12);
      }
      v16 = v11 & 0x1FFFFFF;
      if ((_DWORD)v16)
      {
        if (v13 >= 0x80)
        {
          ++*(_DWORD *)(a8 + 4 * (v14 & 0x3FF));
          ++*(_QWORD *)(a8 + 2176);
        }
      }
      a2 += v16;
      ++v8;
    }
    while (v8 != a5);
  }
  return result;
}

unint64_t BuildAndStoreHuffmanTree(unint64_t result, size_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v14 = result;
  v46 = *MEMORY[0x1E0C80C00];
  v44 = 0u;
  v45 = 0u;
  if (a2)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      if (*(_DWORD *)(result + 4 * v15))
      {
        if (v16 > 3)
        {
          if (v16 != 4)
            break;
        }
        else
        {
          *((_QWORD *)&v44 + v16) = v15;
        }
        ++v16;
      }
      ++v15;
    }
    while (a2 != v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
  v18 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      ++v17;
      v19 = v18 > 1;
      v18 >>= 1;
    }
    while (v19);
  }
  v20 = v16 - 1;
  if (v16 <= 1)
  {
    v21 = *a7;
    *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
    v21 += 4;
    *a7 = v21;
    v22 = v44;
    *(_QWORD *)(a8 + (v21 >> 3)) = ((_QWORD)v44 << (v21 & 7)) | *(unsigned __int8 *)(a8 + (v21 >> 3));
    *a7 = v21 + v17;
    a5[v22] = 0;
    *(_WORD *)(a6 + 2 * v22) = 0;
    return result;
  }
  bzero(a5, a2);
  BrotliCreateHuffmanTree(v14, a2, 15, a4, (uint64_t)a5);
  result = (unint64_t)BrotliConvertBitDepthsToSymbols(a5, a2, a6);
  if (v16 > 4)
    return BrotliStoreHuffmanTree((uint64_t)a5, a2, a4, a7, a8);
  v23 = 0;
  v24 = *a7;
  *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
  *a7 = v24 + 2;
  *(_QWORD *)(a8 + ((v24 + 2) >> 3)) = (v20 << ((v24 + 2) & 7)) | *(unsigned __int8 *)(a8 + ((v24 + 2) >> 3));
  v25 = v24 + 4;
  *a7 = v25;
  v26 = (char *)&v44 + 8;
  do
  {
    v27 = v23 + 1;
    if (v23 + 1 < v16)
    {
      v28 = *((_QWORD *)&v44 + v23);
      v29 = (uint64_t *)v26;
      v30 = v20;
      do
      {
        v31 = *v29;
        result = a5[v28];
        if (a5[*v29] < result)
        {
          *v29 = v28;
          *((_QWORD *)&v44 + v23) = v31;
          v28 = v31;
        }
        ++v29;
        --v30;
      }
      while (v30);
    }
    --v20;
    v26 += 8;
    ++v23;
  }
  while (v27 != v16);
  v32 = v25 >> 3;
  if (v16 == 3)
  {
    v35 = *((_QWORD *)&v44 + 1);
    *(_QWORD *)(a8 + v32) = ((_QWORD)v44 << (v25 & 7)) | *(unsigned __int8 *)(a8 + v32);
    v36 = v25 + v17;
    *a7 = v36;
    *(_QWORD *)(a8 + (v36 >> 3)) = (v35 << (v36 & 7)) | *(unsigned __int8 *)(a8 + (v36 >> 3));
    v34 = v36 + v17;
    *a7 = v34;
    *(_QWORD *)(a8 + (v34 >> 3)) = ((_QWORD)v45 << (v34 & 7)) | *(unsigned __int8 *)(a8 + (v34 >> 3));
  }
  else
  {
    if (v16 != 2)
    {
      v38 = v44;
      *(_QWORD *)(a8 + v32) = ((_QWORD)v44 << (v25 & 7)) | *(unsigned __int8 *)(a8 + v32);
      v39 = v25 + v17;
      *a7 = v39;
      *(_QWORD *)(a8 + (v39 >> 3)) = (*((_QWORD *)&v38 + 1) << (v39 & 7)) | *(unsigned __int8 *)(a8 + (v39 >> 3));
      v40 = v39 + v17;
      *a7 = v40;
      v41 = *((_QWORD *)&v45 + 1);
      *(_QWORD *)(a8 + (v40 >> 3)) = ((_QWORD)v45 << (v40 & 7)) | *(unsigned __int8 *)(a8 + (v40 >> 3));
      v42 = v40 + v17;
      *a7 = v42;
      *(_QWORD *)(a8 + (v42 >> 3)) = (v41 << (v42 & 7)) | *(unsigned __int8 *)(a8 + (v42 >> 3));
      v43 = v42 + v17;
      *a7 = v43;
      *(_QWORD *)(a8 + (v43 >> 3)) = ((unint64_t)(a5[v38] == 1) << (v43 & 7)) | *(unsigned __int8 *)(a8 + (v43 >> 3));
      v37 = v43 + 1;
      goto LABEL_30;
    }
    v33 = *((_QWORD *)&v44 + 1);
    *(_QWORD *)(a8 + v32) = ((_QWORD)v44 << (v25 & 7)) | *(unsigned __int8 *)(a8 + v32);
    v34 = v25 + v17;
    *a7 = v34;
    *(_QWORD *)(a8 + (v34 >> 3)) = (v33 << (v34 & 7)) | *(unsigned __int8 *)(a8 + (v34 >> 3));
  }
  v37 = v34 + v17;
LABEL_30:
  *a7 = v37;
  return result;
}

uint64_t StoreDataWithHuffmanCodes(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a5)
  {
    v13 = 0;
    v14 = *a12;
    do
    {
      v15 = (unsigned int *)(a4 + 16 * v13);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[2];
      v19 = *((unsigned __int16 *)v15 + 6);
      v20 = *((unsigned __int16 *)v15 + 7);
      v21 = *(unsigned __int8 *)(a8 + v19);
      *(_QWORD *)(a13 + (v14 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a9 + 2 * v19) << (v14 & 7)) | *(unsigned __int8 *)(a13 + (v14 >> 3));
      v22 = v14 + v21;
      *a12 = v22;
      LOWORD(v23) = v16;
      if (v16 >= 6)
      {
        if (v16 > 0x81)
        {
          if (v16 > 0x841)
          {
            if (v16 >> 1 >= 0xC21)
            {
              if (v16 < 0x5842)
                LOWORD(v23) = 22;
              else
                LOWORD(v23) = 23;
            }
            else
            {
              LOWORD(v23) = 21;
            }
          }
          else
          {
            LODWORD(v23) = (__clz(v16 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v24 = (__clz(v16 - 2) ^ 0x1F) - 1;
          v23 = 2 * v24 + ((unint64_t)(v16 - 2) >> v24) + 2;
        }
      }
      v25 = HIBYTE(v17) & 0x80 | (v17 >> 25);
      v26 = v17 & 0x1FFFFFF;
      v27 = (v26 + (char)v25);
      if (v27 > 9)
      {
        if (v27 > 0x85)
        {
          v30 = (__clz(v27 - 70) ^ 0x1F) + 12;
          if (v27 <= 0x845)
            LOWORD(v28) = v30;
          else
            LOWORD(v28) = 23;
        }
        else
        {
          v29 = (__clz(v27 - 6) ^ 0x1F) - 1;
          v28 = 2 * v29 + ((unint64_t)(v27 - 6) >> v29) + 4;
        }
      }
      else
      {
        LOWORD(v28) = v26 + (char)v25 - 2;
      }
      v31 = 4 * (unsigned __int16)v23;
      v32 = *(_DWORD *)((char *)&kBrotliInsExtra + v31);
      v33 = 4 * (unsigned __int16)v28;
      v34 = ((unint64_t)(v27 - *(_DWORD *)((char *)&kBrotliCopyBase + v33)) << v32) | (v16 - *(_DWORD *)((char *)&kBrotliInsBase + v31));
      v35 = (*(_DWORD *)((char *)&kBrotliCopyExtra + v33) + v32);
      *(_QWORD *)(a13 + (v22 >> 3)) = (v34 << (v22 & 7)) | *(unsigned __int8 *)(a13 + (v22 >> 3));
      v14 = v22 + v35;
      *a12 = v14;
      if ((_DWORD)v16)
      {
        do
        {
          v36 = *(unsigned __int8 *)(result + (a2 & a3));
          v37 = *(unsigned __int8 *)(a6 + v36);
          *(_QWORD *)(a13 + (v14 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a7 + 2 * v36) << (v14 & 7)) | *(unsigned __int8 *)(a13 + (v14 >> 3));
          v14 += v37;
          *a12 = v14;
          ++a2;
          --v16;
        }
        while (v16);
      }
      if ((_DWORD)v26)
      {
        if (v19 >= 0x80)
        {
          v38 = *(unsigned __int8 *)(a10 + (v20 & 0x3FF));
          *(_QWORD *)(a13 + (v14 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a11 + 2 * (v20 & 0x3FF)) << (v14 & 7)) | *(unsigned __int8 *)(a13 + (v14 >> 3));
          *a12 = v14 + v38;
          *(_QWORD *)(a13 + ((v14 + v38) >> 3)) = (v18 << ((v14 + v38) & 7)) | *(unsigned __int8 *)(a13
                                                                                                  + ((v14 + v38) >> 3));
          v14 += v38 + (v20 >> 10);
          *a12 = v14;
        }
      }
      a2 += v26;
      ++v13;
    }
    while (v13 != a5);
  }
  return result;
}

uint64_t BrotliStoreMetaBlockFast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t *a10, uint64_t a11)
{
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  unsigned int v28;
  _DWORD v31[256];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v17 = BrotliAllocate(a1);
  v18 = *(_DWORD *)(a7 + 64);
  StoreCompressedMetaBlockHeader(a6, a4, a10, a11);
  v19 = *a10;
  *(_QWORD *)(a11 + (*a10 >> 3)) = *(unsigned __int8 *)(a11 + (*a10 >> 3));
  *a10 = v19 + 13;
  if (a9 > 0x80)
  {
    bzero((void *)v17, 0x400uLL);
    *(_QWORD *)(v17 + 1024) = 0;
    *(_QWORD *)(v17 + 1032) = 0x7FF0000000000000;
    bzero((void *)(v17 + 1040), 0xB00uLL);
    *(_QWORD *)(v17 + 3856) = 0;
    *(_QWORD *)(v17 + 3864) = 0x7FF0000000000000;
    bzero((void *)(v17 + 3872), 0x880uLL);
    *(_QWORD *)(v17 + 6048) = 0;
    *(_QWORD *)(v17 + 6056) = 0x7FF0000000000000;
    BuildHistograms(a2, a3, a5, a8, a9, v17, v17 + 1040, v17 + 3872);
    BrotliBuildAndStoreHuffmanTreeFast(v17 + 9364, v17, *(_QWORD *)(v17 + 1024), 8, (_BYTE *)(v17 + 6064), v17 + 6320, a10, a11);
    BrotliBuildAndStoreHuffmanTreeFast(v17 + 9364, v17 + 1040, *(_QWORD *)(v17 + 3856), 10, (_BYTE *)(v17 + 6832), v17 + 7536, a10, a11);
    BrotliBuildAndStoreHuffmanTreeFast(v17 + 9364, v17 + 3872, *(_QWORD *)(v17 + 6048), (__clz(v18 - 1) ^ 0x1F) + 1, (_BYTE *)(v17 + 8944), v17 + 9084, a10, a11);
    StoreDataWithHuffmanCodes(a2, a3, a5, a8, a9, v17 + 6064, v17 + 6320, v17 + 6832, v17 + 7536, v17 + 8944, v17 + 9084, a10, a11);
  }
  else
  {
    bzero(v31, 0x400uLL);
    if (a9)
    {
      v20 = 0;
      v21 = 0;
      v22 = a3;
      do
      {
        v23 = (unsigned int *)(a8 + 16 * v20);
        v24 = *v23;
        if ((_DWORD)v24)
        {
          v25 = *v23;
          do
          {
            ++v31[*(unsigned __int8 *)(a2 + (v22++ & a5))];
            --v25;
          }
          while (v25);
        }
        v21 += v24;
        v22 += v23[1] & 0x1FFFFFF;
        ++v20;
      }
      while (v20 != a9);
    }
    else
    {
      v21 = 0;
    }
    BrotliBuildAndStoreHuffmanTreeFast(v17 + 9364, (uint64_t)v31, v21, 8, (_BYTE *)(v17 + 6064), v17 + 6320, a10, a11);
    v26 = *a10;
    *(_QWORD *)(a11 + (*a10 >> 3)) = (0x92624416307003 << (*a10 & 7)) | *(unsigned __int8 *)(a11 + (*a10 >> 3));
    *a10 = v26 + 56;
    *(_QWORD *)(a11 + ((v26 + 56) >> 3)) = *(unsigned __int8 *)(a11 + ((v26 + 56) >> 3));
    *a10 = v26 + 59;
    *(_QWORD *)(a11 + ((v26 + 59) >> 3)) = (57269251 << ((v26 + 59) & 7)) | *(unsigned __int8 *)(a11
                                                                                                 + ((v26 + 59) >> 3));
    *a10 = v26 + 87;
    StoreDataWithHuffmanCodes(a2, a3, a5, a8, a9, v17 + 6064, v17 + 6320, (uint64_t)&kStaticCommandCodeDepth, (uint64_t)&kStaticCommandCodeBits, (uint64_t)&kStaticDistanceCodeDepth, (uint64_t)&kStaticDistanceCodeBits, a10, a11);
  }
  result = BrotliFree(a1);
  if ((_DWORD)a6)
  {
    v28 = *(_DWORD *)a10 + 7;
    *a10 = v28 & 0xFFFFFFF8;
    *(_BYTE *)(a11 + (v28 >> 3)) = 0;
  }
  return result;
}

void *BrotliStoreUncompressedMetaBlock(int a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, unint64_t *a6, uint64_t a7)
{
  size_t v9;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *result;
  size_t v25;
  unsigned int v26;

  v9 = a5;
  v12 = a4 & a3;
  v13 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  if (a5 == 1 || (v14 = __clz(a5 - 1) ^ 0x1F, v14 <= 0xE))
    v15 = 4;
  else
    v15 = (v14 + 4) >> 2;
  *(_QWORD *)(a7 + ((v13 + 1) >> 3)) = ((v15 - 4) << ((v13 + 1) & 7)) | *(unsigned __int8 *)(a7 + ((v13 + 1) >> 3));
  v16 = v13 + 3;
  *(_QWORD *)(a7 + (v16 >> 3)) = ((a5 - 1) << (v16 & 7)) | *(unsigned __int8 *)(a7 + (v16 >> 3));
  *a6 = v16;
  v17 = v16 + 4 * v15;
  *(_QWORD *)(a7 + (v17 >> 3)) = (1 << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  v18 = v17 + 8;
  v19 = v18 & 0xFFFFFFF8;
  v20 = (_BYTE *)(a7 + (v19 >> 3));
  *v20 = 0;
  v21 = a4 + 1;
  if (v12 + a5 <= a4 + 1)
  {
    v23 = v18 >> 3;
  }
  else
  {
    v22 = v21 - v12;
    memcpy(v20, (const void *)(a2 + v12), v21 - v12);
    v12 = 0;
    v19 += 8 * v22;
    v9 -= v22;
    v23 = v19 >> 3;
  }
  result = memcpy((void *)(a7 + v23), (const void *)(a2 + v12), v9);
  v25 = v19 + 8 * v9;
  *a6 = v25;
  *(_BYTE *)(a7 + (v25 >> 3)) = 0;
  if (a1)
  {
    *(_QWORD *)(a7 + (v25 >> 3)) = 1 << (v19 & 7);
    *(_QWORD *)(a7 + ((v25 + 1) >> 3)) = (1 << ((v25 + 1) & 7)) | *(unsigned __int8 *)(a7 + ((v25 + 1) >> 3));
    v26 = v25 + 9;
    *a6 = v26 & 0xFFFFFFF8;
    *(_BYTE *)(a7 + (v26 >> 3)) = 0;
  }
  return result;
}

uint64_t StoreVarLenUint8(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (result)
  {
    v3 = __clz(result) ^ 0x1F;
    v4 = *a2;
    *(_QWORD *)(a3 + (*a2 >> 3)) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(a3 + (*a2 >> 3));
    *a2 = v4 + 1;
    *(_QWORD *)(a3 + ((v4 + 1) >> 3)) = (v3 << ((v4 + 1) & 7)) | *(unsigned __int8 *)(a3 + ((v4 + 1) >> 3));
    v4 += 4;
    *a2 = v4;
    *(_QWORD *)(a3 + (v4 >> 3)) = (((-1 << v3) + result) << (v4 & 7)) | *(unsigned __int8 *)(a3 + (v4 >> 3));
    v5 = v4 + v3;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a3 + (*a2 >> 3)) = *(unsigned __int8 *)(a3 + (*a2 >> 3));
    v5 = v6 + 1;
  }
  *a2 = v5;
  return result;
}

uint64_t BrotliDecoderStateInit(uint64_t a1, void *(*a2)(int a1, size_t size), void (*a3)(int a1, void *a2), uint64_t a4)
{
  void *(*v8)(int, size_t);
  void (*v9)(int, void *);
  uint64_t v10;
  int v11;
  uint64_t result;

  v8 = BrotliDefaultAllocFunc;
  v9 = BrotliDefaultFreeFunc;
  if (a2)
  {
    v8 = a2;
    v9 = a3;
  }
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (a2)
    v10 = a4;
  else
    v10 = 0;
  *(_QWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 128) = 0;
  BrotliInitBitReader((_QWORD *)(a1 + 8));
  v11 = *(_DWORD *)(a1 + 772);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_DWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_DWORD *)(a1 + 772) = v11 & 0xFFFFF000 | 0x10;
  *(_OWORD *)(a1 + 112) = xmmword_19D050730;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 440) = 63;
  *(_QWORD *)(a1 + 808) = 0;
  result = (uint64_t)BrotliSharedDictionaryCreateInstance(a2, a3, a4);
  *(_QWORD *)(a1 + 800) = result;
  if (result)
  {
    *(_QWORD *)(a1 + 736) = 0;
    *(_OWORD *)(a1 + 720) = 0u;
    return 1;
  }
  return result;
}

double BrotliDecoderStateMetablockBegin(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 280) = 0x1000000;
  *(int64x2_t *)(a1 + 288) = vdupq_n_s64(0x1000000uLL);
  *(_QWORD *)(a1 + 312) = 1;
  *(int64x2_t *)(a1 + 320) = vdupq_n_s64(1uLL);
  *(_OWORD *)(a1 + 336) = xmmword_19D04BBA0;
  *(_OWORD *)(a1 + 352) = xmmword_19D04BBA0;
  *(_OWORD *)(a1 + 368) = xmmword_19D04BBA0;
  *(_BYTE *)(a1 + 716) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  return result;
}

uint64_t BrotliDecoderStateCleanupAfterMetablock(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 792));
  *(_QWORD *)(a1 + 792) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 784));
  *(_QWORD *)(a1 + 784) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 408));
  *(_QWORD *)(a1 + 408) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 184));
  *(_QWORD *)(a1 + 184) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 208));
  *(_QWORD *)(a1 + 208) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 232));
  *(_QWORD *)(a1 + 232) = 0;
  return result;
}

uint64_t BrotliDecoderStateCleanup(uint64_t a1)
{
  uint64_t result;

  BrotliDecoderStateCleanupAfterMetablock(a1);
  (*(void (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 808));
  *(_QWORD *)(a1 + 808) = 0;
  BrotliSharedDictionaryDestroyInstance(*(_QWORD **)(a1 + 800));
  *(_QWORD *)(a1 + 800) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 136));
  *(_QWORD *)(a1 + 136) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 256));
  *(_QWORD *)(a1 + 256) = 0;
  return result;
}

BOOL BrotliDecoderHuffmanTreeGroupInit(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  __int16 v6;
  uint64_t v9;

  v6 = a4;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 64), (4 * a4 + 1512) * a5);
  *(_WORD *)(a2 + 16) = a3;
  *(_WORD *)(a2 + 18) = v6;
  *(_WORD *)(a2 + 20) = a5;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v9 + 8 * a5;
  return v9 != 0;
}

uint64_t sub_19CDA5AC8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_19CDA5AF4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24) >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_19CDA5B28()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return swift_deallocObject();
}

uint64_t JetEngineBootstrap.withBagProfile(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10[5];

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v10[4] = (uint64_t)&type metadata for Bag.Profile;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v6;
  v7[5] = v5;
  v10[0] = (uint64_t)&type metadata for Bag.Profile;
  v10[1] = (uint64_t)v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = sub_19CD0CDB8(v10);
  swift_release();
  *a2 = v8;
  return sub_19CD4C098((uint64_t)v10);
}

uint64_t JetEngineBootstrap.withProcess(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v7[4];
  uint64_t v8;

  v8 = sub_19CCE5204(0, &qword_1ECEB24A8);
  v7[0] = v8;
  v7[1] = (uint64_t)a1;
  v4 = a1;
  swift_retain();
  v5 = sub_19CD0CDB8(v7);
  swift_release();
  *a2 = v5;
  return sub_19CD4C098((uint64_t)v7);
}

uint64_t JetEngineBootstrap.withBagSpy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  uint64_t v10[4];
  uint64_t v11;

  if (a1)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_19CDB7B30;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE43B580);
  v10[1] = (uint64_t)v7;
  v10[2] = v6;
  v10[0] = v11;
  sub_19CCEA360(a1);
  swift_retain();
  v8 = sub_19CD0CDB8(v10);
  swift_release();
  *a3 = v8;
  return sub_19CD4C098((uint64_t)v10);
}

uint64_t JetEngineBootstrap.withProtocolHandler(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v10[4] = (uint64_t)&type metadata for JetEngineBootstrap.URLProtocolHandler;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  v10[0] = (uint64_t)&type metadata for JetEngineBootstrap.URLProtocolHandler;
  v10[1] = (uint64_t)v7;
  sub_19CDB390C(v3, v4);
  swift_retain();
  v8 = sub_19CD0CDB8(v10);
  swift_release();
  *a2 = v8;
  return sub_19CD4C098((uint64_t)v10);
}

uint64_t JetEngineBootstrap.withAccountProvider(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB2580);
  v7 = swift_allocObject();
  sub_19CCD5B84(a1, v7 + 16);
  v6 = v8;
  swift_retain();
  v4 = sub_19CD0CDB8(&v6);
  swift_release();
  *a2 = v4;
  return sub_19CD4C098((uint64_t)&v6);
}

uint64_t sub_19CDA5E80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (__cdecl *v5)();

  v2[12] = a1;
  v2[13] = a2;
  v5 = (uint64_t (__cdecl *)())((char *)&dword_1EE43F220 + dword_1EE43F220);
  v3 = (_QWORD *)swift_task_alloc();
  v2[14] = v3;
  *v3 = v2;
  v3[1] = sub_19CCBF748;
  return v5();
}

uint64_t sub_19CDA5EE0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  if (*(_QWORD *)(v0 + 120))
  {
    v3 = (uint64_t (*)(uint64_t))((char *)&dword_1EE440AD8 + dword_1EE440AD8);
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v1;
    *v1 = v0;
    v1[1] = sub_19CD6004C;
    return v3(v0 + 88);
  }
  else
  {
    sub_19CDB3940();
    return sub_19CFE0340();
  }
}

uint64_t sub_19CDA5FA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v3 = *(void **)(v2 + 120);
    swift_unknownObjectRelease();

  }
  return swift_task_switch();
}

uint64_t sub_19CDA601C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    if (v1 == 1)
    {
      v1 = 0;
      v2 = 0;
      v3 = 0;
      v4 = 2;
      v5 = 1;
    }
    else
    {
      v2 = *(_QWORD *)(v0 + 72);
      v3 = *(_QWORD *)(v0 + 80);
      v5 = *(_QWORD *)(v0 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_19CD60178(v5, v1);
      v4 = 0;
    }
  }
  else
  {
    v4 = 2;
    v5 = 0;
    v2 = 0;
    v3 = 0;
  }
  v6 = *(_QWORD *)(v0 + 120);
  sub_19CCE5204(0, &qword_1ECEB1F10);
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v3;
  *(_BYTE *)(v0 + 48) = v4;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v7;
  *v7 = v0;
  v7[1] = sub_19CDA612C;
  return AMSURLSession.init(process:bag:urlProtocol:)(v6, *(_QWORD *)(v0 + 144), v0 + 16);
}

uint64_t sub_19CDA612C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 184) = a1;
  return swift_task_switch();
}

uint64_t sub_19CDA61A0()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 96) = *(_QWORD *)(v0 + 184);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19CDA61B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19CDA61C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19CDA61D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t JetEngineBootstrap.bagProfile.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_19CCCF28C(a1);
}

uint64_t sub_19CDA6200@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  if (qword_1ECEB1330 != -1)
    swift_once();
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  swift_task_localValuePush();
  v2 = swift_bridgeObjectRetain();
  sub_19CDA8810(v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  result = swift_task_localValuePop();
  v4 = v6;
  if (v6 == 2)
  {
    sub_19CDB4298(0xD000000000000033, 0x800000019D06DA00, sub_19CDA7944);
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 16) = v7;
  }
  return result;
}

uint64_t JetEngineBootstrap.process.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (qword_1ECEB1330 != -1)
    swift_once();
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  swift_task_localValuePush();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_19CD07D54(v0);
  swift_bridgeObjectRelease();
  swift_task_localValuePop();
  if (v1)
    return v1;
  sub_19CDB3940();
  result = sub_19CFE0340();
  __break(1u);
  return result;
}

uint64_t (*JetEngineBootstrap.bagSpy.getter())(uint64_t a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*result)(uint64_t);

  if (qword_1ECEB1330 != -1)
    swift_once();
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  swift_task_localValuePush();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_19CCC2990(v0);
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_task_localValuePop();
  if (!v1)
    return (uint64_t (*)(uint64_t))v1;
  if (v1 != 1)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v1;
    *(_QWORD *)(v4 + 24) = v3;
    return sub_19CDB3D70;
  }
  sub_19CDB4298(0xD00000000000003FLL, 0x800000019D06DA40, sub_19CDA6E54);
  result = (uint64_t (*)(uint64_t))sub_19CFE0340();
  __break(1u);
  return result;
}

uint64_t JetEngineBootstrap.protocolHandler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_19CDA6200(a1);
}

uint64_t JetEngineBootstrap.accounts.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1ECEB1330 != -1)
    swift_once();
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  swift_task_localValuePush();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_19CDA8ACC(v0);
  swift_bridgeObjectRelease();
  swift_task_localValuePop();
  if (!v1)
  {
    if (qword_1ECEB0FA8 != -1)
      swift_once();
    v1 = qword_1ECEB0F40;
    swift_retain();
  }
  return v1;
}

uint64_t JetEngineBootstrap.withAccounts(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t inited;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB2F20);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19D050760;
  v5 = type metadata accessor for Unstable.Accounts();
  *(_QWORD *)(inited + 64) = v5;
  *(_QWORD *)(inited + 40) = a1;
  *(_QWORD *)(inited + 32) = v5;
  v6 = *(void **)(a1 + 16);
  v7 = sub_19CCE5204(0, (unint64_t *)&qword_1ECEB2F80);
  *(_QWORD *)(inited + 104) = v7;
  *(_QWORD *)(inited + 72) = v7;
  *(_QWORD *)(inited + 80) = v6;
  v14 = v5;
  v15 = &protocol witness table for Unstable.Accounts;
  *(_QWORD *)&v13 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB2580);
  *(_QWORD *)(inited + 112) = v8;
  *(_QWORD *)(inited + 144) = v8;
  v9 = swift_allocObject();
  *(_QWORD *)(inited + 120) = v9;
  sub_19CCD14C4(&v13, v9 + 16);
  swift_retain_n();
  swift_retain();
  v10 = v6;
  v11 = sub_19CD0CCF0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  result = swift_release();
  *a2 = v11;
  return result;
}

uint64_t sub_19CDA6790(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    sub_19CE4A2BC(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_19CE4A2BC(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_19CDA6850(void (*a1)(_QWORD **__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14[4];

  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v8 = v14[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_19CCDB5D8(0, v14[0][2] + 1, 1, v14[0]);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = sub_19CCDB5D8((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v11 = &v8[2 * v10];
  v11[4] = a3;
  v11[5] = a4;
  v14[3] = v8;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DCF0);
  v12 = swift_task_localValuePush();
  a1(v14, v12);
  swift_task_localValuePop();
  if (v4)
    return (_QWORD *)swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14[0];
}

uint64_t sub_19CDA69AC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;

  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v7 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_19CCDB5D8(0, v13[2] + 1, 1, v13);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = sub_19CCDB5D8((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v7[2] = v9 + 1;
  v10 = &v7[2 * v9];
  v10[4] = a3;
  v10[5] = a4;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DCF0);
  v11 = swift_task_localValuePush();
  a1(v11);
  swift_task_localValuePop();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_19CDA6AF0(void (*a1)(_QWORD **__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;

  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v8 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_19CCDB5D8(0, v14[2] + 1, 1, v14);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = sub_19CCDB5D8((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v11 = &v8[2 * v10];
  v11[4] = a3;
  v11[5] = a4;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DCF0);
  v12 = swift_task_localValuePush();
  a1(&v14, v12);
  swift_task_localValuePop();
  if (v4)
    return (_QWORD *)swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_19CDA6C4C(void (*a1)(_QWORD **__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14[5];

  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v8 = v14[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_19CCDB5D8(0, v14[0][2] + 1, 1, v14[0]);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = sub_19CCDB5D8((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v11 = &v8[2 * v10];
  v11[4] = a3;
  v11[5] = a4;
  v14[4] = v8;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DCF0);
  v12 = swift_task_localValuePush();
  a1(v14, v12);
  swift_task_localValuePop();
  if (v4)
    return (_QWORD *)swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14[0];
}

uint64_t sub_19CDA6DAC()
{
  return sub_19CD49AD0((uint64_t *)&unk_1ECEB2590);
}

uint64_t sub_19CDA6DB8()
{
  return sub_19CD49AD0(&qword_1EE43DFD8);
}

uint64_t sub_19CDA6DC4()
{
  return sub_19CD49AD0(&qword_1EE43DFA8);
}

uint64_t sub_19CDA6DD0()
{
  return sub_19CD49AD0(&qword_1EE4370E8);
}

uint64_t sub_19CDA6DDC()
{
  return sub_19CD49AD0(qword_1EE43C1D0);
}

uint64_t sub_19CDA6DE8()
{
  return sub_19CD49AD0((uint64_t *)&unk_1EE4373C8);
}

uint64_t sub_19CDA6DF4()
{
  return sub_19CD49AD0(&qword_1EE43DDC8);
}

uint64_t sub_19CDA6E00()
{
  return sub_19CD49AD0(&qword_1EE43DE70);
}

uint64_t sub_19CDA6E0C()
{
  return sub_19CD49AD0((uint64_t *)&unk_1EE43DE88);
}

uint64_t sub_19CDA6E18()
{
  return sub_19CD49AD0((uint64_t *)&unk_1EE43DE40);
}

uint64_t sub_19CDA6E24()
{
  return sub_19CD49AD0(&qword_1EE43DE60);
}

uint64_t sub_19CDA6E30()
{
  return sub_19CD49AD0(&qword_1EE43DE10);
}

uint64_t sub_19CDA6E3C()
{
  return sub_19CD49AD0((uint64_t *)&unk_1EE43DE30);
}

uint64_t sub_19CDA6E48()
{
  return sub_19CD49AD0(&qword_1EE43DE20);
}

uint64_t sub_19CDA6E54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v21 = result + 112;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = v2;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v25[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    sub_19CD436B0(v11 + 32 * v10, (uint64_t)v25 + 8);
LABEL_13:
    sub_19CCC290C((uint64_t)v25, (uint64_t)&v27, &qword_1ECEB04E0);
    v15 = v27;
    if (!v27)
    {
      swift_release();
      return (uint64_t)v23;
    }
    sub_19CD433C0(&v28, v25);
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE43B580);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
      v20 = v23[2];
      v19 = v23[3];
      if (v20 >= v19 >> 1)
        v23 = sub_19CED5714((_QWORD *)(v19 > 1), v20 + 1, 1, v23);
      v23[2] = v20 + 1;
      v23[v20 + 4] = v15;
      sub_19CCE9F48(v24);
LABEL_31:
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      v2 = v22;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFB0);
      if (swift_dynamicCast()
        || (__swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFB8), swift_dynamicCast()))
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
        v18 = v23[2];
        v17 = v23[3];
        if (v18 >= v17 >> 1)
          v23 = sub_19CED5714((_QWORD *)(v17 > 1), v18 + 1, 1, v23);
        v23[2] = v18 + 1;
        v23[v18 + 4] = v15;
        goto LABEL_31;
      }
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    }
  }
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 >= v6)
    {
      v14 = v8;
LABEL_12:
      v5 = 0;
      v26 = 0;
      v8 = v14;
      memset(v25, 0, sizeof(v25));
      goto LABEL_13;
    }
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (v13)
      goto LABEL_10;
    v16 = v8 + 2;
    v14 = v8 + 1;
    if (v8 + 2 >= v6)
      goto LABEL_12;
    v13 = *(_QWORD *)(v2 + 8 * v16);
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 3 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * (v8 + 3));
      if (v13)
      {
        v12 = v8 + 3;
        goto LABEL_10;
      }
      v16 = v8 + 4;
      v14 = v8 + 3;
      if (v8 + 4 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * v16);
      if (!v13)
      {
        v12 = v8 + 5;
        v14 = v8 + 4;
        if (v8 + 5 >= v6)
          goto LABEL_12;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          while (v6 - 6 != v8)
          {
            v13 = *(_QWORD *)(v21 + 8 * v8++);
            if (v13)
            {
              v12 = v8 + 5;
              goto LABEL_10;
            }
          }
          v14 = v6 - 1;
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    v12 = v16;
LABEL_10:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v8 = v12;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CDA71F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v21 = result + 112;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = v2;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v25[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    sub_19CD436B0(v11 + 32 * v10, (uint64_t)v25 + 8);
LABEL_13:
    sub_19CCC290C((uint64_t)v25, (uint64_t)&v27, &qword_1ECEB04E0);
    v15 = v27;
    if (!v27)
    {
      swift_release();
      return (uint64_t)v23;
    }
    sub_19CD433C0(&v28, v25);
    sub_19CCE5204(0, &qword_1ECEB24A8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
      v20 = v23[2];
      v19 = v23[3];
      if (v20 >= v19 >> 1)
        v23 = sub_19CED5714((_QWORD *)(v19 > 1), v20 + 1, 1, v23);
      v23[2] = v20 + 1;
      v23[v20 + 4] = v15;

LABEL_31:
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      v2 = v22;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFC8);
      if (swift_dynamicCast()
        || (__swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFD0), swift_dynamicCast()))
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
        v18 = v23[2];
        v17 = v23[3];
        if (v18 >= v17 >> 1)
          v23 = sub_19CED5714((_QWORD *)(v17 > 1), v18 + 1, 1, v23);
        v23[2] = v18 + 1;
        v23[v18 + 4] = v15;
        goto LABEL_31;
      }
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    }
  }
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 >= v6)
    {
      v14 = v8;
LABEL_12:
      v5 = 0;
      v26 = 0;
      v8 = v14;
      memset(v25, 0, sizeof(v25));
      goto LABEL_13;
    }
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (v13)
      goto LABEL_10;
    v16 = v8 + 2;
    v14 = v8 + 1;
    if (v8 + 2 >= v6)
      goto LABEL_12;
    v13 = *(_QWORD *)(v2 + 8 * v16);
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 3 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * (v8 + 3));
      if (v13)
      {
        v12 = v8 + 3;
        goto LABEL_10;
      }
      v16 = v8 + 4;
      v14 = v8 + 3;
      if (v8 + 4 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * v16);
      if (!v13)
      {
        v12 = v8 + 5;
        v14 = v8 + 4;
        if (v8 + 5 >= v6)
          goto LABEL_12;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          while (v6 - 6 != v8)
          {
            v13 = *(_QWORD *)(v21 + 8 * v8++);
            if (v13)
            {
              v12 = v8 + 5;
              goto LABEL_10;
            }
          }
          v14 = v6 - 1;
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    v12 = v16;
LABEL_10:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v8 = v12;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CDA75A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v21 = result + 112;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = v2;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v24[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    sub_19CD436B0(v11 + 32 * v10, (uint64_t)v24 + 8);
LABEL_13:
    sub_19CCC290C((uint64_t)v24, (uint64_t)&v26, &qword_1ECEB04E0);
    v15 = v26;
    if (!v26)
    {
      swift_release();
      return (uint64_t)v23;
    }
    sub_19CD433C0(&v27, v24);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
      v20 = v23[2];
      v19 = v23[3];
      if (v20 >= v19 >> 1)
        v23 = sub_19CED5714((_QWORD *)(v19 > 1), v20 + 1, 1, v23);
      v23[2] = v20 + 1;
      v23[v20 + 4] = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_31:
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      v2 = v22;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFE0);
      if (swift_dynamicCast()
        || (__swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFE8), swift_dynamicCast()))
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
        v18 = v23[2];
        v17 = v23[3];
        if (v18 >= v17 >> 1)
          v23 = sub_19CED5714((_QWORD *)(v17 > 1), v18 + 1, 1, v23);
        v23[2] = v18 + 1;
        v23[v18 + 4] = v15;
        goto LABEL_31;
      }
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    }
  }
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 >= v6)
    {
      v14 = v8;
LABEL_12:
      v5 = 0;
      v25 = 0;
      v8 = v14;
      memset(v24, 0, sizeof(v24));
      goto LABEL_13;
    }
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (v13)
      goto LABEL_10;
    v16 = v8 + 2;
    v14 = v8 + 1;
    if (v8 + 2 >= v6)
      goto LABEL_12;
    v13 = *(_QWORD *)(v2 + 8 * v16);
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 3 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * (v8 + 3));
      if (v13)
      {
        v12 = v8 + 3;
        goto LABEL_10;
      }
      v16 = v8 + 4;
      v14 = v8 + 3;
      if (v8 + 4 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * v16);
      if (!v13)
      {
        v12 = v8 + 5;
        v14 = v8 + 4;
        if (v8 + 5 >= v6)
          goto LABEL_12;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          while (v6 - 6 != v8)
          {
            v13 = *(_QWORD *)(v21 + 8 * v8++);
            if (v13)
            {
              v12 = v8 + 5;
              goto LABEL_10;
            }
          }
          v14 = v6 - 1;
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    v12 = v16;
LABEL_10:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v8 = v12;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CDA7944(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v21 = result + 112;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = v2;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v26[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    sub_19CD436B0(v11 + 32 * v10, (uint64_t)v26 + 8);
LABEL_13:
    sub_19CCC290C((uint64_t)v26, (uint64_t)&v28, &qword_1ECEB04E0);
    v15 = v28;
    if (!v28)
    {
      swift_release();
      return (uint64_t)v23;
    }
    sub_19CD433C0(&v29, v26);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
      v20 = v23[2];
      v19 = v23[3];
      if (v20 >= v19 >> 1)
        v23 = sub_19CED5714((_QWORD *)(v19 > 1), v20 + 1, 1, v23);
      v23[2] = v20 + 1;
      v23[v20 + 4] = v15;
      sub_19CD60178(v24, v25);
LABEL_31:
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
      v2 = v22;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DF98);
      if (swift_dynamicCast()
        || (__swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFA0), swift_dynamicCast()))
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
        v18 = v23[2];
        v17 = v23[3];
        if (v18 >= v17 >> 1)
          v23 = sub_19CED5714((_QWORD *)(v17 > 1), v18 + 1, 1, v23);
        v23[2] = v18 + 1;
        v23[v18 + 4] = v15;
        goto LABEL_31;
      }
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    }
  }
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 >= v6)
    {
      v14 = v8;
LABEL_12:
      v5 = 0;
      v27 = 0;
      v8 = v14;
      memset(v26, 0, sizeof(v26));
      goto LABEL_13;
    }
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (v13)
      goto LABEL_10;
    v16 = v8 + 2;
    v14 = v8 + 1;
    if (v8 + 2 >= v6)
      goto LABEL_12;
    v13 = *(_QWORD *)(v2 + 8 * v16);
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 3 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * (v8 + 3));
      if (v13)
      {
        v12 = v8 + 3;
        goto LABEL_10;
      }
      v16 = v8 + 4;
      v14 = v8 + 3;
      if (v8 + 4 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * v16);
      if (!v13)
      {
        v12 = v8 + 5;
        v14 = v8 + 4;
        if (v8 + 5 >= v6)
          goto LABEL_12;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          while (v6 - 6 != v8)
          {
            v13 = *(_QWORD *)(v21 + 8 * v8++);
            if (v13)
            {
              v12 = v8 + 5;
              goto LABEL_10;
            }
          }
          v14 = v6 - 1;
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    v12 = v16;
LABEL_10:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v8 = v12;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CDA7CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v21 = result + 112;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = v2;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v24[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    sub_19CD436B0(v11 + 32 * v10, (uint64_t)v24 + 8);
LABEL_13:
    sub_19CCC290C((uint64_t)v24, (uint64_t)&v26, &qword_1ECEB04E0);
    v15 = v26;
    if (!v26)
    {
      swift_release();
      return (uint64_t)v23;
    }
    sub_19CD433C0(&v27, v24);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
      v20 = v23[2];
      v19 = v23[3];
      if (v20 >= v19 >> 1)
        v23 = sub_19CED5714((_QWORD *)(v19 > 1), v20 + 1, 1, v23);
      v23[2] = v20 + 1;
      v23[v20 + 4] = v15;
      swift_unknownObjectRelease();
LABEL_31:
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      v2 = v22;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DF68);
      if (swift_dynamicCast()
        || (__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE43DF70), swift_dynamicCast()))
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
        v18 = v23[2];
        v17 = v23[3];
        if (v18 >= v17 >> 1)
          v23 = sub_19CED5714((_QWORD *)(v17 > 1), v18 + 1, 1, v23);
        v23[2] = v18 + 1;
        v23[v18 + 4] = v15;
        goto LABEL_31;
      }
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    }
  }
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 >= v6)
    {
      v14 = v8;
LABEL_12:
      v5 = 0;
      v25 = 0;
      v8 = v14;
      memset(v24, 0, sizeof(v24));
      goto LABEL_13;
    }
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (v13)
      goto LABEL_10;
    v16 = v8 + 2;
    v14 = v8 + 1;
    if (v8 + 2 >= v6)
      goto LABEL_12;
    v13 = *(_QWORD *)(v2 + 8 * v16);
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 3 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * (v8 + 3));
      if (v13)
      {
        v12 = v8 + 3;
        goto LABEL_10;
      }
      v16 = v8 + 4;
      v14 = v8 + 3;
      if (v8 + 4 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * v16);
      if (!v13)
      {
        v12 = v8 + 5;
        v14 = v8 + 4;
        if (v8 + 5 >= v6)
          goto LABEL_12;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          while (v6 - 6 != v8)
          {
            v13 = *(_QWORD *)(v21 + 8 * v8++);
            if (v13)
            {
              v12 = v8 + 5;
              goto LABEL_10;
            }
          }
          v14 = v6 - 1;
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    v12 = v16;
LABEL_10:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v8 = v12;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_19CDA8078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v21 = result + 112;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = v2;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v24[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    sub_19CD436B0(v11 + 32 * v10, (uint64_t)v24 + 8);
LABEL_13:
    sub_19CCC290C((uint64_t)v24, (uint64_t)&v26, &qword_1ECEB04E0);
    v15 = v26;
    if (!v26)
    {
      swift_release();
      return (uint64_t)v23;
    }
    sub_19CD433C0(&v27, v24);
    type metadata accessor for JetPackAssetSession();
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
      v20 = v23[2];
      v19 = v23[3];
      if (v20 >= v19 >> 1)
        v23 = sub_19CED5714((_QWORD *)(v19 > 1), v20 + 1, 1, v23);
      v23[2] = v20 + 1;
      v23[v20 + 4] = v15;
      swift_release();
LABEL_31:
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      v2 = v22;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DE50);
      if (swift_dynamicCast()
        || (__swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DE58), swift_dynamicCast()))
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_19CED5714(0, v23[2] + 1, 1, v23);
        v18 = v23[2];
        v17 = v23[3];
        if (v18 >= v17 >> 1)
          v23 = sub_19CED5714((_QWORD *)(v17 > 1), v18 + 1, 1, v23);
        v23[2] = v18 + 1;
        v23[v18 + 4] = v15;
        goto LABEL_31;
      }
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    }
  }
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 >= v6)
    {
      v14 = v8;
LABEL_12:
      v5 = 0;
      v25 = 0;
      v8 = v14;
      memset(v24, 0, sizeof(v24));
      goto LABEL_13;
    }
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (v13)
      goto LABEL_10;
    v16 = v8 + 2;
    v14 = v8 + 1;
    if (v8 + 2 >= v6)
      goto LABEL_12;
    v13 = *(_QWORD *)(v2 + 8 * v16);
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 3 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * (v8 + 3));
      if (v13)
      {
        v12 = v8 + 3;
        goto LABEL_10;
      }
      v16 = v8 + 4;
      v14 = v8 + 3;
      if (v8 + 4 >= v6)
        goto LABEL_12;
      v13 = *(_QWORD *)(v2 + 8 * v16);
      if (!v13)
      {
        v12 = v8 + 5;
        v14 = v8 + 4;
        if (v8 + 5 >= v6)
          goto LABEL_12;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          while (v6 - 6 != v8)
          {
            v13 = *(_QWORD *)(v21 + 8 * v8++);
            if (v13)
            {
              v12 = v8 + 5;
              goto LABEL_10;
            }
          }
          v14 = v6 - 1;
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    v12 = v16;
LABEL_10:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v8 = v12;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19CDA8414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *result;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v2 = type metadata accessor for JetPackAsset(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 64);
  v35 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v10 = (unint64_t)(v7 + 63) >> 6;
  v32 = v10 - 1;
  result = (_QWORD *)swift_bridgeObjectRetain();
  v12 = 0;
  v37 = v10;
  v33 = a1 + 112;
  v34 = v10 - 6;
  v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_8;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v37)
    {
      v19 = v12;
    }
    else
    {
      v18 = *(_QWORD *)(v35 + 8 * v17);
      if (v18)
        goto LABEL_12;
      v25 = v12 + 2;
      v19 = v12 + 1;
      if ((uint64_t)(v12 + 2) < v37)
      {
        v18 = *(_QWORD *)(v35 + 8 * v25);
        if (v18)
          goto LABEL_25;
        v19 = v12 + 2;
        if ((uint64_t)(v12 + 3) < v37)
        {
          v18 = *(_QWORD *)(v35 + 8 * (v12 + 3));
          if (v18)
          {
            v17 = v12 + 3;
LABEL_12:
            v9 = (v18 - 1) & v18;
            v15 = __clz(__rbit64(v18)) + (v17 << 6);
            v12 = v17;
LABEL_8:
            v16 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)&v38[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v15);
            sub_19CD436B0(v16 + 32 * v15, (uint64_t)v38 + 8);
            goto LABEL_15;
          }
          v25 = v12 + 4;
          v19 = v12 + 3;
          if ((uint64_t)(v12 + 4) < v37)
          {
            v18 = *(_QWORD *)(v35 + 8 * v25);
            if (v18)
            {
LABEL_25:
              v17 = v25;
              goto LABEL_12;
            }
            v17 = v12 + 5;
            v19 = v12 + 4;
            if ((uint64_t)(v12 + 5) < v37)
            {
              v18 = *(_QWORD *)(v35 + 8 * v17);
              if (v18)
                goto LABEL_12;
              while (v34 != v12)
              {
                v18 = *(_QWORD *)(v33 + 8 * v12++);
                if (v18)
                {
                  v17 = v12 + 5;
                  goto LABEL_12;
                }
              }
              v19 = v32;
            }
          }
        }
      }
    }
    v9 = 0;
    v39 = 0;
    v12 = v19;
    memset(v38, 0, sizeof(v38));
LABEL_15:
    sub_19CCC290C((uint64_t)v38, (uint64_t)&v40, &qword_1ECEB04E0);
    v20 = v40;
    if (!v40)
    {
      swift_release();
      return v36;
    }
    sub_19CD433C0(&v41, v38);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = sub_19CED5714(0, v36[2] + 1, 1, v36);
      v27 = v36[2];
      v26 = v36[3];
      v28 = v27 + 1;
      if (v27 >= v26 >> 1)
      {
        v31 = v27 + 1;
        v30 = sub_19CED5714((_QWORD *)(v26 > 1), v27 + 1, 1, v36);
        v28 = v31;
        v36 = v30;
      }
      v29 = v36;
      v36[2] = v28;
      v29[v27 + 4] = v20;
      sub_19CDB7640((uint64_t)v5);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DDF8);
      if (swift_dynamicCast()
        || (__swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DE00), swift_dynamicCast()))
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = sub_19CED5714(0, v36[2] + 1, 1, v36);
        v22 = v36[2];
        v21 = v36[3];
        v23 = v22 + 1;
        if (v22 >= v21 >> 1)
        {
          v31 = v22 + 1;
          v24 = sub_19CED5714((_QWORD *)(v21 > 1), v22 + 1, 1, v36);
          v23 = v31;
          v36 = v24;
        }
        v13 = v36;
        v36[2] = v23;
        v13[v22 + 4] = v20;
      }
    }
    result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
  }
  __break(1u);
  return result;
}

uint64_t sub_19CDA8810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = sub_19CD4B638((uint64_t)&type metadata for JetEngineBootstrap.URLProtocolHandler), (v5 & 1) != 0))
  {
    sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v10);
    sub_19CD433C0(v10, v11);
    sub_19CD436B0((uint64_t)v11, (uint64_t)v10);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v9;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DF98);
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_19CDAA09C((uint64_t *)a2);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DFA0);
        if (!swift_dynamicCast())
        {
          sub_19CFE010C();
          sub_19CFDF698();
          sub_19CFE02E0();
          sub_19CFDF698();
          sub_19CFDF698();
          sub_19CFDF698();
          result = sub_19CFE0340();
          __break(1u);
          return result;
        }
        swift_retain();
        sub_19CFB2884((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v8);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
        swift_release();
        *(_OWORD *)a2 = xmmword_19D050770;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
      }
    }
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
  else
  {
    result = sub_19CD49AD0(&qword_1EE43DFA8);
    if (result)
    {
      return sub_19CD257E8(a1, result, v7, a2);
    }
    else
    {
      *(_OWORD *)a2 = xmmword_19D050770;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_19CDA8ACC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _OWORD v10[2];
  _OWORD v11[2];

  v2 = type metadata accessor for Unstable.Accounts();
  if (!*(_QWORD *)(a1 + 16) || (v3 = sub_19CD4B638(v2), (v4 & 1) == 0))
  {
    v6 = sub_19CD49AD0(&qword_1EE43AF70);
    if (v6)
    {
      sub_19CD257E8(a1, v6, v7, (uint64_t)v11);
      return *(_QWORD *)&v11[0];
    }
    return 0;
  }
  sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v3, (uint64_t)v10);
  sub_19CD433C0(v10, v11);
  sub_19CD436B0((uint64_t)v11, (uint64_t)v10);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    v5 = v9;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return v5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DF80);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v5 = sub_19CDABF58((uint64_t (*)(_QWORD))type metadata accessor for Unstable.Accounts, 0x73746E756F636341, 0xE800000000000000, (void (*)(uint64_t *, uint64_t, _QWORD))sub_19CDB7B28);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE43DF88);
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_19CFB28A0((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v9);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return 0;
  }
  sub_19CFE010C();
  sub_19CFDF698();
  sub_19CFE02E0();
  sub_19CFDF698();
  sub_19CFDF698();
  sub_19CFDF698();
  result = sub_19CFE0340();
  __break(1u);
  return result;
}

uint64_t sub_19CDA8D80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _OWORD v10[2];
  _OWORD v11[2];

  if (!*(_QWORD *)(a2 + 16) || (v3 = sub_19CD4B638(a1), (v4 & 1) == 0))
  {
    v5 = sub_19CD49AD0(&qword_1EE43A4C8);
    if (v5)
    {
      v7 = v6;
      sub_19CFDF2B4();
      sub_19CD257E8(a2, v5, v7, (uint64_t)v11);
      return *(_QWORD *)&v11[0];
    }
    return v5;
  }
  sub_19CD436B0(*(_QWORD *)(a2 + 56) + 32 * v3, (uint64_t)v10);
  sub_19CD433C0(v10, v11);
  sub_19CD436B0((uint64_t)v11, (uint64_t)v10);
  sub_19CFDF2B4();
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    v5 = v9;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return v5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DF38);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v5 = sub_19CDABF58((uint64_t (*)(_QWORD))MEMORY[0x1E0CCE1E8], 0x697669746341574ELL, 0xEA00000000007974, (void (*)(uint64_t *, uint64_t, _QWORD))sub_19CCFC05C);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE43DF40);
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_19CFB30F4((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v9);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return 0;
  }
  sub_19CFE010C();
  sub_19CFDF698();
  sub_19CFE02E0();
  sub_19CFDF698();
  sub_19CFE0A90();
  sub_19CFDF698();
  swift_bridgeObjectRelease();
  sub_19CFDF698();
  result = sub_19CFE0340();
  __break(1u);
  return result;
}

uint64_t sub_19CDA9050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];
  _BYTE v11[32];
  _OWORD v12[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DDA8);
  if (*(_QWORD *)(a1 + 16) && (v5 = sub_19CD4B638(v4), (v6 & 1) != 0))
  {
    sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v10);
    sub_19CD433C0(v10, v12);
    sub_19CD436B0((uint64_t)v12, (uint64_t)v11);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
      sub_19CCD14C4(v10, a2);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DDB0);
      if (swift_dynamicCast())
      {
        sub_19CDAB4A8(a2);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DDB8);
        if (!swift_dynamicCast())
        {
          *(_QWORD *)&v10[0] = 0;
          *((_QWORD *)&v10[0] + 1) = 0xE000000000000000;
          sub_19CFE010C();
          sub_19CFDF698();
          sub_19CFE02E0();
          sub_19CFDF698();
          sub_19CFDF698();
          sub_19CFDF698();
          result = sub_19CFE0340();
          __break(1u);
          return result;
        }
        v9 = *(_QWORD *)&v10[0];
        swift_retain();
        sub_19CFB4348((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v9);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
        swift_release();
        *(_QWORD *)(a2 + 32) = 0;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
      }
    }
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  }
  else
  {
    result = sub_19CD49AD0(&qword_1EE43DDC8);
    if (result)
    {
      return sub_19CD257E8(a1, result, v8, a2);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
  }
  return result;
}

uint64_t sub_19CDA930C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD v10[2];
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19CD4B638((uint64_t)&type metadata for IntentDispatchTimeout);
    if ((v5 & 1) != 0)
    {
      sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v10);
      sub_19CD433C0(v10, v11);
      sub_19CD436B0((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
        *(_QWORD *)a2 = v8;
        *(_BYTE *)(a2 + 8) = v9;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DD98);
        if (!swift_dynamicCast())
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DDA0);
          if (!swift_dynamicCast())
          {
            sub_19CFE010C();
            sub_19CFDF698();
            sub_19CFE02E0();
            sub_19CFDF698();
            sub_19CFDF698();
            sub_19CFDF698();
            result = sub_19CFE0340();
            __break(1u);
            return result;
          }
          swift_retain();
          sub_19CFB4364((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v8);
          swift_release();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
          swift_release();
          *(_QWORD *)a2 = 0;
          *(_WORD *)(a2 + 8) = 256;
          return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
        }
        sub_19CDAAA88(a2);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      }
      *(_BYTE *)(a2 + 9) = 0;
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    }
  }
  result = sub_19CD49AD0(&qword_1EE43B400);
  if (result)
    return sub_19CD257E8(a1, result, v7, a2);
  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 8) = 256;
  return result;
}

uint64_t sub_19CDA95CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  _OWORD v16[2];
  _OWORD v17[2];

  v4 = type metadata accessor for PageIntentInstrumentation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) && (v9 = sub_19CD4B638(v4), (v10 & 1) != 0))
  {
    sub_19CD436B0(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)v16);
    sub_19CD433C0(v16, v17);
    sub_19CD436B0((uint64_t)v17, (uint64_t)v16);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      sub_19CCFE8AC((uint64_t)v8, a2, (uint64_t (*)(_QWORD))type metadata accessor for PageIntentInstrumentation);
LABEL_10:
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DD80);
    if (swift_dynamicCast())
    {
      sub_19CDAC23C((uint64_t (*)(_QWORD))type metadata accessor for PageIntentInstrumentation, &qword_1EE43DD90, 0xD000000000000019, 0x800000019D06D7A0, a2);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      goto LABEL_10;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DD88);
    if (swift_dynamicCast())
    {
      v14 = v15[0];
      swift_retain();
      sub_19CFB4380((uint64_t)"JetEngine/DependencyDictionary.swift", 36, 2, 176, v14);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    }
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    sub_19CFE010C();
    sub_19CFDF698();
    sub_19CFE02E0();
    sub_19CFDF698();
    sub_19CFDF698();
    sub_19CFDF698();
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v11 = sub_19CD49AD0(&qword_1EE43BD88);
    if (v11)
      return sub_19CD257E8(a1, v11, v12, a2);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  }
  return result;
}

uint64_t sub_19CDA9918@<X0>(void (**a1)(uint64_t)@<X8>)
{
  uint64_t v1;
  void (*v2)(char *, char *, uint64_t);
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = (void (*)(char *, char *, uint64_t))v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for AsyncObjectGraphMetrics, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 9);
    sub_19CDACEF0((uint64_t)&v5[4], v2, (uint64_t)v2, (uint64_t)&type metadata for AsyncObjectGraphMetrics, a1);
    os_unfair_lock_unlock(v5 + 9);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDA9B84()
{
  return sub_19CDAC9D8((uint64_t (*)(_QWORD))type metadata accessor for StartUpPerformanceEvent, (uint64_t (*)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t))sub_19CDB53B4);
}

uint64_t sub_19CDA9B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  os_unfair_lock_s *v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE43B580);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v3 = sub_19CCFBBB4(v0, v2, (uint64_t)v11[0]);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11[0]);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v11[0] = v8;
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      v11[0] = 0;
      v11[1] = (id)0xE000000000000000;
      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v4 = *(os_unfair_lock_s **)(v0 + 16);
    swift_retain();
    os_unfair_lock_lock(v4 + 9);
    sub_19CDB533C((uint64_t)&v4[4], v1, v1, v2, (uint64_t *)v11);
    os_unfair_lock_unlock(v4 + 9);
    v5 = v11[0];
    swift_release();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_19CDA9E14()
{
  return sub_19CDABC80(&qword_1ECEB24A8, 0x1E0CFDBD0, (void (*)(void (*)(_QWORD **__return_ptr, uint64_t), uint64_t, _QWORD))sub_19CDB7B48);
}

uint64_t sub_19CDA9E30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = (void (*)(uint64_t))v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for Bag.Profile, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 13);
    sub_19CDAD654((uint64_t)&v5[4], v2, (uint64_t)v2, (uint64_t)&type metadata for Bag.Profile, a1);
    os_unfair_lock_unlock(v5 + 13);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAA09C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void (*v2)(char *, char *, uint64_t);
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = (void (*)(char *, char *, uint64_t))v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for JetEngineBootstrap.URLProtocolHandler, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 13);
    sub_19CDADDFC((uint64_t)&v5[4], v2, (uint64_t)v2, (uint64_t)&type metadata for JetEngineBootstrap.URLProtocolHandler, a1);
    os_unfair_lock_unlock(v5 + 13);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAA308@<X0>(void (**a1)(uint64_t)@<X8>)
{
  uint64_t v1;
  void (*v2)(char *, char *, uint64_t);
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = (void (*)(char *, char *, uint64_t))v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for Bag, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 9);
    sub_19CDAE598((uint64_t)&v5[4], v2, (uint64_t)v2, (uint64_t)&type metadata for Bag, a1);
    os_unfair_lock_unlock(v5 + 9);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAA574@<X0>(void (**a1)(uint64_t)@<X8>)
{
  uint64_t v1;
  void (*v2)(char *, char *, uint64_t);
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = (void (*)(char *, char *, uint64_t))v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for JSONContext, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 9);
    sub_19CDAECF0((uint64_t)&v5[4], v2, (uint64_t)v2, (uint64_t)&type metadata for JSONContext, a1);
    os_unfair_lock_unlock(v5 + 9);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAA7E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  os_unfair_lock_s *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  id v11;
  id v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43C2B0);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v5 = sub_19CCFBBB4(v1, v4, (uint64_t)v12);
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    sub_19CFE0A6C();
    v8 = sub_19CDA6790((uint64_t)v12);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v9 = (void *)swift_allocError();
    *v10 = v8;
    swift_willThrow();
    v11 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v6 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v6 + 15);
    sub_19CDB0BA4((uint64_t)&v6[4], v2, v4, (uint64_t *)&unk_1EE43DE98, &qword_1EE43C2B0, (uint64_t (*)(uint64_t *, uint64_t))sub_19CCD14C4, 0xD000000000000021, a1, 0x800000019D06D960);
    os_unfair_lock_unlock(v6 + 15);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAAA88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void (*v2)(char *, char *, uint64_t);
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = (void (*)(char *, char *, uint64_t))v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for IntentDispatchTimeout, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 9);
    sub_19CDAF458((uint64_t)&v5[4], v2, (uint64_t)v2, (uint64_t)&type metadata for IntentDispatchTimeout, a1);
    os_unfair_lock_unlock(v5 + 9);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAACF4@<X0>(uint64_t a1@<X8>)
{
  return sub_19CDAC23C((uint64_t (*)(_QWORD))type metadata accessor for PageIntentInstrumentation, &qword_1EE43DD90, 0xD000000000000019, 0x800000019D06D7A0, a1);
}

uint64_t sub_19CDAAD20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for MetricsPipeline, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 49);
    sub_19CDAFB88((uint64_t)&v5[4], v2, (uint64_t)&type metadata for MetricsPipeline, a1);
    os_unfair_lock_unlock(v5 + 49);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAAF8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for SentryConfiguration, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 33);
    sub_19CDB034C((uint64_t)&v5[4], v2, (uint64_t)&type metadata for SentryConfiguration, a1);
    os_unfair_lock_unlock(v5 + 33);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAB1F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  os_unfair_lock_s *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  id v11;
  id v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEB2580);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v5 = sub_19CCFBBB4(v1, v4, (uint64_t)v12);
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    sub_19CFE0A6C();
    v8 = sub_19CDA6790((uint64_t)v12);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v9 = (void *)swift_allocError();
    *v10 = v8;
    swift_willThrow();
    v11 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v6 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v6 + 15);
    sub_19CDB0BA4((uint64_t)&v6[4], v2, v4, &qword_1EE43DEF8, (uint64_t *)&unk_1ECEB2580, (uint64_t (*)(uint64_t *, uint64_t))sub_19CCD14C4, 0x50746E756F636341, a1, 0xEF72656469766F72);
    os_unfair_lock_unlock(v6 + 15);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAB4A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  os_unfair_lock_s *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  id v11;
  id v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DDA8);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v5 = sub_19CCFBBB4(v1, v4, (uint64_t)v12);
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    sub_19CFE0A6C();
    v8 = sub_19CDA6790((uint64_t)v12);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v9 = (void *)swift_allocError();
    *v10 = v8;
    swift_willThrow();
    v11 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v6 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v6 + 15);
    sub_19CDB0BA4((uint64_t)&v6[4], v2, v4, &qword_1EE43DDC0, &qword_1EE43DDA8, (uint64_t (*)(uint64_t *, uint64_t))sub_19CCD14C4, 0xD000000000000010, a1, 0x800000019D06D7E0);
    os_unfair_lock_unlock(v6 + 15);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAB750@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for JetPackAssetSession.Configuration, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 25);
    sub_19CDB1254((uint64_t)&v5[4], v2, (uint64_t)&type metadata for JetPackAssetSession.Configuration, a1);
    os_unfair_lock_unlock(v5 + 25);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAB9BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  os_unfair_lock_s *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  id v11;
  id v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE43DE78);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v5 = sub_19CCFBBB4(v1, v4, (uint64_t)v12);
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    sub_19CFE0A6C();
    v8 = sub_19CDA6790((uint64_t)v12);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v9 = (void *)swift_allocError();
    *v10 = v8;
    swift_willThrow();
    v11 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v6 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v6 + 15);
    sub_19CDB0BA4((uint64_t)&v6[4], v2, v4, &qword_1EE43DE80, &qword_1EE43DE78, (uint64_t (*)(uint64_t *, uint64_t))sub_19CCD14C4, 0xD000000000000011, a1, 0x800000019D06D940);
    os_unfair_lock_unlock(v6 + 15);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDABC64()
{
  return sub_19CDABC80((unint64_t *)&qword_1EE43A718, 0x1E0CB39F8, (void (*)(void (*)(_QWORD **__return_ptr, uint64_t), uint64_t, _QWORD))sub_19CDB7B48);
}

uint64_t sub_19CDABC80(unint64_t *a1, uint64_t a2, void (*a3)(void (*)(_QWORD **__return_ptr, uint64_t), uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void (*v11)(_QWORD **__return_ptr, uint64_t);
  uint64_t result;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  id v16;
  id v17;

  v7 = v3;
  v8 = sub_19CCE5204(0, a1);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v9 = sub_19CCFBBB4(v3, v8, (uint64_t)v17);
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    sub_19CFE0A6C();
    v13 = sub_19CDA6790((uint64_t)v17);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v14 = (void *)swift_allocError();
    *v15 = v13;
    swift_willThrow();
    v16 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v10 = *(_QWORD *)(v3 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 36));
    v11 = sub_19CDB6028((_QWORD *)(v10 + 16), v7, v7, v8, a1, a2, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 36));
    swift_release();
    return (uint64_t)v11;
  }
  return result;
}

uint64_t sub_19CDABF2C()
{
  return sub_19CDABF58((uint64_t (*)(_QWORD))type metadata accessor for JetPackAssetSession, 0xD000000000000013, 0x800000019D06D920, (void (*)(uint64_t *, uint64_t, _QWORD))sub_19CDB7B28);
}

uint64_t sub_19CDABF58(uint64_t (*a1)(_QWORD), uint64_t a2, unint64_t a3, void (*a4)(uint64_t *, uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  id v18;
  id v19;

  v9 = v4;
  v10 = a1(0);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v11 = sub_19CCFBBB4(v4, v10, (uint64_t)v19);
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    sub_19CFE0A6C();
    v15 = sub_19CDA6790((uint64_t)v19);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v16 = (void *)swift_allocError();
    *v17 = v15;
    swift_willThrow();
    v18 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v12 = *(_QWORD *)(v4 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 36));
    v13 = sub_19CDB6770((uint64_t **)(v12 + 16), v9, v9, v10, a1, a2, a3, a4);
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 36));
    swift_release();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_19CDAC20C@<X0>(uint64_t a1@<X8>)
{
  return sub_19CDAC23C(type metadata accessor for JetPackAsset, &qword_1EE43DE08, 0x416B63615074654ALL, 0xEC00000074657373, a1);
}

uint64_t sub_19CDAC23C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t result;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  id v21;
  id v22;

  v10 = (void (*)(char *, char *, uint64_t))v5;
  v12 = a1(0);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v13 = sub_19CCFBBB4(v5, v12, (uint64_t)v22);
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    sub_19CFE0A6C();
    v18 = sub_19CDA6790((uint64_t)v22);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v19 = (void *)swift_allocError();
    *v20 = v18;
    swift_willThrow();
    v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v14 = *(_QWORD *)(v5 + 16);
    v15 = v14 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v14 + 16);
    v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(_QWORD *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v16);
    sub_19CDB1ACC(v15, v10, (uint64_t)v10, v12, a1, a2, a3, a4, a5);
    os_unfair_lock_unlock(v16);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAC500@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for DiskJetPackLoader, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 19);
    sub_19CDB22B8((uint64_t)&v5[4], v2, (uint64_t)&type metadata for DiskJetPackLoader, a1);
    os_unfair_lock_unlock(v5 + 19);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAC76C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  id v11;

  v2 = v1;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v4 = sub_19CCFBBB4(v1, (uint64_t)&type metadata for InMemoryJetPackLoader, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    sub_19CFE0A6C();
    v7 = sub_19CDA6790((uint64_t)v11);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v8 = (void *)swift_allocError();
    *v9 = v7;
    swift_willThrow();
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v5 = *(os_unfair_lock_s **)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock(v5 + 19);
    sub_19CDB2AB8((uint64_t)&v5[4], v2, (uint64_t)&type metadata for InMemoryJetPackLoader, a1);
    os_unfair_lock_unlock(v5 + 19);
    return swift_release();
  }
  return result;
}

uint64_t sub_19CDAC9D8(uint64_t (*a1)(_QWORD), uint64_t (*a2)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  id v13;
  id v14;

  v4 = v2;
  v5 = a1(0);
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v6 = sub_19CCFBBB4(v2, v5, (uint64_t)v14);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    sub_19CFE0A6C();
    v10 = sub_19CDA6790((uint64_t)v14);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v11 = (void *)swift_allocError();
    *v12 = v10;
    swift_willThrow();
    v13 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v7 = *(os_unfair_lock_s **)(v2 + 16);
    swift_retain();
    os_unfair_lock_lock(v7 + 9);
    v8 = a2(v7 + 4, v4, v4, v5);
    swift_retain();
    os_unfair_lock_unlock(v7 + 9);
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_19CDACC64()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  id v9;
  id v10;

  v1 = v0;
  if (qword_1EE43AEB0 != -1)
    swift_once();
  sub_19CFE0A6C();
  v2 = sub_19CCFBBB4(v0, (uint64_t)&type metadata for IntentDispatchOptions.BadOrderingCanary, (uint64_t)v10);
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    sub_19CFE0A6C();
    v6 = sub_19CDA6790((uint64_t)v10);
    swift_bridgeObjectRelease();
    sub_19CDB5370();
    v7 = (void *)swift_allocError();
    *v8 = v6;
    swift_willThrow();
    v9 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEB1F50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_19CFE0868();
      swift_bridgeObjectRelease();
    }
    else
    {

      sub_19CFDF698();
      sub_19CFE02E0();
    }
    result = sub_19CFE0340();
    __break(1u);
  }
  else
  {
    v3 = *(os_unfair_lock_s **)(v0 + 16);
    swift_retain();
    os_unfair_lock_lock(v3 + 9);
    v4 = sub_19CDB32B8((uint64_t)&v3[4], v1, v1, (uint64_t)&type metadata for IntentDispatchOptions.BadOrderingCanary);
    os_unfair_lock_unlock(v3 + 9);
    swift_release();
    return v4;
  }
  return result;
}

uint64_t sub_19CDACEF0@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (**a5)(uint64_t)@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata *v35;
  void (*v36)(ValueMetadata *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_signpost_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  os_signpost_id_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t (*v50)(void);
  NSObject *v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint8_t *v63;
  os_signpost_id_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  ValueMetadata *v89;
  uint64_t v90;

  v81 = a3;
  v82 = a4;
  v80 = a2;
  v8 = sub_19CFDF278();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19CFDF1E8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v79 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_19CFDF1AC();
  v86 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v17);
  v83 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v69 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v87 = (char *)&v69 - v25;
  v26 = *(void (**)(uint64_t))a1;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    *a5 = v26;
    return swift_bridgeObjectRetain();
  }
  else
  {
    v73 = v5;
    v70 = v14;
    v71 = v13;
    v85 = v26;
    v77 = (uint64_t *)a5;
    v28 = a1;
    v29 = *(_QWORD *)(a1 + 8);
    type metadata accessor for BaseObjectGraph();
    v84 = v29;
    swift_retain();
    v30 = static BaseObjectGraph.current.getter();
    if (qword_1ECEB1330 != -1)
      swift_once();
    v90 = v30;
    swift_retain();
    swift_task_localValuePush();
    v31 = swift_bridgeObjectRetain();
    v32 = sub_19CD49828(v31);
    swift_bridgeObjectRelease();
    swift_task_localValuePop();
    swift_release();
    v78 = v32;
    if (v32
      && ((v33 = swift_conformsToProtocol2()) != 0 ? (v34 = v33) : (v34 = 0),
          v33 ? (v35 = &type metadata for AsyncObjectGraphMetrics) : (v35 = 0),
          v35))
    {
      v36 = *(void (**)(ValueMetadata *, uint64_t))(v34 + 8);
      swift_retain();
      v36(v35, v34);
      v37 = sub_19CCCCA74();
      swift_release();
      swift_retain();
      sub_19CFDF29C();
      v72 = v37;
      swift_release();
    }
    else
    {
      v72 = 0;
    }
    v74 = v12;
    v75 = v9;
    v38 = v87;
    if (qword_1EE43B4E8 != -1)
      swift_once();
    v76 = v8;
    v39 = sub_19CFDF1DC();
    __swift_project_value_buffer(v39, (uint64_t)qword_1EE465C48);
    sub_19CFDF1C4();
    swift_unknownObjectRetain();
    sub_19CFDF17C();
    v40 = sub_19CFDF1C4();
    v41 = sub_19CFDFE84();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      v80 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
      v80(v22, v38, v88);
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v90 = v43;
      *(_DWORD *)v42 = 136315138;
      v89 = (ValueMetadata *)sub_19CD37070(0xD000000000000017, 0x800000019D06D680, &v90);
      sub_19CFDFFC8();
      v44 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v40, v41, v44, "MakeLazyDependency", "object=%s", v42, 0xCu);
      swift_arrayDestroy();
      v45 = v43;
      v38 = v87;
      MEMORY[0x1A1ADBE9C](v45, -1, -1);
      MEMORY[0x1A1ADBE9C](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v22, v88);
      v46 = v80;
    }
    else
    {

      v46 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    }
    v80 = v46;
    v46(v22, v38, v88);
    sub_19CFDF20C();
    swift_allocObject();
    sub_19CFDF200();
    v47 = v84;
    swift_retain();
    v48 = v85;
    v49 = v73;
    sub_19CDA69AC(v85, v47, v81, v82);
    v50 = MEMORY[0x1E0DEEB08];
    sub_19CDB76C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), MEMORY[0x1E0DEEB08]);
    sub_19CDB76C8((uint64_t)v48, v47, 0, v50);
    v51 = sub_19CFDF1C4();
    v52 = v83;
    sub_19CFDF1F4();
    v53 = sub_19CFDFE78();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      LODWORD(v81) = v53;
      v82 = v49;
      swift_retain();
      v54 = v79;
      sub_19CFDF218();
      swift_release();
      v56 = v70;
      v55 = v71;
      v57 = v22;
      if ((*(unsigned int (**)(char *, uint64_t))(v70 + 88))(v54, v71) == *MEMORY[0x1E0DF2190])
      {
        v58 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
        v58 = "";
      }
      v59 = v28;
      v61 = v57;
      v62 = v88;
      v80(v57, v52, v88);
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      v64 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v51, (os_signpost_type_t)v81, v64, "MakeLazyDependency", v58, v63, 2u);
      MEMORY[0x1A1ADBE9C](v63, -1, -1);

      v60 = *(void (**)(char *, uint64_t))(v86 + 8);
      v60(v52, v62);
      v60(v61, v62);
    }
    else
    {
      v59 = a1;

      v60 = *(void (**)(char *, uint64_t))(v86 + 8);
      v60(v52, v88);
    }
    v66 = v75;
    v65 = v76;
    v67 = v74;
    if (v72)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, *MEMORY[0x1E0CCE198], v76);
      swift_retain();
      sub_19CFDF2A8();
      swift_release();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v65);
    }
    if (v78)
    {
      v89 = &type metadata for AsyncObjectGraphMetrics;
      swift_retain();
      StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v89);
      swift_release();
      swift_release();
      sub_19CDB76C8((uint64_t)v85, v84, 0, MEMORY[0x1E0DEEB08]);
      swift_release();
      swift_release();
      v60(v87, v88);
    }
    else
    {
      v60(v87, v88);
      swift_release();
      sub_19CDB76C8((uint64_t)v85, v84, 0, MEMORY[0x1E0DEEB08]);
      swift_release();
    }
    v68 = v90;
    *(_QWORD *)v59 = v90;
    *(_QWORD *)(v59 + 8) = 0;
    *(_BYTE *)(v59 + 16) = 1;
    *v77 = v68;
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_19CDAD654@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  ValueMetadata *v39;
  void (*v40)(ValueMetadata *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  os_signpost_type_t v46;
  char v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  os_signpost_id_t v51;
  uint64_t v52;
  uint8_t *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  char *v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  void (*v64)(uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  uint8_t *v67;
  os_signpost_id_t v68;
  uint8_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  char *v89;
  char *v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  ValueMetadata *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[5];
  ValueMetadata *v102;

  v92 = a3;
  v93 = a4;
  v91 = a2;
  v98 = a5;
  v7 = sub_19CFDF278();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v90 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_19CFDF1E8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v88 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_19CFDF1AC();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v78 - v20;
  MEMORY[0x1E0C80A78](v19, v22);
  v27 = *(void (**)(uint64_t))a1;
  v26 = *(_QWORD *)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 24);
  v99 = *(_QWORD *)(a1 + 16);
  v100 = v28;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v29 = v98;
    v30 = v99;
    *v98 = (uint64_t)v27;
    v29[1] = v26;
    v31 = v100;
    v29[2] = v30;
    v29[3] = v31;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    v84 = v5;
    v80 = v12;
    v81 = v11;
    v89 = v25;
    v96 = (char *)&v78 - v23;
    v97 = v24;
    v82 = v7;
    v33 = v26;
    type metadata accessor for BaseObjectGraph();
    v95 = v33;
    swift_retain();
    v34 = static BaseObjectGraph.current.getter();
    if (qword_1ECEB1330 != -1)
      swift_once();
    v101[0] = v34;
    swift_retain();
    swift_task_localValuePush();
    v35 = swift_bridgeObjectRetain();
    v36 = sub_19CD49828(v35);
    swift_bridgeObjectRelease();
    swift_task_localValuePop();
    swift_release();
    v86 = v36;
    if (v36)
    {
      v37 = swift_conformsToProtocol2();
      if (v37)
        v38 = v37;
      else
        v38 = 0;
      if (v37)
        v39 = &type metadata for Bag.Profile;
      else
        v39 = 0;
      if (v39)
      {
        v40 = *(void (**)(ValueMetadata *, uint64_t))(v38 + 8);
        swift_retain();
        v40(v39, v38);
        v39 = (ValueMetadata *)sub_19CCCCA74();
        swift_release();
        swift_retain();
        sub_19CFDF29C();
        swift_release();
      }
    }
    else
    {
      v39 = 0;
    }
    v41 = v97;
    v94 = v39;
    v85 = v8;
    if (qword_1EE43B4E8 != -1)
      swift_once();
    v42 = sub_19CFDF1DC();
    v43 = __swift_project_value_buffer(v42, (uint64_t)qword_1EE465C48);
    sub_19CFDF1C4();
    swift_unknownObjectRetain();
    v44 = v96;
    sub_19CFDF17C();
    v83 = v43;
    v45 = sub_19CFDF1C4();
    v46 = sub_19CFDFE84();
    v47 = sub_19CFDFF2C();
    v91 = v27;
    if ((v47 & 1) != 0)
    {
      v87 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
      v87(v21, v44, v15);
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v79 = v15;
      v50 = v49;
      v101[0] = v49;
      *(_DWORD *)v48 = 136315138;
      v102 = (ValueMetadata *)sub_19CD37070(0x656C69666F7250, 0xE700000000000000, v101);
      sub_19CFDFFC8();
      v51 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v45, v46, v51, "MakeLazyDependency", "object=%s", v48, 0xCu);
      swift_arrayDestroy();
      v52 = v50;
      v15 = v79;
      MEMORY[0x1A1ADBE9C](v52, -1, -1);
      v53 = v48;
      v27 = v91;
      MEMORY[0x1A1ADBE9C](v53, -1, -1);

      (*(void (**)(char *, uint64_t))(v97 + 8))(v21, v15);
      v54 = v87;
    }
    else
    {

      v54 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    }
    v55 = v84;
    v87 = v54;
    v54(v21, v44, v15);
    sub_19CFDF20C();
    swift_allocObject();
    sub_19CFDF200();
    v56 = v95;
    swift_retain();
    sub_19CDA69AC(v27, v56, v92, v93);
    v93 = v55;
    sub_19CDB76F8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    sub_19CDB76F8((uint64_t)v27, v56, v99, v100, 0);
    v57 = sub_19CFDF1C4();
    v58 = v89;
    sub_19CFDF1F4();
    v59 = sub_19CFDFE78();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      LODWORD(v92) = v59;
      swift_retain();
      v60 = v88;
      sub_19CFDF218();
      swift_release();
      v61 = v80;
      v62 = v81;
      if ((*(unsigned int (**)(char *, uint64_t))(v80 + 88))(v60, v81) == *MEMORY[0x1E0DF2190])
      {
        v63 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
        v63 = "";
      }
      v65 = v89;
      v87(v21, v89, v15);
      v66 = v15;
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      v68 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v57, (os_signpost_type_t)v92, v68, "MakeLazyDependency", v63, v67, 2u);
      v69 = v67;
      v15 = v66;
      MEMORY[0x1A1ADBE9C](v69, -1, -1);

      v64 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
      v64((uint64_t)v65, v66);
      v64((uint64_t)v21, v66);
      v27 = v91;
    }
    else
    {

      v64 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
      v64((uint64_t)v58, v15);
    }
    v70 = v85;
    if (v94)
    {
      v71 = v90;
      v72 = v82;
      (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v90, *MEMORY[0x1E0CCE198], v82);
      swift_retain();
      sub_19CFDF2A8();
      swift_release();
      v27 = v91;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
    }
    if (v86)
    {
      v102 = &type metadata for Bag.Profile;
      swift_retain();
      StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v102);
      swift_release();
      swift_release();
      sub_19CDB76F8((uint64_t)v27, v95, v99, v100, 0);
      swift_release();
      swift_release();
      v64((uint64_t)v96, v15);
    }
    else
    {
      v64((uint64_t)v96, v15);
      swift_release();
      sub_19CDB76F8((uint64_t)v27, v95, v99, v100, 0);
      swift_release();
    }
    v74 = v101[0];
    v73 = v101[1];
    v75 = v101[2];
    v76 = v101[3];
    *(_QWORD *)a1 = v101[0];
    *(_QWORD *)(a1 + 8) = v73;
    *(_QWORD *)(a1 + 16) = v75;
    *(_QWORD *)(a1 + 24) = v76;
    *(_BYTE *)(a1 + 32) = 1;
    v77 = v98;
    *v98 = v74;
    v77[1] = v73;
    v77[2] = v75;
    v77[3] = v76;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_19CDADDFC@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  ValueMetadata *v38;
  void (*v39)(ValueMetadata *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  char v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  os_signpost_id_t v48;
  uint64_t v49;
  uint8_t *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  char *v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  void (*v65)(uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint8_t *v68;
  os_signpost_id_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104[5];
  ValueMetadata *v105;

  v96 = a3;
  v97 = a4;
  v95 = a2;
  v102 = a5;
  v7 = sub_19CFDF278();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v94 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_19CFDF1E8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v92 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_19CFDF1AC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v81 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v26 = *(void (**)(uint64_t))a1;
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 16);
  v103 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v30 = v102;
    v29 = v103;
    *v102 = (uint64_t)v26;
    v30[1] = v27;
    v30[2] = v28;
    v30[3] = v29;
    return sub_19CDB390C((uint64_t)v26, v27);
  }
  else
  {
    v89 = v5;
    v84 = v12;
    v85 = v11;
    v93 = v25;
    v98 = v26;
    v99 = (char *)&v81 - v24;
    v101 = v28;
    v86 = v7;
    v32 = v27;
    type metadata accessor for BaseObjectGraph();
    v100 = v32;
    swift_retain();
    v33 = static BaseObjectGraph.current.getter();
    if (qword_1ECEB1330 != -1)
      swift_once();
    v104[0] = v33;
    swift_retain();
    swift_task_localValuePush();
    v34 = swift_bridgeObjectRetain();
    v35 = sub_19CD49828(v34);
    swift_bridgeObjectRelease();
    swift_task_localValuePop();
    swift_release();
    if (v35
      && ((v36 = swift_conformsToProtocol2()) != 0 ? (v37 = v36) : (v37 = 0),
          v36 ? (v38 = &type metadata for JetEngineBootstrap.URLProtocolHandler) : (v38 = 0),
          v38))
    {
      v39 = *(void (**)(ValueMetadata *, uint64_t))(v37 + 8);
      swift_retain();
      v39(v38, v37);
      v40 = sub_19CCCCA74();
      swift_release();
      swift_retain();
      sub_19CFDF29C();
      v87 = v40;
      swift_release();
    }
    else
    {
      v87 = 0;
    }
    v91 = v8;
    if (qword_1EE43B4E8 != -1)
      swift_once();
    v41 = sub_19CFDF1DC();
    __swift_project_value_buffer(v41, (uint64_t)qword_1EE465C48);
    sub_19CFDF1C4();
    swift_unknownObjectRetain();
    v42 = v99;
    sub_19CFDF17C();
    v43 = sub_19CFDF1C4();
    LODWORD(v88) = sub_19CFDFE84();
    v44 = sub_19CFDFF2C();
    v90 = v16;
    if ((v44 & 1) != 0)
    {
      v95 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v95(v21, v42, v15);
      v82 = v35;
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      v83 = v15;
      v47 = v46;
      v104[0] = v46;
      *(_DWORD *)v45 = 136315138;
      v105 = (ValueMetadata *)sub_19CD37070(0xD000000000000012, 0x800000019D051450, v104);
      v35 = v82;
      sub_19CFDFFC8();
      v48 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v43, (os_signpost_type_t)v88, v48, "MakeLazyDependency", "object=%s", v45, 0xCu);
      swift_arrayDestroy();
      v49 = v47;
      v15 = v83;
      MEMORY[0x1A1ADBE9C](v49, -1, -1);
      v50 = v45;
      v16 = v90;
      MEMORY[0x1A1ADBE9C](v50, -1, -1);

      (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
      v51 = v95;
    }
    else
    {

      v51 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    }
    v95 = v51;
    v51(v21, v42, v15);
    sub_19CFDF20C();
    swift_allocObject();
    v52 = sub_19CFDF200();
    v53 = v100;
    swift_retain();
    v54 = v98;
    v55 = v89;
    sub_19CDA69AC(v98, v53, v96, v97);
    v97 = v55;
    sub_19CDB76D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    v56 = v53;
    v57 = v52;
    sub_19CDB76D8((uint64_t)v54, v56, v101, v103, 0);
    v58 = sub_19CFDF1C4();
    v59 = v93;
    sub_19CFDF1F4();
    LODWORD(v96) = sub_19CFDFE78();
    v60 = sub_19CFDFF2C();
    v88 = v57;
    if ((v60 & 1) != 0)
    {
      swift_retain();
      v61 = v92;
      sub_19CFDF218();
      swift_release();
      v62 = v84;
      v63 = v85;
      if ((*(unsigned int (**)(char *, uint64_t))(v84 + 88))(v61, v85) == *MEMORY[0x1E0DF2190])
      {
        v64 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v63);
        v64 = "";
      }
      v66 = v93;
      v95(v21, v93, v15);
      v67 = v15;
      v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v68 = 0;
      v69 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v58, (os_signpost_type_t)v96, v69, "MakeLazyDependency", v64, v68, 2u);
      v70 = v68;
      v15 = v67;
      MEMORY[0x1A1ADBE9C](v70, -1, -1);

      v65 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v65((uint64_t)v66, v67);
      v65((uint64_t)v21, v67);
    }
    else
    {

      v65 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v65((uint64_t)v59, v15);
    }
    v71 = v91;
    if (v87)
    {
      v72 = v35;
      v73 = v94;
      v74 = v86;
      (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v94, *MEMORY[0x1E0CCE198], v86);
      swift_retain();
      sub_19CFDF2A8();
      swift_release();
      v75 = v73;
      v35 = v72;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v75, v74);
    }
    if (v35)
    {
      v105 = &type metadata for JetEngineBootstrap.URLProtocolHandler;
      swift_retain();
      StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v105);
      swift_release();
      swift_release();
      sub_19CDB76D8((uint64_t)v98, v100, v101, v103, 0);
      swift_release();
      swift_release();
      v65((uint64_t)v99, v15);
    }
    else
    {
      v65((uint64_t)v99, v15);
      swift_release();
      sub_19CDB76D8((uint64_t)v98, v100, v101, v103, 0);
      swift_release();
    }
    v76 = v104[0];
    v77 = v104[1];
    v78 = v104[2];
    v79 = v104[3];
    *(_QWORD *)a1 = v104[0];
    *(_QWORD *)(a1 + 8) = v77;
    *(_QWORD *)(a1 + 16) = v78;
    *(_QWORD *)(a1 + 24) = v79;
    *(_BYTE *)(a1 + 32) = 1;
    v80 = v102;
    *v102 = v76;
    v80[1] = v77;
    v80[2] = v78;
    v80[3] = v79;
    return sub_19CDB390C(v76, v77);
  }
}

uint64_t sub_19CDAE598@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (**a5)(uint64_t)@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata *v35;
  void (*v36)(ValueMetadata *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_signpost_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  os_signpost_id_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t (*v50)(void);
  NSObject *v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint8_t *v63;
  os_signpost_id_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  ValueMetadata *v89;
  uint64_t v90;

  v81 = a3;
  v82 = a4;
  v80 = a2;
  v8 = sub_19CFDF278();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19CFDF1E8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v79 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_19CFDF1AC();
  v86 = *(_QWORD *)(v88 - 8);
  v18 = MEMORY[0x1E0C80A78](v88, v17);
  v83 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v69 - v22;
  MEMORY[0x1E0C80A78](v21, v24);
  v87 = (char *)&v69 - v25;
  v26 = *(void (**)(uint64_t))a1;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    *a5 = v26;
    return swift_unknownObjectRetain();
  }
  else
  {
    v73 = v5;
    v70 = v14;
    v71 = v13;
    v85 = v26;
    v77 = (uint64_t *)a5;
    v28 = a1;
    v29 = *(_QWORD *)(a1 + 8);
    type metadata accessor for BaseObjectGraph();
    v84 = v29;
    swift_retain();
    v30 = static BaseObjectGraph.current.getter();
    if (qword_1ECEB1330 != -1)
      swift_once();
    v90 = v30;
    swift_retain();
    swift_task_localValuePush();
    v31 = swift_bridgeObjectRetain();
    v32 = sub_19CD49828(v31);
    swift_bridgeObjectRelease();
    swift_task_localValuePop();
    swift_release();
    v78 = v32;
    if (v32
      && ((v33 = swift_conformsToProtocol2()) != 0 ? (v34 = v33) : (v34 = 0),
          v33 ? (v35 = &type metadata for Bag) : (v35 = 0),
          v35))
    {
      v36 = *(void (**)(ValueMetadata *, uint64_t))(v34 + 8);
      swift_retain();
      v36(v35, v34);
      v37 = sub_19CCCCA74();
      swift_release();
      swift_retain();
      sub_19CFDF29C();
      v72 = v37;
      swift_release();
    }
    else
    {
      v72 = 0;
    }
    v74 = v12;
    v75 = v9;
    v38 = v87;
    if (qword_1EE43B4E8 != -1)
      swift_once();
    v76 = v8;
    v39 = sub_19CFDF1DC();
    __swift_project_value_buffer(v39, (uint64_t)qword_1EE465C48);
    sub_19CFDF1C4();
    swift_unknownObjectRetain();
    sub_19CFDF17C();
    v40 = sub_19CFDF1C4();
    v41 = sub_19CFDFE84();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      v80 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
      v80(v23, v38, v88);
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v90 = v43;
      *(_DWORD *)v42 = 136315138;
      v89 = (ValueMetadata *)sub_19CD37070(6775106, 0xE300000000000000, &v90);
      sub_19CFDFFC8();
      v44 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v40, v41, v44, "MakeLazyDependency", "object=%s", v42, 0xCu);
      swift_arrayDestroy();
      v45 = v43;
      v38 = v87;
      MEMORY[0x1A1ADBE9C](v45, -1, -1);
      MEMORY[0x1A1ADBE9C](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v23, v88);
      v46 = v80;
    }
    else
    {

      v46 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    }
    v80 = v46;
    v46(v23, v38, v88);
    sub_19CFDF20C();
    swift_allocObject();
    sub_19CFDF200();
    v47 = v84;
    swift_retain();
    v48 = v85;
    v49 = v73;
    sub_19CDA69AC(v85, v47, v81, v82);
    v50 = MEMORY[0x1E0DEEEC0];
    sub_19CDB76C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), MEMORY[0x1E0DEEEC0]);
    sub_19CDB76C8((uint64_t)v48, v47, 0, v50);
    v51 = sub_19CFDF1C4();
    v52 = v83;
    sub_19CFDF1F4();
    v53 = sub_19CFDFE78();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      LODWORD(v81) = v53;
      v82 = v49;
      swift_retain();
      v54 = v79;
      sub_19CFDF218();
      swift_release();
      v56 = v70;
      v55 = v71;
      v57 = v23;
      if ((*(unsigned int (**)(char *, uint64_t))(v70 + 88))(v54, v71) == *MEMORY[0x1E0DF2190])
      {
        v58 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
        v58 = "";
      }
      v59 = v28;
      v61 = v57;
      v62 = v88;
      v80(v57, v52, v88);
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      v64 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v51, (os_signpost_type_t)v81, v64, "MakeLazyDependency", v58, v63, 2u);
      MEMORY[0x1A1ADBE9C](v63, -1, -1);

      v60 = *(void (**)(char *, uint64_t))(v86 + 8);
      v60(v52, v62);
      v60(v61, v62);
    }
    else
    {
      v59 = a1;

      v60 = *(void (**)(char *, uint64_t))(v86 + 8);
      v60(v52, v88);
    }
    v66 = v75;
    v65 = v76;
    v67 = v74;
    if (v72)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, *MEMORY[0x1E0CCE198], v76);
      swift_retain();
      sub_19CFDF2A8();
      swift_release();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v65);
    }
    if (v78)
    {
      v89 = &type metadata for Bag;
      swift_retain();
      StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v89);
      swift_release();
      swift_release();
      sub_19CDB76C8((uint64_t)v85, v84, 0, MEMORY[0x1E0DEEEC0]);
      swift_release();
      swift_release();
      v60(v87, v88);
    }
    else
    {
      v60(v87, v88);
      swift_release();
      sub_19CDB76C8((uint64_t)v85, v84, 0, MEMORY[0x1E0DEEEC0]);
      swift_release();
    }
    v68 = v90;
    *(_QWORD *)v59 = v90;
    *(_QWORD *)(v59 + 8) = 0;
    *(_BYTE *)(v59 + 16) = 1;
    *v77 = v68;
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_19CDAECF0@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (**a5)(uint64_t)@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata *v35;
  void (*v36)(ValueMetadata *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_signpost_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  os_signpost_id_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t (*v50)(void);
  NSObject *v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint8_t *v63;
  os_signpost_id_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  ValueMetadata *v89;
  uint64_t v90;

  v81 = a3;
  v82 = a4;
  v80 = a2;
  v8 = sub_19CFDF278();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19CFDF1E8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v79 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_19CFDF1AC();
  v86 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v17);
  v83 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v69 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v87 = (char *)&v69 - v25;
  v26 = *(void (**)(uint64_t))a1;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    *a5 = v26;
    return swift_bridgeObjectRetain();
  }
  else
  {
    v73 = v5;
    v70 = v14;
    v71 = v13;
    v85 = v26;
    v77 = (uint64_t *)a5;
    v28 = a1;
    v29 = *(_QWORD *)(a1 + 8);
    type metadata accessor for BaseObjectGraph();
    v84 = v29;
    swift_retain();
    v30 = static BaseObjectGraph.current.getter();
    if (qword_1ECEB1330 != -1)
      swift_once();
    v90 = v30;
    swift_retain();
    swift_task_localValuePush();
    v31 = swift_bridgeObjectRetain();
    v32 = sub_19CD49828(v31);
    swift_bridgeObjectRelease();
    swift_task_localValuePop();
    swift_release();
    v78 = v32;
    if (v32
      && ((v33 = swift_conformsToProtocol2()) != 0 ? (v34 = v33) : (v34 = 0),
          v33 ? (v35 = &type metadata for JSONContext) : (v35 = 0),
          v35))
    {
      v36 = *(void (**)(ValueMetadata *, uint64_t))(v34 + 8);
      swift_retain();
      v36(v35, v34);
      v37 = sub_19CCCCA74();
      swift_release();
      swift_retain();
      sub_19CFDF29C();
      v72 = v37;
      swift_release();
    }
    else
    {
      v72 = 0;
    }
    v74 = v12;
    v75 = v9;
    v38 = v87;
    if (qword_1EE43B4E8 != -1)
      swift_once();
    v76 = v8;
    v39 = sub_19CFDF1DC();
    __swift_project_value_buffer(v39, (uint64_t)qword_1EE465C48);
    sub_19CFDF1C4();
    swift_unknownObjectRetain();
    sub_19CFDF17C();
    v40 = sub_19CFDF1C4();
    v41 = sub_19CFDFE84();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      v80 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
      v80(v22, v38, v88);
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v90 = v43;
      *(_DWORD *)v42 = 136315138;
      v89 = (ValueMetadata *)sub_19CD37070(0x746E6F434E4F534ALL, 0xEB00000000747865, &v90);
      sub_19CFDFFC8();
      v44 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v40, v41, v44, "MakeLazyDependency", "object=%s", v42, 0xCu);
      swift_arrayDestroy();
      v45 = v43;
      v38 = v87;
      MEMORY[0x1A1ADBE9C](v45, -1, -1);
      MEMORY[0x1A1ADBE9C](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v22, v88);
      v46 = v80;
    }
    else
    {

      v46 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    }
    v80 = v46;
    v46(v22, v38, v88);
    sub_19CFDF20C();
    swift_allocObject();
    sub_19CFDF200();
    v47 = v84;
    swift_retain();
    v48 = v85;
    v49 = v73;
    sub_19CDA69AC(v85, v47, v81, v82);
    v50 = MEMORY[0x1E0DEEB08];
    sub_19CDB76C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), MEMORY[0x1E0DEEB08]);
    sub_19CDB76C8((uint64_t)v48, v47, 0, v50);
    v51 = sub_19CFDF1C4();
    v52 = v83;
    sub_19CFDF1F4();
    v53 = sub_19CFDFE78();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      LODWORD(v81) = v53;
      v82 = v49;
      swift_retain();
      v54 = v79;
      sub_19CFDF218();
      swift_release();
      v56 = v70;
      v55 = v71;
      v57 = v22;
      if ((*(unsigned int (**)(char *, uint64_t))(v70 + 88))(v54, v71) == *MEMORY[0x1E0DF2190])
      {
        v58 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
        v58 = "";
      }
      v59 = v28;
      v61 = v57;
      v62 = v88;
      v80(v57, v52, v88);
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      v64 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v51, (os_signpost_type_t)v81, v64, "MakeLazyDependency", v58, v63, 2u);
      MEMORY[0x1A1ADBE9C](v63, -1, -1);

      v60 = *(void (**)(char *, uint64_t))(v86 + 8);
      v60(v52, v62);
      v60(v61, v62);
    }
    else
    {
      v59 = a1;

      v60 = *(void (**)(char *, uint64_t))(v86 + 8);
      v60(v52, v88);
    }
    v66 = v75;
    v65 = v76;
    v67 = v74;
    if (v72)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, *MEMORY[0x1E0CCE198], v76);
      swift_retain();
      sub_19CFDF2A8();
      swift_release();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v65);
    }
    if (v78)
    {
      v89 = &type metadata for JSONContext;
      swift_retain();
      StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v89);
      swift_release();
      swift_release();
      sub_19CDB76C8((uint64_t)v85, v84, 0, MEMORY[0x1E0DEEB08]);
      swift_release();
      swift_release();
      v60(v87, v88);
    }
    else
    {
      v60(v87, v88);
      swift_release();
      sub_19CDB76C8((uint64_t)v85, v84, 0, MEMORY[0x1E0DEEB08]);
      swift_release();
    }
    v68 = v90;
    *(_QWORD *)v59 = v90;
    *(_QWORD *)(v59 + 8) = 0;
    *(_BYTE *)(v59 + 16) = 1;
    *v77 = v68;
    return swift_bridgeObjectRetain();
  }
}

void sub_19CDAF458(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(ValueMetadata *, uint64_t);
  uint64_t v36;
  NSObject *v37;
  os_signpost_type_t v38;
  char v39;
  uint8_t *v40;
  uint64_t v41;
  os_signpost_id_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  NSObject *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  void (*v54)(uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  uint8_t *v57;
  os_signpost_id_t v58;
  uint8_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  ValueMetadata *v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  ValueMetadata *v87;

  v77 = a3;
  v78 = a4;
  v76 = a2;
  v7 = sub_19CFDF278();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_19CFDF1E8();
  v74 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v79 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_19CFDF1AC();
  v83 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v66 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v66 - v24;
  v27 = *(void (**)(uint64_t))a1;
  v26 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    *(_QWORD *)a5 = v27;
    *(_BYTE *)(a5 + 8) = v26 & 1;
  }
  else
  {
    v67 = v12;
    v68 = v7;
    v75 = v23;
    v81 = v27;
    v72 = (uint64_t *)a5;
    v28 = v26;
    type metadata accessor for BaseObjectGraph();
    v82 = v28;
    swift_retain();
    v29 = static BaseObjectGraph.current.getter();
    if (qword_1ECEB1330 != -1)
      swift_once();
    v85 = v29;
    swift_retain();
    swift_task_localValuePush();
    v30 = swift_bridgeObjectRetain();
    v31 = sub_19CD49828(v30);
    swift_bridgeObjectRelease();
    swift_task_localValuePop();
    swift_release();
    v32 = &type metadata for IntentDispatchTimeout;
    v73 = v31;
    if (v31)
    {
      v33 = swift_conformsToProtocol2();
      if (v33)
        v34 = v33;
      else
        v34 = 0;
      if (!v33)
        v32 = 0;
      if (v32)
      {
        v35 = *(void (**)(ValueMetadata *, uint64_t))(v34 + 8);
        swift_retain();
        v35(v32, v34);
        v32 = (ValueMetadata *)sub_19CCCCA74();
        swift_release();
        swift_retain();
        sub_19CFDF29C();
        swift_release();
      }
    }
    else
    {
      v32 = 0;
    }
    v80 = v32;
    if (qword_1EE43B4E8 != -1)
      swift_once();
    v70 = v11;
    v71 = v8;
    v36 = sub_19CFDF1DC();
    __swift_project_value_buffer(v36, (uint64_t)qword_1EE465C48);
    sub_19CFDF1C4();
    swift_unknownObjectRetain();
    sub_19CFDF17C();
    v37 = sub_19CFDF1C4();
    v38 = sub_19CFDFE84();
    v39 = sub_19CFDFF2C();
    v69 = v25;
    if ((v39 & 1) != 0)
    {
      v76 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
      v76(v20, v25, v15);
      v66 = v15;
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v85 = v41;
      *(_DWORD *)v40 = 136315138;
      v87 = (ValueMetadata *)sub_19CD37070(0xD000000000000015, 0x800000019D06D7C0, &v85);
      v15 = v66;
      sub_19CFDFFC8();
      v42 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v37, v38, v42, "MakeLazyDependency", "object=%s", v40, 0xCu);
      swift_arrayDestroy();
      v43 = v41;
      v25 = v69;
      MEMORY[0x1A1ADBE9C](v43, -1, -1);
      MEMORY[0x1A1ADBE9C](v40, -1, -1);

      (*(void (**)(char *, uint64_t))(v83 + 8))(v20, v15);
      v44 = v76;
    }
    else
    {

      v44 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
    }
    v45 = v79;
    v76 = v44;
    v44(v20, v25, v15);
    sub_19CFDF20C();
    swift_allocObject();
    sub_19CFDF200();
    v46 = v82;
    swift_retain();
    v47 = v81;
    v48 = v84;
    sub_19CDA69AC(v81, v46, v77, v78);
    v84 = v48;
    sub_19CDB75B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    sub_19CDB75B4((uint64_t)v47, v46, 0);
    v49 = sub_19CFDF1C4();
    v50 = v75;
    sub_19CFDF1F4();
    LODWORD(v79) = sub_19CFDFE78();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      swift_retain();
      sub_19CFDF218();
      swift_release();
      v51 = v74;
      v52 = v67;
      if ((*(unsigned int (**)(char *, uint64_t))(v74 + 88))(v45, v67) == *MEMORY[0x1E0DF2190])
      {
        v53 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v45, v52);
        v53 = "";
      }
      v55 = v75;
      v76(v20, v75, v15);
      v56 = v15;
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      v58 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v49, (os_signpost_type_t)v79, v58, "MakeLazyDependency", v53, v57, 2u);
      v59 = v57;
      v15 = v56;
      MEMORY[0x1A1ADBE9C](v59, -1, -1);

      v54 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
      v54((uint64_t)v55, v56);
      v54((uint64_t)v20, v56);
      v25 = v69;
    }
    else
    {

      v54 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
      v54((uint64_t)v50, v15);
    }
    v61 = v70;
    v60 = v71;
    if (v80)
    {
      v62 = v68;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, *MEMORY[0x1E0CCE198], v68);
      swift_retain();
      sub_19CFDF2A8();
      swift_release();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
    }
    if (v73)
    {
      v87 = &type metadata for IntentDispatchTimeout;
      swift_retain();
      StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v87);
      swift_release();
      swift_release();
      sub_19CDB75B4((uint64_t)v81, v82, 0);
      swift_release();
      swift_release();
      v54((uint64_t)v25, v15);
    }
    else
    {
      v54((uint64_t)v25, v15);
      swift_release();
      sub_19CDB75B4((uint64_t)v81, v82, 0);
      swift_release();
    }
    v63 = v85;
    v64 = v86;
    *(_QWORD *)a1 = v85;
    *(_QWORD *)(a1 + 8) = v64;
    *(_BYTE *)(a1 + 16) = 1;
    v65 = v72;
    *v72 = v63;
    *((_BYTE *)v65 + 8) = v64;
  }
}

uint64_t sub_19CDAFB88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  ValueMetadata *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(ValueMetadata *, uint64_t);
  uint64_t v38;
  NSObject *v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  os_signpost_id_t v45;
  uint64_t v46;
  uint8_t *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  char *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  char *v62;
  uint8_t *v63;
  os_signpost_id_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t);
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  ValueMetadata *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  ValueMetadata *v94;
  _OWORD v95[11];
  char v96;
  _OWORD v97[11];
  char v98;
  char v99;
  uint64_t v100;

  v88 = a2;
  v89 = a3;
  v6 = sub_19CFDF278();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v87 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_19CFDF1E8();
  v82 = *(_QWORD *)(v10 - 8);
  v83 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v81 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19CFDF1AC();
  v93 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v92 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v74 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v74 - v22;
  result = sub_19CCF8C5C(a1, (uint64_t)v97, &qword_1EE43DF28);
  if (v99 == 1)
  {
    v25 = v97[9];
    *(_OWORD *)(a4 + 128) = v97[8];
    *(_OWORD *)(a4 + 144) = v25;
    *(_OWORD *)(a4 + 160) = v97[10];
    *(_BYTE *)(a4 + 176) = v98;
    v26 = v97[5];
    *(_OWORD *)(a4 + 64) = v97[4];
    *(_OWORD *)(a4 + 80) = v26;
    v27 = v97[7];
    *(_OWORD *)(a4 + 96) = v97[6];
    *(_OWORD *)(a4 + 112) = v27;
    v28 = v97[1];
    *(_OWORD *)a4 = v97[0];
    *(_OWORD *)(a4 + 16) = v28;
    v29 = v97[2];
    v30 = v97[3];
    goto LABEL_31;
  }
  v84 = v19;
  v76 = v7;
  v77 = v6;
  v91 = *((_QWORD *)&v97[0] + 1);
  v78 = *(void (**)(uint64_t))&v97[0];
  type metadata accessor for BaseObjectGraph();
  v31 = static BaseObjectGraph.current.getter();
  if (qword_1ECEB1330 != -1)
    swift_once();
  *(_QWORD *)&v95[0] = v31;
  swift_retain();
  swift_task_localValuePush();
  v32 = swift_bridgeObjectRetain();
  v33 = sub_19CD49828(v32);
  swift_bridgeObjectRelease();
  swift_task_localValuePop();
  swift_release();
  v34 = &type metadata for MetricsPipeline;
  if (v33)
  {
    v35 = swift_conformsToProtocol2();
    if (v35)
      v36 = v35;
    else
      v36 = 0;
    if (!v35)
      v34 = 0;
    if (v34)
    {
      v37 = *(void (**)(ValueMetadata *, uint64_t))(v36 + 8);
      swift_retain();
      v37(v34, v36);
      v34 = (ValueMetadata *)sub_19CCCCA74();
      swift_release();
      swift_retain();
      sub_19CFDF29C();
      swift_release();
    }
  }
  else
  {
    v34 = 0;
  }
  v90 = v34;
  if (qword_1EE43B4E8 != -1)
    swift_once();
  v38 = sub_19CFDF1DC();
  __swift_project_value_buffer(v38, (uint64_t)qword_1EE465C48);
  sub_19CFDF1C4();
  swift_unknownObjectRetain();
  sub_19CFDF17C();
  v39 = sub_19CFDF1C4();
  v75 = sub_19CFDFE84();
  v40 = sub_19CFDFF2C();
  v85 = a1;
  v86 = v23;
  v79 = v33;
  if ((v40 & 1) != 0)
  {
    v80 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
    v41 = v84;
    v80(v84, v23, v13);
    v42 = swift_slowAlloc();
    v74 = v13;
    v43 = (uint8_t *)v42;
    v44 = swift_slowAlloc();
    *(_QWORD *)&v95[0] = v44;
    *(_DWORD *)v43 = 136315138;
    v94 = (ValueMetadata *)sub_19CD37070(0x507363697274654DLL, 0xEF656E696C657069, (uint64_t *)v95);
    v23 = v86;
    sub_19CFDFFC8();
    v45 = sub_19CFDF194();
    _os_signpost_emit_with_name_impl(&dword_19CCBB000, v39, (os_signpost_type_t)v75, v45, "MakeLazyDependency", "object=%s", v43, 0xCu);
    swift_arrayDestroy();
    v46 = v44;
    a1 = v85;
    MEMORY[0x1A1ADBE9C](v46, -1, -1);
    v47 = v43;
    v13 = v74;
    MEMORY[0x1A1ADBE9C](v47, -1, -1);

    (*(void (**)(char *, uint64_t))(v93 + 8))(v41, v13);
    v48 = v80;
  }
  else
  {

    v48 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
    v41 = v84;
  }
  v80 = v48;
  v48(v41, v23, v13);
  sub_19CFDF20C();
  swift_allocObject();
  sub_19CFDF200();
  v49 = v91;
  swift_retain();
  v50 = v100;
  sub_19CDA69AC(v78, v49, v88, v89);
  v100 = v50;
  sub_19CCECFE4(a1, &qword_1EE43DF28);
  swift_release();
  v51 = sub_19CFDF1C4();
  v52 = v92;
  sub_19CFDF1F4();
  v53 = v13;
  v54 = sub_19CFDFE78();
  if ((sub_19CFDFF2C() & 1) != 0)
  {
    LODWORD(v89) = v54;
    v55 = v53;
    swift_retain();
    v56 = v81;
    sub_19CFDF218();
    swift_release();
    v58 = v82;
    v57 = v83;
    if ((*(unsigned int (**)(char *, uint64_t))(v82 + 88))(v56, v83) == *MEMORY[0x1E0DF2190])
    {
      v59 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
      v59 = "";
    }
    v61 = v92;
    v62 = v84;
    ((void (*)(void))v80)();
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    v64 = sub_19CFDF194();
    _os_signpost_emit_with_name_impl(&dword_19CCBB000, v51, (os_signpost_type_t)v89, v64, "MakeLazyDependency", v59, v63, 2u);
    MEMORY[0x1A1ADBE9C](v63, -1, -1);

    v60 = *(void (**)(char *, uint64_t))(v93 + 8);
    v60(v61, v55);
    v60(v62, v55);
    v23 = v86;
    if (!v90)
      goto LABEL_27;
  }
  else
  {

    v60 = *(void (**)(char *, uint64_t))(v93 + 8);
    v60(v52, v53);
    v55 = v53;
    if (!v90)
      goto LABEL_27;
  }
  v66 = v76;
  v65 = v77;
  v67 = v87;
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v87, *MEMORY[0x1E0CCE198], v77);
  swift_retain();
  sub_19CFDF2A8();
  swift_release();
  v68 = v67;
  v23 = v86;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
LABEL_27:
  if (v79)
  {
    v94 = &type metadata for MetricsPipeline;
    swift_retain();
    StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v94);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
    v60(v23, v55);
  }
  else
  {
    v60(v23, v55);
    swift_release();
    swift_release();
    swift_release();
  }
  v69 = v85;
  result = sub_19CD50F74((uint64_t)v95, v85);
  *(_BYTE *)(v69 + 177) = 1;
  v70 = v95[9];
  *(_OWORD *)(a4 + 128) = v95[8];
  *(_OWORD *)(a4 + 144) = v70;
  *(_OWORD *)(a4 + 160) = v95[10];
  *(_BYTE *)(a4 + 176) = v96;
  v71 = v95[5];
  *(_OWORD *)(a4 + 64) = v95[4];
  *(_OWORD *)(a4 + 80) = v71;
  v72 = v95[7];
  *(_OWORD *)(a4 + 96) = v95[6];
  *(_OWORD *)(a4 + 112) = v72;
  v73 = v95[1];
  *(_OWORD *)a4 = v95[0];
  *(_OWORD *)(a4 + 16) = v73;
  v29 = v95[2];
  v30 = v95[3];
LABEL_31:
  *(_OWORD *)(a4 + 32) = v29;
  *(_OWORD *)(a4 + 48) = v30;
  return result;
}

__n128 sub_19CDB034C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  ValueMetadata *v34;
  void (*v35)(ValueMetadata *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  char v39;
  char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  os_signpost_id_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  char *v50;
  os_signpost_type_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  char *v58;
  uint8_t *v59;
  os_signpost_id_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  ValueMetadata *v88;
  _OWORD v89[7];
  _OWORD v90[7];
  char v91;
  uint64_t v92;

  v83 = (char *)a3;
  v82 = a2;
  v6 = sub_19CFDF278();
  v81 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_19CFDF1E8();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v10);
  v77 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_19CFDF1AC();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v86 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v69 - v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v69 - v22;
  v87 = a1;
  sub_19CCF8C5C(a1, (uint64_t)v90, &qword_1EE43DEB8);
  if (v91 == 1)
  {
    result = (__n128)v90[3];
    v25 = v90[5];
    v26 = v90[6];
    *(_OWORD *)(a4 + 64) = v90[4];
    *(_OWORD *)(a4 + 80) = v25;
    *(_OWORD *)(a4 + 96) = v26;
    v27 = v90[1];
    v28 = v90[2];
    *(_OWORD *)a4 = v90[0];
    *(_OWORD *)(a4 + 16) = v27;
    *(_OWORD *)(a4 + 32) = v28;
    *(__n128 *)(a4 + 48) = result;
  }
  else
  {
    v80 = v20;
    v72 = v6;
    v85 = *((_QWORD *)&v90[0] + 1);
    v73 = *(void (**)(uint64_t))&v90[0];
    type metadata accessor for BaseObjectGraph();
    v29 = static BaseObjectGraph.current.getter();
    if (qword_1ECEB1330 != -1)
      swift_once();
    *(_QWORD *)&v89[0] = v29;
    swift_retain();
    swift_task_localValuePush();
    v30 = swift_bridgeObjectRetain();
    v31 = sub_19CD49828(v30);
    swift_bridgeObjectRelease();
    swift_task_localValuePop();
    swift_release();
    if (v31
      && ((v32 = swift_conformsToProtocol2()) != 0 ? (v33 = v32) : (v33 = 0),
          v32 ? (v34 = &type metadata for SentryConfiguration) : (v34 = 0),
          v34))
    {
      v35 = *(void (**)(ValueMetadata *, uint64_t))(v33 + 8);
      swift_retain();
      v35(v34, v33);
      v36 = sub_19CCCCA74();
      swift_release();
      swift_retain();
      sub_19CFDF29C();
      swift_release();
    }
    else
    {
      v36 = 0;
    }
    v71 = v9;
    if (qword_1EE43B4E8 != -1)
      swift_once();
    v37 = sub_19CFDF1DC();
    __swift_project_value_buffer(v37, (uint64_t)qword_1EE465C48);
    sub_19CFDF1C4();
    swift_unknownObjectRetain();
    sub_19CFDF17C();
    v38 = sub_19CFDF1C4();
    v70 = sub_19CFDFE84();
    v39 = sub_19CFDFF2C();
    v84 = v36;
    v75 = v13;
    v74 = v31;
    if ((v39 & 1) != 0)
    {
      v76 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      v40 = v80;
      v76(v80, v23, v12);
      v41 = (uint8_t *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      v69 = v12;
      v43 = v42;
      *(_QWORD *)&v89[0] = v42;
      *(_DWORD *)v41 = 136315138;
      v88 = (ValueMetadata *)sub_19CD37070(0xD000000000000013, 0x800000019D06D990, (uint64_t *)v89);
      v13 = v75;
      sub_19CFDFFC8();
      v44 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v38, (os_signpost_type_t)v70, v44, "MakeLazyDependency", "object=%s", v41, 0xCu);
      swift_arrayDestroy();
      v45 = v43;
      v12 = v69;
      MEMORY[0x1A1ADBE9C](v45, -1, -1);
      MEMORY[0x1A1ADBE9C](v41, -1, -1);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v40, v12);
      v46 = v76;
    }
    else
    {

      v46 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      v40 = v80;
    }
    v76 = v46;
    v46(v40, v23, v12);
    sub_19CFDF20C();
    swift_allocObject();
    sub_19CFDF200();
    v47 = v85;
    swift_retain();
    v48 = v92;
    sub_19CDA69AC(v73, v47, v82, (uint64_t)v83);
    v92 = v48;
    sub_19CCECFE4(v87, &qword_1EE43DEB8);
    swift_release();
    v49 = sub_19CFDF1C4();
    v50 = v86;
    sub_19CFDF1F4();
    v51 = sub_19CFDFE78();
    if ((sub_19CFDFF2C() & 1) != 0)
    {
      v83 = v23;
      swift_retain();
      v52 = v77;
      sub_19CFDF218();
      swift_release();
      v53 = v78;
      v54 = v79;
      if ((*(unsigned int (**)(char *, uint64_t))(v78 + 88))(v52, v79) == *MEMORY[0x1E0DF2190])
      {
        v55 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
        v55 = "";
      }
      v57 = v86;
      v58 = v80;
      ((void (*)(void))v76)();
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      v60 = sub_19CFDF194();
      _os_signpost_emit_with_name_impl(&dword_19CCBB000, v49, v51, v60, "MakeLazyDependency", v55, v59, 2u);
      MEMORY[0x1A1ADBE9C](v59, -1, -1);

      v56 = *(void (**)(char *, uint64_t))(v75 + 8);
      v56(v57, v12);
      v56(v58, v12);
      v23 = v83;
    }
    else
    {

      v56 = *(void (**)(char *, uint64_t))(v13 + 8);
      v56(v50, v12);
    }
    if (v84)
    {
      v61 = v23;
      v62 = v81;
      v63 = v71;
      v64 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v71, *MEMORY[0x1E0CCE198], v72);
      swift_retain();
      sub_19CFDF2A8();
      swift_release();
      v65 = *(void (**)(char *, uint64_t))(v62 + 8);
      v23 = v61;
      v65(v63, v64);
    }
    if (v74)
    {
      v88 = &type metadata for SentryConfiguration;
      swift_retain();
      StartUpPerformanceEvent.record(checkpoint:)((uint64_t *)&v88);
      swift_release();
      swift_release();
      swift_release_n();
      swift_release();
      v56(v23, v12);
    }
    else
    {
      v56(v23, v12);
      swift_release();
      swift_release();
      swift_release();
    }
    v66 = v87;
    sub_19CDB767C((uint64_t)v89, v87);
    *(_BYTE *)(v66 + 112) = 1;
    v67 = v89[5];
    *(_OWORD *)(a4 + 64) = v89[4];
    *(_OWORD *)(a4 + 80) = v67;
    *(_OWORD *)(a4 + 96) = v89[6];
    v68 = v89[1];
    *(_OWORD *)a4 = v89[0];
    *(_OWORD *)(a4 + 16) = v68;
    result = (__n128)v89[3];
    *(_OWORD *)(a4 + 32) = v89[2];
    *(__n128 *)(a4 + 48) = result;
  }
  return result;
}

