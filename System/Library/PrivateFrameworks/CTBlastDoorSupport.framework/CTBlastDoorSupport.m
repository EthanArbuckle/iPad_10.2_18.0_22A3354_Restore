void std::__optional_storage_base<ctb::CPIMMessage,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::CPIMMessage,false>>(ctb::CPIMMessage *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 168) == *(unsigned __int8 *)(a2 + 168))
  {
    if (*((_BYTE *)this + 168))
      ctb::CPIMMessage::operator=((uint64_t)this, (__int128 *)a2);
  }
  else if (*((_BYTE *)this + 168))
  {
    ctb::CPIMMessage::~CPIMMessage((void **)this);
    *((_BYTE *)this + 168) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::CPIMMessage,ctb::CPIMMessage,ctb::CPIMMessage*>((uint64_t)this, (__int128 *)a2);
    *((_BYTE *)this + 168) = 1;
  }
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t ctb::CPIMMessage::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v11);
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  std::vector<ctb::CPIMNamespace>::__vdeallocate((void **)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  std::vector<ctb::CPIMEncapsulatedMessage>::__vdeallocate((void **)(a1 + 144));
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  return a1;
}

void std::vector<ctb::CPIMNamespace>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<ctb::CPIMEncapsulatedMessage>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void ctb::CPIMMessage::~CPIMMessage(void **this)
{
  void **v2;

  v2 = this + 18;
  std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 15;
  std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::construct_at[abi:ne180100]<ctb::CPIMMessage,ctb::CPIMMessage,ctb::CPIMMessage*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v6 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v6;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  result = (__n128)a2[9];
  *(__n128 *)(a1 + 144) = result;
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  return result;
}

std::string *std::__optional_copy_base<ctb::CPIMMessage,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::CPIMMessage *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[7].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 168))
  {
    ctb::CPIMMessage::CPIMMessage(this, a2);
    this[7].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_2375A1DDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 168))
    ctb::CPIMMessage::~CPIMMessage((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *ctb::CPIMMessage::CPIMMessage(std::string *this, const ctb::CPIMMessage *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::CPIMNamespace>::__init_with_size[abi:ne180100]<ctb::CPIMNamespace*,ctb::CPIMNamespace*>(this[5].__r_.__value_.__r.__words, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 4));
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::CPIMEncapsulatedMessage>::__init_with_size[abi:ne180100]<ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>(this[6].__r_.__value_.__r.__words, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 4));
  return this;
}

void sub_2375A1F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;

  if (*(char *)(v10 + 95) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2508E4168, MEMORY[0x24BEDAAF0]);
}

void sub_2375A20E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *std::vector<ctb::CPIMNamespace>::__init_with_size[abi:ne180100]<ctb::CPIMNamespace*,ctb::CPIMNamespace*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMNamespace>,ctb::CPIMNamespace*,ctb::CPIMNamespace*,ctb::CPIMNamespace*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A21A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMNamespace>,ctb::CPIMNamespace*,ctb::CPIMNamespace*,ctb::CPIMNamespace*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace&,ctb::CPIMNamespace*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A22CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace&,ctb::CPIMNamespace*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375A2368(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ctb::CPIMEncapsulatedMessage>::__init_with_size[abi:ne180100]<ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::CPIMEncapsulatedMessage>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A23E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::CPIMEncapsulatedMessage>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage&,ctb::CPIMEncapsulatedMessage*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A24F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 80;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(v4 + v2);
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage&,ctb::CPIMEncapsulatedMessage*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (__int128 *)((char *)a2 + 24));
  v5 = (std::string *)((char *)this + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375A25AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2375A2614(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

_BYTE *std::__optional_storage_base<ctb::chatbot::Message,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::Message,false>>(_BYTE *result, uint64_t a2)
{
  char v2;

  if (result[344] == *(_BYTE *)(a2 + 344))
  {
    if (result[344])
      return (_BYTE *)std::__optional_storage_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>>((uint64_t)result, a2);
  }
  else
  {
    if (result[344])
    {
      if (result[336])
        result = (_BYTE *)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)result);
      v2 = 0;
    }
    else
    {
      *result = 0;
      result[336] = 0;
      v2 = 1;
      if (*(_BYTE *)(a2 + 336))
      {
        result = (_BYTE *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)result, a2);
        result[336] = 1;
      }
    }
    result[344] = v2;
  }
  return result;
}

uint64_t std::__optional_storage_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>>(uint64_t result, uint64_t a2)
{
  char v2;

  if (*(unsigned __int8 *)(result + 336) == *(unsigned __int8 *)(a2 + 336))
  {
    if (*(_BYTE *)(result + 336))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(result, a2);
  }
  else
  {
    if (*(_BYTE *)(result + 336))
    {
      result = std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(result);
      v2 = 0;
    }
    else
    {
      result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
      v2 = 1;
    }
    *(_BYTE *)(result + 336) = v2;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 328);
  v4 = *(unsigned int *)(a2 + 328);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2508E4470[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 328) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_2508E4500[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(_BYTE *)(a2 + 320))
  {
    v3 = (void **)(a2 + 296);
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(_BYTE *)(a2 + 288) && *(char *)(a2 + 287) < 0)
    operator delete(*(void **)(a2 + 264));
  if (*(_BYTE *)(a2 + 256) && *(char *)(a2 + 255) < 0)
    operator delete(*(void **)(a2 + 232));
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](a2 + 48);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void **a2)
{
  void **v2;

  v2 = a2;
  std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 232;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 224));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2508E4488[v2])(&v4, a1);
  *(_DWORD *)(a1 + 216) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 72);
  if (*(_BYTE *)(a2 + 56) && *(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2508E4498[v2])(&v4, a1);
  *(_DWORD *)(a1 + 136) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 112) && *(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 128) && *(char *)(a2 + 127) < 0)
    operator delete(*(void **)(a2 + 104));
  if (*(_BYTE *)(a2 + 96) && *(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_BYTE *)(a1 + 168) && *(char *)(a1 + 167) < 0)
      operator delete(*(void **)(a1 + 144));
    if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 272))
  {
    v3 = (void **)(a1 + 248);
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(_BYTE *)(a1 + 240) && *(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  if (*(_BYTE *)(a1 + 208) && *(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  return std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](a1);
}

_OWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<0ul,ctb::chatbot::CardMessage,ctb::chatbot::CardMessage>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage,ctb::chatbot::CardCarouselMessage>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<2ul,ctb::chatbot::SuggestedChipList,ctb::chatbot::SuggestedChipList>(*a1, a2, a3);
}

_OWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<0ul,ctb::chatbot::CardMessage,ctb::chatbot::CardMessage>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 328))
    return (_OWORD *)std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<0ul,ctb::chatbot::CardMessage>(a1, a3);
  else
    return ctb::chatbot::CardMessage::operator=(a2, a3);
}

_OWORD *ctb::chatbot::CardMessage::operator=(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 1), (__n128 *)(a2 + 16));
  std::__optional_storage_base<ctb::chatbot::CardMedia,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardMedia,false>>((uint64_t)(a1 + 3), a2 + 48);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)a1 + 232, (__n128 *)(a2 + 232));
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)a1 + 264, (__n128 *)(a2 + 264));
  std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::SuggestedChipList,false>>((uint64_t)a1 + 296, (__n128 *)(a2 + 296));
  return a1;
}

__n128 std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::__optional_storage_base<ctb::chatbot::CardMedia,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardMedia,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(_BYTE *)(a1 + 176))
      ctb::chatbot::CardMedia::operator=(a1, (__int128 *)a2);
  }
  else if (*(_BYTE *)(a1 + 176))
  {
    std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 176) = 1;
  }
}

uint64_t ctb::chatbot::CardMedia::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 56, (__n128 *)((char *)a2 + 56));
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 88, (__n128 *)((char *)a2 + 88));
  v7 = *(__int128 *)((char *)a2 + 120);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  *(_OWORD *)(a1 + 120) = v7;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 144, (__n128 *)a2 + 9);
  return a1;
}

void std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_BYTE *)(a1 + 168) && *(char *)(a1 + 167) < 0)
      operator delete(*(void **)(a1 + 144));
    if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 176) = 0;
  }
}

__n128 std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  int v8;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v5 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v5;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v6 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v6;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_BYTE *)(a1 + 112) = 1;
  }
  result = *(__n128 *)((char *)a2 + 120);
  v8 = *((_DWORD *)a2 + 34);
  *(_BYTE *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  *(__n128 *)(a1 + 120) = result;
  *(_BYTE *)(a1 + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    result = (__n128)a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(__n128 *)(a1 + 144) = result;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 20) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *(_BYTE *)(a1 + 168) = 1;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::SuggestedChipList,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<ctb::chatbot::SuggestedChip>::__vdeallocate((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::SuggestedChip>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 232;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 - 224));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<0ul,ctb::chatbot::CardMessage>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2508E4470[v4])(&v6, a1);
  *(_DWORD *)(a1 + 328) = -1;
  result = std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(a1, a2);
  *(_DWORD *)(a1 + 328) = 0;
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  v5 = a1 + 48;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(v5, (__int128 *)(a2 + 48));
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    v6 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v6;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  if (*(_BYTE *)(a2 + 288))
  {
    v7 = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = v7;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_BYTE *)(a1 + 288) = 1;
  }
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    v8 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = v8;
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    *(_BYTE *)(a1 + 320) = 1;
  }
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage,ctb::chatbot::CardCarouselMessage>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (*(_DWORD *)(a1 + 328) == 1)
  {
    v5 = *(_QWORD *)a3;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)a2 = v5;
    std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a2 + 16, (__n128 *)(a3 + 16));
    std::vector<ctb::chatbot::CardCarouselContent>::__vdeallocate((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(a1, (uint64_t *)a3);
  }
}

void std::vector<ctb::chatbot::CardCarouselContent>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 280;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v8;

  v4 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2508E4470[v4])(&v8, a1);
  *(_DWORD *)(a1 + 328) = -1;
  v5 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v6;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *(_DWORD *)(a1 + 328) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<2ul,ctb::chatbot::SuggestedChipList,ctb::chatbot::SuggestedChipList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 328) == 2)
  {
    std::vector<ctb::chatbot::SuggestedChip>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<2ul,ctb::chatbot::SuggestedChipList>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<2ul,ctb::chatbot::SuggestedChipList>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2508E4470[v4])(&v6, a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 328) = 2;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2508E4470[v2])(&v4, a1);
  *(_DWORD *)(a1 + 328) = -1;
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 328) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 328);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2508E4470[v4])(&v7, result);
  *(_DWORD *)(v3 + 328) = -1;
  v5 = *(unsigned int *)(a2 + 328);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2508E4518[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 328) = v5;
  }
  return result;
}

_BYTE *std::__optional_copy_base<ctb::chatbot::Message,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[344] = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    std::__optional_copy_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__optional_copy_base[abi:ne180100](a1, a2);
    a1[344] = 1;
  }
  return a1;
}

void sub_2375A39B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 344))
  {
    if (*(_BYTE *)(v1 + 336))
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[336] = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a1, a2);
    a1[336] = 1;
  }
  return a1;
}

void sub_2375A3A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 336))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 328) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2375A3A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  ctb::chatbot::CardMessage *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = (ctb::chatbot::CardMessage *)result;
  v4 = *(unsigned int *)(result + 328);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2508E4470[v4])(&v7, result);
  *((_DWORD *)v3 + 82) = -1;
  v5 = *(unsigned int *)(a2 + 328);
  if ((_DWORD)v5 != -1)
  {
    result = (*(&off_2508E4530 + v5))((int)&v6, v3, (CardMessage *)a2);
    *((_DWORD *)v3 + 82) = v5;
  }
  return result;
}

ctb::chatbot::CardMessage *ctb::chatbot::CardMessage::CardMessage(ctb::chatbot::CardMessage *this, const CardMessage *a2)
{
  *(_OWORD *)this = *(_OWORD *)&a2->fLayout.fCardOrientation;
  std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 16), (__int128 *)&a2->fLayout.fCardStyle.var0.var0);
  std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 2, (const ctb::chatbot::CardMedia *)&a2->fLayout.fCardStyle.var0.var1.fUri.var0);
  std::__optional_copy_base<ctb::chatbot::CardTitle,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 232), (__int128 *)&a2[2].var0.__words[2]);
  std::__optional_copy_base<ctb::chatbot::CardDescription,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 11, (__int128 *)&a2[3].fLayout.fCardStyle.var0.var1.fUri.__r_.__value_.var0.var1.__size_);
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 296, (uint64_t)&a2[3].var0);
  return this;
}

void sub_2375A3B88(_Unwind_Exception *a1)
{
  void **v1;
  char *v2;
  uint64_t v3;
  void **v4;
  void **v5;

  if (v2[288] && v2[287] < 0)
    operator delete(*v5);
  if (v2[256] && v2[255] < 0)
    operator delete(*v4);
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](v3);
  if (v2[40])
  {
    if (v2[39] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2375A3C28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::chatbot::CardMedia *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[7].__r_.__value_.__s.__data_[8] = 0;
  if (*((_BYTE *)a2 + 176))
  {
    ctb::chatbot::CardMedia::CardMedia(this, a2);
    this[7].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_2375A3C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *ctb::chatbot::CardMedia::CardMedia(std::string *this, const ctb::chatbot::CardMedia *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (__int128 *)((char *)a2 + 56));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 88), (__int128 *)((char *)a2 + 88));
  v6 = *(_OWORD *)((char *)a2 + 120);
  LODWORD(this[5].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 34);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 6, (__int128 *)a2 + 9);
  return this;
}

void sub_2375A3D68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardTitle,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2375A3E08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardDescription,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2375A3E50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_2375A3EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::SuggestedChip>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::SuggestedChip>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x11A7B9611A7B962)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(232 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A40A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 224;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2375A40F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 216);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2508E4488[v4])(&v7, result);
  *(_DWORD *)(v3 + 216) = -1;
  v5 = *(unsigned int *)(a2 + 216);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_2508E4548 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 216) = v5;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), (__int128 *)(a2 + 32));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1 + 72, a2 + 72);
  return a1;
}

void sub_2375A4214(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;

  if (v2[56] && v2[55] < 0)
    operator delete(*v3);
  if (v2[31] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2375A427C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2375A42C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 136);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2508E4498[v4])(&v7, result);
  *(_DWORD *)(v3 + 136) = -1;
  v5 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2508E4558[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 136) = v5;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedActionOpenUrlInWebView>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionOpenUrlInWebView const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2375A43F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<2ul,ctb::chatbot::SuggestedActionComposeText>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionComposeText const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375A448C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation const&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<ctb::chatbot::SuggestedActionShowQuery,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 24), (__int128 *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 56), (__int128 *)((char *)a2 + 56));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), (__int128 *)((char *)a2 + 88));
  return a1;
}

void sub_2375A4510(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[80] && v1[79] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::SuggestedActionShowQuery,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2375A4580(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *ctb::chatbot::CreateCalendarEvent::CreateCalendarEvent(std::string *this, const ctb::chatbot::CreateCalendarEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 3, (__int128 *)((char *)a2 + 72));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 104), (__int128 *)((char *)a2 + 104));
  return this;
}

void sub_2375A4674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (__int128 *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (__int128 *)((char *)a2 + 56));
  return this;
}

void sub_2375A4750(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<1ul,ctb::chatbot::SuggestedReply>::__alt[abi:ne180100]<ctb::chatbot::SuggestedReply const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_2375A47E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<1ul,ctb::chatbot::CardCarouselMessage>::__alt[abi:ne180100]<ctb::chatbot::CardCarouselMessage const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 16), (__int128 *)a2 + 1);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<ctb::chatbot::CardCarouselContent>::__init_with_size[abi:ne180100]<ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>((_QWORD *)(a1 + 48), a2[6], a2[7], 0xAF8AF8AF8AF8AF8BLL * ((a2[7] - a2[6]) >> 3));
  return a1;
}

void sub_2375A487C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 40))
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ctb::chatbot::CardCarouselContent>::__init_with_size[abi:ne180100]<ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::CardCarouselContent>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A4904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::CardCarouselContent>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(280 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent&,ctb::chatbot::CardCarouselContent*>((std::string *)(a4 + v7), a2 + v7);
      v7 += 280;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A4A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 280;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(v4 + v2);
      v2 -= 280;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent&,ctb::chatbot::CardCarouselContent*>(std::string *a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](a1, (const ctb::chatbot::CardMedia *)a2);
  std::__optional_copy_base<ctb::chatbot::CardTitle,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 184), (__int128 *)(a2 + 184));
  std::__optional_copy_base<ctb::chatbot::CardDescription,false>::__optional_copy_base[abi:ne180100](a1 + 9, (__int128 *)(a2 + 216));
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_2375A4A9C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[240] && v1[239] < 0)
    operator delete(*v3);
  if (v1[208])
  {
    if (v1[207] < 0)
      operator delete(*v2);
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void **a1)
{
  operator delete(*a1);
}

void std::__optional_storage_base<ctb::chatbot::RenderInformation,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::RenderInformation,false>>(ctb::chatbot::BotInformation *this, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;

  if (*((unsigned __int8 *)this + 680) == *(unsigned __int8 *)(a2 + 680))
  {
    if (*((_BYTE *)this + 680))
    {
      ctb::chatbot::BotInformation::operator=(this, (__n128 *)a2);
      std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::MenuItem,false>>((uint64_t)this + 560, (__n128 *)(a2 + 560));
      *((_BYTE *)this + 592) = *(_BYTE *)(a2 + 592);
      v4 = (void **)((char *)this + 600);
      if (*((char *)this + 623) < 0)
        operator delete(*v4);
      v5 = *(_OWORD *)(a2 + 600);
      *((_QWORD *)this + 77) = *(_QWORD *)(a2 + 616);
      *(_OWORD *)v4 = v5;
      *(_BYTE *)(a2 + 623) = 0;
      *(_BYTE *)(a2 + 600) = 0;
      v6 = (void **)((char *)this + 624);
      if (*((char *)this + 647) < 0)
        operator delete(*v6);
      v7 = *(_OWORD *)(a2 + 624);
      *((_QWORD *)this + 80) = *(_QWORD *)(a2 + 640);
      *(_OWORD *)v6 = v7;
      *(_BYTE *)(a2 + 647) = 0;
      *(_BYTE *)(a2 + 624) = 0;
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)this + 648, (__n128 *)(a2 + 648));
    }
  }
  else if (*((_BYTE *)this + 680))
  {
    std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::reset[abi:ne180100]((void **)this);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation*>((uint64_t)this, a2);
    *((_BYTE *)this + 680) = 1;
  }
}

void std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::reset[abi:ne180100](void **this)
{
  void **v2;

  if (*((_BYTE *)this + 680))
  {
    if (*((_BYTE *)this + 672) && *((char *)this + 671) < 0)
      operator delete(this[81]);
    if (*((char *)this + 647) < 0)
      operator delete(this[78]);
    if (*((char *)this + 623) < 0)
      operator delete(this[75]);
    if (*((_BYTE *)this + 584))
    {
      v2 = this + 70;
      std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)this);
    *((_BYTE *)this + 680) = 0;
  }
}

_BYTE *ctb::chatbot::BotInformation::operator=(_BYTE *a1, __n128 *a2)
{
  std::__optional_storage_base<ctb::chatbot::OrgDetails,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::OrgDetails,false>>(a1, (uint64_t)a2);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 272), a2 + 17);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 304), a2 + 19);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 336), a2 + 21);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 368), a2 + 23);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 400), a2 + 25);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 432), a2 + 27);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 464), a2 + 29);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 496), a2 + 31);
  std::__optional_storage_base<ctb::chatbot::WebResources,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::WebResources,false>>((uint64_t)(a1 + 528), a2 + 33);
  return a1;
}

void std::__optional_storage_base<ctb::chatbot::OrgDetails,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::OrgDetails,false>>(_BYTE *a1, uint64_t a2)
{
  if (a1[264] == *(_BYTE *)(a2 + 264))
  {
    if (a1[264])
      ctb::chatbot::OrgDetails::operator=((uint64_t)a1, a2);
  }
  else if (a1[264])
  {
    std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::reset[abi:ne180100]((uint64_t)a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>(a1, a2);
    a1[264] = 1;
  }
}

uint64_t ctb::chatbot::OrgDetails::operator=(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<ctb::chatbot::CommunicationAddress,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CommunicationAddress,false>>(a1, (__int128 *)a2);
  std::__optional_storage_base<ctb::chatbot::MediaList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::MediaList,false>>(a1 + 104, (__n128 *)(a2 + 104));
  std::__optional_storage_base<ctb::chatbot::OrgName,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::OrgName,false>>(a1 + 136, (__n128 *)(a2 + 136));
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 168, (__n128 *)(a2 + 168));
  std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CategoryList,false>>((std::vector<std::string> *)(a1 + 200), a2 + 200);
  std::__optional_storage_base<ctb::chatbot::WebResources,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::WebResources,false>>(a1 + 232, (__n128 *)(a2 + 232));
  return a1;
}

uint64_t std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(result + 264))
  {
    v1 = result;
    if (*(_BYTE *)(result + 256))
    {
      v2 = (void **)(result + 232);
      std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(_BYTE *)(v1 + 224))
    {
      v2 = (void **)(v1 + 200);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(_BYTE *)(v1 + 192) && *(char *)(v1 + 191) < 0)
      operator delete(*(void **)(v1 + 168));
    if (*(_BYTE *)(v1 + 160))
    {
      v2 = (void **)(v1 + 136);
      std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(_BYTE *)(v1 + 128))
    {
      v2 = (void **)(v1 + 104);
      std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    result = std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](v1);
    *(_BYTE *)(v1 + 264) = 0;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::chatbot::CommunicationAddress,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CommunicationAddress,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(unsigned __int8 *)(a1 + 96) == *((unsigned __int8 *)a2 + 96))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        operator delete(*v5);
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      *((_BYTE *)a2 + 47) = 0;
      *((_BYTE *)a2 + 24) = 0;
      v7 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v7);
      v8 = a2[3];
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_OWORD *)v7 = v8;
      *((_BYTE *)a2 + 71) = 0;
      *((_BYTE *)a2 + 48) = 0;
      std::vector<ctb::chatbot::URIEntry>::__vdeallocate((uint64_t *)(a1 + 72));
      result = *(__n128 *)((char *)a2 + 72);
      *(__n128 *)(a1 + 72) = result;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a2 + 9) = 0;
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v11;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v12 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v12;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    result = *(__n128 *)((char *)a2 + 72);
    *(__n128 *)(a1 + 72) = result;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::reset[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = (void **)(a1 + 72);
    std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 96) = 0;
  }
}

void std::vector<ctb::chatbot::URIEntry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {
    if (*(_BYTE *)(i - 16) && *(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void ctb::chatbot::TelephoneInformation::~TelephoneInformation(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::MediaList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::MediaList,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<ctb::chatbot::MediaEntry>::__vdeallocate((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::MediaEntry>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::OrgName,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::OrgName,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<ctb::chatbot::OrgNameEntry>::__vdeallocate((uint64_t *)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::OrgNameEntry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CategoryList,false>>(std::vector<std::string> *this, uint64_t a2)
{
  __n128 result;
  std::vector<std::string> *v5;

  if (LOBYTE(this[1].__begin_) == *(unsigned __int8 *)(a2 + 24))
  {
    if (LOBYTE(this[1].__begin_))
    {
      std::vector<std::string>::__vdeallocate(this);
      result = *(__n128 *)a2;
      *(_OWORD *)&this->__begin_ = *(_OWORD *)a2;
      this->__end_cap_.__value_ = *(std::string **)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (LOBYTE(this[1].__begin_))
  {
    v5 = this;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
    LOBYTE(this[1].__begin_) = 0;
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    result = *(__n128 *)a2;
    *this = *(std::vector<std::string> *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return result;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::WebResources,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::WebResources,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<ctb::CPIMNamespace>::__vdeallocate((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = (void **)(a1 + 72);
    std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>(_BYTE *a1, uint64_t a2)
{
  _BYTE *v3;
  __n128 result;

  v3 = std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>::__optional_move_base[abi:ne180100](a1, (__int128 *)a2);
  v3[104] = 0;
  v3[128] = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 15) = 0;
    result = *(__n128 *)(a2 + 104);
    *(__n128 *)(v3 + 104) = result;
    *((_QWORD *)v3 + 15) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    v3[128] = 1;
  }
  v3[136] = 0;
  v3[160] = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    *((_QWORD *)v3 + 17) = 0;
    *((_QWORD *)v3 + 18) = 0;
    *((_QWORD *)v3 + 19) = 0;
    result = *(__n128 *)(a2 + 136);
    *(__n128 *)(v3 + 136) = result;
    *((_QWORD *)v3 + 19) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    v3[160] = 1;
  }
  v3[168] = 0;
  v3[192] = 0;
  if (*(_BYTE *)(a2 + 192))
  {
    result = *(__n128 *)(a2 + 168);
    *((_QWORD *)v3 + 23) = *(_QWORD *)(a2 + 184);
    *(__n128 *)(v3 + 168) = result;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    v3[192] = 1;
  }
  v3[200] = 0;
  v3[224] = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    *((_QWORD *)v3 + 25) = 0;
    *((_QWORD *)v3 + 26) = 0;
    *((_QWORD *)v3 + 27) = 0;
    result = *(__n128 *)(a2 + 200);
    *(__n128 *)(v3 + 200) = result;
    *((_QWORD *)v3 + 27) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    v3[224] = 1;
  }
  v3[232] = 0;
  v3[256] = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    *((_QWORD *)v3 + 29) = 0;
    *((_QWORD *)v3 + 30) = 0;
    *((_QWORD *)v3 + 31) = 0;
    result = *(__n128 *)(a2 + 232);
    *(__n128 *)(v3 + 232) = result;
    *((_QWORD *)v3 + 31) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    v3[256] = 1;
  }
  return result;
}

_BYTE *std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>::__optional_move_base[abi:ne180100](_BYTE *a1, __int128 *a2)
{
  *a1 = 0;
  a1[96] = 0;
  std::__optional_storage_base<ctb::chatbot::CommunicationAddress,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<ctb::chatbot::CommunicationAddress,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  if (*((_BYTE *)a2 + 96))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v3 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v4 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v4;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    result = *(__n128 *)((char *)a2 + 72);
    *(__n128 *)(a1 + 72) = result;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::MenuItem,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<ctb::chatbot::MenuL0Content>::__vdeallocate((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::MenuL0Content>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 248;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 - 240));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2508E45C0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 232) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 248;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 240));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2508E45D0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 232) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL2EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL2EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 232;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 224));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 248;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 240));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ctb::chatbot::VerificationDetails::~VerificationDetails(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void ctb::chatbot::BotInformation::~BotInformation(ctb::chatbot::BotInformation *this)
{
  void **v2;

  if (*((_BYTE *)this + 552))
  {
    v2 = (void **)((char *)this + 528);
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((_BYTE *)this + 520) && *((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((_BYTE *)this + 488) && *((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  if (*((_BYTE *)this + 456) && *((char *)this + 455) < 0)
    operator delete(*((void **)this + 54));
  if (*((_BYTE *)this + 424) && *((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  if (*((_BYTE *)this + 392) && *((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((_BYTE *)this + 360) && *((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  if (*((_BYTE *)this + 328) && *((char *)this + 327) < 0)
    operator delete(*((void **)this + 38));
  if (*((_BYTE *)this + 296) && *((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

void ctb::chatbot::PCC::~PCC(void **this)
{
  if (*((_BYTE *)this + 296) && *((char *)this + 295) < 0)
    operator delete(this[34]);
  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

uint64_t std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 264))
  {
    if (*(_BYTE *)(a1 + 256))
    {
      v3 = (void **)(a1 + 232);
      std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v3 = (void **)(a1 + 200);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    if (*(_BYTE *)(a1 + 192) && *(char *)(a1 + 191) < 0)
      operator delete(*(void **)(a1 + 168));
    if (*(_BYTE *)(a1 + 160))
    {
      v3 = (void **)(a1 + 136);
      std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    if (*(_BYTE *)(a1 + 128))
    {
      v3 = (void **)(a1 + 104);
      std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](a1);
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = ctb::chatbot::BotInformation::BotInformation(a1, a2);
  *(_BYTE *)(v3 + 560) = 0;
  *(_BYTE *)(v3 + 584) = 0;
  if (*(_BYTE *)(a2 + 584))
  {
    *(_QWORD *)(v3 + 576) = 0;
    *(_OWORD *)(v3 + 560) = 0u;
    *(_OWORD *)(v3 + 560) = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(v3 + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a2 + 576) = 0;
    *(_OWORD *)(a2 + 560) = 0u;
    *(_BYTE *)(v3 + 584) = 1;
  }
  *(_BYTE *)(v3 + 592) = *(_BYTE *)(a2 + 592);
  v4 = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(v3 + 616) = *(_QWORD *)(a2 + 616);
  *(_OWORD *)(v3 + 600) = v4;
  *(_QWORD *)(a2 + 616) = 0;
  *(_QWORD *)(a2 + 608) = 0;
  *(_QWORD *)(a2 + 600) = 0;
  result = *(__n128 *)(a2 + 624);
  *(_QWORD *)(v3 + 640) = *(_QWORD *)(a2 + 640);
  *(__n128 *)(v3 + 624) = result;
  *(_QWORD *)(a2 + 640) = 0;
  *(_QWORD *)(a2 + 632) = 0;
  *(_QWORD *)(a2 + 624) = 0;
  *(_BYTE *)(v3 + 648) = 0;
  *(_BYTE *)(v3 + 672) = 0;
  if (*(_BYTE *)(a2 + 672))
  {
    result = *(__n128 *)(a2 + 648);
    *(_QWORD *)(v3 + 664) = *(_QWORD *)(a2 + 664);
    *(__n128 *)(v3 + 648) = result;
    *(_QWORD *)(a2 + 664) = 0;
    *(_QWORD *)(a2 + 656) = 0;
    *(_QWORD *)(a2 + 648) = 0;
    *(_BYTE *)(v3 + 672) = 1;
  }
  return result;
}

uint64_t ctb::chatbot::BotInformation::BotInformation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>((_BYTE *)a1, a2);
    *(_BYTE *)(a1 + 264) = 1;
  }
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v4 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v4;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_BYTE *)(a1 + 296) = 1;
  }
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  if (*(_BYTE *)(a2 + 328))
  {
    v5 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = v5;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 304) = 0;
    *(_BYTE *)(a1 + 328) = 1;
  }
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  if (*(_BYTE *)(a2 + 360))
  {
    v6 = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v6;
    *(_QWORD *)(a2 + 344) = 0;
    *(_QWORD *)(a2 + 352) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    *(_BYTE *)(a1 + 360) = 1;
  }
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  if (*(_BYTE *)(a2 + 392))
  {
    v7 = *(_OWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = v7;
    *(_QWORD *)(a2 + 376) = 0;
    *(_QWORD *)(a2 + 384) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_BYTE *)(a1 + 392) = 1;
  }
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  if (*(_BYTE *)(a2 + 424))
  {
    v8 = *(_OWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = v8;
    *(_QWORD *)(a2 + 408) = 0;
    *(_QWORD *)(a2 + 416) = 0;
    *(_QWORD *)(a2 + 400) = 0;
    *(_BYTE *)(a1 + 424) = 1;
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  if (*(_BYTE *)(a2 + 456))
  {
    v9 = *(_OWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = v9;
    *(_QWORD *)(a2 + 440) = 0;
    *(_QWORD *)(a2 + 448) = 0;
    *(_QWORD *)(a2 + 432) = 0;
    *(_BYTE *)(a1 + 456) = 1;
  }
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  if (*(_BYTE *)(a2 + 488))
  {
    v10 = *(_OWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = v10;
    *(_QWORD *)(a2 + 472) = 0;
    *(_QWORD *)(a2 + 480) = 0;
    *(_QWORD *)(a2 + 464) = 0;
    *(_BYTE *)(a1 + 488) = 1;
  }
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  if (*(_BYTE *)(a2 + 520))
  {
    v11 = *(_OWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = v11;
    *(_QWORD *)(a2 + 504) = 0;
    *(_QWORD *)(a2 + 512) = 0;
    *(_QWORD *)(a2 + 496) = 0;
    *(_BYTE *)(a1 + 520) = 1;
  }
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  if (*(_BYTE *)(a2 + 552))
  {
    *(_QWORD *)(a1 + 544) = 0;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a2 + 544) = 0;
    *(_OWORD *)(a2 + 528) = 0u;
    *(_BYTE *)(a1 + 552) = 1;
  }
  return a1;
}

std::string *std::__optional_copy_base<ctb::chatbot::RenderInformation,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::chatbot::RenderInformation *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[28].__r_.__value_.__s.__data_[8] = 0;
  if (*((_BYTE *)a2 + 680))
  {
    ctb::chatbot::RenderInformation::RenderInformation(this, a2);
    this[28].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_2375A6360(_Unwind_Exception *a1)
{
  void **v1;

  std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *ctb::chatbot::RenderInformation::RenderInformation(std::string *this, const ctb::chatbot::RenderInformation *a2)
{
  ctb::chatbot::BotInformation *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  v4 = ctb::chatbot::BotInformation::BotInformation((ctb::chatbot::BotInformation *)this, a2);
  std::__optional_copy_base<ctb::chatbot::MenuItem,false>::__optional_copy_base[abi:ne180100]((uint64_t)v4 + 560, (uint64_t)a2 + 560);
  this[24].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 592);
  if (*((char *)a2 + 623) < 0)
  {
    std::string::__init_copy_ctor_external(this + 25, *((const std::string::value_type **)a2 + 75), *((_QWORD *)a2 + 76));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 600);
    this[25].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 77);
    *(_OWORD *)&this[25].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 26;
  if (*((char *)a2 + 647) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 78), *((_QWORD *)a2 + 79));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 39);
    this[26].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 27, (__int128 *)((char *)a2 + 648));
  return this;
}

void sub_2375A6438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  ctb::chatbot::BotInformation *v10;
  void **v11;

  if (*((char *)v10 + 623) < 0)
    operator delete(*v11);
  if (*((_BYTE *)v10 + 584))
    std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  ctb::chatbot::BotInformation::~BotInformation(v10);
  _Unwind_Resume(a1);
}

ctb::chatbot::BotInformation *ctb::chatbot::BotInformation::BotInformation(ctb::chatbot::BotInformation *this, const ctb::chatbot::BotInformation *a2)
{
  ctb::chatbot::OrgDetails *v4;

  v4 = std::__optional_copy_base<ctb::chatbot::OrgDetails,false>::__optional_copy_base[abi:ne180100](this, a2);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 272), (__int128 *)a2 + 17);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 304), (__int128 *)a2 + 19);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 14, (__int128 *)a2 + 21);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 368), (__int128 *)a2 + 23);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 400), (__int128 *)a2 + 25);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 18, (__int128 *)a2 + 27);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 464), (__int128 *)a2 + 29);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 496), (__int128 *)a2 + 31);
  std::__optional_copy_base<ctb::chatbot::AddressEntryList,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 528, (uint64_t)a2 + 528);
  return this;
}

void sub_2375A6560(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  if (*(_BYTE *)(v1 + 520) && *(char *)(v1 + 519) < 0)
    operator delete(*v8);
  if (*(_BYTE *)(v1 + 488) && *(char *)(v1 + 487) < 0)
    operator delete(*v7);
  if (*(_BYTE *)(v1 + 456) && *(char *)(v1 + 455) < 0)
    operator delete(*v6);
  if (*(_BYTE *)(v1 + 424) && *(char *)(v1 + 423) < 0)
    operator delete(*v5);
  if (*(_BYTE *)(v1 + 392) && *(char *)(v1 + 391) < 0)
    operator delete(*v4);
  if (*(_BYTE *)(v1 + 360) && *(char *)(v1 + 359) < 0)
    operator delete(*v3);
  if (*(_BYTE *)(v1 + 328))
  {
    if (*(char *)(v1 + 327) < 0)
      operator delete(*v2);
  }
  ctb::chatbot::PCC::~PCC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_2375A6654()
{
  uint64_t v0;

  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100](v0);
  JUMPOUT(0x2375A664CLL);
}

ctb::chatbot::OrgDetails *std::__optional_copy_base<ctb::chatbot::OrgDetails,false>::__optional_copy_base[abi:ne180100](ctb::chatbot::OrgDetails *this, const ctb::chatbot::OrgDetails *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    ctb::chatbot::OrgDetails::OrgDetails(this, a2);
    *((_BYTE *)this + 264) = 1;
  }
  return this;
}

void sub_2375A66A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ctb::chatbot::OrgDetails *ctb::chatbot::OrgDetails::OrgDetails(ctb::chatbot::OrgDetails *this, const ctb::chatbot::OrgDetails *a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<ctb::chatbot::CommunicationAddress,false>::__optional_copy_base[abi:ne180100]((std::string *)this, a2);
  std::__optional_copy_base<ctb::chatbot::MediaList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&v4[4].__r_.__value_.__l.__size_, (uint64_t)a2 + 104);
  std::__optional_copy_base<ctb::chatbot::OrgName,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 136), (uint64_t)a2 + 136);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 7, (__int128 *)((char *)a2 + 168));
  std::__optional_copy_base<ctb::chatbot::CategoryList,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 200), (uint64_t)a2 + 200);
  std::__optional_copy_base<ctb::chatbot::WebResources,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 232, (uint64_t)a2 + 232);
  return this;
}

void sub_2375A6744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _BYTE *v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (v2[224])
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2[192] && (char)v2[191] < 0)
    operator delete(*v3);
  if (v2[160])
    std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2[128])
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v2);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::chatbot::CommunicationAddress,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::chatbot::CommunicationAddress *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[4].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    ctb::chatbot::CommunicationAddress::CommunicationAddress(this, a2);
    this[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_2375A680C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *ctb::chatbot::CommunicationAddress::CommunicationAddress(std::string *this, const ctb::chatbot::CommunicationAddress *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::URIEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(this + 3, *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  return this;
}

void sub_2375A68F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<ctb::chatbot::URIEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::URIEntry>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2375A69A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::URIEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  std::string *v4;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v4, (__int128 *)v6);
      v4[1].__r_.__value_.__l.__size_ = *(_QWORD *)(v6 + 32);
      v4 = (std::string *)((char *)v11 + 40);
      v11 = (std::string *)((char *)v11 + 40);
      v6 += 40;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2375A6AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 - 16))
    {
      if (*(char *)(v1 - 17) < 0)
        operator delete(*(void **)(v1 - 40));
    }
    v1 -= 40;
  }
}

uint64_t std::__optional_copy_base<ctb::chatbot::MediaList,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::MediaList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MediaList,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_2375A6BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<ctb::chatbot::MediaList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MediaList,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<ctb::chatbot::MediaEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<ctb::chatbot::MediaEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::MediaEntry>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A6C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::MediaEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry&,ctb::chatbot::MediaEntry*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A6DA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry&,ctb::chatbot::MediaEntry*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), (__int128 *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), (__int128 *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

void sub_2375A6E40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::OrgName,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<ctb::chatbot::OrgName,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::OrgName,false> const&>(a1, a2);
  return a1;
}

void sub_2375A6E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<ctb::chatbot::OrgName,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::OrgName,false> const&>(std::string *result, uint64_t a2)
{
  std::string *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    result = std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(result, *(__int128 **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::OrgNameEntry>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2375A6F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::OrgNameEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  uint64_t v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  LOBYTE(v11) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_2375A70A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

std::string *std::__optional_copy_base<ctb::chatbot::CategoryList,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::CategoryList,false> const&>(a1, a2);
  return a1;
}

void sub_2375A7160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::CategoryList,false> const&>(std::string *result, uint64_t a2)
{
  std::string *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(result, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2375A7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2375A7390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t std::__optional_copy_base<ctb::chatbot::WebResources,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::WebResources,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::WebResources,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_2375A7450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<ctb::chatbot::WebResources,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::WebResources,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<ctb::chatbot::WebEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<ctb::chatbot::WebEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::WebEntry>,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A7528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::WebEntry>,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::WebEntry,ctb::chatbot::WebEntry&,ctb::chatbot::WebEntry*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A75A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::WebEntry,ctb::chatbot::WebEntry&,ctb::chatbot::WebEntry*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375A7640(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<ctb::chatbot::AddressEntryList,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::AddressEntryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::AddressEntryList,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_2375A7690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<ctb::chatbot::AddressEntryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::AddressEntryList,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<ctb::chatbot::AddressEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<ctb::chatbot::AddressEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::AddressEntry>,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A7768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::AddressEntry>,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry&,ctb::chatbot::AddressEntry*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A77E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry&,ctb::chatbot::AddressEntry*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375A7880(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<ctb::chatbot::MenuItem,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MenuItem,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_2375A78D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MenuItem,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<ctb::chatbot::MenuL0Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<ctb::chatbot::MenuL0Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::MenuL0Content>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A79B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::MenuL0Content>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x108421084210843)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(248 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 248;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A7AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 240;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 248;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2375A7B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 232);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2508E45C0[v4])(&v7, result);
  *(_DWORD *)(v3 + 232) = -1;
  v5 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2508E45E0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

std::string *std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL1>::__alt[abi:ne180100]<ctb::chatbot::MenuL1 const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::MenuL1Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_2375A7C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ctb::chatbot::MenuL1Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::MenuL0Content>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL1Content>,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A7CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL1Content>,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 248;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A7D44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 240;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 248;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2375A7D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 232);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2508E45D0[v4])(&v7, result);
  *(_DWORD *)(v3 + 232) = -1;
  v5 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2508E45F0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

std::string *std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL2>::__alt[abi:ne180100]<ctb::chatbot::MenuL2 const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::MenuL2Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0x34F72C234F72C235 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_2375A7EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ctb::chatbot::MenuL2Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::SuggestedChip>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL2Content>,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375A7F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL2Content>,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375A7FB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 224;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void **std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::~__optional_destruct_base[abi:ne180100](void **this)
{
  void **v3;

  if (*((_BYTE *)this + 680))
  {
    if (*((_BYTE *)this + 672) && *((char *)this + 671) < 0)
      operator delete(this[81]);
    if (*((char *)this + 647) < 0)
      operator delete(this[78]);
    if (*((char *)this + 623) < 0)
      operator delete(this[75]);
    if (*((_BYTE *)this + 584))
    {
      v3 = this + 70;
      std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)this);
  }
  return this;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 1152) == *(unsigned __int8 *)(a2 + 1152))
  {
    if (*(_BYTE *)(a1 + 1152))
      ctb::ProvisioningConfiguration::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 1152))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration*>(a1, a2);
    *(_BYTE *)(a1 + 1152) = 1;
  }
}

uint64_t ctb::ProvisioningConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Token,false>>(a1, a2);
  v4 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__optional_storage_base<ctb::ProvisioningConfiguration::AccessControl,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::AccessControl,false>>(a1 + 64, a2 + 64);
  std::__optional_storage_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::IMS3GPP,false>>((ctb::ProvisioningConfiguration::IMS3GPP *)(a1 + 120), a2 + 120);
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Services,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Services,false>>(a1 + 656, (__int128 *)(a2 + 656));
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging,false>>(a1 + 720, a2 + 720);
  v5 = *(_OWORD *)(a2 + 1112);
  v6 = *(_OWORD *)(a2 + 1128);
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
  *(_OWORD *)(a1 + 1112) = v5;
  *(_OWORD *)(a1 + 1128) = v6;
  return a1;
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1152))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](a1 + 720);
    if (*(_BYTE *)(a1 + 712))
      std::__tree<std::string>::destroy(a1 + 688, *(char **)(a1 + 696));
    if (*(_BYTE *)(a1 + 648))
      ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP((ctb::ProvisioningConfiguration::IMS3GPP *)(a1 + 120));
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](a1 + 64);
    if (*(_BYTE *)(a1 + 32))
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
    }
    *(_BYTE *)(a1 + 1152) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Token,false>>(uint64_t a1, uint64_t a2)
{
  void **v4;
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v4 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v4);
      result = *(__n128 *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(__n128 *)v4 = result;
      *(_BYTE *)(a2 + 31) = 0;
      *(_BYTE *)(a2 + 8) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    result = *(__n128 *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(__n128 *)(a1 + 8) = result;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::AccessControl,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::AccessControl,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      std::__tree<std::string>::__move_assign(a1, (_QWORD *)a2);
      std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vdeallocate((void **)(a1 + 24));
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::reset[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (void **)(a1 + 24);
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
    *(_BYTE *)(a1 + 48) = 0;
  }
}

void std::__tree<std::string>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  *a1 = *(_QWORD *)a2;
  v2 = (_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  a1[1] = v3;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(a2 + 16);
  a1[2] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)a2 = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *a1 = v4;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 3) = result;
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::IMS3GPP,false>>(ctb::ProvisioningConfiguration::IMS3GPP *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 528) == *(unsigned __int8 *)(a2 + 528))
  {
    if (*((_BYTE *)this + 528))
      ctb::ProvisioningConfiguration::IMS3GPP::operator=((uint64_t)this, (__int128 *)a2);
  }
  else if (*((_BYTE *)this + 528))
  {
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(this);
    *((_BYTE *)this + 528) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>((uint64_t)this, (__int128 *)a2);
    *((_BYTE *)this + 528) = 1;
  }
}

uint64_t ctb::ProvisioningConfiguration::IMS3GPP::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  uint64_t v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  void **v22;
  __int128 v23;
  void **v24;
  __int128 v25;
  void **v26;
  __int128 v27;
  void **v28;
  __int128 v29;
  void **v30;
  __int128 v31;
  void **v32;
  __int128 v33;
  void **v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 24, (__n128 *)((char *)a2 + 24));
  std::__tree<std::string>::__move_assign(a1 + 56, (_QWORD *)a2 + 7);
  std::__tree<std::string>::__move_assign(a1 + 80, (_QWORD *)a2 + 10);
  v5 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 127) = 0;
  *((_BYTE *)a2 + 104) = 0;
  v7 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*v7);
  v8 = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 151) = 0;
  *((_BYTE *)a2 + 128) = 0;
  v9 = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = v9;
  v10 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*v10);
  v11 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)v10 = v11;
  *((_BYTE *)a2 + 199) = 0;
  *((_BYTE *)a2 + 176) = 0;
  v12 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v12);
  v13 = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)v12 = v13;
  *((_BYTE *)a2 + 223) = 0;
  *((_BYTE *)a2 + 200) = 0;
  v14 = (void **)(a1 + 224);
  if (*(char *)(a1 + 247) < 0)
    operator delete(*v14);
  v15 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)v14 = v15;
  *((_BYTE *)a2 + 247) = 0;
  *((_BYTE *)a2 + 224) = 0;
  v16 = (void **)(a1 + 248);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*v16);
  v17 = *(__int128 *)((char *)a2 + 248);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  *(_OWORD *)v16 = v17;
  *((_BYTE *)a2 + 271) = 0;
  *((_BYTE *)a2 + 248) = 0;
  v18 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
    operator delete(*v18);
  v19 = a2[17];
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_OWORD *)v18 = v19;
  *((_BYTE *)a2 + 295) = 0;
  *((_BYTE *)a2 + 272) = 0;
  v20 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
    operator delete(*v20);
  v21 = *(__int128 *)((char *)a2 + 296);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_OWORD *)v20 = v21;
  *((_BYTE *)a2 + 319) = 0;
  *((_BYTE *)a2 + 296) = 0;
  v22 = (void **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
    operator delete(*v22);
  v23 = a2[20];
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
  *(_OWORD *)v22 = v23;
  *((_BYTE *)a2 + 343) = 0;
  *((_BYTE *)a2 + 320) = 0;
  v24 = (void **)(a1 + 344);
  if (*(char *)(a1 + 367) < 0)
    operator delete(*v24);
  v25 = *(__int128 *)((char *)a2 + 344);
  *(_QWORD *)(a1 + 360) = *((_QWORD *)a2 + 45);
  *(_OWORD *)v24 = v25;
  *((_BYTE *)a2 + 367) = 0;
  *((_BYTE *)a2 + 344) = 0;
  v26 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*v26);
  v27 = a2[23];
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_OWORD *)v26 = v27;
  *((_BYTE *)a2 + 391) = 0;
  *((_BYTE *)a2 + 368) = 0;
  v28 = (void **)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    operator delete(*v28);
  v29 = *(__int128 *)((char *)a2 + 392);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_OWORD *)v28 = v29;
  *((_BYTE *)a2 + 415) = 0;
  *((_BYTE *)a2 + 392) = 0;
  v30 = (void **)(a1 + 416);
  if (*(char *)(a1 + 439) < 0)
    operator delete(*v30);
  v31 = a2[26];
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
  *(_OWORD *)v30 = v31;
  *((_BYTE *)a2 + 439) = 0;
  *((_BYTE *)a2 + 416) = 0;
  v32 = (void **)(a1 + 440);
  if (*(char *)(a1 + 463) < 0)
    operator delete(*v32);
  v33 = *(__int128 *)((char *)a2 + 440);
  *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 57);
  *(_OWORD *)v32 = v33;
  *((_BYTE *)a2 + 463) = 0;
  *((_BYTE *)a2 + 440) = 0;
  v34 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0)
    operator delete(*v34);
  v35 = a2[29];
  *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
  *(_OWORD *)v34 = v35;
  *((_BYTE *)a2 + 487) = 0;
  *((_BYTE *)a2 + 464) = 0;
  v36 = *(__int128 *)((char *)a2 + 488);
  v37 = *(__int128 *)((char *)a2 + 504);
  *(_WORD *)(a1 + 520) = *((_WORD *)a2 + 260);
  *(_OWORD *)(a1 + 488) = v36;
  *(_OWORD *)(a1 + 504) = v37;
  return a1;
}

void ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(ctb::ProvisioningConfiguration::IMS3GPP *this)
{
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  if (*((char *)this + 463) < 0)
    operator delete(*((void **)this + 55));
  if (*((char *)this + 439) < 0)
    operator delete(*((void **)this + 52));
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::__tree<std::string>::destroy((uint64_t)this + 80, *((char **)this + 11));
  std::__tree<std::string>::destroy((uint64_t)this + 56, *((char **)this + 8));
  if (*((_BYTE *)this + 48) && *((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

__n128 std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 result;
  __int128 v29;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v3 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v4 = a2 + 4;
  v5 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = a1 + 64;
  v7 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *((_QWORD *)a2 + 7) = v4;
    *v4 = 0;
    *((_QWORD *)a2 + 9) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v6;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  v8 = (_QWORD *)a2 + 11;
  v9 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = a1 + 88;
  v11 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *((_QWORD *)a2 + 10) = v8;
    *v8 = 0;
    *((_QWORD *)a2 + 12) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v10;
  }
  v12 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v12;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v13 = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_OWORD *)(a1 + 128) = v13;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v14 = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v14;
  v15 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 176) = v15;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  v16 = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(a1 + 200) = v16;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  v17 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 224) = v17;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  v18 = *(__int128 *)((char *)a2 + 248);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  *(_OWORD *)(a1 + 248) = v18;
  *((_QWORD *)a2 + 31) = 0;
  *((_QWORD *)a2 + 32) = 0;
  *((_QWORD *)a2 + 33) = 0;
  v19 = a2[17];
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v19;
  *((_QWORD *)a2 + 34) = 0;
  *((_QWORD *)a2 + 35) = 0;
  *((_QWORD *)a2 + 36) = 0;
  v20 = *(__int128 *)((char *)a2 + 296);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_OWORD *)(a1 + 296) = v20;
  *((_QWORD *)a2 + 37) = 0;
  *((_QWORD *)a2 + 38) = 0;
  *((_QWORD *)a2 + 39) = 0;
  v21 = a2[20];
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
  *(_OWORD *)(a1 + 320) = v21;
  *((_QWORD *)a2 + 40) = 0;
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  v22 = *(__int128 *)((char *)a2 + 344);
  *(_QWORD *)(a1 + 360) = *((_QWORD *)a2 + 45);
  *(_OWORD *)(a1 + 344) = v22;
  *((_QWORD *)a2 + 43) = 0;
  *((_QWORD *)a2 + 44) = 0;
  *((_QWORD *)a2 + 45) = 0;
  v23 = a2[23];
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_OWORD *)(a1 + 368) = v23;
  *((_QWORD *)a2 + 46) = 0;
  *((_QWORD *)a2 + 47) = 0;
  *((_QWORD *)a2 + 48) = 0;
  v24 = *(__int128 *)((char *)a2 + 392);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_OWORD *)(a1 + 392) = v24;
  *((_QWORD *)a2 + 49) = 0;
  *((_QWORD *)a2 + 50) = 0;
  *((_QWORD *)a2 + 51) = 0;
  v25 = a2[26];
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
  *(_OWORD *)(a1 + 416) = v25;
  *((_QWORD *)a2 + 52) = 0;
  *((_QWORD *)a2 + 53) = 0;
  *((_QWORD *)a2 + 54) = 0;
  v26 = *(__int128 *)((char *)a2 + 440);
  *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 57);
  *(_OWORD *)(a1 + 440) = v26;
  *((_QWORD *)a2 + 55) = 0;
  *((_QWORD *)a2 + 56) = 0;
  *((_QWORD *)a2 + 57) = 0;
  v27 = a2[29];
  *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
  *(_OWORD *)(a1 + 464) = v27;
  *((_QWORD *)a2 + 58) = 0;
  *((_QWORD *)a2 + 59) = 0;
  *((_QWORD *)a2 + 60) = 0;
  result = *(__n128 *)((char *)a2 + 488);
  v29 = *(__int128 *)((char *)a2 + 504);
  *(_WORD *)(a1 + 520) = *((_WORD *)a2 + 260);
  *(__n128 *)(a1 + 488) = result;
  *(_OWORD *)(a1 + 504) = v29;
  return result;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Services,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Services,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v3 = *a2;
      *(_OWORD *)(a1 + 11) = *(__int128 *)((char *)a2 + 11);
      *(_OWORD *)a1 = v3;
      std::__tree<std::string>::__move_assign(a1 + 32, (_QWORD *)a2 + 4);
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    std::__tree<std::string>::destroy(a1 + 32, *(char **)(a1 + 40));
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v4 = *a2;
    *(_OWORD *)(a1 + 11) = *(__int128 *)((char *)a2 + 11);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    v5 = (_QWORD *)a2 + 5;
    v6 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a1 + 40;
    v8 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 48) = v8;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      *((_QWORD *)a2 + 4) = v5;
      *v5 = 0;
      *((_QWORD *)a2 + 6) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v7;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging,false>>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(unsigned __int8 *)(a1 + 384) == *(unsigned __int8 *)(a2 + 384))
  {
    if (*(_BYTE *)(a1 + 384))
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)a1 = v4;
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>>(a1 + 24, (__int128 *)(a2 + 24));
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>>(a1 + 120, (__int128 *)(a2 + 120));
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>>(a1 + 264, (__int128 *)(a2 + 264));
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>>(a1 + 336, (__int128 *)(a2 + 336));
    }
  }
  else if (*(_BYTE *)(a1 + 384))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(a1, a2);
    *(_BYTE *)(a1 + 384) = 1;
  }
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 384))
  {
    v1 = result;
    if (*(_BYTE *)(result + 376) && *(char *)(result + 359) < 0)
      operator delete(*(void **)(result + 336));
    if (*(_BYTE *)(v1 + 328))
    {
      if (*(char *)(v1 + 327) < 0)
        operator delete(*(void **)(v1 + 304));
    }
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](v1 + 120);
    result = std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](v1 + 24);
    *(_BYTE *)(v1 + 384) = 0;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __n128 result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        operator delete(*v5);
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      *((_BYTE *)a2 + 47) = 0;
      *((_BYTE *)a2 + 24) = 0;
      v7 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v7);
      result = (__n128)a2[3];
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(__n128 *)v7 = result;
      *((_BYTE *)a2 + 71) = 0;
      *((_BYTE *)a2 + 48) = 0;
      v9 = *((_QWORD *)a2 + 9);
      *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
      *(_QWORD *)(a1 + 72) = v9;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v11;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    result = (__n128)a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v12 = *((_QWORD *)a2 + 9);
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(_QWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 88) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (*(unsigned __int8 *)(a1 + 136) == *((unsigned __int8 *)a2 + 136))
  {
    if (*(_BYTE *)(a1 + 136))
    {
      v4 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v4;
      v5 = (void **)(a1 + 24);
      v6 = (__int128 *)((char *)a2 + 24);
      if (*(char *)(a1 + 47) < 0)
        operator delete(*v5);
      v7 = *v6;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v7;
      *((_BYTE *)a2 + 47) = 0;
      *((_BYTE *)a2 + 24) = 0;
      v8 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v8);
      v9 = a2[3];
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_OWORD *)v8 = v9;
      *((_BYTE *)a2 + 71) = 0;
      *((_BYTE *)a2 + 48) = 0;
      v10 = (void **)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        operator delete(*v10);
      v11 = *(__int128 *)((char *)a2 + 72);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_OWORD *)v10 = v11;
      *((_BYTE *)a2 + 95) = 0;
      *((_BYTE *)a2 + 72) = 0;
      v12 = (void **)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        operator delete(*v12);
      v13 = a2[6];
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      *(_OWORD *)v12 = v13;
      *((_BYTE *)a2 + 119) = 0;
      *((_BYTE *)a2 + 96) = 0;
      result = *(__n128 *)((char *)a2 + 120);
      *(__n128 *)(a1 + 120) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 136))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v15 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v15;
    v16 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v16;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v17 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v17;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v18 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v18;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    v19 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v19;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 120) = result;
    *(_BYTE *)(a1 + 136) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136))
  {
    if (*(char *)(a1 + 119) < 0)
      operator delete(*(void **)(a1 + 96));
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    *(_BYTE *)(a1 + 136) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  void **v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 64) == *((unsigned __int8 *)a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v4 = *a2;
      v5 = a2[1];
      *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
      v6 = (void **)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        operator delete(*v6);
      result = *(__n128 *)((char *)a2 + 40);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      *(__n128 *)v6 = result;
      *((_BYTE *)a2 + 63) = 0;
      *((_BYTE *)a2 + 40) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
    result = *(__n128 *)((char *)a2 + 40);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(__n128 *)(a1 + 40) = result;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __n128 result;
  __int128 v6;

  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      result = *(__n128 *)((char *)a2 + 24);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136))
  {
    if (*(char *)(a1 + 119) < 0)
      operator delete(*(void **)(a1 + 96));
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(__n128 *)a1 = result;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    v3 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    result = *(__n128 *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(__n128 *)(a1 + 72) = result;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    v5 = *(_QWORD *)(a2 + 96);
    *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v5;
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    v6 = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v6;
    v7 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v7;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    v8 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v8;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    v9 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v9;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    v10 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v10;
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    result = *(__n128 *)(a2 + 240);
    *(__n128 *)(a1 + 240) = result;
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  if (*(_BYTE *)(a2 + 328))
  {
    v11 = *(_OWORD *)(a2 + 264);
    v12 = *(_OWORD *)(a2 + 280);
    *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
    *(_OWORD *)(a1 + 264) = v11;
    *(_OWORD *)(a1 + 280) = v12;
    result = *(__n128 *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(__n128 *)(a1 + 304) = result;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 304) = 0;
    *(_BYTE *)(a1 + 328) = 1;
  }
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  if (*(_BYTE *)(a2 + 376))
  {
    v13 = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v13;
    *(_QWORD *)(a2 + 344) = 0;
    *(_QWORD *)(a2 + 352) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    result = *(__n128 *)(a2 + 360);
    *(__n128 *)(a1 + 360) = result;
    *(_BYTE *)(a1 + 376) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 384))
  {
    if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 359) < 0)
      operator delete(*(void **)(a1 + 336));
    if (*(_BYTE *)(a1 + 328) && *(char *)(a1 + 327) < 0)
      operator delete(*(void **)(a1 + 304));
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](a1 + 120);
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](a1 + 24);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = (void **)(a1 + 24);
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  }
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  v7 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>(v7, a2 + 64);
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  if (*(_BYTE *)(a2 + 648))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>(a1 + 120, (__int128 *)(a2 + 120));
    *(_BYTE *)(a1 + 648) = 1;
  }
  std::__optional_move_base<ctb::ProvisioningConfiguration::Services,false>::__optional_move_base[abi:ne180100](a1 + 656, (__int128 *)(a2 + 656));
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 1104) = 0;
  if (*(_BYTE *)(a2 + 1104))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(a1 + 720, a2 + 720);
    *(_BYTE *)(a1 + 1104) = 1;
  }
  v8 = *(_OWORD *)(a2 + 1112);
  v9 = *(_OWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1112) = v8;
  *(_OWORD *)(a1 + 1128) = v9;
  return a1;
}

uint64_t std::__optional_move_base<ctb::ProvisioningConfiguration::Services,false>::__optional_move_base[abi:ne180100](uint64_t result, __int128 *a2)
{
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v2 = *a2;
    *(_OWORD *)(result + 11) = *(__int128 *)((char *)a2 + 11);
    *(_OWORD *)result = v2;
    *(_QWORD *)(result + 32) = *((_QWORD *)a2 + 4);
    v3 = (_QWORD *)a2 + 5;
    v4 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(result + 40) = v4;
    v5 = result + 40;
    v6 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(result + 48) = v6;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      *((_QWORD *)a2 + 4) = v3;
      *v3 = 0;
      *((_QWORD *)a2 + 6) = 0;
    }
    else
    {
      *(_QWORD *)(result + 32) = v5;
    }
    *(_BYTE *)(result + 56) = 1;
  }
  return result;
}

ctb::ProvisioningConfiguration *std::__optional_copy_base<ctb::ProvisioningConfiguration,false>::__optional_copy_base[abi:ne180100](ctb::ProvisioningConfiguration *this, const ctb::ProvisioningConfiguration *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 1152) = 0;
  if (*((_BYTE *)a2 + 1152))
  {
    ctb::ProvisioningConfiguration::ProvisioningConfiguration(this, a2);
    *((_BYTE *)this + 1152) = 1;
  }
  return this;
}

void sub_2375A9950(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ctb::ProvisioningConfiguration *ctb::ProvisioningConfiguration::ProvisioningConfiguration(ctb::ProvisioningConfiguration *this, const ctb::ProvisioningConfiguration *a2)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](this, (uint64_t)a2);
  v5 = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)v4 + 7) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(v4 + 40) = v5;
  std::__optional_copy_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v4 + 64), (uint64_t)a2 + 64);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 5, (const ctb::ProvisioningConfiguration *)((char *)a2 + 120));
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Services,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 656, (__int128 *)a2 + 41);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 720, (uint64_t)a2 + 720);
  v6 = *(_OWORD *)((char *)a2 + 1112);
  v7 = *(_OWORD *)((char *)a2 + 1128);
  *((_QWORD *)this + 143) = *((_QWORD *)a2 + 143);
  *(_OWORD *)((char *)this + 1112) = v6;
  *(_OWORD *)((char *)this + 1128) = v7;
  return this;
}

void sub_2375A99F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  ctb::ProvisioningConfiguration::IMS3GPP *v3;

  if (*(_BYTE *)(v1 + 712))
    ctb::ProvisioningConfiguration::ProvisioningConfiguration(v1);
  if (*(_BYTE *)(v1 + 648))
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(v3);
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](v2);
  if (*(_BYTE *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
    std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__construct[abi:ne180100]<ctb::ProvisioningConfiguration::Token const&>((uint64_t)a1, a2);
  return a1;
}

void sub_2375A9A90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__construct[abi:ne180100]<ctb::ProvisioningConfiguration::Token const&>(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_BYTE *)(a1 + 32) = 1;
}

uint64_t std::__optional_copy_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl const&,ctb::ProvisioningConfiguration::AccessControl*>((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_2375A9B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl const&,ctb::ProvisioningConfiguration::AccessControl*>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = std::set<std::string>::set[abi:ne180100](a1, a2);
  v4[3] = 0;
  v4[4] = 0;
  v4 += 3;
  v4[2] = 0;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(v4, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

void sub_2375A9BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_2375A9C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void **std::__tree<std::string>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *((_BYTE *)a3 + 16) = 1;
}

void sub_2375A9F38(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v2, v3);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375AA314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server&,ctb::ProvisioningConfiguration::AccessControl::Server*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375AA42C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server&,ctb::ProvisioningConfiguration::AccessControl::Server*>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 48);
  return this;
}

{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 48);
  return this;
}

void sub_2375AA4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::ProvisioningConfiguration::IMS3GPP *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[22].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 528))
  {
    ctb::ProvisioningConfiguration::IMS3GPP::IMS3GPP(this, a2);
    this[22].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_2375AA50C(_Unwind_Exception *exception_object)
{
  ctb::ProvisioningConfiguration::IMS3GPP *v1;

  if (*((_BYTE *)v1 + 528))
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(v1);
  _Unwind_Resume(exception_object);
}

std::string *ctb::ProvisioningConfiguration::IMS3GPP::IMS3GPP(std::string *this, const ctb::ProvisioningConfiguration::IMS3GPP *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (__int128 *)((char *)a2 + 24));
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t)a2 + 80);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v5;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 8);
    this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 18);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v6;
  }
  v7 = *(_OWORD *)((char *)a2 + 152);
  this[7].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 21);
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v7;
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 11);
    this[8].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 24);
    *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v8;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 200);
    this[9].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 27);
    *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v9;
  }
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((_QWORD *)a2 + 29));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 14);
    this[10].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v10;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 33);
    *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v11;
  }
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 272), *((const std::string::value_type **)a2 + 34), *((_QWORD *)a2 + 35));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 17);
    this[12].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 36);
    *(_OWORD *)&this[11].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 296), *((const std::string::value_type **)a2 + 37), *((_QWORD *)a2 + 38));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 296);
    this[13].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 39);
    *(_OWORD *)&this[12].__r_.__value_.__r.__words[1] = v13;
  }
  if (*((char *)a2 + 343) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 320), *((const std::string::value_type **)a2 + 40), *((_QWORD *)a2 + 41));
  }
  else
  {
    v14 = *((_OWORD *)a2 + 20);
    this[14].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 42);
    *(_OWORD *)&this[13].__r_.__value_.__r.__words[1] = v14;
  }
  if (*((char *)a2 + 367) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 344), *((const std::string::value_type **)a2 + 43), *((_QWORD *)a2 + 44));
  }
  else
  {
    v15 = *(_OWORD *)((char *)a2 + 344);
    this[15].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 45);
    *(_OWORD *)&this[14].__r_.__value_.__r.__words[1] = v15;
  }
  if (*((char *)a2 + 391) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 368), *((const std::string::value_type **)a2 + 46), *((_QWORD *)a2 + 47));
  }
  else
  {
    v16 = *((_OWORD *)a2 + 23);
    this[16].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 48);
    *(_OWORD *)&this[15].__r_.__value_.__r.__words[1] = v16;
  }
  if (*((char *)a2 + 415) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), *((const std::string::value_type **)a2 + 49), *((_QWORD *)a2 + 50));
  }
  else
  {
    v17 = *(_OWORD *)((char *)a2 + 392);
    this[17].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 51);
    *(_OWORD *)&this[16].__r_.__value_.__r.__words[1] = v17;
  }
  if (*((char *)a2 + 439) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 416), *((const std::string::value_type **)a2 + 52), *((_QWORD *)a2 + 53));
  }
  else
  {
    v18 = *((_OWORD *)a2 + 26);
    this[18].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 54);
    *(_OWORD *)&this[17].__r_.__value_.__r.__words[1] = v18;
  }
  if (*((char *)a2 + 463) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 440), *((const std::string::value_type **)a2 + 55), *((_QWORD *)a2 + 56));
  }
  else
  {
    v19 = *(_OWORD *)((char *)a2 + 440);
    this[19].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 57);
    *(_OWORD *)&this[18].__r_.__value_.__r.__words[1] = v19;
  }
  v20 = (std::string *)((char *)this + 464);
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *((const std::string::value_type **)a2 + 58), *((_QWORD *)a2 + 59));
  }
  else
  {
    v21 = *((_OWORD *)a2 + 29);
    this[20].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 60);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  v22 = *(_OWORD *)((char *)a2 + 488);
  v23 = *(_OWORD *)((char *)a2 + 504);
  LOWORD(this[21].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 260);
  *(_OWORD *)&this[20].__r_.__value_.__r.__words[1] = v22;
  *(_OWORD *)&this[21].__r_.__value_.__l.__data_ = v23;
  return this;
}

void sub_2375AA8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;

  if (*(char *)(v18 + 463) < 0)
    operator delete(*v19);
  if (*(char *)(v18 + 439) < 0)
    operator delete(*v26);
  if (*(char *)(v18 + 415) < 0)
    operator delete(*v25);
  if (*(char *)(v18 + 391) < 0)
    operator delete(*v24);
  if (*(char *)(v18 + 367) < 0)
    operator delete(*v23);
  if (*(char *)(v18 + 343) < 0)
    operator delete(*v22);
  if (*(char *)(v18 + 319) < 0)
    operator delete(*v21);
  if (*(char *)(v18 + 295) < 0)
    operator delete(*v20);
  if (*(char *)(v18 + 271) < 0)
    operator delete(*a10);
  if (*(char *)(v18 + 247) < 0)
    operator delete(*a11);
  if (*(char *)(v18 + 223) < 0)
    operator delete(*a12);
  if (*(char *)(v18 + 199) < 0)
    operator delete(*a13);
  if (*(char *)(v18 + 151) < 0)
    operator delete(*a14);
  if (*(char *)(v18 + 127) < 0)
    operator delete(*a15);
  std::__tree<std::string>::destroy(a17, *(char **)(v18 + 88));
  std::__tree<std::string>::destroy(a18, *(char **)(v18 + 64));
  if (*(_BYTE *)(v18 + 48) && *(char *)(v18 + 47) < 0)
    operator delete(*a16);
  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<ctb::ProvisioningConfiguration::Services,false>::__optional_copy_base[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = *a2;
    *(_OWORD *)(a1 + 11) = *(__int128 *)((char *)a2 + 11);
    *(_OWORD *)a1 = v3;
    std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_2375AAB1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 56))
    std::__tree<std::string>::destroy(v2, *(char **)(v1 + 40));
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[384] = 0;
  if (*(_BYTE *)(a2 + 384))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging const&,ctb::ProvisioningConfiguration::Messaging*>((uint64_t)a1, (__int128 *)a2);
    a1[384] = 1;
  }
  return a1;
}

void sub_2375AAB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging const&,ctb::ProvisioningConfiguration::Messaging*>(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 24), (uint64_t)a2 + 24);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__optional_copy_base[abi:ne180100]((_BYTE *)(a1 + 120), (uint64_t)a2 + 120);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__optional_copy_base[abi:ne180100]((_BYTE *)(a1 + 264), (__int128 *)((char *)a2 + 264));
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 336), a2 + 21);
  return a1;
}

void sub_2375AAC04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v3 + 328))
  {
    if (*(char *)(v3 + 327) < 0)
      operator delete(*(void **)(v3 + 304));
  }
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](v2);
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[16] = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging::Chatbot,ctb::ProvisioningConfiguration::Messaging::Chatbot const&,ctb::ProvisioningConfiguration::Messaging::Chatbot*>(this, (__int128 *)a2);
    this[3].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void sub_2375AAC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging::Chatbot,ctb::ProvisioningConfiguration::Messaging::Chatbot const&,ctb::ProvisioningConfiguration::Messaging::Chatbot*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string::size_type v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 9);
  LOWORD(this[3].__r_.__value_.__r.__words[1]) = *((_WORD *)a2 + 40);
  this[3].__r_.__value_.__r.__words[0] = v8;
  return this;
}

void sub_2375AAD5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[136] = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    ctb::ProvisioningConfiguration::Messaging::FileTransfer::FileTransfer((uint64_t)a1, (__int128 *)a2);
    a1[136] = 1;
  }
  return a1;
}

void sub_2375AADD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ctb::ProvisioningConfiguration::Messaging::FileTransfer::FileTransfer(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v7;
  }
  v8 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  return a1;
}

void sub_2375AAEEC(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[95] < 0)
    operator delete(*v4);
  if (v1[71] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, __int128 *a2)
{
  *a1 = 0;
  a1[64] = 0;
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false> const&>((uint64_t)a1, a2);
  return a1;
}

void sub_2375AAF64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 64))
    std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false> const&>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((_BYTE *)a2 + 64))
  {
    v3 = *a2;
    v4 = a2[1];
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    *(_OWORD *)a1 = v3;
    *(_OWORD *)(a1 + 16) = v4;
    v5 = (std::string *)(a1 + 40);
    if (*((char *)a2 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
    }
    else
    {
      v6 = *(__int128 *)((char *)a2 + 40);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 7);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
}

std::string *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[16] = 0;
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false> const&>(a1, a2);
  return a1;
}

void sub_2375AB018(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __n128 result;

  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)&this[1].__r_.__value_.__l.__data_ = result;
    this[1].__r_.__value_.__s.__data_[16] = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1152))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](a1 + 720);
    if (*(_BYTE *)(a1 + 712))
      std::__tree<std::string>::destroy(a1 + 688, *(char **)(a1 + 696));
    if (*(_BYTE *)(a1 + 648))
      ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP((ctb::ProvisioningConfiguration::IMS3GPP *)(a1 + 120));
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](a1 + 64);
    if (*(_BYTE *)(a1 + 32) && *(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::CPMGroupManagement,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::CPMGroupManagement,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  unsigned __int32 v5;

  if (*(unsigned __int8 *)(a1 + 32) == a2[2].n128_u8[0])
  {
    if (*(_BYTE *)(a1 + 32))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
      v5 = a2[1].n128_u32[2];
      *(_BYTE *)(a1 + 28) = a2[1].n128_u8[12];
      *(_DWORD *)(a1 + 24) = v5;
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

std::string *std::__optional_copy_base<ctb::CPMGroupManagement,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 32))
    std::__optional_storage_base<ctb::CPMGroupManagement,false>::__construct[abi:ne180100]<ctb::CPMGroupManagement const&>(this, (__int128 *)a2);
  return this;
}

void sub_2375AB284(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<ctb::CPMGroupManagement,false>::__construct[abi:ne180100]<ctb::CPMGroupManagement const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__s.__data_[8] = 1;
}

std::string *std::__optional_copy_base<ctb::SIPResourceLists,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::CategoryList,false> const&>(a1, a2);
  return a1;
}

void sub_2375AB3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2375AB4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2375AB53C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

ctb::Client *ctb::Client::Client(ctb::Client *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = objc_opt_new();
  *(_QWORD *)this = v2;
  return this;
}

void sub_2375AB5B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B816038](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void ctb::Client::~Client(id **this)
{
  std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0);
}

void ctb::Client::unpackData<ctb::ProvisioningConfiguration>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackProvisioningXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[1152] = 0;
  }

}

void sub_2375AB6B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::BootstrappingInfo>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackBootstrappingInfoXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }

}

void sub_2375AB75C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::CPIMMessage>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackCPIMMessageData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[168] = 0;
  }

}

void sub_2375AB800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::FileTransferDescriptor>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackFileTransferDescriptorXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[296] = 0;
  }

}

void sub_2375AB8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::GeoPushLocation>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackGeoPushLocationXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[16] = 0;
  }

}

void sub_2375AB948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::IMDispositionNotification>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackIMDNXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[56] = 0;
  }

}

void sub_2375AB9EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::SIPConferenceInfo>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackSIPConferenceInfoXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[96] = 0;
  }

}

void sub_2375ABA90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::SIPResourceLists>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackSIPResourceListsXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }

}

void sub_2375ABB34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::CPMGroupManagement>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackCPMGroupManagementXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }

}

void sub_2375ABBD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::IMCompositionIndication>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackIMCompositionIndicationXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[64] = 0;
  }

}

void sub_2375ABC7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::chatbot::RenderInformation>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackChatBotRenderInformationJSONData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[680] = 0;
  }

}

void sub_2375ABD20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::chatbot::Message>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackChatBotMessageJSONData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[344] = 0;
  }

}

void sub_2375ABDC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::ClientAuthenticityRequest>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackClientAuthenticityRequestXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }

}

void sub_2375ABE68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::IMRevoke>(id **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = 0;
  objc_msgSend(**a1, "unpackIMRevokeXMLData:error:", a2, &v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;
  v8 = v7;
  if (a3 && v7)
    *a3 = v7;
  if (v6)
  {
    objc_msgSend(v6, "wrapped");
  }
  else
  {
    *a4 = 0;
    a4[80] = 0;
  }

}

void sub_2375ABF0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id **std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x23B816038);
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::IMCompositionIndication,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::IMCompositionIndication,false>>(uint64_t a1, __n128 *a2)
{
  __int8 *v4;
  void **v5;
  __int128 v6;
  void **v7;
  __n128 result;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 64) == a2[4].n128_u8[0])
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v4 = &a2->n128_i8[8];
      *(_DWORD *)a1 = a2->n128_u32[0];
      v5 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v5);
      v6 = *(_OWORD *)v4;
      *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
      *(_OWORD *)v5 = v6;
      a2[1].n128_u8[15] = 0;
      a2->n128_u8[8] = 0;
      v7 = (void **)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        operator delete(*v7);
      result = a2[2];
      *(_QWORD *)(a1 + 48) = a2[3].n128_u64[0];
      *(__n128 *)v7 = result;
      a2[3].n128_u8[7] = 0;
      a2[2].n128_u8[0] = 0;
      *(_QWORD *)(a1 + 56) = a2[3].n128_u64[1];
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    std::__optional_destruct_base<ctb::IMCompositionIndication,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_DWORD *)a1 = a2->n128_u32[0];
    v9 = *(__int128 *)((char *)a2 + 8);
    *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
    *(_OWORD *)(a1 + 8) = v9;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
    a2->n128_u64[1] = 0;
    result = a2[2];
    *(_QWORD *)(a1 + 48) = a2[3].n128_u64[0];
    *(__n128 *)(a1 + 32) = result;
    a2[2].n128_u64[1] = 0;
    a2[3].n128_u64[0] = 0;
    a2[2].n128_u64[0] = 0;
    *(_QWORD *)(a1 + 56) = a2[3].n128_u64[1];
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::IMCompositionIndication,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 64) = 0;
  }
}

_BYTE *std::__optional_copy_base<ctb::IMCompositionIndication,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    std::construct_at[abi:ne180100]<ctb::IMCompositionIndication,ctb::IMCompositionIndication const&,ctb::IMCompositionIndication*>((uint64_t)a1, a2);
    a1[64] = 1;
  }
  return a1;
}

void sub_2375AC17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::IMCompositionIndication,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ctb::IMCompositionIndication,ctb::IMCompositionIndication const&,ctb::IMCompositionIndication*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

void sub_2375AC228(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<ctb::IMCompositionIndication,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::IMRevoke,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::IMRevoke,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  if (*(unsigned __int8 *)(a1 + 80) == *((unsigned __int8 *)a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        operator delete(*v5);
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      *((_BYTE *)a2 + 47) = 0;
      *((_BYTE *)a2 + 24) = 0;
      v7 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v7);
      result = (__n128)a2[3];
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(__n128 *)v7 = result;
      *((_BYTE *)a2 + 71) = 0;
      *((_BYTE *)a2 + 48) = 0;
      *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    }
  }
  else if (*(_BYTE *)(a1 + 80))
  {
    std::__optional_destruct_base<ctb::IMRevoke,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v9;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v10 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v10;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    result = (__n128)a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::IMRevoke,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 80) = 0;
  }
}

std::string *std::__optional_copy_base<ctb::IMRevoke,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    std::construct_at[abi:ne180100]<ctb::IMRevoke,ctb::IMRevoke const&,ctb::IMRevoke*>(this, (__int128 *)a2);
    this[3].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_2375AC4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::IMRevoke,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::IMRevoke,ctb::IMRevoke const&,ctb::IMRevoke*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_2375AC5A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<ctb::IMRevoke,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::__optional_storage_base<ctb::FileTransferDescriptor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::FileTransferDescriptor,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 296) == *(unsigned __int8 *)(a2 + 296))
  {
    if (*(_BYTE *)(a1 + 296))
      ctb::FileTransferDescriptor::operator=(a1, (__int128 *)a2);
  }
  else if (*(_BYTE *)(a1 + 296))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 296) = 1;
  }
}

uint64_t ctb::FileTransferDescriptor::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  uint64_t v11;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 24, (__n128 *)((char *)a2 + 24));
  v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 79) = 0;
  *((_BYTE *)a2 + 56) = 0;
  v7 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v7);
  v8 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 103) = 0;
  *((_BYTE *)a2 + 80) = 0;
  v9 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 127) = 0;
  *((_BYTE *)a2 + 104) = 0;
  v11 = *((_QWORD *)a2 + 16);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::FileTransferDescriptor::FileDescriptor,false>>(a1 + 144, a2 + 9);
  return a1;
}

void std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 296))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
    if (*(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(_BYTE *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0)
        operator delete(*(void **)(a1 + 24));
    }
    *(_BYTE *)(a1 + 296) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::FileTransferDescriptor::FileDescriptor,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __n128 result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*(unsigned __int8 *)(a1 + 144) == *((unsigned __int8 *)a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 24, (__n128 *)((char *)a2 + 24));
      v5 = (void **)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        operator delete(*v5);
      v6 = *(__int128 *)((char *)a2 + 56);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_OWORD *)v5 = v6;
      *((_BYTE *)a2 + 79) = 0;
      *((_BYTE *)a2 + 56) = 0;
      v7 = (void **)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        operator delete(*v7);
      v8 = a2[5];
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *(_OWORD *)v7 = v8;
      *((_BYTE *)a2 + 103) = 0;
      *((_BYTE *)a2 + 80) = 0;
      v9 = (void **)(a1 + 104);
      if (*(char *)(a1 + 127) < 0)
        operator delete(*v9);
      result = *(__n128 *)((char *)a2 + 104);
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      *(__n128 *)v9 = result;
      *((_BYTE *)a2 + 127) = 0;
      *((_BYTE *)a2 + 104) = 0;
      v11 = *((_QWORD *)a2 + 16);
      *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
      *(_QWORD *)(a1 + 128) = v11;
    }
  }
  else if (*(_BYTE *)(a1 + 144))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    if (*((_BYTE *)a2 + 48))
    {
      v13 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(a1 + 24) = v13;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *(_BYTE *)(a1 + 48) = 1;
    }
    v14 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v14;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v15 = a2[5];
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a1 + 80) = v15;
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 10) = 0;
    v16 = *(__int128 *)((char *)a2 + 104);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v16;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 13) = 0;
    result = (__n128)a2[8];
    *(__n128 *)(a1 + 128) = result;
    *(_BYTE *)(a1 + 144) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(_BYTE *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0)
        operator delete(*(void **)(a1 + 24));
    }
    *(_BYTE *)(a1 + 144) = 0;
  }
}

uint64_t std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v4 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v4;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v5;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 80) = v6;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 10) = 0;
  v7 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v7;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_move_base[abi:ne180100]((_BYTE *)(a1 + 144), a2 + 9);
  return a1;
}

_BYTE *std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_move_base[abi:ne180100](_BYTE *a1, __int128 *a2)
{
  *a1 = 0;
  a1[144] = 0;
  std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  if (*((_BYTE *)a2 + 144))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    if (*((_BYTE *)a2 + 48))
    {
      v3 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(a1 + 24) = v3;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *(_BYTE *)(a1 + 48) = 1;
    }
    v4 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v4;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v5 = a2[5];
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a1 + 80) = v5;
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 10) = 0;
    v6 = *(__int128 *)((char *)a2 + 104);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v6;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 13) = 0;
    result = (__n128)a2[8];
    *(__n128 *)(a1 + 128) = result;
    *(_BYTE *)(a1 + 144) = 1;
  }
  return result;
}

ctb::FileTransferDescriptor::FileDescriptor *std::__optional_copy_base<ctb::FileTransferDescriptor,false>::__optional_copy_base[abi:ne180100](ctb::FileTransferDescriptor::FileDescriptor *a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor const&,ctb::FileTransferDescriptor*>(a1, a2);
    *((_BYTE *)a1 + 296) = 1;
  }
  return a1;
}

void sub_2375ACCE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ctb::FileTransferDescriptor::FileDescriptor *std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor const&,ctb::FileTransferDescriptor*>(ctb::FileTransferDescriptor::FileDescriptor *a1, uint64_t a2)
{
  ctb::FileTransferDescriptor::FileDescriptor *v4;

  v4 = ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, (const ctb::FileTransferDescriptor::FileDescriptor *)a2);
  std::__optional_copy_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_copy_base[abi:ne180100]((ctb::FileTransferDescriptor::FileDescriptor *)((char *)v4 + 144), (const ctb::FileTransferDescriptor::FileDescriptor *)(a2 + 144));
  return a1;
}

void sub_2375ACD30(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor const&,ctb::FileTransferDescriptor*>(v1);
  _Unwind_Resume(a1);
}

ctb::FileTransferDescriptor::FileDescriptor *ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(ctb::FileTransferDescriptor::FileDescriptor *this, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = v4;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 1, (__int128 *)((char *)a2 + 24));
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)this + 5) = v6;
  }
  v7 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  return this;
}

void sub_2375ACE3C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[103] < 0)
    operator delete(*v4);
  if (v1[79] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ctb::FileTransferDescriptor::FileDescriptor *std::__optional_copy_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_copy_base[abi:ne180100](ctb::FileTransferDescriptor::FileDescriptor *this, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 144) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(this, a2);
    *((_BYTE *)this + 144) = 1;
  }
  return this;
}

void sub_2375ACED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 296))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
    if (*(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::BootstrappingInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::BootstrappingInfo,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 32) == a2[2].n128_u8[0])
  {
    if (*(_BYTE *)(a1 + 32))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
      *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

std::string *std::__optional_copy_base<ctb::BootstrappingInfo,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 32))
    std::__optional_storage_base<ctb::CPMGroupManagement,false>::__construct[abi:ne180100]<ctb::CPMGroupManagement const&>(this, (__int128 *)a2);
  return this;
}

void sub_2375AD0D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<ctb::SIPConferenceInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::SIPConferenceInfo,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::SIPConferenceInfo::Description,false>>(a1, (__n128 *)a2);
      std::vector<ctb::SIPConferenceInfo::User>::__vdeallocate((void ***)(a1 + 72));
      result = *(__n128 *)(a2 + 72);
      *(__n128 *)(a1 + 72) = result;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100]((_BYTE *)a1, (__int128 *)a2);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    result = *(__n128 *)(a2 + 72);
    *(__n128 *)(a1 + 72) = result;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(result + 96))
  {
    v1 = result;
    v2 = (void **)(result + 72);
    std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&v2);
    result = std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
    *(_BYTE *)(v1 + 96) = 0;
  }
  return result;
}

void std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::SIPConferenceInfo::Description,false>>(uint64_t a1, __n128 *a2)
{
  __n128 v4;
  __n128 v5;

  if (*(unsigned __int8 *)(a1 + 64) == a2[4].n128_u8[0])
  {
    if (*(_BYTE *)(a1 + 64))
    {
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1, a2);
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 32, a2 + 2);
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    if (a2[1].n128_u8[8])
    {
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = v4;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2->n128_u64[0] = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 0;
    if (a2[3].n128_u8[8])
    {
      v5 = a2[2];
      *(_QWORD *)(a1 + 48) = a2[3].n128_u64[0];
      *(__n128 *)(a1 + 32) = v5;
      a2[2].n128_u64[1] = 0;
      a2[3].n128_u64[0] = 0;
      a2[2].n128_u64[0] = 0;
      *(_BYTE *)(a1 + 56) = 1;
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
}

void std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
    }
    *(_BYTE *)(a1 + 64) = 0;
  }
}

void std::vector<ctb::SIPConferenceInfo::User>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(uint64_t a1)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo::ReferredInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 40);
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo::ReferredInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a1 + 24) && *(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(_BYTE *)(a1 + 24) && *(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

_BYTE *std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100](_BYTE *a1, __int128 *a2)
{
  *a1 = 0;
  a1[64] = 0;
  std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>>((uint64_t)a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  if (*((_BYTE *)a2 + 64))
  {
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 24) = 0;
    if (*((_BYTE *)a2 + 24))
    {
      v2 = *a2;
      *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v2;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(result + 24) = 1;
    }
    *(_BYTE *)(result + 32) = 0;
    *(_BYTE *)(result + 56) = 0;
    if (*((_BYTE *)a2 + 56))
    {
      v3 = a2[2];
      *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(result + 32) = v3;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *(_BYTE *)(result + 56) = 1;
    }
    *(_BYTE *)(result + 64) = 1;
  }
  return result;
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[4].__r_.__value_.__s.__data_[0] = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo,ctb::SIPConferenceInfo const&,ctb::SIPConferenceInfo*>(a1, a2);
    a1[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_2375AD6A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo,ctb::SIPConferenceInfo const&,ctb::SIPConferenceInfo*>(std::string *a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<ctb::SIPConferenceInfo::Description,false>::__optional_copy_base[abi:ne180100](a1, a2);
  v4[3].__r_.__value_.__r.__words[0] = 0;
  v4[3].__r_.__value_.__l.__size_ = 0;
  v4 += 3;
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(v4, *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  return a1;
}

void sub_2375AD704(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo::Description,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[2].__r_.__value_.__s.__data_[16] = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Description,ctb::SIPConferenceInfo::Description const&,ctb::SIPConferenceInfo::Description*>(a1, (__int128 *)a2);
    a1[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return a1;
}

void sub_2375AD758(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Description,ctb::SIPConferenceInfo::Description const&,ctb::SIPConferenceInfo::Description*>(std::string *a1, __int128 *a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, a2);
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 32), a2 + 2);
  return a1;
}

void sub_2375AD7A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2375AD7E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375AD868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(v4, *v6, v6[1], 0x2E8BA2E8BA2E8BA3 * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2375AD934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375AD9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::SIPConferenceInfo::Endpoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint&,ctb::SIPConferenceInfo::Endpoint*>((std::string *)(a4 + v7), a2 + v7);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375ADAC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint&,ctb::SIPConferenceInfo::Endpoint*>(std::string *a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (__int128 *)a2);
  v4[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  std::__optional_copy_base<ctb::SIPConferenceInfo::ReferredInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 40), a2 + 40);
  a1[3].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 80);
  return a1;
}

{
  std::string *v4;

  v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (__int128 *)a2);
  v4[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  std::__optional_copy_base<ctb::SIPConferenceInfo::ReferredInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 40), a2 + 40);
  a1[3].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 80);
  return a1;
}

void sub_2375ADB2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo::ReferredInfo,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (__int128 *)a2);
    a1[1].__r_.__value_.__s.__data_[8] = 1;
  }
  return a1;
}

void sub_2375ADB88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::SIPConferenceInfo::ReferredInfo,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = (void **)(a1 + 72);
    std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](a1);
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::IMDispositionNotification,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::IMDispositionNotification,false>>(uint64_t a1, __n128 *a2)
{
  __int8 *v4;
  void **v5;
  __int128 v6;
  void **v7;
  __n128 result;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 56) == a2[3].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v4 = &a2->n128_i8[8];
      *(_DWORD *)a1 = a2->n128_u32[0];
      v5 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v5);
      v6 = *(_OWORD *)v4;
      *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
      *(_OWORD *)v5 = v6;
      a2[1].n128_u8[15] = 0;
      a2->n128_u8[8] = 0;
      v7 = (void **)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        operator delete(*v7);
      result = a2[2];
      *(_QWORD *)(a1 + 48) = a2[3].n128_u64[0];
      *(__n128 *)v7 = result;
      a2[3].n128_u8[7] = 0;
      a2[2].n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    std::__optional_destruct_base<ctb::IMDispositionNotification,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_DWORD *)a1 = a2->n128_u32[0];
    v9 = *(__int128 *)((char *)a2 + 8);
    *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
    *(_OWORD *)(a1 + 8) = v9;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
    a2->n128_u64[1] = 0;
    result = a2[2];
    *(_QWORD *)(a1 + 48) = a2[3].n128_u64[0];
    *(__n128 *)(a1 + 32) = result;
    a2[2].n128_u64[1] = 0;
    a2[3].n128_u64[0] = 0;
    a2[2].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::IMDispositionNotification,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 56) = 0;
  }
}

_BYTE *std::__optional_copy_base<ctb::IMDispositionNotification,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[56] = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    std::construct_at[abi:ne180100]<ctb::IMDispositionNotification,ctb::IMDispositionNotification const&,ctb::IMDispositionNotification*>((uint64_t)a1, a2);
    a1[56] = 1;
  }
  return a1;
}

void sub_2375ADE60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::IMDispositionNotification,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ctb::IMDispositionNotification,ctb::IMDispositionNotification const&,ctb::IMDispositionNotification*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2375ADF04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<ctb::IMDispositionNotification,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::ClientAuthenticityRequest,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ClientAuthenticityRequest,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<ctb::ClientAuthenticityRequest::Method>::__vdeallocate((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::ClientAuthenticityRequest::Method>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {
    if (*(_BYTE *)(i - 8))
    {
      v5 = *(void **)(i - 32);
      if (v5)
      {
        *(_QWORD *)(i - 24) = v5;
        operator delete(v5);
      }
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_copy_base<ctb::ClientAuthenticityRequest,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::ClientAuthenticityRequest,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ClientAuthenticityRequest,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_2375AE294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<ctb::ClientAuthenticityRequest,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ClientAuthenticityRequest,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Method>,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375AE374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Method>,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method&,ctb::ClientAuthenticityRequest::Method*>(a4 + v7, a2 + v7);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2375AE3F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method&,ctb::ClientAuthenticityRequest::Method*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 5);
  return a1;
}

{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 5);
  return a1;
}

void sub_2375AE494(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ctb::chatbot::OrgNameEntry>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2375AE514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2375AE5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned char>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_2375AE5FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned char>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2375AE6B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 - 8))
    {
      v3 = *(void **)(v1 - 32);
      if (v3)
      {
        *(_QWORD *)(v1 - 24) = v3;
        operator delete(v3);
      }
    }
    v1 -= 32;
  }
}

uint64_t sub_2375AE794@<X0>(uint64_t a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  std::vector<std::string> *v33;
  uint64_t v34;
  void (*v35)(char *);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::vector<std::string> __x;

  v4 = sub_2375EADE4();
  v49 = MEMORY[0x24BEE4AF8];
  v40 = *(_QWORD *)(v4 + 16);
  if (v40)
  {
    v32 = a1;
    v33 = a2;
    v5 = sub_2375EADC0();
    v6 = *(_QWORD *)(v5 - 8);
    v38 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v39 = v6;
    v7 = *(_QWORD *)(v6 + 72);
    v36 = *(_QWORD *)(v6 + 64);
    v37 = v7;
    v35 = *(void (**)(char *))(v6 + 16);
    v31[1] = v4;
    v8 = swift_bridgeObjectRetain();
    v9 = 0;
    v34 = v5;
    do
    {
      MEMORY[0x24BDAC7A8](v8);
      v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      v35(v11);
      v12 = sub_2375EADB4();
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v42 = v11;
        v43 = v31;
        v44 = v9;
        v48 = MEMORY[0x24BEE4AF8];
        sub_2375D35DC(0, v13, 0);
        isUniquelyReferenced_nonNull_native = sub_2375EADD8();
        v15 = isUniquelyReferenced_nonNull_native;
        v16 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
        v17 = *(unsigned __int8 *)(v16 + 80);
        v41 = v12;
        v18 = v12 + ((v17 + 32) & ~v17);
        v19 = *(_QWORD *)(v16 + 64);
        v46 = *(_QWORD *)(v16 + 72);
        v47 = v16;
        v45 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
        do
        {
          MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
          v45((char *)v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v15);
          __x.__begin_ = (std::vector<std::string>::pointer)sub_2375EADCC();
          __x.__end_ = v20;
          v21 = sub_2375EC2A8();
          v23 = v22;
          (*(void (**)(char *, uint64_t))(v47 + 8))((char *)v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
          v24 = v48;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            isUniquelyReferenced_nonNull_native = sub_2375D35DC(0, *(_QWORD *)(v24 + 16) + 1, 1);
            v24 = v48;
          }
          v26 = *(_QWORD *)(v24 + 16);
          v25 = *(_QWORD *)(v24 + 24);
          if (v26 >= v25 >> 1)
          {
            isUniquelyReferenced_nonNull_native = sub_2375D35DC(v25 > 1, v26 + 1, 1);
            v24 = v48;
          }
          *(_QWORD *)(v24 + 16) = v26 + 1;
          v27 = v24 + 16 * v26;
          *(_QWORD *)(v27 + 32) = v21;
          *(_QWORD *)(v27 + 40) = v23;
          v18 += v46;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        v5 = v34;
        v9 = v44;
        v11 = v42;
      }
      else
      {
        swift_bridgeObjectRelease();
        v24 = MEMORY[0x24BEE4AF8];
      }
      ++v9;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v5);
      v8 = sub_2375B0684(v24);
    }
    while (v9 != v40);
    swift_bridgeObjectRelease_n();
    v28 = v49;
    a1 = v32;
    a2 = v33;
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = MEMORY[0x24BEE4AF8];
  }
  sub_2375D1E80(v28, &__x);
  v29 = sub_2375EADF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
  std::vector<std::string>::vector(a2, &__x);
  return std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&__x, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

_BYTE *sub_2375AEAD8@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4CCC(a1);
}

uint64_t sub_2375AEAE0()
{
  uint64_t v0;

  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::operator BOOL[abi:ne180100](v0);
}

std::string *sub_2375AEAF8@<X0>(std::string *a1@<X8>)
{
  uint64_t v1;
  const std::string *v3;

  v3 = (const std::string *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return std::string::basic_string(a1, v3);
}

_BYTE *sub_2375AEB2C@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4CA0(a1);
}

uint64_t sub_2375AEB34()
{
  uint64_t v0;

  return std::optional<ctb::SIPConferenceInfo::Description>::operator BOOL[abi:ne180100](v0);
}

std::string *sub_2375AEB4C@<X0>(std::string *a1@<X8>)
{
  uint64_t v1;
  const ctb::SIPConferenceInfo::Description *v3;

  v3 = (const ctb::SIPConferenceInfo::Description *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::SIPConferenceInfo::Description::Description(a1, v3);
}

_BYTE *sub_2375AEB80@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B49B8(a1);
}

uint64_t sub_2375AEB88()
{
  uint64_t v0;

  return std::optional<ctb::chatbot::CommunicationAddress>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2375AEBA0@<X0>(ctb::chatbot::CommunicationAddress *a1@<X8>)
{
  uint64_t v1;
  const ctb::chatbot::CommunicationAddress *v3;

  v3 = (const ctb::chatbot::CommunicationAddress *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::CommunicationAddress::CommunicationAddress(a1, v3);
}

ctb::chatbot::MediaList *sub_2375AEBD4@<X0>(ctb::chatbot::MediaList *a1@<X8>)
{
  uint64_t v1;
  const MediaList *v3;

  v3 = (const MediaList *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::MediaList::MediaList(a1, v3);
}

std::string *sub_2375AEC08@<X0>(std::string *a1@<X8>)
{
  uint64_t v1;
  const OrgName *v3;

  v3 = (const OrgName *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::OrgName::OrgName(a1, v3);
}

std::string *sub_2375AEC3C@<X0>(std::string *a1@<X8>)
{
  uint64_t v1;
  const CategoryList *v3;

  v3 = (const CategoryList *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::CategoryList::CategoryList(a1, v3);
}

_QWORD *sub_2375AEC70@<X0>(ctb::chatbot::WebResources *a1@<X8>)
{
  uint64_t v1;
  const WebResources *v3;

  v3 = (const WebResources *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::WebResources::WebResources(a1, v3);
}

_BYTE *sub_2375AECA4@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4974(a1);
}

uint64_t sub_2375AECAC()
{
  uint64_t v0;

  return std::optional<ctb::chatbot::OrgDetails>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2375AECC4@<X0>(ctb::chatbot::OrgDetails *a1@<X8>)
{
  uint64_t v1;
  const ctb::chatbot::OrgDetails *v3;

  v3 = (const ctb::chatbot::OrgDetails *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::OrgDetails::OrgDetails(a1, v3);
}

_QWORD *sub_2375AECF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::AddressEntryList::AddressEntryList(a1, v3);
}

ctb::chatbot::MenuItem *sub_2375AED2C@<X0>(ctb::chatbot::MenuItem *a1@<X8>)
{
  uint64_t v1;
  const ctb::chatbot::MenuItem *v3;

  v3 = (const ctb::chatbot::MenuItem *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::MenuItem::MenuItem(a1, v3);
}

_BYTE *sub_2375AED60@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4C0C(a1);
}

uint64_t sub_2375AED68()
{
  uint64_t v0;

  return std::optional<ctb::chatbot::CardTitleStyle>::operator BOOL[abi:ne180100](v0);
}

_BYTE *sub_2375AED80@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375AED98((uint64_t (*)(int *))std::optional<ctb::chatbot::CardTitleStyle>::operator*[abi:ne180100], a1);
}

_BYTE *sub_2375AED8C@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375AED98((uint64_t (*)(int *))std::optional<ctb::chatbot::CardDescriptionStyle>::operator*[abi:ne180100], a1);
}

_BYTE *sub_2375AED98@<X0>(uint64_t (*a1)(int *)@<X2>, _BYTE *a2@<X8>)
{
  int *v2;
  _BYTE *result;
  char v5;
  char v6;
  int v7;

  v7 = *v2;
  result = (_BYTE *)a1(&v7);
  v5 = result[1];
  v6 = result[2];
  *a2 = *result;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

uint64_t sub_2375AEDE4@<X0>(ctb::SIPConferenceInfo::SubjectExt *a1@<X8>)
{
  uint64_t v1;
  const SubjectExt *v3;

  v3 = (const SubjectExt *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::SIPConferenceInfo::SubjectExt::SubjectExt(a1, v3);
}

_BYTE *sub_2375AEE18@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4B64(a1);
}

uint64_t sub_2375AEE20()
{
  uint64_t v0;

  return std::optional<ctb::chatbot::CardMedia>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2375AEE38@<X0>(ctb::chatbot::CardMedia *a1@<X8>)
{
  uint64_t v1;
  const ctb::chatbot::CardMedia *v3;

  v3 = (const ctb::chatbot::CardMedia *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::CardMedia::CardMedia(a1, v3);
}

_QWORD *sub_2375AEE6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(a1, v3);
}

_BYTE *sub_2375AEEA0@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4B14(a1);
}

uint64_t sub_2375AEEA8()
{
  uint64_t v0;

  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2375AEEC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100](a1, v3);
}

_BYTE *sub_2375AEEF4@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4944(a1);
}

uint64_t sub_2375AEEFC()
{
  uint64_t v0;

  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator BOOL[abi:ne180100](v0);
}

__n128 sub_2375AEF14@<Q0>(__n128 *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __n128 *v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;

  v3 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v6 = v3;
  v4 = (__n128 *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](&v6);
  result = *v4;
  *a1 = *v4;
  return result;
}

uint64_t sub_2375AEF58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = std::set<std::string>::count[abi:ne180100](v2, a1);
  *a2 = result;
  return result;
}

_BYTE *sub_2375AEF88@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4BEC(a1);
}

uint64_t sub_2375AEF90()
{
  uint64_t v0;

  return std::optional<unsigned long>::operator BOOL[abi:ne180100](v0);
}

_QWORD *sub_2375AEFA8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *result;
  _QWORD v5[2];

  v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  result = (_QWORD *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v5);
  *a1 = *result;
  return result;
}

_BYTE *sub_2375AEFE4@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4C2C(a1);
}

uint64_t sub_2375AEFEC()
{
  uint64_t v0;

  return std::optional<ctb::CPMGroupManagement::Response>::operator BOOL[abi:ne180100](v0);
}

_DWORD *sub_2375AF004@<X0>(_DWORD *a1@<X8>)
{
  uint64_t *v1;
  _DWORD *result;
  uint64_t v4;

  v4 = *v1;
  result = (_DWORD *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](&v4);
  *a1 = *result;
  return result;
}

_BYTE *sub_2375AF040@<X0>(_BYTE *a1@<X8>)
{
  return sub_2375B4CF0(a1);
}

uint64_t sub_2375AF048()
{
  uint64_t v0;

  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2375AF060@<X0>(ctb::FileTransferDescriptor::FileDescriptor *a1@<X8>)
{
  uint64_t v1;
  const ctb::FileTransferDescriptor::FileDescriptor *v3;

  v3 = (const ctb::FileTransferDescriptor::FileDescriptor *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, v3);
}

uint64_t sub_2375AF094(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC((unint64_t *)&qword_2567FAAD8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___, (uint64_t)&unk_2375F1F20);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF0E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA28, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SubjectExt_, (uint64_t)&unk_2375F1CB8);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF134(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA30, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_Description_, (uint64_t)&unk_2375F1CD4);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF188@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375AF22C@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 72;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v7, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375AF2C8@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __int128 *v5;
  __n128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (__int128 *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375AF36C@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __int128 *v5;
  void *v7[6];
  std::string v8[2];
  char v9;
  __n128 v10;
  uint64_t v11;

  v10 = 0uLL;
  v11 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v10);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (__int128 *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      ctb::chatbot::AddressEntry::AddressEntry(v8, v5);
      v9 = 0;
      ctb::chatbot::AddressEntry::AddressEntry((uint64_t)v7, (__int128 *)v8);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v8[0].__r_.__value_.__l.__data_);
      std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100]((int64x2_t *)&v10, (uint64_t)v7);
      ctb::chatbot::AddressEntry::~AddressEntry(v7);
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(v8, 0, sizeof(v8));
  v9 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v10);
  std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100]((void **)&v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375AF450@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  const ctb::ClientAuthenticityRequest::Parameter *v5;
  _BYTE v7[32];
  __n128 v8[2];
  char v9;
  __n128 v10;
  uint64_t v11;

  v10 = 0uLL;
  v11 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v10);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (const ctb::ClientAuthenticityRequest::Parameter *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      ctb::ClientAuthenticityRequest::Parameter::Parameter((ctb::ClientAuthenticityRequest::Parameter *)v8, v5);
      v9 = 0;
      std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v7, v8);
      ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)v8);
      std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](&v10, (uint64_t)v7);
      ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)v7);
      v5 = (const ctb::ClientAuthenticityRequest::Parameter *)((char *)v5 + 32);
      --v4;
    }
    while (v4);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(v8, 0, sizeof(v8));
  v9 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v10);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v10, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375AF540@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375AF5E4@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375AF688@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2375AFE4C(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::URIEntry const*,ctb::chatbot::URIEntry const*>, a3);
}

_QWORD *sub_2375AF694(_QWORD *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_2375AF6A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2375AFE4C(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::MediaEntry const*,ctb::chatbot::MediaEntry const*>, a3);
}

_QWORD *sub_2375AF6AC(_QWORD *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_2375AF6B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2375AFE4C(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::OrgNameEntry const*,ctb::chatbot::OrgNameEntry const*>, a3);
}

_QWORD *sub_2375AF6C4(_QWORD *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_2375AF6CC(uint64_t a1)
{
  uint64_t v2;

  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF71C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAAA0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_MediaList_, (uint64_t)&unk_2375F1E5C);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF76C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA98, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_OrgName_, (uint64_t)&unk_2375F1E40);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF7BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA90, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CategoryList_, (uint64_t)&unk_2375F1E24);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF80C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA88, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_WebResources_, (uint64_t)&unk_2375F1E08);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF85C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAAB0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_OrgDetails_, (uint64_t)&unk_2375F1E94);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF8B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2375AFE4C(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::AddressEntry const*,ctb::chatbot::AddressEntry const*>, a3);
}

_QWORD *sub_2375AF8BC(_QWORD *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_2375AF8C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAAB8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_AddressEntryList_, (uint64_t)&unk_2375F1EB0);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF914(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAAE0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_MenuItem_, (uint64_t)&unk_2375F1F3C);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF964(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA50, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitleStyle_, (uint64_t)&unk_2375F1D44);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AF9B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA48, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescriptionStyle_, (uint64_t)&unk_2375F1D28);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFA04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA40, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardStyle_, (uint64_t)&unk_2375F1D0C);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFA54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA78, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardMedia_, (uint64_t)&unk_2375F1DD0);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFAA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA70, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitle_, (uint64_t)&unk_2375F1DB4);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFAF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA68, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescription_, (uint64_t)&unk_2375F1D98);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFB44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA60, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedChipList_, (uint64_t)&unk_2375F1D7C);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFB94(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA80, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_variant____, (uint64_t)&unk_2375F1DEC);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFBE4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAAC8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedActionShowQuery_, (uint64_t)&unk_2375F1EE8);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFC34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAAD0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_, (uint64_t)&unk_2375F1F04);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFC84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAAC0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_PostbackData_, (uint64_t)&unk_2375F1ECC);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFCD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA58, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CUnsignedLong_, (uint64_t)&unk_2375F1D60);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFD28@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2375AFE4C(a1, a2, std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter const*,ctb::ClientAuthenticityRequest::Parameter const*>, a3);
}

uint64_t sub_2375AFD38@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2375AFE4C(a1, a2, std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*,ctb::ClientAuthenticityRequest::Method const*>, a3);
}

_QWORD *sub_2375AFD44(_QWORD *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_2375AFD4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC((unint64_t *)&qword_2567FAA38, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_Response_, (uint64_t)&unk_2375F1CF0);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFD9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA18, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional___, (uint64_t)&unk_2375F1C80);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFDEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2375B42FC(&qword_2567FAA20, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_FileDescriptor_, (uint64_t)&unk_2375F1C9C);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_2375AFE40@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2375AFE4C(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server const*,ctb::ProvisioningConfiguration::AccessControl::Server const*>, a3);
}

uint64_t sub_2375AFE4C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t *, uint64_t *)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  v7 = *a2;
  v8 = v5;
  result = a3(&v8, &v7);
  *a4 = result;
  return result;
}

void (*sub_2375AFE8C(std::string **a1))(void ***a1)
{
  std::string::size_type *v1;
  std::string *v3;
  const ctb::chatbot::URIEntry *v4;

  v3 = (std::string *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].__r_.__value_.__r.__words[2] = *v1;
  v4 = (const ctb::chatbot::URIEntry *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[1].__r_.__value_.__r.__words[2]);
  ctb::chatbot::URIEntry::URIEntry(v3, v4);
  return sub_2375AFEE8;
}

void sub_2375AFEE8(void ***a1)
{
  void *v1;

  ctb::chatbot::URIEntry::~URIEntry(*a1);
  free(v1);
}

_QWORD *sub_2375AFF00@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v4;

  v4 = *v1;
  result = std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_2375AFF3C(ctb::chatbot::MediaEntry **a1))(void ***a1)
{
  _QWORD *v1;
  ctb::chatbot::MediaEntry *v3;
  const ctb::chatbot::MediaEntry *v4;

  v3 = (ctb::chatbot::MediaEntry *)malloc(0x50uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 9) = *v1;
  v4 = (const ctb::chatbot::MediaEntry *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)v3 + 72);
  ctb::chatbot::MediaEntry::MediaEntry(v3, v4);
  return sub_2375AFF98;
}

void sub_2375AFF98(void ***a1)
{
  void *v1;

  ctb::chatbot::MediaEntry::~MediaEntry(*a1);
  free(v1);
}

_QWORD *sub_2375AFFB0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v4;

  v4 = *v1;
  result = std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_2375AFFEC(std::string **a1))(std::basic_string<char16_t> **a1)
{
  std::string::size_type *v1;
  std::string *v3;
  const OrgNameEntry *v4;

  v3 = (std::string *)malloc(0x28uLL);
  *a1 = v3;
  v3[1].__r_.__value_.__l.__size_ = *v1;
  v4 = (const OrgNameEntry *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[1].__r_.__value_.__l.__size_);
  ctb::chatbot::OrgNameEntry::OrgNameEntry(v3, v4);
  return sub_2375B0048;
}

void sub_2375B0048(std::basic_string<char16_t> **a1)
{
  void *v1;

  ctb::chatbot::OrgNameEntry::~OrgNameEntry(*a1);
  free(v1);
}

void (*sub_2375B0060(std::string **a1))(void ***a1)
{
  std::string::size_type *v1;
  std::string *v3;
  __int128 *v4;

  v3 = (std::string *)malloc(0x38uLL);
  *a1 = v3;
  v3[2].__r_.__value_.__r.__words[0] = *v1;
  v4 = (__int128 *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[2]);
  ctb::chatbot::AddressEntry::AddressEntry(v3, v4);
  return sub_2375B00BC;
}

void sub_2375B00BC(void ***a1)
{
  void *v1;

  ctb::chatbot::AddressEntry::~AddressEntry(*a1);
  free(v1);
}

_QWORD *sub_2375B00D4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v4;

  v4 = *v1;
  result = std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_2375B0110(ctb::ClientAuthenticityRequest::Parameter **a1))(ctb::ClientAuthenticityRequest::Parameter **a1)
{
  _QWORD *v1;
  ctb::ClientAuthenticityRequest::Parameter *v3;
  const ctb::ClientAuthenticityRequest::Parameter *v4;

  v3 = (ctb::ClientAuthenticityRequest::Parameter *)malloc(0x28uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = *v1;
  v4 = (const ctb::ClientAuthenticityRequest::Parameter *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)v3 + 32);
  ctb::ClientAuthenticityRequest::Parameter::Parameter(v3, v4);
  return sub_2375B016C;
}

void sub_2375B016C(ctb::ClientAuthenticityRequest::Parameter **a1)
{
  void *v1;

  ctb::ClientAuthenticityRequest::Parameter::~Parameter(*a1);
  free(v1);
}

_QWORD *sub_2375B0184@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v4;

  v4 = *v1;
  result = std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_2375B01C0(ctb::ClientAuthenticityRequest::Method **a1))(void ***a1)
{
  _QWORD *v1;
  ctb::ClientAuthenticityRequest::Method *v3;
  const ctb::ClientAuthenticityRequest::Method *v4;

  v3 = (ctb::ClientAuthenticityRequest::Method *)malloc(0x40uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 7) = *v1;
  v4 = (const ctb::ClientAuthenticityRequest::Method *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)v3 + 56);
  ctb::ClientAuthenticityRequest::Method::Method(v3, v4);
  return sub_2375B021C;
}

void sub_2375B021C(void ***a1)
{
  void *v1;

  ctb::ClientAuthenticityRequest::Method::~Method(*a1);
  free(v1);
}

_QWORD *sub_2375B0234@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v4;

  v4 = *v1;
  result = std::__wrap_iter<ctb::ClientAuthenticityRequest::Method const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_2375B0270(std::string **a1))(char ***a1)
{
  std::string::size_type *v1;
  std::string *v3;
  const ctb::ProvisioningConfiguration::AccessControl::Server *v4;

  v3 = (std::string *)malloc(0x40uLL);
  *a1 = v3;
  v3[2].__r_.__value_.__l.__size_ = *v1;
  v4 = (const ctb::ProvisioningConfiguration::AccessControl::Server *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[2].__r_.__value_.__l.__size_);
  ctb::ProvisioningConfiguration::AccessControl::Server::Server(v3, v4);
  return sub_2375B02CC;
}

void sub_2375B02CC(char ***a1)
{
  void *v1;

  ctb::ProvisioningConfiguration::AccessControl::Server::~Server(*a1);
  free(v1);
}

uint64_t sub_2375B02E4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2375B0338(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::URIEntry const*>);
}

uint64_t sub_2375B02F0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2375B0338(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::MediaEntry const*>);
}

uint64_t sub_2375B02FC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2375B0338(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::OrgNameEntry const*>);
}

uint64_t sub_2375B0308(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2375B0338(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::AddressEntry const*>);
}

uint64_t sub_2375B0314(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2375B0338(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter const*>);
}

uint64_t sub_2375B0320(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2375B0338(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*>);
}

uint64_t sub_2375B032C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2375B0338(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server const*>);
}

uint64_t sub_2375B0338(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  v7 = *a2;
  v8 = v5;
  return a5(&v8, &v7);
}

_QWORD *sub_2375B0368(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2567FA258);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2375B0820(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2375B0478(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2567FA260);
  v10 = *(_QWORD *)(sub_2375EAB98() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_2375EC3D4();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_2375EAB98() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_2375B0914(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_2375B0684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2375B0368(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, const std::vector<std::string> *__x)
{
  return (std::vector<std::string> *)std::vector<std::string>::vector(this, (uint64_t)__x, (void (*)(void))std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B8163A4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2375B0820(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375B0914(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_2375EAB98() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2375B0A6C()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]();
}

uint64_t sub_2375B0A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B0AB0(uint64_t a1, __int128 *a2)
{
  std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional((uint64_t)a2);
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t sub_2375B0B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_StandaloneMsg_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA268);
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

uint64_t sub_2375B0B84()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100]();
}

uint64_t sub_2375B0B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B0BC8(uint64_t a1, __int128 *a2)
{
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional((uint64_t)a2);
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v2 = *a2;
    v3 = a2[1];
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    *(_OWORD *)a1 = v2;
    *(_OWORD *)(a1 + 16) = v3;
    result = *(__n128 *)((char *)a2 + 40);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(__n128 *)(a1 + 40) = result;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

uint64_t sub_2375B0C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100]);
}

uint64_t sub_2375B0C50(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t))
{
  a4();
  a5(a1, a2);
  ((void (*)(uint64_t))a4)(a2);
  return a1;
}

void type metadata accessor for std.__1.optional_Chat_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA270);
}

uint64_t sub_2375B0CBC()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]();
}

uint64_t sub_2375B0CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B0D00(uint64_t a1, __int128 *a2)
{
  __n128 v4;

  v4 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional(a2, v4);
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    v2 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v2;
    v3 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v4 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v4;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v5 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v5;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    v6 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v6;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 120) = result;
    *(_BYTE *)(a1 + 136) = 1;
  }
  return result;
}

uint64_t sub_2375B0DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_FileTransfer_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA278);
}

uint64_t sub_2375B0DF8()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]();
}

uint64_t sub_2375B0E10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B0E3C(uint64_t a1, __int128 *a2)
{
  __n128 v4;

  v4 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional(a2, v4);
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  uint64_t v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v3 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    result = (__n128)a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v5 = *((_QWORD *)a2 + 9);
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(_QWORD *)(a1 + 72) = v5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

uint64_t sub_2375B0EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Chatbot_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA280);
}

void ctb::ProvisioningConfiguration::~ProvisioningConfiguration(ctb::ProvisioningConfiguration *this)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 720);
  if (*((_BYTE *)this + 712))
    std::__tree<std::string>::destroy((uint64_t)this + 688, *((char **)this + 87));
  if (*((_BYTE *)this + 648))
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP((ctb::ProvisioningConfiguration *)((char *)this + 120));
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 64);
  if (*((_BYTE *)this + 32))
  {
    if (*((char *)this + 31) < 0)
      operator delete(*((void **)this + 1));
  }
}

uint64_t sub_2375B0F7C(ctb::ProvisioningConfiguration *a1, const ctb::ProvisioningConfiguration *a2)
{
  return ctb::ProvisioningConfiguration::ProvisioningConfiguration(a1, a2);
}

uint64_t sub_2375B0F94(ctb::ProvisioningConfiguration *a1, const ctb::ProvisioningConfiguration *a2)
{
  ctb::ProvisioningConfiguration *v3;

  ctb::ProvisioningConfiguration::~ProvisioningConfiguration(a1);
  return ctb::ProvisioningConfiguration::ProvisioningConfiguration(v3, a2);
}

uint64_t sub_2375B0FC0(uint64_t a1, ctb::ProvisioningConfiguration *a2)
{
  std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration*>(a1, (uint64_t)a2);
  ctb::ProvisioningConfiguration::~ProvisioningConfiguration(a2);
  return a1;
}

uint64_t sub_2375B0FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::~ProvisioningConfiguration, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration*>);
}

uint64_t sub_2375B1004(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 1152))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B1024(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 1144) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 1152) = v3;
  return result;
}

void type metadata accessor for ctb.ProvisioningConfiguration(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA288);
}

ctb::ProvisioningConfiguration::AccessControl *ctb::ProvisioningConfiguration::AccessControl::AccessControl(ctb::ProvisioningConfiguration::AccessControl *this, const ctb::ProvisioningConfiguration::AccessControl *a2)
{
  uint64_t *v4;

  v4 = std::set<std::string>::set[abi:ne180100]((uint64_t *)this, (uint64_t)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4 += 3;
  v4[2] = 0;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(v4, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_2375B11E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ctb::ProvisioningConfiguration::AccessControl::~AccessControl(char **this)
{
  void **v2;

  v2 = (void **)(this + 3);
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(char *))std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>);
  std::__tree<std::string>::destroy((uint64_t)this, this[1]);
}

ctb::ProvisioningConfiguration::AccessControl *sub_2375B1250(ctb::ProvisioningConfiguration::AccessControl *a1, const ctb::ProvisioningConfiguration::AccessControl *a2)
{
  return ctb::ProvisioningConfiguration::AccessControl::AccessControl(a1, a2);
}

ctb::ProvisioningConfiguration::AccessControl *sub_2375B1268(char **a1, const ctb::ProvisioningConfiguration::AccessControl *a2)
{
  ctb::ProvisioningConfiguration::AccessControl *v3;

  ctb::ProvisioningConfiguration::AccessControl::~AccessControl(a1);
  return ctb::ProvisioningConfiguration::AccessControl::AccessControl(v3, a2);
}

_QWORD *sub_2375B1294(_QWORD *a1, char **a2)
{
  std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>(a1, (uint64_t)a2);
  ctb::ProvisioningConfiguration::AccessControl::~AccessControl(a2);
  return a1;
}

uint64_t sub_2375B12C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::AccessControl::~AccessControl, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>);
}

uint64_t sub_2375B12D8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B12F8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for ctb.ProvisioningConfiguration.AccessControl(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA290);
}

std::string *ctb::ProvisioningConfiguration::AccessControl::Server::Server(std::string *this, const ctb::ProvisioningConfiguration::AccessControl::Server *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 48);
  return this;
}

void sub_2375B13A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ctb::ProvisioningConfiguration::AccessControl::Server::~Server(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *sub_2375B1400(std::string *a1, const ctb::ProvisioningConfiguration::AccessControl::Server *a2)
{
  return ctb::ProvisioningConfiguration::AccessControl::Server::Server(a1, a2);
}

std::string *sub_2375B1418(char **a1, const ctb::ProvisioningConfiguration::AccessControl::Server *a2)
{
  std::string *v3;

  ctb::ProvisioningConfiguration::AccessControl::Server::~Server(a1);
  return ctb::ProvisioningConfiguration::AccessControl::Server::Server(v3, a2);
}

uint64_t sub_2375B1444(uint64_t a1, __int128 *a2)
{
  ctb::ProvisioningConfiguration::AccessControl::Server::Server(a1, a2);
  ctb::ProvisioningConfiguration::AccessControl::Server::~Server((char **)a2);
  return a1;
}

uint64_t ctb::ProvisioningConfiguration::AccessControl::Server::Server(uint64_t result, __int128 *a2)
{
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(result + 24) = *((_QWORD *)a2 + 3);
  v3 = a2 + 2;
  v4 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(result + 32) = v4;
  v5 = result + 32;
  v6 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(result + 40) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *((_QWORD *)a2 + 3) = v3;
    *v3 = 0;
    *((_QWORD *)a2 + 5) = 0;
  }
  else
  {
    *(_QWORD *)(result + 24) = v5;
  }
  *(_BYTE *)(result + 48) = *((_BYTE *)a2 + 48);
  return result;
}

uint64_t sub_2375B14D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::AccessControl::Server::~Server, (void (*)(uint64_t, uint64_t))ctb::ProvisioningConfiguration::AccessControl::Server::Server);
}

uint64_t sub_2375B14E4(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_2375B1538(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

void type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA298);
}

uint64_t std::set<std::string>::~set[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_2375B15CC()
{
  return std::set<std::string>::set[abi:ne180100]();
}

uint64_t sub_2375B15E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::set<std::string>::~set[abi:ne180100](a1);
  return std::set<std::string>::set[abi:ne180100](v3, a2);
}

_QWORD *sub_2375B1610(_QWORD *a1, _QWORD *a2)
{
  std::set<std::string>::set[abi:ne180100](a1, a2);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)a2);
  return a1;
}

_QWORD *std::set<std::string>::set[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *result = *a2;
  v2 = a2 + 1;
  v3 = a2[1];
  result[1] = v3;
  v4 = result + 1;
  v5 = a2[2];
  result[2] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *result = v4;
  }
  return result;
}

uint64_t sub_2375B167C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::set<std::string>::~set[abi:ne180100], (void (*)(uint64_t, uint64_t))std::set<std::string>::set[abi:ne180100]);
}

void type metadata accessor for std.__1.set_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ less_basic_string_CChar_ char_traits_CChar__ allocator_CChar____ allocator_basic_string_CChar_ char_traits_CChar__ allocator_CChar____(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2A0);
}

uint64_t sub_2375B16B0()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100]();
}

uint64_t sub_2375B16C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](v3, a2);
}

_BYTE *sub_2375B16F4(_BYTE *a1, uint64_t a2)
{
  std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional(a2);
  return a1;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[384] = 0;
  if (*(_BYTE *)(a2 + 384))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>((uint64_t)a1, a2);
    a1[384] = 1;
  }
  return a1;
}

uint64_t sub_2375B1764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100]);
}

uint64_t sub_2375B1778(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 392))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B1798(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 392) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_Messaging_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2A8);
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Services>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
    std::__tree<std::string>::destroy(a1 + 32, *(char **)(a1 + 40));
  return a1;
}

uint64_t sub_2375B1878()
{
  return std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100]();
}

uint64_t sub_2375B1890(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::Services>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B18BC(uint64_t a1, uint64_t a2)
{
  std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100]();
  std::optional<ctb::ProvisioningConfiguration::Services>::~optional(a2);
  return a1;
}

uint64_t sub_2375B18F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Services>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Services_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2B0);
}

void std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional(ctb::ProvisioningConfiguration::IMS3GPP *a1)
{
  if (*((_BYTE *)a1 + 528))
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(a1);
}

uint64_t sub_2375B193C()
{
  return std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]();
}

uint64_t sub_2375B1954(ctb::ProvisioningConfiguration::IMS3GPP *a1)
{
  std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]();
}

_BYTE *sub_2375B1980(_BYTE *a1, ctb::ProvisioningConfiguration::IMS3GPP *a2)
{
  std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](a1, (uint64_t)a2);
  std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional(a2);
  return a1;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[528] = 0;
  if (*(_BYTE *)(a2 + 528))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>((uint64_t)a1, (__int128 *)a2);
    a1[528] = 1;
  }
  return a1;
}

uint64_t sub_2375B19F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]);
}

uint64_t sub_2375B1A04(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 536))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B1A24(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 536) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_IMS3GPP_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2B8);
}

uint64_t sub_2375B1AFC()
{
  return std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100]();
}

uint64_t sub_2375B1B14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B1B40(uint64_t a1, uint64_t a2)
{
  std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional(a2);
  return a1;
}

uint64_t std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t sub_2375B1BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_AccessControl_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2C0);
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Token>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32) && *(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_2375B1C18()
{
  return std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100]();
}

uint64_t sub_2375B1C30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::ProvisioningConfiguration::Token>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B1C5C(uint64_t a1, uint64_t a2)
{
  std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Token>::~optional(a2);
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    result = *(__n128 *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(__n128 *)(a1 + 8) = result;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t sub_2375B1CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Token>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Token_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2C8);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_2375B1D00(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B1D20(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for std.__1.optional___(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2D0);
}

uint64_t sub_2375B1D68()
{
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100]();
}

uint64_t sub_2375B1D80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional();
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B1DAC(uint64_t a1, uint64_t a2)
{
  std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100]();
  std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional(a2);
  return a1;
}

uint64_t sub_2375B1DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100]);
}

uint64_t sub_2375B1DF4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 152))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B1E14(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 152) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_FileDescriptor_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2D8);
}

uint64_t sub_2375B1E84()
{
  return std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100]();
}

uint64_t sub_2375B1E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional();
  return std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B1EC8(uint64_t a1, __int128 *a2)
{
  std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional(a2);
  return a1;
}

uint64_t std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](uint64_t result, __int128 *a2)
{
  __int128 v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    *(_BYTE *)(result + 24) = 0;
    if (*((_BYTE *)a2 + 24))
    {
      v2 = *a2;
      *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v2;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(result + 24) = 1;
    }
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t sub_2375B1F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_ReferredInfo_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2E0);
}

uint64_t std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]);
}

void sub_2375B1F74(void **a1)
{
  ctb::chatbot::URIEntry::~URIEntry(a1);
}

void **sub_2375B1F8C(void **a1, __n128 *a2)
{
  uint64_t v4;

  ctb::chatbot::URIEntry::~URIEntry(a1);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v4, a2);
  ctb::chatbot::URIEntry::~URIEntry((void **)a2);
  return a1;
}

void type metadata accessor for std.__1.optional_SubjectExt_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2E8);
}

_QWORD *std::vector<ctb::SIPConferenceInfo::User>::vector(_QWORD *a1, uint64_t a2)
{
  return std::vector<std::string>::vector(a1, a2, (void (*)(void))std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>);
}

_QWORD *std::vector<std::string>::vector(_QWORD *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t sub_2375B2030(uint64_t a1)
{
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
}

_QWORD *sub_2375B204C(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::SIPConferenceInfo::User>::vector(a1, a2);
}

_QWORD *sub_2375B2064(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::SIPConferenceInfo::User>::vector(v3, a2);
}

__n128 *sub_2375B2098(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)a2, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B20D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B53DC(a1, a2, a3, (uint64_t)std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_User_ allocator_User__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2F0);
}

uint64_t sub_2375B210C()
{
  return std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100]();
}

uint64_t sub_2375B2124(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::SIPConferenceInfo::Description>::~optional();
  return std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B2150(uint64_t a1, uint64_t a2)
{
  std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100]();
  std::optional<ctb::SIPConferenceInfo::Description>::~optional(a2);
  return a1;
}

uint64_t sub_2375B2184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::SIPConferenceInfo::Description>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Description_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA2F8);
}

void type metadata accessor for std.__1.optional_Response_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA300);
}

std::string *ctb::chatbot::CardCarouselContent::CardCarouselContent(std::string *a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](a1, (const ctb::chatbot::CardMedia *)a2);
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 184), (__int128 *)(a2 + 184));
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100](a1 + 9, (__int128 *)(a2 + 216));
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_2375B221C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[240] && v1[239] < 0)
    operator delete(*v3);
  if (v1[208])
  {
    if (v1[207] < 0)
      operator delete(*v2);
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

std::string *sub_2375B2274(std::string *a1, uint64_t a2)
{
  return ctb::chatbot::CardCarouselContent::CardCarouselContent(a1, a2);
}

std::string *sub_2375B228C(uint64_t a1, uint64_t a2)
{
  std::string *v3;

  v3 = (std::string *)std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(a1);
  return ctb::chatbot::CardCarouselContent::CardCarouselContent(v3, a2);
}

uint64_t sub_2375B22B8(uint64_t a1, uint64_t a2)
{
  ctb::chatbot::CardCarouselContent::CardCarouselContent(a1, a2);
  std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(a2);
  return a1;
}

uint64_t ctb::chatbot::CardCarouselContent::CardCarouselContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    v4 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v4;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_BYTE *)(a1 + 208) = 1;
  }
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if (*(_BYTE *)(a2 + 240))
  {
    v5 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v5;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    *(_BYTE *)(a1 + 240) = 1;
  }
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_BYTE *)(a1 + 272) = 1;
  }
  return a1;
}

uint64_t sub_2375B23D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>, (void (*)(uint64_t, uint64_t))ctb::chatbot::CardCarouselContent::CardCarouselContent);
}

uint64_t sub_2375B23E8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 280))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B2408(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 280) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.CardCarouselContent(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA308);
}

uint64_t sub_2375B2490(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B24A8(void **a1, uint64_t a2)
{
  uint64_t v3;

  ctb::chatbot::URIEntry::~URIEntry(a1);
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B24D4(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2);
  ctb::chatbot::URIEntry::~URIEntry((void **)a2);
  return a1;
}

void type metadata accessor for std.__1.optional_CardStyle_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA310);
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for std.__1.optional_CardDescriptionStyle_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA318);
}

uint64_t sub_2375B2538(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B2558(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_CardTitleStyle_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA320);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for std.__1.optional_CUnsignedLong_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA328);
}

uint64_t std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_2375B25C0(uint64_t a1)
{
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375B25DC(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B25F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B2628(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)a2, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B2660(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_2375B3308(a1, a2, a3, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_SuggestedChipList_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA330);
}

void type metadata accessor for std.__1.optional_CardDescription_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA338);
}

void type metadata accessor for std.__1.optional_CardTitle_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA340);
}

uint64_t sub_2375B26B4()
{
  return std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100]();
}

uint64_t sub_2375B26CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::CardMedia>::~optional();
  return std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v3, a2);
}

_BYTE *sub_2375B26F8(_BYTE *a1, uint64_t a2)
{
  std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::CardMedia>::~optional(a2);
  return a1;
}

_BYTE *std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[176] = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>((uint64_t)a1, (__int128 *)a2);
    a1[176] = 1;
  }
  return a1;
}

uint64_t sub_2375B2768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::chatbot::CardMedia>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100]);
}

uint64_t sub_2375B277C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 184))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B279C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 184) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_CardMedia_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA348);
}

uint64_t std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional(uint64_t result)
{
  if (*(_BYTE *)(result + 336))
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(result);
  return result;
}

uint64_t sub_2375B282C()
{
  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100]();
}

uint64_t sub_2375B2844(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional(a1);
  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v3, a2);
}

_BYTE *sub_2375B2870(_BYTE *a1, uint64_t a2)
{
  std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](a1, a2);
  std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional(a2);
  return a1;
}

_BYTE *std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](_BYTE *result, uint64_t a2)
{
  *result = 0;
  result[336] = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    result = (_BYTE *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)result, a2);
    result[336] = 1;
  }
  return result;
}

uint64_t sub_2375B28CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional, (void (*)(uint64_t, uint64_t))std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100]);
}

uint64_t sub_2375B28E0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 344))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B2900(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 344) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_variant____(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA350);
}

std::string *ctb::chatbot::OrgNameEntry::OrgNameEntry(std::string *this, const OrgNameEntry *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  return this;
}

void sub_2375B29EC(std::basic_string<char16_t> *a1)
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
}

std::string *sub_2375B2A00(std::string *a1, const OrgNameEntry *a2)
{
  return ctb::chatbot::OrgNameEntry::OrgNameEntry(a1, a2);
}

std::string *sub_2375B2A18(std::basic_string<char16_t> *a1, const OrgNameEntry *a2)
{
  std::string *v3;

  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return ctb::chatbot::OrgNameEntry::OrgNameEntry(v3, a2);
}

__n128 *sub_2375B2A44(__n128 *a1, __n128 *a2)
{
  ctb::chatbot::OrgNameEntry::OrgNameEntry(a1, a2);
  ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a2);
  return a1;
}

__n128 ctb::chatbot::OrgNameEntry::OrgNameEntry(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  return result;
}

std::basic_string<char16_t> *sub_2375B2A98(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3)
{
  return sub_2375B2AA4(a1, a2, a3, (void (*)(void))ctb::chatbot::OrgNameEntry::OrgNameEntry);
}

std::basic_string<char16_t> *sub_2375B2AA4(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3, void (*a4)(void))
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  a4();
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a2);
  return a1;
}

void type metadata accessor for ctb.chatbot.OrgNameEntry(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA358);
}

ctb::chatbot::MediaEntry *ctb::chatbot::MediaEntry::MediaEntry(ctb::chatbot::MediaEntry *this, const ctb::chatbot::MediaEntry *a2)
{
  __int128 v4;

  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), (__int128 *)a2 + 2);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  return this;
}

void sub_2375B2B74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ctb::chatbot::MediaEntry::~MediaEntry(void **this)
{
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

ctb::chatbot::MediaEntry *sub_2375B2BDC(ctb::chatbot::MediaEntry *a1, const ctb::chatbot::MediaEntry *a2)
{
  return ctb::chatbot::MediaEntry::MediaEntry(a1, a2);
}

ctb::chatbot::MediaEntry *sub_2375B2BF4(void **a1, const ctb::chatbot::MediaEntry *a2)
{
  ctb::chatbot::MediaEntry *v3;

  ctb::chatbot::MediaEntry::~MediaEntry(a1);
  return ctb::chatbot::MediaEntry::MediaEntry(v3, a2);
}

uint64_t sub_2375B2C20(uint64_t a1, void **a2)
{
  ctb::chatbot::MediaEntry::MediaEntry(a1, (uint64_t)a2);
  ctb::chatbot::MediaEntry::~MediaEntry(a2);
  return a1;
}

uint64_t ctb::chatbot::MediaEntry::MediaEntry(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v3 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(result + 32) = v3;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(result + 56) = 1;
  }
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t sub_2375B2CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::MediaEntry::~MediaEntry, (void (*)(uint64_t, uint64_t))ctb::chatbot::MediaEntry::MediaEntry);
}

uint64_t sub_2375B2CC4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B2CE4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.MediaEntry(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA360);
}

std::string *ctb::chatbot::URIEntry::URIEntry(std::string *this, const ctb::chatbot::URIEntry *a2)
{
  std::string *result;

  result = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (__int128 *)a2);
  result[1].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 4);
  return result;
}

void ctb::chatbot::URIEntry::~URIEntry(void **this)
{
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

std::string *sub_2375B2D98(std::string *a1, const ctb::chatbot::URIEntry *a2)
{
  return ctb::chatbot::URIEntry::URIEntry(a1, a2);
}

std::string *sub_2375B2DB0(void **a1, const ctb::chatbot::URIEntry *a2)
{
  std::string *v3;

  ctb::chatbot::URIEntry::~URIEntry(a1);
  return ctb::chatbot::URIEntry::URIEntry(v3, a2);
}

uint64_t sub_2375B2DDC(uint64_t a1, __int128 *a2)
{
  ctb::chatbot::URIEntry::URIEntry(a1, a2);
  ctb::chatbot::URIEntry::~URIEntry((void **)a2);
  return a1;
}

uint64_t ctb::chatbot::URIEntry::URIEntry(uint64_t result, __int128 *a2)
{
  __int128 v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_QWORD *)(result + 32) = *((_QWORD *)a2 + 4);
  return result;
}

uint64_t sub_2375B2E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::URIEntry::~URIEntry, (void (*)(uint64_t, uint64_t))ctb::chatbot::URIEntry::URIEntry);
}

uint64_t sub_2375B2E5C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B2E7C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.URIEntry(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA368);
}

uint64_t std::optional<ctb::chatbot::WebResources>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::WebResources,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_2375B2ED0(uint64_t a1)
{
  return std::optional<ctb::chatbot::WebResources>::~optional(a1);
}

uint64_t sub_2375B2EE4(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::WebResources>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B2EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::WebResources>::~optional(a1);
  return std::optional<ctb::chatbot::WebResources>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B2F28(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)a2);
  return a1;
}

uint64_t sub_2375B2F5C(uint64_t a1, __n128 *a2)
{
  uint64_t v4;

  v4 = std::optional<ctb::chatbot::WebResources>::~optional(a1);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v4, a2);
  std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)a2);
  return a1;
}

void type metadata accessor for std.__1.optional_WebResources_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA370);
}

uint64_t std::optional<ctb::chatbot::CategoryList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::CategoryList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_2375B2FB4(uint64_t a1)
{
  return std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::optional<ctb::chatbot::MenuItem>::~optional(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v5 = a1;
    a3(&v5);
  }
  return a1;
}

uint64_t sub_2375B3014(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::CategoryList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B302C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::CategoryList>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B3068(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)a2, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B30A8(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_2375B31A8(a1, a2, a3, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_CategoryList_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA378);
}

uint64_t std::optional<ctb::chatbot::OrgName>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::OrgName,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_2375B30DC(uint64_t a1)
{
  return std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375B3100(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::OrgName>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B3118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::OrgName>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B3154(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)a2, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B3194(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_2375B31A8(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375B31A8(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *))
{
  uint64_t v9;

  v9 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, a4, a5);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v9, a2);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)a2, a4, a5);
  return a1;
}

void type metadata accessor for std.__1.optional_OrgName_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA380);
}

uint64_t std::optional<ctb::chatbot::MediaList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::MediaList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_2375B3220(uint64_t a1)
{
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::optional<ctb::chatbot::SuggestedChipList>::~optional(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = a1;
    a2(&v4);
  }
  return a1;
}

uint64_t sub_2375B3278(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::MediaList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B3290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::MediaList>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B32C4(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)a2, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B32FC(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_2375B3308(a1, a2, a3, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375B3308(uint64_t a1, __n128 *a2, uint64_t a3, void (*a4)(uint64_t *))
{
  uint64_t v7;

  v7 = std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, a4);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v7, a2);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)a2, a4);
  return a1;
}

void type metadata accessor for std.__1.optional_MediaList_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA388);
}

uint64_t sub_2375B3374()
{
  return std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100]();
}

uint64_t sub_2375B338C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::CommunicationAddress>::~optional();
  return std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B33B8(uint64_t a1, uint64_t a2)
{
  std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100]();
  std::optional<ctb::chatbot::CommunicationAddress>::~optional(a2);
  return a1;
}

uint64_t sub_2375B33EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::chatbot::CommunicationAddress>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100]);
}

uint64_t sub_2375B3400(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B3420(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 104) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_CommunicationAddress_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA390);
}

uint64_t sub_2375B3484()
{
  return std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100]();
}

uint64_t sub_2375B349C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::OrgDetails>::~optional();
  return std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](v3, a2);
}

_BYTE *sub_2375B34C8(_BYTE *a1, uint64_t a2)
{
  std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::OrgDetails>::~optional(a2);
  return a1;
}

_BYTE *std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[264] = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>(a1, a2);
    a1[264] = 1;
  }
  return a1;
}

uint64_t sub_2375B3538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::optional<ctb::chatbot::OrgDetails>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100]);
}

uint64_t sub_2375B354C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 272))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B356C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 272) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_OrgDetails_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA398);
}

std::string *ctb::chatbot::AddressEntry::AddressEntry(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375B3668(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ctb::chatbot::AddressEntry::~AddressEntry(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *sub_2375B36C8(std::string *a1, __int128 *a2)
{
  return ctb::chatbot::AddressEntry::AddressEntry(a1, a2);
}

std::string *sub_2375B36E0(void **a1, __int128 *a2)
{
  std::string *v3;

  ctb::chatbot::AddressEntry::~AddressEntry(a1);
  return ctb::chatbot::AddressEntry::AddressEntry(v3, a2);
}

uint64_t sub_2375B370C(uint64_t a1, __int128 *a2)
{
  ctb::chatbot::AddressEntry::AddressEntry(a1, a2);
  ctb::chatbot::AddressEntry::~AddressEntry((void **)a2);
  return a1;
}

__n128 ctb::chatbot::AddressEntry::AddressEntry(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  result = *(__n128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(__n128 *)(a1 + 24) = result;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  return result;
}

uint64_t sub_2375B3770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::AddressEntry::~AddressEntry, (void (*)(uint64_t, uint64_t))ctb::chatbot::AddressEntry::AddressEntry);
}

void type metadata accessor for ctb.chatbot.AddressEntry(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3A0);
}

uint64_t std::optional<ctb::chatbot::AddressEntryList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::AddressEntryList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t std::optional<ctb::chatbot::WebResources>::~optional(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = (void **)a1;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

uint64_t sub_2375B37E0(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::AddressEntryList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B37F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::WebResources>::~optional(a1);
  return std::optional<ctb::chatbot::AddressEntryList>::optional[abi:ne180100](v3, a2);
}

void type metadata accessor for std.__1.optional_AddressEntryList_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3A8);
}

void type metadata accessor for std.__1.optional_PostbackData_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3B0);
}

__n128 std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void type metadata accessor for std.__1.optional_SuggestedActionShowQuery_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3B8);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3C0);
}

std::string *sub_2375B38C0(std::string *a1, const std::string *a2)
{
  return std::string::basic_string(a1, a2);
}

std::string *sub_2375B38D8(std::string *a1, const std::string *a2)
{
  std::string *v3;

  std::string::~string(a1);
  return std::string::basic_string(v3, a2);
}

__n128 *sub_2375B3904(__n128 *a1, __n128 *a2)
{
  std::string::basic_string[abi:ne180100](a1, a2);
  std::string::~string((std::string *)a2);
  return a1;
}

__n128 std::string::basic_string[abi:ne180100](__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t sub_2375B3950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))MEMORY[0x24BEDACF0], (void (*)(uint64_t, uint64_t))std::string::basic_string[abi:ne180100]);
}

void type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3C8);
}

uint64_t std::optional<std::string>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_2375B3984(uint64_t a1, uint64_t a2)
{
  return std::optional<std::string>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B399C(void **a1, uint64_t a2)
{
  uint64_t v3;

  ctb::chatbot::URIEntry::~URIEntry(a1);
  return std::optional<std::string>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B39C8(uint64_t a1, __n128 *a2)
{
  std::optional<std::string>::optional[abi:ne180100](a1, a2);
  ctb::chatbot::URIEntry::~URIEntry((void **)a2);
  return a1;
}

__n128 std::optional<std::string>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_2375B3A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::URIEntry::~URIEntry, (void (*)(uint64_t, uint64_t))std::optional<std::string>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3D0);
}

void type metadata accessor for ctb.chatbot(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3D8);
}

ctb::chatbot::VerificationDetails *ctb::chatbot::VerificationDetails::VerificationDetails(ctb::chatbot::VerificationDetails *this, const ctb::chatbot::VerificationDetails *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_BYTE *)this = *(_BYTE *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375B3AF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ctb::chatbot::VerificationDetails *sub_2375B3B18(ctb::chatbot::VerificationDetails *a1, const ctb::chatbot::VerificationDetails *a2)
{
  return ctb::chatbot::VerificationDetails::VerificationDetails(a1, a2);
}

ctb::chatbot::VerificationDetails *sub_2375B3B30(void **a1, const ctb::chatbot::VerificationDetails *a2)
{
  ctb::chatbot::VerificationDetails *v3;

  ctb::chatbot::VerificationDetails::~VerificationDetails(a1);
  return ctb::chatbot::VerificationDetails::VerificationDetails(v3, a2);
}

uint64_t sub_2375B3B5C(uint64_t a1, void **a2)
{
  ctb::chatbot::VerificationDetails::VerificationDetails(a1, (uint64_t)a2);
  ctb::chatbot::VerificationDetails::~VerificationDetails(a2);
  return a1;
}

__n128 ctb::chatbot::VerificationDetails::VerificationDetails(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = *(__n128 *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_2375B3BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::VerificationDetails::~VerificationDetails, (void (*)(uint64_t, uint64_t))ctb::chatbot::VerificationDetails::VerificationDetails);
}

uint64_t sub_2375B3BDC(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[56])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_2375B3C30(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void type metadata accessor for ctb.chatbot.VerificationDetails(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3E0);
}

void type metadata accessor for std(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3E8);
}

void type metadata accessor for std.__1(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3F0);
}

uint64_t std::optional<ctb::chatbot::MenuItem>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::MenuItem,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_2375B3CC8(uint64_t a1)
{
  return std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375B3CEC(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::MenuItem>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B3D04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::MenuItem>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B3D40(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)a2, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

__n128 std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_2375B3DBC(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_2375B31A8(a1, a2, a3, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_MenuItem_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA3F8);
}

ctb::ClientAuthenticityRequest::Method *ctb::ClientAuthenticityRequest::Method::Method(ctb::ClientAuthenticityRequest::Method *this, const ctb::ClientAuthenticityRequest::Method *a2)
{
  __int128 v4;

  *(_QWORD *)this = *(_QWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((_QWORD *)this + 4, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 5);
  return this;
}

void sub_2375B3E64(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void ctb::ClientAuthenticityRequest::Method::~Method(void **this)
{
  void **v2;

  v2 = this + 4;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

ctb::ClientAuthenticityRequest::Method *sub_2375B3ED4(ctb::ClientAuthenticityRequest::Method *a1, const ctb::ClientAuthenticityRequest::Method *a2)
{
  return ctb::ClientAuthenticityRequest::Method::Method(a1, a2);
}

ctb::ClientAuthenticityRequest::Method *sub_2375B3EEC(void **a1, const ctb::ClientAuthenticityRequest::Method *a2)
{
  ctb::ClientAuthenticityRequest::Method *v3;

  ctb::ClientAuthenticityRequest::Method::~Method(a1);
  return ctb::ClientAuthenticityRequest::Method::Method(v3, a2);
}

uint64_t sub_2375B3F18(uint64_t a1, void **a2)
{
  ctb::ClientAuthenticityRequest::Method::Method(a1, (uint64_t)a2);
  ctb::ClientAuthenticityRequest::Method::~Method(a2);
  return a1;
}

__n128 ctb::ClientAuthenticityRequest::Method::Method(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_2375B3F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::ClientAuthenticityRequest::Method::~Method, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::Method::Method);
}

uint64_t sub_2375B3FA0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B3FC0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

void type metadata accessor for ctb.ClientAuthenticityRequest.Method(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA400);
}

void type metadata accessor for ctb(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA408);
}

ctb::ClientAuthenticityRequest *ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(ctb::ClientAuthenticityRequest *this, const ClientAuthenticityRequest *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(this, (uint64_t)a2->fMethods.__begin_, (uint64_t)a2->fMethods.__end_, 0x6DB6DB6DB6DB6DB7 * (a2->fMethods.__end_ - a2->fMethods.__begin_));
  return this;
}

uint64_t sub_2375B4070(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
}

ctb::ClientAuthenticityRequest *sub_2375B4094(ctb::ClientAuthenticityRequest *a1, const ClientAuthenticityRequest *a2)
{
  return ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
}

ctb::ClientAuthenticityRequest *sub_2375B40AC(uint64_t a1, const ClientAuthenticityRequest *a2)
{
  ctb::ClientAuthenticityRequest *v3;

  v3 = (ctb::ClientAuthenticityRequest *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(v3, a2);
}

__n128 *sub_2375B40E8(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)a2, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B4128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (uint64_t)std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.ClientAuthenticityRequest(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA410);
}

void ctb::ClientAuthenticityRequest::Parameter::~Parameter(ctb::ClientAuthenticityRequest::Parameter *this)
{
  void *v2;

  if (*((_BYTE *)this + 24))
  {
    v2 = *(void **)this;
    if (*(_QWORD *)this)
    {
      *((_QWORD *)this + 1) = v2;
      operator delete(v2);
    }
  }
}

uint64_t sub_2375B41A0(ctb::ClientAuthenticityRequest::Parameter *a1, const ctb::ClientAuthenticityRequest::Parameter *a2)
{
  return ctb::ClientAuthenticityRequest::Parameter::Parameter(a1, a2);
}

uint64_t sub_2375B41B8(ctb::ClientAuthenticityRequest::Parameter *a1, const ctb::ClientAuthenticityRequest::Parameter *a2)
{
  ctb::ClientAuthenticityRequest::Parameter *v3;

  ctb::ClientAuthenticityRequest::Parameter::~Parameter(a1);
  return ctb::ClientAuthenticityRequest::Parameter::Parameter(v3, a2);
}

uint64_t sub_2375B41E4(uint64_t a1, __n128 *a2)
{
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
  ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)a2);
  return a1;
}

uint64_t sub_2375B4214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::ClientAuthenticityRequest::Parameter::~Parameter, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]);
}

void type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FA418);
}

unint64_t sub_2375B4240()
{
  unint64_t result;

  result = qword_2567FA420;
  if (!qword_2567FA420)
  {
    result = MEMORY[0x23B8163BC](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2567FA420);
  }
  return result;
}

uint64_t sub_2375B4284(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA498, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional___, (uint64_t)&unk_2375F1C3C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B42C0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA4D0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_FileDescriptor_, (uint64_t)&unk_2375F1C14);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B42FC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B8163BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2375B433C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA508, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SubjectExt_, (uint64_t)&unk_2375F1BEC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4378(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA540, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_Description_, (uint64_t)&unk_2375F1BC4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B43B4(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA578, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_Response_, (uint64_t)&unk_2375F1B9C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B43F0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA5B0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardStyle_, (uint64_t)&unk_2375F1B74);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B442C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA5E8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescriptionStyle_, (uint64_t)&unk_2375F1B4C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4468(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA620, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitleStyle_, (uint64_t)&unk_2375F1B24);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B44A4(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA658, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CUnsignedLong_, (uint64_t)&unk_2375F1AFC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B44E0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA690, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedChipList_, (uint64_t)&unk_2375F1AD4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B451C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA6C8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescription_, (uint64_t)&unk_2375F1AAC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4558(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA700, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitle_, (uint64_t)&unk_2375F1A84);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4594(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA738, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardMedia_, (uint64_t)&unk_2375F1A5C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B45D0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA770, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_variant____, (uint64_t)&unk_2375F1A34);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B460C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA7A8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_WebResources_, (uint64_t)&unk_2375F1A0C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4648(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA7E0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CategoryList_, (uint64_t)&unk_2375F19E4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4684(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA818, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_OrgName_, (uint64_t)&unk_2375F19BC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B46C0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B46FC(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA888, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CommunicationAddress_, (uint64_t)&unk_2375F196C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4738(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA8C0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_OrgDetails_, (uint64_t)&unk_2375F1944);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4774(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA8F8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_AddressEntryList_, (uint64_t)&unk_2375F191C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B47B0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA930, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_PostbackData_, (uint64_t)&unk_2375F18F4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B47EC(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA968, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedActionShowQuery_, (uint64_t)&unk_2375F18CC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4828(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA9A0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_, (uint64_t)&unk_2375F18A4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B4864(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FA9D8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___, (uint64_t)&unk_2375F187C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B48A0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FAA10, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_MenuItem_, (uint64_t)&unk_2375F1854);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ctb::chatbot::MenuItem *ctb::chatbot::MenuItem::MenuItem(ctb::chatbot::MenuItem *this, const ctb::chatbot::MenuItem *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<ctb::chatbot::MenuL0Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  return this;
}

uint64_t std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

_BYTE *std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[16] = 0;
  return result;
}

_BYTE *sub_2375B4944(_BYTE *result)
{
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::optional[abi:ne180100](result);
}

_QWORD *ctb::chatbot::AddressEntryList::AddressEntryList(_QWORD *a1, uint64_t a2)
{
  return ctb::chatbot::AddressEntryList::AddressEntryList(a1, a2, (void (*)(void))std::vector<ctb::chatbot::AddressEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>);
}

uint64_t std::optional<ctb::chatbot::OrgDetails>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

_BYTE *std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[264] = 0;
  return result;
}

_BYTE *sub_2375B4974(_BYTE *result)
{
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)result = 0u;
  return std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::chatbot::CommunicationAddress>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

_BYTE *std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[96] = 0;
  return result;
}

_BYTE *sub_2375B49B8(_BYTE *result)
{
  *((_QWORD *)result + 12) = 0;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  return std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](result);
}

ctb::chatbot::MediaList *ctb::chatbot::MediaList::MediaList(ctb::chatbot::MediaList *this, const MediaList *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<ctb::chatbot::MediaEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(this, (uint64_t)a2->var0.var0, (uint64_t)a2->var0.var1, 0x8E38E38E38E38E39 * ((a2->var0.var1 - a2->var0.var0) >> 3));
  return this;
}

std::string *ctb::chatbot::OrgName::OrgName(std::string *this, const OrgName *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(this, (__int128 *)a2->var0.var0, (__int128 *)a2->var0.var1, (a2->var0.var1 - a2->var0.var0) >> 5);
  return this;
}

std::string *ctb::chatbot::CategoryList::CategoryList(std::string *this, const CategoryList *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this, (__int128 *)a2->var0.__begin_, (__int128 *)a2->var0.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)a2->var0.__end_ - (char *)a2->var0.__begin_) >> 3));
  return this;
}

_QWORD *ctb::chatbot::WebResources::WebResources(ctb::chatbot::WebResources *this, const WebResources *a2)
{
  return ctb::chatbot::AddressEntryList::AddressEntryList(this, (uint64_t)a2, (void (*)(void))std::vector<ctb::chatbot::WebEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>);
}

_QWORD *ctb::chatbot::AddressEntryList::AddressEntryList(_QWORD *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

_BYTE *std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[336] = 0;
  return result;
}

_BYTE *sub_2375B4B14(_BYTE *result)
{
  *((_QWORD *)result + 42) = 0;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 20) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)result = 0u;
  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::chatbot::CardMedia>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

_BYTE *std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[176] = 0;
  return result;
}

_BYTE *sub_2375B4B64(_BYTE *result)
{
  *((_QWORD *)result + 22) = 0;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)result = 0u;
  return std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](result);
}

_QWORD *ctb::chatbot::SuggestedChipList::SuggestedChipList(_QWORD *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(a1, *a2, a2[1], 0x34F72C234F72C235 * ((a2[1] - *a2) >> 3));
  return a1;
}

uint64_t std::optional<unsigned long>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

_BYTE *std::optional<unsigned long>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[8] = 0;
  return result;
}

_BYTE *sub_2375B4BEC(_BYTE *result)
{
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  return std::optional<unsigned long>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::chatbot::CardTitleStyle>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3);
}

_BYTE *std::optional<ctb::chatbot::CardTitleStyle>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[3] = 0;
  return result;
}

_BYTE *sub_2375B4C0C(_BYTE *result)
{
  *(_DWORD *)result = 0;
  return std::optional<ctb::chatbot::CardTitleStyle>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::CPMGroupManagement::Response>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

_BYTE *std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[4] = 0;
  return result;
}

_BYTE *sub_2375B4C2C(_BYTE *result)
{
  *(_QWORD *)result = 0;
  return std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](result);
}

std::string *ctb::SIPConferenceInfo::Description::Description(std::string *this, const ctb::SIPConferenceInfo::Description *a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (__int128 *)a2);
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 32), (__int128 *)a2 + 2);
  return this;
}

void sub_2375B4C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<ctb::SIPConferenceInfo::Description>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

_BYTE *std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[64] = 0;
  return result;
}

_BYTE *sub_2375B4CA0(_BYTE *result)
{
  *((_QWORD *)result + 8) = 0;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  return std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::SIPConferenceInfo::SubjectExt>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

_BYTE *std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[24] = 0;
  return result;
}

_BYTE *sub_2375B4CCC(_BYTE *result)
{
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::FileTransferDescriptor::FileDescriptor>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

_BYTE *std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[144] = 0;
  return result;
}

_BYTE *sub_2375B4CF0(_BYTE *result)
{
  *((_QWORD *)result + 18) = 0;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)result = 0u;
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](result);
}

uint64_t sub_2375B4D14(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5;

  v5 = a1;
  a3(&v5);
  return a1;
}

{
  uint64_t v5;

  v5 = a1;
  a3(&v5);
  return a1;
}

ctb::chatbot::MenuItem *sub_2375B4D6C(ctb::chatbot::MenuItem *a1, const ctb::chatbot::MenuItem *a2)
{
  return ctb::chatbot::MenuItem::MenuItem(a1, a2);
}

ctb::chatbot::MenuItem *sub_2375B4D84(uint64_t a1, const ctb::chatbot::MenuItem *a2)
{
  ctb::chatbot::MenuItem *v3;

  v3 = (ctb::chatbot::MenuItem *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MenuItem::MenuItem(v3, a2);
}

__n128 *sub_2375B4DC0(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)a2, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B4E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (uint64_t)std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.MenuItem(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAAE8);
}

uint64_t sub_2375B4E38(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B4E58(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.SuggestedActionShowCoordinates(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAAF0);
}

std::basic_string<char16_t> *sub_2375B4E94(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3)
{
  return sub_2375B2AA4(a1, a2, a3, (void (*)(void))ctb::SIPConferenceInfo::SubjectExt::SubjectExt);
}

void type metadata accessor for ctb.chatbot.SuggestedActionShowQuery(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAAF8);
}

void type metadata accessor for ctb.chatbot.PostbackData(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB00);
}

void **sub_2375B4EC8(void **a1)
{
  return ctb::chatbot::AddressEntryList::~AddressEntryList(a1);
}

_QWORD *sub_2375B4EDC(_QWORD *a1, uint64_t a2)
{
  return ctb::chatbot::AddressEntryList::AddressEntryList(a1, a2);
}

_QWORD *sub_2375B4EF4(void **a1, uint64_t a2)
{
  void **v3;

  v3 = ctb::chatbot::AddressEntryList::~AddressEntryList(a1);
  return ctb::chatbot::AddressEntryList::AddressEntryList(v3, a2);
}

uint64_t sub_2375B4F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B4F34(a1, a2, a3, (uint64_t (*)(void))ctb::chatbot::AddressEntryList::~AddressEntryList, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

uint64_t sub_2375B4F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = a4();
  a5(v9, a2);
  ((void (*)(uint64_t))a4)(a2);
  return a1;
}

void type metadata accessor for ctb.chatbot.AddressEntryList(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB08);
}

void ctb::chatbot::OrgDetails::~OrgDetails(ctb::chatbot::OrgDetails *this)
{
  void **v2;

  if (*((_BYTE *)this + 256))
  {
    v2 = (void **)((char *)this + 232);
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((_BYTE *)this + 224))
  {
    v2 = (void **)((char *)this + 200);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<std::string>::__clear[abi:ne180100]);
  }
  if (*((_BYTE *)this + 192) && *((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((_BYTE *)this + 160))
  {
    v2 = (void **)((char *)this + 136);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]);
  }
  if (*((_BYTE *)this + 128))
  {
    v2 = (void **)((char *)this + 104);
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

uint64_t sub_2375B5048(ctb::chatbot::OrgDetails *a1, const ctb::chatbot::OrgDetails *a2)
{
  return ctb::chatbot::OrgDetails::OrgDetails(a1, a2);
}

uint64_t sub_2375B5060(ctb::chatbot::OrgDetails *a1, const ctb::chatbot::OrgDetails *a2)
{
  ctb::chatbot::OrgDetails *v3;

  ctb::chatbot::OrgDetails::~OrgDetails(a1);
  return ctb::chatbot::OrgDetails::OrgDetails(v3, a2);
}

_BYTE *sub_2375B508C(_BYTE *a1, ctb::chatbot::OrgDetails *a2)
{
  std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>(a1, (uint64_t)a2);
  ctb::chatbot::OrgDetails::~OrgDetails(a2);
  return a1;
}

uint64_t sub_2375B50BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::OrgDetails::~OrgDetails, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>);
}

uint64_t sub_2375B50D0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 264))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B50F0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 264) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.OrgDetails(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB10);
}

void ctb::chatbot::CommunicationAddress::~CommunicationAddress(void **this)
{
  void **v2;

  v2 = this + 9;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t sub_2375B51E4(ctb::chatbot::CommunicationAddress *a1, const ctb::chatbot::CommunicationAddress *a2)
{
  return ctb::chatbot::CommunicationAddress::CommunicationAddress(a1, a2);
}

uint64_t sub_2375B51FC(void **a1, const ctb::chatbot::CommunicationAddress *a2)
{
  ctb::chatbot::CommunicationAddress *v3;

  ctb::chatbot::CommunicationAddress::~CommunicationAddress(a1);
  return ctb::chatbot::CommunicationAddress::CommunicationAddress(v3, a2);
}

uint64_t sub_2375B5228(uint64_t a1, __int128 *a2)
{
  ctb::chatbot::CommunicationAddress::CommunicationAddress(a1, a2);
  ctb::chatbot::CommunicationAddress::~CommunicationAddress((void **)a2);
  return a1;
}

__n128 ctb::chatbot::CommunicationAddress::CommunicationAddress(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = *(__n128 *)((char *)a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  return result;
}

uint64_t sub_2375B52C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::CommunicationAddress::~CommunicationAddress, (void (*)(uint64_t, uint64_t))ctb::chatbot::CommunicationAddress::CommunicationAddress);
}

void type metadata accessor for ctb.chatbot.CommunicationAddress(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB18);
}

uint64_t sub_2375B52EC(uint64_t a1)
{
  return ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t ctb::chatbot::SuggestedChipList::~SuggestedChipList(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4;

  v4 = a1;
  a2(&v4);
  return a1;
}

ctb::chatbot::MediaList *sub_2375B533C(ctb::chatbot::MediaList *a1, const MediaList *a2)
{
  return ctb::chatbot::MediaList::MediaList(a1, a2);
}

ctb::chatbot::MediaList *sub_2375B5354(uint64_t a1, const MediaList *a2)
{
  ctb::chatbot::MediaList *v3;

  v3 = (ctb::chatbot::MediaList *)ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MediaList::MediaList(v3, a2);
}

__n128 *sub_2375B5388(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::chatbot::SuggestedChipList::~SuggestedChipList((uint64_t)a2, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B53C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B53DC(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))ctb::chatbot::SuggestedChipList::~SuggestedChipList, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

uint64_t sub_2375B53DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v11;

  v11 = a5(a1, a4);
  a6(v11, a2);
  a5(a2, a4);
  return a1;
}

void type metadata accessor for ctb.chatbot.MediaList(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB20);
}

uint64_t sub_2375B544C(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_2375B5470(std::string *a1, const OrgName *a2)
{
  return ctb::chatbot::OrgName::OrgName(a1, a2);
}

std::string *sub_2375B5488(uint64_t a1, const OrgName *a2)
{
  std::string *v3;

  v3 = (std::string *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::OrgName::OrgName(v3, a2);
}

__n128 *sub_2375B54C4(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)a2, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B5504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (uint64_t)std::vector<std::string>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.OrgName(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB28);
}

uint64_t sub_2375B553C(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_2375B5560(std::string *a1, const CategoryList *a2)
{
  return ctb::chatbot::CategoryList::CategoryList(a1, a2);
}

std::string *sub_2375B5578(uint64_t a1, const CategoryList *a2)
{
  std::string *v3;

  v3 = (std::string *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::CategoryList::CategoryList(v3, a2);
}

__n128 *sub_2375B55B4(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)a2, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B55F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (uint64_t)std::vector<std::string>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.CategoryList(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB30);
}

void **ctb::chatbot::AddressEntryList::~AddressEntryList(void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_QWORD *sub_2375B5660(ctb::chatbot::WebResources *a1, const WebResources *a2)
{
  return ctb::chatbot::WebResources::WebResources(a1, a2);
}

_QWORD *sub_2375B5678(void **a1, const WebResources *a2)
{
  void **v3;

  v3 = ctb::chatbot::AddressEntryList::~AddressEntryList(a1);
  return ctb::chatbot::WebResources::WebResources((ctb::chatbot::WebResources *)v3, a2);
}

__n128 *sub_2375B56A4(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::chatbot::AddressEntryList::~AddressEntryList((void **)a2);
  return a1;
}

void type metadata accessor for ctb.chatbot.WebResources(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB38);
}

uint64_t sub_2375B56F0(uint64_t a1, uint64_t a2)
{
  return std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100](a1, a2);
}

uint64_t sub_2375B5708(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::~variant[abi:ne180100]();
  return std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100](v3, a2);
}

uint64_t sub_2375B5734(uint64_t a1, uint64_t a2)
{
  std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100]();
  std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::~variant[abi:ne180100](a2);
  return a1;
}

uint64_t sub_2375B5768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::~variant[abi:ne180100], (void (*)(uint64_t, uint64_t))std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100]);
}

uint64_t sub_2375B577C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 336))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B579C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 336) = v3;
  return result;
}

void type metadata accessor for std.__1.variant___(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB40);
}

void ctb::chatbot::CardMedia::~CardMedia(void **this)
{
  if (*((_BYTE *)this + 168) && *((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((_BYTE *)this + 112) && *((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((_BYTE *)this + 80) && *((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t sub_2375B58C0(ctb::chatbot::CardMedia *a1, const ctb::chatbot::CardMedia *a2)
{
  return ctb::chatbot::CardMedia::CardMedia(a1, a2);
}

uint64_t sub_2375B58D8(void **a1, const ctb::chatbot::CardMedia *a2)
{
  ctb::chatbot::CardMedia *v3;

  ctb::chatbot::CardMedia::~CardMedia(a1);
  return ctb::chatbot::CardMedia::CardMedia(v3, a2);
}

uint64_t sub_2375B5904(uint64_t a1, __int128 *a2)
{
  std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(a1, a2);
  ctb::chatbot::CardMedia::~CardMedia((void **)a2);
  return a1;
}

uint64_t sub_2375B5934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::CardMedia::~CardMedia, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>);
}

uint64_t sub_2375B5948(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B5968(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 176) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.CardMedia(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB48);
}

void type metadata accessor for ctb.chatbot.CardTitle(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB50);
}

void type metadata accessor for ctb.chatbot.CardDescription(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB58);
}

uint64_t sub_2375B59FC(uint64_t a1)
{
  return ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

_QWORD *sub_2375B5A18(_QWORD *a1, uint64_t *a2)
{
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(a1, a2);
}

_QWORD *sub_2375B5A30(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(v3, a2);
}

__n128 *sub_2375B5A64(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::chatbot::SuggestedChipList::~SuggestedChipList((uint64_t)a2, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B5A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B53DC(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))ctb::chatbot::SuggestedChipList::~SuggestedChipList, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.SuggestedChipList(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB60);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

void type metadata accessor for ctb.chatbot.CardTitleStyle(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB68);
}

void type metadata accessor for ctb.chatbot.CardDescriptionStyle(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB70);
}

void type metadata accessor for ctb.chatbot.CardStyle(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB78);
}

std::string *ctb::CPMGroupManagement::CPMGroupManagement(std::string *this, const CPMGroupManagement *a2)
{
  __int128 v4;

  if (*((char *)&a2->fId.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->fId.__r_.__value_.var0.var1.__data_, a2->fId.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    v4 = *(_OWORD *)a2->fId.__r_.__value_.var0.var0.__data_;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)&a2->fId.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *(_QWORD *)&a2->fId.__r_.var0;
  return this;
}

std::string *sub_2375B5B78(std::string *a1, const CPMGroupManagement *a2)
{
  return ctb::CPMGroupManagement::CPMGroupManagement(a1, a2);
}

std::string *sub_2375B5B90(std::basic_string<char16_t> *a1, const CPMGroupManagement *a2)
{
  std::string *v3;

  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return ctb::CPMGroupManagement::CPMGroupManagement(v3, a2);
}

__n128 *sub_2375B5BBC(__n128 *a1, __n128 *a2)
{
  ctb::CPMGroupManagement::CPMGroupManagement(a1, a2);
  ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a2);
  return a1;
}

__n128 ctb::CPMGroupManagement::CPMGroupManagement(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  return result;
}

std::basic_string<char16_t> *sub_2375B5C10(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3)
{
  return sub_2375B2AA4(a1, a2, a3, (void (*)(void))ctb::CPMGroupManagement::CPMGroupManagement);
}

uint64_t sub_2375B5C1C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B5C3C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ctb.CPMGroupManagement(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB80);
}

void type metadata accessor for ctb.CPMGroupManagement.Response(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB88);
}

void ctb::SIPConferenceInfo::Description::~Description(void **this)
{
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

std::string *sub_2375B5CE4(std::string *a1, const ctb::SIPConferenceInfo::Description *a2)
{
  return ctb::SIPConferenceInfo::Description::Description(a1, a2);
}

std::string *sub_2375B5CFC(void **a1, const ctb::SIPConferenceInfo::Description *a2)
{
  std::string *v3;

  ctb::SIPConferenceInfo::Description::~Description(a1);
  return ctb::SIPConferenceInfo::Description::Description(v3, a2);
}

uint64_t sub_2375B5D28(uint64_t a1, __n128 *a2)
{
  ctb::SIPConferenceInfo::Description::Description(a1, a2);
  ctb::SIPConferenceInfo::Description::~Description((void **)a2);
  return a1;
}

__n128 ctb::SIPConferenceInfo::Description::Description(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (a2[3].n128_u8[8])
  {
    result = a2[2];
    *(_QWORD *)(a1 + 48) = a2[3].n128_u64[0];
    *(__n128 *)(a1 + 32) = result;
    a2[2].n128_u64[1] = 0;
    a2[3].n128_u64[0] = 0;
    a2[2].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

uint64_t sub_2375B5DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::SIPConferenceInfo::Description::~Description, (void (*)(uint64_t, uint64_t))ctb::SIPConferenceInfo::Description::Description);
}

uint64_t sub_2375B5DD4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B5DF4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for ctb.SIPConferenceInfo.Description(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB90);
}

std::string *ctb::SIPConferenceInfo::SIPConferenceInfo(std::string *this, uint64_t **a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<ctb::SIPConferenceInfo::Description,false>::__optional_copy_base[abi:ne180100](this, (uint64_t)a2);
  v4[3].__r_.__value_.__r.__words[0] = 0;
  v4[3].__r_.__value_.__l.__size_ = 0;
  v4 += 3;
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(v4, a2[9], a2[10], 0xAAAAAAAAAAAAAAABLL * (a2[10] - a2[9]));
  return this;
}

void sub_2375B5E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ctb::SIPConferenceInfo::~SIPConferenceInfo(ctb::SIPConferenceInfo *this)
{
  void **v2;

  v2 = (void **)((char *)this + 72);
  std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

std::string *sub_2375B5EE4(std::string *a1, uint64_t **a2)
{
  return ctb::SIPConferenceInfo::SIPConferenceInfo(a1, a2);
}

std::string *sub_2375B5EFC(ctb::SIPConferenceInfo *a1, uint64_t **a2)
{
  std::string *v3;

  ctb::SIPConferenceInfo::~SIPConferenceInfo(a1);
  return ctb::SIPConferenceInfo::SIPConferenceInfo(v3, a2);
}

_BYTE *sub_2375B5F28(_BYTE *a1, ctb::SIPConferenceInfo *a2)
{
  ctb::SIPConferenceInfo::SIPConferenceInfo(a1, (uint64_t)a2);
  ctb::SIPConferenceInfo::~SIPConferenceInfo(a2);
  return a1;
}

__n128 ctb::SIPConferenceInfo::SIPConferenceInfo(_BYTE *a1, uint64_t a2)
{
  _QWORD *v3;
  __n128 result;

  v3 = std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100](a1, (__int128 *)a2);
  v3[9] = 0;
  v3[10] = 0;
  v3[11] = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v3 + 9) = result;
  v3[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

uint64_t sub_2375B5F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::SIPConferenceInfo::~SIPConferenceInfo, (void (*)(uint64_t, uint64_t))ctb::SIPConferenceInfo::SIPConferenceInfo);
}

uint64_t sub_2375B5FAC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B5FCC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for ctb.SIPConferenceInfo(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAB98);
}

uint64_t sub_2375B6024(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_2375B6054(ctb::SIPConferenceInfo::SubjectExt *a1, const SubjectExt *a2)
{
  return ctb::SIPConferenceInfo::SubjectExt::SubjectExt(a1, a2);
}

uint64_t sub_2375B606C(std::basic_string<char16_t> *a1, const SubjectExt *a2)
{
  ctb::SIPConferenceInfo::SubjectExt *v3;

  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v3, a2);
}

__n128 *sub_2375B6098(__n128 *a1, __n128 *a2)
{
  ctb::SIPConferenceInfo::SubjectExt::SubjectExt(a1, a2);
  ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a2);
  return a1;
}

__n128 ctb::SIPConferenceInfo::SubjectExt::SubjectExt(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t sub_2375B60E4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B6104(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for ctb.SIPConferenceInfo.SubjectExt(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABA0);
}

ctb::FileTransferDescriptor *ctb::FileTransferDescriptor::FileTransferDescriptor(ctb::FileTransferDescriptor *this, const ctb::FileTransferDescriptor *a2)
{
  ctb::FileTransferDescriptor::FileDescriptor *v4;

  v4 = ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(this, a2);
  std::__optional_copy_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_copy_base[abi:ne180100]((ctb::FileTransferDescriptor::FileDescriptor *)((char *)v4 + 144), (const ctb::FileTransferDescriptor *)((char *)a2 + 144));
  return this;
}

void sub_2375B6178(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
  }
  _Unwind_Resume(exception_object);
}

void ctb::FileTransferDescriptor::~FileTransferDescriptor(void **this)
{
  std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 18));
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((_BYTE *)this + 48))
  {
    if (*((char *)this + 47) < 0)
      operator delete(this[3]);
  }
}

ctb::FileTransferDescriptor *sub_2375B6240(ctb::FileTransferDescriptor *a1, const ctb::FileTransferDescriptor *a2)
{
  return ctb::FileTransferDescriptor::FileTransferDescriptor(a1, a2);
}

ctb::FileTransferDescriptor *sub_2375B6258(void **a1, const ctb::FileTransferDescriptor *a2)
{
  ctb::FileTransferDescriptor *v3;

  ctb::FileTransferDescriptor::~FileTransferDescriptor(a1);
  return ctb::FileTransferDescriptor::FileTransferDescriptor(v3, a2);
}

uint64_t sub_2375B6284(uint64_t a1, __int128 *a2)
{
  std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>(a1, a2);
  ctb::FileTransferDescriptor::~FileTransferDescriptor((void **)a2);
  return a1;
}

uint64_t sub_2375B62B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::FileTransferDescriptor::~FileTransferDescriptor, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>);
}

uint64_t sub_2375B62C8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 296))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B62E8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 296) = v3;
  return result;
}

void type metadata accessor for ctb.FileTransferDescriptor(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABA8);
}

void ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor(void **this)
{
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((_BYTE *)this + 48))
  {
    if (*((char *)this + 47) < 0)
      operator delete(this[3]);
  }
}

uint64_t sub_2375B63E0(ctb::FileTransferDescriptor::FileDescriptor *a1, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  return ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, a2);
}

uint64_t sub_2375B63F8(void **a1, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  ctb::FileTransferDescriptor::FileDescriptor *v3;

  ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor(a1);
  return ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(v3, a2);
}

uint64_t sub_2375B6424(uint64_t a1, __int128 *a2)
{
  ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, a2);
  ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor((void **)a2);
  return a1;
}

__n128 ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v3 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v4 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v4;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v5 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 80) = v5;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 10) = 0;
  v6 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v6;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 13) = 0;
  result = (__n128)a2[8];
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_2375B64EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor, (void (*)(uint64_t, uint64_t))ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor);
}

uint64_t sub_2375B6500(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2375B6520(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 144) = v3;
  return result;
}

void type metadata accessor for ctb.FileTransferDescriptor.FileDescriptor(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABB0);
}

void type metadata accessor for ctb.FileTransferDescriptor.FileDescriptor.FileDisposition(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABB8);
}

uint64_t sub_2375B6598(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_2375B65EC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for std.__1.pair___tree_const_iterator_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer___tree_node_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer_Void____ CLong__ CBool_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABC0);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_CapDiscovery_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABC8);
}

void type metadata accessor for std.__1.optional_Vers_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABD0);
}

_QWORD *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(a1, a2, (void (*)(void))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>);
}

uint64_t sub_2375B6688(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::vector<std::string>::~vector[abi:ne180100](uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5;

  v5 = a1;
  a3(&v5);
  return a1;
}

_QWORD *sub_2375B66E0(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(a1, a2);
}

_QWORD *sub_2375B66F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(v3, a2);
}

__n128 *sub_2375B6734(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B6774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (uint64_t)std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_Server_ allocator_Server__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABD8);
}

void ctb::ProvisioningConfiguration::AccessControl::Default::~Default(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)this, this[1]);
}

uint64_t sub_2375B67D8(char **a1, uint64_t a2)
{
  uint64_t v3;

  ctb::ProvisioningConfiguration::AccessControl::Default::~Default(a1);
  return std::set<std::string>::set[abi:ne180100](v3, a2);
}

_QWORD *sub_2375B6804(_QWORD *a1, char **a2)
{
  ctb::ProvisioningConfiguration::AccessControl::Default::Default(a1, a2);
  ctb::ProvisioningConfiguration::AccessControl::Default::~Default(a2);
  return a1;
}

_QWORD *ctb::ProvisioningConfiguration::AccessControl::Default::Default(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *result = *a2;
  v2 = a2 + 1;
  v3 = a2[1];
  result[1] = v3;
  v4 = result + 1;
  v5 = a2[2];
  result[2] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *result = v4;
  }
  return result;
}

uint64_t sub_2375B6870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::AccessControl::Default::~Default, (void (*)(uint64_t, uint64_t))ctb::ProvisioningConfiguration::AccessControl::Default::Default);
}

void type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Default(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABE0);
}

void type metadata accessor for ctb.chatbot.OrgNameEntry.NameType(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABE8);
}

void type metadata accessor for ctb.chatbot.MediaEntry.ContentType(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABF0);
}

std::string *ctb::chatbot::Media::Media(std::string *this, const ctb::chatbot::Media *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_2375B6918(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ctb::chatbot::Media::~Media(void **this)
{
  if (*((_BYTE *)this + 48) && *((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *sub_2375B6980(std::string *a1, const ctb::chatbot::Media *a2)
{
  return ctb::chatbot::Media::Media(a1, a2);
}

std::string *sub_2375B6998(void **a1, const ctb::chatbot::Media *a2)
{
  std::string *v3;

  ctb::chatbot::Media::~Media(a1);
  return ctb::chatbot::Media::Media(v3, a2);
}

__n128 *sub_2375B69C4(__n128 *a1, void **a2)
{
  ctb::chatbot::Media::Media(a1, (uint64_t)a2);
  ctb::chatbot::Media::~Media(a2);
  return a1;
}

__n128 ctb::chatbot::Media::Media(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
  *a1 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  a1[1].n128_u8[8] = 0;
  a1[3].n128_u8[0] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    result = *(__n128 *)(a2 + 24);
    a1[2].n128_u64[1] = *(_QWORD *)(a2 + 40);
    *(__n128 *)((char *)a1 + 24) = result;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    a1[3].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_2375B6A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::Media::~Media, (void (*)(uint64_t, uint64_t))ctb::chatbot::Media::Media);
}

void type metadata accessor for ctb.chatbot.Media(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FABF8);
}

void type metadata accessor for ctb.chatbot.MediaEntry.LabelType(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAC00);
}

void type metadata accessor for ctb.chatbot.URIEntry.LabelType(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAC08);
}

void type metadata accessor for ctb.chatbot.URIEntry.URIType(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAC10);
}

_QWORD *std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(a1, a2, (void (*)(void))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>);
}

uint64_t sub_2375B6AB4(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
}

_QWORD *sub_2375B6AD8(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(a1, a2);
}

_QWORD *sub_2375B6AF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(v3, a2);
}

__n128 *sub_2375B6B2C(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B6B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_Parameter_ allocator_Parameter__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAC18);
}

_QWORD *std::vector<ctb::ClientAuthenticityRequest::Method>::vector(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(a1, a2, (void (*)(void))std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>);
}

_QWORD *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(_QWORD *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t sub_2375B6C04(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
}

_QWORD *sub_2375B6C28(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Method>::vector(a1, a2);
}

_QWORD *sub_2375B6C40(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::ClientAuthenticityRequest::Method>::vector(v3, a2);
}

__n128 *sub_2375B6C7C(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B6CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (uint64_t)std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_Method_ allocator_Method__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAC20);
}

uint64_t std::optional<std::vector<unsigned char>>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  return a1;
}

uint64_t sub_2375B6D24(uint64_t a1, uint64_t a2)
{
  return std::optional<std::vector<unsigned char>>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_2375B6D3C(ctb::ClientAuthenticityRequest::Parameter *a1, uint64_t a2)
{
  uint64_t v3;

  ctb::ClientAuthenticityRequest::Parameter::~Parameter(a1);
  return std::optional<std::vector<unsigned char>>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_2375B6D68(uint64_t a1, __n128 *a2)
{
  std::optional<std::vector<unsigned char>>::optional[abi:ne180100](a1, a2);
  ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)a2);
  return a1;
}

__n128 std::optional<std::vector<unsigned char>>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_2375B6DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::ClientAuthenticityRequest::Parameter::~Parameter, (void (*)(uint64_t, uint64_t))std::optional<std::vector<unsigned char>>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_vector_CUnsignedChar_ allocator_CUnsignedChar___(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAC28);
}

uint64_t sub_2375B6DFC()
{
  return sub_2375B42FC(qword_2567FAC30, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__, (uint64_t)&unk_2375F2388);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE50);
}

uint64_t sub_2375B6E3C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAC70, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.vector_Method_ allocator_Method__, (uint64_t)&unk_2375F233C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B6E78(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FACA8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__, (uint64_t)&unk_2375F23A4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B6EB4(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FACD8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__, (uint64_t)&unk_2375F23C0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B6EF0()
{
  return sub_2375B42FC(qword_2567FACE0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__, (uint64_t)&unk_2375F2434);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE48);
}

uint64_t sub_2375B6F30(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAD20, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.vector_Parameter_ allocator_Parameter__, (uint64_t)&unk_2375F23E8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B6F6C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAD58, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__, (uint64_t)&unk_2375F2450);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B6FA8(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FAD88, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__, (uint64_t)&unk_2375F246C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B6FE4()
{
  return sub_2375B42FC(qword_2567FAD90, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__, (uint64_t)&unk_2375F24E0);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE40);
}

uint64_t sub_2375B7024(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FADD0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.vector_Server_ allocator_Server__, (uint64_t)&unk_2375F2494);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B7060(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAE08, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__, (uint64_t)&unk_2375F24FC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B709C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FAE38, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__, (uint64_t)&unk_2375F2518);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100](uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  *result += 56 * a2;
  return result;
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__push_back_slow_path<ctb::ProvisioningConfiguration::AccessControl::Server const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server const&,ctb::ProvisioningConfiguration::AccessControl::Server*>(a1[1], a2);
    result = v3 + 56;
    a1[1] = v3 + 56;
  }
  a1[1] = result;
  return result;
}

void sub_2375B713C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator++[abi:ne180100](_QWORD *result)
{
  *result += 32;
  return result;
}

_QWORD *std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  *result += 32 * a2;
  return result;
}

uint64_t std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter const*,ctb::ClientAuthenticityRequest::Parameter const*>(_QWORD *a1, _QWORD *a2)
{
  return (uint64_t)(*a1 - *a2) >> 5;
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[32 * v10];
    v18 = &v14[32 * v13];
    std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v16, a2);
    v17 = v16 + 32;
    std::vector<ctb::ClientAuthenticityRequest::Parameter>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)&v15, (void (*)(uint64_t, _QWORD))std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::__destruct_at_end[abi:ne180100]);
  }
  else
  {
    result = std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_2375B7270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*>(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *std::__wrap_iter<ctb::ClientAuthenticityRequest::Method const*>::operator++[abi:ne180100](_QWORD *result)
{
  *result += 56;
  return result;
}

uint64_t std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*,ctb::ClientAuthenticityRequest::Method const*>(_QWORD *a1, _QWORD *a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*a1 - *a2) >> 3);
}

_QWORD *std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::ClientAuthenticityRequest::Method>::__push_back_slow_path<ctb::ClientAuthenticityRequest::Method const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method const&,ctb::ClientAuthenticityRequest::Method*>(a1[1], a2);
    result = v3 + 56;
    a1[1] = v3 + 56;
  }
  a1[1] = result;
  return result;
}

void sub_2375B7338(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void type metadata accessor for std.__1.__tree_const_iterator_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer___tree_node_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer_Void____ CLong_(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE58);
}

void type metadata accessor for ctb.FileTransferDescriptor.FileDescriptor.FileType(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE60);
}

uint64_t sub_2375B7368(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t sub_2375B73E8(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

void type metadata accessor for ctb.chatbot.CardFontStyle(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE68);
}

uint64_t sub_2375B7488(uint64_t a1)
{
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

_QWORD *sub_2375B74A4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(v3, a2);
}

__n128 *sub_2375B74D8(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)a2, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B7510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B53DC(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_SuggestedChip_ allocator_SuggestedChip__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE70);
}

void type metadata accessor for ctb.chatbot.CardMediaHeight(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE78);
}

void **sub_2375B7554(void **a1)
{
  return std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](a1);
}

void **std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  v3 = a1;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_QWORD *sub_2375B759C(void **a1, const WebResources *a2)
{
  void **v3;

  v3 = std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](a1);
  return ctb::chatbot::WebResources::WebResources((ctb::chatbot::WebResources *)v3, a2);
}

__n128 *sub_2375B75C8(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100]((void **)a2);
  return a1;
}

uint64_t sub_2375B75F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B4F34(a1, a2, a3, (uint64_t (*)(void))std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_WebEntry_ allocator_WebEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE80);
}

uint64_t sub_2375B7620(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

std::vector<std::string> *sub_2375B7644(std::vector<std::string> *a1, const std::vector<std::string> *a2)
{
  return std::vector<std::string>::vector(a1, a2);
}

std::vector<std::string> *sub_2375B765C(uint64_t a1, const std::vector<std::string> *a2)
{
  std::vector<std::string> *v3;

  v3 = (std::vector<std::string> *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<std::string>::vector(v3, a2);
}

std::vector<std::string> *sub_2375B7698(std::vector<std::string> *a1, const std::vector<std::string> *a2)
{
  std::vector<std::string>::vector(a1, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B76DC(uint64_t a1, const std::vector<std::string> *a2)
{
  std::vector<std::string> *v4;

  v4 = (std::vector<std::string> *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  std::vector<std::string>::vector(v4, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

void type metadata accessor for std.__1.vector_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ allocator_basic_string_CChar_ char_traits_CChar__ allocator_CChar____(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE88);
}

_QWORD *std::vector<ctb::chatbot::OrgNameEntry>::vector(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(a1, a2, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>);
}

_QWORD *std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(_QWORD *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t sub_2375B7798(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

_QWORD *sub_2375B77BC(_QWORD *a1, uint64_t a2)
{
  return std::vector<ctb::chatbot::OrgNameEntry>::vector(a1, a2);
}

_QWORD *sub_2375B77D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::chatbot::OrgNameEntry>::vector(v3, a2);
}

__n128 *sub_2375B7810(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B7850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (uint64_t)std::vector<std::string>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_OrgNameEntry_ allocator_OrgNameEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE90);
}

uint64_t sub_2375B7888(uint64_t a1)
{
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4;

  v4 = a1;
  a2(&v4);
  return a1;
}

{
  uint64_t v4;

  v4 = a1;
  a2(&v4);
  return a1;
}

ctb::chatbot::MediaList *sub_2375B78D8(uint64_t a1, const MediaList *a2)
{
  ctb::chatbot::MediaList *v3;

  v3 = (ctb::chatbot::MediaList *)std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MediaList::MediaList(v3, a2);
}

__n128 *sub_2375B790C(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)a2, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B7944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B53DC(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_MediaEntry_ allocator_MediaEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAE98);
}

std::string *ctb::chatbot::URIEntryList::URIEntryList(std::string *this, const ctb::chatbot::URIEntryList *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::URIEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  return this;
}

uint64_t sub_2375B79BC(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_2375B79E0(std::string *a1, const ctb::chatbot::URIEntryList *a2)
{
  return ctb::chatbot::URIEntryList::URIEntryList(a1, a2);
}

std::string *sub_2375B79F8(uint64_t a1, const ctb::chatbot::URIEntryList *a2)
{
  std::string *v3;

  v3 = (std::string *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::URIEntryList::URIEntryList(v3, a2);
}

__n128 *sub_2375B7A34(__n128 *a1, __n128 *a2)
{
  ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
  ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)a2, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

__n128 ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_2375B7A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.URIEntryList(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAEA0);
}

std::string *ctb::chatbot::TelephoneInformation::TelephoneInformation(std::string *this, const ctb::chatbot::TelephoneInformation *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_2375B7B80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_2375B7BB8(std::string *a1, const ctb::chatbot::TelephoneInformation *a2)
{
  return ctb::chatbot::TelephoneInformation::TelephoneInformation(a1, a2);
}

std::string *sub_2375B7BD0(void **a1, const ctb::chatbot::TelephoneInformation *a2)
{
  std::string *v3;

  ctb::chatbot::TelephoneInformation::~TelephoneInformation(a1);
  return ctb::chatbot::TelephoneInformation::TelephoneInformation(v3, a2);
}

uint64_t sub_2375B7BFC(uint64_t a1, __int128 *a2)
{
  ctb::chatbot::TelephoneInformation::TelephoneInformation(a1, a2);
  ctb::chatbot::TelephoneInformation::~TelephoneInformation((void **)a2);
  return a1;
}

__n128 ctb::chatbot::TelephoneInformation::TelephoneInformation(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  result = (__n128)a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(__n128 *)(a1 + 48) = result;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  return result;
}

uint64_t sub_2375B7C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::TelephoneInformation::~TelephoneInformation, (void (*)(uint64_t, uint64_t))ctb::chatbot::TelephoneInformation::TelephoneInformation);
}

void type metadata accessor for ctb.chatbot.TelephoneInformation(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAEA8);
}

_QWORD *sub_2375B7CA0(void **a1, uint64_t a2)
{
  void **v3;

  v3 = std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](a1);
  return ctb::chatbot::AddressEntryList::AddressEntryList(v3, a2);
}

void type metadata accessor for std.__1.vector_AddressEntry_ allocator_AddressEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAEB0);
}

uint64_t sub_2375B7CE0(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

ctb::chatbot::MenuItem *sub_2375B7D04(uint64_t a1, const ctb::chatbot::MenuItem *a2)
{
  ctb::chatbot::MenuItem *v3;

  v3 = (ctb::chatbot::MenuItem *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MenuItem::MenuItem(v3, a2);
}

__n128 *sub_2375B7D40(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

uint64_t sub_2375B7D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (uint64_t)std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

uint64_t sub_2375B7DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t v13;

  v13 = a6(a1, a4, a5);
  a7(v13, a2);
  a6(a2, a4, a5);
  return a1;
}

void type metadata accessor for std.__1.vector_MenuL0Content_ allocator_MenuL0Content__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FAEB8);
}

uint64_t sub_2375B7E20()
{
  return sub_2375B42FC(qword_2567FAEC0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__, (uint64_t)&unk_2375F28FC);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB0E0);
}

uint64_t sub_2375B7E60(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAF00, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.vector_AddressEntry_ allocator_AddressEntry__, (uint64_t)&unk_2375F28B0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B7E9C(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAF38, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__, (uint64_t)&unk_2375F2918);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B7ED8(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FAF68, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__, (uint64_t)&unk_2375F2934);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B7F14()
{
  return sub_2375B42FC(qword_2567FAF70, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__, (uint64_t)&unk_2375F29A8);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB0D8);
}

uint64_t sub_2375B7F54(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAFB0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.vector_MediaEntry_ allocator_MediaEntry__, (uint64_t)&unk_2375F295C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B7F90(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FAFE8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__, (uint64_t)&unk_2375F29C4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B7FCC(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FB018, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__, (uint64_t)&unk_2375F29E0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B8008()
{
  return sub_2375B42FC(qword_2567FB020, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__, (uint64_t)&unk_2375F2A54);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB0D0);
}

uint64_t sub_2375B8048(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FB060, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.vector_OrgNameEntry_ allocator_OrgNameEntry__, (uint64_t)&unk_2375F2A08);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B8084(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FB098, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__, (uint64_t)&unk_2375F2A70);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B80C0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FB0C8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__, (uint64_t)&unk_2375F2A8C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::chatbot::OrgNameEntry>::__push_back_slow_path<ctb::chatbot::OrgNameEntry const&>(a1, a2);
  }
  else
  {
    std::vector<ctb::chatbot::OrgNameEntry>::__construct_one_at_end[abi:ne180100]<ctb::chatbot::OrgNameEntry const&>((uint64_t)a1, a2);
    result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

_QWORD *std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator++[abi:ne180100](_QWORD *result)
{
  *result += 72;
  return result;
}

_QWORD *std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  *result += 72 * a2;
  return result;
}

unint64_t std::operator-[abi:ne180100]<ctb::chatbot::MediaEntry const*,ctb::chatbot::MediaEntry const*>(_QWORD *a1, _QWORD *a2)
{
  return 0x8E38E38E38E38E39 * ((uint64_t)(*a1 - *a2) >> 3);
}

uint64_t std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::chatbot::MediaEntry>::__push_back_slow_path<ctb::chatbot::MediaEntry const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry const&,ctb::chatbot::MediaEntry*>(a1[1], a2);
    result = v3 + 72;
    a1[1] = v3 + 72;
  }
  a1[1] = result;
  return result;
}

void sub_2375B81CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator++[abi:ne180100](_QWORD *result)
{
  *result += 48;
  return result;
}

_QWORD *std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  *result += 48 * a2;
  return result;
}

unint64_t std::operator-[abi:ne180100]<ctb::chatbot::AddressEntry const*,ctb::chatbot::AddressEntry const*>(_QWORD *a1, _QWORD *a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a1 - *a2) >> 4);
}

uint64_t std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100](int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1->u64[1];
  if (v3 >= a1[1].i64[0])
  {
    result = std::vector<ctb::chatbot::AddressEntry>::__push_back_slow_path<ctb::chatbot::AddressEntry const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry const&,ctb::chatbot::AddressEntry*>(a1->i64[1], a2);
    result = v3 + 48;
    a1->i64[1] = v3 + 48;
  }
  a1->i64[1] = result;
  return result;
}

void sub_2375B8260(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2375B8268(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_2375B828C(uint64_t a1, const ctb::chatbot::URIEntryList *a2)
{
  std::string *v3;

  v3 = (std::string *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::URIEntryList::URIEntryList(v3, a2);
}

__n128 *sub_2375B82C8(__n128 *a1, __n128 *a2)
{
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a1, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

__n128 std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_2375B832C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B7DA4(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_URIEntry_ allocator_URIEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB0E8);
}

std::string *ctb::chatbot::SuggestedActionShowQuery::SuggestedActionShowQuery(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

void ctb::chatbot::OrgNameEntry::~OrgNameEntry(std::basic_string<char16_t> *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
}

void type metadata accessor for ctb.chatbot.TelephoneNumber(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB0F0);
}

uint64_t sub_2375B83F4()
{
  return sub_2375B42FC(qword_2567FB0F8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__, (uint64_t)&unk_2375F2BD4);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB1A8);
}

void sub_2375B8434(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_2375B8478(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FB138, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.vector_URIEntry_ allocator_URIEntry__, (uint64_t)&unk_2375F2B88);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B84B4(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(qword_2567FB170, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__, (uint64_t)&unk_2375F2BF0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375B84F0(uint64_t a1)
{
  uint64_t result;

  result = sub_2375B42FC(&qword_2567FB1A0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__, (uint64_t)&unk_2375F2C0C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator++[abi:ne180100](_QWORD *result)
{
  *result += 40;
  return result;
}

_QWORD *std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  *result += 40 * a2;
  return result;
}

unint64_t std::operator-[abi:ne180100]<ctb::chatbot::URIEntry const*,ctb::chatbot::URIEntry const*>(_QWORD *a1, _QWORD *a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a1 - *a2) >> 3);
}

uint64_t std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = std::vector<ctb::chatbot::URIEntry>::__push_back_slow_path<ctb::chatbot::URIEntry const&>(a1, a2);
  }
  else
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)a1[1], (__int128 *)a2);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
    result = v4 + 40;
    a1[1] = v4 + 40;
  }
  a1[1] = result;
  return result;
}

void sub_2375B85D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

ctb::chatbot::CardMessage *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(int a1, ctb::chatbot::CardMessage *this, CardMessage *a3)
{
  return ctb::chatbot::CardMessage::CardMessage(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<1ul,ctb::chatbot::CardCarouselMessage>::__alt[abi:ne180100]<ctb::chatbot::CardCarouselMessage const&>(a2, a3);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(a2, *a3, a3[1], 0x34F72C234F72C235 * ((a3[1] - *a3) >> 3));
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  uint64_t v4;

  v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v2 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2 + 4, a2) & 0x80) == 0)
          return v4;
        ++v2;
      }
      v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  unint64_t v3;
  __n128 v4;
  __n128 result;

  v3 = a3->n128_u64[0];
  *(_DWORD *)(a2 + 8) = a3->n128_u32[2];
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (a3[2].n128_u8[8])
  {
    v4 = a3[1];
    *(_QWORD *)(a2 + 32) = a3[2].n128_u64[0];
    *(__n128 *)(a2 + 16) = v4;
    a3[1].n128_u64[1] = 0;
    a3[2].n128_u64[0] = 0;
    a3[1].n128_u64[0] = 0;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = a3[3];
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = a3[4].n128_u64[0];
  a3[3].n128_u64[0] = 0;
  a3[3].n128_u64[1] = 0;
  a3[4].n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  void **v2;
  char *v3;
  char *v5;
  void *v6;

  v2 = *a1;
  v3 = (char *)**a1;
  if (v3)
  {
    v5 = (char *)v2[1];
    v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        v5 -= 56;
        a2(v5);
      }
      while (v5 != v3);
      v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__push_back_slow_path<ctb::ProvisioningConfiguration::AccessControl::Server const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server const&,ctb::ProvisioningConfiguration::AccessControl::Server*>(v14, a2);
  v15 = v14 + 56;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)&v13, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>);
  return v11;
}

void sub_2375B88B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)va, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>);
  _Unwind_Resume(a1);
}

void sub_2375B8934(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>>);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = a6;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      v10 = a3 + v8;
      v11 = *(_OWORD *)(a3 + v8 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v8 - 40);
      *(_OWORD *)(v9 - 56) = v11;
      *(_QWORD *)(v10 - 48) = 0;
      *(_QWORD *)(v10 - 40) = 0;
      *(_QWORD *)(v10 - 56) = 0;
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 + v8 - 32);
      v12 = (uint64_t *)(a3 + v8 - 24);
      v13 = *v12;
      *(_QWORD *)(a7 + v8 - 24) = *v12;
      v14 = a7 + v8 - 24;
      v15 = *(_QWORD *)(a3 + v8 - 16);
      *(_QWORD *)(v9 - 16) = v15;
      if (v15)
      {
        *(_QWORD *)(v13 + 16) = v14;
        *(_QWORD *)(v10 - 32) = v12;
        *v12 = 0;
        *(_QWORD *)(a3 + v8 - 16) = 0;
      }
      else
      {
        *(_QWORD *)(v9 - 32) = v14;
      }
      *(_BYTE *)(a7 + v8 - 8) = *(_BYTE *)(a3 + v8 - 8);
      v8 -= 56;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Parameter>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_BYTE *)(v7 - 32) = 0;
      v8 = a3 - 4;
      *(_BYTE *)(v7 - 8) = 0;
      if (*((_BYTE *)a3 - 8))
      {
        *(_QWORD *)(v7 - 32) = 0;
        *(_QWORD *)(v7 - 24) = 0;
        *(_QWORD *)(v7 - 16) = 0;
        *(_OWORD *)(v7 - 32) = *((_OWORD *)a3 - 2);
        *(_QWORD *)(v7 - 16) = *(a3 - 2);
        *v8 = 0;
        *(a3 - 3) = 0;
        *(a3 - 2) = 0;
        *(_BYTE *)(v7 - 8) = 1;
      }
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 4;
    }
    while (v8 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 + 24))
    {
      v3 = *(void **)v1;
      if (*(_QWORD *)v1)
      {
        *(_QWORD *)(v1 + 8) = v3;
        operator delete(v3);
      }
    }
    v1 += 32;
  }
}

void std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;
  void *v6;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((_BYTE *)v2 - 8))
      {
        v6 = *v5;
        if (*v5)
        {
          *(v2 - 3) = v6;
          operator delete(v6);
          v5 = *(void ***)(a1 + 16);
        }
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Method>::__push_back_slow_path<ctb::ClientAuthenticityRequest::Method const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method const&,ctb::ClientAuthenticityRequest::Method*>(v14, a2);
  v15 = v14 + 56;
  std::vector<ctb::ClientAuthenticityRequest::Method>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)&v13, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>);
  return v11;
}

void sub_2375B8CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)va, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>);
  _Unwind_Resume(a1);
}

void sub_2375B8D4C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ctb::ClientAuthenticityRequest::Method>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 56) = *(_QWORD *)(v2 + v5 - 56);
      v8 = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer(uint64_t a1, void (*a2)(void))
{
  uint64_t i;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v4; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    a2();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction const&>(a2, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<1ul,ctb::chatbot::SuggestedReply>::__alt[abi:ne180100]<ctb::chatbot::SuggestedReply const&>(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedActionOpenUrlInWebView>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionOpenUrlInWebView const&>(a2, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<2ul,ctb::chatbot::SuggestedActionComposeText>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionComposeText const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(int a1, std::string *this, ctb::chatbot::CreateCalendarEvent *a3)
{
  return ctb::chatbot::CreateCalendarEvent::CreateCalendarEvent(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<8ul,ctb::chatbot::SuggestedActionDialVideoCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialVideoCall const&>(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

std::string *std::__variant_detail::__alt<8ul,ctb::chatbot::SuggestedActionDialVideoCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialVideoCall const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_2375B8F98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(void))
{
  if (**a1)
  {
    a2();
    operator delete(**a1);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL1>::__alt[abi:ne180100]<ctb::chatbot::MenuL1 const&>);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL2EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL2>::__alt[abi:ne180100]<ctb::chatbot::MenuL2 const&>);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

void std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  void **v2;
  char *v3;
  char *v5;
  void *v6;
  char *v8;

  v2 = *a1;
  v3 = (char *)**a1;
  if (v3)
  {
    v5 = (char *)v2[1];
    v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        v8 = v5 - 248;
        a2(v5 - 240);
        v5 = v8;
      }
      while (v8 != v3);
      v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

{
  void **v2;
  char *v3;
  char *v5;
  void *v6;
  char *v8;

  v2 = *a1;
  v3 = (char *)**a1;
  if (v3)
  {
    v5 = (char *)v2[1];
    v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        v8 = v5 - 248;
        a2(v5 - 240);
        v5 = v8;
      }
      while (v8 != v3);
      v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

void std::vector<ctb::chatbot::OrgNameEntry>::__construct_one_at_end[abi:ne180100]<ctb::chatbot::OrgNameEntry const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a2 + 6);
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

void sub_2375B911C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::OrgNameEntry>::__push_back_slow_path<ctb::chatbot::OrgNameEntry const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  _QWORD *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[8 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[8 * v4 + 6] = *((_DWORD *)a2 + 6);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<ctb::chatbot::OrgNameEntry>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)v15, (void (*)(uint64_t, _QWORD))std::__split_buffer<ctb::chatbot::OrgNameEntry>::__destruct_at_end[abi:ne180100]);
  return v13;
}

void sub_2375B9224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)va, (void (*)(uint64_t, _QWORD))std::__split_buffer<ctb::chatbot::OrgNameEntry>::__destruct_at_end[abi:ne180100]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::OrgNameEntry>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

void std::__split_buffer<ctb::chatbot::OrgNameEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<ctb::chatbot::MediaEntry>::__push_back_slow_path<ctb::chatbot::MediaEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[72 * v4];
  v16 = &v10[72 * v9];
  std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry const&,ctb::chatbot::MediaEntry*>(v14, a2);
  v15 = v14 + 72;
  std::vector<ctb::chatbot::MediaEntry>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ctb::chatbot::MediaEntry>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2375B94CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::MediaEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2375B955C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ctb::chatbot::MediaEntry>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 72) = *(_DWORD *)(v2 + v5 - 72);
      v8 = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_BYTE *)(v4 + v5 - 40) = 0;
      *(_BYTE *)(v6 - 16) = 0;
      if (*(_BYTE *)(v2 + v5 - 16))
      {
        v9 = *(_OWORD *)(v7 - 40);
        *(_QWORD *)(v4 + v5 - 24) = *(_QWORD *)(v7 - 24);
        *(_OWORD *)(v4 + v5 - 40) = v9;
        *(_QWORD *)(v7 - 32) = 0;
        *(_QWORD *)(v7 - 24) = 0;
        *(_QWORD *)(v7 - 40) = 0;
        *(_BYTE *)(v6 - 16) = 1;
      }
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v7 - 8);
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::MediaEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<ctb::chatbot::AddressEntry>::__push_back_slow_path<ctb::chatbot::AddressEntry const&>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i64;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int64x2_t v17;
  uint64_t v18;
  char *v19;
  char *v21;
  int64x2_t v22;
  char *v23;
  int64x2_t *v24;

  v3 = a1->i64[0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  i64 = (uint64_t)a1[1].i64;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v24 = a1 + 1;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(i64, v9);
  else
    v10 = 0;
  v21 = v10;
  v22.i64[0] = (uint64_t)&v10[48 * v4];
  v22.i64[1] = v22.i64[0];
  v23 = &v10[48 * v9];
  std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry const&,ctb::chatbot::AddressEntry*>(v22.i64[0], a2);
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  v13 = v22.i64[0];
  v14 = v22.i64[0];
  if (v11 == a1->i64[0])
  {
    v17 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      v15 = *(_OWORD *)(v11 - 48);
      *(_QWORD *)(v14 - 32) = *(_QWORD *)(v11 - 32);
      *(_OWORD *)(v14 - 48) = v15;
      *(_QWORD *)(v11 - 40) = 0;
      *(_QWORD *)(v11 - 32) = 0;
      *(_QWORD *)(v11 - 48) = 0;
      v16 = *(_OWORD *)(v11 - 24);
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v11 - 8);
      *(_OWORD *)(v14 - 24) = v16;
      v14 -= 48;
      *(_QWORD *)(v11 - 16) = 0;
      *(_QWORD *)(v11 - 8) = 0;
      *(_QWORD *)(v11 - 24) = 0;
      v11 -= 48;
    }
    while (v11 != v12);
    v17 = *a1;
  }
  v18 = v13 + 48;
  a1->i64[0] = v14;
  a1->i64[1] = v13 + 48;
  v22 = v17;
  v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  v23 = v19;
  v21 = (char *)v17.i64[0];
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)&v21);
  return v18;
}

void sub_2375B97E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2375B9870(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(void))
{
  if (**a1)
  {
    a2();
    operator delete(**a1);
  }
}

uint64_t std::vector<ctb::chatbot::URIEntry>::__push_back_slow_path<ctb::chatbot::URIEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  _QWORD *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[40 * v4];
  v15 = v14;
  v16 = &v10[40 * v9];
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v14, (__int128 *)a2);
  v14[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  v15 = (std::string *)((char *)v15 + 40);
  std::vector<ctb::chatbot::URIEntry>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)&v13, (void (*)(uint64_t, _QWORD))std::__split_buffer<ctb::chatbot::URIEntry>::__destruct_at_end[abi:ne180100]);
  return v11;
}

void sub_2375B9A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)va, (void (*)(uint64_t, _QWORD))std::__split_buffer<ctb::chatbot::URIEntry>::__destruct_at_end[abi:ne180100]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::URIEntry>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>>);
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, uint64_t (*a3)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = a3(a1 + 2, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_BYTE *)(v7 - 40) = 0;
      v8 = (__int128 *)((char *)a3 - 40);
      *(_BYTE *)(v7 - 16) = 0;
      if (*((_BYTE *)a3 - 16))
      {
        v9 = *v8;
        *(_QWORD *)(v7 - 24) = *((_QWORD *)a3 - 3);
        *(_OWORD *)(v7 - 40) = v9;
        *((_QWORD *)a3 - 4) = 0;
        *((_QWORD *)a3 - 3) = 0;
        *(_QWORD *)v8 = 0;
        *(_BYTE *)(v7 - 16) = 1;
      }
      *(_QWORD *)(v7 - 8) = *((_QWORD *)a3 - 1);
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
      a3 = (__int128 *)((char *)a3 - 40);
    }
    while (v8 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer(uint64_t a1, void (*a2)(uint64_t, _QWORD))
{
  a2(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<ctb::chatbot::URIEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((_BYTE *)v2 - 16))
      {
        if (*((char *)v2 - 17) < 0)
        {
          operator delete(*v5);
          v5 = *(void ***)(a1 + 16);
        }
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t FileTransferInfo.init(rcsFileTransferInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v3 = type metadata accessor for FileInfo();
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - v10;
  v12 = sub_2375EAD78();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1;
  sub_2375EAFDC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    sub_2375B9FF8((uint64_t)v18);
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v11, 1, 1, v27);
  }
  else
  {
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))((char *)&v26 - v15, v18, v12);
    MEMORY[0x24BDAC7A8](v20);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)&v26 - v15, (char *)&v26 - v15, v12);
    sub_2375D1AAC((uint64_t)&v26 - v15, (uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))((char *)&v26 - v15, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v9, 0, 1, v27);
    v19 = sub_2375BA07C((uint64_t)v9, (uint64_t)v11);
  }
  MEMORY[0x24BDAC7A8](v19);
  v21 = v28;
  sub_2375EAFD0();
  sub_2375D1AAC((uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v5);
  v22 = sub_2375EAFE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = v29;
  sub_2375BA038((uint64_t)v5, v29);
  v24 = type metadata accessor for FileTransferInfo();
  return sub_2375BA07C((uint64_t)v11, v23 + *(int *)(v24 + 20));
}

uint64_t sub_2375B9FF8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2375BA038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2375BA07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2375BA0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t Optional;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  _QWORD v49[2];
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54[2];
  uint64_t v55;
  char v56;
  __int128 v57[2];
  uint64_t v58;
  uint64_t v59;
  __n128 v60[2];

  v4 = sub_2375EAEC8();
  sub_2375D1F48(v4, v5, (uint64_t)v60);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1F8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2375EAEEC();
  MEMORY[0x24BDAC7A8](v9);
  sub_2375BB3E0((uint64_t)v8, (uint64_t)v8, &qword_2567FB1F8);
  v10 = sub_2375EAEE0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  v53 = a1;
  if ((_DWORD)v12 == 1)
  {
    sub_2375BB424((uint64_t)v8, &qword_2567FB1F8);
    v59 = 0;
    std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](&v59);
    v52 = v59;
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 64);
    MEMORY[0x24BDAC7A8](v12);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))((char *)v49 - v14, v8, v10);
    MEMORY[0x24BDAC7A8](v15);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v49 - v14, (char *)v49 - v14, v10);
    v16 = sub_2375BB4A8((uint64_t)v49 - v14);
    Optional = ctb::bridging::makeOptional(v16);
    (*(void (**)(char *, uint64_t))(v11 + 8))((char *)v49 - v14, v10);
    sub_2375BB424((uint64_t)v8, &qword_2567FB1F8);
    v52 = Optional;
    v59 = Optional;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB200);
  v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_2375EAEF8();
  MEMORY[0x24BDAC7A8](v21);
  sub_2375BB3E0((uint64_t)v20, (uint64_t)v20, &qword_2567FB200);
  v22 = sub_2375EAE2C();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22);
  if ((_DWORD)v24 == 1)
  {
    v55 = 0;
    memset(v54, 0, sizeof(v54));
    v56 = 1;
  }
  else
  {
    v50 = v49;
    v51 = (_QWORD *)a2;
    v49[1] = v49;
    v25 = *(_QWORD *)(v23 + 64);
    MEMORY[0x24BDAC7A8](v24);
    v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))((char *)v49 - v26, v20, v22);
    MEMORY[0x24BDAC7A8](v27);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v49 - v26, (char *)v49 - v26, v22);
    v28 = sub_2375EAE20();
    sub_2375D1F48(v28, v29, (uint64_t)v54);
    v30 = *(void (**)(char *, uint64_t))(v23 + 8);
    v30((char *)v49 - v26, v22);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)v57, v54);
    ctb::chatbot::URIEntry::~URIEntry((void **)v54);
    ctb::bridging::makeOptional((uint64_t)v57, (uint64_t)v54);
    v30((char *)v49 - v26, v22);
    v56 = 0;
    a2 = (uint64_t)v51;
  }
  sub_2375BB424((uint64_t)v20, &qword_2567FB200);
  if ((v56 & 1) != 0)
  {
    v58 = 0;
    memset(v57, 0, sizeof(v57));
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](v57);
    sub_2375BB424((uint64_t)v54, &qword_2567FB208);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100]((uint64_t)v57, (__int128 *)v54);
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional(v54);
  }
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB210);
  v32 = *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)v49 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2375EAED4();
  MEMORY[0x24BDAC7A8](v34);
  sub_2375BB3E0((uint64_t)v33, (uint64_t)v33, &qword_2567FB210);
  v35 = sub_2375EAE80();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35);
  v38 = v37;
  v39 = 0;
  if ((_DWORD)v37 != 1)
  {
    v51 = v49;
    v50 = v49;
    v40 = *(_QWORD *)(v36 + 64);
    MEMORY[0x24BDAC7A8](v37);
    v41 = (char *)v49 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v41, v33, v35);
    MEMORY[0x24BDAC7A8](v42);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v41, v41, v35);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v41, v35);
    if (MEMORY[0x24BE0D670] && v43 == *MEMORY[0x24BE0D670])
    {
      v44 = 1;
    }
    else if (MEMORY[0x24BE0D650] && v43 == *MEMORY[0x24BE0D650])
    {
      v44 = 2;
    }
    else if (MEMORY[0x24BE0D658] && v43 == *MEMORY[0x24BE0D658])
    {
      v44 = 3;
    }
    else if (MEMORY[0x24BE0D638] && v43 == *MEMORY[0x24BE0D638])
    {
      v44 = 4;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v35);
      v44 = 0;
    }
    v39 = ctb::bridging::makeOptional(v44);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v35);
  }
  sub_2375BB424((uint64_t)v33, &qword_2567FB210);
  if (v38 == 1)
  {
    v54[0].n128_u64[0] = 0;
    std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](v54);
    v45 = sub_2375EAF04();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v53, v45);
    v39 = v54[0].n128_u64[0];
  }
  else
  {
    v46 = sub_2375EAF04();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v53, v46);
    v54[0].n128_u64[0] = v39;
  }
  v47 = v52;
  std::optional<std::string>::optional[abi:ne180100](a2, v60);
  ctb::chatbot::URIEntry::~URIEntry((void **)v60);
  *(_QWORD *)(a2 + 32) = v47;
  std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](a2 + 40, v57);
  result = std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional(v57);
  *(_QWORD *)(a2 + 80) = v39;
  return result;
}

void sub_2375BA758(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  __n128 Optional;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  __n128 v32[2];
  _BYTE v33[32];
  char v34;
  std::string v35;

  v4 = sub_2375EAE5C();
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v6, v7, &v35);
    ctb::bridging::makeOptional((ctb::bridging *)&v35, (uint64_t)v33);
    v34 = 0;
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v35, (__n128 *)v33);
      ctb::chatbot::URIEntry::~URIEntry((void **)v33);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v33, 0, sizeof(v33));
    v34 = 1;
  }
  type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
  v9 = v8;
  v10 = sub_2375B42FC((unint64_t *)&qword_2567FAAD8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___, (uint64_t)&unk_2375F1F20);
  CxxOptional.init(nilLiteral:)(v9, v10);
  sub_2375BB424((uint64_t)v33, &qword_2567FB1E0);
LABEL_6:
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1E8);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2375EAE50();
  MEMORY[0x24BDAC7A8](v14);
  sub_2375BB3E0((uint64_t)v13, (uint64_t)v13, &qword_2567FB1E8);
  v15 = sub_2375EAE44();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
  if ((_DWORD)v17 == 1)
  {
    memset(v33, 0, sizeof(v33));
    v34 = 1;
  }
  else
  {
    v30[2] = v30;
    v31 = a2;
    v30[1] = v30;
    v18 = *(_QWORD *)(v16 + 64);
    MEMORY[0x24BDAC7A8](v17);
    v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))((char *)v30 - v19, v13, v15);
    MEMORY[0x24BDAC7A8](v20);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v30 - v19, (char *)v30 - v19, v15);
    v21 = sub_2375EAE38();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v21, v22, (std::string *)v33);
    v23 = *(void (**)(char *, uint64_t))(v16 + 8);
    v23((char *)v30 - v19, v15);
    std::string::basic_string[abi:ne180100](v32, (__n128 *)v33);
    std::string::~string((std::string *)v33);
    Optional = ctb::bridging::makeOptional((ctb::bridging *)v32, (uint64_t)v33);
    ((void (*)(char *, uint64_t, __n128))v23)((char *)v30 - v19, v15, Optional);
    v34 = 0;
    a2 = v31;
  }
  sub_2375BB424((uint64_t)v13, &qword_2567FB1E8);
  if ((v34 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_SubjectExt_(0);
    v26 = v25;
    v27 = sub_2375B42FC(&qword_2567FAA28, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SubjectExt_, (uint64_t)&unk_2375F1CB8);
    CxxOptional.init(nilLiteral:)(v26, v27);
    v28 = sub_2375EAE68();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
    sub_2375BB424((uint64_t)v33, &qword_2567FB1F0);
  }
  else
  {
    v29 = sub_2375EAE68();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v32, (__n128 *)v33);
    ctb::chatbot::URIEntry::~URIEntry((void **)v33);
  }
  std::optional<std::string>::optional[abi:ne180100](a2, (__n128 *)&v35);
  ctb::chatbot::URIEntry::~URIEntry((void **)&v35.__r_.__value_.__l.__data_);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a2 + 32, v32);
  ctb::chatbot::URIEntry::~URIEntry((void **)v32);
}

void sub_2375BAAD8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  __n128 v30[5];
  __n128 v31;
  uint64_t v32;
  __n128 v33[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v26 = a2;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  v21 = a1;
  v27 = sub_2375EAEA4();
  v25 = *(_QWORD *)(v27 + 16);
  if (v25)
  {
    v3 = sub_2375EAE98();
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)(v3 - 8);
    v24 = v27 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v23 = v3;
    v22 = v6;
    while (v5 < *(_QWORD *)(v27 + 16))
    {
      MEMORY[0x24BDAC7A8](v3);
      v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v8);
      v9 = sub_2375EAE8C();
      v31 = 0uLL;
      v32 = 0;
      std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v31);
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v29 = &v20;
        v11 = sub_2375EAF04();
        v12 = v11;
        v13 = *(_QWORD *)(v11 - 8);
        v14 = *(unsigned __int8 *)(v13 + 80);
        v28 = v9;
        v15 = v9 + ((v14 + 32) & ~v14);
        v17 = *(_QWORD *)(v13 + 64);
        v16 = *(_QWORD *)(v13 + 72);
        v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
        do
        {
          MEMORY[0x24BDAC7A8](v11);
          v18((char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v12);
          sub_2375BA0C4((uint64_t)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v30);
          std::vector<ctb::SIPConferenceInfo::Endpoint>::push_back[abi:ne180100]((uint64_t *)&v31, (uint64_t)v30);
          ctb::SIPConferenceInfo::Endpoint::~Endpoint((void **)v30);
          v15 += v16;
          --v10;
        }
        while (v10);
        swift_bridgeObjectRelease();
        v4 = v23;
        v6 = v22;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v33, &v31);
      std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v31, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100]);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v30, v33);
      std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)v33, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100]);
      std::vector<ctb::SIPConferenceInfo::User>::push_back[abi:ne180100](v26, (uint64_t *)v30);
      ++v5;
      ctb::SIPConferenceInfo::User::~User((void **)v30);
      if (v5 == v25)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    v19 = sub_2375EAEB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v21, v19);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2375BAD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  _BYTE v41[80];

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1C0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2375EAE74();
  MEMORY[0x24BDAC7A8](v6);
  sub_2375BB3E0((uint64_t)v5, (uint64_t)v5, &qword_2567FB1C0);
  v7 = sub_2375EAE68();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  if ((_DWORD)v9 == 1)
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v40 = 1;
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v30 - v11, v5, v7);
    MEMORY[0x24BDAC7A8](v12);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v30 - v11, (char *)&v30 - v11, v7);
    sub_2375BA758((uint64_t)&v30 - v11, (uint64_t)v41);
    ctb::bridging::makeOptional((uint64_t)v41, (uint64_t)&v35);
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v30 - v11, v7);
    v40 = 0;
  }
  sub_2375BB424((uint64_t)v5, &qword_2567FB1C0);
  if ((v40 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_Description_(0);
    v14 = v13;
    v15 = sub_2375B42FC(&qword_2567FAA30, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_Description_, (uint64_t)&unk_2375F1CD4);
    CxxOptional.init(nilLiteral:)(v14, v15);
    sub_2375BB424((uint64_t)&v35, &qword_2567FB1C8);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](v41, &v35);
    std::optional<ctb::SIPConferenceInfo::Description>::~optional(&v35);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1D0);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = a1;
  v19 = sub_2375EAEBC();
  MEMORY[0x24BDAC7A8](v19);
  sub_2375BB3E0((uint64_t)&v30 - v18, (uint64_t)&v30 - v18, &qword_2567FB1D0);
  v20 = sub_2375EAEB0();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))((char *)&v30 - v18, 1, v20);
  if ((_DWORD)v22 == 1)
  {
    v35 = 0uLL;
    *(_QWORD *)&v36 = 0;
    BYTE8(v36) = 1;
  }
  else
  {
    v30 = (uint64_t)&v30;
    v23 = *(_QWORD *)(v21 + 64);
    MEMORY[0x24BDAC7A8](v22);
    v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))((char *)&v30 - v24, (char *)&v30 - v18, v20);
    MEMORY[0x24BDAC7A8](v25);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)&v30 - v24, (char *)&v30 - v24, v20);
    sub_2375BAAD8((uint64_t)&v30 - v24, (uint64_t *)&v35);
    (*(void (**)(char *, uint64_t))(v21 + 8))((char *)&v30 - v24, v20);
    BYTE8(v36) = 0;
  }
  sub_2375BB424((uint64_t)&v30 - v18, &qword_2567FB1D0);
  if ((BYTE8(v36) & 1) != 0)
  {
    v34 = 0;
    v33 = 0uLL;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v33);
    v26 = sub_2375EAF10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v31, v26);
    sub_2375BB424((uint64_t)&v35, &qword_2567FB1D8);
  }
  else
  {
    v27 = sub_2375EAF10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v31, v27);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](&v33, &v35);
    std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v35, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
  }
  v28 = v32;
  std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](v32, v41);
  std::optional<ctb::SIPConferenceInfo::Description>::~optional(v41);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)(v28 + 72), &v33);
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v33, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t ctb::bridging::makeOptional@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(result + 24))
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (*(_BYTE *)(result + 56))
  {
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_BYTE *)(a2 + 56) = 1;
  }
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

{
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(result + 24))
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 11) = *(_OWORD *)(result + 11);
  v2 = (_QWORD *)(result + 40);
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  v4 = a2 + 40;
  v5 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 48) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(result + 32) = v2;
    *v2 = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v4;
  }
  *(_BYTE *)(a2 + 56) = 1;
  return result;
}

__n128 ctb::bridging::makeOptional@<Q0>(ctb::bridging *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)this;
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

{
  __int128 v3;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = *(_OWORD *)((char *)this + 24);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_OWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)(a2 + 64) = *((_QWORD *)this + 8);
  *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 3);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  result = *(__n128 *)((char *)this + 72);
  *(__n128 *)(a2 + 72) = result;
  *(_QWORD *)(a2 + 88) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *(_BYTE *)(a2 + 96) = 1;
  return result;
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::SIPConferenceInfo::User>::__push_back_slow_path<ctb::SIPConferenceInfo::User const&>(a1, a2);
  }
  else
  {
    std::vector<ctb::SIPConferenceInfo::User>::__construct_one_at_end[abi:ne180100]<ctb::SIPConferenceInfo::User const&>((uint64_t)a1, a2);
    result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t std::vector<ctb::SIPConferenceInfo::Endpoint>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::SIPConferenceInfo::Endpoint>::__push_back_slow_path<ctb::SIPConferenceInfo::Endpoint const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint const&,ctb::SIPConferenceInfo::Endpoint*>(a1[1], a2);
    result = v3 + 88;
    a1[1] = v3 + 88;
  }
  a1[1] = result;
  return result;
}

void sub_2375BB300(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void ctb::SIPConferenceInfo::Endpoint::~Endpoint(void **this)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo::ReferredInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 5));
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

void ctb::SIPConferenceInfo::User::~User(void **this)
{
  void **v1;

  v1 = this;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_BYTE *std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[32] = 0;
  return result;
}

uint64_t sub_2375BB3E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2375BB424(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ctb::bridging::makeOptional(unsigned int a1)
{
  return a1 | 0x100000000;
}

uint64_t sub_2375BB4A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = sub_2375EAEE0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (MEMORY[0x24BE0D788] && v4 == *MEMORY[0x24BE0D788])
    return 1;
  if (MEMORY[0x24BE0D730] && v4 == *MEMORY[0x24BE0D730])
    return 2;
  if (MEMORY[0x24BE0D7B0] && v4 == *MEMORY[0x24BE0D7B0])
    return 3;
  if (MEMORY[0x24BE0D798] && v4 == *MEMORY[0x24BE0D798])
    return 4;
  if (MEMORY[0x24BE0D778] && v4 == *MEMORY[0x24BE0D778])
    return 5;
  if (MEMORY[0x24BE0D7A8] && v4 == *MEMORY[0x24BE0D7A8])
    return 6;
  if (MEMORY[0x24BE0D768] && v4 == *MEMORY[0x24BE0D768])
    return 7;
  if (MEMORY[0x24BE0D750] && v4 == *MEMORY[0x24BE0D750])
    return 8;
  if (MEMORY[0x24BE0D748] && v4 == *MEMORY[0x24BE0D748])
    return 9;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return 0;
}

_QWORD *std::vector<ctb::SIPConferenceInfo::User>::__construct_one_at_end[abi:ne180100]<ctb::SIPConferenceInfo::User const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(v3, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_2375BB67C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::__push_back_slow_path<ctb::SIPConferenceInfo::User const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(v11, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<ctb::SIPConferenceInfo::User>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<ctb::SIPConferenceInfo::User>::~__split_buffer(v14);
  return v12;
}

void sub_2375BB798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::SIPConferenceInfo::User>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<ctb::SIPConferenceInfo::User>::~__split_buffer(void **a1)
{
  std::__split_buffer<ctb::SIPConferenceInfo::User>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<ctb::SIPConferenceInfo::User>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<ctb::SIPConferenceInfo::Endpoint>::__push_back_slow_path<ctb::SIPConferenceInfo::Endpoint const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[88 * v4];
  v16 = &v10[88 * v9];
  std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint const&,ctb::SIPConferenceInfo::Endpoint*>(v14, a2);
  v15 = v14 + 88;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ctb::SIPConferenceInfo::Endpoint>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2375BBAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::SIPConferenceInfo::Endpoint>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2375BBB20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ctb::SIPConferenceInfo::Endpoint>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = (__int128 *)*result;
  v4 = (__int128 *)result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 88;
    v4 = (__int128 *)((char *)v4 - 88);
    result = (uint64_t *)std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint*>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  v3 = *((_QWORD *)a2 + 4);
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 32) = v3;
  *(_BYTE *)(result + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_BYTE *)(result + 64) = 0;
    if (*((_BYTE *)a2 + 64))
    {
      v4 = *(__int128 *)((char *)a2 + 40);
      *(_QWORD *)(result + 56) = *((_QWORD *)a2 + 7);
      *(_OWORD *)(result + 40) = v4;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *(_BYTE *)(result + 64) = 1;
    }
    *(_BYTE *)(result + 72) = 1;
  }
  *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
  return result;
}

uint64_t std::__split_buffer<ctb::SIPConferenceInfo::Endpoint>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2375BBCB0()
{
  uint64_t v0;

  v0 = sub_2375EAB44();
  __swift_allocate_value_buffer(v0, qword_2567FB218);
  __swift_project_value_buffer(v0, (uint64_t)qword_2567FB218);
  return sub_2375EAB38();
}

void sub_2375BBD30()
{
  qword_2567FB230 = 0x746E65436D6D6F43;
  *(_QWORD *)algn_2567FB238 = 0xEA00000000007265;
}

void sub_2375BBD58()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (qword_2567FA230 != -1)
    swift_once();
  v0 = sub_2375EAB44();
  __swift_project_value_buffer(v0, (uint64_t)qword_2567FB218);
  swift_bridgeObjectRetain_n();
  v1 = sub_2375EAB2C();
  v2 = sub_2375EC308();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB2D8);
    v5 = sub_2375EC230();
    sub_2375C3240(v5, v6, &v7);
    sub_2375EC338();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2375A0000, v1, v2, "Received response from diagnostic Reporter snapshot for %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v4, -1, -1);
    MEMORY[0x23B81641C](v3, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_2375BBF14(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
    v3 = sub_2375EC1E8();
  else
    v3 = 0;
  swift_retain();
  v2(v3);
  swift_release();
  return swift_bridgeObjectRelease();
}

AutoBugCaptureHelper __swiftcall AutoBugCaptureHelper.init()()
{
  return (AutoBugCaptureHelper)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id AutoBugCaptureHelper.init()()
{
  objc_super v1;

  v1.super_class = (Class)AutoBugCaptureHelper;
  return objc_msgSendSuper2(&v1, sel_init);
}

unint64_t type metadata accessor for AutoBugCaptureHelper()
{
  unint64_t result;

  result = qword_2567FB2C8;
  if (!qword_2567FB2C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2567FB2C8);
  }
  return result;
}

void sub_2375BC138()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t aBlock;
  uint64_t v21;

  if (qword_2567FA230 != -1)
    swift_once();
  v0 = sub_2375EAB44();
  __swift_project_value_buffer(v0, (uint64_t)qword_2567FB218);
  v1 = sub_2375EAB2C();
  v2 = sub_2375EC308();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2375A0000, v1, v2, "Reporting error with ABC", v3, 2u);
    MEMORY[0x23B81641C](v3, -1, -1);
  }

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB3478]), sel_init);
  v5 = (void *)sub_2375EC218();
  v6 = (void *)sub_2375EC218();
  v7 = (void *)sub_2375EC218();
  v8 = (void *)sub_2375EC218();
  if (qword_2567FA238 != -1)
    swift_once();
  v9 = (void *)sub_2375EC218();
  v10 = objc_msgSend(v4, sel_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_, v5, v6, v7, v8, v9, 0);

  if (v10)
  {
    aBlock = 0;
    v11 = v10;
    sub_2375EC1DC();

  }
  v19 = v10;
  v12 = sub_2375EAB2C();
  v13 = sub_2375EC314();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    aBlock = v15;
    *(_DWORD *)v14 = 136315138;
    v21 = (uint64_t)v10;
    v16 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB2D0);
    v17 = sub_2375EC230();
    v21 = sub_2375C3240(v17, v18, &aBlock);
    sub_2375EC338();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2375A0000, v12, v13, "Couldn't parse signature: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v15, -1, -1);
    MEMORY[0x23B81641C](v14, -1, -1);

  }
  else
  {

  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_2375BC82C()
{
  uint64_t v0;

  v0 = sub_2375EAB44();
  __swift_allocate_value_buffer(v0, qword_2567FB2E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2567FB2E0);
  return sub_2375EAB38();
}

void sub_2375BC89C()
{
  qword_2567FB2F8 = 0x6E6F6870656C6554;
  unk_2567FB300 = 0xE900000000000079;
}

void sub_2375BC8C4()
{
  qword_2567FB308 = 5456722;
  unk_2567FB310 = 0xE300000000000000;
}

void sub_2375BC8F0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EB450();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000019, 0x80000002375F0330, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB3A0, (uint64_t (*)(uint64_t))MEMORY[0x24BE0E1A8], MEMORY[0x24BE0E198]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BCF1C(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EAE14();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000011, 0x80000002375F0310, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB398, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D578], MEMORY[0x24BE0D570]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BD54C(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EAFE8();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000013, 0x80000002375F02F0, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB388, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D9A8], MEMORY[0x24BE0D998]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BDB78(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EACF4();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0x6C65766E45534352, 0xEB0000000065706FLL, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB380, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D2A0], MEMORY[0x24BE0D290]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BE1A4(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EB414();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000019, 0x80000002375F02D0, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB378, (uint64_t (*)(uint64_t))MEMORY[0x24BE0E160], MEMORY[0x24BE0E148]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BE7D0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EAF10();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000011, 0x80000002375F02B0, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB370, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D820], MEMORY[0x24BE0D808]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BEE00(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EADF0();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000010, 0x80000002375F0290, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB368, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D540], MEMORY[0x24BE0D528]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BF430(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EAF4C();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000012, 0x80000002375F0270, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB360, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D8A0], MEMORY[0x24BE0D898]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375BFA60(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EB2AC();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD000000000000017, 0x80000002375F0250, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB358, (uint64_t (*)(uint64_t))MEMORY[0x24BE0DDE0], MEMORY[0x24BE0DDD8]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375C008C(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  void *v7;
  char *v8;
  void *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(char *, uint64_t);
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  _QWORD *v48;
  char *v49;
  id v50;
  unint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  id v56;

  v53 = (uint64_t *)a6;
  v54 = a1;
  v51 = a5;
  v52 = a7;
  v11 = v8;
  v12 = v7;
  v14 = a3(0);
  if (qword_2567FA240 != -1)
    swift_once();
  v15 = sub_2375EAB44();
  __swift_project_value_buffer(v15, (uint64_t)qword_2567FB2E0);
  v16 = sub_2375EAB2C();
  v17 = sub_2375EC308();
  v50 = v12;
  if (os_log_type_enabled(v16, v17))
  {
    v47 = (uint8_t *)v14;
    v48 = a2;
    v18 = (uint8_t *)swift_slowAlloc();
    v49 = v8;
    v19 = (void *)swift_slowAlloc();
    v56 = v19;
    *(_DWORD *)v18 = 136315138;
    v55 = sub_2375C3240(a4, 0xEB00000000656761, (uint64_t *)&v56);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v16, v17, "Attempting to decode %s in BlastDoor", v18, 0xCu);
    swift_arrayDestroy();
    v20 = v19;
    v11 = v49;
    MEMORY[0x23B81641C](v20, -1, -1);
    MEMORY[0x23B81641C](v18, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(v51, a3, (uint64_t)v53);
  v21 = v11;
  sub_2375EAB08();
  if (v11)
  {
    swift_release();
    v56 = v11;
    v22 = sub_2375EC1C4();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(_QWORD *)(v23 + 64);
    MEMORY[0x24BDAC7A8](v22);
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    v26 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v53 = &v46;

      v52 = &v46;
      MEMORY[0x24BDAC7A8](v27);
      v28 = (char *)&v46 - v25;
      v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))((char *)&v46 - v25, (char *)&v46 - v25, v22);
      v54 = &v46;
      MEMORY[0x24BDAC7A8](v29);
      v30 = (char *)&v46 - v25;
      v31 = *(unint64_t **)(v23 + 16);
      ((void (*)(char *, char *, uint64_t))v31)((char *)&v46 - v25, (char *)&v46 - v25, v22);
      v32 = sub_2375EAB2C();
      v33 = sub_2375EC308();
      v34 = os_log_type_enabled(v32, v33);
      v51 = v31;
      if (v34)
      {
        v35 = (uint8_t *)swift_slowAlloc();
        v48 = (_QWORD *)swift_slowAlloc();
        v49 = v28;
        *(_DWORD *)v35 = 138412290;
        v47 = v35 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        ((void (*)(uint64_t, char *, uint64_t))v31)(v36, v30, v22);
        v28 = v49;
        v37 = _swift_stdlib_bridgeErrorToNSError();
        v55 = v37;
        sub_2375EC338();
        v38 = v48;
        *v48 = v37;
        v39 = *(void (**)(char *, uint64_t))(v23 + 8);
        v39(v30, v22);
        _os_log_impl(&dword_2375A0000, v32, v33, "Detected a BlastDoor explosion: %@", v35, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v38, -1, -1);
        MEMORY[0x23B81641C](v35, -1, -1);
      }
      else
      {
        v39 = *(void (**)(char *, uint64_t))(v23 + 8);
        v39(v30, v22);
      }

      v40 = objc_msgSend(v50, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v41 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v42 = (void *)sub_2375EC218();
      v43 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v44 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v40, sel_reportWithDomain_type_subtype_subtypeContext_, v41, v42, v43, v44);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      ((void (*)(uint64_t, char *, uint64_t))v51)(v45, v28, v22);
      swift_willThrow();
      swift_unknownObjectRelease();
      v39(v28, v22);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375C06B4(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EBD44();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(1868983881, 0xE400000000000000, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB348, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F028], MEMORY[0x24BE0F018]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375C0CD0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EB618();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0xD00000000000001CLL, 0x80000002375F0230, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB340, (uint64_t (*)(uint64_t))MEMORY[0x24BE0E418], MEMORY[0x24BE0E410]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

void sub_2375C12FC(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;

  v3 = v2;
  sub_2375EC1AC();
  if (qword_2567FA240 != -1)
    swift_once();
  v6 = sub_2375EAB44();
  __swift_project_value_buffer(v6, (uint64_t)qword_2567FB2E0);
  v7 = sub_2375EAB2C();
  v8 = sub_2375EC308();
  v41 = v3;
  if (os_log_type_enabled(v7, v8))
  {
    v39 = a2;
    v9 = (uint8_t *)swift_slowAlloc();
    v40 = a1;
    v10 = (void *)swift_slowAlloc();
    v44 = v10;
    *(_DWORD *)v9 = 136315138;
    v43 = sub_2375C3240(0x656B6F7665524D49, 0xE800000000000000, (uint64_t *)&v44);
    sub_2375EC338();
    _os_log_impl(&dword_2375A0000, v7, v8, "Attempting to decode %s in BlastDoor", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B81641C](v10, -1, -1);
    MEMORY[0x23B81641C](v9, -1, -1);
  }

  sub_2375EAB20();
  swift_allocObject();
  sub_2375EAB14();
  sub_2375B42FC(&qword_2567FB318, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8A0], MEMORY[0x24BE0F890]);
  sub_2375EAB08();
  if (v42)
  {
    swift_release();
    v44 = v42;
    v11 = sub_2375EC1C4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB320);
    if (swift_dynamicCast())
    {
      v40 = v35;

      v39 = v35;
      MEMORY[0x24BDAC7A8](v16);
      v17 = (char *)v35 - v14;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)v35 - v14, (char *)v35 - v14, v11);
      v42 = v35;
      MEMORY[0x24BDAC7A8](v18);
      v19 = (char *)v35 - v14;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v20((char *)v35 - v14, (char *)v35 - v14, v11);
      v21 = sub_2375EAB2C();
      v22 = sub_2375EC308();
      v23 = os_log_type_enabled(v21, v22);
      v38 = (void (*)(uint64_t, char *, uint64_t))v20;
      if (v23)
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        v37 = v17;
        *(_DWORD *)v24 = 138412290;
        v35[1] = v24 + 4;
        sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
        swift_allocError();
        v20(v25, v19, v11);
        v17 = v37;
        v26 = _swift_stdlib_bridgeErrorToNSError();
        v43 = v26;
        sub_2375EC338();
        v27 = v36;
        *v36 = v26;
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28(v19, v11);
        _os_log_impl(&dword_2375A0000, v21, v22, "Detected a BlastDoor explosion: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB330);
        swift_arrayDestroy();
        MEMORY[0x23B81641C](v27, -1, -1);
        MEMORY[0x23B81641C](v24, -1, -1);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v12 + 8);
        v28((char *)v35 - v14, v11);
      }

      v29 = objc_msgSend(v41, sel_autoBugCaptureHelper);
      if (qword_2567FA248 != -1)
        swift_once();
      v30 = (void *)sub_2375EC218();
      if (qword_2567FA250 != -1)
        swift_once();
      v31 = (void *)sub_2375EC218();
      v32 = (void *)sub_2375EC218();
      sub_2375EC1B8();
      v33 = (void *)sub_2375EC218();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_reportWithDomain_type_subtype_subtypeContext_, v30, v31, v32, v33);

      sub_2375B42FC(&qword_2567FB328, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F8D0], MEMORY[0x24BE0F8E8]);
      swift_allocError();
      v38(v34, v17, v11);
      swift_willThrow();
      swift_unknownObjectRelease();
      v28(v17, v11);
    }

  }
  else
  {
    swift_release();
  }
}

id sub_2375C1920(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[1152];
  _BYTE v15[1160];
  _BYTE v16[1160];
  uint64_t v17;

  v17 = sub_2375EB450();
  v4 = *(_QWORD *)(v17 - 8);
  v5 = *(id *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v17);
  v6 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = &v14[-v6];
  sub_2375BC8F0(a2, &v14[-v6]);
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    v9 = &v14[-v6];
    v10 = &v14[-v6];
    v11 = &v14[-v6];
    v12 = v17;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v10, v11, v17);
    sub_2375DC120((uint64_t)v9, (uint64_t)v16);
    ctb::ProvisioningConfiguration::ProvisioningConfiguration((ctb::ProvisioningConfiguration *)v14, (const ctb::ProvisioningConfiguration *)v16);
    ctb::bridging::makeOptional((uint64_t)v14, (uint64_t)v15);
    v5 = objc_msgSend(objc_allocWithZone((Class)CTBProvisioningConfigurationWrapper), sel_initWithWrapped_, v15);
    ctb::ProvisioningConfiguration::~ProvisioningConfiguration((ctb::ProvisioningConfiguration *)v16);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v12);
  }
  return v5;
}

uint64_t sub_2375C1A80(uint64_t a1, _QWORD *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  double v17;
  double v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  std::string *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  std::string v25;
  std::string v26;
  CPMGroupManagement v27;

  v5 = sub_2375EAAB4();
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v22 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2375EAE14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)&v22 - v10;
  sub_2375BCF1C(a2, (char **)((char *)&v22 - v10));
  if (v3)
    return (uint64_t)v2;
  MEMORY[0x24BDAC7A8](v12);
  v13 = (char *)&v22 - v10;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v22 - v10, (char *)&v22 - v10, v7);
  v14 = sub_2375EADFC();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v15, &v26);
  v16 = v22;
  sub_2375EAE08();
  sub_2375EAAA8();
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v13, v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v24);
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v18 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v18 < 9.22337204e18)
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v27, (__n128 *)&v26);
    std::string::~string(&v26);
    *(_QWORD *)&v27.fId.__r_.var0 = (uint64_t)v18;
    v21 = ctb::CPMGroupManagement::CPMGroupManagement(&v25, &v27);
    ctb::bridging::makeOptional((__n128 *)v21, (__n128 *)&v26);
    v2 = objc_msgSend(objc_allocWithZone((Class)CTBBootstrappingInfoWrapper), sel_initWithWrapped_, &v26);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v27);
    v19(v11, v7);
    return (uint64_t)v2;
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_2375C1CAC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  unint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17[10];
  _BYTE v18[176];
  __n128 v19[11];
  uint64_t v20;

  v20 = sub_2375EACDC();
  v5 = *(_QWORD *)(v20 - 8);
  v6 = *(id *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v20);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v16 - v7;
  sub_2375C008C(a1, a2, v9, 0x7373654D4D495043, &qword_2567FB390, MEMORY[0x24BE0D258], (uint64_t *)((char *)&v16 - v7));
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v10);
    v11 = (char *)&v16 - v7;
    v12 = (char *)&v16 - v7;
    v13 = (char *)&v16 - v7;
    v14 = v20;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v12, v13, v20);
    sub_2375D4954((uint64_t)v11, v19);
    ctb::CPIMMessage::CPIMMessage((ctb::CPIMMessage *)v17, (const ctb::CPIMMessage *)v19);
    ctb::bridging::makeOptional(v17, (uint64_t)v18);
    v6 = objc_msgSend(objc_allocWithZone((Class)CTBCPIMMessageWrapper), sel_initWithWrapped_, v18);
    ctb::CPIMMessage::~CPIMMessage((ctb::CPIMMessage *)v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v14);
  }
  return v6;
}

id sub_2375C1E34(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15[18];
  _BYTE v16[304];
  void *v17[38];
  uint64_t v18;

  v18 = sub_2375EAFE8();
  v4 = *(_QWORD *)(v18 - 8);
  v5 = *(id *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v6 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (char *)&v14 - v6;
  sub_2375BD54C(a2, (uint64_t *)((char *)&v14 - v6));
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    v9 = (char *)&v14 - v6;
    v10 = (char *)&v14 - v6;
    v11 = (char *)&v14 - v6;
    v12 = v18;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v11, v18);
    sub_2375DB130((uint64_t)v9, (uint64_t)v17);
    ctb::FileTransferDescriptor::FileTransferDescriptor((ctb::FileTransferDescriptor *)v15, (const ctb::FileTransferDescriptor *)v17);
    ctb::bridging::makeOptional(v15, (uint64_t)v16);
    v5 = objc_msgSend(objc_allocWithZone((Class)CTBFileTransferDescriptorWrapper), sel_initWithWrapped_, v16);
    ctb::FileTransferDescriptor::~FileTransferDescriptor(v17);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v12);
  }
  return v5;
}

id sub_2375C2184(uint64_t a1, _QWORD *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  ctb::IMDispositionNotification *v22;
  ctb::IMDispositionNotification *v23;
  id v24;
  char *v25;
  _QWORD v27[2];
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  IMDispositionNotification v37;
  _QWORD *v38;

  v33 = sub_2375EAA9C();
  v32 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_2375EAAB4();
  v30 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2375EB414();
  v38 = *(_QWORD **)(v34 - 8);
  v9 = v38[8];
  MEMORY[0x24BDAC7A8](v34);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375BE1A4(a2, (_QWORD *)((char *)v27 - v10));
  if (!v3)
  {
    v27[1] = 0;
    v29 = v27;
    MEMORY[0x24BDAC7A8](v11);
    v12 = (uint64_t (*)(char *, char *, uint64_t))v38[2];
    v28 = (char *)v27 - v10;
    v13 = v34;
    v14 = v12((char *)v27 - v10, (char *)v27 - v10, v34);
    MEMORY[0x24BDAC7A8](v14);
    v12((char *)v27 - v10, (char *)v27 - v10, v13);
    v15 = sub_2375D8CE4((uint64_t)v27 - v10);
    v16 = sub_2375EB408();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v16, v17, &v36);
    sub_2375EB3FC();
    sub_2375CBE38((uint64_t)v6);
    v18 = sub_2375EAA54();
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v33);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v18, v20, &v35);
    v21 = (void (*)(char *, uint64_t))v38[1];
    v21((char *)v27 - v10, v13);
    v37.fDispositionType = v15;
    std::string::basic_string[abi:ne180100]((__n128 *)&v37.fMessageID, (__n128 *)&v36);
    std::string::~string(&v36);
    std::string::basic_string[abi:ne180100]((__n128 *)&v37.fMessageID.__r_.var0, (__n128 *)&v35);
    std::string::~string(&v35);
    v23 = ctb::IMDispositionNotification::IMDispositionNotification(v22, &v37);
    ctb::bridging::makeOptional((uint64_t)v23, (uint64_t)&v36);
    v24 = objc_msgSend(objc_allocWithZone((Class)CTBIMDispositionNotificationWrapper), sel_initWithWrapped_, &v36);
    v25 = v28;
    v2 = v24;
    ctb::IMCompositionIndication::~IMCompositionIndication((uint64_t)&v37);
    v21(v25, v13);
  }
  return v2;
}

id sub_2375C2488(uint64_t a1, _QWORD *x1_0)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  std::string v14[4];
  _BYTE v15[104];
  uint64_t *v16[13];
  uint64_t v17;
  SIPConferenceInfo v18;

  v17 = sub_2375EAF10();
  v4 = *(_QWORD *)(v17 - 8);
  v5 = *(id *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v17);
  v6 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (char *)v14 - v6;
  sub_2375BE7D0(x1_0, (std::string::size_type *)((char *)v14[0].__r_.__value_.__r.__words - v6));
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    v9 = (char *)v14 - v6;
    v10 = (char *)v14 - v6;
    v11 = (char *)v14 - v6;
    v12 = v17;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v11, v17);
    sub_2375BAD70((uint64_t)v9, (uint64_t)v16);
    ctb::SIPConferenceInfo::SIPConferenceInfo(v14, v16);
    ctb::bridging::makeOptional((ctb::bridging *)v14, v18, v15);
    v5 = objc_msgSend(objc_allocWithZone((Class)CTBSIPConferenceInfoWrapper), sel_initWithWrapped_, v15);
    ctb::SIPConferenceInfo::~SIPConferenceInfo((ctb::SIPConferenceInfo *)v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v12);
  }
  return v5;
}

id sub_2375C25E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  SIPResourceLists *v10;
  std::string v12;
  uint64_t v13[4];
  CategoryList v14;

  v4 = sub_2375EADF0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(id *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375BEE00(a2, (std::string::size_type *)((char *)v12.__r_.__value_.__r.__words - v7));
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v12 - v7, (char *)&v12 - v7, v4);
    sub_2375AE794((uint64_t)&v12 - v7, (std::vector<std::string> *)&v14);
    v9 = ctb::chatbot::CategoryList::CategoryList(&v12, &v14);
    ctb::bridging::makeOptional(v13, (ctb::bridging *)v9, v10);
    v6 = objc_msgSend(objc_allocWithZone((Class)CTBSIPResourceListsWrapper), sel_initWithWrapped_, v13);
    ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)&v14, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
    (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v12 - v7, v4);
  }
  return v6;
}

id sub_2375C274C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v11;
  std::string v12;
  __n128 v13[2];
  CPMGroupManagement v14;

  v4 = sub_2375EAF4C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(id *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375BF430(a2, (uint64_t *)((char *)&v11 - v7));
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v11 - v7, (char *)&v11 - v7, v4);
    sub_2375D8608((uint64_t)&v11 - v7, (__n128 *)&v14);
    v9 = ctb::CPMGroupManagement::CPMGroupManagement(&v12, &v14);
    ctb::bridging::makeOptional((__n128 *)v9, v13);
    v6 = objc_msgSend(objc_allocWithZone((Class)CTBCPMGroupManagementWrapper), sel_initWithWrapped_, v13);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v11 - v7, v4);
  }
  return v6;
}

id sub_2375C28A0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  ctb::IMCompositionIndication *v9;
  _BYTE v11[64];
  _BYTE v12[72];
  IMCompositionIndication v13;

  v4 = sub_2375EB2AC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(id *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375BFA60(a2, &v11[-v7]);
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(&v11[-v7], &v11[-v7], v4);
    sub_2375D81B4((uint64_t)&v11[-v7], &v13.fState);
    v9 = ctb::IMCompositionIndication::IMCompositionIndication((ctb::IMCompositionIndication *)v11, &v13);
    ctb::bridging::makeOptional((uint64_t)v9, (uint64_t)v12);
    v6 = objc_msgSend(objc_allocWithZone((Class)CTBIMCompositionIndicationWrapper), sel_initWithWrapped_, v12);
    ctb::IMCompositionIndication::~IMCompositionIndication((uint64_t)&v13);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(&v11[-v7], v4);
  }
  return v6;
}

id sub_2375C29F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v17[344];
  _BYTE v18[352];
  _BYTE v19[352];
  uint64_t v20;

  v20 = sub_2375EB834();
  v5 = *(_QWORD *)(v20 - 8);
  v6 = *(id *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v20);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = &v17[-v7 - 8];
  sub_2375C008C(a1, a2, v9, 0x7373654D746F6F52, &qword_2567FB350, MEMORY[0x24BE0E808], (uint64_t *)&v17[-v7 - 8]);
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v10);
    v11 = &v17[-v7 - 8];
    v12 = &v17[-v7 - 8];
    v13 = &v17[-v7 - 8];
    v14 = v20;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v12, v13, v20);
    sub_2375C7644((uint64_t)v11, v19);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v17, v19);
    ctb::bridging::makeOptional((ctb::bridging *)v17, v18);
    v6 = objc_msgSend(objc_allocWithZone((Class)CTBChatBotMessageWrapper), sel_initWithWrapped_, v18);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v19);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v14);
  }
  return v6;
}

id sub_2375C2B7C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v15[680];
  _BYTE v16[688];
  void *v17[86];
  uint64_t v18;

  v18 = sub_2375EBD44();
  v4 = *(_QWORD *)(v18 - 8);
  v5 = *(id *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v6 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = &v15[-v6 - 8];
  sub_2375C06B4(a2, &v15[-v6 - 8]);
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    v9 = &v15[-v6 - 8];
    v10 = &v15[-v6 - 8];
    v11 = &v15[-v6 - 8];
    v12 = v18;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v10, v11, v18);
    sub_2375C42DC(v9, (uint64_t)v17);
    ctb::chatbot::RenderInformation::RenderInformation((ctb::chatbot::RenderInformation *)v15, (const ctb::chatbot::RenderInformation *)v17);
    ctb::bridging::makeOptional((uint64_t)v15, (uint64_t)v16);
    v5 = objc_msgSend(objc_allocWithZone((Class)CTBChatBotRenderInformationWrapper), sel_initWithWrapped_, v16);
    ctb::chatbot::RenderInformation::~RenderInformation(v17);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v12);
  }
  return v5;
}

id sub_2375C2CDC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  ctb::bridging *v9;
  SIPResourceLists *v10;
  _BYTE v12[24];
  uint64_t v13[4];
  ClientAuthenticityRequest v14;

  v4 = sub_2375EB618();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(id *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375C0CD0(a2, &v12[-v7]);
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(&v12[-v7], &v12[-v7], v4);
    sub_2375D2CD4((uint64_t)&v12[-v7], (__n128 *)&v14);
    v9 = ctb::ClientAuthenticityRequest::ClientAuthenticityRequest((ctb::ClientAuthenticityRequest *)v12, &v14);
    ctb::bridging::makeOptional(v13, v9, v10);
    v6 = objc_msgSend(objc_allocWithZone((Class)CTBClientAuthenticityRequestWrapper), sel_initWithWrapped_, v13);
    ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)&v14, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(&v12[-v7], v4);
  }
  return v6;
}

id sub_2375C2E40(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string v11;
  _BYTE v12[88];
  IMRevoke v13;

  v4 = sub_2375EC1AC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(id *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375C12FC(a2, (std::string::size_type *)((char *)v11.__r_.__value_.__r.__words - v7));
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v11 - v7, (char *)&v11 - v7, v4);
    sub_2375D89B8((uint64_t)&v11 - v7, (uint64_t)&v13);
    v9 = ctb::IMRevoke::IMRevoke(&v11, &v13);
    ctb::bridging::makeOptional((uint64_t)v9, (uint64_t)v12);
    v6 = objc_msgSend(objc_allocWithZone((Class)CTBIMRevokeWrapper), sel_initWithWrapped_, v12);
    ctb::IMRevoke::~IMRevoke((void **)&v13);
    (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v11 - v7, v4);
  }
  return v6;
}

id sub_2375C2F94(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;

  v7 = a3;
  v8 = a1;
  v9 = sub_2375EAA24();
  v11 = v10;

  v12 = (void *)a5(v9, v11);
  sub_2375C3068(v9, v11);
  return v12;
}

uint64_t sub_2375C3068(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

std::string *ctb::IMRevoke::IMRevoke(std::string *this, const IMRevoke *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)&a2->fMessageID.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->fMessageID.__r_.__value_.var0.var1.__data_, a2->fMessageID.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    v4 = *(_OWORD *)a2->fMessageID.__r_.__value_.var0.var0.__data_;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)&a2->fMessageID.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (a2[1].fMessageID.__r_.__value_.var0.var0.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)&a2->fMessageID.__r_.var0, a2->fMessageID.var0);
  }
  else
  {
    v5 = *(_OWORD *)&a2->fMessageID.__r_.var0;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)a2[1].fMessageID.__r_.__value_.var0.var1.__data_;
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)&a2[1].fMessageID.__r_.var1 + 3) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)a2[1].fMessageID.__r_.__value_.var0.var1.__size_, *((_QWORD *)&a2[1].fMessageID.__r_.__value_.var0.var1 + 2));
  }
  else
  {
    v7 = *(_OWORD *)&a2[1].fMessageID.__r_.__value_.var0.var1.__size_;
    this[2].__r_.__value_.__r.__words[2] = *(_QWORD *)&a2[1].fMessageID.__r_.var0;
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = a2[1].fMessageID.var0;
  return this;
}

void sub_2375C3164(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 ctb::bridging::makeOptional@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  *(_BYTE *)(a2 + 80) = 1;
  return result;
}

{
  __n128 result;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *(__n128 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 56) = v4;
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  return result;
}

{
  __int128 v2;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a2 + 80) = v2;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(_BYTE *)(a2 + 144) = 1;
  return result;
}

{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v3 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = v3;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = *(__n128 *)(a1 + 120);
  *(__n128 *)(a2 + 120) = result;
  *(_BYTE *)(a2 + 136) = 1;
  return result;
}

{
  __int128 v2;
  __n128 result;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a2 + 80) = *(_WORD *)(a1 + 80);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = v4;
  *(_QWORD *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 88) = 1;
  return result;
}

void ctb::IMRevoke::~IMRevoke(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t sub_2375C3240(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_2375C3310(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_2375C38A8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_2375C38A8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_2375C3310(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2375EC344();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_2375C34C8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2375EC3BC();
  if (!v8)
  {
    sub_2375EC3D4();
    __break(1u);
LABEL_17:
    result = sub_2375EC3EC();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_2375C34C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_2375C355C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2375C3738(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_2375C3738(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_2375C355C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_2375C36D0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2375EC3B0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2375EC3D4();
      __break(1u);
LABEL_10:
      v2 = sub_2375EC26C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2375EC3EC();
    __break(1u);
LABEL_14:
    result = sub_2375EC3D4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_2375C36D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB338);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_2375C3738(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB338);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_2375C38A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ctb::bridging::makeOptional@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::RenderInformation>(a2, a1);
}

{
  return std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration>(a2, a1);
}

{
  uint64_t result;

  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, a1);
  *(_BYTE *)(result + 336) = 1;
  return result;
}

void ctb::chatbot::RenderInformation::~RenderInformation(void **this)
{
  void **v2;

  if (*((_BYTE *)this + 672) && *((char *)this + 671) < 0)
    operator delete(this[81]);
  if (*((char *)this + 647) < 0)
    operator delete(this[78]);
  if (*((char *)this + 623) < 0)
    operator delete(this[75]);
  if (*((_BYTE *)this + 584))
  {
    v2 = this + 70;
    std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(char *))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)this);
}

_BYTE *ctb::bridging::makeOptional@<X0>(ctb::bridging *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;

  result = a2;
  *a2 = 0;
  a2[336] = 0;
  if (*((_BYTE *)this + 336))
  {
    result = (_BYTE *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)this);
    result[336] = 1;
  }
  result[344] = 1;
  return result;
}

ctb::IMCompositionIndication *ctb::IMCompositionIndication::IMCompositionIndication(ctb::IMCompositionIndication *this, const IMCompositionIndication *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)this = a2->fState;
  if (*((char *)&a2->fLastActive.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), a2->fLastActive.__r_.__value_.var0.var1.__data_, a2->fLastActive.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    v4 = *(_OWORD *)a2->fLastActive.__r_.__value_.var0.var0.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&a2->fLastActive.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = (std::string *)((char *)this + 32);
  if (*((char *)&a2[1].fState + 7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)&a2->fLastActive.__r_.var0, a2->fLastActive.var0);
  }
  else
  {
    v6 = *(_OWORD *)&a2->fLastActive.__r_.var0;
    *((_QWORD *)this + 6) = *(_QWORD *)&a2[1].fState;
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_QWORD *)this + 7) = a2[1].fLastActive.__r_.__value_.var0.var1.__data_;
  return this;
}

void sub_2375C3A4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

__n128 ctb::bridging::makeOptional@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;
  unint64_t v4;

  result = *a1;
  *a2 = *a1;
  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  a2[2].n128_u8[0] = 1;
  return result;
}

__n128 ctb::bridging::makeOptional@<Q0>(ctb::bridging *this@<X0>, SIPConferenceInfo a2@<0:X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  __n128 result;

  v4 = std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100](a3, (__int128 *)this);
  result = *(__n128 *)((char *)this + 72);
  *(__n128 *)(v4 + 72) = result;
  *((_QWORD *)v4 + 11) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  v4[96] = 1;
  return result;
}

ctb::IMDispositionNotification *ctb::IMDispositionNotification::IMDispositionNotification(ctb::IMDispositionNotification *this, const IMDispositionNotification *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)this = a2->fDispositionType;
  if (*((char *)&a2->fMessageID.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), a2->fMessageID.__r_.__value_.var0.var1.__data_, a2->fMessageID.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    v4 = *(_OWORD *)a2->fMessageID.__r_.__value_.var0.var0.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&a2->fMessageID.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = (std::string *)((char *)this + 32);
  if (*((char *)&a2[1].fDispositionType + 7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)&a2->fMessageID.__r_.var0, a2->fMessageID.var0);
  }
  else
  {
    v6 = *(_OWORD *)&a2->fMessageID.__r_.var0;
    *((_QWORD *)this + 6) = *(_QWORD *)&a2[1].fDispositionType;
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375C3BDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ctb::bridging::makeOptional(GeoPushLocation a1@<0:D0, 8:D1>, uint64_t a2@<X8>)
{
  *(GeoPushLocation *)a2 = a1;
  *(_BYTE *)(a2 + 16) = 1;
}

uint64_t ctb::bridging::makeOptional@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::__optional_destruct_base[abi:ne180100]<ctb::FileTransferDescriptor>(a2, a1);
}

{
  return std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::CardMedia>(a2, a1);
}

{
  return std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging>(a2, a1);
}

double ctb::bridging::makeOptional@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = std::__optional_destruct_base<ctb::CPIMMessage,false>::__optional_destruct_base[abi:ne180100]<ctb::CPIMMessage>(a2, a1).n128_u64[0];
  return result;
}

{
  double result;

  *(_QWORD *)&result = std::__optional_destruct_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP>(a2, a1).n128_u64[0];
  return result;
}

uint64_t sub_2375C3C80()
{
  return 0;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

_QWORD *_s5ErrorO7ContextVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5ErrorO7ContextVwxx()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s5ErrorO7ContextVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s5ErrorO7ContextVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5ErrorO7ContextVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2375C3D84(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s5ErrorO7ContextVMa()
{
  return &_s5ErrorO7ContextVN;
}

uint64_t ctb::IMCompositionIndication::~IMCompositionIndication(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(void))
{
  if (**a1)
  {
    a2();
    operator delete(**a1);
  }
}

{
  if (**a1)
  {
    a2();
    operator delete(**a1);
  }
}

uint64_t std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::RenderInformation>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = ctb::chatbot::BotInformation::BotInformation(a1, a2);
  *(_BYTE *)(result + 560) = 0;
  *(_BYTE *)(result + 584) = 0;
  if (*(_BYTE *)(a2 + 584))
  {
    *(_QWORD *)(result + 576) = 0;
    *(_OWORD *)(result + 560) = 0u;
    *(_OWORD *)(result + 560) = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(result + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a2 + 576) = 0;
    *(_OWORD *)(a2 + 560) = 0u;
    *(_BYTE *)(result + 584) = 1;
  }
  *(_BYTE *)(result + 592) = *(_BYTE *)(a2 + 592);
  v4 = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(result + 616) = *(_QWORD *)(a2 + 616);
  *(_OWORD *)(result + 600) = v4;
  *(_QWORD *)(a2 + 616) = 0;
  *(_QWORD *)(a2 + 608) = 0;
  *(_QWORD *)(a2 + 600) = 0;
  v5 = *(_OWORD *)(a2 + 624);
  *(_QWORD *)(result + 640) = *(_QWORD *)(a2 + 640);
  *(_OWORD *)(result + 624) = v5;
  *(_QWORD *)(a2 + 640) = 0;
  *(_QWORD *)(a2 + 632) = 0;
  *(_QWORD *)(a2 + 624) = 0;
  *(_BYTE *)(result + 648) = 0;
  *(_BYTE *)(result + 672) = 0;
  if (*(_BYTE *)(a2 + 672))
  {
    v6 = *(_OWORD *)(a2 + 648);
    *(_QWORD *)(result + 664) = *(_QWORD *)(a2 + 664);
    *(_OWORD *)(result + 648) = v6;
    *(_QWORD *)(a2 + 664) = 0;
    *(_QWORD *)(a2 + 656) = 0;
    *(_QWORD *)(a2 + 648) = 0;
    *(_BYTE *)(result + 672) = 1;
  }
  *(_BYTE *)(result + 680) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::__optional_destruct_base[abi:ne180100]<ctb::FileTransferDescriptor>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v4 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v4;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v5;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 80) = v6;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 10) = 0;
  v7 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v7;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_move_base[abi:ne180100]((_BYTE *)(a1 + 144), a2 + 9);
  *(_BYTE *)(a1 + 296) = 1;
  return a1;
}

__n128 std::__optional_destruct_base<ctb::CPIMMessage,false>::__optional_destruct_base[abi:ne180100]<ctb::CPIMMessage>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v6 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v6;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  result = (__n128)a2[9];
  *(__n128 *)(a1 + 144) = result;
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  return result;
}

void std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  void **v2;
  char *v3;
  char *v5;
  void *v6;

  v2 = *a1;
  v3 = (char *)**a1;
  if (v3)
  {
    v5 = (char *)v2[1];
    v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        v5 -= 56;
        a2(v5);
      }
      while (v5 != v3);
      v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  v7 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>(v7, a2 + 64);
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  if (*(_BYTE *)(a2 + 648))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>(a1 + 120, (__int128 *)(a2 + 120));
    *(_BYTE *)(a1 + 648) = 1;
  }
  std::__optional_move_base<ctb::ProvisioningConfiguration::Services,false>::__optional_move_base[abi:ne180100](a1 + 656, (__int128 *)(a2 + 656));
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 1104) = 0;
  if (*(_BYTE *)(a2 + 1104))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(a1 + 720, a2 + 720);
    *(_BYTE *)(a1 + 1104) = 1;
  }
  v8 = *(_OWORD *)(a2 + 1112);
  v9 = *(_OWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1112) = v8;
  *(_OWORD *)(a1 + 1128) = v9;
  *(_BYTE *)(a1 + 1152) = 1;
  return a1;
}

void sub_2375C42DC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  SIPResourceLists *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  _QWORD v47[3];
  __n128 v48[2];
  _BYTE v49[568];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2375EBEC4();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EBD14();
  sub_2375C68B4((uint64_t)v9, (uint64_t)v49);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3B0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2375EBD20();
  MEMORY[0x24BDAC7A8](v13);
  sub_2375BB3E0((uint64_t)v12, (uint64_t)v12, &qword_2567FB3B0);
  v14 = sub_2375EBD5C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  v40 = v6;
  if ((_DWORD)v16 == 1)
  {
    v45 = 0u;
    v46 = 0u;
    LOBYTE(v47[0]) = 1;
  }
  else
  {
    v38 = v37;
    v39 = a1;
    v17 = *(_QWORD *)(v15 + 64);
    MEMORY[0x24BDAC7A8](v16);
    v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v12, v14);
    MEMORY[0x24BDAC7A8](v19);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v18, v14);
    v20 = sub_2375EBD50();
    sub_2375D0E7C(v20, (uint64_t *)&v45);
    v21 = *(void (**)(char *, uint64_t))(v15 + 8);
    v21(v18, v14);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)&v41, &v45);
    ctb::chatbot::MenuItem::~MenuItem((void **)&v45);
    ctb::bridging::makeOptional((uint64_t *)&v45, (ctb::bridging *)&v41, v22);
    v21(v18, v14);
    LOBYTE(v47[0]) = 0;
    a1 = v39;
    v6 = v40;
  }
  sub_2375BB424((uint64_t)v12, &qword_2567FB3B0);
  if ((v47[0] & 1) != 0)
  {
    type metadata accessor for std.__1.optional_MenuItem_(0);
    v24 = v23;
    v25 = sub_2375B42FC(&qword_2567FAAE0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_MenuItem_, (uint64_t)&unk_2375F1F3C);
    CxxOptional.init(nilLiteral:)(v24, v25);
    sub_2375BB424((uint64_t)&v45, &qword_2567FB3B8);
  }
  else
  {
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v48, &v45);
    std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v45, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]);
  }
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3C0);
  v27 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_2375EBD2C();
  v39 = v37;
  MEMORY[0x24BDAC7A8](v29);
  sub_2375BB3E0((uint64_t)v28, (uint64_t)v28, &qword_2567FB3C0);
  v30 = sub_2375EBA2C();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v30);
  if ((_DWORD)v32 == 1)
  {
    v41 = 2;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
  }
  else
  {
    v37[1] = v37;
    v33 = *(_QWORD *)(v31 + 64);
    MEMORY[0x24BDAC7A8](v32);
    v38 = v37;
    v34 = (char *)v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 32))(v34, v28, v30);
    v37[0] = v37;
    MEMORY[0x24BDAC7A8](v35);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v34, v34, v30);
    sub_2375C6CC8((uint64_t)v34, (uint64_t)&v41);
    v6 = v40;
    (*(void (**)(char *, uint64_t))(v31 + 8))((char *)v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
  }
  sub_2375BB424((uint64_t)v28, &qword_2567FB3C0);
  if (v41 == 2)
  {
    v45.n128_u64[1] = 0;
    v46 = 0uLL;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v45.n128_u64[1]);
    memset(v47, 0, sizeof(v47));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](v47);
    v45.n128_u8[0] = 0;
    sub_2375BB424((uint64_t)&v41, &qword_2567FB3C8);
  }
  else
  {
    ctb::chatbot::VerificationDetails::VerificationDetails((uint64_t)&v45, (uint64_t)&v41);
    ctb::chatbot::VerificationDetails::~VerificationDetails((void **)&v41);
  }
  sub_2375EBD38();
  sub_2375D2014((uint64_t)v6, (uint64_t)&v41);
  v36 = sub_2375EBD44();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(a1, v36);
  ctb::chatbot::BotInformation::BotInformation(a2, v49);
  ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)v49);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a2 + 560, v48);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)v48, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]);
  ctb::chatbot::VerificationDetails::VerificationDetails(a2 + 592, (uint64_t)&v45);
  ctb::chatbot::VerificationDetails::~VerificationDetails((void **)&v45);
  std::optional<std::string>::optional[abi:ne180100](a2 + 648, (__n128 *)&v41);
  ctb::chatbot::URIEntry::~URIEntry((void **)&v41);
}

void sub_2375C4854(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v17;
  std::basic_string<char16_t> v18;
  std::string v19;

  v4 = MEMORY[0x23B815414]();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v19);
  v6 = sub_2375EBA5C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2375EB9A8();
  v11 = MEMORY[0x23B8154C8](v10);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v11, v12, &v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  std::string::basic_string[abi:ne180100]((__n128 *)&v18, (__n128 *)&v17);
  std::string::~string(&v17);
  v13 = sub_2375EB990();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v13, v14, &v17);
  v15 = sub_2375EB9B4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v19);
  std::string::~string(&v19);
  ctb::SIPConferenceInfo::SubjectExt::SubjectExt((__n128 *)(a2 + 24), (__n128 *)&v18);
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v18);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v17);
  std::string::~string(&v17);
}

uint64_t sub_2375C497C@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  __n128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  __n128 v49[2];
  std::string v50;
  __n128 v51[2];
  int v52;
  int v53;
  uint64_t v54;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v41 = a2;
    v54 = MEMORY[0x24BEE4AF8];
    sub_2375D36F4(0, v4, 0);
    v5 = sub_2375EBF30();
    v6 = v5;
    v7 = *(_QWORD *)(v5 - 8);
    v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v40 = a1;
    v9 = a1 + v8;
    v42 = *(_QWORD *)(v7 + 72);
    v43 = v7;
    v10 = *(_QWORD *)(v7 + 64);
    v45 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v46 = v10;
    v44 = v5;
    do
    {
      v11 = v46;
      MEMORY[0x24BDAC7A8](v5);
      v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = v45;
      v14 = ((uint64_t (*)(char *, uint64_t, uint64_t))v45)(v12, v9, v6);
      MEMORY[0x24BDAC7A8](v14);
      v13(v12, v12, v6);
      v15 = sub_2375EBEF4();
      v17 = v16;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v15, v17, &v50);
      ctb::bridging::makeOptional((ctb::bridging *)&v50, (uint64_t)v51);
      LOBYTE(v52) = 0;
      swift_bridgeObjectRelease();
      v47 = &v40;
      if ((v52 & 1) != 0)
      {
        type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
        v19 = v18;
        v20 = sub_2375B42FC((unint64_t *)&qword_2567FAAD8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___, (uint64_t)&unk_2375F1F20);
        CxxOptional.init(nilLiteral:)(v19, v20);
        sub_2375BB424((uint64_t)v51, &qword_2567FB1E0);
      }
      else
      {
        std::optional<std::string>::optional[abi:ne180100]((uint64_t)v49, v51);
        ctb::chatbot::URIEntry::~URIEntry((void **)v51);
      }
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v50, v49);
      ctb::chatbot::URIEntry::~URIEntry((void **)v49);
      v21 = sub_2375EBF24();
      v22 = *(_QWORD *)(v21 - 8);
      MEMORY[0x24BDAC7A8](v21);
      v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EBF00();
      v25 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v24, v21);
      v48 = &v40;
      if (MEMORY[0x24BE0F3F8] && v25 == *MEMORY[0x24BE0F3F8])
      {
        v26 = 1;
      }
      else if (MEMORY[0x24BE0F3F0] && v25 == *MEMORY[0x24BE0F3F0])
      {
        v26 = 2;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
        v26 = 0;
      }
      v27 = sub_2375EBF0C();
      v28 = *(_QWORD *)(v27 - 8);
      MEMORY[0x24BDAC7A8](v27);
      v30 = (char *)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EBF18();
      v31 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v30, v27);
      if (MEMORY[0x24BE0F3C8] && v31 == *MEMORY[0x24BE0F3C8])
      {
        v32 = 1;
      }
      else if (MEMORY[0x24BE0F3C0] && v31 == *MEMORY[0x24BE0F3C0])
      {
        v32 = 2;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
        v32 = 0;
      }
      v6 = v44;
      v33 = *(void (**)(char *, uint64_t))(v43 + 8);
      v33(v12, v44);
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v51, (__n128 *)&v50);
      ctb::chatbot::URIEntry::~URIEntry((void **)&v50.__r_.__value_.__l.__data_);
      v52 = v26;
      v53 = v32;
      v33(v12, v6);
      v34 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2375D36F4(0, *(_QWORD *)(v34 + 16) + 1, 1);
        v34 = v54;
      }
      v36 = *(_QWORD *)(v34 + 16);
      v35 = *(_QWORD *)(v34 + 24);
      if (v36 >= v35 >> 1)
      {
        sub_2375D36F4(v35 > 1, v36 + 1, 1);
        v34 = v54;
      }
      *(_QWORD *)(v34 + 16) = v36 + 1;
      ctb::chatbot::URIEntry::URIEntry(v34 + 40 * v36 + 32, (__int128 *)v51);
      ctb::chatbot::URIEntry::~URIEntry((void **)v51);
      v9 += v42;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v3 = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x24BEE4AF8];
  }
  memset(&v50, 0, sizeof(v50));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v50);
  v37 = *(_QWORD *)(v34 + 16);
  if (v37)
  {
    v38 = v34 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100]((uint64_t *)&v50, v38);
      v38 += 40;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v51, (__n128 *)&v50);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v50, (void (*)(uint64_t *))std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100]);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v3, v51);
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)v51, (void (*)(uint64_t *))std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375C4E54@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  __n128 *v65;
  char *v66;
  char *v67;
  __n128 *v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unsigned __int32 v78;
  uint64_t *v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  int64_t v83;
  std::string v84;
  std::string v85;
  __n128 v86;
  uint64_t v87;
  _BYTE v88[32];
  char v89;
  __n128 v90[4];
  int v91;
  uint64_t v92;

  v4 = sub_2375EAA18();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v66 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v67 = (char *)&v64 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v75 = v5;
    v76 = v4;
    v65 = a2;
    v92 = MEMORY[0x24BEE4AF8];
    sub_2375D3710(0, v12, 0);
    v13 = sub_2375EB81C();
    v14 = v13;
    v15 = *(_QWORD **)(v13 - 8);
    v64 = a1;
    v70 = v15[9];
    v71 = v15;
    v16 = v15[8];
    v73 = (void (*)(char *, char *, uint64_t))v15[2];
    v74 = v16;
    v68 = (__n128 *)&v90[0].n128_i8[8];
    v69 = &v87;
    v17 = (uint64_t)v67;
    v72 = v13;
    while (1)
    {
      v83 = v12;
      v81 = &v64;
      v18 = v74;
      MEMORY[0x24BDAC7A8](v13);
      v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
      v82 = v20;
      v21 = v73;
      v22 = ((uint64_t (*)(char *))v73)((char *)&v64 - v19);
      v79 = &v64;
      MEMORY[0x24BDAC7A8](v22);
      v23 = (char *)&v64 - v19;
      v80 = (char *)&v64 - v19;
      v21((char *)&v64 - v19, (char *)&v64 - v19, v14);
      v24 = sub_2375EB7F8();
      v25 = *(_QWORD *)(v24 - 8);
      MEMORY[0x24BDAC7A8](v24);
      v27 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EB804();
      v28 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v27, v24);
      if (MEMORY[0x24BE0E760] && v28 == *MEMORY[0x24BE0E760])
      {
        v78 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
        v78 = 0;
      }
      v29 = sub_2375EBD80();
      v77 = &v64;
      v30 = *(_QWORD *)(v29 - 8);
      MEMORY[0x24BDAC7A8](v29);
      v32 = (char *)&v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EB810();
      sub_2375EBD74();
      sub_2375BB3E0(v17, (uint64_t)v10, &qword_2567FB3A8);
      v34 = v75;
      v33 = v76;
      v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48))(v10, 1, v76);
      if (v35 == 1)
      {
        memset(v88, 0, 24);
      }
      else
      {
        v36 = v10;
        v37 = v66;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v66, v36, v33);
        v38 = sub_2375EAA00();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v38, v39, (std::string *)v88);
        v40 = v37;
        v10 = v36;
        v17 = (uint64_t)v67;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v76);
      }
      v88[24] = v35 == 1;
      sub_2375BB424(v17, &qword_2567FB3A8);
      if ((v88[24] & 1) != 0)
      {
        memset(&v85, 0, sizeof(v85));
        std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v85);
        sub_2375BB424((uint64_t)v88, &qword_2567FB3D8);
      }
      else
      {
        std::string::basic_string[abi:ne180100]((__n128 *)&v85, (__n128 *)v88);
        std::string::~string((std::string *)v88);
      }
      v41 = sub_2375EBD68();
      if (v42)
      {
        v43 = v41;
        v44 = v42;
        swift_bridgeObjectRetain();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v43, v44, &v84);
        ctb::bridging::makeOptional((ctb::bridging *)&v84, (uint64_t)v88);
        v89 = 0;
        swift_bridgeObjectRelease();
        if ((v89 & 1) == 0)
        {
          std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v84, (__n128 *)v88);
          ctb::chatbot::URIEntry::~URIEntry((void **)v88);
          goto LABEL_18;
        }
      }
      else
      {
        memset(v88, 0, sizeof(v88));
        v89 = 1;
      }
      type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
      v46 = v45;
      v47 = sub_2375B42FC((unint64_t *)&qword_2567FAAD8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___, (uint64_t)&unk_2375F1F20);
      CxxOptional.init(nilLiteral:)(v46, v47);
      sub_2375BB424((uint64_t)v88, &qword_2567FB1E0);
LABEL_18:
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v88, (__n128 *)&v84);
      ctb::chatbot::URIEntry::~URIEntry((void **)&v84.__r_.__value_.__l.__data_);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      std::string::basic_string[abi:ne180100](&v86, (__n128 *)&v85);
      std::string::~string(&v85);
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v69, (__n128 *)v88);
      ctb::chatbot::URIEntry::~URIEntry((void **)v88);
      ctb::chatbot::Media::Media(v48, (uint64_t)&v86);
      ctb::chatbot::Media::~Media((void **)&v86);
      v49 = sub_2375EB7E0();
      v50 = *(_QWORD *)(v49 - 8);
      MEMORY[0x24BDAC7A8](v49);
      v52 = (char *)&v64 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EB7EC();
      v53 = (*(uint64_t (**)(char *, uint64_t))(v50 + 88))(v52, v49);
      if (MEMORY[0x24BE0E728] && v53 == *MEMORY[0x24BE0E728])
      {
        v54 = 1;
      }
      else if (MEMORY[0x24BE0E730] && v53 == *MEMORY[0x24BE0E730])
      {
        v54 = 2;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
        v54 = 0;
      }
      v14 = v72;
      v55 = (void (*)(char *, uint64_t))v71[1];
      v55(v23, v72);
      v90[0].n128_u32[0] = v78;
      ctb::chatbot::Media::Media(v68, (uint64_t)v88);
      ctb::chatbot::Media::~Media((void **)v88);
      v91 = v54;
      v55(v80, v14);
      v56 = v92;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v58 = v83;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_2375D3710(0, *(_QWORD *)(v56 + 16) + 1, 1);
        v56 = v92;
      }
      v60 = *(_QWORD *)(v56 + 16);
      v59 = *(_QWORD *)(v56 + 24);
      if (v60 >= v59 >> 1)
      {
        sub_2375D3710(v59 > 1, v60 + 1, 1);
        v56 = v92;
      }
      *(_QWORD *)(v56 + 16) = v60 + 1;
      ctb::chatbot::MediaEntry::MediaEntry(v56 + 72 * v60 + 32, (uint64_t)v90);
      ctb::chatbot::MediaEntry::~MediaEntry((void **)v90);
      v12 = v58 - 1;
      if (!v12)
      {
        swift_bridgeObjectRelease();
        a2 = v65;
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease();
  v56 = MEMORY[0x24BEE4AF8];
LABEL_32:
  memset(v88, 0, 24);
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](v88);
  v61 = *(_QWORD *)(v56 + 16);
  if (v61)
  {
    v62 = v56 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100]((uint64_t *)v88, v62);
      v62 += 72;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v90, (__n128 *)v88);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)v88, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, v90);
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)v90, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

void **sub_2375C556C@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _QWORD v31[2];
  __n128 *v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  std::string v38;
  std::basic_string<char16_t> v39;
  int v40;
  uint64_t v41;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v32 = a2;
    v41 = MEMORY[0x24BEE4AF8];
    sub_2375D372C(0, v4, 0);
    v5 = sub_2375EBA8C();
    v6 = v5;
    v7 = *(_QWORD *)(v5 - 8);
    v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v31[1] = a1;
    v9 = (char *)(a1 + v8);
    v10 = *(_QWORD *)(v7 + 72);
    v34 = *(_QWORD *)(v7 + 64);
    v35 = v10;
    v36 = v7;
    v33 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
    do
    {
      v37 = v31;
      v11 = v34;
      MEMORY[0x24BDAC7A8](v5);
      v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = v33;
      v14 = v33(v12, v9, v6);
      MEMORY[0x24BDAC7A8](v14);
      v15 = v13(v12, v12, v6);
      v16 = MEMORY[0x23B8154E0](v15);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v16, v17, &v38);
      v18 = sub_2375EBA74();
      v19 = *(_QWORD *)(v18 - 8);
      MEMORY[0x24BDAC7A8](v18);
      v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EBA80();
      v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
      if (MEMORY[0x24BE0EC30] && v22 == *MEMORY[0x24BE0EC30])
      {
        v23 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
        v23 = 0;
      }
      v24 = *(void (**)(char *, uint64_t))(v36 + 8);
      v24(v12, v6);
      std::string::basic_string[abi:ne180100]((__n128 *)&v39, (__n128 *)&v38);
      std::string::~string(&v38);
      v40 = v23;
      v24(v12, v6);
      v25 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2375D372C(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v25 = v41;
      }
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_2375D372C(v26 > 1, v27 + 1, 1);
        v25 = v41;
      }
      *(_QWORD *)(v25 + 16) = v27 + 1;
      ctb::chatbot::OrgNameEntry::OrgNameEntry((__n128 *)(v25 + 32 * v27 + 32), (__n128 *)&v39);
      ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v39);
      v9 += v35;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v3 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x24BEE4AF8];
  }
  memset(&v38, 0, sizeof(v38));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v38);
  v28 = *(_QWORD *)(v25 + 16);
  if (v28)
  {
    v29 = (__int128 *)(v25 + 32);
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100]((uint64_t *)&v38, v29);
      v29 += 2;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)&v39, (__n128 *)&v38);
  std::vector<std::string>::~vector[abi:ne180100]((void **)&v38.__r_.__value_.__l.__data_, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v3, (__n128 *)&v39);
  return std::vector<std::string>::~vector[abi:ne180100]((void **)&v39.__r_.__value_.__l.__data_, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]);
}

void **sub_2375C58A0@<X0>(uint64_t a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v4;
  std::vector<std::string>::pointer begin;
  uint64_t v6;
  int64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  std::vector<std::string> *v26;
  uint64_t (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  std::vector<std::string> __x;

  v4 = sub_2375EB87C();
  begin = (std::vector<std::string>::pointer)MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)(v4 + 16);
    if (v7)
    {
      v25 = a1;
      v26 = a2;
      __x.__begin_ = (std::vector<std::string>::pointer)MEMORY[0x24BEE4AF8];
      sub_2375D35DC(0, v7, 0);
      isUniquelyReferenced_nonNull_native = sub_2375EB870();
      v9 = isUniquelyReferenced_nonNull_native;
      v10 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
      v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v24 = v6;
      v12 = v6 + v11;
      v14 = *(_QWORD *)(v10 + 64);
      v13 = *(_QWORD *)(v10 + 72);
      v27 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v10 + 16);
      v28 = v13;
      do
      {
        MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
        v15 = v27((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v9);
        v16 = MEMORY[0x23B8152DC](v15);
        v18 = v17;
        (*(void (**)(char *, uint64_t))(v10 + 8))((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
        begin = __x.__begin_;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = sub_2375D35DC(0, begin->__r_.__value_.__r.__words[2] + 1, 1);
          begin = __x.__begin_;
        }
        v20 = begin->__r_.__value_.__r.__words[2];
        v19 = begin[1].__r_.__value_.__r.__words[0];
        if (v20 >= v19 >> 1)
        {
          isUniquelyReferenced_nonNull_native = sub_2375D35DC(v19 > 1, v20 + 1, 1);
          begin = __x.__begin_;
        }
        begin->__r_.__value_.__r.__words[2] = v20 + 1;
        v21 = (char *)begin + 16 * v20;
        *((_QWORD *)v21 + 4) = v16;
        *((_QWORD *)v21 + 5) = v18;
        v12 += v28;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      a1 = v25;
      a2 = v26;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_2375D1E80((uint64_t)begin, &__x);
  v22 = sub_2375EB888();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
  std::vector<std::string>::vector(a2, &__x);
  return std::vector<std::string>::~vector[abi:ne180100]((void **)&__x.__begin_, (void (*)(void))std::vector<std::string>::__clear[abi:ne180100]);
}

uint64_t sub_2375C5A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  __n128 Optional;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  SIPResourceLists *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  SIPResourceLists *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  SIPResourceLists *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  std::vector<std::string> v69;
  __n128 v70[2];
  __n128 v71[2];
  __n128 v72[2];
  __n128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  _BYTE v81[72];
  __n128 v82[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB400);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = a1;
  v7 = sub_2375EBB1C();
  MEMORY[0x24BDAC7A8](v7);
  sub_2375BB3E0((uint64_t)v6, (uint64_t)v6, &qword_2567FB400);
  v8 = sub_2375EBB7C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  if ((_DWORD)v10 == 1)
  {
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v80 = 1;
  }
  else
  {
    v66 = &v65;
    v11 = *(_QWORD *)(v9 + 64);
    MEMORY[0x24BDAC7A8](v10);
    v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v6, v8);
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v12, v8);
    v14 = sub_2375EB9B4();
    MEMORY[0x24BDAC7A8](v14);
    v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EBB70();
    sub_2375C4854((uint64_t)v16, (uint64_t)&v73);
    v17 = sub_2375EBB64();
    sub_2375C497C(v17, v72);
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    ctb::chatbot::TelephoneInformation::TelephoneInformation((uint64_t)v81, (__int128 *)&v73);
    ctb::chatbot::TelephoneInformation::~TelephoneInformation((void **)&v73);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v82, v72);
    ctb::chatbot::URIEntryList::~URIEntryList((void **)v72);
    Optional = ctb::bridging::makeOptional((ctb::bridging *)v81, (uint64_t)&v73);
    ((void (*)(char *, uint64_t, __n128))v18)(v12, v8, Optional);
    v80 = 0;
  }
  sub_2375BB424((uint64_t)v6, &qword_2567FB400);
  v67 = a2;
  if ((v80 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CommunicationAddress_(0);
    v21 = v20;
    CxxOptional.init(nilLiteral:)(v21, v22);
    sub_2375BB424((uint64_t)&v73, &qword_2567FB408);
  }
  else
  {
    std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](v81, &v73);
    std::optional<ctb::chatbot::CommunicationAddress>::~optional(&v73);
  }
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB410);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_2375EBB28();
  MEMORY[0x24BDAC7A8](v26);
  sub_2375BB3E0((uint64_t)v25, (uint64_t)v25, &qword_2567FB410);
  v27 = sub_2375EC074();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v27);
  if ((_DWORD)v29 == 1)
  {
    v73 = 0u;
    v74 = 0u;
    LOBYTE(v75) = 1;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v29);
    v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v25, v27);
    v32 = sub_2375EB87C();
    if (!v32)
      v32 = MEMORY[0x24BEE4AF8];
    sub_2375C4E54(v32, v72);
    ctb::bridging::makeOptional((uint64_t *)&v73, (ctb::bridging *)v72, v33);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    LOBYTE(v75) = 0;
  }
  sub_2375BB424((uint64_t)v25, &qword_2567FB410);
  if ((v75 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_MediaList_(0);
    v35 = v34;
    v36 = sub_2375B42FC(&qword_2567FAAA0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_MediaList_, (uint64_t)&unk_2375F1E5C);
    CxxOptional.init(nilLiteral:)(v35, v36);
    sub_2375BB424((uint64_t)&v73, &qword_2567FB418);
  }
  else
  {
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v72, &v73);
    std::optional<ctb::chatbot::MediaList>::~optional((uint64_t)&v73);
  }
  if (sub_2375EBB10())
  {
    v37 = swift_bridgeObjectRetain();
    sub_2375C556C(v37, v71);
    ctb::bridging::makeOptional((uint64_t *)&v73, (ctb::bridging *)v71, v38);
    LOBYTE(v75) = 0;
    swift_bridgeObjectRelease();
    if ((v75 & 1) == 0)
    {
      std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v71, &v73);
      std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v73, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
      goto LABEL_20;
    }
  }
  else
  {
    v73 = 0u;
    v74 = 0u;
    LOBYTE(v75) = 1;
  }
  type metadata accessor for std.__1.optional_OrgName_(0);
  v40 = v39;
  v41 = sub_2375B42FC(&qword_2567FAA98, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_OrgName_, (uint64_t)&unk_2375F1E40);
  CxxOptional.init(nilLiteral:)(v40, v41);
  sub_2375BB424((uint64_t)&v73, &qword_2567FB420);
LABEL_20:
  v42 = sub_2375EBAF8();
  sub_2375D1F48(v42, v43, (uint64_t)v70);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB428);
  v45 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v65 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_2375EBB04();
  MEMORY[0x24BDAC7A8](v47);
  sub_2375BB3E0((uint64_t)v46, (uint64_t)v46, &qword_2567FB428);
  v48 = sub_2375EB888();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v46, 1, v48);
  if ((_DWORD)v50 == 1)
  {
    v73 = 0u;
    v74 = 0u;
    LOBYTE(v75) = 1;
  }
  else
  {
    v65 = (uint64_t)&v65;
    v66 = &v65;
    v51 = *(_QWORD *)(v49 + 64);
    MEMORY[0x24BDAC7A8](v50);
    v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF0;
    v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))((char *)&v65 - v52, v46, v48);
    MEMORY[0x24BDAC7A8](v53);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))((char *)&v65 - v52, (char *)&v65 - v52, v48);
    sub_2375C58A0((uint64_t)&v65 - v52, &v69);
    ctb::bridging::makeOptional((uint64_t *)&v73, (ctb::bridging *)&v69, v54);
    (*(void (**)(char *, uint64_t))(v49 + 8))((char *)&v65 - v52, v48);
    LOBYTE(v75) = 0;
  }
  v55 = v67;
  sub_2375BB424((uint64_t)v46, &qword_2567FB428);
  if ((v75 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CategoryList_(0);
    v57 = v56;
    v58 = sub_2375B42FC(&qword_2567FAA90, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CategoryList_, (uint64_t)&unk_2375F1E24);
    CxxOptional.init(nilLiteral:)(v57, v58);
    sub_2375BB424((uint64_t)&v73, &qword_2567FB430);
  }
  else
  {
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v69, &v73);
    std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v73, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
  }
  v59 = v68;
  type metadata accessor for std.__1.optional_WebResources_(0);
  v61 = v60;
  v62 = sub_2375B42FC(&qword_2567FAA88, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_WebResources_, (uint64_t)&unk_2375F1E08);
  CxxOptional.init(nilLiteral:)(v61, v62);
  v63 = sub_2375EBB34();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v59, v63);
  std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](v55, v81);
  std::optional<ctb::chatbot::CommunicationAddress>::~optional(v81);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 104, v72);
  std::optional<ctb::chatbot::MediaList>::~optional((uint64_t)v72);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 136, v71);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)v71, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
  std::optional<std::string>::optional[abi:ne180100](v55 + 168, v70);
  ctb::chatbot::URIEntry::~URIEntry((void **)v70);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 200, (__n128 *)&v69);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v69, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 232, &v73);
  return std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)&v73);
}

void sub_2375C62D8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  __n128 v22[17];
  char v23;
  _BYTE v24[280];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3F0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2375EBB40();
  MEMORY[0x24BDAC7A8](v7);
  sub_2375BB3E0((uint64_t)v6, (uint64_t)v6, &qword_2567FB3F0);
  v8 = sub_2375EBB34();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  if ((_DWORD)v10 == 1)
  {
    memset(v22, 0, sizeof(v22));
    v23 = 1;
  }
  else
  {
    v20 = (uint64_t)&v20;
    v21 = a2;
    v11 = *(_QWORD *)(v9 + 64);
    MEMORY[0x24BDAC7A8](v10);
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))((char *)&v20 - v12, v6, v8);
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)&v20 - v12, (char *)&v20 - v12, v8);
    sub_2375C5A8C((uint64_t)&v20 - v12, (uint64_t)v24);
    ctb::bridging::makeOptional((uint64_t)v24, v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))((char *)&v20 - v12, v8);
    v23 = 0;
    a2 = v21;
  }
  sub_2375BB424((uint64_t)v6, &qword_2567FB3F0);
  if ((v23 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_OrgDetails_(0);
    v15 = v14;
    v16 = sub_2375B42FC(&qword_2567FAAB0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_OrgDetails_, (uint64_t)&unk_2375F1E94);
    CxxOptional.init(nilLiteral:)(v15, v16);
    sub_2375BB424((uint64_t)v22, &qword_2567FB3F8);
  }
  else
  {
    std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](v24, (uint64_t)v22);
    std::optional<ctb::chatbot::OrgDetails>::~optional(v22);
  }
  v17 = sub_2375EBB4C();
  sub_2375D1F48(v17, v18, (uint64_t)v22);
  v19 = sub_2375EBB58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
  std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](a2, (uint64_t)v24);
  std::optional<ctb::chatbot::OrgDetails>::~optional(v24);
  std::optional<std::string>::optional[abi:ne180100]((uint64_t)(a2 + 272), v22);
  ctb::chatbot::URIEntry::~URIEntry((void **)v22);
}

void **sub_2375C6578@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, unint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  __n128 *v30;
  __n128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  std::string v36[2];
  char v37;
  std::string v38;

  v4 = sub_2375EB87C();
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)(v4 + 16);
    if (v7)
    {
      v29 = a1;
      v30 = a2;
      v34 = MEMORY[0x24BEE4AF8];
      sub_2375D3748(0, v7, 0);
      v8 = sub_2375EB858();
      v9 = v8;
      v10 = *(_QWORD *)(v8 - 8);
      v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v28[1] = v6;
      v12 = v6 + v11;
      v13 = *(_QWORD *)(v10 + 64);
      v32 = *(_QWORD *)(v10 + 72);
      v33 = v10;
      v14 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v10 + 16);
      v31 = (__n128 *)&v36[1];
      do
      {
        MEMORY[0x24BDAC7A8](v8);
        v15 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
        v16 = v14(v15, v12, v9);
        MEMORY[0x24BDAC7A8](v16);
        v14(v15, (unint64_t)v15, v9);
        v17 = sub_2375EB84C();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v17, v18, &v35);
        v19 = sub_2375EB840();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v20, &v38);
        v21 = *(void (**)(char *, uint64_t))(v33 + 8);
        v21(v15, v9);
        std::string::basic_string[abi:ne180100]((__n128 *)v36, (__n128 *)&v35);
        std::string::~string(&v35);
        std::string::basic_string[abi:ne180100](v31, (__n128 *)&v38);
        std::string::~string(&v38);
        v21(v15, v9);
        v5 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2375D3748(0, *(_QWORD *)(v5 + 16) + 1, 1);
          v5 = v34;
        }
        v23 = *(_QWORD *)(v5 + 16);
        v22 = *(_QWORD *)(v5 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_2375D3748(v22 > 1, v23 + 1, 1);
          v5 = v34;
        }
        *(_QWORD *)(v5 + 16) = v23 + 1;
        ctb::chatbot::AddressEntry::AddressEntry(v5 + 48 * v23 + 32, (__int128 *)v36);
        ctb::chatbot::AddressEntry::~AddressEntry((void **)&v36[0].__r_.__value_.__l.__data_);
        v12 += v32;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      a2 = v30;
      a1 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  memset(&v38, 0, sizeof(v38));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v38);
  v24 = *(_QWORD *)(v5 + 16);
  if (v24)
  {
    v25 = (__int128 *)(v5 + 32);
    swift_bridgeObjectRetain();
    do
    {
      ctb::chatbot::AddressEntry::AddressEntry(v36, v25);
      v37 = 0;
      ctb::chatbot::AddressEntry::AddressEntry((uint64_t)&v35, (__int128 *)v36);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v36[0].__r_.__value_.__l.__data_);
      std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100]((int64x2_t *)&v38, (uint64_t)&v35);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v35.__r_.__value_.__l.__data_);
      v25 += 3;
      --v24;
    }
    while (v24);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(v36, 0, sizeof(v36));
  v37 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)v36, (__n128 *)&v38);
  std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100]((void **)&v38.__r_.__value_.__l.__data_);
  v26 = sub_2375EBE4C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, (__n128 *)v36);
  return std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100]((void **)&v36[0].__r_.__value_.__l.__data_);
}

uint64_t sub_2375C68B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  SIPResourceLists *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  __n128 v36[2];
  char v37;
  __n128 v38[2];
  __n128 v39[2];
  __n128 v40[2];
  __n128 v41[2];
  __n128 v42[2];
  __n128 v43[2];
  __n128 v44[2];
  __n128 v45[2];
  void *v46[39];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2375EBB58();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EBE70();
  sub_2375C62D8((uint64_t)v9, v46);
  v10 = sub_2375EBEAC();
  sub_2375D1F48(v10, v11, (uint64_t)v45);
  v12 = sub_2375EBEB8();
  sub_2375D1F48(v12, v13, (uint64_t)v44);
  v14 = sub_2375EBE88();
  sub_2375D1F48(v14, v15, (uint64_t)v43);
  v16 = sub_2375EBE94();
  sub_2375D1F48(v16, v17, (uint64_t)v42);
  sub_2375EBE64();
  sub_2375D2014((uint64_t)v6, (uint64_t)v41);
  sub_2375EBE58();
  sub_2375D2014((uint64_t)v6, (uint64_t)v40);
  sub_2375EBE7C();
  sub_2375D2014((uint64_t)v6, (uint64_t)v39);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3E0);
  v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_2375EBEA0();
  MEMORY[0x24BDAC7A8](v21);
  sub_2375BB3E0((uint64_t)v20, (uint64_t)v20, &qword_2567FB3E0);
  v22 = sub_2375EBE4C();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22);
  if ((_DWORD)v24 == 1)
  {
    memset(v36, 0, sizeof(v36));
    v37 = 1;
  }
  else
  {
    v35[0] = v35;
    v25 = *(_QWORD *)(v23 + 64);
    MEMORY[0x24BDAC7A8](v24);
    v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))((char *)v35 - v26, v20, v22);
    v35[1] = v35;
    MEMORY[0x24BDAC7A8](v27);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v35 - v26, (char *)v35 - v26, v22);
    sub_2375C6578((uint64_t)v35 - v26, v38);
    ctb::bridging::makeOptional((uint64_t *)v36, (ctb::bridging *)v38, v28);
    (*(void (**)(char *, uint64_t))(v23 + 8))((char *)v35 - v26, v22);
    v37 = 0;
  }
  sub_2375BB424((uint64_t)v20, &qword_2567FB3E0);
  if ((v37 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_AddressEntryList_(0);
    v30 = v29;
    v31 = sub_2375B42FC(&qword_2567FAAB8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_AddressEntryList_, (uint64_t)&unk_2375F1EB0);
    CxxOptional.init(nilLiteral:)(v30, v31);
    v32 = sub_2375EBEC4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    sub_2375BB424((uint64_t)v36, &qword_2567FB3E8);
  }
  else
  {
    v33 = sub_2375EBEC4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v38, v36);
    std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)v36);
  }
  ctb::chatbot::PCC::PCC(a2, (uint64_t)v46);
  ctb::chatbot::PCC::~PCC(v46);
  std::optional<std::string>::optional[abi:ne180100](a2 + 304, v45);
  ctb::chatbot::URIEntry::~URIEntry((void **)v45);
  std::optional<std::string>::optional[abi:ne180100](a2 + 336, v44);
  ctb::chatbot::URIEntry::~URIEntry((void **)v44);
  std::optional<std::string>::optional[abi:ne180100](a2 + 368, v43);
  ctb::chatbot::URIEntry::~URIEntry((void **)v43);
  std::optional<std::string>::optional[abi:ne180100](a2 + 400, v42);
  ctb::chatbot::URIEntry::~URIEntry((void **)v42);
  std::optional<std::string>::optional[abi:ne180100](a2 + 432, v41);
  ctb::chatbot::URIEntry::~URIEntry((void **)v41);
  std::optional<std::string>::optional[abi:ne180100](a2 + 464, v40);
  ctb::chatbot::URIEntry::~URIEntry((void **)v40);
  std::optional<std::string>::optional[abi:ne180100](a2 + 496, v39);
  ctb::chatbot::URIEntry::~URIEntry((void **)v39);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a2 + 528, v38);
  return std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)v38);
}

void sub_2375C6CC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string v50;
  std::string v51;
  std::string v52;
  BOOL v53;
  __n128 v54[2];

  v4 = sub_2375EAA9C();
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v46 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2375EAAB4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3D0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v42 - v14;
  v16 = sub_2375EBAEC();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a1;
  sub_2375EBA20();
  v20 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, v16);
  if (MEMORY[0x24BE0ECF8] && v20 == *MEMORY[0x24BE0ECF8])
  {
    (*(void (**)(char *, uint64_t))(v17 + 96))(v19, v16);
    v21 = sub_2375EBAE0();
    MEMORY[0x24BDAC7A8](v21);
    v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    v43 = v25;
    v44 = v24;
    (*(void (**)(char *, char *))(v25 + 32))(v23, v19);
    v26 = sub_2375EBAD4();
    v45 = v23;
    v27 = sub_2375EBABC();
    if (v28)
    {
      v29 = v27;
      v30 = v28;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v29, v30, &v52);
      v53 = 0;
      swift_bridgeObjectRelease();
      if (!v53)
      {
        std::string::basic_string[abi:ne180100]((__n128 *)&v51, (__n128 *)&v52);
        std::string::~string(&v52);
LABEL_13:
        sub_2375EBAC8();
        sub_2375BB3E0((uint64_t)v15, (uint64_t)v13, &qword_2567FB3D0);
        v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6);
        if (v33 == 1)
        {
          memset(&v52, 0, sizeof(v52));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
          v34 = v46;
          sub_2375CBE38(v46);
          v35 = sub_2375EAA54();
          v42 = (uint64_t)&v42;
          v36 = v26;
          v38 = v37;
          (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v34, v48);
          v39 = v38;
          v26 = v36;
          std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v35, v39, &v52);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        }
        v53 = v33 == 1;
        sub_2375BB424((uint64_t)v15, &qword_2567FB3D0);
        if (v53)
        {
          memset(&v50, 0, sizeof(v50));
          std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v50);
          v40 = sub_2375EBA2C();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v49, v40);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v44);
          sub_2375BB424((uint64_t)&v52, &qword_2567FB3D8);
        }
        else
        {
          v41 = sub_2375EBA2C();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v49, v41);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v44);
          std::string::basic_string[abi:ne180100]((__n128 *)&v50, (__n128 *)&v52);
          std::string::~string(&v52);
        }
        v52.__r_.__value_.__s.__data_[0] = v26 & 1;
        std::string::basic_string[abi:ne180100]((__n128 *)&v52.__r_.__value_.__r.__words[1], (__n128 *)&v51);
        std::string::~string(&v51);
        std::string::basic_string[abi:ne180100](v54, (__n128 *)&v50);
        std::string::~string(&v50);
        ctb::chatbot::VerificationDetails::VerificationDetails(a2, (uint64_t)&v52);
        ctb::chatbot::VerificationDetails::~VerificationDetails((void **)&v52.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      memset(&v52, 0, sizeof(v52));
      v53 = 1;
    }
    memset(&v51, 0, sizeof(v51));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v51);
    sub_2375BB424((uint64_t)&v52, &qword_2567FB3D8);
    goto LABEL_13;
  }
  if (MEMORY[0x24BE0ECE0] && v20 == *MEMORY[0x24BE0ECE0])
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((_QWORD *)(a2 + 8));
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((_QWORD *)(a2 + 32));
    *(_BYTE *)a2 = 0;
    v31 = sub_2375EBA2C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v49, v31);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((_QWORD *)(a2 + 8));
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((_QWORD *)(a2 + 32));
    *(_BYTE *)a2 = 0;
    v32 = sub_2375EBA2C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v49, v32);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
}

void ctb::chatbot::MenuItem::~MenuItem(void **this)
{
  void **v1;

  v1 = this;
  std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v1, (void (*)(char *))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
}

uint64_t ctb::chatbot::PCC::PCC(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>((_BYTE *)a1, a2);
    *(_BYTE *)(a1 + 264) = 1;
  }
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v4 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v4;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_BYTE *)(a1 + 296) = 1;
  }
  return a1;
}

_QWORD *sub_2375C7258@<X0>(_QWORD *a1@<X8>)
{
  return sub_2375C73F4(a1);
}

uint64_t sub_2375C7260(uint64_t a1)
{
  uint64_t *v1;

  return std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2375C7280(uint64_t a1)
{
  uint64_t *v1;

  return std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2375C72A0(__int128 *a1)
{
  uint64_t *v1;

  return std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2375C72F4(uint64_t a1)
{
  int64x2_t *v1;

  return std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100](v1, a1);
}

_BYTE *ctb::bridging::makeOptional@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::OrgDetails>(a2, a1);
}

uint64_t std::optional<ctb::chatbot::MediaList>::~optional(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = (void **)a1;
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void ctb::chatbot::URIEntryList::~URIEntryList(void **this)
{
  void **v1;

  v1 = this;
  std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *sub_2375C73F4(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](result);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1, void (*a2)(void))
{
  void **v4;

  v4 = a1;
  std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v4, a2);
  return a1;
}

void std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  void **v2;
  char *v3;
  char *v5;
  void *v6;
  char *v8;

  v2 = *a1;
  v3 = (char *)**a1;
  if (v3)
  {
    v5 = (char *)v2[1];
    v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        v8 = v5 - 248;
        a2(v5 - 240);
        v5 = v8;
      }
      while (v8 != v3);
      v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

_BYTE *std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::OrgDetails>(_BYTE *a1, uint64_t a2)
{
  _BYTE *result;
  __int128 v4;

  result = std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>::__optional_move_base[abi:ne180100](a1, (__int128 *)a2);
  result[104] = 0;
  result[128] = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    *((_QWORD *)result + 13) = 0;
    *((_QWORD *)result + 14) = 0;
    *((_QWORD *)result + 15) = 0;
    *(_OWORD *)(result + 104) = *(_OWORD *)(a2 + 104);
    *((_QWORD *)result + 15) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    result[128] = 1;
  }
  result[136] = 0;
  result[160] = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    *((_QWORD *)result + 17) = 0;
    *((_QWORD *)result + 18) = 0;
    *((_QWORD *)result + 19) = 0;
    *(_OWORD *)(result + 136) = *(_OWORD *)(a2 + 136);
    *((_QWORD *)result + 19) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    result[160] = 1;
  }
  result[168] = 0;
  result[192] = 0;
  if (*(_BYTE *)(a2 + 192))
  {
    v4 = *(_OWORD *)(a2 + 168);
    *((_QWORD *)result + 23) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(result + 168) = v4;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    result[192] = 1;
  }
  result[200] = 0;
  result[224] = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    *((_QWORD *)result + 25) = 0;
    *((_QWORD *)result + 26) = 0;
    *((_QWORD *)result + 27) = 0;
    *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
    *((_QWORD *)result + 27) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    result[224] = 1;
  }
  result[232] = 0;
  result[256] = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    *((_QWORD *)result + 29) = 0;
    *((_QWORD *)result + 30) = 0;
    *((_QWORD *)result + 31) = 0;
    *(_OWORD *)(result + 232) = *(_OWORD *)(a2 + 232);
    *((_QWORD *)result + 31) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    result[256] = 1;
  }
  result[264] = 1;
  return result;
}

uint64_t sub_2375C7644@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t *v22;
  __n128 v23[21];
  __n128 v24[22];

  v4 = sub_2375EB834();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x24BE0E7F8] && v8 == *MEMORY[0x24BE0E7F8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EBED0();
    v22 = &v19;
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v20 = a2;
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))((char *)&v19 - v12, v7, v9);
    v21 = &v19;
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)&v19 - v12, (char *)&v19 - v12, v9);
    sub_2375CA58C((uint64_t)&v19 - v12, v20);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))((char *)&v19 - v12, v9);
  }
  else if (MEMORY[0x24BE0E7E8] && v8 == *MEMORY[0x24BE0E7E8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    sub_2375C9D50(*v7, (uint64_t *)v24);
    ctb::bridging::makeMessageVariant(v24, v23);
    ctb::bridging::makeOptional((uint64_t)v23, (uint64_t)v24);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](a2, (uint64_t)v24);
    return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v24);
  }
  else
  {
    type metadata accessor for std.__1.optional_variant____(0);
    v16 = v15;
    v17 = sub_2375B42FC(&qword_2567FAA80, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_variant____, (uint64_t)&unk_2375F1DEC);
    CxxOptional.init(nilLiteral:)(v16, v17);
    v18 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v18(a1, v4);
    return ((uint64_t (*)(uint64_t *, uint64_t))v18)(v7, v4);
  }
}

void sub_2375C78B4(uint64_t a1@<X0>, int *x8_0@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int Optional;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  SIPResourceLists *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  int *v50;
  _BYTE v51[32];
  char v52;
  __n128 v53[2];
  int v54;
  int v55;
  CardTitleStyle v56;
  CardTitleStyle v57;

  v50 = x8_0;
  v3 = sub_2375EAA18();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v46 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v46 - v13;
  v15 = sub_2375EBC84();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EBB94();
  v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (MEMORY[0x24BE0EF38] && v19 == *MEMORY[0x24BE0EF38])
  {
    v20 = 1;
  }
  else if (MEMORY[0x24BE0EF40] && v19 == *MEMORY[0x24BE0EF40])
  {
    v20 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v20 = 0;
  }
  v21 = sub_2375EBBA0();
  if (v21)
  {
    v22 = sub_2375CAA84(v21);
    Optional = ctb::bridging::makeOptional((ctb::bridging *)(v22 & 0x10101), v56);
    swift_bridgeObjectRelease();
    v55 = Optional;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardTitleStyle_(0);
    v25 = v24;
    v26 = sub_2375B42FC(&qword_2567FAA50, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitleStyle_, (uint64_t)&unk_2375F1D44);
    CxxOptional.init(nilLiteral:)(v25, v26);
    Optional = v55;
  }
  v27 = sub_2375EBBAC();
  v49 = Optional;
  if (v27)
  {
    v28 = sub_2375CAA84(v27);
    v29 = ctb::bridging::makeOptional((ctb::bridging *)(v28 & 0x10101), v57);
    swift_bridgeObjectRelease();
    v48 = v29;
    v54 = v29;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardDescriptionStyle_(0);
    v31 = v30;
    v32 = sub_2375B42FC(&qword_2567FAA48, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescriptionStyle_, (uint64_t)&unk_2375F1D28);
    CxxOptional.init(nilLiteral:)(v31, v32);
    v48 = v54;
  }
  sub_2375EBC9C();
  sub_2375BB3E0((uint64_t)v14, (uint64_t)v12, &qword_2567FB3A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
  {
    memset(v51, 0, sizeof(v51));
    v52 = 1;
  }
  else
  {
    v33 = v47;
    (*(void (**)(void))(v4 + 32))();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v33, v3);
    v34 = sub_2375EAA00();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v34, v35, (std::string *)v51);
    v36 = *(void (**)(char *, uint64_t))(v4 + 8);
    v36(v7, v3);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v53, (__n128 *)v51);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v51);
    ctb::bridging::makeOptional((uint64_t *)v51, (ctb::bridging *)v53, v37);
    v36(v33, v3);
    v52 = 0;
  }
  sub_2375BB424((uint64_t)v14, &qword_2567FB3A8);
  v38 = v49;
  if ((v52 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardStyle_(0);
    v40 = v39;
    v41 = sub_2375B42FC(&qword_2567FAA40, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardStyle_, (uint64_t)&unk_2375F1D0C);
    CxxOptional.init(nilLiteral:)(v40, v41);
    v42 = sub_2375EBCA8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
    sub_2375BB424((uint64_t)v51, &qword_2567FB470);
  }
  else
  {
    v43 = sub_2375EBCA8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(a1, v43);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v53, (__n128 *)v51);
    ctb::chatbot::URIEntry::~URIEntry((void **)v51);
  }
  v44 = v50;
  v45 = v48;
  *v50 = v20;
  v44[1] = v38;
  v44[2] = v45;
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v44 + 4), v53);
  ctb::chatbot::URIEntry::~URIEntry((void **)v53);
}

uint64_t sub_2375C7CE0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  SIPResourceLists *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  SIPResourceLists *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _BYTE *v64;
  __n128 v65[2];
  __n128 v66[2];
  __n128 v67[2];
  __n128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  __int128 v81[12];

  v64 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB438);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2375EBC30();
  MEMORY[0x24BDAC7A8](v6);
  sub_2375BB3E0((uint64_t)v5, (uint64_t)v5, &qword_2567FB438);
  v7 = sub_2375EBFA8();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  if ((_DWORD)v9 == 1)
  {
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    v80 = 1;
  }
  else
  {
    v10 = a1;
    v62 = &v61;
    v11 = *(_QWORD *)(v8 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v61 - v12, v5, v7);
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v61 - v12, (char *)&v61 - v12, v7);
    sub_2375C8494((uint64_t)&v61 - v12, (uint64_t)v81);
    ctb::bridging::makeOptional(v81, (uint64_t)&v68);
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v61 - v12, v7);
    v80 = 0;
    a1 = v10;
  }
  sub_2375BB424((uint64_t)v5, &qword_2567FB438);
  if ((v80 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardMedia_(0);
    v15 = v14;
    v16 = sub_2375B42FC(&qword_2567FAA78, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardMedia_, (uint64_t)&unk_2375F1DD0);
    CxxOptional.init(nilLiteral:)(v15, v16);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB440);
  }
  else
  {
    std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v81, (uint64_t)&v68);
    std::optional<ctb::chatbot::CardMedia>::~optional(&v68);
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB448);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_2375EBCE4();
  MEMORY[0x24BDAC7A8](v20);
  sub_2375BB3E0((uint64_t)v19, (uint64_t)v19, &qword_2567FB448);
  v21 = sub_2375EBFC0();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21);
  v63 = a1;
  if ((_DWORD)v23 == 1)
  {
    v68 = 0u;
    v69 = 0u;
    LOBYTE(v70) = 1;
  }
  else
  {
    v61 = (uint64_t)&v61;
    v62 = &v61;
    v24 = *(_QWORD *)(v22 + 64);
    MEMORY[0x24BDAC7A8](v23);
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))((char *)&v61 - v25, v19, v21);
    MEMORY[0x24BDAC7A8](v26);
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v61 - v25, (char *)&v61 - v25, v21);
    v28 = MEMORY[0x23B815A2C](v27);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v28, v29, (std::string *)&v68);
    v30 = *(void (**)(char *, uint64_t))(v22 + 8);
    v30((char *)&v61 - v25, v21);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v67, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v67, v31);
    v30((char *)&v61 - v25, v21);
    LOBYTE(v70) = 0;
    a1 = v63;
  }
  sub_2375BB424((uint64_t)v19, &qword_2567FB448);
  if ((v70 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardTitle_(0);
    v33 = v32;
    v34 = sub_2375B42FC(&qword_2567FAA70, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitle_, (uint64_t)&unk_2375F1DB4);
    CxxOptional.init(nilLiteral:)(v33, v34);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB450);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v67, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB458);
  v36 = *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_2375EBCC0();
  MEMORY[0x24BDAC7A8](v38);
  sub_2375BB3E0((uint64_t)v37, (uint64_t)v37, &qword_2567FB458);
  v39 = sub_2375EBA44();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39);
  if ((_DWORD)v41 == 1)
  {
    v68 = 0u;
    v69 = 0u;
    LOBYTE(v70) = 1;
  }
  else
  {
    v61 = (uint64_t)&v61;
    v62 = &v61;
    v42 = *(_QWORD *)(v40 + 64);
    MEMORY[0x24BDAC7A8](v41);
    v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
    v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))((char *)&v61 - v43, v37, v39);
    MEMORY[0x24BDAC7A8](v44);
    v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))((char *)&v61 - v43, (char *)&v61 - v43, v39);
    v46 = MEMORY[0x23B8154B0](v45);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, (std::string *)&v68);
    v48 = *(void (**)(char *, uint64_t))(v40 + 8);
    v48((char *)&v61 - v43, v39);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v66, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v66, v49);
    v48((char *)&v61 - v43, v39);
    LOBYTE(v70) = 0;
    a1 = v63;
  }
  sub_2375BB424((uint64_t)v37, &qword_2567FB458);
  if ((v70 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardDescription_(0);
    v51 = v50;
    v52 = sub_2375B42FC(&qword_2567FAA68, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescription_, (uint64_t)&unk_2375F1D98);
    CxxOptional.init(nilLiteral:)(v51, v52);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB460);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v66, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  if (!sub_2375EBCCC())
  {
    v68 = 0u;
    v69 = 0u;
    LOBYTE(v70) = 1;
    goto LABEL_23;
  }
  v53 = swift_bridgeObjectRetain();
  sub_2375C9D50(v53, (uint64_t *)v65);
  ctb::bridging::makeOptional((ctb::bridging *)v65, (uint64_t)&v68);
  LOBYTE(v70) = 0;
  swift_bridgeObjectRelease();
  if ((v70 & 1) != 0)
  {
LABEL_23:
    type metadata accessor for std.__1.optional_SuggestedChipList_(0);
    v56 = v55;
    v57 = sub_2375B42FC(&qword_2567FAA60, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedChipList_, (uint64_t)&unk_2375F1D7C);
    CxxOptional.init(nilLiteral:)(v56, v57);
    v58 = sub_2375EBCF0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(a1, v58);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB468);
    goto LABEL_24;
  }
  v54 = sub_2375EBCF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(a1, v54);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v65, &v68);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)&v68);
LABEL_24:
  v59 = v64;
  std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v64, (uint64_t)v81);
  std::optional<ctb::chatbot::CardMedia>::~optional(v81);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 184), v67);
  ctb::chatbot::URIEntry::~URIEntry((void **)v67);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 216), v66);
  ctb::chatbot::URIEntry::~URIEntry((void **)v66);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)(v59 + 248), v65);
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)v65);
}

void sub_2375C8494(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  ctb::bridging *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36[2];
  __n128 v37[2];
  __n128 v38[2];
  std::string v39;
  std::string v40;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2375EAA18();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B815A14](v9);
  v12 = sub_2375EAA00();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v12, v14, &v40);
  v15 = sub_2375EBF54();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v15, v16, &v39);
  v17 = sub_2375EBF48();
  sub_2375EBF3C();
  sub_2375D2014((uint64_t)v6, (uint64_t)v38);
  v18 = sub_2375EBF78();
  sub_2375D1F48(v18, v19, (uint64_t)v37);
  v20 = (ctb::bridging *)sub_2375EBF60();
  sub_2375C94D0(v20, v21 & 1);
  v23 = v22;
  v25 = v24 & 1;
  v26 = sub_2375EBF84();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EBF90();
  v30 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v29, v26);
  if (MEMORY[0x24BE0F470] && v30 == *MEMORY[0x24BE0F470])
  {
    v31 = 1;
  }
  else if (MEMORY[0x24BE0F478] && v30 == *MEMORY[0x24BE0F478])
  {
    v31 = 2;
  }
  else if (MEMORY[0x24BE0F468] && v30 == *MEMORY[0x24BE0F468])
  {
    v31 = 3;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    v31 = 0;
  }
  v32 = sub_2375EBF6C();
  sub_2375D1F48(v32, v33, (uint64_t)v36);
  v34 = sub_2375EBFA8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v40);
  std::string::~string(&v40);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v39);
  std::string::~string(&v39);
  *(_QWORD *)(a2 + 48) = v17;
  std::optional<std::string>::optional[abi:ne180100](a2 + 56, v38);
  ctb::chatbot::URIEntry::~URIEntry((void **)v38);
  std::optional<std::string>::optional[abi:ne180100](a2 + 88, v37);
  ctb::chatbot::URIEntry::~URIEntry((void **)v37);
  *(_QWORD *)(a2 + 120) = v23;
  *(_BYTE *)(a2 + 128) = v25;
  *(_DWORD *)(a2 + 136) = v31;
  std::optional<std::string>::optional[abi:ne180100](a2 + 144, v36);
  ctb::chatbot::URIEntry::~URIEntry((void **)v36);
}

void **sub_2375C873C@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  __n128 *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[35];
  _BYTE v32[272];
  uint64_t v33;
  char v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37[4];

  v4 = sub_2375EBCA8();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EBCB4();
  sub_2375C78B4((uint64_t)v6, (int *)v37);
  v7 = sub_2375EBCFC();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v26 = a1;
    v27 = a2;
    v31[0] = MEMORY[0x24BEE4AF8];
    sub_2375D35F8(0, v8, 0);
    v9 = sub_2375EBCF0();
    v10 = v9;
    v11 = *(_QWORD *)(v9 - 8);
    v12 = *(unsigned __int8 *)(v11 + 80);
    v25[1] = v7;
    v13 = v7 + ((v12 + 32) & ~v12);
    v14 = *(_QWORD *)(v11 + 64);
    v29 = *(_QWORD *)(v11 + 72);
    v30 = v11;
    v28 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    do
    {
      MEMORY[0x24BDAC7A8](v9);
      v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      v16 = v28;
      v17 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v15, v13, v10);
      MEMORY[0x24BDAC7A8](v17);
      v16(v15, v15, v10);
      sub_2375C7CE0((uint64_t)v15, v32);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v10);
      v18 = v31[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2375D35F8(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v31[0];
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_2375D35F8(v19 > 1, v20 + 1, 1);
        v18 = v31[0];
      }
      *(_QWORD *)(v18 + 16) = v20 + 1;
      ctb::chatbot::CardCarouselContent::CardCarouselContent(v18 + 280 * v20 + 32, (uint64_t)v32);
      v9 = std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v32);
      v13 += v29;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    a1 = v26;
    a2 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
  v35 = 0uLL;
  v36 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v35);
  v21 = *(_QWORD *)(v18 + 16);
  if (v21)
  {
    v22 = v18 + 32;
    swift_bridgeObjectRetain();
    do
    {
      ctb::chatbot::CardCarouselContent::CardCarouselContent((std::string *)v32, v22);
      v34 = 0;
      ctb::chatbot::CardCarouselContent::CardCarouselContent((uint64_t)v31, (uint64_t)v32);
      std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v32);
      std::vector<ctb::chatbot::CardCarouselContent>::push_back[abi:ne180100]((uint64_t *)&v35, (uint64_t)v31);
      std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v31);
      v22 += 280;
      --v21;
    }
    while (v21);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v34 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)v32, &v35);
  std::vector<ctb::chatbot::CardCarouselContent>::~vector[abi:ne180100]((void **)&v35);
  v23 = sub_2375EBD08();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
  swift_bridgeObjectRelease();
  ctb::chatbot::CardCarouselLayout::CardCarouselLayout((uint64_t)a2, v37);
  ctb::chatbot::CardLayout::~CardLayout((uint64_t)v37);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2 + 3, (__n128 *)v32);
  return std::vector<ctb::chatbot::CardCarouselContent>::~vector[abi:ne180100]((void **)v32);
}

void sub_2375C8AA0(uint64_t a1@<X0>, uint64_t x8_0@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int Optional;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(_BYTE *, uint64_t);
  SIPResourceLists *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE v39[12];
  int v40;
  _BYTE v41[32];
  char v42;
  __n128 v43[2];
  int v44;
  int v45;
  CardTitleStyle v46;
  CardTitleStyle v47;

  v4 = sub_2375EAA18();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v39[-v9];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v39[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v39[-v15];
  v17 = sub_2375EBBD0();
  if (v17)
  {
    v18 = sub_2375CAA84(v17);
    Optional = ctb::bridging::makeOptional((ctb::bridging *)(v18 & 0x10101), v46);
    swift_bridgeObjectRelease();
    v40 = Optional;
    v45 = Optional;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardTitleStyle_(0);
    v21 = v20;
    v22 = sub_2375B42FC(&qword_2567FAA50, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitleStyle_, (uint64_t)&unk_2375F1D44);
    CxxOptional.init(nilLiteral:)(v21, v22);
    v40 = v45;
  }
  v23 = sub_2375EBBA0();
  if (v23)
  {
    v24 = sub_2375CAA84(v23);
    v25 = ctb::bridging::makeOptional((ctb::bridging *)(v24 & 0x10101), v47);
    swift_bridgeObjectRelease();
    v44 = v25;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardDescriptionStyle_(0);
    v27 = v26;
    v28 = sub_2375B42FC(&qword_2567FAA48, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescriptionStyle_, (uint64_t)&unk_2375F1D28);
    CxxOptional.init(nilLiteral:)(v27, v28);
    v25 = v44;
  }
  sub_2375EBBE8();
  sub_2375BB3E0((uint64_t)v16, (uint64_t)v14, &qword_2567FB3A8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
  {
    memset(v41, 0, sizeof(v41));
    v42 = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v10, v14, v4);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v8, v10, v4);
    v29 = sub_2375EAA00();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v29, v30, (std::string *)v41);
    v31 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v31(v8, v4);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v43, (__n128 *)v41);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v41);
    ctb::bridging::makeOptional((uint64_t *)v41, (ctb::bridging *)v43, v32);
    v31(v10, v4);
    v42 = 0;
  }
  sub_2375BB424((uint64_t)v16, &qword_2567FB3A8);
  if ((v42 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardStyle_(0);
    v34 = v33;
    v35 = sub_2375B42FC(&qword_2567FAA40, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardStyle_, (uint64_t)&unk_2375F1D0C);
    CxxOptional.init(nilLiteral:)(v34, v35);
    v36 = sub_2375EBBF4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(a1, v36);
    sub_2375BB424((uint64_t)v41, &qword_2567FB470);
  }
  else
  {
    v37 = sub_2375EBBF4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(a1, v37);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v43, (__n128 *)v41);
    ctb::chatbot::URIEntry::~URIEntry((void **)v41);
  }
  v38 = v40;
  *(_QWORD *)x8_0 = 1;
  *(_DWORD *)(x8_0 + 8) = v38;
  *(_DWORD *)(x8_0 + 12) = v25;
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](x8_0 + 16, v43);
  ctb::chatbot::URIEntry::~URIEntry((void **)v43);
}

void sub_2375C8E24(uint64_t a1@<X0>, _DWORD *x8_0@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int Optional;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  SIPResourceLists *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _BYTE v46[32];
  char v47;
  __n128 v48[2];
  int v49;
  int v50;
  CardTitleStyle v51;
  CardTitleStyle v52;

  v4 = sub_2375EAA18();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v44 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)&v44 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v44 - v13;
  v15 = sub_2375EBB88();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EBB94();
  v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (MEMORY[0x24BE0EDD8] && v19 == *MEMORY[0x24BE0EDD8])
  {
    v20 = 1;
  }
  else if (MEMORY[0x24BE0EDE0] && v19 == *MEMORY[0x24BE0EDE0])
  {
    v20 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v20 = 0;
  }
  v21 = sub_2375EBBA0();
  if (v21)
  {
    v22 = sub_2375CAA84(v21);
    Optional = ctb::bridging::makeOptional((ctb::bridging *)(v22 & 0x10101), v51);
    swift_bridgeObjectRelease();
    v50 = Optional;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardTitleStyle_(0);
    v25 = v24;
    v26 = sub_2375B42FC(&qword_2567FAA50, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitleStyle_, (uint64_t)&unk_2375F1D44);
    CxxOptional.init(nilLiteral:)(v25, v26);
    Optional = v50;
  }
  v27 = sub_2375EBBAC();
  if (v27)
  {
    v28 = sub_2375CAA84(v27);
    v29 = ctb::bridging::makeOptional((ctb::bridging *)(v28 & 0x10101), v52);
    swift_bridgeObjectRelease();
    v49 = v29;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardDescriptionStyle_(0);
    v31 = v30;
    v32 = sub_2375B42FC(&qword_2567FAA48, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescriptionStyle_, (uint64_t)&unk_2375F1D28);
    CxxOptional.init(nilLiteral:)(v31, v32);
    v29 = v49;
  }
  sub_2375EBBB8();
  sub_2375BB3E0((uint64_t)v14, (uint64_t)v12, &qword_2567FB3A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
  {
    memset(v46, 0, sizeof(v46));
    v47 = 1;
  }
  else
  {
    v33 = v45;
    (*(void (**)(void))(v5 + 32))();
    v34 = v44;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v44, v33, v4);
    v35 = sub_2375EAA00();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v35, v36, (std::string *)v46);
    v37 = *(void (**)(char *, uint64_t))(v5 + 8);
    v37(v34, v4);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v48, (__n128 *)v46);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v46);
    ctb::bridging::makeOptional((uint64_t *)v46, (ctb::bridging *)v48, v38);
    v37(v33, v4);
    v47 = 0;
  }
  sub_2375BB424((uint64_t)v14, &qword_2567FB3A8);
  if ((v47 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardStyle_(0);
    v40 = v39;
    v41 = sub_2375B42FC(&qword_2567FAA40, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardStyle_, (uint64_t)&unk_2375F1D0C);
    CxxOptional.init(nilLiteral:)(v40, v41);
    v42 = sub_2375EBBC4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
    sub_2375BB424((uint64_t)v46, &qword_2567FB470);
  }
  else
  {
    v43 = sub_2375EBBC4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(a1, v43);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v48, (__n128 *)v46);
    ctb::chatbot::URIEntry::~URIEntry((void **)v46);
  }
  *x8_0 = 2;
  x8_0[1] = v20;
  x8_0[2] = Optional;
  x8_0[3] = v29;
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(x8_0 + 4), v48);
  ctb::chatbot::URIEntry::~URIEntry((void **)v48);
}

uint64_t sub_2375C9244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t *v19;

  v4 = sub_2375EBC00();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x24BE0EE90] && v8 == *MEMORY[0x24BE0EE90])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EBBF4();
    v19 = &v18;
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    v18 = (uint64_t)&v18;
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_2375C8AA0((uint64_t)v12, a2);
LABEL_7:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (MEMORY[0x24BE0EE78] && v8 == *MEMORY[0x24BE0EE78])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EBBC4();
    v19 = &v18;
    v10 = *(_QWORD *)(v9 - 8);
    v14 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    v18 = (uint64_t)&v18;
    MEMORY[0x24BDAC7A8](v15);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_2375C8E24((uint64_t)v12, (_DWORD *)a2);
    goto LABEL_7;
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  ctb::chatbot::CardLayout::CardLayout(a2);
  v17 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v17(a1, v4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v7, v4);
}

void sub_2375C94D0(ctb::bridging *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CUnsignedLong_(0);
    v3 = v2;
    v4 = sub_2375B42FC(&qword_2567FAA58, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CUnsignedLong_, (uint64_t)&unk_2375F1D60);
    CxxOptional.init(nilLiteral:)(v3, v4);
  }
  else if (((unint64_t)a1 & 0x8000000000000000) != 0)
  {
    sub_2375EC3D4();
    __break(1u);
  }
  else
  {
    ctb::bridging::makeOptional(a1);
  }
}

uint64_t sub_2375C959C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  SIPResourceLists *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  SIPResourceLists *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _BYTE *v64;
  __n128 v65[2];
  __n128 v66[2];
  __n128 v67[2];
  __n128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  __int128 v81[12];

  v64 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB438);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2375EBC30();
  MEMORY[0x24BDAC7A8](v6);
  sub_2375BB3E0((uint64_t)v5, (uint64_t)v5, &qword_2567FB438);
  v7 = sub_2375EBFA8();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  if ((_DWORD)v9 == 1)
  {
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    v80 = 1;
  }
  else
  {
    v10 = a1;
    v62 = &v61;
    v11 = *(_QWORD *)(v8 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v61 - v12, v5, v7);
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v61 - v12, (char *)&v61 - v12, v7);
    sub_2375C8494((uint64_t)&v61 - v12, (uint64_t)v81);
    ctb::bridging::makeOptional(v81, (uint64_t)&v68);
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v61 - v12, v7);
    v80 = 0;
    a1 = v10;
  }
  sub_2375BB424((uint64_t)v5, &qword_2567FB438);
  if ((v80 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardMedia_(0);
    v15 = v14;
    v16 = sub_2375B42FC(&qword_2567FAA78, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardMedia_, (uint64_t)&unk_2375F1DD0);
    CxxOptional.init(nilLiteral:)(v15, v16);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB440);
  }
  else
  {
    std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v81, (uint64_t)&v68);
    std::optional<ctb::chatbot::CardMedia>::~optional(&v68);
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB448);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_2375EBC3C();
  MEMORY[0x24BDAC7A8](v20);
  sub_2375BB3E0((uint64_t)v19, (uint64_t)v19, &qword_2567FB448);
  v21 = sub_2375EBFC0();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21);
  v63 = a1;
  if ((_DWORD)v23 == 1)
  {
    v68 = 0u;
    v69 = 0u;
    LOBYTE(v70) = 1;
  }
  else
  {
    v61 = (uint64_t)&v61;
    v62 = &v61;
    v24 = *(_QWORD *)(v22 + 64);
    MEMORY[0x24BDAC7A8](v23);
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))((char *)&v61 - v25, v19, v21);
    MEMORY[0x24BDAC7A8](v26);
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v61 - v25, (char *)&v61 - v25, v21);
    v28 = MEMORY[0x23B815A2C](v27);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v28, v29, (std::string *)&v68);
    v30 = *(void (**)(char *, uint64_t))(v22 + 8);
    v30((char *)&v61 - v25, v21);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v67, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v67, v31);
    v30((char *)&v61 - v25, v21);
    LOBYTE(v70) = 0;
    a1 = v63;
  }
  sub_2375BB424((uint64_t)v19, &qword_2567FB448);
  if ((v70 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardTitle_(0);
    v33 = v32;
    v34 = sub_2375B42FC(&qword_2567FAA70, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardTitle_, (uint64_t)&unk_2375F1DB4);
    CxxOptional.init(nilLiteral:)(v33, v34);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB450);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v67, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB458);
  v36 = *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_2375EBC18();
  MEMORY[0x24BDAC7A8](v38);
  sub_2375BB3E0((uint64_t)v37, (uint64_t)v37, &qword_2567FB458);
  v39 = sub_2375EBA44();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39);
  if ((_DWORD)v41 == 1)
  {
    v68 = 0u;
    v69 = 0u;
    LOBYTE(v70) = 1;
  }
  else
  {
    v61 = (uint64_t)&v61;
    v62 = &v61;
    v42 = *(_QWORD *)(v40 + 64);
    MEMORY[0x24BDAC7A8](v41);
    v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
    v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))((char *)&v61 - v43, v37, v39);
    MEMORY[0x24BDAC7A8](v44);
    v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))((char *)&v61 - v43, (char *)&v61 - v43, v39);
    v46 = MEMORY[0x23B8154B0](v45);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, (std::string *)&v68);
    v48 = *(void (**)(char *, uint64_t))(v40 + 8);
    v48((char *)&v61 - v43, v39);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v66, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v66, v49);
    v48((char *)&v61 - v43, v39);
    LOBYTE(v70) = 0;
    a1 = v63;
  }
  sub_2375BB424((uint64_t)v37, &qword_2567FB458);
  if ((v70 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_CardDescription_(0);
    v51 = v50;
    v52 = sub_2375B42FC(&qword_2567FAA68, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CardDescription_, (uint64_t)&unk_2375F1D98);
    CxxOptional.init(nilLiteral:)(v51, v52);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB460);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v66, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  if (!sub_2375EBC24())
  {
    v68 = 0u;
    v69 = 0u;
    LOBYTE(v70) = 1;
    goto LABEL_23;
  }
  v53 = swift_bridgeObjectRetain();
  sub_2375C9D50(v53, (uint64_t *)v65);
  ctb::bridging::makeOptional((ctb::bridging *)v65, (uint64_t)&v68);
  LOBYTE(v70) = 0;
  swift_bridgeObjectRelease();
  if ((v70 & 1) != 0)
  {
LABEL_23:
    type metadata accessor for std.__1.optional_SuggestedChipList_(0);
    v56 = v55;
    v57 = sub_2375B42FC(&qword_2567FAA60, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedChipList_, (uint64_t)&unk_2375F1D7C);
    CxxOptional.init(nilLiteral:)(v56, v57);
    v58 = sub_2375EBC48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(a1, v58);
    sub_2375BB424((uint64_t)&v68, &qword_2567FB468);
    goto LABEL_24;
  }
  v54 = sub_2375EBC48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(a1, v54);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v65, &v68);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)&v68);
LABEL_24:
  v59 = v64;
  std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v64, (uint64_t)v81);
  std::optional<ctb::chatbot::CardMedia>::~optional(v81);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 184), v67);
  ctb::chatbot::URIEntry::~URIEntry((void **)v67);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 216), v66);
  ctb::chatbot::URIEntry::~URIEntry((void **)v66);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)(v59 + 248), v65);
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)v65);
}

uint64_t sub_2375C9D50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t *, uint64_t);
  uint64_t *v46;
  double v47;
  void (*v48)(char *, uint64_t, double);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(char *, uint64_t);
  SIPResourceLists *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD *);
  _QWORD *v62;
  _QWORD v64[4];
  uint64_t *v65;
  uint64_t (*v66)(_QWORD, _QWORD, _QWORD);
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _BYTE v91[32];
  char v92;
  __n128 v93[2];
  std::string v94;
  _DWORD v95[56];
  uint64_t v96;
  __n128 v97;
  uint64_t v98;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  v5 = sub_2375EB828();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v64[1] = a1;
  v9 = a1 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(_QWORD *)(v7 + 72);
  v87 = a2;
  v88 = v10;
  v67 = &v95[2];
  v68 = v11;
  v12 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
  v69 = v7;
  v70 = v5;
  v65 = &v98;
  v66 = v12;
  do
  {
    v90 = v64;
    v13 = v88;
    MEMORY[0x24BDAC7A8](v5);
    v14 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = v12(v14, v9, v6);
    v89 = v64;
    MEMORY[0x24BDAC7A8](v15);
    v16 = v14;
    v12(v14, v14, v6);
    v17 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v14, v6);
    if (MEMORY[0x24BE0E7A8] && v17 == *MEMORY[0x24BE0E7A8])
    {
      v80 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t))(v7 + 96))(v14, v6);
      v18 = sub_2375EBD98();
      v85 = v64;
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(_QWORD *)(v19 + 64);
      MEMORY[0x24BDAC7A8](v18);
      v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
      v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))((char *)v64 - v21, v16, v18);
      v82 = v64;
      MEMORY[0x24BDAC7A8](v22);
      v81 = v19;
      v23 = *(uint64_t (**)(char *, char *, uint64_t))(v19 + 16);
      v83 = (char *)v64 - v21;
      v24 = v23((char *)v64 - v21, (char *)v64 - v21, v18);
      v78 = v64;
      MEMORY[0x24BDAC7A8](v24);
      v25 = (char *)v64 - v21;
      v79 = (char *)v64 - v21;
      v84 = (_QWORD *)v18;
      v23((char *)v64 - v21, (char *)v64 - v21, v18);
      v75 = sub_2375EBAB0();
      v76 = v64;
      v74 = *(_QWORD *)(v75 - 8);
      MEMORY[0x24BDAC7A8](v75);
      v27 = (char *)v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = sub_2375EBD8C();
      v29 = MEMORY[0x23B815510](v28);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v29, v30, &v94);
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB480);
      v72 = v64;
      v32 = *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64);
      MEMORY[0x24BDAC7A8](v31);
      v33 = (char *)v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      v73 = v27;
      v34 = sub_2375EBAA4();
      v71 = v64;
      MEMORY[0x24BDAC7A8](v34);
      sub_2375BB3E0((uint64_t)v33, (uint64_t)v33, &qword_2567FB480);
      v35 = sub_2375EBEE8();
      v36 = *(_QWORD *)(v35 - 8);
      v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35);
      v77 = v25;
      if ((_DWORD)v37 == 1)
      {
        memset(v91, 0, sizeof(v91));
        v92 = 1;
      }
      else
      {
        v86 = v4;
        v64[2] = v64;
        v49 = *(_QWORD *)(v36 + 64);
        MEMORY[0x24BDAC7A8](v37);
        v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
        v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))((char *)v64 - v50, v33, v35);
        v64[3] = v64;
        MEMORY[0x24BDAC7A8](v51);
        v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 16))((char *)v64 - v50, (char *)v64 - v50, v35);
        v53 = MEMORY[0x23B815954](v52);
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v53, v54, (std::string *)v91);
        v55 = *(void (**)(char *, uint64_t))(v36 + 8);
        v55((char *)v64 - v50, v35);
        ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v93, (__n128 *)v91);
        ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v91);
        ctb::bridging::makeOptional((uint64_t *)v91, (ctb::bridging *)v93, v56);
        v55((char *)v64 - v50, v35);
        v92 = 0;
        v4 = v86;
      }
      v6 = v70;
      sub_2375BB424((uint64_t)v33, &qword_2567FB480);
      v57 = v68;
      v12 = v66;
      if ((v92 & 1) != 0)
      {
        type metadata accessor for std.__1.optional_PostbackData_(0);
        v59 = v58;
        v60 = sub_2375B42FC(&qword_2567FAAC0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_PostbackData_, (uint64_t)&unk_2375F1ECC);
        CxxOptional.init(nilLiteral:)(v59, v60);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
        sub_2375BB424((uint64_t)v91, &qword_2567FB488);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
        std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v93, (__n128 *)v91);
        ctb::chatbot::URIEntry::~URIEntry((void **)v91);
      }
      v7 = v69;
      std::string::basic_string[abi:ne180100](&v97, (__n128 *)&v94);
      std::string::~string(&v94);
      std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v65, v93);
      ctb::chatbot::URIEntry::~URIEntry((void **)v93);
      v61 = *(void (**)(char *, _QWORD *))(v81 + 8);
      v62 = v84;
      v61(v77, v84);
      ctb::chatbot::Media::Media((__n128 *)v91, (uint64_t)&v97);
      ctb::chatbot::Media::~Media((void **)&v97);
      ctb::bridging::makeSuggestedChipVariant((uint64_t)v91, (uint64_t)&v97);
      v61(v79, v62);
      v95[0] = 1;
      std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v67, &v97);
      std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::~variant[abi:ne180100](&v97);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v80, v6);
      v61(v83, v62);
      v11 = v57;
    }
    else if (MEMORY[0x24BE0E7B8] && v17 == *MEMORY[0x24BE0E7B8])
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v14, v6);
      v38 = sub_2375EBDC8();
      v85 = v64;
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(_QWORD *)(v39 + 64);
      MEMORY[0x24BDAC7A8](v38);
      v86 = v4;
      v41 = (_QWORD *)((char *)v64 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
      v42 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v41, v14, v38);
      v84 = v64;
      MEMORY[0x24BDAC7A8](v42);
      v43 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16);
      v44 = v43(v41, v41, v38);
      v83 = (char *)v64;
      MEMORY[0x24BDAC7A8](v44);
      v7 = v69;
      v43(v41, v41, v38);
      v6 = v70;
      v12 = v66;
      sub_2375CFD98(v41, (uint64_t)v91);
      ctb::bridging::makeSuggestedChipVariant((uint64_t)v91, (uint64_t)&v97);
      v45 = *(void (**)(uint64_t *, uint64_t))(v39 + 8);
      v45(v41, v38);
      v95[0] = 2;
      std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v67, &v97);
      std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::~variant[abi:ne180100](&v97);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      v46 = v41;
      v4 = v86;
      v45(v46, v38);
      v11 = v68;
    }
    else
    {
      v96 = 0;
      memset(v95, 0, sizeof(v95));
      v47 = ctb::chatbot::SuggestedChip::SuggestedChip((ctb::chatbot::SuggestedChip *)v95);
      v48 = *(void (**)(char *, uint64_t, double))(v7 + 8);
      v48(v14, v6, v47);
      ((void (*)(char *, uint64_t))v48)(v14, v6);
    }
    ctb::chatbot::SuggestedChip::SuggestedChip(&v97, v95);
    ctb::chatbot::SuggestedChip::~SuggestedChip((ctb::chatbot::SuggestedChip *)v95);
    std::vector<ctb::chatbot::SuggestedChip>::push_back[abi:ne180100](v87, &v97);
    ctb::chatbot::SuggestedChip::~SuggestedChip((ctb::chatbot::SuggestedChip *)&v97);
    v9 += v11;
    --v4;
  }
  while (v4);
  return swift_bridgeObjectRelease();
}

__n128 ctb::bridging::makeMessageVariant@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a2[20].n128_u32[2] = 2;
  return result;
}

uint64_t sub_2375CA58C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  _QWORD v31[2];
  _QWORD *v32;
  _BYTE *v33;
  __n128 v34[3];
  _BYTE v35[336];
  __n128 v36[3];
  uint64_t v37;

  v4 = sub_2375EBED0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x24BE0F340] && v8 == *MEMORY[0x24BE0F340])
  {
    v33 = a2;
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EBC60();
    v31[1] = v31;
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    v32 = v31;
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    v14 = sub_2375EBC00();
    MEMORY[0x24BDAC7A8](v14);
    v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EBC0C();
    sub_2375C9244((uint64_t)v16, (uint64_t)v34);
    v17 = sub_2375EBC48();
    MEMORY[0x24BDAC7A8](v17);
    v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EBC54();
    sub_2375C959C((uint64_t)v19, v35);
    v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v12, v9);
    ctb::chatbot::CardLayout::CardLayout(v36, v34);
    ctb::chatbot::CardLayout::~CardLayout((uint64_t)v34);
    ctb::chatbot::CardCarouselContent::CardCarouselContent((uint64_t)&v37, (uint64_t)v35);
    std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v35);
    ctb::bridging::makeMessageVariant((ctb::bridging *)v36, (uint64_t)v35);
    ctb::bridging::makeOptional((uint64_t)v35, (uint64_t)v36);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v20(v12, v9);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v33, (uint64_t)v36);
    return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v36);
  }
  else if (MEMORY[0x24BE0F350] && v8 == *MEMORY[0x24BE0F350])
  {
    v33 = a2;
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v22 = sub_2375EBD08();
    v32 = v31;
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(_QWORD *)(v23 + 64);
    MEMORY[0x24BDAC7A8](v22);
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))((char *)v31 - v25, v7, v22);
    MEMORY[0x24BDAC7A8](v26);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v31 - v25, (char *)v31 - v25, v22);
    sub_2375C873C((uint64_t)v31 - v25, v36);
    ctb::bridging::makeMessageVariant(v36, (uint64_t)v35);
    ctb::bridging::makeOptional((uint64_t)v35, (uint64_t)v36);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(char *, uint64_t))(v23 + 8))((char *)v31 - v25, v22);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v33, (uint64_t)v36);
    return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v36);
  }
  else
  {
    type metadata accessor for std.__1.optional_variant____(0);
    v28 = v27;
    v29 = sub_2375B42FC(&qword_2567FAA80, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_variant____, (uint64_t)&unk_2375F1DEC);
    CxxOptional.init(nilLiteral:)(v28, v29);
    v30 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v30(a1, v4);
    return ((uint64_t (*)(char *, uint64_t))v30)(v7, v4);
  }
}

double ctb::bridging::makeMessageVariant@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::__base[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(a2, a1).n128_u64[0];
  return result;
}

__n128 ctb::chatbot::CardLayout::CardLayout(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = 0;
  a1[2].n128_u8[8] = 0;
  if (a2[2].n128_u8[8])
  {
    result = a2[1];
    a1[2].n128_u64[0] = a2[2].n128_u64[0];
    a1[1] = result;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    a2[1].n128_u64[0] = 0;
    a1[2].n128_u8[8] = 1;
  }
  return result;
}

uint64_t ctb::bridging::makeMessageVariant@<X0>(ctb::bridging *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(a2, (uint64_t)this);
  *(_DWORD *)(result + 328) = 0;
  return result;
}

uint64_t std::optional<ctb::chatbot::SuggestedChipList>::~optional(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = (void **)a1;
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

uint64_t ctb::chatbot::CardLayout::CardLayout(uint64_t this)
{
  *(_WORD *)(this + 11) = 0;
  *(_WORD *)(this + 15) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t sub_2375CAA84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t (*v6)(char *, _QWORD, uint64_t);
  uint64_t v7;
  unint64_t v8;
  void (*v9)(char *, unint64_t, uint64_t);
  char v10;
  uint64_t (*v11)(char *, uint64_t);
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  char v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t (*v56)(char *, _QWORD, uint64_t);
  void (*v57)(char *, unint64_t, uint64_t);
  uint64_t v58;

  v2 = sub_2375EB924();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(uint64_t **)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v49 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v7 = v6(v5, *MEMORY[0x24BE0E9B8], v2);
  v55 = v4;
  MEMORY[0x24BDAC7A8](v7);
  v58 = *(_QWORD *)(a1 + 16);
  v53 = v3;
  v56 = v6;
  if (!v58)
  {
    v12 = 0;
    v11 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v13 = v55;
    v14 = v11(v5, v2);
LABEL_15:
    v54 = &v49;
    MEMORY[0x24BDAC7A8](v14);
    v21 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v22 = (char *)&v49 - v21;
    v23 = v6((char *)&v49 - v21, *MEMORY[0x24BE0E9C0], v2);
    MEMORY[0x24BDAC7A8](v23);
    v25 = (char *)&v49 - v21;
    if (v58)
    {
      v50 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      v51 = v24;
      v52 = v12;
      v26 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v57 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
      v57((char *)&v49 - v21, a1 + v26, v2);
      sub_2375CB000();
      swift_bridgeObjectRetain();
      v27 = sub_2375EC20C();
      v11(v25, v2);
      if ((v27 & 1) != 0)
      {
        v28 = 256;
      }
      else
      {
        if (v58 != 1)
        {
          v29 = v3;
          v30 = (void (*)(char *, uint64_t))v11;
          v31 = *(_QWORD *)(v29 + 72);
          v49 = a1;
          v32 = a1 + v31 + v26;
          v33 = 1;
          while (1)
          {
            result = ((uint64_t (*)(char *, unint64_t, uint64_t))v57)(v25, v32, v2);
            v34 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_45;
            v35 = sub_2375EC20C();
            v30(v25, v2);
            if ((v35 & 1) != 0)
              break;
            ++v33;
            v32 += v31;
            if (v34 == v58)
            {
              v28 = 0;
LABEL_27:
              a1 = v49;
              v11 = (uint64_t (*)(char *, uint64_t))v30;
              goto LABEL_28;
            }
          }
          v28 = 256;
          goto LABEL_27;
        }
        v28 = 0;
      }
LABEL_28:
      v6 = v56;
      v12 = v52;
      v21 = v50;
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = 0;
    }
    v36 = v11(v22, v2);
    MEMORY[0x24BDAC7A8](v36);
    v37 = (char *)&v49 - v21;
    v38 = v6((char *)&v49 - v21, *MEMORY[0x24BE0E9C8], v2);
    MEMORY[0x24BDAC7A8](v38);
    v39 = (char *)&v49 - v21;
    if (v58)
    {
      v55 = &v49;
      LODWORD(v56) = v28;
      v40 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      v41 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
      v41(v39, a1 + v40, v2);
      sub_2375CB000();
      swift_bridgeObjectRetain();
      v42 = sub_2375EC20C();
      v11(v39, v2);
      if ((v42 & 1) != 0)
      {
        v43 = 0x10000;
      }
      else
      {
        if (v58 != 1)
        {
          v52 = v12;
          v57 = (void (*)(char *, unint64_t, uint64_t))v11;
          v44 = *(_QWORD *)(v53 + 72);
          v49 = a1;
          v45 = a1 + v44 + v40;
          v46 = 1;
          while (1)
          {
            result = ((uint64_t (*)(char *, unint64_t, uint64_t))v41)(v39, v45, v2);
            v47 = v46 + 1;
            if (__OFADD__(v46, 1))
              goto LABEL_46;
            v48 = sub_2375EC20C();
            ((void (*)(char *, uint64_t))v57)(v39, v2);
            if ((v48 & 1) != 0)
              break;
            ++v46;
            v45 += v44;
            if (v47 == v58)
            {
              v43 = 0;
LABEL_41:
              v11 = (uint64_t (*)(char *, uint64_t))v57;
              v12 = v52;
              goto LABEL_42;
            }
          }
          v43 = 0x10000;
          goto LABEL_41;
        }
        v43 = 0;
      }
LABEL_42:
      v28 = (int)v56;
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = 0;
    }
    v11(v37, v2);
    return v28 | v12 | v43;
  }
  v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v9 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v9(v5, a1 + v8, v2);
  sub_2375CB000();
  swift_bridgeObjectRetain();
  v10 = sub_2375EC20C();
  v11 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 1;
LABEL_14:
    v13 = v55;
    v6 = v56;
    v14 = v11(v5, v2);
    goto LABEL_15;
  }
  if (v58 == 1)
  {
    swift_bridgeObjectRelease();
    v12 = 0;
    goto LABEL_14;
  }
  v57 = (void (*)(char *, unint64_t, uint64_t))v11;
  v15 = *(_QWORD *)(v3 + 72);
  v49 = a1;
  v16 = a1 + v15 + v8;
  v17 = 1;
  while (1)
  {
    result = ((uint64_t (*)(char *, unint64_t, uint64_t))v9)(v5, v16, v2);
    v19 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    v20 = sub_2375EC20C();
    ((void (*)(char *, uint64_t))v57)(v5, v2);
    if ((v20 & 1) != 0)
    {
      a1 = v49;
      swift_bridgeObjectRelease();
      v12 = 1;
      goto LABEL_13;
    }
    ++v17;
    v16 += v15;
    if (v19 == v58)
    {
      a1 = v49;
      swift_bridgeObjectRelease();
      v12 = 0;
LABEL_13:
      v11 = (uint64_t (*)(char *, uint64_t))v57;
      v3 = v53;
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t ctb::bridging::makeOptional(ctb::bridging *this, CardTitleStyle a2)
{
  return this & 0xFFFFFF | 0x1000000;
}

unint64_t sub_2375CB000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2567FB478;
  if (!qword_2567FB478)
  {
    v1 = sub_2375EB924();
    result = MEMORY[0x23B8163BC](MEMORY[0x24BE0E9E8], v1);
    atomic_store(result, (unint64_t *)&qword_2567FB478);
  }
  return result;
}

void **std::vector<ctb::chatbot::CardCarouselContent>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

__n128 ctb::chatbot::CardCarouselLayout::CardCarouselLayout(uint64_t a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;

  v2 = a2->n128_u64[0];
  *(_DWORD *)(a1 + 8) = a2->n128_u32[2];
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (a2[2].n128_u8[8])
  {
    result = a2[1];
    *(_QWORD *)(a1 + 32) = a2[2].n128_u64[0];
    *(__n128 *)(a1 + 16) = result;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t ctb::chatbot::CardLayout::~CardLayout(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t std::vector<ctb::chatbot::CardCarouselContent>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::chatbot::CardCarouselContent>::__push_back_slow_path<ctb::chatbot::CardCarouselContent const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent const&,ctb::chatbot::CardCarouselContent*>((std::string *)a1[1], a2);
    result = v3 + 280;
    a1[1] = v3 + 280;
  }
  a1[1] = result;
  return result;
}

void sub_2375CB144(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::SuggestedChip>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = std::vector<ctb::chatbot::SuggestedChip>::__push_back_slow_path<ctb::chatbot::SuggestedChip const&>(a1, a2);
  }
  else
  {
    *v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    result = (uint64_t)(v3 + 58);
    a1[1] = (uint64_t)(v3 + 58);
  }
  a1[1] = result;
  return result;
}

void sub_2375CB19C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double ctb::chatbot::SuggestedChip::SuggestedChip(ctb::chatbot::SuggestedChip *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  return result;
}

_DWORD *ctb::chatbot::SuggestedChip::SuggestedChip(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void ctb::chatbot::SuggestedChip::~SuggestedChip(ctb::chatbot::SuggestedChip *this)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8);
}

uint64_t ctb::bridging::makeSuggestedChipVariant@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(result + 48))
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_DWORD *)(a2 + 216) = 1;
  return result;
}

uint64_t ctb::bridging::makeSuggestedChipVariant@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction>(a2, a1);
  *(_DWORD *)(result + 216) = 0;
  return result;
}

__n128 std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::__base[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(uint64_t a1, __n128 *a2)
{
  unint64_t v2;
  __n128 v3;
  __n128 result;

  v2 = a2->n128_u64[0];
  *(_DWORD *)(a1 + 8) = a2->n128_u32[2];
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (a2[2].n128_u8[8])
  {
    v3 = a2[1];
    *(_QWORD *)(a1 + 32) = a2[2].n128_u64[0];
    *(__n128 *)(a1 + 16) = v3;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = a2[3];
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  *(_DWORD *)(a1 + 328) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::CardMedia>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = v4;
  *(_BYTE *)(result + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v5 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(result + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)(result + 56) = v5;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *(_BYTE *)(result + 80) = 1;
  }
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v6 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(result + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(result + 88) = v6;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_BYTE *)(result + 112) = 1;
  }
  v7 = *(__int128 *)((char *)a2 + 120);
  v8 = *((_DWORD *)a2 + 34);
  *(_BYTE *)(result + 144) = 0;
  *(_DWORD *)(result + 136) = v8;
  *(_OWORD *)(result + 120) = v7;
  *(_BYTE *)(result + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    v9 = a2[9];
    *(_QWORD *)(result + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(result + 144) = v9;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 20) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *(_BYTE *)(result + 168) = 1;
  }
  *(_BYTE *)(result + 176) = 1;
  return result;
}

uint64_t std::vector<ctb::chatbot::CardCarouselContent>::__push_back_slow_path<ctb::chatbot::CardCarouselContent const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xEA0EA0EA0EA0EALL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x75075075075075)
    v9 = 0xEA0EA0EA0EA0EALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[280 * v4];
  v16 = &v10[280 * v9];
  std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent const&,ctb::chatbot::CardCarouselContent*>(v14, a2);
  v15 = &v14[11].__r_.__value_.__s.__data_[16];
  std::vector<ctb::chatbot::CardCarouselContent>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ctb::chatbot::CardCarouselContent>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2375CB524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::CardCarouselContent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent const&,ctb::chatbot::CardCarouselContent*>(std::string *a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](a1, (const ctb::chatbot::CardMedia *)a2);
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 184), (__int128 *)(a2 + 184));
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100](a1 + 9, (__int128 *)(a2 + 216));
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_2375CB594(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[240] && v1[239] < 0)
    operator delete(*v3);
  if (v1[208])
  {
    if (v1[207] < 0)
      operator delete(*v2);
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::CardCarouselContent>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 280;
    v4 -= 280;
    result = (uint64_t *)ctb::chatbot::CardCarouselContent::CardCarouselContent(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::CardCarouselContent>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
    std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(i - 280);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<ctb::chatbot::SuggestedChip>::__push_back_slow_path<ctb::chatbot::SuggestedChip const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x8D3DCB08D3DCB0)
    v9 = 0x11A7B9611A7B961;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[232 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[232 * v9];
  *(_DWORD *)v11 = *a2;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 232;
  std::vector<ctb::chatbot::SuggestedChip>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<ctb::chatbot::SuggestedChip>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_2375CB7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::SuggestedChip>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::SuggestedChip>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_DWORD *)(v4 - 232);
    v4 -= 232;
    *(_DWORD *)(v6 - 232) = v7;
    v6 -= 232;
    result = (uint64_t *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor(v6 + 8, v4 + 8);
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::SuggestedChip>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 232;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(i - 224);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 216);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_2508E7B50 + v4))(&v7, result);
  *(_DWORD *)(v3 + 216) = -1;
  v5 = *(unsigned int *)(a2 + 216);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_2508E7BC8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 216) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction>);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)a3;
  a2[1].n128_u64[0] = *(_QWORD *)(a3 + 16);
  *a2 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  a2[1].n128_u8[8] = 0;
  a2[3].n128_u8[0] = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    result = *(__n128 *)(a3 + 24);
    a2[2].n128_u64[1] = *(_QWORD *)(a3 + 40);
    *(__n128 *)((char *)a2 + 24) = result;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    a2[3].n128_u8[0] = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 72, a2 + 72);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 136);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_2508E7B60 + v4))(&v7, result);
  *(_DWORD *)(v3 + 136) = -1;
  v5 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_2508E7BD8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 136) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v3 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = *(__n128 *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  result = *(__n128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(__n128 *)(a2 + 24) = result;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_Tm(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation>);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__alt<7ul,ctb::chatbot::SuggestedActionCalendar>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionCalendar>(a2, a3).n128_u64[0];
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall>);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_Tm(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)a3;
  a2[1].n128_u64[0] = *(_QWORD *)(a3 + 16);
  *a2 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  a2[1].n128_u8[8] = 0;
  a2[3].n128_u8[0] = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    result = *(__n128 *)(a3 + 24);
    a2[2].n128_u64[1] = *(_QWORD *)(a3 + 40);
    *(__n128 *)((char *)a2 + 24) = result;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    a2[3].n128_u8[0] = 1;
  }
  return result;
}

__n128 std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation>(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
  *a1 = result;
  a1[1].n128_u8[8] = 0;
  a1[3].n128_u8[0] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    result = *(__n128 *)(a2 + 24);
    a1[2].n128_u64[1] = *(_QWORD *)(a2 + 40);
    *(__n128 *)((char *)a1 + 24) = result;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    a1[3].n128_u8[0] = 1;
  }
  a1[3].n128_u8[8] = 0;
  a1[5].n128_u8[0] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    result = *(__n128 *)(a2 + 56);
    a1[4].n128_u64[1] = *(_QWORD *)(a2 + 72);
    *(__n128 *)((char *)a1 + 56) = result;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    a1[5].n128_u8[0] = 1;
  }
  a1[5].n128_u8[8] = 0;
  a1[7].n128_u8[0] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    result = *(__n128 *)(a2 + 88);
    a1[6].n128_u64[1] = *(_QWORD *)(a2 + 104);
    *(__n128 *)((char *)a1 + 88) = result;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    a1[7].n128_u8[0] = 1;
  }
  return result;
}

__n128 std::__variant_detail::__alt<7ul,ctb::chatbot::SuggestedActionCalendar>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionCalendar>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  result = (__n128)a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(__n128 *)(a1 + 48) = result;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*((_BYTE *)a2 + 96))
  {
    result = *(__n128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(__n128 *)(a1 + 72) = result;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    result = *(__n128 *)((char *)a2 + 104);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(__n128 *)(a1 + 104) = result;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
  return result;
}

__n128 std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall>(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
  *a1 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  a1[1].n128_u8[8] = 0;
  a1[3].n128_u8[0] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    result = *(__n128 *)(a2 + 24);
    a1[2].n128_u64[1] = *(_QWORD *)(a2 + 40);
    *(__n128 *)((char *)a1 + 24) = result;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    a1[3].n128_u8[0] = 1;
  }
  a1[3].n128_u8[8] = 0;
  a1[5].n128_u8[0] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    result = *(__n128 *)(a2 + 56);
    a1[4].n128_u64[1] = *(_QWORD *)(a2 + 72);
    *(__n128 *)((char *)a1 + 56) = result;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    a1[5].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_2375CBE38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB490);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_2375EAACC();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_2375EAA90();
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2375EAA78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2375EAA60();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2375EAA6C();
  MEMORY[0x24BDAC7A8](v16);
  (*(void (**)(char *, _QWORD))(v18 + 104))((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCE368]);
  v19 = v12;
  v20 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDCE348], v19);
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v22 = v29;
  v21(v11, *MEMORY[0x24BDCE388], v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCE3D0], v28);
  sub_2375EAAC0();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v3, 1, v22);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v3, v22);
    return sub_2375EAA84();
  }
  return result;
}

uint64_t sub_2375CC0AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t *, uint64_t);
  double v44;
  void (*v45)(char *, uint64_t, double);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(char *, uint64_t);
  SIPResourceLists *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD *);
  _QWORD *v58;
  _QWORD v60[3];
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _BYTE v86[32];
  char v87;
  __n128 v88[2];
  std::string v89;
  int v90;
  uint64_t v91;
  __n128 v92[14];
  uint64_t v93;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  v5 = sub_2375EBE1C();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v60[0] = a1;
  v9 = a1 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(_QWORD *)(v7 + 72);
  v61 = &v92[1].n128_i64[1];
  v62 = &v91;
  v82 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v83 = v10;
  v80 = v7;
  v81 = a2;
  v63 = v11;
  v64 = v5;
  do
  {
    v85 = v60;
    v12 = v83;
    MEMORY[0x24BDAC7A8](v5);
    v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = v82;
    v15 = ((uint64_t (*)(char *, uint64_t, uint64_t))v82)(v13, v9, v6);
    v84 = v60;
    MEMORY[0x24BDAC7A8](v15);
    v14(v13, v13, v6);
    v16 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v13, v6);
    if (MEMORY[0x24BE0F250] && v16 == *MEMORY[0x24BE0F250])
    {
      v72 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t))(v7 + 96))(v13, v6);
      v17 = sub_2375EBD98();
      v78 = v60;
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(_QWORD *)(v18 + 64);
      MEMORY[0x24BDAC7A8](v17);
      v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
      v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)v60 - v20, v13, v17);
      v75 = v60;
      MEMORY[0x24BDAC7A8](v21);
      v74 = v18;
      v22 = *(uint64_t (**)(char *, char *, uint64_t))(v18 + 16);
      v76 = (char *)v60 - v20;
      v23 = v22((char *)v60 - v20, (char *)v60 - v20, v17);
      v71 = v60;
      MEMORY[0x24BDAC7A8](v23);
      v73 = (char *)v60 - v20;
      v77 = (_QWORD *)v17;
      v22(v73, v73, v17);
      v68 = sub_2375EBAB0();
      v69 = v60;
      v67 = *(_QWORD *)(v68 - 8);
      MEMORY[0x24BDAC7A8](v68);
      v25 = (char *)v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      v70 = (char *)v60 - v20;
      v26 = sub_2375EBD8C();
      v27 = MEMORY[0x23B815510](v26);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v27, v28, &v89);
      v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB480);
      v65 = v60;
      v30 = *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64);
      MEMORY[0x24BDAC7A8](v29);
      v31 = (char *)v60 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      v66 = v25;
      v32 = sub_2375EBAA4();
      MEMORY[0x24BDAC7A8](v32);
      sub_2375BB3E0((uint64_t)v31, (uint64_t)v31, &qword_2567FB480);
      v33 = sub_2375EBEE8();
      v34 = *(_QWORD *)(v33 - 8);
      v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33);
      if ((_DWORD)v35 == 1)
      {
        memset(v86, 0, sizeof(v86));
        v87 = 1;
      }
      else
      {
        v79 = v4;
        v60[1] = v60;
        v46 = *(_QWORD *)(v34 + 64);
        MEMORY[0x24BDAC7A8](v35);
        v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
        v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 32))((char *)v60 - v47, v31, v33);
        v60[2] = v60;
        MEMORY[0x24BDAC7A8](v48);
        v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 16))((char *)v60 - v47, (char *)v60 - v47, v33);
        v50 = MEMORY[0x23B815954](v49);
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v50, v51, (std::string *)v86);
        v52 = *(void (**)(char *, uint64_t))(v34 + 8);
        v52((char *)v60 - v47, v33);
        ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v88, (__n128 *)v86);
        ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v86);
        ctb::bridging::makeOptional((uint64_t *)v86, (ctb::bridging *)v88, v53);
        v52((char *)v60 - v47, v33);
        v87 = 0;
        v4 = v79;
      }
      sub_2375BB424((uint64_t)v31, &qword_2567FB480);
      v7 = v80;
      if ((v87 & 1) != 0)
      {
        type metadata accessor for std.__1.optional_PostbackData_(0);
        v55 = v54;
        v56 = sub_2375B42FC(&qword_2567FAAC0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_PostbackData_, (uint64_t)&unk_2375F1ECC);
        CxxOptional.init(nilLiteral:)(v55, v56);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
        sub_2375BB424((uint64_t)v86, &qword_2567FB488);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
        std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v88, (__n128 *)v86);
        ctb::chatbot::URIEntry::~URIEntry((void **)v86);
      }
      v6 = v64;
      std::string::basic_string[abi:ne180100](v92, (__n128 *)&v89);
      std::string::~string(&v89);
      std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v61, v88);
      ctb::chatbot::URIEntry::~URIEntry((void **)v88);
      v57 = *(void (**)(char *, _QWORD *))(v74 + 8);
      v58 = v77;
      v57(v70, v77);
      ctb::chatbot::Media::Media((__n128 *)v86, (uint64_t)v92);
      ctb::chatbot::Media::~Media((void **)v92);
      ctb::bridging::makeSuggestedChipVariant((uint64_t)v86, (uint64_t)v92);
      v57(v73, v58);
      v90 = 1;
      std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v62, v92);
      std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v92, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v72, v6);
      v57(v76, v58);
      ctb::chatbot::SuggestedChip::SuggestedChip(v92, &v90);
      ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)&v90, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
      v11 = v63;
    }
    else if (MEMORY[0x24BE0F268] && v16 == *MEMORY[0x24BE0F268])
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v13, v6);
      v36 = sub_2375EBDC8();
      v78 = v60;
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(_QWORD *)(v37 + 64);
      MEMORY[0x24BDAC7A8](v36);
      v39 = (_QWORD *)((char *)v60 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
      v40 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v37 + 32))(v39, v13, v36);
      v77 = v60;
      MEMORY[0x24BDAC7A8](v40);
      v79 = v4;
      v41 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16);
      v42 = v41(v39, v39, v36);
      v76 = (char *)v60;
      MEMORY[0x24BDAC7A8](v42);
      v6 = v64;
      v41(v39, v39, v36);
      v4 = v79;
      sub_2375CFD98(v39, (uint64_t)v86);
      ctb::bridging::makeSuggestedChipVariant((uint64_t)v86, (uint64_t)v92);
      v43 = *(void (**)(uint64_t *, uint64_t))(v37 + 8);
      v43(v39, v36);
      v90 = 2;
      std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v62, v92);
      std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v92, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v13, v6);
      v7 = v80;
      v43((_QWORD *)((char *)v60 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0)), v36);
      v11 = v63;
      ctb::chatbot::SuggestedChip::SuggestedChip(v92, &v90);
      ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)&v90, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    }
    else
    {
      v93 = 0;
      memset(v92, 0, sizeof(v92));
      v44 = ctb::chatbot::SuggestedChip::SuggestedChip((ctb::chatbot::SuggestedChip *)v92);
      v45 = *(void (**)(char *, uint64_t, double))(v7 + 8);
      v45(v13, v6, v44);
      ((void (*)(char *, uint64_t))v45)(v13, v6);
    }
    std::vector<ctb::chatbot::MenuL2Content>::push_back[abi:ne180100](v81, v92);
    ctb::chatbot::SuggestedChip::~SuggestedChip((ctb::chatbot::SuggestedChip *)v92);
    v9 += v11;
    --v4;
  }
  while (v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375CC8D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(char *, char *);
  uint64_t v30;
  uint64_t (*v31)(char *, char *, uint64_t *);
  uint64_t *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t *);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  __n128 MenuL0Variant;
  double v48;
  void (*v49)(uint64_t, uint64_t, double);
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  __n128 v57;
  __n128 v58[13];
  __n128 v59;
  std::string v60[10];

  v4 = sub_2375EBDEC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x24BE0F1E0] && v8 == *MEMORY[0x24BE0F1E0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EBD98();
    v55 = &v50;
    v10 = *(_QWORD **)(v9 - 8);
    v11 = v10[8];
    MEMORY[0x24BDAC7A8](v9);
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (uint64_t (*)(char *, char *, uint64_t))v10[4];
    v52 = (char *)&v50 - v12;
    v14 = v7;
    v16 = v15;
    v17 = v13((char *)&v50 - v12, v14, v15);
    v54 = (char *)&v50;
    MEMORY[0x24BDAC7A8](v17);
    v56 = a1;
    v18 = (uint64_t (*)(void))v10[2];
    v53 = (uint64_t *)v5;
    v19 = v18();
    v51 = &v50;
    MEMORY[0x24BDAC7A8](v19);
    ((void (*)(char *, char *, uint64_t))v18)((char *)&v50 - v12, (char *)&v50 - v12, v16);
    v20 = sub_2375EBAB0();
    MEMORY[0x24BDAC7A8](v20);
    v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EBD8C();
    sub_2375CE7C0((uint64_t)v22, (__n128 *)v60);
    v23 = (void (*)(char *, uint64_t))v10[1];
    v23((char *)&v50 - v12, v16);
    ctb::chatbot::Media::Media(&v57, (uint64_t)v60);
    ctb::chatbot::Media::~Media((void **)&v60[0].__r_.__value_.__l.__data_);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    v23((char *)&v50 - v12, v16);
    v57.n128_u32[0] = 1;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    ((void (*)(uint64_t, uint64_t))v53[1])(v56, v4);
    v23(v52, v16);
    *(_DWORD *)a2 = 1;
    v24 = a2 + 8;
LABEL_11:
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v24, (uint64_t)v60, (void (*)(void))std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__move_constructor);
    return std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  if (MEMORY[0x24BE0F1F0] && v8 == *MEMORY[0x24BE0F1F0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v25 = sub_2375EBDC8();
    v55 = &v50;
    v26 = *(_QWORD **)(v25 - 8);
    v51 = (uint64_t *)v25;
    v27 = v26[8];
    MEMORY[0x24BDAC7A8](v25);
    v56 = a1;
    v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    v29 = (uint64_t (*)(char *, char *))v26[4];
    v54 = (char *)&v50 - v28;
    v30 = v29((char *)&v50 - v28, v7);
    v53 = &v50;
    MEMORY[0x24BDAC7A8](v30);
    v31 = (uint64_t (*)(char *, char *, uint64_t *))v26[2];
    v32 = v51;
    v33 = v31((char *)&v50 - v28, (char *)&v50 - v28, v51);
    v52 = (char *)&v50;
    MEMORY[0x24BDAC7A8](v33);
    v31((char *)&v50 - v28, (char *)&v50 - v28, v32);
    sub_2375CFD98((uint64_t *)((char *)&v50 - v28), (uint64_t)&v57);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    v34 = (void (*)(char *, uint64_t *))v26[1];
    v34((char *)&v50 - v28, v32);
    v57.n128_u32[0] = 2;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v56, v4);
    v34(v54, v32);
    v35 = 1;
LABEL_10:
    *(_DWORD *)a2 = v35;
    v24 = a2 + 8;
    goto LABEL_11;
  }
  if (MEMORY[0x24BE0F200] && v8 == *MEMORY[0x24BE0F200])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v36 = sub_2375EBE34();
    v55 = &v50;
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(_QWORD *)(v37 + 64);
    MEMORY[0x24BDAC7A8](v36);
    v56 = a1;
    v39 = (char *)&v50 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 32))(v39, v7, v36);
    v54 = (char *)&v50;
    MEMORY[0x24BDAC7A8](v40);
    v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 16))(v39, v39, v36);
    v42 = MEMORY[0x23B815888](v41);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v42, v43, v60);
    v44 = sub_2375EBDF8();
    sub_2375CC0AC(v44, (uint64_t *)&v59);
    v45 = *(void (**)(char *, uint64_t))(v37 + 8);
    v45(v39, v36);
    std::string::basic_string[abi:ne180100](&v57, (__n128 *)v60);
    std::string::~string(v60);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v58, &v59);
    std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v59, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100]);
    MenuL0Variant = ctb::bridging::makeMenuL0Variant((uint64_t)&v57, (uint64_t)v60);
    (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v56, v4, MenuL0Variant);
    v45(v39, v36);
    v35 = 2;
    goto LABEL_10;
  }
  *(_QWORD *)(a2 + 240) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v48 = ctb::chatbot::MenuL0Content::MenuL0Content(a2);
  v49 = *(void (**)(uint64_t, uint64_t, double))(v5 + 8);
  v49(a1, v4, v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v7, v4);
}

uint64_t sub_2375CCEB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _QWORD v14[2];
  _DWORD v15[62];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  v5 = sub_2375EBDEC();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14[1] = a1;
  v9 = a1 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(_QWORD *)(v7 + 72);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  do
  {
    MEMORY[0x24BDAC7A8](v5);
    v12((char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v6);
    sub_2375CC8D0((uint64_t)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v15);
    std::vector<ctb::chatbot::MenuL1Content>::push_back[abi:ne180100](a2, v15);
    v5 = ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)v15, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
    v9 += v11;
    --v4;
  }
  while (v4);
  return swift_bridgeObjectRelease();
}

void sub_2375CCFF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, uint64_t);
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 v29[2];
  __n128 v30[2];
  std::string v31;
  std::string v32;
  std::string v33;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v4);
  v28 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2375EAA9C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2375EAAB4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB9F0();
  sub_2375CBE38((uint64_t)v9);
  v14 = sub_2375EAA54();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, v10);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v16, &v33);
  sub_2375EB9E4();
  sub_2375CBE38((uint64_t)v9);
  v19 = sub_2375EAA54();
  v21 = v20;
  v17(v9, v6);
  v18(v13, v10);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v21, &v32);
  v22 = sub_2375EB9D8();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v22, v23, &v31);
  v24 = sub_2375EB9C0();
  sub_2375D1F48(v24, v25, (uint64_t)v30);
  v26 = (uint64_t)v28;
  sub_2375EB9CC();
  sub_2375D2014(v26, (uint64_t)v29);
  v27 = sub_2375EB9FC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v33);
  std::string::~string(&v33);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v32);
  std::string::~string(&v32);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v31);
  std::string::~string(&v31);
  std::optional<std::string>::optional[abi:ne180100](a2 + 72, v30);
  ctb::chatbot::URIEntry::~URIEntry((void **)v30);
  std::optional<std::string>::optional[abi:ne180100](a2 + 104, v29);
  ctb::chatbot::URIEntry::~URIEntry((void **)v29);
}

void sub_2375CD240(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  void (*v15)(uint64_t, uint64_t, double);
  _QWORD v16[2];
  __int128 v17[9];

  v4 = sub_2375EBA08();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x24BE0EB48] && v8 == *MEMORY[0x24BE0EB48])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EB9FC();
    v16[1] = v16;
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))((char *)v16 - v12, v7, v9);
    v16[0] = v16;
    MEMORY[0x24BDAC7A8](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v16 - v12, (char *)v16 - v12, v9);
    sub_2375CCFF0((uint64_t)v16 - v12, (uint64_t)v17);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))((char *)v16 - v12, v9);
    std::__variant_detail::__alt<7ul,ctb::chatbot::SuggestedActionCalendar>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionCalendar>(a2, v17);
    ctb::chatbot::CreateCalendarEvent::~CreateCalendarEvent((void **)v17);
  }
  else
  {
    *(_QWORD *)(a2 + 128) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v14 = ctb::chatbot::SuggestedActionCalendar::SuggestedActionCalendar((ctb::chatbot::SuggestedActionCalendar *)a2);
    v15 = *(void (**)(uint64_t, uint64_t, double))(v5 + 8);
    v15(a1, v4, v14);
    ((void (*)(char *, uint64_t))v15)(v7, v4);
  }
}

void sub_2375CD428(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  char v34;
  std::string v35;
  std::string v36;

  v4 = sub_2375EAA18();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4A8);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2375EC0BC();
  MEMORY[0x24BDAC7A8](v11);
  sub_2375BB3E0((uint64_t)v10, (uint64_t)v10, &qword_2567FB4A8);
  v12 = sub_2375EC0B0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
  if ((_DWORD)v14 == 1)
  {
    v15 = 0;
  }
  else
  {
    v31 = v5;
    v32 = v4;
    v30[1] = v30;
    v16 = *(_QWORD *)(v13 + 64);
    MEMORY[0x24BDAC7A8](v14);
    v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v17, v10, v12);
    v30[0] = v30;
    MEMORY[0x24BDAC7A8](v18);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v17, v12);
    v19 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v17, v12);
    if (MEMORY[0x24BE0F6B0] && v19 == *MEMORY[0x24BE0F6B0])
    {
      v15 = 1;
      v5 = v31;
      v4 = v32;
    }
    else
    {
      v5 = v31;
      v4 = v32;
      if (MEMORY[0x24BE0F6B8] && v19 == *MEMORY[0x24BE0F6B8])
      {
        v15 = 2;
      }
      else if (MEMORY[0x24BE0F6C0] && v19 == *MEMORY[0x24BE0F6C0])
      {
        v15 = 3;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
        v15 = 0;
      }
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  }
  v20 = sub_2375BB424((uint64_t)v10, &qword_2567FB4A8);
  MEMORY[0x23B815B1C](v20);
  v21 = sub_2375EAA00();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v21, v23, &v36);
  v24 = sub_2375EC080();
  if (!v25)
  {
    memset(&v33, 0, sizeof(v33));
    v34 = 1;
    goto LABEL_18;
  }
  v26 = v24;
  v27 = v25;
  swift_bridgeObjectRetain();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v26, v27, &v33);
  v34 = 0;
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
  {
LABEL_18:
    memset(&v35, 0, sizeof(v35));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v35);
    v29 = sub_2375EC0C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
    sub_2375BB424((uint64_t)&v33, &qword_2567FB3D8);
    goto LABEL_19;
  }
  v28 = sub_2375EC0C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
  std::string::basic_string[abi:ne180100]((__n128 *)&v35, (__n128 *)&v33);
  std::string::~string(&v33);
LABEL_19:
  *(_DWORD *)a2 = v15;
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 8), (__n128 *)&v36);
  std::string::~string(&v36);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 32), (__n128 *)&v35);
  std::string::~string(&v35);
}

void sub_2375CD7B4(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  SIPResourceLists *v49;
  uint64_t *Optional;
  std::string::size_type v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  __int128 v63;
  uint64_t *v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  __n128 v67[2];
  __n128 v68[2];
  std::string v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  GeoPushLocation v73;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v4);
  v66 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2375EC050();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  sub_2375EBFD8();
  v9 = sub_2375EC038();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EC044();
  v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
  if (MEMORY[0x24BE0F5B0] && v14 == *MEMORY[0x24BE0F5B0])
  {
    v65 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
    v15 = sub_2375EC008();
    v64 = &v59;
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(_QWORD *)(v16 + 64);
    MEMORY[0x24BDAC7A8](v15);
    v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v18, v12, v15);
    MEMORY[0x24BDAC7A8](v19);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v18, v15);
    sub_2375EBFF0();
    v21 = v20;
    sub_2375EBFFC();
    v23 = v22;
    v24 = *(void (**)(char *, uint64_t))(v16 + 8);
    v24(v18, v15);
    v73.fLatitude = v21;
    v73.fLongitude = v23;
    ctb::bridging::makeOptional(v73, (uint64_t)&v69);
    v63 = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
    v62 = v69.__r_.__value_.__r.__words[2];
    type metadata accessor for std.__1.optional_SuggestedActionShowQuery_(0);
    v26 = v25;
    v27 = sub_2375B42FC(&qword_2567FAAC8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedActionShowQuery_, (uint64_t)&unk_2375F1EE8);
    v28 = CxxOptional.init(nilLiteral:)(v26, v27);
    MEMORY[0x24BDAC7A8](v28);
    sub_2375EBFD8();
    v29 = sub_2375EC02C();
    v31 = v30;
    v65((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    sub_2375D1F48(v29, v31, (uint64_t)v68);
    v32 = (uint64_t)v66;
    sub_2375EBFCC();
    sub_2375D2014(v32, (uint64_t)v67);
    v33 = sub_2375EBFE4();
    (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    v24(v18, v15);
    *(_QWORD *)(a2 + 16) = v62;
    *(_OWORD *)a2 = v63;
    v34 = a2 + 24;
LABEL_7:
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v34, (__n128 *)&v69);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v69.__r_.__value_.__l.__data_);
    std::optional<std::string>::optional[abi:ne180100](a2 + 56, v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)v68);
    std::optional<std::string>::optional[abi:ne180100](a2 + 88, v67);
    ctb::chatbot::URIEntry::~URIEntry((void **)v67);
    return;
  }
  if (MEMORY[0x24BE0F5C0] && v14 == *MEMORY[0x24BE0F5C0])
  {
    v62 = a1;
    v65 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
    v35 = sub_2375EC020();
    v64 = &v59;
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(_QWORD *)(v36 + 64);
    MEMORY[0x24BDAC7A8](v35);
    v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)&v59 - v38, v12, v35);
    type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_(0);
    v40 = v39;
    v41 = sub_2375B42FC(&qword_2567FAAD0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_, (uint64_t)&unk_2375F1F04);
    v42 = CxxOptional.init(nilLiteral:)(v40, v41);
    v61 = v72;
    v60 = v71;
    v59 = v70;
    MEMORY[0x24BDAC7A8](v42);
    v43 = *(uint64_t (**)(char *, char *, uint64_t))(v36 + 16);
    *(_QWORD *)&v63 = (char *)&v59 - v38;
    v44 = v35;
    v45 = v43((char *)&v59 - v38, (char *)&v59 - v38, v35);
    v46 = MEMORY[0x23B815A8C](v45);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, &v69);
    v48 = *(void (**)(char *, uint64_t))(v36 + 8);
    v48((char *)&v59 - v38, v35);
    std::string::basic_string[abi:ne180100](v68, (__n128 *)&v69);
    std::string::~string(&v69);
    Optional = ctb::bridging::makeOptional((uint64_t *)&v69, (ctb::bridging *)v68, v49);
    MEMORY[0x24BDAC7A8](Optional);
    v51 = v62;
    sub_2375EBFD8();
    v52 = sub_2375EC02C();
    v54 = v53;
    v65((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    sub_2375D1F48(v52, v54, (uint64_t)v68);
    v55 = (uint64_t)v66;
    sub_2375EBFCC();
    sub_2375D2014(v55, (uint64_t)v67);
    v56 = sub_2375EBFE4();
    (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v51, v56);
    v48((char *)v63, v44);
    v57 = v60;
    *(_QWORD *)a2 = v59;
    *(_QWORD *)(a2 + 8) = v57;
    v34 = a2 + 24;
    *(_QWORD *)(a2 + 16) = v61;
    goto LABEL_7;
  }
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  ctb::chatbot::SuggestedActionShowLocation::SuggestedActionShowLocation((_BYTE *)a2);
  v58 = sub_2375EBFE4();
  (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(a1, v58);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_2375CDDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  __n128 SuggestedActionVariant;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  void (*v32)(char *, char *, _QWORD *);
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  void (*v42)(uint64_t, uint64_t, double);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  void (*v56)(char *, _QWORD *);
  __n128 v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  char v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t (*v83)(char *, _QWORD *);
  __n128 v84;
  _QWORD *v85;
  uint64_t (*v86)(char *, _QWORD *);
  double v87;
  uint64_t v88;
  _QWORD v89[2];
  void (*v90)(char *, uint64_t, uint64_t);
  int v91;
  void (*v92)(char *, uint64_t);
  _QWORD *v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  void (*v99)(char *, char *, _QWORD *);
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::string v104;
  __n128 v105;
  __n128 v106;
  std::string v107[6];
  __n128 v108[4];

  v103 = a1;
  v5 = sub_2375EB984();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (MEMORY[0x24BE0EA88] && v9 == *MEMORY[0x24BE0EA88])
  {
    (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
    v10 = sub_2375EB948();
    v99 = (void (*)(char *, char *, _QWORD *))v5;
    v100 = v89;
    v11 = *(_QWORD *)(v10 - 8);
    v101 = v6;
    v12 = *(_QWORD *)(v11 + 64);
    MEMORY[0x24BDAC7A8](v10);
    v102 = a2;
    v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v89 - v13, v8, v10);
    v14 = sub_2375EBAB0();
    v98 = *(_QWORD *)(v14 - 8);
    MEMORY[0x24BDAC7A8](v14);
    v16 = (char *)v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v103, v14);
    sub_2375CE7C0((uint64_t)v16, v108);
    MEMORY[0x24BDAC7A8](v18);
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))((char *)v89 - v13, (char *)v89 - v13, v10);
    v20 = MEMORY[0x23B8153A8](v19);
    v22 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v20, v21, v107);
    v23 = MEMORY[0x23B8153B4](v22);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v23, v24, &v104);
    v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    v25((char *)v89 - v13, v10);
    std::string::basic_string[abi:ne180100](&v105, (__n128 *)v107);
    std::string::~string(v107);
    std::string::basic_string[abi:ne180100](&v106, (__n128 *)&v104);
    std::string::~string(&v104);
    SuggestedActionVariant = ctb::bridging::makeSuggestedActionVariant((uint64_t)&v105, (uint64_t)v107);
    (*(void (**)(uint64_t, void (*)(char *, char *, _QWORD *), __n128))(v101 + 8))(v102, v99, SuggestedActionVariant);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v103, v14);
    v25((char *)v89 - v13, v10);
    *(_DWORD *)a3 = 3;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v108);
    ctb::chatbot::Media::~Media((void **)v108);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v107);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v107);
  }
  if (!MEMORY[0x24BE0EA98] || v9 != *MEMORY[0x24BE0EA98])
  {
    *(_QWORD *)(a3 + 208) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    v41 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    v42 = *(void (**)(uint64_t, uint64_t, double))(v6 + 8);
    v42(a2, v5, v41);
    v43 = sub_2375EBAB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v103, v43);
    return ((uint64_t (*)(char *, uint64_t))v42)(v8, v5);
  }
  v101 = v6;
  v102 = a2;
  (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
  v28 = sub_2375EB978();
  v95 = v89;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = v31;
  v32 = (void (*)(char *, char *, _QWORD *))v31[2];
  v100 = v33;
  v98 = v29;
  v99 = v32;
  ((void (*)(char *, char *))v32)(v30, v8);
  v34 = sub_2375EB960();
  v97 = v89;
  v35 = *(_QWORD **)(v34 - 8);
  v36 = v35[8];
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)v89 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = v30;
  v38 = sub_2375EB96C();
  v92 = (void (*)(char *, uint64_t))v89;
  v89[0] = v36;
  MEMORY[0x24BDAC7A8](v38);
  v39 = *MEMORY[0x24BE0EA38];
  v96 = v35;
  v90 = (void (*)(char *, uint64_t, uint64_t))v35[13];
  v90(v37, v39, v34);
  v40 = sub_2375B42FC(&qword_2567FB498, (uint64_t (*)(uint64_t))MEMORY[0x24BE0EA48], MEMORY[0x24BE0EA58]);
  sub_2375EC2C0();
  v89[1] = v40;
  sub_2375EC2C0();
  if (*(_OWORD *)&v107[0].__r_.__value_.__l.__data_ == *(_OWORD *)v108)
    v91 = 1;
  else
    v91 = sub_2375EC488();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = (void (*)(char *, uint64_t))v96[1];
  v44(v37, v34);
  v44(v37, v34);
  if ((v91 & 1) != 0)
  {
    v45 = sub_2375EBAB0();
    v46 = *(_QWORD *)(v45 - 8);
    MEMORY[0x24BDAC7A8](v45);
    v48 = (char *)v89 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v48, v103, v45);
    sub_2375CE7C0((uint64_t)v48, v108);
    v97 = v89;
    MEMORY[0x24BDAC7A8](v49);
    v51 = (char *)v89 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    v52 = v94;
    v53 = v100;
    v99(v51, v94, v100);
    v54 = sub_2375EB954();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v54, v55, v107);
    v56 = (void (*)(char *, _QWORD *))v93[1];
    v56(v51, v53);
    std::string::basic_string[abi:ne180100](&v105, (__n128 *)v107);
    std::string::~string(v107);
    v57 = ctb::bridging::makeSuggestedActionVariant(&v105, (uint64_t)v107);
    (*(void (**)(uint64_t, uint64_t, __n128))(v101 + 8))(v102, v5, v57);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v103, v45);
    v56(v52, v53);
    *(_DWORD *)a3 = 4;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v108);
    ctb::chatbot::Media::~Media((void **)v108);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v107);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v107);
    return ((uint64_t (*)(char *, _QWORD *))v56)(v8, v53);
  }
  v92 = v44;
  v58 = v100;
  v97 = (_QWORD *)v93[1];
  v59 = ((uint64_t (*)(char *, _QWORD *))v97)(v94, v100);
  v96 = v89;
  MEMORY[0x24BDAC7A8](v59);
  v61 = (char *)v89 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = ((uint64_t (*)(char *, char *, _QWORD *))v99)(v61, v8, v58);
  v94 = (char *)v89;
  v63 = v89[0];
  MEMORY[0x24BDAC7A8](v62);
  v64 = (char *)v89 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = v61;
  v65 = sub_2375EB96C();
  v93 = v89;
  MEMORY[0x24BDAC7A8](v65);
  v90(v64, *MEMORY[0x24BE0EA40], v34);
  sub_2375EC2C0();
  sub_2375EC2C0();
  if (*(_OWORD *)&v107[0].__r_.__value_.__l.__data_ == *(_OWORD *)v108)
  {
    swift_bridgeObjectRelease_n();
    v66 = v92;
    v92(v64, v34);
    v66(v64, v34);
LABEL_15:
    v70 = sub_2375EBAB0();
    v71 = *(_QWORD *)(v70 - 8);
    MEMORY[0x24BDAC7A8](v70);
    v73 = (char *)v89 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
    v74 = v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v73, v103, v70);
    sub_2375CE7C0((uint64_t)v73, v108);
    v94 = (char *)v89;
    MEMORY[0x24BDAC7A8](v75);
    v77 = (char *)v89 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
    v78 = (char *)v95;
    v79 = v100;
    v99(v77, (char *)v95, v100);
    v80 = sub_2375EB954();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v80, v81, v107);
    v82 = v77;
    v83 = (uint64_t (*)(char *, _QWORD *))v97;
    ((void (*)(char *, _QWORD *))v97)(v82, v79);
    std::string::basic_string[abi:ne180100](&v105, (__n128 *)v107);
    std::string::~string(v107);
    v84 = ctb::bridging::makeSuggestedActionVariant(&v105, (uint64_t)v107);
    (*(void (**)(uint64_t, uint64_t, __n128))(v101 + 8))(v102, v5, v84);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v74, v70);
    v83(v78, v79);
    *(_DWORD *)a3 = 5;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v108);
    ctb::chatbot::Media::~Media((void **)v108);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v107);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v107);
    return v83(v8, v79);
  }
  v67 = sub_2375EC488();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = v92;
  v92(v64, v34);
  v68(v64, v34);
  v69 = v102;
  if ((v67 & 1) != 0)
    goto LABEL_15;
  v85 = v100;
  v86 = (uint64_t (*)(char *, _QWORD *))v97;
  ((void (*)(char *, _QWORD *))v97)((char *)v95, v100);
  *(_QWORD *)(a3 + 208) = 0;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v87 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
  (*(void (**)(uint64_t, uint64_t, double))(v101 + 8))(v69, v5, v87);
  v88 = sub_2375EBAB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v103, v88);
  return v86(v8, v85);
}

void sub_2375CE7C0(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(char *, uint64_t);
  SIPResourceLists *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  _BYTE v27[32];
  char v28;
  __n128 v29[2];
  std::string v30;

  v4 = MEMORY[0x23B815510]();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v30);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB480);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2375EBAA4();
  MEMORY[0x24BDAC7A8](v9);
  sub_2375BB3E0((uint64_t)v8, (uint64_t)v8, &qword_2567FB480);
  v10 = sub_2375EBEE8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  if ((_DWORD)v12 == 1)
  {
    memset(v27, 0, sizeof(v27));
    v28 = 1;
  }
  else
  {
    v26[1] = v26;
    v13 = *(_QWORD *)(v11 + 64);
    MEMORY[0x24BDAC7A8](v12);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))((char *)v26 - v14, v8, v10);
    MEMORY[0x24BDAC7A8](v15);
    v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))((char *)v26 - v14, (char *)v26 - v14, v10);
    v17 = MEMORY[0x23B815954](v16);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v17, v18, (std::string *)v27);
    v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19((char *)v26 - v14, v10);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v29, (__n128 *)v27);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v27);
    ctb::bridging::makeOptional((uint64_t *)v27, (ctb::bridging *)v29, v20);
    v19((char *)v26 - v14, v10);
    v28 = 0;
  }
  sub_2375BB424((uint64_t)v8, &qword_2567FB480);
  if ((v28 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_PostbackData_(0);
    v22 = v21;
    v23 = sub_2375B42FC(&qword_2567FAAC0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_PostbackData_, (uint64_t)&unk_2375F1ECC);
    CxxOptional.init(nilLiteral:)(v22, v23);
    v24 = sub_2375EBAB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
    sub_2375BB424((uint64_t)v27, &qword_2567FB488);
  }
  else
  {
    v25 = sub_2375EBAB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a1, v25);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v29, (__n128 *)v27);
    ctb::chatbot::URIEntry::~URIEntry((void **)v27);
  }
  std::string::basic_string[abi:ne180100](a2, (__n128 *)&v30);
  std::string::~string(&v30);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)&a2[1].n128_i64[1], v29);
  ctb::chatbot::URIEntry::~URIEntry((void **)v29);
}

uint64_t sub_2375CEA78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  void (*v19)(char *, uint64_t *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  void (*v32)(uint64_t, uint64_t, double);
  uint64_t v33;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  __n128 SuggestedActionVariant;
  void (*v47)(uint64_t *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(uint64_t *, uint64_t);
  char v57;
  void (*v58)(uint64_t *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void (*v72)(uint64_t *, uint64_t);
  __n128 v73;
  uint64_t (*v74)(char *, uint64_t);
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, _QWORD, uint64_t);
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t *, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  __n128 v98[3];
  std::string v99[6];
  __n128 v100[4];

  v6 = sub_2375EAA18();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2375EC0D4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (MEMORY[0x24BE0F710] && v14 == *MEMORY[0x24BE0F710])
  {
    v80 = v9;
    v81 = v7;
    v82 = v6;
    v89 = a2;
    v95 = a1;
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    v15 = sub_2375EC0C8();
    v88 = &v78;
    MEMORY[0x24BDAC7A8](v15);
    v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v87 = v18;
    v19 = (void (*)(char *, uint64_t *, uint64_t))v18[2];
    v96 = v13;
    v97 = v20;
    v93 = v16;
    v94 = v19;
    ((void (*)(char *, char *))v19)(v17, v13);
    v21 = sub_2375EC08C();
    v92 = &v78;
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(_QWORD *)(v22 + 64);
    MEMORY[0x24BDAC7A8](v21);
    v24 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    v86 = (uint64_t *)v17;
    v25 = sub_2375EC098();
    v90 = &v78;
    v85 = v23;
    MEMORY[0x24BDAC7A8](v25);
    v26 = *MEMORY[0x24BE0F668];
    v91 = v22;
    v27 = *(void (**)(char *, _QWORD, uint64_t))(v22 + 104);
    v28 = v21;
    v84 = v27;
    v27(v24, v26, v21);
    v29 = sub_2375B42FC(&qword_2567FB4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BE0F678], MEMORY[0x24BE0F688]);
    sub_2375EC2C0();
    v83 = v29;
    sub_2375EC2C0();
    if (v99[0].__r_.__value_.__r.__words[0] == v100[0].n128_u64[0]
      && v99[0].__r_.__value_.__l.__size_ == v100[0].n128_u64[1])
    {
      v30 = 1;
    }
    else
    {
      v30 = sub_2375EC488();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v91 + 8);
    v35(v24, v28);
    v35(v24, v28);
    if ((v30 & 1) != 0)
    {
      v36 = sub_2375EBAB0();
      v37 = *(_QWORD *)(v36 - 8);
      MEMORY[0x24BDAC7A8](v36);
      v39 = (char *)&v78 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      v40 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v39, v95, v36);
      sub_2375CE7C0((uint64_t)v39, v100);
      v92 = &v78;
      MEMORY[0x24BDAC7A8](v41);
      v43 = (char *)&v78 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      v44 = v86;
      v45 = v97;
      v94(v43, v86, v97);
      sub_2375CD428((uint64_t)v43, (uint64_t)v98);
      SuggestedActionVariant = ctb::bridging::makeSuggestedActionVariant((uint64_t)v98, (uint64_t)v99);
      (*(void (**)(uint64_t, uint64_t, __n128))(v11 + 8))(v89, v10, SuggestedActionVariant);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v40, v36);
      v47 = (void (*)(uint64_t *, uint64_t))v87[1];
      v47(v44, v45);
      *(_DWORD *)a3 = 1;
      ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v100);
      ctb::chatbot::Media::~Media((void **)v100);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v99);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v99);
      return ((uint64_t (*)(char *, uint64_t))v47)(v96, v45);
    }
    v79 = (void (*)(uint64_t *, uint64_t))v35;
    v48 = v97;
    v91 = v87[1];
    v49 = ((uint64_t (*)(uint64_t *, uint64_t))v91)(v86, v97);
    v90 = &v78;
    MEMORY[0x24BDAC7A8](v49);
    v51 = (char *)&v78 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    v52 = ((uint64_t (*)(char *, char *, uint64_t))v94)(v51, v96, v48);
    v88 = &v78;
    v53 = v85;
    MEMORY[0x24BDAC7A8](v52);
    v92 = (uint64_t *)v51;
    v54 = sub_2375EC098();
    v86 = &v78;
    MEMORY[0x24BDAC7A8](v54);
    v55 = (char *)&v78 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    v84(v55, *MEMORY[0x24BE0F658], v28);
    v87 = (uint64_t *)v55;
    sub_2375EC2C0();
    sub_2375EC2C0();
    if (v99[0].__r_.__value_.__r.__words[0] == v100[0].n128_u64[0]
      && v99[0].__r_.__value_.__l.__size_ == v100[0].n128_u64[1])
    {
      swift_bridgeObjectRelease_n();
      v56 = v79;
      v79((uint64_t *)v55, v28);
      v56(v87, v28);
LABEL_16:
      v59 = sub_2375EBAB0();
      v60 = *(_QWORD *)(v59 - 8);
      v88 = (uint64_t *)v59;
      MEMORY[0x24BDAC7A8](v59);
      v62 = (char *)&v78 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t))(v60 + 16))(v62, v95);
      sub_2375CE7C0((uint64_t)v62, v100);
      v87 = &v78;
      MEMORY[0x24BDAC7A8](v63);
      v65 = (char *)&v78 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
      v66 = v97;
      v67 = ((uint64_t (*)(char *, uint64_t *, uint64_t))v94)(v65, v92, v97);
      v68 = v80;
      MEMORY[0x23B815B1C](v67);
      v69 = sub_2375EAA00();
      v71 = v70;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v68, v82);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v69, v71, v99);
      v72 = (void (*)(uint64_t *, uint64_t))v91;
      ((void (*)(char *, uint64_t))v91)(v65, v66);
      std::string::basic_string[abi:ne180100](v98, (__n128 *)v99);
      std::string::~string(v99);
      v73 = ctb::bridging::makeSuggestedActionVariant(v98, (uint64_t)v99);
      (*(void (**)(uint64_t, uint64_t, __n128))(v11 + 8))(v89, v10, v73);
      (*(void (**)(uint64_t, uint64_t *))(v60 + 8))(v95, v88);
      v72(v92, v66);
      *(_DWORD *)a3 = 2;
      ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v100);
      ctb::chatbot::Media::~Media((void **)v100);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v99);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v99);
      return ((uint64_t (*)(char *, uint64_t))v72)(v96, v66);
    }
    v57 = sub_2375EC488();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = v79;
    v79((uint64_t *)v55, v28);
    v58(v87, v28);
    if ((v57 & 1) != 0)
      goto LABEL_16;
    v74 = (uint64_t (*)(char *, uint64_t))v91;
    v75 = v97;
    ((void (*)(uint64_t *, uint64_t))v91)(v92, v97);
    *(_QWORD *)(a3 + 208) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    v76 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    (*(void (**)(uint64_t, uint64_t, double))(v11 + 8))(v89, v10, v76);
    v77 = sub_2375EBAB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v95, v77);
    return v74(v96, v75);
  }
  else
  {
    *(_QWORD *)(a3 + 208) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    v31 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    v32 = *(void (**)(uint64_t, uint64_t, double))(v11 + 8);
    v32(a2, v10, v31);
    v33 = sub_2375EBAB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    return ((uint64_t (*)(char *, uint64_t))v32)(v13, v10);
  }
}

uint64_t sub_2375CF2D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  void (*v32)(uint64_t, uint64_t, double);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __n128 v40[7];
  _BYTE v41[152];
  __n128 v42[4];

  v6 = sub_2375EC05C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (MEMORY[0x24BE0F528] && v10 == *MEMORY[0x24BE0F528])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    v11 = sub_2375EBFE4();
    v39 = &v34;
    v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
    v35 = *(_QWORD *)(v11 - 8);
    MEMORY[0x24BDAC7A8](v11);
    v36 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (char *)&v34 - v36;
    v15 = v9;
    v17 = v16;
    (*(void (**)(char *, char *))(v14 + 32))((char *)&v34 - v36, v15);
    v18 = sub_2375EBAB0();
    v34 = (uint64_t)&v34;
    v19 = *(_QWORD *)(v18 - 8);
    v38 = v18;
    MEMORY[0x24BDAC7A8](v18);
    v21 = a1;
    v37 = a1;
    v22 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v19 + 16))(v22, v21);
    sub_2375CE7C0((uint64_t)v22, v42);
    v34 = (uint64_t)&v34;
    MEMORY[0x24BDAC7A8](v23);
    v24 = v35;
    v25 = (char *)&v34 - v36;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)&v34 - v36, v13, v17);
    sub_2375CD7B4((std::string::size_type)v25, (uint64_t)v40);
    ctb::bridging::makeSuggestedActionVariant((uint64_t)v40, (uint64_t)v41);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v17);
    *(_DWORD *)a3 = 6;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v42);
    ctb::chatbot::Media::~Media((void **)v42);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v41);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v41);
  }
  else if (MEMORY[0x24BE0F540] && v10 == *MEMORY[0x24BE0F540])
  {
    v27 = sub_2375EBAB0();
    v28 = *(_QWORD *)(v27 - 8);
    MEMORY[0x24BDAC7A8](v27);
    v30 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, a1, v27);
    sub_2375CE7C0((uint64_t)v30, v40);
    v41[0] = 1;
    ctb::bridging::makeSuggestedActionVariant(1, (uint64_t)v41);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, v27);
    *(_DWORD *)a3 = 7;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v40);
    ctb::chatbot::Media::~Media((void **)v40);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v41);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v41);
  }
  else
  {
    *(_QWORD *)(a3 + 208) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    v31 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    v32 = *(void (**)(uint64_t, uint64_t, double))(v7 + 8);
    v32(a2, v6, v31);
    v33 = sub_2375EBAB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    return ((uint64_t (*)(char *, uint64_t))v32)(v9, v6);
  }
}

uint64_t sub_2375CF678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *);
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(char *, uint64_t);
  __n128 *v55;
  uint64_t v56;
  __n128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  __n128 *v77;
  double v79;
  void (*v80)(uint64_t, uint64_t, double);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  std::string v91;
  std::string v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  _BYTE v97[32];
  __n128 v98[10];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2375EB918();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
  if (MEMORY[0x24BE0E8E0] && v13 == *MEMORY[0x24BE0E8E0])
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
    v14 = sub_2375EB8DC();
    v88 = &v82;
    v89 = v8;
    v15 = *(_QWORD *)(v14 - 8);
    v83 = (char *)v14;
    v90 = a2;
    v16 = *(_QWORD *)(v15 + 64);
    MEMORY[0x24BDAC7A8](v14);
    v86 = a1;
    v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    v84 = (char *)&v82 - v17;
    (*(void (**)(void))(v15 + 32))();
    v18 = sub_2375EBAB0();
    v19 = *(_QWORD *)(v18 - 8);
    v85 = v18;
    v87 = v19;
    MEMORY[0x24BDAC7A8](v18);
    v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v22 + 16))(v21, a1);
    sub_2375CE7C0((uint64_t)v21, &v93);
    MEMORY[0x24BDAC7A8](v23);
    v24 = (char *)&v82 - v17;
    v25 = (char *)&v82 - v17;
    v27 = v83;
    v26 = v84;
    v28 = (*(uint64_t (**)(char *, char *, char *))(v15 + 16))(v25, v84, v83);
    v29 = MEMORY[0x23B81533C](v28);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v29, v30, &v91);
    v31 = (uint64_t)v89;
    sub_2375EB8D0();
    sub_2375D2014(v31, (uint64_t)v98);
    v32 = *(void (**)(char *, char *))(v15 + 8);
    v32(v24, v27);
    std::string::basic_string[abi:ne180100](&v96, (__n128 *)&v91);
    std::string::~string(&v91);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)v97, v98);
    ctb::chatbot::URIEntry::~URIEntry((void **)v98);
    ctb::bridging::makeSuggestedActionVariant((__int128 *)&v96, (uint64_t)v98);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v90, v9);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v85);
    v32(v26, v27);
    v33 = 11;
LABEL_10:
    v77 = (__n128 *)(a3 + 8);
    *(_DWORD *)a3 = v33;
    v56 = a3 + 64;
    ctb::chatbot::Media::Media(v77, (uint64_t)&v93);
    v57 = &v93;
    goto LABEL_11;
  }
  if (MEMORY[0x24BE0E8E8] && v13 == *MEMORY[0x24BE0E8E8])
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
    v34 = sub_2375EB90C();
    v88 = &v82;
    v35 = *(_QWORD *)(v34 - 8);
    v82 = v34;
    v90 = a2;
    v36 = *(_QWORD *)(v35 + 64);
    MEMORY[0x24BDAC7A8](v34);
    v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
    v83 = (char *)&v82 - v37;
    (*(void (**)(void))(v35 + 32))();
    v38 = sub_2375EBAB0();
    v89 = v8;
    v39 = *(_QWORD *)(v38 - 8);
    v85 = v38;
    v87 = v39;
    MEMORY[0x24BDAC7A8](v38);
    v41 = (char *)&v82 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v42 + 16))(v41, a1);
    sub_2375CE7C0((uint64_t)v41, &v96);
    v84 = (char *)&v82;
    MEMORY[0x24BDAC7A8](v43);
    v44 = (char *)&v82 - v37;
    v45 = (char *)&v82 - v37;
    v46 = v82;
    v47 = v83;
    v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v35 + 16))(v45, v83, v82);
    v49 = MEMORY[0x23B81536C](v48);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v49, v50, &v92);
    v51 = (uint64_t)v89;
    sub_2375EB8E8();
    sub_2375D2014(v51, (uint64_t)v98);
    v52 = sub_2375EB900();
    sub_2375D1F48(v52, v53, (uint64_t)&v91);
    v54 = *(void (**)(char *, uint64_t))(v35 + 8);
    v54(v44, v46);
    std::string::basic_string[abi:ne180100](&v93, (__n128 *)&v92);
    std::string::~string(&v92);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v94, v98);
    ctb::chatbot::URIEntry::~URIEntry((void **)v98);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v95, (__n128 *)&v91);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v91.__r_.__value_.__l.__data_);
    ctb::bridging::makeSuggestedActionVariant((uint64_t)&v93, (uint64_t)v98);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v90, v9);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(a1, v85);
    v54(v47, v46);
    v55 = (__n128 *)(a3 + 8);
    *(_DWORD *)a3 = 10;
    v56 = a3 + 64;
    ctb::chatbot::Media::Media(v55, (uint64_t)&v96);
    v57 = &v96;
LABEL_11:
    ctb::chatbot::Media::~Media((void **)v57);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](v56, (uint64_t)v98);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v98);
  }
  if (MEMORY[0x24BE0E990] && v13 == *MEMORY[0x24BE0E990])
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
    v58 = sub_2375EB8B8();
    v88 = &v82;
    v59 = *(_QWORD *)(v58 - 8);
    v82 = v58;
    v90 = a2;
    v60 = *(_QWORD *)(v59 + 64);
    MEMORY[0x24BDAC7A8](v58);
    v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
    v83 = (char *)&v82 - v61;
    (*(void (**)(void))(v59 + 32))();
    v62 = sub_2375EBAB0();
    v89 = v8;
    v63 = *(_QWORD *)(v62 - 8);
    v85 = v62;
    v87 = v63;
    MEMORY[0x24BDAC7A8](v62);
    v65 = (char *)&v82 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v66 + 16))(v65, a1);
    sub_2375CE7C0((uint64_t)v65, &v93);
    v84 = (char *)&v82;
    MEMORY[0x24BDAC7A8](v67);
    v68 = (char *)&v82 - v61;
    v69 = (char *)&v82 - v61;
    v70 = v82;
    v71 = v83;
    v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 16))(v69, v83, v82);
    v73 = MEMORY[0x23B815324](v72);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v73, v74, &v91);
    v75 = (uint64_t)v89;
    sub_2375EB8A0();
    sub_2375D2014(v75, (uint64_t)v98);
    v76 = *(void (**)(char *, uint64_t))(v59 + 8);
    v76(v68, v70);
    std::string::basic_string[abi:ne180100](&v96, (__n128 *)&v91);
    std::string::~string(&v91);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)v97, v98);
    ctb::chatbot::URIEntry::~URIEntry((void **)v98);
    ctb::bridging::makeSuggestedActionVariant((__int128 *)&v96, (uint64_t)v98);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v90, v9);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(a1, v85);
    v76(v71, v70);
    v33 = 9;
    goto LABEL_10;
  }
  *(_QWORD *)(a3 + 208) = 0;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v79 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
  v80 = *(void (**)(uint64_t, uint64_t, double))(v10 + 8);
  v80(a2, v9, v79);
  v81 = sub_2375EBAB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 8))(a1, v81);
  return ((uint64_t (*)(char *, uint64_t))v80)(v12, v9);
}

uint64_t sub_2375CFD98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  int v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  __n128 v76[8];
  __n128 v77[3];
  _BYTE v78[160];

  v4 = sub_2375EBDA4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EBDBC();
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x24BE0F0E0] && v8 == *MEMORY[0x24BE0F0E0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EC0D4();
    v75 = &v72;
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    v13 = sub_2375EBAB0();
    v74 = &v72;
    MEMORY[0x24BDAC7A8](v13);
    v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = sub_2375EBDB0();
    MEMORY[0x24BDAC7A8](v16);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_2375CEA78((uint64_t)v15, (uint64_t)v12, a2);
LABEL_16:
    v42 = sub_2375EBDC8();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (MEMORY[0x24BE0F100] && v8 == *MEMORY[0x24BE0F100])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EB918();
    v75 = &v72;
    v10 = *(_QWORD *)(v9 - 8);
    v17 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    v18 = sub_2375EBAB0();
    v74 = &v72;
    MEMORY[0x24BDAC7A8](v18);
    v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = sub_2375EBDB0();
    MEMORY[0x24BDAC7A8](v21);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_2375CF678((uint64_t)v20, (uint64_t)v12, a2);
    goto LABEL_16;
  }
  if (MEMORY[0x24BE0F0D0] && v8 == *MEMORY[0x24BE0F0D0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EC05C();
    v75 = &v72;
    v10 = *(_QWORD *)(v9 - 8);
    v22 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    v23 = sub_2375EBAB0();
    v74 = &v72;
    MEMORY[0x24BDAC7A8](v23);
    v25 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = sub_2375EBDB0();
    MEMORY[0x24BDAC7A8](v26);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_2375CF2D0((uint64_t)v25, (uint64_t)v12, a2);
    goto LABEL_16;
  }
  if (MEMORY[0x24BE0F118] && v8 == *MEMORY[0x24BE0F118])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v27 = sub_2375EBA08();
    v75 = &v72;
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 64);
    MEMORY[0x24BDAC7A8](v27);
    v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))((char *)&v72 - v30, v7, v27);
    v31 = sub_2375EBAB0();
    MEMORY[0x24BDAC7A8](v31);
    v33 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EBDB0();
    sub_2375CE7C0((uint64_t)v33, v77);
    MEMORY[0x24BDAC7A8](v34);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))((char *)&v72 - v30, (char *)&v72 - v30, v27);
    sub_2375CD240((uint64_t)&v72 - v30, (uint64_t)v76);
    ctb::bridging::makeSuggestedActionVariant((__int128 *)v76, (uint64_t)v78);
    v35 = sub_2375EBDC8();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
    (*(void (**)(char *, uint64_t))(v28 + 8))((char *)&v72 - v30, v27);
    *(_DWORD *)a2 = 8;
    ctb::chatbot::Media::Media((__n128 *)(a2 + 8), (uint64_t)v77);
    ctb::chatbot::Media::~Media((void **)v77);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a2 + 64, (uint64_t)v78);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v78);
  }
  if (MEMORY[0x24BE0F108] && v8 == *MEMORY[0x24BE0F108])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EB984();
    v75 = &v72;
    v10 = *(_QWORD *)(v9 - 8);
    v37 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)&v72 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    v38 = sub_2375EBAB0();
    v74 = &v72;
    MEMORY[0x24BDAC7A8](v38);
    v40 = (char *)&v72 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    v41 = sub_2375EBDB0();
    MEMORY[0x24BDAC7A8](v41);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_2375CDDC4((uint64_t)v40, (uint64_t)v12, a2);
    goto LABEL_16;
  }
  if (MEMORY[0x24BE0F0E8] && v8 == *MEMORY[0x24BE0F0E8])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v43 = sub_2375EB894();
    v74 = &v72;
    v44 = *(_QWORD *)(v43 - 8);
    v45 = *(_QWORD *)(v44 + 64);
    MEMORY[0x24BDAC7A8](v43);
    v46 = (char *)&v72 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v46, v7, v43);
    v47 = sub_2375EBAB0();
    MEMORY[0x24BDAC7A8](v47);
    v49 = (char *)&v72 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    v75 = a1;
    sub_2375EBDB0();
    sub_2375CE7C0((uint64_t)v49, v76);
    v73 = &v72;
    MEMORY[0x24BDAC7A8](v50);
    v51 = *(uint64_t (**)(char *, char *, uint64_t))(v44 + 16);
    v52 = v51(v46, v46, v43);
    MEMORY[0x24BDAC7A8](v52);
    v51(v46, v46, v43);
    v53 = (*(uint64_t (**)(char *, uint64_t))(v44 + 88))(v46, v43);
    if (MEMORY[0x24BE0E8B8] && v53 == *MEMORY[0x24BE0E8B8])
    {
      v54 = *(void (**)(char *, uint64_t))(v44 + 8);
      v55 = 1;
      v54(v46, v43);
    }
    else
    {
      v54 = *(void (**)(char *, uint64_t))(v44 + 8);
      v54(v46, v43);
      v55 = 0;
      v54(v46, v43);
    }
    ctb::bridging::makeSuggestedActionVariant(v55, (uint64_t)v78);
    v69 = sub_2375EBDC8();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v75, v69);
    v54(v46, v43);
    *(_DWORD *)a2 = 12;
    ctb::chatbot::Media::Media((__n128 *)(a2 + 8), (uint64_t)v76);
    ctb::chatbot::Media::~Media((void **)v76);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a2 + 64, (uint64_t)v78);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v78);
  }
  else if (MEMORY[0x24BE0F130] && v8 == *MEMORY[0x24BE0F130])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v56 = sub_2375EBA14();
    v73 = &v72;
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(_QWORD *)(v57 + 64);
    MEMORY[0x24BDAC7A8](v56);
    v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))((char *)&v72 - v59, v7, v56);
    v60 = sub_2375EBAB0();
    MEMORY[0x24BDAC7A8](v60);
    v62 = (char *)&v72 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
    v75 = a1;
    sub_2375EBDB0();
    sub_2375CE7C0((uint64_t)v62, v76);
    v74 = &v72;
    MEMORY[0x24BDAC7A8](v63);
    v64 = *(uint64_t (**)(char *, char *, uint64_t))(v57 + 16);
    v65 = v64((char *)&v72 - v59, (char *)&v72 - v59, v56);
    MEMORY[0x24BDAC7A8](v65);
    v64((char *)&v72 - v59, (char *)&v72 - v59, v56);
    v66 = (*(uint64_t (**)(char *, uint64_t))(v57 + 88))((char *)&v72 - v59, v56);
    if (MEMORY[0x24BE0EB70] && v66 == *MEMORY[0x24BE0EB70])
    {
      v67 = 2;
    }
    else if (MEMORY[0x24BE0EB80] && v66 == *MEMORY[0x24BE0EB80])
    {
      v67 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))((char *)&v72 - v59, v56);
      v67 = 0;
    }
    v70 = *(void (**)(char *, uint64_t))(v57 + 8);
    v70((char *)&v72 - v59, v56);
    ctb::bridging::makeSuggestedActionVariant(v67, (uint64_t)v78);
    v71 = sub_2375EBDC8();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v75, v71);
    v70((char *)&v72 - v59, v56);
    *(_DWORD *)a2 = 13;
    ctb::chatbot::Media::Media((__n128 *)(a2 + 8), (uint64_t)v76);
    ctb::chatbot::Media::~Media((void **)v76);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a2 + 64, (uint64_t)v78);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v78);
  }
  else
  {
    *(_QWORD *)(a2 + 208) = 0;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a2);
    v68 = sub_2375EBDC8();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(a1, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_2375D0894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(char *, char *);
  uint64_t v30;
  uint64_t (*v31)(char *, char *, uint64_t *);
  uint64_t *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t *);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  __n128 MenuL0Variant;
  double v48;
  void (*v49)(uint64_t, uint64_t, double);
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  __n128 v57;
  __n128 v58[13];
  __n128 v59;
  std::string v60[10];

  v4 = sub_2375EBDD4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x24BE0F180] && v8 == *MEMORY[0x24BE0F180])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = sub_2375EBD98();
    v55 = &v50;
    v10 = *(_QWORD **)(v9 - 8);
    v11 = v10[8];
    MEMORY[0x24BDAC7A8](v9);
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (uint64_t (*)(char *, char *, uint64_t))v10[4];
    v52 = (char *)&v50 - v12;
    v14 = v7;
    v16 = v15;
    v17 = v13((char *)&v50 - v12, v14, v15);
    v54 = (char *)&v50;
    MEMORY[0x24BDAC7A8](v17);
    v56 = a1;
    v18 = (uint64_t (*)(void))v10[2];
    v53 = (uint64_t *)v5;
    v19 = v18();
    v51 = &v50;
    MEMORY[0x24BDAC7A8](v19);
    ((void (*)(char *, char *, uint64_t))v18)((char *)&v50 - v12, (char *)&v50 - v12, v16);
    v20 = sub_2375EBAB0();
    MEMORY[0x24BDAC7A8](v20);
    v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EBD8C();
    sub_2375CE7C0((uint64_t)v22, (__n128 *)v60);
    v23 = (void (*)(char *, uint64_t))v10[1];
    v23((char *)&v50 - v12, v16);
    ctb::chatbot::Media::Media(&v57, (uint64_t)v60);
    ctb::chatbot::Media::~Media((void **)&v60[0].__r_.__value_.__l.__data_);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    v23((char *)&v50 - v12, v16);
    v57.n128_u32[0] = 1;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    ((void (*)(uint64_t, uint64_t))v53[1])(v56, v4);
    v23(v52, v16);
    *(_DWORD *)a2 = 1;
    v24 = a2 + 8;
LABEL_11:
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v24, (uint64_t)v60, (void (*)(void))std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__move_constructor);
    return std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  if (MEMORY[0x24BE0F190] && v8 == *MEMORY[0x24BE0F190])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v25 = sub_2375EBDC8();
    v55 = &v50;
    v26 = *(_QWORD **)(v25 - 8);
    v51 = (uint64_t *)v25;
    v27 = v26[8];
    MEMORY[0x24BDAC7A8](v25);
    v56 = a1;
    v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    v29 = (uint64_t (*)(char *, char *))v26[4];
    v54 = (char *)&v50 - v28;
    v30 = v29((char *)&v50 - v28, v7);
    v53 = &v50;
    MEMORY[0x24BDAC7A8](v30);
    v31 = (uint64_t (*)(char *, char *, uint64_t *))v26[2];
    v32 = v51;
    v33 = v31((char *)&v50 - v28, (char *)&v50 - v28, v51);
    v52 = (char *)&v50;
    MEMORY[0x24BDAC7A8](v33);
    v31((char *)&v50 - v28, (char *)&v50 - v28, v32);
    sub_2375CFD98((uint64_t *)((char *)&v50 - v28), (uint64_t)&v57);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    v34 = (void (*)(char *, uint64_t *))v26[1];
    v34((char *)&v50 - v28, v32);
    v57.n128_u32[0] = 2;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v56, v4);
    v34(v54, v32);
    v35 = 1;
LABEL_10:
    *(_DWORD *)a2 = v35;
    v24 = a2 + 8;
    goto LABEL_11;
  }
  if (MEMORY[0x24BE0F1A0] && v8 == *MEMORY[0x24BE0F1A0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v36 = sub_2375EBE04();
    v55 = &v50;
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(_QWORD *)(v37 + 64);
    MEMORY[0x24BDAC7A8](v36);
    v56 = a1;
    v39 = (char *)&v50 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 32))(v39, v7, v36);
    v54 = (char *)&v50;
    MEMORY[0x24BDAC7A8](v40);
    v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 16))(v39, v39, v36);
    v42 = MEMORY[0x23B815858](v41);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v42, v43, v60);
    v44 = sub_2375EBDF8();
    sub_2375CCEB8(v44, (uint64_t *)&v59);
    v45 = *(void (**)(char *, uint64_t))(v37 + 8);
    v45(v39, v36);
    std::string::basic_string[abi:ne180100](&v57, (__n128 *)v60);
    std::string::~string(v60);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v58, &v59);
    std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v59, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
    MenuL0Variant = ctb::bridging::makeMenuL0Variant((uint64_t)&v57, (uint64_t)v60);
    (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v56, v4, MenuL0Variant);
    v45(v39, v36);
    v35 = 2;
    goto LABEL_10;
  }
  *(_QWORD *)(a2 + 240) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v48 = ctb::chatbot::MenuL0Content::MenuL0Content(a2);
  v49 = *(void (**)(uint64_t, uint64_t, double))(v5 + 8);
  v49(a1, v4, v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v7, v4);
}

uint64_t sub_2375D0E7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _QWORD v14[2];
  _DWORD v15[62];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  v5 = sub_2375EBDD4();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14[1] = a1;
  v9 = a1 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(_QWORD *)(v7 + 72);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  do
  {
    MEMORY[0x24BDAC7A8](v5);
    v12((char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v6);
    sub_2375D0894((uint64_t)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v15);
    std::vector<ctb::chatbot::MenuL0Content>::push_back[abi:ne180100](a2, v15);
    v5 = ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)v15, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
    v9 += v11;
    --v4;
  }
  while (v4);
  return swift_bridgeObjectRelease();
}

uint64_t std::vector<ctb::chatbot::MenuL0Content>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = std::vector<ctb::chatbot::MenuL0Content>::__push_back_slow_path<ctb::chatbot::MenuL0Content const&>(a1, a2);
  }
  else
  {
    *v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    result = (uint64_t)(v3 + 62);
    a1[1] = (uint64_t)(v3 + 62);
  }
  a1[1] = result;
  return result;
}

void sub_2375D1004(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double ctb::chatbot::SuggestedAction::SuggestedAction(ctb::chatbot::SuggestedAction *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 32) = 0;
  return result;
}

uint64_t ctb::bridging::makeSuggestedActionVariant@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 144) = 12;
  return result;
}

{
  *(_DWORD *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 144) = 11;
  return result;
}

{
  *(_BYTE *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 144) = 6;
  return result;
}

uint64_t std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 8, a2 + 8);
  return a1;
}

uint64_t std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100](uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
  return a1;
}

void ctb::bridging::makeSuggestedActionVariant(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  std::__variant_detail::__alt<7ul,ctb::chatbot::SuggestedActionCalendar>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionCalendar>(a2 + 8, a1);
  *(_DWORD *)(a2 + 144) = 7;
}

double ctb::chatbot::SuggestedActionCalendar::SuggestedActionCalendar(ctb::chatbot::SuggestedActionCalendar *this)
{
  double result;

  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 128) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 57) = 0u;
  return result;
}

void ctb::chatbot::CreateCalendarEvent::~CreateCalendarEvent(void **this)
{
  if (*((_BYTE *)this + 128) && *((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

__n128 ctb::bridging::makeSuggestedActionVariant@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = *(__n128 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a2 + 144) = 2;
  return result;
}

{
  __n128 result;

  *(_DWORD *)(a2 + 8) = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a2 + 144) = 0;
  return result;
}

__n128 ctb::bridging::makeSuggestedActionVariant@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  *(_QWORD *)(a2 + 24) = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_DWORD *)(a2 + 144) = 4;
  return result;
}

{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  *(_QWORD *)(a2 + 24) = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_DWORD *)(a2 + 144) = 3;
  return result;
}

{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  *(_QWORD *)(a2 + 24) = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_DWORD *)(a2 + 144) = 1;
  return result;
}

void ctb::bridging::makeSuggestedActionVariant(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation>((__n128 *)(a2 + 8), a1);
  *(_DWORD *)(a2 + 144) = 5;
}

{
  std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall>((__n128 *)(a2 + 8), a1);
  *(_DWORD *)(a2 + 144) = 9;
}

_BYTE *ctb::chatbot::SuggestedActionShowLocation::SuggestedActionShowLocation(_BYTE *this)
{
  *this = 0;
  this[16] = 0;
  this[24] = 0;
  this[48] = 0;
  this[56] = 0;
  this[80] = 0;
  this[88] = 0;
  this[112] = 0;
  return this;
}

__int128 *ctb::bridging::makeSuggestedActionVariant@<X0>(__int128 *result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;

  v2 = *result;
  *(_BYTE *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 2);
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (*((_BYTE *)result + 48))
  {
    *(_OWORD *)(a2 + 32) = *(__int128 *)((char *)result + 24);
    *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 5);
    *((_QWORD *)result + 4) = 0;
    *((_QWORD *)result + 5) = 0;
    *((_QWORD *)result + 3) = 0;
    *(_BYTE *)(a2 + 56) = 1;
  }
  *(_DWORD *)(a2 + 144) = 10;
  return result;
}

{
  __int128 v2;

  v2 = *result;
  *(_BYTE *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 2);
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (*((_BYTE *)result + 48))
  {
    *(_OWORD *)(a2 + 32) = *(__int128 *)((char *)result + 24);
    *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 5);
    *((_QWORD *)result + 4) = 0;
    *((_QWORD *)result + 5) = 0;
    *((_QWORD *)result + 3) = 0;
    *(_BYTE *)(a2 + 56) = 1;
  }
  *(_DWORD *)(a2 + 144) = 8;
  return result;
}

uint64_t std::vector<ctb::chatbot::MenuL1Content>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = std::vector<ctb::chatbot::MenuL1Content>::__push_back_slow_path<ctb::chatbot::MenuL1Content const&>(a1, a2);
  }
  else
  {
    *v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    result = (uint64_t)(v3 + 62);
    a1[1] = (uint64_t)(v3 + 62);
  }
  a1[1] = result;
  return result;
}

void sub_2375D13F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double ctb::chatbot::MenuL0Content::MenuL0Content(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  return result;
}

__n128 ctb::bridging::makeMenuL0Variant@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a2 + 232) = 1;
  return result;
}

uint64_t std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100](uint64_t a1, void (*a2)(void))
{
  a2();
  return a1;
}

uint64_t ctb::bridging::makeMenuL0Variant@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  *a2 = *a1;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  a2[58] = 0;
  return result;
}

uint64_t std::vector<ctb::chatbot::MenuL2Content>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = std::vector<ctb::chatbot::SuggestedChip>::__push_back_slow_path<ctb::chatbot::SuggestedChip const&>(a1, a2);
  }
  else
  {
    *v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    result = (uint64_t)(v3 + 58);
    a1[1] = (uint64_t)(v3 + 58);
  }
  a1[1] = result;
  return result;
}

void sub_2375D1524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t ctb::chatbot::MenuL0Content::~MenuL0Content(uint64_t a1, void (*a2)(uint64_t))
{
  a2(a1 + 8);
  return a1;
}

uint64_t std::vector<ctb::chatbot::MenuL0Content>::__push_back_slow_path<ctb::chatbot::MenuL0Content const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x84210842108421)
    v9 = 0x108421084210842;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[248 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[248 * v9];
  *(_DWORD *)v11 = *a2;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 248;
  std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)v14, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  return v12;
}

void sub_2375D166C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)va, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  return std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(a1, a2, std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__move_constructor);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 232);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_2508E7C40 + v4))(&v7, result);
  *(_DWORD *)(v3 + 232) = -1;
  v5 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_2508E7C60 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

uint64_t std::vector<ctb::chatbot::MenuL1Content>::__push_back_slow_path<ctb::chatbot::MenuL1Content const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x84210842108421)
    v9 = 0x108421084210842;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[248 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[248 * v9];
  *(_DWORD *)v11 = *a2;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 248;
  std::vector<ctb::chatbot::MenuL1Content>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)v14, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
  return v12;
}

void sub_2375D1874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)va, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::MenuL1Content>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  return std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(a1, a2, std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__move_constructor);
}

uint64_t *std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = result;
  v6 = *result;
  v5 = result[1];
  v7 = a2[1];
  if (v5 != *result)
  {
    do
    {
      v9 = *(_DWORD *)(v5 - 248);
      v5 -= 248;
      *(_DWORD *)(v7 - 248) = v9;
      v7 -= 248;
      result = (uint64_t *)a3(v7 + 8, v5 + 8);
    }
    while (v5 != v6);
  }
  a2[1] = v7;
  v10 = *v4;
  *v4 = v7;
  a2[1] = v10;
  v11 = v4[1];
  v4[1] = a2[2];
  a2[2] = v11;
  v12 = v4[2];
  v4[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t i;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v4; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 248;
    a2(i - 240);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 232);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_2508E7C50 + v4))(&v7, result);
  *(_DWORD *)(v3 + 232) = -1;
  v5 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_2508E7C70 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_Tm(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_Tm(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = *(__n128 *)((char *)a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  return result;
}

uint64_t sub_2375D1AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  int v17;
  void (*v18)(_BYTE *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[4];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;

  v4 = sub_2375EAAB4();
  v41 = *(_QWORD *)(v4 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v40 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_2375EAA18();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_2375EAD0C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4B0);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v14 = &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2375EAD18();
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9);
  v42 = v4;
  if (v15 == 1)
  {
    sub_2375D1E40((uint64_t)v14);
    v37 = 2;
  }
  else
  {
    v16 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(&v36[-v12], v14, v9);
    MEMORY[0x24BDAC7A8](v16);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(&v36[-v12], &v36[-v12], v9);
    v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 88))(&v36[-v12], v9);
    if (MEMORY[0x24BE0D2C8] && v17 == *MEMORY[0x24BE0D2C8])
    {
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(&v36[-v12], v9);
      v37 = 0;
    }
    else
    {
      if (MEMORY[0x24BE0D2C0] && v17 == *MEMORY[0x24BE0D2C0])
      {
        (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(&v36[-v12], v9);
      }
      else
      {
        v18 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
        v18(&v36[-v12], v9);
        v18(&v36[-v12], v9);
      }
      v37 = 1;
    }
  }
  v19 = sub_2375EAD3C();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = &v36[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2375EAD60();
  v23 = (*(uint64_t (**)(_BYTE *, uint64_t))(v20 + 88))(v22, v19);
  if (MEMORY[0x24BE0D318] && v23 == *MEMORY[0x24BE0D318])
    goto LABEL_17;
  if (!MEMORY[0x24BE0D320] || v23 != *MEMORY[0x24BE0D320])
  {
    (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v22, v19);
LABEL_17:
    v24 = 0;
    goto LABEL_18;
  }
  v24 = 1;
LABEL_18:
  v25 = sub_2375EAD54();
  v26 = sub_2375EAD48();
  v28 = v27;
  v29 = sub_2375EAD00();
  v31 = v30;
  sub_2375EAD30();
  v32 = v40;
  sub_2375EAD6C();
  v33 = sub_2375EAD78();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
  *(_BYTE *)a2 = v24;
  *(_BYTE *)(a2 + 1) = v37;
  *(_QWORD *)(a2 + 8) = v25;
  *(_QWORD *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = v28;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v31;
  v34 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v38 + 32))(a2 + *(int *)(v34 + 36), v8, v39);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v41 + 32))(a2 + *(int *)(v34 + 40), v32, v42);
}

uint64_t sub_2375D1E40(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2375D1E80@<X0>(uint64_t a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::string v9;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  std::vector<std::string>::reserve(a2, *(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  v5 = (unint64_t *)(a1 + 40);
  do
  {
    v6 = *(v5 - 1);
    v7 = *v5;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v6, v7, &v9);
    std::vector<std::string>::push_back[abi:ne180100]((uint64_t *)a2, (__int128 *)&v9);
    v5 += 2;
    std::string::~string(&v9);
    --v4;
  }
  while (v4);
  return swift_bridgeObjectRelease();
}

void sub_2375D1F48(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::string v9;
  __n128 v10[2];
  char v11;

  if (a2)
  {
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(a1, a2, &v9);
    ctb::bridging::makeOptional((ctb::bridging *)&v9, (uint64_t)v10);
    v11 = 0;
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100](a3, v10);
      ctb::chatbot::URIEntry::~URIEntry((void **)v10);
      return;
    }
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v11 = 1;
  }
  type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
  v7 = v6;
  v8 = sub_2375D26D4();
  CxxOptional.init(nilLiteral:)(v7, v8);
  sub_2375BB424((uint64_t)v10, &qword_2567FB1E0);
}

void sub_2375D2014(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 Optional;
  uint64_t v17;
  std::string v18;
  __n128 v19[2];
  char v20;

  v4 = sub_2375EAA18();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375D271C(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    memset(v19, 0, sizeof(v19));
    v20 = 1;
    type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
    v12 = v11;
    v13 = sub_2375D26D4();
    CxxOptional.init(nilLiteral:)(v12, v13);
    sub_2375BB424(a1, &qword_2567FB3A8);
    sub_2375BB424((uint64_t)v19, &qword_2567FB1E0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v14 = sub_2375EAA00();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v15, &v18);
    Optional = ctb::bridging::makeOptional((ctb::bridging *)&v18, (uint64_t)v19);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, Optional);
    v20 = 0;
    sub_2375BB424(a1, &qword_2567FB3A8);
    std::optional<std::string>::optional[abi:ne180100](a2, v19);
    ctb::chatbot::URIEntry::~URIEntry((void **)v19);
  }
}

uint64_t sub_2375D21A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const std::string *v12;
  std::string v14;
  std::string v15;
  char v16;
  uint64_t *v17[3];

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v17[0] = (uint64_t *)MEMORY[0x24BEE4AF8];
    sub_2375D3764(0, v4, 0);
    v5 = v17[0];
    v6 = (unint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v7, v8, &v15);
      v17[0] = v5;
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        sub_2375D3764(v9 > 1, v10 + 1, 1);
        v5 = v17[0];
      }
      v6 += 2;
      v5[2] = v10 + 1;
      std::string::basic_string[abi:ne180100]((__n128 *)&v5[3 * v10 + 4], (__n128 *)&v15);
      std::string::~string(&v15);
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = (uint64_t *)MEMORY[0x24BEE4AF8];
  }
  memset(v17, 0, sizeof(v17));
  std::set<std::string>::set[abi:ne180100](v17);
  v11 = v5[2];
  if (v11)
  {
    v12 = (const std::string *)(v5 + 4);
    swift_bridgeObjectRetain();
    do
    {
      std::string::basic_string(&v15, v12);
      v16 = 0;
      std::string::basic_string[abi:ne180100]((__n128 *)&v14, (__n128 *)&v15);
      std::string::~string(&v15);
      std::set<std::string>::insert[abi:ne180100](v17, (void **)&v14.__r_.__value_.__l.__data_);
      std::string::~string(&v14);
      ++v12;
      --v11;
    }
    while (v11);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(&v15, 0, sizeof(v15));
  v16 = 1;
  swift_bridgeObjectRelease();
  std::set<std::string>::set[abi:ne180100](a2, v17);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v17);
  return swift_bridgeObjectRelease();
}

void sub_2375D2364(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2375EAA3C();
  MEMORY[0x24BDAC7A8](v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  __asm { BR              X9 }
}

uint64_t sub_2375D23F4()
{
  uint64_t v0;
  unint64_t *v1;
  int v2;

  std::vector<unsigned char>::reserve(v1, BYTE6(v0));
  return ((uint64_t (*)(void))((char *)&loc_2375D2434 + dword_2375D24E4[v2]))();
}

uint64_t sub_2375D2444()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  sub_2375D259C(v3, v0);
  sub_2375EAA48();
  while (1)
  {
    v7 = sub_2375EAA30();
    if ((v7 & 0x100) != 0)
      break;
    *(_BYTE *)(v6 - 65) = v7;
    std::vector<unsigned char>::push_back[abi:ne180100](v4, (_BYTE *)(v6 - 65));
  }
  sub_2375C3068(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v2);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

uint64_t sub_2375D259C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

void std::vector<unsigned char>::push_back[abi:ne180100](unint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

unint64_t sub_2375D26D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2567FAAD8;
  if (!qword_2567FAAD8)
  {
    type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(255);
    result = MEMORY[0x23B8163BC](&unk_2375F1F20, v1);
    atomic_store(result, (unint64_t *)&qword_2567FAAD8);
  }
  return result;
}

uint64_t sub_2375D271C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_2375D2800(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, a2);
    result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

_QWORD *sub_2375D2850@<X0>(_QWORD *a1@<X8>)
{
  return sub_2375D28A4(a1);
}

uint64_t *sub_2375D2858@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v2;
  uint64_t *result;
  char v5;

  result = std::set<std::string>::insert[abi:ne180100](v2, a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v5 & 1;
  return result;
}

_QWORD *std::set<std::string>::set[abi:ne180100](_QWORD *result)
{
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  return result;
}

_QWORD *sub_2375D28A4(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return std::set<std::string>::set[abi:ne180100](result);
}

uint64_t *std::set<std::string>::insert[abi:ne180100](uint64_t **a1, void **a2)
{
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_2375D2B30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2375D2C44(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, &v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t sub_2375D2CD4@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  ctb::bridging *v40;
  __n128 Optional;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const ctb::ClientAuthenticityRequest::Parameter *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[2];
  uint64_t v59;
  __n128 *v60;
  uint64_t v61;
  int64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  int64_t v85;
  __n128 v86;
  uint64_t v87;
  __n128 v88;
  _QWORD *v89;
  std::string v90;
  __n128 v91;
  __int128 v92;
  char v93;
  __n128 v94;
  char v95;
  uint64_t v96;

  v60 = a2;
  v59 = a1;
  v2 = sub_2375EB5DC();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v96 = MEMORY[0x24BEE4AF8];
    sub_2375D3614(0, v3, 0);
    v4 = sub_2375EB5D0();
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)(v4 - 8);
    v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v58[1] = v2;
    v69 = v2 + v8;
    v68 = *(_QWORD *)(v7 + 72);
    v67 = *(_QWORD *)(v7 + 64);
    v65 = v7;
    v66 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v64 = (__n128 *)&v94.n128_i8[8];
    v63 = (__n128 *)&v95;
    v62 = v3;
    v61 = v4;
    do
    {
      v76 = v58;
      v9 = v67;
      MEMORY[0x24BDAC7A8](v4);
      v10 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = v66;
      v12 = ((uint64_t (*)(char *))v66)(v10);
      v74 = v58;
      MEMORY[0x24BDAC7A8](v12);
      v13 = v10;
      v75 = v10;
      v11(v10, v10, v5);
      v72 = sub_2375EB5A0();
      v14 = sub_2375EB5B8();
      v15 = *(_QWORD *)(v14 - 8);
      MEMORY[0x24BDAC7A8](v14);
      v17 = (char *)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EB5C4();
      v18 = sub_2375EB5AC();
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v18, v20, &v90);
      v73 = v13;
      v21 = sub_2375EB594();
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
      {
        v71 = v6;
        v89 = (_QWORD *)MEMORY[0x24BEE4AF8];
        sub_2375D3630(0, v22, 0);
        v23 = sub_2375EB60C();
        v24 = v23;
        v25 = *(_QWORD **)(v23 - 8);
        v70 = v21;
        v79 = v25[9];
        v81 = v25[8];
        v78 = v25;
        v80 = (void (*)(char *, char *, uint64_t))v25[2];
        do
        {
          v85 = v22;
          v84 = v58;
          v26 = v81;
          MEMORY[0x24BDAC7A8](v23);
          v27 = (char *)v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
          v82 = v28;
          v29 = v80;
          v30 = ((uint64_t (*)(char *))v80)(v27);
          v83 = v58;
          MEMORY[0x24BDAC7A8](v30);
          v29(v27, v27, v24);
          v31 = sub_2375EB600();
          v32 = *(_QWORD *)(v31 - 8);
          MEMORY[0x24BDAC7A8](v31);
          v34 = (char *)v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4B8);
          MEMORY[0x24BDAC7A8](v35);
          v37 = (char *)v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_2375EB5E8();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v37, 1, v31) == 1)
          {
            sub_2375D364C((uint64_t)v37);
            v91 = 0u;
            v92 = 0u;
            std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](&v91);
            v38 = (void (*)(char *, uint64_t))v78[1];
            v38(v27, v24);
          }
          else
          {
            v77 = v58;
            (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v37, v31);
            sub_2375EB5F4();
            sub_2375D2364(v39, &v86);
            v40 = (ctb::bridging *)std::vector<unsigned char>::vector(&v88, (uint64_t)&v86);
            Optional = ctb::bridging::makeOptional(v40, (uint64_t)&v91);
            v38 = (void (*)(char *, uint64_t))v78[1];
            ((void (*)(char *, uint64_t, __n128))v38)(v27, v24, Optional);
            std::vector<unsigned char>::~vector[abi:ne180100]((uint64_t)&v86);
            (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
          }
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v88, &v91);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v91);
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v42, &v88);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v88);
          v38(v27, v24);
          v43 = v89;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_2375D3630(0, v43[2] + 1, 1);
            v43 = v89;
          }
          v44 = v85;
          v46 = v43[2];
          v45 = v43[3];
          if (v46 >= v45 >> 1)
          {
            sub_2375D3630(v45 > 1, v46 + 1, 1);
            v43 = v89;
          }
          v43[2] = v46 + 1;
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v43[4 * v46 + 4], &v91);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v91);
          v22 = v44 - 1;
        }
        while (v22);
        swift_bridgeObjectRelease();
        v3 = v62;
        v5 = v61;
        v6 = v71;
      }
      else
      {
        swift_bridgeObjectRelease();
        v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v86 = 0uLL;
      v87 = 0;
      std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v86);
      v47 = v43[2];
      if (v47)
      {
        v48 = (const ctb::ClientAuthenticityRequest::Parameter *)(v43 + 4);
        swift_bridgeObjectRetain();
        do
        {
          ctb::ClientAuthenticityRequest::Parameter::Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v91, v48);
          v93 = 0;
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v88, &v91);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v91);
          std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](&v86, (uint64_t)&v88);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v88);
          v48 = (const ctb::ClientAuthenticityRequest::Parameter *)((char *)v48 + 32);
          --v47;
        }
        while (v47);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      v91 = 0u;
      v92 = 0u;
      v93 = 1;
      swift_bridgeObjectRelease();
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](&v91, &v86);
      std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v86, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
      swift_bridgeObjectRelease();
      v94.n128_u64[0] = v72;
      std::string::basic_string[abi:ne180100](v64, (__n128 *)&v90);
      std::string::~string(&v90);
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v63, &v91);
      std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v91, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
      v49 = *(void (**)(char *, uint64_t))(v65 + 8);
      v49(v73, v5);
      ctb::ClientAuthenticityRequest::Method::Method((uint64_t)&v91, (uint64_t)&v94);
      ctb::ClientAuthenticityRequest::Method::~Method((void **)&v94);
      ctb::ClientAuthenticityRequest::Method::Method(v50, (uint64_t)&v91);
      ctb::ClientAuthenticityRequest::Method::~Method((void **)&v91);
      v49(v75, v5);
      v51 = v96;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2375D3614(0, *(_QWORD *)(v51 + 16) + 1, 1);
        v51 = v96;
      }
      v53 = *(_QWORD *)(v51 + 16);
      v52 = *(_QWORD *)(v51 + 24);
      if (v53 >= v52 >> 1)
      {
        sub_2375D3614(v52 > 1, v53 + 1, 1);
        v51 = v96;
      }
      ++v6;
      *(_QWORD *)(v51 + 16) = v53 + 1;
      ctb::ClientAuthenticityRequest::Method::Method(v51 + 56 * v53 + 32, (uint64_t)&v94);
      ctb::ClientAuthenticityRequest::Method::~Method((void **)&v94);
    }
    while (v6 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v51 = MEMORY[0x24BEE4AF8];
  }
  v91 = 0uLL;
  *(_QWORD *)&v92 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v91);
  v54 = *(_QWORD *)(v51 + 16);
  if (v54)
  {
    v55 = v51 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100]((uint64_t *)&v91, v55);
      v55 += 56;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](&v94, &v91);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v91, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]);
  v56 = sub_2375EB618();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v59, v56);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v60, &v94);
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v94, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375D359C(uint64_t a1)
{
  _QWORD *v1;

  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2375D35BC(uint64_t a1)
{
  uint64_t *v1;

  return std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2375D35DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2375D379C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2375D35F8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D3908(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D3614(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D3ADC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D3630(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D3CB4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D364C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return a1;
}

uint64_t std::vector<unsigned char>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2375D36F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D3E70(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D3710(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D4040(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D372C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D4218(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D3748(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D43D4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D3764(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D45A8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D3780(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2375D477C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2375D379C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FA258);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D3908(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4F0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 280);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v12 >= v13 + 280 * v8)
    {
      type metadata accessor for ctb.chatbot.CardCarouselContent(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.CardCarouselContent(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 280 * v8 || v12 >= v13 + 280 * v8)
  {
    type metadata accessor for ctb.chatbot.CardCarouselContent(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D3ADC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4C8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v12 >= v13 + 56 * v8)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Method(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Method(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    type metadata accessor for ctb.ClientAuthenticityRequest.Method(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D3CB4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4C0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v13 >= v14 + 32 * v8)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(0);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D3E70(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4D8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v12 >= v13 + 40 * v8)
    {
      type metadata accessor for ctb.chatbot.URIEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.URIEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    type metadata accessor for ctb.chatbot.URIEntry(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D4040(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4E0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v12 >= v13 + 72 * v8)
    {
      type metadata accessor for ctb.chatbot.MediaEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.MediaEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 72 * v8 || v12 >= v13 + 72 * v8)
  {
    type metadata accessor for ctb.chatbot.MediaEntry(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D4218(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4E8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v13 >= v14 + 32 * v8)
    {
      type metadata accessor for ctb.chatbot.OrgNameEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.OrgNameEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for ctb.chatbot.OrgNameEntry(0);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D43D4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4D0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v12 >= v13 + 48 * v8)
    {
      type metadata accessor for ctb.chatbot.AddressEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.AddressEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    type metadata accessor for ctb.chatbot.AddressEntry(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D45A8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4F8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v12 >= v13 + 24 * v8)
    {
      type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D477C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB500);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v12 >= v13 + 56 * v8)
    {
      type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2375EC3EC();
  __break(1u);
  return result;
}

uint64_t sub_2375D4954@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void (*v19)(char *, _QWORD *);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  void (*v44)(char *, _QWORD *);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  void (*v68)(char *, _QWORD *);
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  void (*v93)(_QWORD, _QWORD, _QWORD);
  void (*v94)(_QWORD, _QWORD);
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  void (*v117)(char *, _QWORD *);
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t (*v144)(char *, char *, uint64_t);
  uint64_t v145;
  char *v146;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, uint64_t *, uint64_t);
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  std::string::size_type v183;
  unint64_t v184;
  unint64_t v185;
  std::string::size_type v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  void (*v221)(char *, uint64_t);
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  __n128 *v233;
  uint64_t result;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  void (*v246)(char *, char *, uint64_t);
  char *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  void (*v259)(char *, char *, uint64_t);
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  void (*v272)(char *, char *, uint64_t);
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  void (*v281)(_QWORD, _QWORD, _QWORD);
  uint64_t v282;
  void (*v283)(char *, char *, uint64_t);
  char *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  void (*v294)(char *, char *, uint64_t);
  char *v295;
  _QWORD v296[2];
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t (*v307)(uint64_t, uint64_t, uint64_t);
  _QWORD *v308;
  uint64_t (*v309)(uint64_t, uint64_t, uint64_t);
  _QWORD *v310;
  uint64_t (*v311)(char *, uint64_t, uint64_t);
  _QWORD *v312;
  uint64_t (*v313)(uint64_t, uint64_t, uint64_t);
  _QWORD *v314;
  uint64_t (*v315)(char *, uint64_t, uint64_t);
  _QWORD *v316;
  __n128 *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  char *v331;
  char *v332;
  _QWORD *v333;
  uint64_t v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  char *v339;
  char *v340;
  _QWORD *v341;
  uint64_t v342;
  _QWORD *v343;
  __n128 v344;
  std::string v345;
  std::string v346;
  std::string v347;
  std::string v348;
  std::string v349;
  char v350;
  std::string v351;
  std::string v352;
  char v353;

  v317 = a2;
  v306 = sub_2375EAA9C();
  v305 = *(_QWORD *)(v306 - 8);
  MEMORY[0x24BDAC7A8](v306);
  v304 = (uint64_t)v296 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = sub_2375EAAB4();
  v302 = *(_QWORD *)(v303 - 8);
  MEMORY[0x24BDAC7A8](v303);
  v301 = (char *)v296 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB508);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v328 = (uint64_t)v296 - v7;
  v329 = a1;
  v8 = sub_2375EACB8();
  v334 = v6;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v337 = (char *)v296 - v7;
  v343 = (_QWORD *)v9;
  v342 = *(_QWORD *)(v9 + 16);
  if (!v342)
    goto LABEL_7;
  v10 = sub_2375EAC94();
  v11 = 0;
  v341 = (_QWORD *)v10;
  v12 = *(_QWORD *)(v10 - 8);
  v13 = (char *)v343 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 64);
  v338 = *(_QWORD *)(v12 + 72);
  v339 = (char *)v12;
  v340 = *(char **)(v12 + 16);
  while (1)
  {
    v15 = MEMORY[0x24BDAC7A8](v10);
    v17 = (char *)v296 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x24BDAC7A8](v15);
    v18 = v341;
    ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v341);
    swift_bridgeObjectRetain();
    sub_2375EAC88();
    v19 = (void (*)(char *, _QWORD *))*((_QWORD *)v339 + 1);
    v19((char *)v296 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
    swift_bridgeObjectRelease();
    v20 = sub_2375EAB5C();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
    v23 = v22(v17, 1, v20);
    v10 = sub_2375BB424((uint64_t)v17, &qword_2567FB508);
    if (v23 != 1)
      break;
    ++v11;
    v13 += v338;
    if (v342 == v11)
      goto LABEL_7;
  }
  v323 = v20;
  if (v342 != v11)
  {
    v336 = (char *)v296;
    v235 = MEMORY[0x24BDAC7A8](v10);
    v335 = (char *)v296 - ((v236 + 15) & 0xFFFFFFFFFFFFFFF0);
    v333 = v296;
    v237 = v334;
    v238 = MEMORY[0x24BDAC7A8](v235);
    v342 = (uint64_t)v296 - ((v237 + 15) & 0xFFFFFFFFFFFFFFF0);
    v338 = (uint64_t)v296;
    v239 = MEMORY[0x24BDAC7A8](v238);
    v339 = (char *)v240;
    v241 = (char *)v296 - v240;
    result = MEMORY[0x24BDAC7A8](v239);
    if (v11 >= v343[2])
    {
      __break(1u);
      goto LABEL_126;
    }
    v242 = v341;
    ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v341);
    sub_2375EAC88();
    v19((char *)v296 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v242);
    v243 = v342;
    v244 = sub_2375D7324((uint64_t)v241, v342, &qword_2567FB508);
    MEMORY[0x24BDAC7A8](v244);
    v245 = (char *)((char *)v296 - v339);
    sub_2375BB3E0(v243, (char *)v296 - v339, &qword_2567FB508);
    v24 = v323;
    result = v22(v245, 1, v323);
    if ((_DWORD)result == 1)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    v246 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v247 = v335;
    v246(v335, v245, v24);
    sub_2375BB424(v243, &qword_2567FB508);
    v25 = (uint64_t)v337;
    v246(v337, v247, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v24);
  }
  else
  {
LABEL_7:
    v24 = sub_2375EAB5C();
    v25 = (uint64_t)v337;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v337, 1, 1, v24);
  }
  swift_bridgeObjectRelease();
  sub_2375EAB5C();
  v26 = *(_QWORD *)(v24 - 8);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v25, 1, v24);
  v323 = v24;
  v300 = v26;
  v315 = (uint64_t (*)(char *, uint64_t, uint64_t))v27;
  if (v28 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v328, 1, 1, v24);
    sub_2375BB424(v25, &qword_2567FB508);
  }
  else
  {
    v29 = v328;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v328, v25, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v24);
  }
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB510);
  v316 = v296;
  v31 = *(_QWORD **)(*(_QWORD *)(v30 - 8) + 64);
  MEMORY[0x24BDAC7A8](v30);
  v32 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  v327 = (uint64_t)v296 - v32;
  v33 = sub_2375EACB8();
  v337 = (char *)v296;
  v333 = v31;
  v34 = MEMORY[0x24BDAC7A8](v33);
  v336 = (char *)v296 - v32;
  v343 = (_QWORD *)v34;
  v342 = *(_QWORD *)(v34 + 16);
  if (!v342)
    goto LABEL_17;
  v35 = sub_2375EAC94();
  v36 = 0;
  v341 = (_QWORD *)v35;
  v37 = *(_QWORD *)(v35 - 8);
  v38 = (char *)v343 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
  v39 = *(_QWORD *)(v37 + 64);
  v338 = *(_QWORD *)(v37 + 72);
  v339 = (char *)v37;
  v340 = *(char **)(v37 + 16);
  while (1)
  {
    v40 = MEMORY[0x24BDAC7A8](v35);
    v42 = (char *)v296 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x24BDAC7A8](v40);
    v43 = v341;
    ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v341);
    swift_bridgeObjectRetain();
    sub_2375EAC7C();
    v44 = (void (*)(char *, _QWORD *))*((_QWORD *)v339 + 1);
    v44((char *)v296 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), v43);
    swift_bridgeObjectRelease();
    v45 = sub_2375EACD0();
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    v48 = v47(v42, 1, v45);
    v35 = sub_2375BB424((uint64_t)v42, &qword_2567FB510);
    if (v48 != 1)
      break;
    ++v36;
    v38 += v338;
    if (v342 == v36)
      goto LABEL_17;
  }
  v322 = v45;
  if (v342 == v36)
  {
LABEL_17:
    v49 = sub_2375EACD0();
    v50 = (uint64_t)v336;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v336, 1, 1, v49);
    goto LABEL_18;
  }
  v335 = (char *)v296;
  v248 = MEMORY[0x24BDAC7A8](v35);
  v332 = (char *)v296 - ((v249 + 15) & 0xFFFFFFFFFFFFFFF0);
  v331 = (char *)v296;
  v250 = v333;
  v251 = MEMORY[0x24BDAC7A8](v248);
  v342 = (uint64_t)v296 - (((unint64_t)v250 + 15) & 0xFFFFFFFFFFFFFFF0);
  v338 = (uint64_t)v296;
  v252 = MEMORY[0x24BDAC7A8](v251);
  v339 = (char *)v253;
  v254 = (char *)v296 - v253;
  result = MEMORY[0x24BDAC7A8](v252);
  if (v36 >= v343[2])
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  v255 = v341;
  ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v341);
  sub_2375EAC7C();
  v44((char *)v296 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), v255);
  v256 = v342;
  v257 = sub_2375D7324((uint64_t)v254, v342, &qword_2567FB510);
  MEMORY[0x24BDAC7A8](v257);
  v258 = (char *)((char *)v296 - v339);
  sub_2375BB3E0(v256, (char *)v296 - v339, &qword_2567FB510);
  v49 = v322;
  result = v47(v258, 1, v322);
  if ((_DWORD)result == 1)
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v259 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v260 = v332;
  v259(v332, v258, v49);
  sub_2375BB424(v256, &qword_2567FB510);
  v50 = (uint64_t)v336;
  v259(v336, v260, v49);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v50, 0, 1, v49);
LABEL_18:
  swift_bridgeObjectRelease();
  sub_2375EACD0();
  v51 = *(_QWORD *)(v49 - 8);
  v313 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v52 = v313(v50, 1, v49);
  v322 = v49;
  v299 = v51;
  if (v52 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v327, 1, 1, v49);
    sub_2375BB424(v50, &qword_2567FB510);
  }
  else
  {
    v53 = v327;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v327, v50, v49);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v53, 0, 1, v49);
  }
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB518);
  v314 = v296;
  v55 = *(char **)(*(_QWORD *)(v54 - 8) + 64);
  MEMORY[0x24BDAC7A8](v54);
  v56 = (unint64_t)(v55 + 15) & 0xFFFFFFFFFFFFFFF0;
  v326 = (uint64_t)v296 - v56;
  v57 = sub_2375EACB8();
  v336 = (char *)v296;
  v332 = v55;
  v58 = MEMORY[0x24BDAC7A8](v57);
  v337 = (char *)v296 - v56;
  v343 = (_QWORD *)v58;
  v342 = *(_QWORD *)(v58 + 16);
  if (!v342)
    goto LABEL_27;
  v59 = sub_2375EAC94();
  v60 = 0;
  v341 = (_QWORD *)v59;
  v61 = *(_QWORD *)(v59 - 8);
  v62 = (char *)v343 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
  v63 = *(_QWORD *)(v61 + 64);
  v338 = *(_QWORD *)(v61 + 72);
  v339 = (char *)v61;
  v340 = *(char **)(v61 + 16);
  while (1)
  {
    v64 = MEMORY[0x24BDAC7A8](v59);
    v66 = (char *)v296 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x24BDAC7A8](v64);
    v67 = v341;
    ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), v62, v341);
    swift_bridgeObjectRetain();
    sub_2375EAC4C();
    v68 = (void (*)(char *, _QWORD *))*((_QWORD *)v339 + 1);
    v68((char *)v296 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), v67);
    swift_bridgeObjectRelease();
    v69 = sub_2375EAB74();
    v70 = *(_QWORD *)(v69 - 8);
    v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
    v72 = v71(v66, 1, v69);
    v59 = sub_2375BB424((uint64_t)v66, &qword_2567FB518);
    if (v72 != 1)
      break;
    ++v60;
    v62 += v338;
    if (v342 == v60)
      goto LABEL_27;
  }
  v321 = v69;
  if (v342 == v60)
  {
LABEL_27:
    v73 = sub_2375EAB74();
    v74 = (uint64_t)v337;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v337, 1, 1, v73);
    goto LABEL_28;
  }
  v335 = (char *)v296;
  v261 = MEMORY[0x24BDAC7A8](v59);
  v331 = (char *)v296 - ((v262 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = (char *)v296;
  v263 = v332;
  v264 = MEMORY[0x24BDAC7A8](v261);
  v342 = (uint64_t)v296 - ((unint64_t)(v263 + 15) & 0xFFFFFFFFFFFFFFF0);
  v338 = (uint64_t)v296;
  v265 = MEMORY[0x24BDAC7A8](v264);
  v339 = (char *)v266;
  v267 = (char *)v296 - v266;
  result = MEMORY[0x24BDAC7A8](v265);
  if (v60 >= v343[2])
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v268 = v341;
  ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), v62, v341);
  sub_2375EAC4C();
  v68((char *)v296 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), v268);
  v269 = v342;
  v270 = sub_2375D7324((uint64_t)v267, v342, &qword_2567FB518);
  MEMORY[0x24BDAC7A8](v270);
  v271 = (char *)((char *)v296 - v339);
  sub_2375BB3E0(v269, (char *)v296 - v339, &qword_2567FB518);
  v73 = v321;
  result = v71(v271, 1, v321);
  if ((_DWORD)result == 1)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  v272 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
  v273 = v331;
  v272(v331, v271, v73);
  sub_2375BB424(v269, &qword_2567FB518);
  v74 = (uint64_t)v337;
  v272(v337, v273, v73);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v74, 0, 1, v73);
LABEL_28:
  swift_bridgeObjectRelease();
  sub_2375EAB74();
  v75 = *(_QWORD *)(v73 - 8);
  v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  v77 = v76(v74, 1, v73);
  v321 = v73;
  v298 = v75;
  v311 = (uint64_t (*)(char *, uint64_t, uint64_t))v76;
  if (v77 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v326, 1, 1, v73);
    sub_2375BB424(v74, &qword_2567FB518);
  }
  else
  {
    v78 = v326;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v326, v74, v73);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v78, 0, 1, v73);
  }
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB520);
  v312 = v296;
  v80 = *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64);
  MEMORY[0x24BDAC7A8](v79);
  v81 = (v80 + 15) & 0xFFFFFFFFFFFFFFF0;
  v325 = (uint64_t)v296 - v81;
  v82 = sub_2375EACB8();
  v336 = (char *)v296;
  v83 = MEMORY[0x24BDAC7A8](v82);
  v335 = (char *)v296 - v81;
  v343 = (_QWORD *)v83;
  v342 = *(_QWORD *)(v83 + 16);
  v318 = v80;
  if (!v342)
    goto LABEL_37;
  v84 = sub_2375EAC94();
  v85 = 0;
  v340 = (char *)v84;
  v86 = *(_QWORD *)(v84 - 8);
  v87 = (char *)v343 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
  v341 = *(_QWORD **)(v86 + 64);
  v337 = *(char **)(v86 + 72);
  v338 = v86;
  v339 = *(char **)(v86 + 16);
  while (1)
  {
    v88 = MEMORY[0x24BDAC7A8](v84);
    v89 = v80;
    v90 = (char *)v296 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x24BDAC7A8](v88);
    v92 = (char *)v296 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
    v93 = (void (*)(_QWORD, _QWORD, _QWORD))v340;
    ((void (*)(char *, char *, char *))v339)(v92, v87, v340);
    swift_bridgeObjectRetain();
    sub_2375EAC64();
    v94 = *(void (**)(_QWORD, _QWORD))(v338 + 8);
    v94(v92, v93);
    swift_bridgeObjectRelease();
    v95 = sub_2375EAC10();
    v96 = *(_QWORD *)(v95 - 8);
    v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48);
    LODWORD(v92) = v97(v90, 1, v95);
    v84 = sub_2375BB424((uint64_t)v90, &qword_2567FB520);
    if ((_DWORD)v92 != 1)
      break;
    ++v85;
    v87 = &v337[(_QWORD)v87];
    v80 = v89;
    if (v342 == v85)
      goto LABEL_37;
  }
  v320 = v95;
  if (v342 == v85)
  {
LABEL_37:
    v98 = sub_2375EAC10();
    v99 = (uint64_t)v335;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v335, 1, 1, v98);
    goto LABEL_38;
  }
  v337 = (char *)v296;
  v274 = MEMORY[0x24BDAC7A8](v84);
  v331 = (char *)v296 - ((v275 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = (char *)v296;
  v276 = MEMORY[0x24BDAC7A8](v274);
  v277 = (v89 + 15) & 0xFFFFFFFFFFFFFFF0;
  v342 = (uint64_t)v296;
  v278 = MEMORY[0x24BDAC7A8](v276);
  v338 = (uint64_t)v296;
  result = MEMORY[0x24BDAC7A8](v278);
  v280 = (char *)v296 - ((v279 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v85 >= v343[2])
  {
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v281 = (void (*)(_QWORD, _QWORD, _QWORD))v340;
  ((void (*)(char *, char *, char *))v339)((char *)v296 - ((v279 + 15) & 0xFFFFFFFFFFFFFFF0), v87, v340);
  sub_2375EAC64();
  v94(v280, v281);
  v282 = sub_2375D7324((uint64_t)v296 - v277, (uint64_t)v296 - v277, &qword_2567FB520);
  MEMORY[0x24BDAC7A8](v282);
  sub_2375BB3E0((uint64_t)v296 - v277, (uint64_t)v296 - v277, &qword_2567FB520);
  v98 = v320;
  result = v97((char *)v296 - v277, 1, v320);
  if ((_DWORD)result == 1)
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  v283 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
  v284 = v331;
  v283(v331, (char *)v296 - v277, v98);
  sub_2375BB424((uint64_t)v296 - v277, &qword_2567FB520);
  v99 = (uint64_t)v335;
  v283(v335, v284, v98);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v99, 0, 1, v98);
LABEL_38:
  swift_bridgeObjectRelease();
  sub_2375EAC10();
  v100 = *(_QWORD *)(v98 - 8);
  v309 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
  v101 = v309(v99, 1, v98);
  v320 = v98;
  v297 = v100;
  if (v101 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56))(v325, 1, 1, v98);
    sub_2375BB424(v99, &qword_2567FB520);
  }
  else
  {
    v102 = v325;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32))(v325, v99, v98);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v102, 0, 1, v98);
  }
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB528);
  v310 = v296;
  v104 = *(char **)(*(_QWORD *)(v103 - 8) + 64);
  MEMORY[0x24BDAC7A8](v103);
  v105 = (unint64_t)(v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  v324 = (uint64_t)v296 - v105;
  v106 = sub_2375EACB8();
  v337 = (char *)v296;
  v331 = v104;
  v107 = MEMORY[0x24BDAC7A8](v106);
  v336 = (char *)v296 - v105;
  v343 = (_QWORD *)v107;
  v342 = *(_QWORD *)(v107 + 16);
  if (v342)
  {
    v108 = sub_2375EAC94();
    v109 = 0;
    v341 = (_QWORD *)v108;
    v110 = *(_QWORD *)(v108 - 8);
    v111 = (char *)v343
         + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
    v112 = *(_QWORD *)(v110 + 64);
    v338 = *(_QWORD *)(v110 + 72);
    v339 = (char *)v110;
    v340 = *(char **)(v110 + 16);
    while (1)
    {
      v113 = MEMORY[0x24BDAC7A8](v108);
      v115 = (char *)v296 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x24BDAC7A8](v113);
      v116 = v341;
      ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0), v111, v341);
      swift_bridgeObjectRetain();
      sub_2375EAC70();
      v117 = (void (*)(char *, _QWORD *))*((_QWORD *)v339 + 1);
      v117((char *)v296 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0), v116);
      swift_bridgeObjectRelease();
      v118 = sub_2375EAC40();
      v119 = *(_QWORD *)(v118 - 8);
      v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
      v121 = v120(v115, 1, v118);
      v108 = sub_2375BB424((uint64_t)v115, &qword_2567FB528);
      if (v121 != 1)
        break;
      ++v109;
      v111 += v338;
      if (v342 == v109)
        goto LABEL_47;
    }
    v319 = v118;
    if (v342 != v109)
    {
      v335 = (char *)v296;
      v285 = MEMORY[0x24BDAC7A8](v108);
      v330 = (char *)v296 - ((v286 + 15) & 0xFFFFFFFFFFFFFFF0);
      v308 = v296;
      v287 = v331;
      v288 = MEMORY[0x24BDAC7A8](v285);
      v289 = (unint64_t)(v287 + 15) & 0xFFFFFFFFFFFFFFF0;
      v342 = (uint64_t)v296 - v289;
      v339 = (char *)v296;
      v290 = MEMORY[0x24BDAC7A8](v288);
      v338 = (uint64_t)v296;
      result = MEMORY[0x24BDAC7A8](v290);
      if (v109 < v343[2])
      {
        v291 = v341;
        ((void (*)(char *, char *, _QWORD *))v340)((char *)v296 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0), v111, v341);
        sub_2375EAC70();
        v117((char *)v296 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0), v291);
        v292 = v342;
        v293 = sub_2375D7324((uint64_t)v296 - v289, v342, &qword_2567FB528);
        MEMORY[0x24BDAC7A8](v293);
        sub_2375BB3E0(v292, (uint64_t)v296 - v289, &qword_2567FB528);
        v122 = v319;
        result = v120((char *)v296 - v289, 1, v319);
        if ((_DWORD)result != 1)
        {
          v294 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
          v295 = v330;
          v294(v330, (char *)v296 - v289, v122);
          sub_2375BB424(v292, &qword_2567FB528);
          v123 = (uint64_t)v336;
          v294(v336, v295, v122);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v119 + 56))(v123, 0, 1, v122);
          goto LABEL_48;
        }
LABEL_134:
        __break(1u);
        return result;
      }
      goto LABEL_129;
    }
  }
LABEL_47:
  v122 = sub_2375EAC40();
  v123 = (uint64_t)v336;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v336, 1, 1, v122);
LABEL_48:
  swift_bridgeObjectRelease();
  sub_2375EAC40();
  v124 = *(_QWORD *)(v122 - 8);
  v307 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  v125 = v307(v123, 1, v122);
  v308 = (_QWORD *)v124;
  if (v125 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v324, 1, 1, v122);
    sub_2375BB424(v123, &qword_2567FB528);
  }
  else
  {
    v126 = v324;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 32))(v324, v123, v122);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v124 + 56))(v126, 0, 1, v122);
  }
  v127 = sub_2375EACB8();
  v128 = *(char **)(v127 + 16);
  v319 = v122;
  if (v128)
  {
    v129 = sub_2375EAC94();
    v130 = (char *)v129;
    v131 = *(_QWORD *)(v129 - 8);
    v132 = (*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
    v296[1] = v127;
    v133 = v127 + v132;
    v337 = *(char **)(v131 + 72);
    v336 = *(char **)(v131 + 64);
    v338 = v131;
    v335 = *(char **)(v131 + 16);
    v339 = (char *)MEMORY[0x24BEE4AF8];
    v330 = (char *)v129;
    do
    {
      v340 = v128;
      v342 = (uint64_t)v296;
      MEMORY[0x24BDAC7A8](v129);
      v136 = (char *)v296 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, unint64_t, char *))v335)(v136, v133, v130);
      v137 = sub_2375EAB98();
      v341 = v296;
      v138 = *(_QWORD *)(v137 - 8);
      v139 = *(_QWORD *)(v138 + 64);
      MEMORY[0x24BDAC7A8](v137);
      v140 = (v139 + 15) & 0xFFFFFFFFFFFFFFF0;
      v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB530);
      v343 = v296;
      MEMORY[0x24BDAC7A8](v141);
      v143 = (char *)v296 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2375EAC58();
      (*(void (**)(char *, char *))(v338 + 8))(v136, v130);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v143, 1, v137) == 1)
      {
        v129 = sub_2375BB424((uint64_t)v143, &qword_2567FB530);
        v134 = v340;
      }
      else
      {
        v144 = *(uint64_t (**)(char *, char *, uint64_t))(v138 + 32);
        v145 = v144((char *)v296 - v140, v143, v137);
        MEMORY[0x24BDAC7A8](v145);
        v146 = (char *)v296 - v140;
        v144((char *)v296 - v140, (char *)v296 - v140, v137);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v148 = v137;
        v343 = v296;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v339 = (char *)sub_2375B0478(0, *((_QWORD *)v339 + 2) + 1, 1, (unint64_t)v339);
        v134 = v340;
        v150 = *((_QWORD *)v339 + 2);
        v149 = *((_QWORD *)v339 + 3);
        if (v150 >= v149 >> 1)
          v339 = (char *)sub_2375B0478(v149 > 1, v150 + 1, 1, (unint64_t)v339);
        v151 = (uint64_t)v339;
        *((_QWORD *)v339 + 2) = v150 + 1;
        v129 = v144((char *)(v151+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(_QWORD *)(v138 + 72) * v150), v146, v148);
        v130 = v330;
      }
      v133 += (unint64_t)v337;
      v128 = v134 - 1;
    }
    while (v128);
    swift_bridgeObjectRelease();
    v122 = v319;
  }
  else
  {
    swift_bridgeObjectRelease();
    v339 = (char *)MEMORY[0x24BEE4AF8];
  }
  v152 = sub_2375EACA0();
  v153 = *(_QWORD *)(v152 - 8);
  MEMORY[0x24BDAC7A8](v152);
  v155 = (_QWORD *)((char *)v296 - ((v154 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2375EACAC();
  v156 = (*(uint64_t (**)(uint64_t *, uint64_t))(v153 + 88))(v155, v152);
  if (MEMORY[0x24BE0D200] && v156 == *MEMORY[0x24BE0D200])
  {
    (*(void (**)(uint64_t *, uint64_t))(v153 + 96))(v155, v152);
    v157 = sub_2375EABF8();
    v158 = *(_QWORD *)(v157 - 8);
    MEMORY[0x24BDAC7A8](v157);
    v160 = (char *)v296 - ((v159 + 15) & 0xFFFFFFFFFFFFFFF0);
    v161 = *(void (**)(char *, uint64_t *, uint64_t))(v158 + 32);
    v161(v160, v155, v157);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB548);
    v162 = (*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
    v163 = swift_allocObject();
    *(_OWORD *)(v163 + 16) = xmmword_2375F2CF0;
    v164 = ((uint64_t (*)(unint64_t, char *, uint64_t))v161)(v163 + v162, v160, v157);
  }
  else if (MEMORY[0x24BE0D1F8] && v156 == *MEMORY[0x24BE0D1F8])
  {
    v164 = (*(uint64_t (**)(uint64_t *, uint64_t))(v153 + 96))(v155, v152);
    v163 = *v155;
  }
  else
  {
    v164 = (*(uint64_t (**)(uint64_t *, uint64_t))(v153 + 8))(v155, v152);
    v163 = MEMORY[0x24BEE4AF8];
  }
  v165 = v334;
  MEMORY[0x24BDAC7A8](v164);
  v167 = (char *)v296 - ((v166 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375BB3E0(v324, (uint64_t)v167, &qword_2567FB528);
  v168 = v307((uint64_t)v167, 1, v122);
  if ((_DWORD)v168 == 1)
  {
    memset(&v352, 0, sizeof(v352));
    v353 = 1;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v168);
    v170 = (char *)v296 - ((v169 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v170, v167, v122);
    v340 = v170;
    v172 = sub_2375EAC1C();
    v173 = *(_QWORD *)(v172 + 16);
    if (v173)
    {
      v336 = (char *)v296;
      v337 = (char *)v296;
      v338 = v163;
      v352.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE4AF8];
      sub_2375D35DC(0, v173, 0);
      v174 = sub_2375EAC34();
      v175 = v174;
      v176 = *(_QWORD *)(v174 - 8);
      v177 = (*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80);
      v335 = (char *)v172;
      v178 = v172 + v177;
      v179 = *(_QWORD *)(v176 + 64);
      v342 = *(_QWORD *)(v176 + 72);
      v343 = (_QWORD *)v176;
      v341 = *(_QWORD **)(v176 + 16);
      do
      {
        MEMORY[0x24BDAC7A8](v174);
        ((void (*)(char *, unint64_t, uint64_t))v341)((char *)v296 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0), v178, v175);
        v180 = sub_2375EAC28();
        v182 = v181;
        ((void (*)(char *, uint64_t))v343[1])((char *)v296 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0), v175);
        v183 = v352.__r_.__value_.__r.__words[0];
        v174 = swift_isUniquelyReferenced_nonNull_native();
        if ((v174 & 1) == 0)
        {
          v174 = sub_2375D35DC(0, *(_QWORD *)(v183 + 16) + 1, 1);
          v183 = v352.__r_.__value_.__r.__words[0];
        }
        v185 = *(_QWORD *)(v183 + 16);
        v184 = *(_QWORD *)(v183 + 24);
        if (v185 >= v184 >> 1)
        {
          v174 = sub_2375D35DC(v184 > 1, v185 + 1, 1);
          v183 = v352.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)(v183 + 16) = v185 + 1;
        v186 = v183 + 16 * v185;
        *(_QWORD *)(v186 + 32) = v180;
        *(_QWORD *)(v186 + 40) = v182;
        v178 += v342;
        --v173;
      }
      while (v173);
      swift_bridgeObjectRelease();
      v165 = v334;
      v122 = v319;
      v163 = v338;
    }
    else
    {
      swift_bridgeObjectRelease();
      v183 = MEMORY[0x24BEE4AF8];
    }
    v352.__r_.__value_.__r.__words[0] = v183;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB538);
    sub_2375D7A40();
    v187 = sub_2375EC1F4();
    v189 = v188;
    swift_bridgeObjectRelease();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v187, v189, &v352);
    v168 = ((uint64_t (*)(char *, uint64_t))v308[1])(v340, v122);
    v353 = 0;
  }
  v190 = v323;
  MEMORY[0x24BDAC7A8](v168);
  sub_2375BB3E0(v328, (uint64_t)v296 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB508);
  v191 = v315((char *)v296 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v190);
  if ((_DWORD)v191 == 1)
  {
    memset(&v349, 0, sizeof(v349));
    v350 = 1;
  }
  else
  {
    v192 = v300;
    MEMORY[0x24BDAC7A8](v191);
    v194 = (char *)v296 - ((v193 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v194, (char *)v296 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0), v190);
    v195 = sub_2375EAB50();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v195, v196, &v349);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v194, v190);
    v350 = 0;
  }
  v197 = v333;
  v198 = v322;
  if ((v350 & 1) != 0)
  {
    memset(&v351, 0, sizeof(v351));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v351);
    v199 = sub_2375BB424((uint64_t)&v349, &qword_2567FB3D8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v351, (__n128 *)&v349);
    std::string::~string(&v349);
  }
  MEMORY[0x24BDAC7A8](v199);
  v200 = (char *)v296 - (((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375BB3E0(v327, (uint64_t)v200, &qword_2567FB510);
  v201 = v313((uint64_t)v200, 1, v198);
  if ((_DWORD)v201 == 1)
  {
    memset(&v349, 0, sizeof(v349));
    v350 = 1;
  }
  else
  {
    v202 = v299;
    MEMORY[0x24BDAC7A8](v201);
    v204 = (char *)v296 - ((v203 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v204, v200, v198);
    v205 = sub_2375EACC4();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v205, v206, &v349);
    (*(void (**)(char *, uint64_t))(v202 + 8))(v204, v198);
    v350 = 0;
  }
  v207 = v332;
  v208 = v321;
  if ((v350 & 1) != 0)
  {
    memset(&v348, 0, sizeof(v348));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v348);
    v209 = sub_2375BB424((uint64_t)&v349, &qword_2567FB3D8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v348, (__n128 *)&v349);
    std::string::~string(&v349);
  }
  MEMORY[0x24BDAC7A8](v209);
  v210 = (char *)v296 - ((unint64_t)(v207 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375BB3E0(v326, (uint64_t)v210, &qword_2567FB518);
  v211 = v311(v210, 1, v208);
  if ((_DWORD)v211 == 1)
  {
    memset(&v349, 0, sizeof(v349));
    v350 = 1;
  }
  else
  {
    v212 = v163;
    v213 = v298;
    MEMORY[0x24BDAC7A8](v211);
    v215 = (char *)v296 - ((v214 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v213 + 32))(v215, v210, v208);
    v216 = v301;
    sub_2375EAB68();
    v217 = v304;
    sub_2375CBE38(v304);
    v218 = sub_2375EAA54();
    v220 = v219;
    (*(void (**)(uint64_t, uint64_t))(v305 + 8))(v217, v306);
    (*(void (**)(char *, uint64_t))(v302 + 8))(v216, v303);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v218, v220, &v349);
    v221 = *(void (**)(char *, uint64_t))(v213 + 8);
    v163 = v212;
    v221(v215, v208);
    v350 = 0;
  }
  v222 = v318;
  v223 = v320;
  if ((v350 & 1) != 0)
  {
    memset(&v347, 0, sizeof(v347));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v347);
    v224 = sub_2375BB424((uint64_t)&v349, &qword_2567FB3D8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v347, (__n128 *)&v349);
    std::string::~string(&v349);
  }
  MEMORY[0x24BDAC7A8](v224);
  v225 = (char *)v296 - ((v222 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375BB3E0(v325, (uint64_t)v225, &qword_2567FB520);
  v226 = v309((uint64_t)v225, 1, v223);
  if ((_DWORD)v226 == 1)
  {
    memset(&v349, 0, sizeof(v349));
    v350 = 1;
  }
  else
  {
    v227 = v297;
    MEMORY[0x24BDAC7A8](v226);
    v229 = (char *)v296 - ((v228 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v227 + 32))(v229, v225, v223);
    v230 = sub_2375EAC04();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v230, v231, &v349);
    (*(void (**)(char *, uint64_t))(v227 + 8))(v229, v223);
    v350 = 0;
  }
  if ((v350 & 1) != 0)
  {
    memset(&v346, 0, sizeof(v346));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v346);
    sub_2375BB424((uint64_t)&v349, &qword_2567FB3D8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v346, (__n128 *)&v349);
    std::string::~string(&v349);
  }
  sub_2375BB3E0((uint64_t)&v352, (uint64_t)&v349, &qword_2567FB3D8);
  if ((v350 & 1) != 0)
  {
    memset(&v345, 0, sizeof(v345));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v345);
    sub_2375BB424((uint64_t)&v349, &qword_2567FB3D8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v345, (__n128 *)&v349);
    std::string::~string(&v349);
  }
  sub_2375D77B4((uint64_t)v339, (int64x2_t *)&v349);
  sub_2375D7368(v163, (uint64_t *)&v344);
  v232 = sub_2375EACDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v232 - 8) + 8))(v329, v232);
  sub_2375BB424((uint64_t)&v352, &qword_2567FB3D8);
  sub_2375BB424(v324, &qword_2567FB528);
  sub_2375BB424(v325, &qword_2567FB520);
  sub_2375BB424(v326, &qword_2567FB518);
  sub_2375BB424(v327, &qword_2567FB510);
  sub_2375BB424(v328, &qword_2567FB508);
  v233 = v317;
  std::string::basic_string[abi:ne180100](v317, (__n128 *)&v351);
  std::string::~string(&v351);
  std::string::basic_string[abi:ne180100]((__n128 *)((char *)v233 + 24), (__n128 *)&v348);
  std::string::~string(&v348);
  std::string::basic_string[abi:ne180100](v233 + 3, (__n128 *)&v347);
  std::string::~string(&v347);
  std::string::basic_string[abi:ne180100]((__n128 *)((char *)v233 + 72), (__n128 *)&v346);
  std::string::~string(&v346);
  std::string::basic_string[abi:ne180100](v233 + 6, (__n128 *)&v345);
  std::string::~string(&v345);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)((char *)v233 + 120), (__n128 *)&v349);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v349, (void (*)(uint64_t *))std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100]);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v233 + 9, &v344);
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v344, (void (*)(uint64_t *))std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_2375D7324(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2375D7368@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  __n128 Optional;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[3];
  __n128 *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(char *);
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE v44[32];
  char v45;
  std::string v46;
  std::string v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v41 = a2;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease();
  v4 = sub_2375EABF8();
  v5 = *(_QWORD **)(v4 - 8);
  v34[1] = a1;
  v34[2] = v5[9];
  v40 = v5[8];
  v37 = v5;
  v39 = (void (*)(char *))v5[2];
  v36 = &v49;
  v35 = (__n128 *)&v50;
  v38 = v4;
  do
  {
    v43 = v34;
    MEMORY[0x24BDAC7A8](v4);
    v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v42 = v8;
    v39(v7);
    v9 = sub_2375EABB0();
    v10 = *(_QWORD *)(v9 - 8);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EABBC();
    v13 = sub_2375EABA4();
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v13, v15, &v47);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB550);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
    MEMORY[0x24BDAC7A8](v16);
    v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = sub_2375EABE0();
    MEMORY[0x24BDAC7A8](v19);
    sub_2375BB3E0((uint64_t)v18, (uint64_t)v18, &qword_2567FB550);
    v20 = sub_2375EABD4();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20);
    if ((_DWORD)v22 == 1)
    {
      memset(v44, 0, sizeof(v44));
      v45 = 1;
    }
    else
    {
      MEMORY[0x24BDAC7A8](v22);
      v24 = (char *)v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v18, v20);
      v25 = sub_2375EABC8();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v25, v26, &v46);
      Optional = ctb::bridging::makeOptional((ctb::bridging *)&v46, (uint64_t)v44);
      (*(void (**)(char *, uint64_t, __n128))(v21 + 8))(v24, v20, Optional);
      v45 = 0;
    }
    sub_2375BB424((uint64_t)v18, &qword_2567FB550);
    if ((v45 & 1) != 0)
    {
      type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
      v29 = v28;
      v30 = sub_2375D26D4();
      CxxOptional.init(nilLiteral:)(v29, v30);
      sub_2375BB424((uint64_t)v44, &qword_2567FB1E0);
    }
    else
    {
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v46, (__n128 *)v44);
      ctb::chatbot::URIEntry::~URIEntry((void **)v44);
    }
    v31 = sub_2375EABEC();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v31, v32, (std::string *)v44);
    ((void (*)(char *, uint64_t))v37[1])(v7, v38);
    std::string::basic_string[abi:ne180100](&v48, (__n128 *)&v47);
    std::string::~string(&v47);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)v36, (__n128 *)&v46);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v46.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100](v35, (__n128 *)v44);
    std::string::~string((std::string *)v44);
    std::vector<ctb::CPIMEncapsulatedMessage>::push_back[abi:ne180100](v41, (__int128 *)&v48);
    ctb::CPIMEncapsulatedMessage::~CPIMEncapsulatedMessage((void **)&v48);
    --v3;
  }
  while (v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375D77B4@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  __n128 *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  std::string v33;
  __n128 v34;
  uint64_t v35;
  std::string v36;
  char v37;

  v4 = sub_2375EAA18();
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  v7 = (char **)std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  v8 = *(_QWORD *)(a1 + 16);
  v32 = a2;
  std::vector<ctb::CPIMNamespace>::reserve(v7, v8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = sub_2375EAB98();
    v11 = v10;
    v12 = *(_QWORD *)(v10 - 8);
    v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v26[1] = a1;
    v14 = a1 + v13;
    v16 = *(_QWORD *)(v12 + 64);
    v15 = *(_QWORD *)(v12 + 72);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v27 = v15;
    v28 = (__n128 *)&v35;
    while (1)
    {
      MEMORY[0x24BDAC7A8](v10);
      v29((char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v11);
      v17 = sub_2375EAB80();
      if (!v18)
        break;
      v19 = v17;
      v20 = v18;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v20, &v36);
      v37 = 0;
      swift_bridgeObjectRelease();
      if ((v37 & 1) != 0)
        goto LABEL_7;
      std::string::basic_string[abi:ne180100]((__n128 *)&v33, (__n128 *)&v36);
      std::string::~string(&v36);
LABEL_8:
      sub_2375EAB8C();
      v21 = sub_2375EAA00();
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v21, v23, &v36);
      (*(void (**)(char *, uint64_t))(v12 + 8))((char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
      std::string::basic_string[abi:ne180100](&v34, (__n128 *)&v33);
      std::string::~string(&v33);
      std::string::basic_string[abi:ne180100](v28, (__n128 *)&v36);
      std::string::~string(&v36);
      ctb::chatbot::AddressEntry::AddressEntry(v24, (__int128 *)&v34);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v34);
      std::vector<ctb::CPIMNamespace>::push_back[abi:ne180100](v32, (__int128 *)&v36);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v36.__r_.__value_.__l.__data_);
      v14 += v27;
      if (!--v9)
        return swift_bridgeObjectRelease();
    }
    memset(&v36, 0, sizeof(v36));
    v37 = 1;
LABEL_7:
    memset(&v33, 0, sizeof(v33));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v33);
    sub_2375BB424((uint64_t)&v36, &qword_2567FB3D8);
    goto LABEL_8;
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_2375D7A40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2567FB540;
  if (!qword_2567FB540)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2567FB538);
    result = MEMORY[0x23B8163BC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2567FB540);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B8163B0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t std::vector<ctb::CPIMEncapsulatedMessage>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ctb::CPIMEncapsulatedMessage>::__push_back_slow_path<ctb::CPIMEncapsulatedMessage const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage const&,ctb::CPIMEncapsulatedMessage*>((std::string *)a1[1], a2);
    result = v3 + 80;
    a1[1] = v3 + 80;
  }
  a1[1] = result;
  return result;
}

void sub_2375D7B18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void ctb::CPIMEncapsulatedMessage::~CPIMEncapsulatedMessage(void **this)
{
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((_BYTE *)this + 48) && *((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::vector<ctb::CPIMNamespace>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  int64x2_t v13;
  char *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  uint64_t v18;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v18 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(result, a2);
    v9 = *a1;
    v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      v13 = vdupq_n_s64(v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *(_OWORD *)(v8 - 48);
        *((_QWORD *)v10 - 4) = *(_QWORD *)(v8 - 32);
        *((_OWORD *)v10 - 3) = v11;
        *(_QWORD *)(v8 - 40) = 0;
        *(_QWORD *)(v8 - 32) = 0;
        *(_QWORD *)(v8 - 48) = 0;
        v12 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *(_QWORD *)(v8 - 8);
        *(_OWORD *)(v10 - 24) = v12;
        v10 -= 48;
        *(_QWORD *)(v8 - 16) = 0;
        *(_QWORD *)(v8 - 8) = 0;
        *(_QWORD *)(v8 - 24) = 0;
        v8 -= 48;
      }
      while ((char *)v8 != v9);
      v13 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v16 = v13;
    v14 = a1[2];
    a1[2] = &v6[48 * v7];
    v17 = v14;
    v15 = v13.i64[0];
    return std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)&v15);
  }
  return result;
}

uint64_t std::vector<ctb::CPIMNamespace>::push_back[abi:ne180100](int64x2_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1->u64[1];
  if (v3 >= a1[1].i64[0])
  {
    result = std::vector<ctb::CPIMNamespace>::__push_back_slow_path<ctb::CPIMNamespace const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace const&,ctb::CPIMNamespace*>((std::string *)a1->i64[1], a2);
    result = v3 + 48;
    a1->i64[1] = v3 + 48;
  }
  a1->i64[1] = result;
  return result;
}

void sub_2375D7CC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::CPIMEncapsulatedMessage>::__push_back_slow_path<ctb::CPIMEncapsulatedMessage const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[80 * v4];
  v16 = &v10[80 * v9];
  std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage const&,ctb::CPIMEncapsulatedMessage*>(v14, a2);
  v15 = &v14[3].__r_.__value_.__s.__data_[8];
  std::vector<ctb::CPIMEncapsulatedMessage>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ctb::CPIMEncapsulatedMessage>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2375D7DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::CPIMEncapsulatedMessage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage const&,ctb::CPIMEncapsulatedMessage*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (__int128 *)((char *)a2 + 24));
  v5 = (std::string *)((char *)this + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375D7E60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ctb::CPIMEncapsulatedMessage>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v8;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_BYTE *)(v4 + v5 - 56) = 0;
      *(_BYTE *)(v6 - 32) = 0;
      if (*(_BYTE *)(v2 + v5 - 32))
      {
        v9 = *(_OWORD *)(v7 - 56);
        *(_QWORD *)(v4 + v5 - 40) = *(_QWORD *)(v7 - 40);
        *(_OWORD *)(v4 + v5 - 56) = v9;
        *(_QWORD *)(v7 - 48) = 0;
        *(_QWORD *)(v7 - 40) = 0;
        *(_QWORD *)(v7 - 56) = 0;
        *(_BYTE *)(v6 - 32) = 1;
      }
      v10 = *(_OWORD *)(v7 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v7 - 8);
      *(_OWORD *)(v6 - 24) = v10;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::CPIMEncapsulatedMessage>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<ctb::CPIMNamespace>::__push_back_slow_path<ctb::CPIMNamespace const&>(int64x2_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i64;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int64x2_t v17;
  uint64_t v18;
  char *v19;
  char *v21;
  int64x2_t v22;
  char *v23;
  int64x2_t *v24;

  v3 = a1->i64[0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  i64 = (uint64_t)a1[1].i64;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v24 = a1 + 1;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(i64, v9);
  else
    v10 = 0;
  v21 = v10;
  v22.i64[0] = (uint64_t)&v10[48 * v4];
  v22.i64[1] = v22.i64[0];
  v23 = &v10[48 * v9];
  std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace const&,ctb::CPIMNamespace*>((std::string *)v22.i64[0], a2);
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  v13 = v22.i64[0];
  v14 = v22.i64[0];
  if (v11 == a1->i64[0])
  {
    v17 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      v15 = *(_OWORD *)(v11 - 48);
      *(_QWORD *)(v14 - 32) = *(_QWORD *)(v11 - 32);
      *(_OWORD *)(v14 - 48) = v15;
      *(_QWORD *)(v11 - 40) = 0;
      *(_QWORD *)(v11 - 32) = 0;
      *(_QWORD *)(v11 - 48) = 0;
      v16 = *(_OWORD *)(v11 - 24);
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v11 - 8);
      *(_OWORD *)(v14 - 24) = v16;
      v14 -= 48;
      *(_QWORD *)(v11 - 16) = 0;
      *(_QWORD *)(v11 - 8) = 0;
      *(_QWORD *)(v11 - 24) = 0;
      v11 -= 48;
    }
    while (v11 != v12);
    v17 = *a1;
  }
  v18 = v13 + 48;
  a1->i64[0] = v14;
  a1->i64[1] = v13 + 48;
  v22 = v17;
  v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  v23 = v19;
  v21 = (char *)v17.i64[0];
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)&v21);
  return v18;
}

void sub_2375D810C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace const&,ctb::CPIMNamespace*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2375D8198(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_2375D81B4(uint64_t a1@<X0>, int *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int *v40;
  std::string v41;
  std::string v42;
  BOOL v43;
  std::string v44;

  v40 = a2;
  v3 = sub_2375EAA9C();
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v36 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2375EAAB4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3D0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v35 - v13;
  v15 = sub_2375EB294();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB2A0();
  v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (MEMORY[0x24BE0DD90] && v19 == *MEMORY[0x24BE0DD90])
  {
    v39 = 1;
  }
  else if (MEMORY[0x24BE0DDA0] && v19 == *MEMORY[0x24BE0DDA0])
  {
    v39 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v39 = 0;
  }
  v20 = a1;
  sub_2375EB27C();
  sub_2375D85C0((uint64_t)v14, (uint64_t)v12);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5);
  if (v21 == 1)
  {
    memset(&v42, 0, sizeof(v42));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    v22 = v36;
    sub_2375CBE38(v36);
    v23 = sub_2375EAA54();
    v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v22, v38);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v23, v25, &v42);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v43 = v21 == 1;
  sub_2375BB424((uint64_t)v14, &qword_2567FB3D0);
  if (v43)
  {
    memset(&v44, 0, sizeof(v44));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v44);
    sub_2375BB424((uint64_t)&v42, &qword_2567FB3D8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v44, (__n128 *)&v42);
    std::string::~string(&v42);
  }
  v26 = sub_2375EB270();
  if (v27)
  {
    v28 = v26;
    v29 = v27;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v28, v29, &v42);
    v43 = 0;
    swift_bridgeObjectRelease();
    if (!v43)
    {
      std::string::basic_string[abi:ne180100]((__n128 *)&v41, (__n128 *)&v42);
      std::string::~string(&v42);
      goto LABEL_19;
    }
  }
  else
  {
    memset(&v42, 0, sizeof(v42));
    v43 = 1;
  }
  memset(&v41, 0, sizeof(v41));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v41);
  sub_2375BB424((uint64_t)&v42, &qword_2567FB3D8);
LABEL_19:
  v30 = sub_2375EB288();
  if ((v31 & 1) != 0)
  {
LABEL_22:
    v32 = 0;
    goto LABEL_23;
  }
  v32 = v30;
  if (v30 < 0)
  {
    sub_2375EC3D4();
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  v33 = sub_2375EB2AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v20, v33);
  v34 = v40;
  *v40 = v39;
  std::string::basic_string[abi:ne180100]((__n128 *)(v34 + 2), (__n128 *)&v44);
  std::string::~string(&v44);
  std::string::basic_string[abi:ne180100]((__n128 *)v34 + 2, (__n128 *)&v41);
  std::string::~string(&v41);
  *((_QWORD *)v34 + 7) = v32;
}

uint64_t sub_2375D85C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_2375D8608(uint64_t a1@<X0>, __n128 *x8_0@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t Optional;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  ctb::bridging *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  std::string v27;
  Response v28;

  v4 = sub_2375EAF1C();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v27);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB558);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = sub_2375EAF40();
  MEMORY[0x24BDAC7A8](v9);
  sub_2375D88D8((uint64_t)v25 - v8, (uint64_t)v25 - v8);
  v10 = sub_2375EAF34();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)v25 - v8, 1, v10);
  if ((_DWORD)v12 == 1)
  {
    sub_2375D8920((uint64_t)v25 - v8);
    type metadata accessor for std.__1.optional_Response_(0);
    v14 = v13;
    v15 = sub_2375D8960();
    CxxOptional.init(nilLiteral:)(v14, v15);
    v16 = sub_2375EAF4C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
    Optional = v26;
LABEL_6:
    std::string::basic_string[abi:ne180100](x8_0, (__n128 *)&v27);
    std::string::~string(&v27);
    x8_0[1].n128_u64[1] = Optional;
    return;
  }
  v25[1] = v25;
  v18 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))((char *)v25 - v19, (char *)v25 - v8, v10);
  MEMORY[0x24BDAC7A8](v20);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v25 - v19, (char *)v25 - v19, v10);
  v21 = sub_2375EAF28();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = (ctb::bridging *)v21;
    if (!HIDWORD(v21))
    {
      v23 = *(void (**)(char *, uint64_t))(v11 + 8);
      v23((char *)v25 - v19, v10);
      Optional = ctb::bridging::makeOptional(v22, v28);
      v23((char *)v25 - v19, v10);
      sub_2375D8920((uint64_t)v25 - v8);
      v24 = sub_2375EAF4C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
      v26 = Optional;
      goto LABEL_6;
    }
  }
  sub_2375EC3D4();
  __break(1u);
}

uint64_t sub_2375D88D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB558);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2375D8920(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB558);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2375D8960()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2567FAA38;
  if (!qword_2567FAA38)
  {
    type metadata accessor for std.__1.optional_Response_(255);
    result = MEMORY[0x23B8163BC](&unk_2375F1CF0, v1);
    atomic_store(result, (unint64_t *)&qword_2567FAA38);
  }
  return result;
}

uint64_t ctb::bridging::makeOptional(ctb::bridging *this, Response a2)
{
  return this | 0x100000000;
}

void sub_2375D89B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v4 = sub_2375EC1A0();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v29);
  v6 = sub_2375EC170();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v6, v7, &v28);
  v8 = sub_2375EC17C();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v8, v9, &v27);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB560);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = sub_2375EC194();
  MEMORY[0x24BDAC7A8](v13);
  sub_2375D8C5C((uint64_t)v25 - v12, (uint64_t)v25 - v12);
  v14 = sub_2375EC188();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))((char *)v25 - v12, 1, v14);
  if ((_DWORD)v16 == 1)
  {
    v17 = -1;
  }
  else
  {
    v25[3] = v25;
    v26 = a2;
    v18 = *(_QWORD *)(v15 + 64);
    MEMORY[0x24BDAC7A8](v16);
    v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    v20 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 32);
    v21 = v20((char *)v25 - v19, (char *)v25 - v12, v14);
    v25[2] = v25;
    MEMORY[0x24BDAC7A8](v21);
    v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 16))((char *)v25 - v19, (char *)v25 - v19, v14);
    v25[1] = v25;
    MEMORY[0x24BDAC7A8](v22);
    v20((char *)v25 - v19, (char *)v25 - v19, v14);
    v23 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))((char *)v25 - v19, v14);
    if (MEMORY[0x24BE0F848] && v23 == *MEMORY[0x24BE0F848])
    {
      v17 = 0;
    }
    else if (MEMORY[0x24BE0F840] && v23 == *MEMORY[0x24BE0F840])
    {
      v17 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))((char *)v25 - v19, v14);
      v17 = -1;
    }
    a2 = v26;
    (*(void (**)(char *, uint64_t))(v15 + 8))((char *)v25 - v19, v14);
  }
  v24 = sub_2375EC1AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
  sub_2375D8CA4((uint64_t)v25 - v12);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v29);
  std::string::~string(&v29);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v28);
  std::string::~string(&v28);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v27);
  std::string::~string(&v27);
  *(_DWORD *)(a2 + 72) = v17;
}

uint64_t sub_2375D8C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2375D8CA4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB560);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2375D8CE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  _DWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;

  v2 = sub_2375EB378();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (char *)&v55 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB568);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB3F0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    v10 = sub_2375EB414();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    sub_2375D94C0((uint64_t)v9);
    return 0;
  }
  v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))((char *)&v55 - v5, v9, v2);
  MEMORY[0x24BDAC7A8](v12);
  v13 = (char *)&v55 - v5;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v55 - v5, (char *)&v55 - v5, v2);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))((char *)&v55 - v5, v2);
  if (MEMORY[0x24BE0DFB8] && v14 == *MEMORY[0x24BE0DFB8])
  {
    v58 = &v55;
    (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v55 - v5, v2);
    v15 = sub_2375EB3E4();
    v56 = &v55;
    v16 = *(_QWORD *)(v15 - 8);
    MEMORY[0x24BDAC7A8](v15);
    v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v13, v15);
    v57 = sub_2375EB3CC();
    v55 = (uint64_t)&v55;
    v19 = *(_QWORD *)(v57 - 8);
    MEMORY[0x24BDAC7A8](v57);
    v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB360();
    v22 = sub_2375EB414();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v23 = v2;
    v24 = v57;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v23);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v24);
    if (MEMORY[0x24BE0E0E0] && v25 == *MEMORY[0x24BE0E0E0])
      return 1;
    if (MEMORY[0x24BE0E0D8] && v25 == *MEMORY[0x24BE0E0D8] || MEMORY[0x24BE0E0F8] && v25 == *MEMORY[0x24BE0E0F8])
      return 4;
    v54 = (_DWORD *)MEMORY[0x24BE0E0C8];
    if (!MEMORY[0x24BE0E0C8])
      goto LABEL_50;
    goto LABEL_43;
  }
  if (MEMORY[0x24BE0DFA8] && v14 == *MEMORY[0x24BE0DFA8])
  {
    v58 = &v55;
    (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v55 - v5, v2);
    v26 = sub_2375EB3C0();
    v56 = &v55;
    v27 = *(_QWORD *)(v26 - 8);
    MEMORY[0x24BDAC7A8](v26);
    v29 = (char *)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v13, v26);
    v57 = sub_2375EB3A8();
    v55 = (uint64_t)&v55;
    v30 = *(_QWORD *)(v57 - 8);
    MEMORY[0x24BDAC7A8](v57);
    v32 = (char *)&v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB360();
    v33 = sub_2375EB414();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    v34 = v2;
    v35 = v57;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v34);
    v36 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v32, v35);
    if (MEMORY[0x24BE0E078] && v36 == *MEMORY[0x24BE0E078])
      return 3;
    if (MEMORY[0x24BE0E080] && v36 == *MEMORY[0x24BE0E080] || MEMORY[0x24BE0E068] && v36 == *MEMORY[0x24BE0E068])
      return 4;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v35);
    return 0;
  }
  if (!MEMORY[0x24BE0DF90] || v14 != *MEMORY[0x24BE0DF90])
  {
    if (!MEMORY[0x24BE0DFA0] || v14 != *MEMORY[0x24BE0DFA0])
    {
      v52 = sub_2375EB414();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(a1, v52);
      v53 = *(void (**)(char *, uint64_t))(v3 + 8);
      v53((char *)&v55 - v5, v2);
      v53((char *)&v55 - v5, v2);
      return 0;
    }
    v58 = &v55;
    (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v55 - v5, v2);
    v44 = sub_2375EB39C();
    v56 = &v55;
    v45 = *(_QWORD *)(v44 - 8);
    MEMORY[0x24BDAC7A8](v44);
    v47 = (char *)&v55 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v47, v13, v44);
    v57 = sub_2375EB384();
    v55 = (uint64_t)&v55;
    v19 = *(_QWORD *)(v57 - 8);
    MEMORY[0x24BDAC7A8](v57);
    v21 = (char *)&v55 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB360();
    v49 = sub_2375EB414();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(a1, v49);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
    v50 = v2;
    v24 = v57;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v50);
    v51 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v24);
    if (MEMORY[0x24BE0E020] && v51 == *MEMORY[0x24BE0E020] || MEMORY[0x24BE0E018] && v51 == *MEMORY[0x24BE0E018])
      return 2;
    if (MEMORY[0x24BE0E008] && v51 == *MEMORY[0x24BE0E008] || MEMORY[0x24BE0DFF8] && v51 == *MEMORY[0x24BE0DFF8])
      return 5;
    goto LABEL_50;
  }
  v58 = &v55;
  (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v55 - v5, v2);
  v37 = sub_2375EB36C();
  v56 = &v55;
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v55 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v40, v13, v37);
  v57 = sub_2375EB354();
  v55 = (uint64_t)&v55;
  v19 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v21 = (char *)&v55 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB360();
  v42 = sub_2375EB414();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
  v43 = v2;
  v24 = v57;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v43);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v24);
  if (MEMORY[0x24BE0DF50] && v25 == *MEMORY[0x24BE0DF50])
    return 6;
  if (MEMORY[0x24BE0DF30] && v25 == *MEMORY[0x24BE0DF30])
    return 7;
  if (MEMORY[0x24BE0DF48] && v25 == *MEMORY[0x24BE0DF48])
    return 4;
  v54 = (_DWORD *)MEMORY[0x24BE0DF28];
  if (MEMORY[0x24BE0DF28])
  {
LABEL_43:
    if (v25 == *v54)
      return 4;
  }
LABEL_50:
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v24);
  return 0;
}

uint64_t sub_2375D94C0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB568);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_2375D9500(uint64_t a1)
{
  double v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = sub_2375EC134();
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2375EADA8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a1;
  sub_2375EACE8();
  v9 = sub_2375EC164();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EAD9C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = sub_2375EC14C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EC158();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v17 = sub_2375EC0E0();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EC140();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  if (MEMORY[0x24BE0F748] && v21 == *MEMORY[0x24BE0F748])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    v22 = sub_2375EC110();
    v23 = *(_QWORD *)(v22 - 8);
    MEMORY[0x24BDAC7A8](v22);
    v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v25, v20, v22);
    v27 = v35;
    MEMORY[0x23B815B7C](v26);
  }
  else
  {
    if (!MEMORY[0x24BE0F740] || v21 != *MEMORY[0x24BE0F740])
    {
      sub_2375D98C0();
      swift_allocError();
      *v32 = 0xD000000000000016;
      v32[1] = 0x80000002375F03E0;
      swift_willThrow();
      v33 = sub_2375EACF4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v38, v33);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      return v1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    v22 = sub_2375EC0F8();
    v23 = *(_QWORD *)(v22 - 8);
    MEMORY[0x24BDAC7A8](v22);
    v25 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v25, v20, v22);
    v27 = v35;
    MEMORY[0x23B815B64](v29);
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  sub_2375EC11C();
  v1 = v30;
  sub_2375EC128();
  v31 = sub_2375EACF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v38, v31);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v37);
  return v1;
}

unint64_t sub_2375D98C0()
{
  unint64_t result;

  result = qword_2567FB570;
  if (!qword_2567FB570)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F2C9C, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_2567FB570);
  }
  return result;
}

uint64_t FileTransferInfo.fileInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2375DA01C(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for FileInfo);
}

uint64_t FileTransferInfo.thumbnailInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FileTransferInfo() + 20);
  return sub_2375D9994(v3, a1);
}

uint64_t type metadata accessor for FileTransferInfo()
{
  uint64_t result;

  result = qword_2567FB5F8;
  if (!qword_2567FB5F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2375D9994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2375D99DC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x69616E626D756874;
  else
    return 0x6F666E49656C6966;
}

BOOL sub_2375D9A20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2375D9A38()
{
  sub_2375EC4D0();
  sub_2375EC4DC();
  return sub_2375EC4E8();
}

uint64_t sub_2375D9A7C()
{
  return sub_2375EC4DC();
}

uint64_t sub_2375D9AA4()
{
  sub_2375EC4D0();
  sub_2375EC4DC();
  return sub_2375EC4E8();
}

uint64_t sub_2375D9AE4()
{
  char *v0;

  return sub_2375D99DC(*v0);
}

uint64_t sub_2375D9AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2375DB030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2375D9B10()
{
  return 0;
}

void sub_2375D9B1C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2375D9B28()
{
  sub_2375D9CF0();
  return sub_2375EC524();
}

uint64_t sub_2375D9B50()
{
  sub_2375D9CF0();
  return sub_2375EC530();
}

uint64_t FileTransferInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB578);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2375D9CF0();
  sub_2375EC500();
  v8[15] = 0;
  type metadata accessor for FileInfo();
  sub_2375D9FDC(&qword_2567FB588, (uint64_t)&protocol conformance descriptor for FileInfo);
  sub_2375EC470();
  if (!v1)
  {
    type metadata accessor for FileTransferInfo();
    v8[14] = 1;
    sub_2375EC44C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_2375D9CF0()
{
  unint64_t result;

  result = qword_2567FB580;
  if (!qword_2567FB580)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F2E44, &type metadata for FileTransferInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB580);
  }
  return result;
}

uint64_t FileTransferInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  char v26;

  v20 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for FileInfo();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB590);
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FileTransferInfo();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2375D9CF0();
  sub_2375EC4F4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v19 = v10;
  v13 = (uint64_t)v12;
  v26 = 0;
  sub_2375D9FDC(&qword_2567FB598, (uint64_t)&protocol conformance descriptor for FileInfo);
  v14 = v23;
  sub_2375EC434();
  v15 = (uint64_t)v24;
  v24 = (char *)v13;
  sub_2375BA038(v15, v13);
  v25 = 1;
  v16 = (uint64_t)v21;
  sub_2375EC410();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v14);
  v17 = (uint64_t)v24;
  sub_2375BA07C(v16, (uint64_t)&v24[*(int *)(v19 + 20)]);
  sub_2375DA01C(v17, v20, (uint64_t (*)(_QWORD))type metadata accessor for FileTransferInfo);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_2375DA060(v17, (uint64_t (*)(_QWORD))type metadata accessor for FileTransferInfo);
}

uint64_t sub_2375D9FDC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FileInfo();
    result = MEMORY[0x23B8163BC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2375DA01C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2375DA060(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2375DA09C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FileTransferInfo.init(from:)(a1, a2);
}

uint64_t sub_2375DA0B0(_QWORD *a1)
{
  return FileTransferInfo.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for FileTransferInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v28;
  char *v29;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = a2[5];
    v8 = type metadata accessor for FileInfo();
    v9 = *(int *)(v8 + 36);
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_2375EAA18();
    v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(v8 + 40);
    v15 = (char *)v4 + v14;
    v16 = (uint64_t)a2 + v14;
    v17 = sub_2375EAAB4();
    v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v19 = *(int *)(a3 + 20);
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v8))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *v20 = *v21;
      v20[1] = v21[1];
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
      v25 = *((_QWORD *)v21 + 4);
      *((_QWORD *)v20 + 3) = *((_QWORD *)v21 + 3);
      *((_QWORD *)v20 + 4) = v25;
      *((_QWORD *)v20 + 5) = *((_QWORD *)v21 + 5);
      v26 = *(int *)(v8 + 36);
      v28 = &v21[v26];
      v29 = &v20[v26];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v29, (uint64_t)v28, v12);
      v18(&v20[*(int *)(v8 + 40)], (uint64_t)&v21[*(int *)(v8 + 40)], v17);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v8);
    }
  }
  return v4;
}

uint64_t destroy for FileTransferInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for FileInfo();
  v5 = a1 + *(int *)(v4 + 36);
  v6 = sub_2375EAA18();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = a1 + *(int *)(v4 + 40);
  v9 = sub_2375EAAB4();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v12(v8, v9);
  v10 = a1 + *(int *)(a2 + 20);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1, v4);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7(v10 + *(int *)(v4 + 36), v6);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10 + *(int *)(v4 + 40), v9);
  }
  return result;
}

uint64_t initializeWithCopy for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v26;
  _BYTE *v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = type metadata accessor for FileInfo();
  v8 = *(int *)(v7 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2375EAA18();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = *(int *)(v7 + 40);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_2375EAAB4();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v18 = *(int *)(a3 + 20);
  v19 = (_BYTE *)(a1 + v18);
  v20 = (_BYTE *)(a2 + v18);
  v21 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v7))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v19[1] = v20[1];
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
    v23 = *((_QWORD *)v20 + 4);
    *((_QWORD *)v19 + 3) = *((_QWORD *)v20 + 3);
    *((_QWORD *)v19 + 4) = v23;
    *((_QWORD *)v19 + 5) = *((_QWORD *)v20 + 5);
    v24 = *(int *)(v7 + 36);
    v26 = &v20[v24];
    v27 = &v19[v24];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12((uint64_t)v27, (uint64_t)v26, v11);
    v17((uint64_t)&v19[*(int *)(v7 + 40)], (uint64_t)&v20[*(int *)(v7 + 40)], v16);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithCopy for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for FileInfo();
  v7 = *(int *)(v6 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_2375EAA18();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 24);
  v31 = v10;
  v12(v8, v9);
  v13 = *(int *)(v6 + 40);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_2375EAAB4();
  v30 = *(_QWORD *)(v16 - 8);
  v17 = *(void (**)(uint64_t, uint64_t))(v30 + 24);
  v32 = v16;
  v17(v14, v15);
  v18 = *(int *)(a3 + 20);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(v6 - 8);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v14) = v22(a1 + v18, 1, v6);
  v23 = v22(v20, 1, v6);
  if (!(_DWORD)v14)
  {
    if (!v23)
    {
      *(_BYTE *)v19 = *(_BYTE *)v20;
      *(_BYTE *)(v19 + 1) = *(_BYTE *)(v20 + 1);
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v19 + *(int *)(v6 + 36), v20 + *(int *)(v6 + 36), v31);
      ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v19 + *(int *)(v6 + 40), v20 + *(int *)(v6 + 40), v32);
      return a1;
    }
    sub_2375DA060(v19, (uint64_t (*)(_QWORD))type metadata accessor for FileInfo);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
    memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *(_BYTE *)v19 = *(_BYTE *)v20;
  *(_BYTE *)(v19 + 1) = *(_BYTE *)(v20 + 1);
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  v24 = *(int *)(v6 + 36);
  v25 = v19 + v24;
  v26 = v20 + v24;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v25, v26, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v19 + *(int *)(v6 + 40), v20 + *(int *)(v6 + 40), v32);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v6);
  return a1;
}

uint64_t initializeWithTake for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = type metadata accessor for FileInfo();
  v8 = *(int *)(v7 + 36);
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = sub_2375EAA18();
  v12 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = *(int *)(v7 + 40);
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = sub_2375EAAB4();
  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v18 = *(int *)(a3 + 20);
  v19 = (_BYTE *)(a1 + v18);
  v20 = (_BYTE *)(a2 + v18);
  v21 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v7))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v19[1] = v20[1];
    *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
    v23 = *((_OWORD *)v20 + 2);
    *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
    *((_OWORD *)v19 + 2) = v23;
    v12(&v19[*(int *)(v7 + 36)], &v20[*(int *)(v7 + 36)], v11);
    v17(&v19[*(int *)(v7 + 40)], &v20[*(int *)(v7 + 40)], v16);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for FileInfo();
  v8 = *(int *)(v7 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2375EAA18();
  v29 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v29 + 40);
  v31 = v11;
  v12(v9, v10);
  v13 = *(int *)(v7 + 40);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_2375EAAB4();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 40);
  v30 = v16;
  v18(v14, v15);
  v19 = *(int *)(a3 + 20);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(v7 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v14) = v23(a1 + v19, 1, v7);
  v24 = v23(v21, 1, v7);
  if (!(_DWORD)v14)
  {
    if (!v24)
    {
      *(_BYTE *)v20 = *(_BYTE *)v21;
      *(_BYTE *)(v20 + 1) = *(_BYTE *)(v21 + 1);
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v21 + 40);
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
      *(_QWORD *)(v20 + 40) = v28;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v20 + *(int *)(v7 + 36), v21 + *(int *)(v7 + 36), v31);
      ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v20 + *(int *)(v7 + 40), v21 + *(int *)(v7 + 40), v30);
      return a1;
    }
    sub_2375DA060(v20, (uint64_t (*)(_QWORD))type metadata accessor for FileInfo);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
    memcpy((void *)v20, (const void *)v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  *(_BYTE *)v20 = *(_BYTE *)v21;
  *(_BYTE *)(v20 + 1) = *(_BYTE *)(v21 + 1);
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  v25 = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
  *(_OWORD *)(v20 + 32) = v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v20 + *(int *)(v7 + 36), v21 + *(int *)(v7 + 36), v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v20 + *(int *)(v7 + 40), v21 + *(int *)(v7 + 40), v30);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileTransferInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2375DAC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FileInfo();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for FileTransferInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2375DAC84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FileInfo();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_2375DAD04()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for FileInfo();
  if (v0 <= 0x3F)
  {
    sub_2375DAD88();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_2375DAD88()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2567FB608[0])
  {
    type metadata accessor for FileInfo();
    v0 = sub_2375EC320();
    if (!v1)
      atomic_store(v0, qword_2567FB608);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FileTransferInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FileTransferInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2375DAEC4 + 4 * byte_2375F2D05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2375DAEF8 + 4 * byte_2375F2D00[v4]))();
}

uint64_t sub_2375DAEF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375DAF00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2375DAF08);
  return result;
}

uint64_t sub_2375DAF14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2375DAF1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2375DAF20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375DAF28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375DAF34(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_2375DAF3C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FileTransferInfo.CodingKeys()
{
  return &type metadata for FileTransferInfo.CodingKeys;
}

unint64_t sub_2375DAF5C()
{
  unint64_t result;

  result = qword_2567FB638;
  if (!qword_2567FB638)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F2E1C, &type metadata for FileTransferInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB638);
  }
  return result;
}

unint64_t sub_2375DAFA4()
{
  unint64_t result;

  result = qword_2567FB640;
  if (!qword_2567FB640)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F2D8C, &type metadata for FileTransferInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB640);
  }
  return result;
}

unint64_t sub_2375DAFEC()
{
  unint64_t result;

  result = qword_2567FB648;
  if (!qword_2567FB648)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F2DB4, &type metadata for FileTransferInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB648);
  }
  return result;
}

uint64_t sub_2375DB030(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6F666E49656C6966 && a2 == 0xE800000000000000;
  if (v3 || (sub_2375EC488() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69616E626D756874 && a2 == 0xED00006F666E496CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2375EC488();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2375DB130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 Optional;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[144];
  uint64_t v24;
  char v25;
  _BYTE v26[152];
  __int128 v27[9];

  v22 = a2;
  v3 = sub_2375EAD78();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375EAFD0();
  sub_2375DB5DC((uint64_t)&v21 - v6, (uint64_t)v27);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB1B8);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = a1;
  v10 = sub_2375EAFDC();
  MEMORY[0x24BDAC7A8](v10);
  sub_2375BB3E0((uint64_t)&v21 - v9, (uint64_t)&v21 - v9, &qword_2567FB1B8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))((char *)&v21 - v9, 1, v3);
  if ((_DWORD)v11 == 1)
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    v25 = 1;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v11);
    v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))((char *)&v21 - v6, (char *)&v21 - v9, v3);
    MEMORY[0x24BDAC7A8](v12);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)&v21 - v6, (char *)&v21 - v6, v3);
    sub_2375DB5DC((uint64_t)&v21 - v6, (uint64_t)v26);
    Optional = ctb::bridging::makeOptional((uint64_t)v26, (uint64_t)v23);
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))((char *)&v21 - v6, v3, Optional);
    v25 = 0;
  }
  sub_2375BB424((uint64_t)&v21 - v9, &qword_2567FB1B8);
  if ((v25 & 1) != 0)
  {
    type metadata accessor for std.__1.optional_FileDescriptor_(0);
    v15 = v14;
    v16 = sub_2375B42FC(&qword_2567FAA20, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_FileDescriptor_, (uint64_t)&unk_2375F1C9C);
    CxxOptional.init(nilLiteral:)(v15, v16);
    v17 = sub_2375EAFE8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v21, v17);
    sub_2375BB424((uint64_t)v23, &qword_2567FB650);
  }
  else
  {
    v18 = sub_2375EAFE8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v21, v18);
    std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](v26, v23);
    std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional(v23);
  }
  v19 = v22;
  ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(v22, v27);
  ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor((void **)v27);
  std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](v19 + 144, v26);
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional(v26);
}

uint64_t sub_2375DB3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v0 = sub_2375EAA18();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EAD48();
  if (!v4)
    return sub_2375EAD00();
  sub_2375EAA0C();
  v5 = sub_2375EA9F4();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    swift_bridgeObjectRelease();
    return sub_2375EAD00();
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB658);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2375EAAFC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  sub_2375EAAF0();
  sub_2375EAAD8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_2375BB424((uint64_t)v11, &qword_2567FB658);
    return sub_2375EAD00();
  }
  v14 = sub_2375EAAE4();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  if (!v16)
    return sub_2375EAD00();
  return v14;
}

void sub_2375DB5DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t Optional;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[4];
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  _BYTE v115[32];
  char v116;
  std::string v117;
  uint64_t v118;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB490);
  MEMORY[0x24BDAC7A8](v4);
  v110 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_2375EAACC();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v90 = (char *)v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_2375EAA90();
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  v103 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_2375EAA78();
  v98 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v109 = (char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_2375EAA60();
  v96 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8](v97);
  v10 = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_2375EAA6C();
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v12 = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_2375EAA9C();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v87 = (char *)v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_2375EAAB4();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v15 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_2375EAA18();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v91 = (char *)v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_2375EAD3C();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EAD60();
  v21 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  v108 = v10;
  v107 = v12;
  v99 = v15;
  if (MEMORY[0x24BE0D318] && v21 == *MEMORY[0x24BE0D318])
  {
    v22 = 1;
LABEL_7:
    v84 = v22;
    goto LABEL_9;
  }
  if (MEMORY[0x24BE0D320] && v21 == *MEMORY[0x24BE0D320])
  {
    v22 = 2;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v84 = 0;
LABEL_9:
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB4B0);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_2375EAD18();
  v106 = v81;
  MEMORY[0x24BDAC7A8](v26);
  sub_2375BB3E0((uint64_t)v25, (uint64_t)v25, &qword_2567FB4B0);
  v27 = sub_2375EAD0C();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v27);
  v30 = v29;
  Optional = 0;
  if ((_DWORD)v29 != 1)
  {
    v81[3] = v81;
    v82 = a1;
    v83 = a2;
    v81[0] = v81;
    v32 = *(_QWORD *)(v28 + 64);
    MEMORY[0x24BDAC7A8](v29);
    v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    v34 = (char *)v81 - v33;
    v35 = *(uint64_t (**)(char *, char *, uint64_t))(v28 + 32);
    v36 = v35((char *)v81 - v33, v25, v27);
    v81[2] = v81;
    MEMORY[0x24BDAC7A8](v36);
    v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 16))((char *)v81 - v33, (char *)v81 - v33, v27);
    v81[1] = v81;
    MEMORY[0x24BDAC7A8](v37);
    v35((char *)v81 - v33, (char *)v81 - v33, v27);
    v38 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))((char *)v81 - v33, v27);
    if (MEMORY[0x24BE0D2C8] && v38 == *MEMORY[0x24BE0D2C8])
    {
      v39 = 1;
    }
    else if (MEMORY[0x24BE0D2C0] && v38 == *MEMORY[0x24BE0D2C0])
    {
      v39 = 2;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))((char *)v81 - v33, v27);
      v39 = 0;
    }
    a2 = v83;
    a1 = v82;
    Optional = ctb::bridging::makeOptional(v39);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v27);
  }
  sub_2375BB424((uint64_t)v25, &qword_2567FB4B0);
  if (v30 == 1)
  {
    type metadata accessor for std.__1.optional___(0);
    v41 = v40;
    v42 = sub_2375B42FC(&qword_2567FAA18, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional___, (uint64_t)&unk_2375F1C80);
    CxxOptional.init(nilLiteral:)(v41, v42);
    Optional = v118;
  }
  else
  {
    v118 = Optional;
  }
  v43 = v109;
  v44 = v108;
  v45 = v107;
  v46 = v110;
  v47 = sub_2375EAD54();
  v48 = sub_2375EAD48();
  v109 = (char *)Optional;
  v106 = (_QWORD *)v47;
  if (v49)
  {
    v50 = v48;
    v51 = v49;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v50, v51, &v117);
    ctb::bridging::makeOptional((ctb::bridging *)&v117, (uint64_t)v115);
    v116 = 0;
    swift_bridgeObjectRelease();
    if ((v116 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v117, (__n128 *)v115);
      ctb::chatbot::URIEntry::~URIEntry((void **)v115);
      goto LABEL_26;
    }
  }
  else
  {
    memset(v115, 0, sizeof(v115));
    v116 = 1;
  }
  type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
  v53 = v52;
  v54 = sub_2375B42FC((unint64_t *)&qword_2567FAAD8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___, (uint64_t)&unk_2375F1F20);
  CxxOptional.init(nilLiteral:)(v53, v54);
  sub_2375BB424((uint64_t)v115, &qword_2567FB1E0);
LABEL_26:
  v55 = sub_2375DB3FC();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v55, v56, (std::string *)v115);
  v57 = v91;
  sub_2375EAD30();
  v58 = sub_2375EAA00();
  v60 = v59;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v57, v93);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v58, v60, &v114);
  v61 = v99;
  sub_2375EAD6C();
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v45, *MEMORY[0x24BDCE368], v95);
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v44, *MEMORY[0x24BDCE348], v97);
  (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v43, *MEMORY[0x24BDCE388], v100);
  (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v103, *MEMORY[0x24BDCE3D0], v102);
  sub_2375EAAC0();
  v62 = v104;
  v63 = v105;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v46, 1, v105) == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v90, v46, v63);
    v64 = v87;
    sub_2375EAA84();
    v65 = sub_2375EAA54();
    v67 = v66;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v64, v89);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v61, v86);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v65, v67, &v113);
    v68 = sub_2375EAD24();
    if ((v69 & 1) != 0)
    {
      type metadata accessor for std.__1.optional_CUnsignedLong_(0);
      v78 = v77;
      v79 = sub_2375B42FC(&qword_2567FAA58, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.optional_CUnsignedLong_, (uint64_t)&unk_2375F1D60);
      CxxOptional.init(nilLiteral:)(v78, v79);
      v80 = sub_2375EAD78();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(a1, v80);
      v73 = v111;
      v75 = v112;
      v70 = v109;
      v71 = v106;
      goto LABEL_31;
    }
    v70 = v109;
    v71 = v106;
    if ((v68 & 0x8000000000000000) == 0)
    {
      ctb::bridging::makeOptional((ctb::bridging *)v68);
      v73 = v72;
      v75 = v74 & 1;
      v76 = sub_2375EAD78();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(a1, v76);
      v111 = v73;
      v112 = v75;
LABEL_31:
      *(_DWORD *)a2 = v84;
      *(_QWORD *)(a2 + 4) = v70;
      *(_QWORD *)(a2 + 16) = v71;
      std::optional<std::string>::optional[abi:ne180100](a2 + 24, (__n128 *)&v117);
      ctb::chatbot::URIEntry::~URIEntry((void **)&v117.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 56), (__n128 *)v115);
      std::string::~string((std::string *)v115);
      std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 80), (__n128 *)&v114);
      std::string::~string(&v114);
      std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 104), (__n128 *)&v113);
      std::string::~string(&v113);
      *(_QWORD *)(a2 + 128) = v73;
      *(_QWORD *)(a2 + 136) = v75;
      return;
    }
  }
  sub_2375EC3D4();
  __break(1u);
}

uint64_t sub_2375DC120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  __n128 Optional;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t result;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[3];
  char v124;
  __int128 v125[24];
  uint64_t v126;
  _BYTE v127[64];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char v153;
  char v154;
  __int128 v155[33];
  _OWORD v156[3];
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  _OWORD v161[2];
  uint64_t v162;
  Vers v163;

  v118 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB660);
  MEMORY[0x24BDAC7A8](v3);
  v120 = v4;
  v121 = (uint64_t)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375DD61C(v121);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB668);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = a1;
  v8 = sub_2375EB420();
  MEMORY[0x24BDAC7A8](v8);
  sub_2375BB3E0((uint64_t)v7, (uint64_t)v7, &qword_2567FB668);
  v9 = sub_2375EB000();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    *(_QWORD *)&v130 = 0;
    v128 = 0u;
    v129 = 0u;
    BYTE8(v130) = 1;
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))((char *)&v111 - v13, v7, v9);
    MEMORY[0x24BDAC7A8](v14);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)&v111 - v13, (char *)&v111 - v13, v9);
    v15 = sub_2375EAFF4();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v15, v16, (std::string *)((char *)&v128 + 8));
    *(_QWORD *)&v128 = 0;
    v17 = *(void (**)(char *, uint64_t))(v10 + 8);
    v17((char *)&v111 - v13, v9);
    ctb::ProvisioningConfiguration::Token::Token((uint64_t)v155, (uint64_t)&v128);
    ctb::ProvisioningConfiguration::Token::~Token((void **)&v128);
    Optional = ctb::bridging::makeOptional((uint64_t)v155, (uint64_t)&v128);
    ((void (*)(char *, uint64_t, __n128))v17)((char *)&v111 - v13, v9, Optional);
    BYTE8(v130) = 0;
  }
  sub_2375BB424((uint64_t)v7, &qword_2567FB668);
  if ((BYTE8(v130) & 1) != 0)
  {
    v162 = 0;
    memset(v161, 0, sizeof(v161));
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](v161);
    sub_2375BB424((uint64_t)&v128, &qword_2567FB670);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100]((uint64_t)v161, (uint64_t)&v128);
    std::optional<ctb::ProvisioningConfiguration::Token>::~optional((uint64_t)&v128);
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB678);
  v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_2375EB42C();
  v119 = &v111;
  MEMORY[0x24BDAC7A8](v22);
  sub_2375BB3E0((uint64_t)v21, (uint64_t)v21, &qword_2567FB678);
  v23 = sub_2375EB1EC();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23);
  v26 = v25;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if ((_DWORD)v25 != 1)
  {
    v116 = &v111;
    v117 = &v111;
    v30 = *(_QWORD *)(v24 + 64);
    MEMORY[0x24BDAC7A8](v25);
    v31 = (char *)&v111 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v31, v21, v23);
    MEMORY[0x24BDAC7A8](v32);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v31, v31, v23);
    v33 = sub_2375EB1D4();
    v34 = sub_2375EB1E0();
    v35 = *(void (**)(char *, uint64_t))(v24 + 8);
    v35(v31, v23);
    v163.var0 = v34;
    ctb::bridging::makeOptional(v33, v163, (uint64_t)&v128);
    v28 = (uint64_t *)*((_QWORD *)&v128 + 1);
    v27 = (uint64_t *)v128;
    v29 = (uint64_t *)v129;
    v35(v31, v23);
  }
  sub_2375BB424((uint64_t)v21, &qword_2567FB678);
  if (v26 == 1)
  {
    v158 = 0;
    v159 = 0;
    v160 = 0;
    std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::optional[abi:ne180100](&v158);
    v119 = v160;
    v116 = v158;
    v117 = v159;
  }
  else
  {
    v116 = v27;
    v117 = v28;
    v158 = v27;
    v159 = v28;
    v119 = v29;
    v160 = v29;
  }
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB680);
  v37 = *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v111 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_2375EB444();
  MEMORY[0x24BDAC7A8](v39);
  sub_2375BB3E0((uint64_t)v38, (uint64_t)v38, &qword_2567FB680);
  v40 = sub_2375EB558();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40);
  if ((_DWORD)v42 == 1)
  {
    *(_QWORD *)&v131 = 0;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    BYTE8(v131) = 1;
  }
  else
  {
    v115 = &v111;
    v43 = *(_QWORD *)(v41 + 64);
    MEMORY[0x24BDAC7A8](v42);
    v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0;
    v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))((char *)&v111 - v44, v38, v40);
    MEMORY[0x24BDAC7A8](v45);
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)&v111 - v44, (char *)&v111 - v44, v40);
    sub_2375DD7F8((uint64_t)&v111 - v44, (uint64_t)v155);
    v46 = ctb::bridging::makeOptional((uint64_t)v155, (uint64_t)&v128);
    (*(void (**)(char *, uint64_t, double))(v41 + 8))((char *)&v111 - v44, v40, v46);
    BYTE8(v131) = 0;
  }
  sub_2375BB424((uint64_t)v38, &qword_2567FB680);
  if ((BYTE8(v131) & 1) != 0)
  {
    v157 = 0;
    memset(v156, 0, sizeof(v156));
    std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](v156);
    sub_2375BB424((uint64_t)&v128, &qword_2567FB688);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100]((uint64_t)v156, (uint64_t)&v128);
    std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional(&v128);
  }
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB690);
  v48 = *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64);
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v111 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_2375DD3F8((uint64_t)v49);
  MEMORY[0x24BDAC7A8](v50);
  sub_2375BB3E0((uint64_t)v49, (uint64_t)v49, &qword_2567FB690);
  v51 = sub_2375EB168();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v49, 1, v51);
  if ((_DWORD)v53 == 1)
  {
    bzero(&v128, 0x218uLL);
    v154 = 1;
  }
  else
  {
    v115 = &v111;
    v54 = *(_QWORD *)(v52 + 64);
    MEMORY[0x24BDAC7A8](v53);
    v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
    v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v52 + 32))((char *)&v111 - v55, v49, v51);
    MEMORY[0x24BDAC7A8](v56);
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))((char *)&v111 - v55, (char *)&v111 - v55, v51);
    sub_2375DDC04((uint64_t)&v111 - v55, (uint64_t)v155);
    v57 = ctb::bridging::makeOptional(v155, (uint64_t)&v128);
    (*(void (**)(char *, uint64_t, double))(v52 + 8))((char *)&v111 - v55, v51, v57);
    v154 = 0;
  }
  v58 = v120;
  v59 = v121;
  sub_2375BB424((uint64_t)v49, &qword_2567FB690);
  if ((v154 & 1) != 0)
  {
    bzero(v155, 0x218uLL);
    std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](v155);
    v60 = sub_2375BB424((uint64_t)&v128, &qword_2567FB698);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](v155, (uint64_t)&v128);
    std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional((ctb::ProvisioningConfiguration::IMS3GPP *)&v128);
  }
  MEMORY[0x24BDAC7A8](v60);
  sub_2375BB3E0(v59, (uint64_t)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB660);
  v61 = sub_2375EB69C();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = *(uint64_t **)(v62 + 48);
  v64 = ((uint64_t (*)(char *, uint64_t, uint64_t))v63)((char *)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v61);
  v115 = v63;
  if (v64 == 1)
  {
    sub_2375BB424((uint64_t)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB660);
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    LOBYTE(v132) = 1;
LABEL_30:
    memset(v127, 0, sizeof(v127));
    std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v127);
    v75 = sub_2375BB424((uint64_t)&v128, &qword_2567FB6A0);
    goto LABEL_32;
  }
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6C0);
  v66 = *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64);
  MEMORY[0x24BDAC7A8](v65);
  v67 = (char *)&v111 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB684();
  v68 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))((char *)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), v61);
  v114 = &v111;
  MEMORY[0x24BDAC7A8](v68);
  sub_2375BB3E0((uint64_t)v67, (uint64_t)v67, &qword_2567FB6C0);
  v69 = sub_2375EB264();
  v70 = *(_QWORD *)(v69 - 8);
  v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48))(v67, 1, v69);
  if ((_DWORD)v71 == 1)
  {
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    LOBYTE(v132) = 1;
    v58 = v120;
  }
  else
  {
    v112 = &v111;
    v113 = (char *)v62;
    v111 = (uint64_t)&v111;
    v72 = *(_QWORD *)(v70 + 64);
    MEMORY[0x24BDAC7A8](v71);
    v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF0;
    v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v70 + 32))((char *)&v111 - v73, v67, v69);
    MEMORY[0x24BDAC7A8](v74);
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))((char *)&v111 - v73, (char *)&v111 - v73, v69);
    sub_2375DF940((uint64_t)&v111 - v73, (uint64_t *)v125);
    ctb::bridging::makeOptional((uint64_t)v125, (uint64_t)&v128);
    (*(void (**)(char *, uint64_t))(v70 + 8))((char *)&v111 - v73, v69);
    LOBYTE(v132) = 0;
    v58 = v120;
    v62 = (uint64_t)v113;
  }
  v63 = v115;
  sub_2375BB424((uint64_t)v67, &qword_2567FB6C0);
  v59 = v121;
  if ((v132 & 1) != 0)
    goto LABEL_30;
  std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v127, &v128);
  v75 = std::optional<ctb::ProvisioningConfiguration::Services>::~optional((uint64_t)&v128);
LABEL_32:
  MEMORY[0x24BDAC7A8](v75);
  sub_2375BB3E0(v59, (uint64_t)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB660);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v63)((char *)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v61) == 1)
  {
    sub_2375BB424((uint64_t)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB660);
    v152 = 0;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v153 = 1;
LABEL_38:
    v126 = 0;
    memset(v125, 0, sizeof(v125));
    std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](v125);
    v86 = sub_2375BB424((uint64_t)&v128, &qword_2567FB6A8);
    goto LABEL_40;
  }
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6B8);
  v77 = *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64);
  MEMORY[0x24BDAC7A8](v76);
  v78 = (char *)&v111 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB690();
  v79 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))((char *)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), v61);
  v114 = &v111;
  MEMORY[0x24BDAC7A8](v79);
  sub_2375BB3E0((uint64_t)v78, (uint64_t)v78, &qword_2567FB6B8);
  v80 = sub_2375EB324();
  v81 = *(_QWORD *)(v80 - 8);
  v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48))(v78, 1, v80);
  if ((_DWORD)v82 == 1)
  {
    v152 = 0;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v153 = 1;
    v58 = v120;
  }
  else
  {
    v112 = &v111;
    v113 = (char *)v62;
    v111 = (uint64_t)&v111;
    v83 = *(_QWORD *)(v81 + 64);
    MEMORY[0x24BDAC7A8](v82);
    v84 = (v83 + 15) & 0xFFFFFFFFFFFFFFF0;
    v85 = (*(uint64_t (**)(char *, char *, uint64_t))(v81 + 32))((char *)&v111 - v84, v78, v80);
    MEMORY[0x24BDAC7A8](v85);
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))((char *)&v111 - v84, (char *)&v111 - v84, v80);
    sub_2375E000C((uint64_t)&v111 - v84, v125);
    ctb::bridging::makeOptional(v125, (uint64_t)&v128);
    (*(void (**)(char *, uint64_t))(v81 + 8))((char *)&v111 - v84, v80);
    v153 = 0;
    v58 = v120;
    v62 = (uint64_t)v113;
  }
  v63 = v115;
  sub_2375BB424((uint64_t)v78, &qword_2567FB6B8);
  v59 = v121;
  if ((v153 & 1) != 0)
    goto LABEL_38;
  std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](v125, (uint64_t)&v128);
  v86 = std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional(&v128);
LABEL_40:
  MEMORY[0x24BDAC7A8](v86);
  sub_2375BB3E0(v59, (uint64_t)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB660);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v63)((char *)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v61) == 1)
  {
    sub_2375BB424((uint64_t)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB660);
  }
  else
  {
    v115 = &v111;
    v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6B0);
    v114 = &v111;
    v88 = *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64);
    MEMORY[0x24BDAC7A8](v87);
    sub_2375EB678();
    v89 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))((char *)&v111 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), v61);
    v112 = &v111;
    MEMORY[0x24BDAC7A8](v89);
    v90 = (char *)&v111 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
    v113 = v90;
    sub_2375BB3E0((uint64_t)v90, (uint64_t)v90, &qword_2567FB6B0);
    v91 = sub_2375EB4BC();
    v92 = *(_QWORD *)(v91 - 8);
    v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91);
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    LODWORD(v120) = v93;
    if ((_DWORD)v93 != 1)
    {
      v111 = (uint64_t)&v111;
      v99 = *(_QWORD *)(v92 + 64);
      MEMORY[0x24BDAC7A8](v93);
      v100 = (char *)&v111 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
      v101 = (*(uint64_t (**)(char *, char *, uint64_t))(v92 + 32))(v100, v90, v91);
      MEMORY[0x24BDAC7A8](v101);
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v100, v100, v91);
      v123[0] = sub_2375E1200((uint64_t)v100);
      v123[1] = v102;
      v123[2] = v103;
      v124 = v104 & 1;
      v105 = ctb::bridging::makeOptional((uint64_t)v123, (uint64_t)&v128);
      v97 = *((_QWORD *)&v129 + 1);
      v96 = v129;
      v95 = *((_QWORD *)&v128 + 1);
      v94 = v128;
      v98 = v130;
      (*(void (**)(char *, uint64_t, __n128))(v92 + 8))(v100, v91, v105);
      v59 = v121;
    }
    sub_2375BB424((uint64_t)v113, &qword_2567FB6B0);
    if ((_DWORD)v120 != 1)
    {
      v107 = sub_2375EB450();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 8))(v122, v107);
      sub_2375BB424(v59, &qword_2567FB660);
      *((_QWORD *)&v129 + 1) = v97;
      *(_QWORD *)&v129 = v96;
      *((_QWORD *)&v128 + 1) = v95;
      *(_QWORD *)&v128 = v94;
      *(_QWORD *)&v130 = v98;
      goto LABEL_47;
    }
  }
  *(_QWORD *)&v130 = 0;
  v128 = 0u;
  v129 = 0u;
  std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](&v128);
  v106 = sub_2375EB450();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v122, v106);
  sub_2375BB424(v59, &qword_2567FB660);
  v98 = v130;
  v97 = *((_QWORD *)&v129 + 1);
  v96 = v129;
  v95 = *((_QWORD *)&v128 + 1);
  v94 = v128;
LABEL_47:
  v108 = v118;
  std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100](v118, (uint64_t)v161);
  std::optional<ctb::ProvisioningConfiguration::Token>::~optional((uint64_t)v161);
  v109 = v117;
  *(_QWORD *)(v108 + 40) = v116;
  *(_QWORD *)(v108 + 48) = v109;
  *(_QWORD *)(v108 + 56) = v119;
  std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](v108 + 64, (uint64_t)v156);
  std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional(v156);
  std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]((_BYTE *)(v108 + 120), (uint64_t)v155);
  std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional((ctb::ProvisioningConfiguration::IMS3GPP *)v155);
  std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v108 + 656, v127);
  std::optional<ctb::ProvisioningConfiguration::Services>::~optional((uint64_t)v127);
  std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100]((_BYTE *)(v108 + 720), (uint64_t)v125);
  result = std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional(v125);
  *(_QWORD *)(v108 + 1136) = v97;
  *(_QWORD *)(v108 + 1128) = v96;
  *(_QWORD *)(v108 + 1120) = v95;
  *(_QWORD *)(v108 + 1112) = v94;
  *(_QWORD *)(v108 + 1144) = v98;
  return result;
}

uint64_t sub_2375DD230@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  int64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v28 = a3;
  v29 = a4;
  v6 = a5;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v24 = a5;
    v32 = MEMORY[0x24BEE4AF8];
    sub_2375D35DC(0, v7, 0);
    isUniquelyReferenced_nonNull_native = a2(0);
    v10 = isUniquelyReferenced_nonNull_native;
    v11 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
    v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v23 = a1;
    v13 = a1 + v12;
    v15 = *(_QWORD *)(v11 + 64);
    v14 = *(_QWORD *)(v11 + 72);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v26 = v14;
    v27 = a2;
    do
    {
      MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
      v25((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v10);
      sub_2375B42FC(v28, a2, v29);
      sub_2375EC2C0();
      v17 = v30;
      v16 = v31;
      (*(void (**)(char *, uint64_t))(v11 + 8))((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      v18 = v32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = sub_2375D35DC(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v32;
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        isUniquelyReferenced_nonNull_native = sub_2375D35DC(v19 > 1, v20 + 1, 1);
        v18 = v32;
      }
      *(_QWORD *)(v18 + 16) = v20 + 1;
      v21 = v18 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v17;
      *(_QWORD *)(v21 + 40) = v16;
      a2 = v27;
      v13 += v26;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    v6 = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
  return sub_2375D21A8(v18, v6);
}

uint64_t sub_2375DD3F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);

  v2 = sub_2375EB438();
  if (v2)
    v3 = v2;
  else
    v3 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v23 = a1;
    v5 = sub_2375EB348();
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v22 = v3;
    v8 = v3 + ((v7 + 32) & ~v7);
    v24 = *(_QWORD *)(v6 + 72);
    v9 = sub_2375EB6B4();
    v20 = *(_QWORD *)(v9 - 8);
    v21 = v9;
    v10 = *(_QWORD *)(v20 + 64);
    v11 = *(_QWORD *)(v6 + 64);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      v12 = MEMORY[0x24BDAC7A8](v9);
      MEMORY[0x24BDAC7A8](v12);
      v25((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v5);
      v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      if (MEMORY[0x24BE0DEE8] && v13 == *MEMORY[0x24BE0DEE8])
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 96))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
        v15 = v20;
        v14 = v21;
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
        v16 = v23;
        sub_2375EB6A8();
        (*(void (**)(char *, uint64_t))(v15 + 8))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
        v17 = sub_2375EB168();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
      }
      v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      v8 += v24;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a1 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v19 = sub_2375EB168();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
}

uint64_t sub_2375DD61C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = sub_2375EB438();
  if (v2)
    v3 = v2;
  else
    v3 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v21 = a1;
    v5 = sub_2375EB348();
    v6 = v5;
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v20 = v3;
    v9 = v3 + ((v8 + 32) & ~v8);
    v10 = *(_QWORD *)(v7 + 64);
    v11 = *(_QWORD *)(v7 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v13 = (_DWORD *)MEMORY[0x24BE0DED0];
    do
    {
      MEMORY[0x24BDAC7A8](v5);
      v12((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v6);
      v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      if (v13 && v14 == *v13)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 96))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
        v15 = sub_2375EB69C();
        v16 = *(_QWORD *)(v15 - 8);
        v17 = v21;
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v21, (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v17, 0, 1, v15);
      }
      v5 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      v9 += v11;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a1 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v19 = sub_2375EB69C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[48] = 0;
  return result;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[528] = 0;
  return result;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[56] = 0;
  return result;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[384] = 0;
  return result;
}

void **sub_2375DD7F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  std::string v46;
  _BYTE v47[32];
  __int128 v48[4];

  v4 = sub_2375EAA18();
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2375EB54C();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v34 = a1;
    v35 = a2;
    v44.n128_u64[0] = MEMORY[0x24BEE4AF8];
    sub_2375D3780(0, v7, 0);
    v8 = sub_2375EB030();
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v33[1] = v6;
    v12 = v6 + v11;
    v39 = *(_QWORD *)(v10 + 72);
    v38 = *(_QWORD *)(v10 + 64);
    v40 = v10;
    v37 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v36 = v47;
    v13 = v41;
    do
    {
      v14 = v38;
      MEMORY[0x24BDAC7A8](v8);
      v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      v16 = v37;
      v17 = ((uint64_t (*)(char *, unint64_t, uint64_t))v37)(v15, v12, v9);
      MEMORY[0x24BDAC7A8](v17);
      v16(v15, v15, v9);
      sub_2375EB024();
      v18 = sub_2375EAA00();
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v18, v20, &v46);
      v21 = sub_2375EB018();
      sub_2375DD230(v21, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D940], &qword_2567FB6D0, MEMORY[0x24BE0D960], v36);
      v47[24] = sub_2375EB00C() & 1;
      v22 = *(void (**)(char *, uint64_t))(v40 + 8);
      v22(v15, v9);
      ctb::ProvisioningConfiguration::AccessControl::Server::Server((uint64_t)v48, (__int128 *)&v46);
      ctb::ProvisioningConfiguration::AccessControl::Server::~Server(&v46.__r_.__value_.__l.__data_);
      v22(v15, v9);
      v23 = v44.n128_u64[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2375D3780(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v44.n128_u64[0];
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_2375D3780(v24 > 1, v25 + 1, 1);
        v23 = v44.n128_u64[0];
      }
      *(_QWORD *)(v23 + 16) = v25 + 1;
      ctb::ProvisioningConfiguration::AccessControl::Server::Server(v23 + 56 * v25 + 32, v48);
      ctb::ProvisioningConfiguration::AccessControl::Server::~Server((char **)v48);
      v12 += v39;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    a2 = v35;
    a1 = v34;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
  }
  v26 = sub_2375EB0B4();
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB540();
  sub_2375E0978((uint64_t)v28, v48);
  v44 = 0uLL;
  v45 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v44);
  v29 = *(_QWORD *)(v23 + 16);
  if (v29)
  {
    v30 = v23 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100]((uint64_t *)&v44, v30);
      v30 += 56;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)&v46, &v44);
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::~vector[abi:ne180100]((void **)&v44);
  v31 = sub_2375EB558();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
  swift_bridgeObjectRelease();
  ctb::ProvisioningConfiguration::AccessControl::Default::Default((_QWORD *)a2, v48);
  ctb::ProvisioningConfiguration::AccessControl::Default::~Default((char **)v48);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v46);
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::~vector[abi:ne180100]((void **)&v46.__r_.__value_.__l.__data_);
}

void sub_2375DDC04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void (*v121)(char *, uint64_t);
  unint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  void (*v141)(char *, uint64_t);
  unint64_t v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, uint64_t);
  unint64_t v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  void (*v181)(char *, uint64_t);
  unint64_t v182;
  void (*v183)(char *, uint64_t);
  uint64_t v184;
  uint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  void (*v201)(char *, uint64_t);
  unint64_t v202;
  void (*v203)(char *, uint64_t);
  uint64_t v204;
  uint64_t v205;
  char *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  void (*v221)(char *, uint64_t);
  unint64_t v222;
  void (*v223)(char *, uint64_t);
  uint64_t v224;
  uint64_t v225;
  char *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  void (*v241)(char *, uint64_t);
  unint64_t v242;
  void (*v243)(char *, uint64_t);
  uint64_t v244;
  uint64_t v245;
  char *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  void (*v261)(char *, uint64_t);
  unint64_t v262;
  void (*v263)(char *, uint64_t);
  uint64_t v264;
  uint64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  void (*v282)(char *, uint64_t);
  unint64_t v283;
  ctb::bridging *v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  ctb::bridging *v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  char v298;
  char v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD v302[2];
  uint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t (*v314)(char *, uint64_t, uint64_t);
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  std::string v319;
  std::string v320;
  std::string v321;
  std::string v322;
  std::string v323;
  std::string v324;
  std::string v325;
  std::string v326;
  std::string v327;
  std::string v328;
  std::string v329;
  std::string v330;
  std::string v331;
  std::string v332;
  _QWORD v333[3];
  _QWORD v334[3];
  _BYTE v335[32];
  char v336;
  _BYTE v337[32];
  std::string v338;

  v309 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v3);
  v310 = (char *)v302 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2375EAFC4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v302 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB138();
  v9 = sub_2375EAFB8();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v9, v11, &v338);
  v12 = sub_2375EB12C();
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v15, (std::string *)v337);
    ctb::bridging::makeOptional((ctb::bridging *)v337, (uint64_t)v335);
    v336 = 0;
    swift_bridgeObjectRelease();
    if ((v336 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v337, (__n128 *)v335);
      ctb::chatbot::URIEntry::~URIEntry((void **)v335);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v335, 0, sizeof(v335));
    v336 = 1;
  }
  memset(v337, 0, sizeof(v337));
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v337);
  sub_2375BB424((uint64_t)v335, &qword_2567FB1E0);
LABEL_6:
  v16 = sub_2375EB7D4();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v302 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB120();
  v20 = sub_2375EB7C8();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_2375D21A8(v20, v334);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6D8);
  v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v302 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_2375EB0C0();
  MEMORY[0x24BDAC7A8](v24);
  sub_2375BB3E0((uint64_t)v23, (uint64_t)v23, &qword_2567FB6D8);
  v25 = sub_2375EB630();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v25);
  v311 = a1;
  if ((_DWORD)v27 == 1)
  {
    memset(v335, 0, 24);
    v335[24] = 1;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v27);
    v29 = (char *)v302 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v23, v25);
    v308 = (uint64_t)v29;
    v30 = sub_2375EB624();
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
    {
      v302[1] = v302;
      v303 = v26;
      v304 = (_QWORD *)v25;
      v305 = v302;
      v306 = (uint64_t)v23;
      v307 = v302;
      v32 = v30;
      *(_QWORD *)v335 = MEMORY[0x24BEE4AF8];
      sub_2375D35DC(0, v31, 0);
      isUniquelyReferenced_nonNull_native = sub_2375EAD90();
      v34 = isUniquelyReferenced_nonNull_native;
      v35 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
      v36 = *(unsigned __int8 *)(v35 + 80);
      v302[0] = v32;
      v37 = v32 + ((v36 + 32) & ~v36);
      v38 = *(_QWORD *)(v35 + 64);
      v313 = *(_QWORD **)(v35 + 72);
      v314 = (uint64_t (*)(char *, uint64_t, uint64_t))v35;
      v312 = *(_QWORD *)(v35 + 16);
      do
      {
        MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
        ((void (*)(char *, uint64_t, uint64_t))v312)((char *)v302 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v34);
        v39 = sub_2375EAD84();
        v41 = v40;
        (*((void (**)(char *, uint64_t))v314 + 1))((char *)v302 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), v34);
        v42 = *(_QWORD *)v335;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = sub_2375D35DC(0, *(_QWORD *)(v42 + 16) + 1, 1);
          v42 = *(_QWORD *)v335;
        }
        v44 = *(_QWORD *)(v42 + 16);
        v43 = *(_QWORD *)(v42 + 24);
        if (v44 >= v43 >> 1)
        {
          isUniquelyReferenced_nonNull_native = sub_2375D35DC(v43 > 1, v44 + 1, 1);
          v42 = *(_QWORD *)v335;
        }
        *(_QWORD *)(v42 + 16) = v44 + 1;
        v45 = v42 + 16 * v44;
        *(_QWORD *)(v45 + 32) = v39;
        *(_QWORD *)(v45 + 40) = v41;
        v37 += (uint64_t)v313;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
      a1 = v311;
      v23 = (char *)v306;
      v25 = (uint64_t)v304;
      v26 = v303;
    }
    else
    {
      swift_bridgeObjectRelease();
      v42 = MEMORY[0x24BEE4AF8];
    }
    sub_2375D21A8(v42, v335);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v308, v25);
    v335[24] = 0;
  }
  sub_2375BB424((uint64_t)v23, &qword_2567FB6D8);
  if ((v335[24] & 1) != 0)
  {
    memset(v333, 0, sizeof(v333));
    std::set<std::string>::set[abi:ne180100](v333);
    sub_2375BB424((uint64_t)v335, &qword_2567FB6C8);
  }
  else
  {
    std::set<std::string>::set[abi:ne180100](v333, v335);
    std::set<std::string>::~set[abi:ne180100]((uint64_t)v335);
  }
  v46 = sub_2375EB114();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, (std::string *)v335);
  v48 = sub_2375EB108();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v48, v49, &v332);
  v308 = sub_2375EB15C();
  v307 = (_QWORD *)sub_2375EB150();
  v306 = sub_2375EB144();
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6E0);
  v51 = *(_QWORD **)(*(_QWORD *)(v50 - 8) + 64);
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  v53 = sub_2375EB33C();
  v54 = *(_QWORD *)(v53 - 8);
  v314 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  v55 = v314(v52, 1, v53);
  v313 = v51;
  if (v55 == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v56 = 0xE000000000000000;
    v57 = 0;
  }
  else
  {
    v58 = sub_2375EB1C8();
    v59 = *(_QWORD *)(v58 - 8);
    MEMORY[0x24BDAC7A8](v58);
    v61 = (char *)v302 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v53);
    v62 = (uint64_t)v310;
    sub_2375EB18C();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
    v63 = sub_2375EAA18();
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63) == 1)
    {
      sub_2375BB424(v62, &qword_2567FB3A8);
      v57 = 0;
      v56 = 0xE000000000000000;
    }
    else
    {
      v65 = sub_2375EAA00();
      v66 = v62;
      v57 = v65;
      v56 = v67;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v63);
    }
    a1 = v311;
    v51 = v313;
  }
  v68 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v57, v56, &v331);
  MEMORY[0x24BDAC7A8](v68);
  v69 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  v70 = v314(v69, 1, v53);
  v310 = (char *)v53;
  v312 = v54;
  if (v70 == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v71 = 0;
    v72 = 0xE000000000000000;
  }
  else
  {
    v73 = sub_2375EB1C8();
    v304 = v302;
    v305 = v302;
    v74 = v54;
    v75 = *(_QWORD *)(v73 - 8);
    MEMORY[0x24BDAC7A8](v73);
    v77 = (char *)v302 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v69, v53);
    v78 = sub_2375EB1A4();
    v79 = *(_QWORD *)(v78 - 8);
    MEMORY[0x24BDAC7A8](v78);
    v81 = (char *)v302 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB1B0();
    v82 = v73;
    v51 = v313;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v82);
    v71 = sub_2375EB198();
    v72 = v83;
    v84 = *(void (**)(char *, uint64_t))(v79 + 8);
    v53 = (uint64_t)v310;
    v84(v81, v78);
    a1 = v311;
  }
  v85 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v71, v72, &v330);
  MEMORY[0x24BDAC7A8](v85);
  v86 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v86, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
  }
  else
  {
    v87 = sub_2375EB1C8();
    v88 = *(_QWORD *)(v87 - 8);
    MEMORY[0x24BDAC7A8](v87);
    v90 = (char *)v302 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v86, v53);
    v91 = sub_2375EB1BC();
    v93 = v92;
    v94 = v87;
    v51 = v313;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v94);
    a1 = v311;
    if (v93)
      goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  v91 = 0;
  v93 = 0xE000000000000000;
LABEL_34:
  v95 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v91, v93, &v329);
  MEMORY[0x24BDAC7A8](v95);
  v96 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v96, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
  }
  else
  {
    v97 = sub_2375EB1C8();
    v98 = *(_QWORD *)(v97 - 8);
    MEMORY[0x24BDAC7A8](v97);
    v100 = (char *)v302 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v96, v53);
    v101 = sub_2375EB174();
    v103 = v102;
    v104 = v97;
    v51 = v313;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v100, v104);
    a1 = v311;
    if (v103)
      goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  v101 = 0;
  v103 = 0xE000000000000000;
LABEL_38:
  v105 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v101, v103, &v328);
  MEMORY[0x24BDAC7A8](v105);
  v106 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v106, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v107 = 0;
    v108 = 0xE000000000000000;
  }
  else
  {
    v109 = sub_2375EB1C8();
    v305 = v302;
    v110 = *(_QWORD *)(v109 - 8);
    MEMORY[0x24BDAC7A8](v109);
    v112 = (char *)v302 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v106, v53);
    v113 = sub_2375EB7BC();
    v304 = v302;
    v114 = *(_QWORD *)(v113 - 8);
    MEMORY[0x24BDAC7A8](v113);
    v116 = (char *)v302 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
    v117 = sub_2375EB6E4();
    v118 = *(_QWORD *)(v117 - 8);
    MEMORY[0x24BDAC7A8](v117);
    v120 = (char *)v302 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB75C();
    v121 = *(void (**)(char *, uint64_t))(v114 + 8);
    v53 = (uint64_t)v310;
    v121(v116, v113);
    v107 = sub_2375EB6D8();
    v108 = v122;
    v123 = *(void (**)(char *, uint64_t))(v118 + 8);
    a1 = v311;
    v124 = v117;
    v51 = v313;
    v123(v120, v124);
  }
  v125 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v107, v108, &v327);
  MEMORY[0x24BDAC7A8](v125);
  v126 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v126, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v127 = 0;
    v128 = 0xE000000000000000;
  }
  else
  {
    v129 = sub_2375EB1C8();
    v305 = v302;
    v130 = *(_QWORD *)(v129 - 8);
    MEMORY[0x24BDAC7A8](v129);
    v132 = (char *)v302 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v126, v53);
    v133 = sub_2375EB7BC();
    v304 = v302;
    v134 = *(_QWORD *)(v133 - 8);
    MEMORY[0x24BDAC7A8](v133);
    v136 = (char *)v302 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v130 + 8))(v132, v129);
    v137 = sub_2375EB714();
    v138 = *(_QWORD *)(v137 - 8);
    MEMORY[0x24BDAC7A8](v137);
    v140 = (char *)v302 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB798();
    v141 = *(void (**)(char *, uint64_t))(v134 + 8);
    v53 = (uint64_t)v310;
    v141(v136, v133);
    v127 = sub_2375EB708();
    v128 = v142;
    v143 = *(void (**)(char *, uint64_t))(v138 + 8);
    a1 = v311;
    v144 = v137;
    v51 = v313;
    v143(v140, v144);
  }
  v145 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v127, v128, &v326);
  MEMORY[0x24BDAC7A8](v145);
  v146 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v146, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v147 = 0;
    v148 = 0xE000000000000000;
  }
  else
  {
    v149 = sub_2375EB1C8();
    v305 = v302;
    v150 = *(_QWORD *)(v149 - 8);
    MEMORY[0x24BDAC7A8](v149);
    v152 = (char *)v302 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v146, v53);
    v153 = sub_2375EB7BC();
    v304 = v302;
    v154 = *(_QWORD *)(v153 - 8);
    MEMORY[0x24BDAC7A8](v153);
    v156 = (char *)v302 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v152, v149);
    v157 = sub_2375EB72C();
    v158 = *(_QWORD *)(v157 - 8);
    MEMORY[0x24BDAC7A8](v157);
    v160 = (char *)v302 - ((v159 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB7A4();
    v161 = *(void (**)(char *, uint64_t))(v154 + 8);
    v53 = (uint64_t)v310;
    v161(v156, v153);
    v147 = sub_2375EB6C0();
    v148 = v162;
    v163 = *(void (**)(char *, uint64_t))(v158 + 8);
    a1 = v311;
    v164 = v157;
    v51 = v313;
    v163(v160, v164);
  }
  v165 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v147, v148, &v325);
  MEMORY[0x24BDAC7A8](v165);
  v166 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v166, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v167 = 0;
    v168 = 0xE000000000000000;
  }
  else
  {
    v169 = sub_2375EB1C8();
    v305 = v302;
    v170 = *(_QWORD *)(v169 - 8);
    MEMORY[0x24BDAC7A8](v169);
    v172 = (char *)v302 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v166, v53);
    v173 = sub_2375EB7BC();
    v304 = v302;
    v174 = *(_QWORD *)(v173 - 8);
    MEMORY[0x24BDAC7A8](v173);
    v176 = (char *)v302 - ((v175 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v170 + 8))(v172, v169);
    v177 = sub_2375EB6E4();
    v178 = *(_QWORD *)(v177 - 8);
    MEMORY[0x24BDAC7A8](v177);
    v180 = (char *)v302 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB78C();
    v181 = *(void (**)(char *, uint64_t))(v174 + 8);
    v53 = (uint64_t)v310;
    v181(v176, v173);
    v167 = sub_2375EB6D8();
    v168 = v182;
    v183 = *(void (**)(char *, uint64_t))(v178 + 8);
    a1 = v311;
    v184 = v177;
    v51 = v313;
    v183(v180, v184);
  }
  v185 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v167, v168, &v324);
  MEMORY[0x24BDAC7A8](v185);
  v186 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v186, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v187 = 0;
    v188 = 0xE000000000000000;
  }
  else
  {
    v189 = sub_2375EB1C8();
    v305 = v302;
    v190 = *(_QWORD *)(v189 - 8);
    MEMORY[0x24BDAC7A8](v189);
    v192 = (char *)v302 - ((v191 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v186, v53);
    v193 = sub_2375EB7BC();
    v304 = v302;
    v194 = *(_QWORD *)(v193 - 8);
    MEMORY[0x24BDAC7A8](v193);
    v196 = (char *)v302 - ((v195 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v190 + 8))(v192, v189);
    v197 = sub_2375EB714();
    v198 = *(_QWORD *)(v197 - 8);
    MEMORY[0x24BDAC7A8](v197);
    v200 = (char *)v302 - ((v199 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB768();
    v201 = *(void (**)(char *, uint64_t))(v194 + 8);
    v53 = (uint64_t)v310;
    v201(v196, v193);
    v187 = sub_2375EB708();
    v188 = v202;
    v203 = *(void (**)(char *, uint64_t))(v198 + 8);
    a1 = v311;
    v204 = v197;
    v51 = v313;
    v203(v200, v204);
  }
  v205 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v187, v188, &v323);
  MEMORY[0x24BDAC7A8](v205);
  v206 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v206, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v207 = 0;
    v208 = 0xE000000000000000;
  }
  else
  {
    v209 = sub_2375EB1C8();
    v305 = v302;
    v210 = *(_QWORD *)(v209 - 8);
    MEMORY[0x24BDAC7A8](v209);
    v212 = (char *)v302 - ((v211 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v206, v53);
    v213 = sub_2375EB7BC();
    v304 = v302;
    v214 = *(_QWORD *)(v213 - 8);
    MEMORY[0x24BDAC7A8](v213);
    v216 = (char *)v302 - ((v215 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v210 + 8))(v212, v209);
    v217 = sub_2375EB72C();
    v218 = *(_QWORD *)(v217 - 8);
    MEMORY[0x24BDAC7A8](v217);
    v220 = (char *)v302 - ((v219 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB780();
    v221 = *(void (**)(char *, uint64_t))(v214 + 8);
    v53 = (uint64_t)v310;
    v221(v216, v213);
    v207 = sub_2375EB6C0();
    v208 = v222;
    v223 = *(void (**)(char *, uint64_t))(v218 + 8);
    a1 = v311;
    v224 = v217;
    v51 = v313;
    v223(v220, v224);
  }
  v225 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v207, v208, &v322);
  MEMORY[0x24BDAC7A8](v225);
  v226 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v226, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v227 = 0;
    v228 = 0xE000000000000000;
  }
  else
  {
    v229 = sub_2375EB1C8();
    v305 = v302;
    v230 = *(_QWORD *)(v229 - 8);
    MEMORY[0x24BDAC7A8](v229);
    v232 = (char *)v302 - ((v231 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v226, v53);
    v233 = sub_2375EB7BC();
    v304 = v302;
    v234 = *(_QWORD *)(v233 - 8);
    MEMORY[0x24BDAC7A8](v233);
    v236 = (char *)v302 - ((v235 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v230 + 8))(v232, v229);
    v237 = sub_2375EB6FC();
    v238 = *(_QWORD *)(v237 - 8);
    MEMORY[0x24BDAC7A8](v237);
    v240 = (char *)v302 - ((v239 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB774();
    v241 = *(void (**)(char *, uint64_t))(v234 + 8);
    v53 = (uint64_t)v310;
    v241(v236, v233);
    v227 = sub_2375EB6F0();
    v228 = v242;
    v243 = *(void (**)(char *, uint64_t))(v238 + 8);
    a1 = v311;
    v244 = v237;
    v51 = v313;
    v243(v240, v244);
  }
  v245 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v227, v228, &v321);
  MEMORY[0x24BDAC7A8](v245);
  v246 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v246, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v247 = 0;
    v248 = 0xE000000000000000;
  }
  else
  {
    v249 = sub_2375EB1C8();
    v305 = v302;
    v250 = *(_QWORD *)(v249 - 8);
    MEMORY[0x24BDAC7A8](v249);
    v252 = (char *)v302 - ((v251 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v246, v53);
    v253 = sub_2375EB7BC();
    v304 = v302;
    v254 = *(_QWORD *)(v253 - 8);
    MEMORY[0x24BDAC7A8](v253);
    v256 = (char *)v302 - ((v255 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v250 + 8))(v252, v249);
    v257 = sub_2375EB744();
    v258 = *(_QWORD *)(v257 - 8);
    MEMORY[0x24BDAC7A8](v257);
    v260 = (char *)v302 - ((v259 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB7B0();
    v261 = *(void (**)(char *, uint64_t))(v254 + 8);
    v53 = (uint64_t)v310;
    v261(v256, v253);
    v247 = sub_2375EB708();
    v248 = v262;
    v263 = *(void (**)(char *, uint64_t))(v258 + 8);
    a1 = v311;
    v264 = v257;
    v51 = v313;
    v263(v260, v264);
  }
  v265 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v247, v248, &v320);
  MEMORY[0x24BDAC7A8](v265);
  v266 = (char *)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB0F0();
  if (v314(v266, 1, v53) == 1)
  {
    sub_2375BB424((uint64_t)v302 - (((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E0);
    v267 = 0;
    v268 = 0xE000000000000000;
  }
  else
  {
    v269 = sub_2375EB1C8();
    v314 = (uint64_t (*)(char *, uint64_t, uint64_t))v302;
    v270 = v53;
    v271 = *(_QWORD *)(v269 - 8);
    MEMORY[0x24BDAC7A8](v269);
    v273 = (char *)v302 - ((v272 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB330();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v266, v270);
    v274 = sub_2375EB7BC();
    v313 = v302;
    v275 = *(_QWORD *)(v274 - 8);
    MEMORY[0x24BDAC7A8](v274);
    v277 = (char *)v302 - ((v276 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB180();
    (*(void (**)(char *, uint64_t))(v271 + 8))(v273, v269);
    v278 = sub_2375EB6CC();
    v279 = *(_QWORD *)(v278 - 8);
    MEMORY[0x24BDAC7A8](v278);
    v281 = (char *)v302 - ((v280 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB750();
    v282 = *(void (**)(char *, uint64_t))(v275 + 8);
    a1 = v311;
    v282(v277, v274);
    v267 = sub_2375EB6C0();
    v268 = v283;
    (*(void (**)(char *, uint64_t))(v279 + 8))(v281, v278);
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v267, v268, &v319);
  v284 = (ctb::bridging *)sub_2375EB0E4();
  if ((v285 & 1) != 0)
  {
    v317 = 0;
    v318 = 0;
    std::optional<unsigned long>::optional[abi:ne180100](&v317);
    v287 = v317;
    v289 = v318;
  }
  else
  {
    ctb::bridging::makeOptional(v284);
    v287 = v286;
    v289 = v288 & 1;
    v317 = v286;
    v318 = v289;
  }
  v290 = (ctb::bridging *)sub_2375EB0CC();
  if ((v291 & 1) != 0)
  {
    v315 = 0;
    v316 = 0;
    std::optional<unsigned long>::optional[abi:ne180100](&v315);
    v293 = v315;
    v295 = v316;
  }
  else
  {
    ctb::bridging::makeOptional(v290);
    v293 = v292;
    v295 = v294 & 1;
    v315 = v292;
    v316 = v295;
  }
  v296 = v309;
  v297 = (_QWORD *)(v309 + 488);
  v298 = sub_2375EB0FC();
  v299 = sub_2375EB0D8();
  v300 = sub_2375EB168();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v300 - 8) + 8))(a1, v300);
  std::string::basic_string[abi:ne180100]((__n128 *)v296, (__n128 *)&v338);
  std::string::~string(&v338);
  std::optional<std::string>::optional[abi:ne180100](v296 + 24, (__n128 *)v337);
  ctb::chatbot::URIEntry::~URIEntry((void **)v337);
  std::set<std::string>::set[abi:ne180100]((_QWORD *)(v296 + 56), v334);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v334);
  std::set<std::string>::set[abi:ne180100]((_QWORD *)(v296 + 80), v333);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v333);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 104), (__n128 *)v335);
  std::string::~string((std::string *)v335);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 128), (__n128 *)&v332);
  std::string::~string(&v332);
  v301 = v307;
  *(_QWORD *)(v296 + 152) = v308;
  *(_QWORD *)(v296 + 160) = v301;
  *(_QWORD *)(v296 + 168) = v306;
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 176), (__n128 *)&v331);
  std::string::~string(&v331);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 200), (__n128 *)&v330);
  std::string::~string(&v330);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 224), (__n128 *)&v329);
  std::string::~string(&v329);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 248), (__n128 *)&v328);
  std::string::~string(&v328);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 272), (__n128 *)&v327);
  std::string::~string(&v327);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 296), (__n128 *)&v326);
  std::string::~string(&v326);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 320), (__n128 *)&v325);
  std::string::~string(&v325);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 344), (__n128 *)&v324);
  std::string::~string(&v324);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 368), (__n128 *)&v323);
  std::string::~string(&v323);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 392), (__n128 *)&v322);
  std::string::~string(&v322);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 416), (__n128 *)&v321);
  std::string::~string(&v321);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 440), (__n128 *)&v320);
  std::string::~string(&v320);
  std::string::basic_string[abi:ne180100]((__n128 *)(v296 + 464), (__n128 *)&v319);
  std::string::~string(&v319);
  *v297 = v287;
  *(_QWORD *)(v296 + 496) = v289;
  *(_QWORD *)(v296 + 504) = v293;
  *(_QWORD *)(v296 + 512) = v295;
  *(_BYTE *)(v296 + 520) = v298 & 1;
  *(_BYTE *)(v296 + 521) = v299 & 1;
}

uint64_t sub_2375DF940@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  char *v25;
  unsigned int v26;
  char v27;
  uint64_t Optional;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD v56[2];
  _QWORD *v57;
  _QWORD *v58;
  unsigned int (*v59)(_QWORD, _QWORD, _QWORD);
  _QWORD *v60;
  uint64_t *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;

  v61 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6E8);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  MEMORY[0x24BDAC7A8](v3);
  sub_2375EB1F8();
  v5 = sub_2375EB468();
  v6 = *(_QWORD **)(v5 - 8);
  v7 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v6[6];
  if (v7((char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v5) == 1)
  {
    v8 = sub_2375BB424((uint64_t)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2567FB6E8);
    v9 = 0;
    v10 = 1;
  }
  else
  {
    v59 = v7;
    v11 = sub_2375EB66C();
    v58 = v56;
    v12 = *(_QWORD *)(v11 - 8);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB45C();
    v60 = v6;
    ((void (*)(char *, uint64_t))v6[1])((char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6F0);
    v57 = v56;
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    MEMORY[0x24BDAC7A8](v15);
    v17 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2375EB648();
    v18 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    MEMORY[0x24BDAC7A8](v18);
    sub_2375BB3E0((uint64_t)v17, (uint64_t)v17, &qword_2567FB6F0);
    v19 = sub_2375EB660();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19);
    if ((_DWORD)v21 == 1)
    {
      v8 = sub_2375BB424((uint64_t)v17, &qword_2567FB6F0);
      v10 = 1;
      v9 = 0;
    }
    else
    {
      v56[1] = v56;
      MEMORY[0x24BDAC7A8](v21);
      v23 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v17, v19);
      result = sub_2375EB21C();
      if (result < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v9 = result;
      if (result > 0x7FFFFFFF)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      v8 = sub_2375BB424((uint64_t)v17, &qword_2567FB6F0);
      v10 = 0;
    }
    v7 = v59;
    v6 = v60;
  }
  MEMORY[0x24BDAC7A8](v8);
  v25 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB1F8();
  if (v7(v25, 1, v5) == 1)
  {
    sub_2375BB424((uint64_t)v25, &qword_2567FB6E8);
    v26 = 0;
    v27 = 1;
    if ((v10 & 1) != 0)
      goto LABEL_11;
LABEL_19:
    Optional = ctb::bridging::makeOptional(v9);
    v64 = Optional;
    if ((v27 & 1) != 0)
      goto LABEL_12;
    goto LABEL_20;
  }
  v57 = v56;
  LODWORD(v58) = v10;
  v59 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v9;
  v30 = sub_2375EB66C();
  v60 = v56;
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)v56 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB45C();
  ((void (*)(char *, uint64_t))v6[1])(v25, v5);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB6F0);
  v35 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2375EB63C();
  v37 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  MEMORY[0x24BDAC7A8](v37);
  sub_2375BB3E0((uint64_t)v56 - v36, (uint64_t)v56 - v36, &qword_2567FB6F0);
  v38 = sub_2375EB660();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))((char *)v56 - v36, 1, v38);
  if ((_DWORD)v40 == 1)
  {
    sub_2375BB424((uint64_t)v56 - v36, &qword_2567FB6F0);
    v27 = 1;
    v26 = 0;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v40);
    v42 = (char *)v56 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v42, (char *)v56 - v36, v38);
    result = sub_2375EB21C();
    if (result < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v26 = result;
    if (result > 0x7FFFFFFF)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    sub_2375BB424((uint64_t)v56 - v36, &qword_2567FB6F0);
    v27 = 0;
  }
  LODWORD(v9) = (_DWORD)v59;
  if ((v58 & 1) == 0)
    goto LABEL_19;
LABEL_11:
  v64 = 0;
  std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](&v64);
  Optional = v64;
  if ((v27 & 1) != 0)
  {
LABEL_12:
    v63 = 0;
    std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](&v63);
    v29 = v63;
    goto LABEL_21;
  }
LABEL_20:
  v29 = ctb::bridging::makeOptional(v26);
  v63 = v29;
LABEL_21:
  v43 = sub_2375EB210();
  v44 = sub_2375EB228();
  v45 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v47 = (char *)v56 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB234();
  v48 = sub_2375EB21C();
  result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v44);
  if (v48 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v48 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v49 = v43 & 1;
  v50 = sub_2375EB24C() & 1;
  v51 = sub_2375EB204() & 1;
  v52 = sub_2375EB258() & 1;
  v53 = sub_2375EB240();
  if (!v53)
    v53 = MEMORY[0x24BEE4AF8];
  sub_2375DD230(v53, MEMORY[0x24BE0DCE8], &qword_2567FB6F8, MEMORY[0x24BE0DCF8], v62);
  v54 = sub_2375EB264();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(a1, v54);
  v55 = v61;
  *v61 = Optional;
  v55[1] = v29;
  *((_BYTE *)v55 + 16) = v49;
  *((_DWORD *)v55 + 5) = v48;
  *((_BYTE *)v55 + 24) = v50;
  *((_BYTE *)v55 + 25) = v51;
  *((_BYTE *)v55 + 26) = v52;
  std::set<std::string>::set[abi:ne180100](v55 + 4, v62);
  return std::set<std::string>::~set[abi:ne180100]((uint64_t)v62);
}

uint64_t sub_2375E000C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 Optional;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  __n128 v68;
  __n128 v69;
  _QWORD v71[2];
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  __n128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85[4];
  uint64_t v86;
  __n128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96;
  __int128 v97[9];
  __int128 v98[7];

  v80 = a2;
  v3 = sub_2375EAA18();
  v75 = *(_QWORD *)(v3 - 8);
  v76 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v74 = (char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_2375EB318();
  v5 = sub_2375EB2F4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB300();
  v78 = sub_2375EB2E8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v77 = sub_2375EB30C();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB700);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = a1;
  v12 = sub_2375EB2DC();
  MEMORY[0x24BDAC7A8](v12);
  sub_2375BB3E0((uint64_t)v11, (uint64_t)v11, &qword_2567FB700);
  v13 = sub_2375EB09C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13);
  if ((_DWORD)v15 == 1)
  {
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    LOBYTE(v93) = 1;
  }
  else
  {
    v16 = *(_QWORD *)(v14 + 64);
    MEMORY[0x24BDAC7A8](v15);
    v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))((char *)v71 - v17, v11, v13);
    MEMORY[0x24BDAC7A8](v18);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)v71 - v17, (char *)v71 - v17, v13);
    sub_2375E0A80((uint64_t)v71 - v17, (uint64_t)v97);
    Optional = ctb::bridging::makeOptional((uint64_t)v97, (uint64_t)&v87);
    (*(void (**)(char *, uint64_t, __n128))(v14 + 8))((char *)v71 - v17, v13, Optional);
    LOBYTE(v93) = 0;
  }
  sub_2375BB424((uint64_t)v11, &qword_2567FB700);
  if ((v93 & 1) != 0)
  {
    memset(v98, 0, 96);
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](v98);
    sub_2375BB424((uint64_t)&v87, &qword_2567FB708);
  }
  else
  {
    v20 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]((uint64_t)v98, (__int128 *)&v87);
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional(&v87, v20);
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB710);
  v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_2375EB2B8();
  MEMORY[0x24BDAC7A8](v24);
  sub_2375BB3E0((uint64_t)v23, (uint64_t)v23, &qword_2567FB710);
  v25 = sub_2375EB534();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v25);
  if ((_DWORD)v27 == 1)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v87 = 0u;
    v96 = 1;
  }
  else
  {
    v72 = v71;
    v73 = v71;
    v28 = *(_QWORD *)(v26 + 64);
    MEMORY[0x24BDAC7A8](v27);
    v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))((char *)v71 - v29, v23, v25);
    MEMORY[0x24BDAC7A8](v30);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))((char *)v71 - v29, (char *)v71 - v29, v25);
    sub_2375E0D84((uint64_t)v71 - v29, (uint64_t)v97);
    v31 = ctb::bridging::makeOptional((uint64_t)v97, (uint64_t)&v87);
    (*(void (**)(char *, uint64_t, __n128))(v26 + 8))((char *)v71 - v29, v25, v31);
    v96 = 0;
  }
  sub_2375BB424((uint64_t)v23, &qword_2567FB710);
  if ((v96 & 1) != 0)
  {
    memset(v97, 0, sizeof(v97));
    std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](v97);
    sub_2375BB424((uint64_t)&v87, &qword_2567FB718);
  }
  else
  {
    v32 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]((uint64_t)v97, (__int128 *)&v87);
    std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional(&v87, v32);
  }
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB720);
  v34 = *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)v71 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_2375EB2D0();
  MEMORY[0x24BDAC7A8](v36);
  sub_2375BB3E0((uint64_t)v35, (uint64_t)v35, &qword_2567FB720);
  v37 = sub_2375EAFAC();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v37);
  if ((_DWORD)v39 == 1)
  {
    *(_QWORD *)&v91 = 0;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    BYTE8(v91) = 1;
  }
  else
  {
    v72 = v71;
    v73 = v71;
    v40 = *(_QWORD *)(v38 + 64);
    MEMORY[0x24BDAC7A8](v39);
    v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
    v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))((char *)v71 - v41, v35, v37);
    MEMORY[0x24BDAC7A8](v42);
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))((char *)v71 - v41, (char *)v71 - v41, v37);
    sub_2375E1038((uint64_t)v71 - v41, (uint64_t)v85);
    v43 = ctb::bridging::makeOptional((uint64_t)v85, (uint64_t)&v87);
    (*(void (**)(char *, uint64_t, __n128))(v38 + 8))((char *)v71 - v41, v37, v43);
    BYTE8(v91) = 0;
  }
  sub_2375BB424((uint64_t)v35, &qword_2567FB720);
  if ((BYTE8(v91) & 1) != 0)
  {
    v86 = 0;
    memset(v85, 0, sizeof(v85));
    std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](v85);
    sub_2375BB424((uint64_t)&v87, &qword_2567FB728);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100]((uint64_t)v85, (__int128 *)&v87);
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional((uint64_t)&v87);
  }
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB730);
  v45 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)v71 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_2375EB2C4();
  MEMORY[0x24BDAC7A8](v47);
  sub_2375BB3E0((uint64_t)v46, (uint64_t)v46, &qword_2567FB730);
  v48 = sub_2375EB588();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v46, 1, v48);
  if ((_DWORD)v50 == 1)
  {
    v88 = 0u;
    v89 = 0u;
    v87 = 0u;
    LOBYTE(v90) = 1;
  }
  else
  {
    v71[1] = v71;
    v72 = v71;
    v51 = *(_QWORD *)(v49 + 64);
    MEMORY[0x24BDAC7A8](v50);
    v52 = (char *)v71 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
    v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))(v52, v46, v48);
    v73 = v71;
    MEMORY[0x24BDAC7A8](v53);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v52, v52, v48);
    v54 = v74;
    sub_2375EB564();
    v55 = sub_2375EAA00();
    v57 = v56;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v54, v76);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v55, v57, (std::string *)&v87);
    v58 = sub_2375EB570();
    if ((v59 & 1) != 0)
      v60 = 0;
    else
      v60 = v58;
    v61 = sub_2375EB57C();
    v62 = *(void (**)(char *, uint64_t))(v49 + 8);
    v62(v52, v48);
    std::string::basic_string[abi:ne180100](&v82, &v87);
    std::string::~string((std::string *)&v87);
    *((_QWORD *)&v83 + 1) = v60;
    *(_QWORD *)&v84 = v61;
    v63 = ctb::bridging::makeOptional((uint64_t)&v82, (uint64_t)&v87);
    ((void (*)(char *, uint64_t, __n128))v62)(v52, v48, v63);
    LOBYTE(v90) = 0;
  }
  sub_2375BB424((uint64_t)v46, &qword_2567FB730);
  if ((v90 & 1) != 0)
  {
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](&v82);
    v64 = sub_2375EB324();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v81, v64);
    sub_2375BB424((uint64_t)&v87, &qword_2567FB738);
  }
  else
  {
    v65 = sub_2375EB324();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v81, v65);
    std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]((uint64_t)&v82, (__int128 *)&v87);
    std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional((uint64_t)&v87);
  }
  v66 = v80;
  *v80 = v79 & 1;
  v67 = v77;
  *((_QWORD *)v66 + 1) = v78;
  *((_QWORD *)v66 + 2) = v67;
  v68 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]((uint64_t)(v66 + 24), v98);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional(v98, v68);
  v69 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]((uint64_t)(v66 + 120), v97);
  std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional(v97, v69);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100]((uint64_t)(v66 + 264), v85);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional((uint64_t)v85);
  std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]((uint64_t)(v66 + 336), (__int128 *)&v82);
  return std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional((uint64_t)&v82);
}

uint64_t sub_2375E0978@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD v10[3];

  if (!sub_2375EB0A8())
  {
    memset(v8, 0, sizeof(v8));
    v9 = 1;
    goto LABEL_5;
  }
  v4 = swift_bridgeObjectRetain();
  sub_2375DD230(v4, (uint64_t (*)(uint64_t))MEMORY[0x24BE0D940], &qword_2567FB6D0, MEMORY[0x24BE0D960], v8);
  v9 = 0;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_5:
    memset(v10, 0, sizeof(v10));
    std::set<std::string>::set[abi:ne180100](v10);
    v6 = sub_2375EB0B4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    sub_2375BB424((uint64_t)v8, &qword_2567FB6C8);
    goto LABEL_6;
  }
  v5 = sub_2375EB0B4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  std::set<std::string>::set[abi:ne180100](v10, v8);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v8);
LABEL_6:
  std::set<std::string>::set[abi:ne180100](a2, v10);
  return std::set<std::string>::~set[abi:ne180100]((uint64_t)v10);
}

void sub_2375E0A80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v32 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v32 - v11;
  sub_2375EB084();
  v13 = sub_2375EAA18();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13) == 1)
  {
    sub_2375BB424((uint64_t)v12, &qword_2567FB3A8);
    v16 = 0;
    v17 = 0xE000000000000000;
  }
  else
  {
    v16 = sub_2375EAA00();
    v17 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v16, v17, &v35);
  sub_2375EB06C();
  if (v15(v10, 1, v13) == 1)
  {
    sub_2375BB424((uint64_t)v10, &qword_2567FB3A8);
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  else
  {
    v19 = sub_2375EAA00();
    v20 = v21;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v20, &v34);
  sub_2375EB078();
  if (v15(v7, 1, v13) == 1)
  {
    sub_2375BB424((uint64_t)v7, &qword_2567FB3A8);
    v22 = 0;
    v23 = 0xE000000000000000;
  }
  else
  {
    v22 = sub_2375EAA00();
    v23 = v24;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v22, v23, &v33);
  v25 = sub_2375EB048();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB054();
  v29 = sub_2375EB03C();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  LOBYTE(v25) = sub_2375EB060();
  v30 = sub_2375EB090();
  v31 = sub_2375EB09C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v35);
  std::string::~string(&v35);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v34);
  std::string::~string(&v34);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v33);
  std::string::~string(&v33);
  *(_QWORD *)(a2 + 72) = v29;
  *(_BYTE *)(a2 + 80) = v25 & 1;
  *(_BYTE *)(a2 + 81) = v30 & 1;
}

void sub_2375E0D84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  ctb::bridging *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  uint64_t v41;
  uint64_t v42;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v34 - v8;
  v10 = sub_2375EB4C8();
  v11 = (ctb::bridging *)MEMORY[0x23B814FA0]();
  if ((v12 & 1) != 0)
  {
    v41 = 0;
    v42 = 0;
    std::optional<unsigned long>::optional[abi:ne180100](&v41);
    v35 = v42;
    v36 = v41;
  }
  else
  {
    ctb::bridging::makeOptional(v11);
    v35 = v13 & 1;
    v36 = v14;
    v41 = v14;
    v42 = v35;
  }
  sub_2375EB4EC();
  v15 = sub_2375EAA18();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v9, 1, v15) == 1)
  {
    sub_2375BB424((uint64_t)v9, &qword_2567FB3A8);
    v18 = 0;
    v19 = 0xE000000000000000;
  }
  else
  {
    v18 = sub_2375EAA00();
    v19 = v20;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v18, v19, &v40);
  sub_2375EB504();
  if (v17(v7, 1, v15) == 1)
  {
    sub_2375BB424((uint64_t)v7, &qword_2567FB3A8);
    v21 = 0;
    v22 = 0xE000000000000000;
  }
  else
  {
    v21 = sub_2375EAA00();
    v22 = v23;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v15);
  }
  v24 = v36;
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v21, v22, &v39);
  v25 = sub_2375EB4F8();
  if (!v26)
  {
    v25 = 0;
    v26 = 0xE000000000000000;
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v25, v26, &v38);
  v27 = sub_2375EB51C();
  if (!v28)
  {
    v27 = 0;
    v28 = 0xE000000000000000;
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v27, v28, &v37);
  v29 = sub_2375EB4E0();
  v30 = sub_2375EB4D4();
  v31 = sub_2375EB510();
  v32 = sub_2375EB534();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
  v33 = v35;
  *(_QWORD *)(a2 + 8) = v24;
  *(_QWORD *)(a2 + 16) = v33;
  *(_QWORD *)a2 = v10;
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v40);
  std::string::~string(&v40);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v39);
  std::string::~string(&v39);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 72), (__n128 *)&v38);
  std::string::~string(&v38);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 96), (__n128 *)&v37);
  std::string::~string(&v37);
  *(_BYTE *)(a2 + 120) = v29 & 1;
  *(_BYTE *)(a2 + 121) = v30 & 1;
  *(_QWORD *)(a2 + 128) = v31;
}

void sub_2375E1038(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB3A8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_2375EAF7C();
  v21 = v7;
  v25 = sub_2375EAFA0();
  v24 = sub_2375EAF70();
  v8 = MEMORY[0x23B814A00]();
  v10 = v9;
  v22 = sub_2375EAF58();
  v11 = sub_2375EAF64();
  sub_2375EAF94();
  v12 = sub_2375EAA18();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) == 1)
  {
    sub_2375BB424((uint64_t)v6, &qword_2567FB3A8);
    v14 = 0;
    v15 = 0xE000000000000000;
  }
  else
  {
    v14 = sub_2375EAA00();
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v12);
  }
  if ((v10 & 1) != 0)
    v8 = 0;
  if ((v21 & 1) != 0)
    v17 = 0;
  else
    v17 = v23;
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v15, &v26);
  v18 = sub_2375EAFAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  v19 = v25;
  *(_QWORD *)a2 = v17;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = v22 & 1;
  *(_BYTE *)(a2 + 33) = v11 & 1;
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 40), (__n128 *)&v26);
  std::string::~string(&v26);
}

uint64_t sub_2375E11E0(uint64_t a1)
{
  uint64_t *v1;

  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2375E1200(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB740);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2375EB474();
  v5 = sub_2375EB48C();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_2375BB424((uint64_t)v4, &qword_2567FB740);
    v7 = 0;
  }
  else
  {
    v7 = sub_2375EB480();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_2375EB4A4();
  sub_2375EB498();
  sub_2375EB4B0();
  v8 = sub_2375EB4BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

double ctb::bridging::makeOptional@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl>(a2, a1).n128_u64[0];
  return result;
}

uint64_t ctb::bridging::makeOptional@<X0>(uint64_t this@<X0>, Vers a2@<0:X1, 8:X2>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = this;
  *(_QWORD *)(a3 + 8) = a2.var0;
  *(_BYTE *)(a3 + 16) = 1;
  return this;
}

__n128 ctb::ProvisioningConfiguration::Token::Token(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

void ctb::ProvisioningConfiguration::Token::~Token(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void **std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[88] = 0;
  return result;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[136] = 0;
  return result;
}

_BYTE *std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](_BYTE *result)
{
  *result = 0;
  result[40] = 0;
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v3 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(result + 24) = v3;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v4 = a2[3];
    *(_QWORD *)(result + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(result + 48) = v4;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v5 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(result + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(result + 72) = v5;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)a2 + 9) = 0;
    v6 = *((_QWORD *)a2 + 12);
    *(_WORD *)(result + 104) = *((_WORD *)a2 + 52);
    *(_QWORD *)(result + 96) = v6;
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 256) = 0;
  if (*((_BYTE *)a2 + 256))
  {
    v7 = *(__int128 *)((char *)a2 + 120);
    *(_BYTE *)(result + 136) = *((_BYTE *)a2 + 136);
    *(_OWORD *)(result + 120) = v7;
    v8 = a2[9];
    *(_QWORD *)(result + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(result + 144) = v8;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 20) = 0;
    *((_QWORD *)a2 + 18) = 0;
    v9 = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(result + 184) = *((_QWORD *)a2 + 23);
    *(_OWORD *)(result + 168) = v9;
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)a2 + 21) = 0;
    v10 = a2[12];
    *(_QWORD *)(result + 208) = *((_QWORD *)a2 + 26);
    *(_OWORD *)(result + 192) = v10;
    *((_QWORD *)a2 + 24) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *((_QWORD *)a2 + 26) = 0;
    v11 = *(__int128 *)((char *)a2 + 216);
    *(_QWORD *)(result + 232) = *((_QWORD *)a2 + 29);
    *(_OWORD *)(result + 216) = v11;
    *((_QWORD *)a2 + 27) = 0;
    *((_QWORD *)a2 + 28) = 0;
    *((_QWORD *)a2 + 29) = 0;
    *(_OWORD *)(result + 240) = a2[15];
    *(_BYTE *)(result + 256) = 1;
  }
  *(_BYTE *)(result + 264) = 0;
  *(_BYTE *)(result + 328) = 0;
  if (*((_BYTE *)a2 + 328))
  {
    v12 = *(__int128 *)((char *)a2 + 264);
    v13 = *(__int128 *)((char *)a2 + 280);
    *(_WORD *)(result + 296) = *((_WORD *)a2 + 148);
    *(_OWORD *)(result + 264) = v12;
    *(_OWORD *)(result + 280) = v13;
    v14 = a2[19];
    *(_QWORD *)(result + 320) = *((_QWORD *)a2 + 40);
    *(_OWORD *)(result + 304) = v14;
    *((_QWORD *)a2 + 39) = 0;
    *((_QWORD *)a2 + 40) = 0;
    *((_QWORD *)a2 + 38) = 0;
    *(_BYTE *)(result + 328) = 1;
  }
  *(_BYTE *)(result + 336) = 0;
  *(_BYTE *)(result + 376) = 0;
  if (*((_BYTE *)a2 + 376))
  {
    v15 = a2[21];
    *(_QWORD *)(result + 352) = *((_QWORD *)a2 + 44);
    *(_OWORD *)(result + 336) = v15;
    *((_QWORD *)a2 + 43) = 0;
    *((_QWORD *)a2 + 44) = 0;
    *((_QWORD *)a2 + 42) = 0;
    *(_OWORD *)(result + 360) = *(__int128 *)((char *)a2 + 360);
    *(_BYTE *)(result + 376) = 1;
  }
  *(_BYTE *)(result + 384) = 1;
  return result;
}

__n128 std::__optional_destruct_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 result;
  __int128 v29;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v3 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v4 = a2 + 4;
  v5 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = a1 + 64;
  v7 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *((_QWORD *)a2 + 7) = v4;
    *v4 = 0;
    *((_QWORD *)a2 + 9) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v6;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  v8 = (_QWORD *)a2 + 11;
  v9 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = a1 + 88;
  v11 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *((_QWORD *)a2 + 10) = v8;
    *v8 = 0;
    *((_QWORD *)a2 + 12) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v10;
  }
  v12 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v12;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v13 = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_OWORD *)(a1 + 128) = v13;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v14 = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v14;
  v15 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 176) = v15;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  v16 = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(a1 + 200) = v16;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  v17 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 224) = v17;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  v18 = *(__int128 *)((char *)a2 + 248);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  *(_OWORD *)(a1 + 248) = v18;
  *((_QWORD *)a2 + 31) = 0;
  *((_QWORD *)a2 + 32) = 0;
  *((_QWORD *)a2 + 33) = 0;
  v19 = a2[17];
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v19;
  *((_QWORD *)a2 + 34) = 0;
  *((_QWORD *)a2 + 35) = 0;
  *((_QWORD *)a2 + 36) = 0;
  v20 = *(__int128 *)((char *)a2 + 296);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_OWORD *)(a1 + 296) = v20;
  *((_QWORD *)a2 + 37) = 0;
  *((_QWORD *)a2 + 38) = 0;
  *((_QWORD *)a2 + 39) = 0;
  v21 = a2[20];
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
  *(_OWORD *)(a1 + 320) = v21;
  *((_QWORD *)a2 + 40) = 0;
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  v22 = *(__int128 *)((char *)a2 + 344);
  *(_QWORD *)(a1 + 360) = *((_QWORD *)a2 + 45);
  *(_OWORD *)(a1 + 344) = v22;
  *((_QWORD *)a2 + 43) = 0;
  *((_QWORD *)a2 + 44) = 0;
  *((_QWORD *)a2 + 45) = 0;
  v23 = a2[23];
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_OWORD *)(a1 + 368) = v23;
  *((_QWORD *)a2 + 46) = 0;
  *((_QWORD *)a2 + 47) = 0;
  *((_QWORD *)a2 + 48) = 0;
  v24 = *(__int128 *)((char *)a2 + 392);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_OWORD *)(a1 + 392) = v24;
  *((_QWORD *)a2 + 49) = 0;
  *((_QWORD *)a2 + 50) = 0;
  *((_QWORD *)a2 + 51) = 0;
  v25 = a2[26];
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
  *(_OWORD *)(a1 + 416) = v25;
  *((_QWORD *)a2 + 52) = 0;
  *((_QWORD *)a2 + 53) = 0;
  *((_QWORD *)a2 + 54) = 0;
  v26 = *(__int128 *)((char *)a2 + 440);
  *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 57);
  *(_OWORD *)(a1 + 440) = v26;
  *((_QWORD *)a2 + 55) = 0;
  *((_QWORD *)a2 + 56) = 0;
  *((_QWORD *)a2 + 57) = 0;
  v27 = a2[29];
  *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
  *(_OWORD *)(a1 + 464) = v27;
  *((_QWORD *)a2 + 58) = 0;
  *((_QWORD *)a2 + 59) = 0;
  *((_QWORD *)a2 + 60) = 0;
  result = *(__n128 *)((char *)a2 + 488);
  v29 = *(__int128 *)((char *)a2 + 504);
  *(_WORD *)(a1 + 520) = *((_WORD *)a2 + 260);
  *(__n128 *)(a1 + 488) = result;
  *(_OWORD *)(a1 + 504) = v29;
  *(_BYTE *)(a1 + 528) = 1;
  return result;
}

__n128 std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v2 = (_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 8;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)a2 = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t sub_2375E1A58(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x69616E626D756874;
  else
    v3 = 1701603686;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE90000000000006CLL;
  if ((a2 & 1) != 0)
    v5 = 0x69616E626D756874;
  else
    v5 = 1701603686;
  if ((a2 & 1) != 0)
    v6 = 0xE90000000000006CLL;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2375EC488();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2375E1AF4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656D686361747461;
  else
    v3 = 0x7265646E6572;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEA0000000000746ELL;
  if ((a2 & 1) != 0)
    v5 = 0x656D686361747461;
  else
    v5 = 0x7265646E6572;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000746ELL;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2375EC488();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2375E1B94()
{
  sub_2375EC4D0();
  sub_2375EC254();
  swift_bridgeObjectRelease();
  return sub_2375EC4E8();
}

uint64_t sub_2375E1C10()
{
  sub_2375EC4D0();
  sub_2375EC254();
  swift_bridgeObjectRelease();
  return sub_2375EC4E8();
}

uint64_t sub_2375E1C90()
{
  sub_2375EC254();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375E1CE4()
{
  sub_2375EC254();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375E1D3C()
{
  sub_2375EC4D0();
  sub_2375EC254();
  swift_bridgeObjectRelease();
  return sub_2375EC4E8();
}

uint64_t sub_2375E1DB8()
{
  sub_2375EC4D0();
  sub_2375EC254();
  swift_bridgeObjectRelease();
  return sub_2375EC4E8();
}

CTBlastDoorSupport::FileInfo::FileType_optional __swiftcall FileInfo.FileType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CTBlastDoorSupport::FileInfo::FileType_optional)sub_2375E1F7C(v1);
}

uint64_t FileInfo.FileType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x69616E626D756874;
  else
    return 1701603686;
}

uint64_t sub_2375E1E74(char *a1, char *a2)
{
  return sub_2375E1A58(*a1, *a2);
}

uint64_t sub_2375E1E80()
{
  return sub_2375E1B94();
}

uint64_t sub_2375E1E88()
{
  return sub_2375E1C90();
}

uint64_t sub_2375E1E90()
{
  return sub_2375E1DB8();
}

CTBlastDoorSupport::FileInfo::FileType_optional sub_2375E1E98(Swift::String *a1)
{
  return FileInfo.FileType.init(rawValue:)(*a1);
}

uint64_t sub_2375E1EA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FileInfo.FileType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2375E1EC8()
{
  sub_2375E3984();
  return sub_2375EC2D8();
}

uint64_t sub_2375E1F24()
{
  sub_2375E3984();
  return sub_2375EC2CC();
}

CTBlastDoorSupport::FileInfo::FileDisposition_optional __swiftcall FileInfo.FileDisposition.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CTBlastDoorSupport::FileInfo::FileDisposition_optional)sub_2375E1F7C(v1);
}

uint64_t sub_2375E1F7C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2375EC3F8();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t FileInfo.FileDisposition.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x656D686361747461;
  else
    return 0x7265646E6572;
}

uint64_t sub_2375E2014(char *a1, char *a2)
{
  return sub_2375E1AF4(*a1, *a2);
}

uint64_t sub_2375E2020()
{
  return sub_2375E1C10();
}

uint64_t sub_2375E2028()
{
  return sub_2375E1CE4();
}

uint64_t sub_2375E2030()
{
  return sub_2375E1D3C();
}

CTBlastDoorSupport::FileInfo::FileDisposition_optional sub_2375E2038(Swift::String *a1)
{
  return FileInfo.FileDisposition.init(rawValue:)(*a1);
}

uint64_t sub_2375E2044@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FileInfo.FileDisposition.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2375E2068()
{
  sub_2375E3940();
  return sub_2375EC2D8();
}

uint64_t sub_2375E20C4()
{
  sub_2375E3940();
  return sub_2375EC2CC();
}

void FileInfo.fileType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void FileInfo.fileDisposition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t FileInfo.fileSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FileInfo.fileName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FileInfo.contentType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FileInfo.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FileInfo() + 36);
  v4 = sub_2375EAA18();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for FileInfo()
{
  uint64_t result;

  result = qword_2567FB808;
  if (!qword_2567FB808)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FileInfo.untilDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FileInfo() + 40);
  v4 = sub_2375EAAB4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_2375E2254(char a1)
{
  return *(_QWORD *)&aFiletypefiledi[8 * a1];
}

BOOL sub_2375E2274(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2375E2288()
{
  char *v0;

  return sub_2375E2254(*v0);
}

uint64_t sub_2375E2290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2375E366C(a1, a2);
  *a3 = result;
  return result;
}

void sub_2375E22B4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_2375E22C0()
{
  sub_2375E2598();
  return sub_2375EC524();
}

uint64_t sub_2375E22E8()
{
  sub_2375E2598();
  return sub_2375EC530();
}

uint64_t FileInfo.encode(to:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB748);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2375E2598();
  sub_2375EC500();
  v10[15] = *v3;
  v10[14] = 0;
  sub_2375E25DC();
  sub_2375EC470();
  if (!v2)
  {
    v10[13] = v3[1];
    v10[12] = 1;
    sub_2375E2620();
    sub_2375EC44C();
    v10[11] = 2;
    sub_2375EC464();
    v10[10] = 3;
    sub_2375EC440();
    v10[9] = 4;
    sub_2375EC458();
    type metadata accessor for FileInfo();
    v10[8] = 5;
    sub_2375EAA18();
    sub_2375B42FC(&qword_2567FB768, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_2375EC470();
    v10[7] = 6;
    sub_2375EAAB4();
    sub_2375B42FC(&qword_2567FB770, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2375EC470();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2375E2598()
{
  unint64_t result;

  result = qword_2567FB750;
  if (!qword_2567FB750)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F3270, &type metadata for FileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB750);
  }
  return result;
}

unint64_t sub_2375E25DC()
{
  unint64_t result;

  result = qword_2567FB758;
  if (!qword_2567FB758)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileType, &type metadata for FileInfo.FileType);
    atomic_store(result, (unint64_t *)&qword_2567FB758);
  }
  return result;
}

unint64_t sub_2375E2620()
{
  unint64_t result;

  result = qword_2567FB760;
  if (!qword_2567FB760)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileDisposition, &type metadata for FileInfo.FileDisposition);
    atomic_store(result, (unint64_t *)&qword_2567FB760);
  }
  return result;
}

uint64_t FileInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v31 = a2;
  v3 = sub_2375EAAB4();
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_2375EAA18();
  v5 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2567FB778);
  v8 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FileInfo();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_2375E2598();
  v34 = v10;
  v15 = v36;
  sub_2375EC4F4();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  v36 = v7;
  v16 = v8;
  v17 = v5;
  v18 = (uint64_t)v13;
  v19 = v31;
  v44 = 0;
  sub_2375E2ABC();
  v20 = v32;
  sub_2375EC434();
  *(_BYTE *)v18 = v45;
  v42 = 1;
  sub_2375E2B00();
  sub_2375EC410();
  *(_BYTE *)(v18 + 1) = v43;
  v41 = 2;
  *(_QWORD *)(v18 + 8) = sub_2375EC428();
  v40 = 3;
  *(_QWORD *)(v18 + 16) = sub_2375EC404();
  *(_QWORD *)(v18 + 24) = v21;
  v39 = 4;
  *(_QWORD *)(v18 + 32) = sub_2375EC41C();
  *(_QWORD *)(v18 + 40) = v22;
  v38 = 5;
  sub_2375B42FC(&qword_2567FB790, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  sub_2375EC434();
  v23 = v11;
  v24 = v18 + *(int *)(v11 + 36);
  v27[1] = v17;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24, v36, v33);
  v37 = 6;
  sub_2375B42FC(&qword_2567FB798, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v25 = v29;
  sub_2375EC434();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v18 + *(int *)(v23 + 40), v30, v25);
  sub_2375E2B44(v18, v19);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  return sub_2375E2B88(v18);
}

unint64_t sub_2375E2ABC()
{
  unint64_t result;

  result = qword_2567FB780;
  if (!qword_2567FB780)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileType, &type metadata for FileInfo.FileType);
    atomic_store(result, (unint64_t *)&qword_2567FB780);
  }
  return result;
}

unint64_t sub_2375E2B00()
{
  unint64_t result;

  result = qword_2567FB788;
  if (!qword_2567FB788)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileDisposition, &type metadata for FileInfo.FileDisposition);
    atomic_store(result, (unint64_t *)&qword_2567FB788);
  }
  return result;
}

uint64_t sub_2375E2B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2375E2B88(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2375E2BC8()
{
  unint64_t result;

  result = qword_2567FB7A0;
  if (!qword_2567FB7A0)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileType, &type metadata for FileInfo.FileType);
    atomic_store(result, (unint64_t *)&qword_2567FB7A0);
  }
  return result;
}

unint64_t sub_2375E2C10()
{
  unint64_t result;

  result = qword_2567FB7A8;
  if (!qword_2567FB7A8)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileDisposition, &type metadata for FileInfo.FileDisposition);
    atomic_store(result, (unint64_t *)&qword_2567FB7A8);
  }
  return result;
}

uint64_t sub_2375E2C54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FileInfo.init(from:)(a1, a2);
}

uint64_t sub_2375E2C68(_QWORD *a1)
{
  return FileInfo.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for FileInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(int *)(a3 + 36);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 40) = a2[5];
    v11 = sub_2375EAA18();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 40);
    v14 = (char *)v4 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = sub_2375EAAB4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t destroy for FileInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_2375EAA18();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  v7 = sub_2375EAAB4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = sub_2375EAA18();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2375EAAB4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t assignWithCopy for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2375EAA18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2375EAAB4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_2375EAA18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 40);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2375EAAB4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_2375EAA18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 40);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2375EAAB4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2375E3148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2375EAA18();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = sub_2375EAAB4();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FileInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2375E31F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v8 = sub_2375EAA18();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = sub_2375EAAB4();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_2375E3290()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_2375EAA18();
  if (v1 <= 0x3F)
  {
    result = sub_2375EAAB4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FileInfo.FileType()
{
  return &type metadata for FileInfo.FileType;
}

uint64_t _s18CTBlastDoorSupport8FileInfoV8FileTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2375E33B0 + 4 * byte_2375F2EA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2375E33E4 + 4 * byte_2375F2EA0[v4]))();
}

uint64_t sub_2375E33E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375E33EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2375E33F4);
  return result;
}

uint64_t sub_2375E3400(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2375E3408);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2375E340C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375E3414(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileInfo.FileDisposition()
{
  return &type metadata for FileInfo.FileDisposition;
}

uint64_t getEnumTagSinglePayload for FileInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FileInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_2375E350C + 4 * byte_2375F2EAF[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2375E3540 + 4 * byte_2375F2EAA[v4]))();
}

uint64_t sub_2375E3540(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375E3548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2375E3550);
  return result;
}

uint64_t sub_2375E355C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2375E3564);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2375E3568(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375E3570(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_2375E357C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FileInfo.CodingKeys()
{
  return &type metadata for FileInfo.CodingKeys;
}

unint64_t sub_2375E3598()
{
  unint64_t result;

  result = qword_2567FB858;
  if (!qword_2567FB858)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F3248, &type metadata for FileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB858);
  }
  return result;
}

unint64_t sub_2375E35E0()
{
  unint64_t result;

  result = qword_2567FB860;
  if (!qword_2567FB860)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F31B8, &type metadata for FileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB860);
  }
  return result;
}

unint64_t sub_2375E3628()
{
  unint64_t result;

  result = qword_2567FB868;
  if (!qword_2567FB868)
  {
    result = MEMORY[0x23B8163BC](&unk_2375F31E0, &type metadata for FileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2567FB868);
  }
  return result;
}

uint64_t sub_2375E366C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x65707954656C6966 && a2 == 0xE800000000000000;
  if (v3 || (sub_2375EC488() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x70736944656C6966 && a2 == 0xEF6E6F697469736FLL || (sub_2375EC488() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000 || (sub_2375EC488() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000 || (sub_2375EC488() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079 || (sub_2375EC488() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_2375EC488() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461446C69746E75 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_2375EC488();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_2375E3940()
{
  unint64_t result;

  result = qword_2567FB870;
  if (!qword_2567FB870)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileDisposition, &type metadata for FileInfo.FileDisposition);
    atomic_store(result, (unint64_t *)&qword_2567FB870);
  }
  return result;
}

unint64_t sub_2375E3984()
{
  unint64_t result;

  result = qword_2567FB878;
  if (!qword_2567FB878)
  {
    result = MEMORY[0x23B8163BC](&protocol conformance descriptor for FileInfo.FileType, &type metadata for FileInfo.FileType);
    atomic_store(result, (unint64_t *)&qword_2567FB878);
  }
  return result;
}

uint64_t Bool.init<A>(fromCxx:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) & 1;
}

uint64_t CxxConvertibleToCollection.forEach(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  void (*v27)(_BYTE *, _QWORD);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _BYTE v46[32];
  uint64_t AssociatedConformanceWitness;

  v5 = v4;
  v41 = a1;
  v42 = a2;
  AssociatedConformanceWitness = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v36 - v9;
  v11 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v39 = (char *)&v36 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v36 - v19;
  v21 = a4;
  v45 = a4;
  v22 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v23 = AssociatedConformanceWitness;
  v22(AssociatedConformanceWitness, v21);
  (*(void (**)(uint64_t))(v45 + 40))(v23);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v44 = v18;
  v38 = v24;
  if ((sub_2375EC20C() & 1) != 0)
  {
    v25 = *(void (**)(char *, uint64_t))(v43 + 8);
    v25(v44, v11);
    return ((uint64_t (*)(char *, uint64_t))v25)(v20, v11);
  }
  else
  {
    v37 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    v26 = v39;
    while (1)
    {
      v27 = (void (*)(_BYTE *, _QWORD))v37(v46, v11, AssociatedConformanceWitness);
      (*(void (**)(char *))(v8 + 16))(v10);
      v27(v46, 0);
      v41(v10);
      if (v5)
        break;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
      v45 = 0;
      v28 = v10;
      v29 = v8;
      v30 = AssociatedTypeWitness;
      v31 = v43;
      v32 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v33 = v40;
      v32(v40, v20, v11);
      (*(void (**)(uint64_t))(AssociatedConformanceWitness + 32))(v11);
      v25 = *(void (**)(char *, uint64_t))(v31 + 8);
      v25(v33, v11);
      v32(v20, v26, v11);
      AssociatedTypeWitness = v30;
      v8 = v29;
      v10 = v28;
      v5 = v45;
      if ((sub_2375EC20C() & 1) != 0)
      {
        v25(v44, v11);
        return ((uint64_t (*)(char *, uint64_t))v25)(v20, v11);
      }
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    v35 = *(void (**)(char *, uint64_t))(v43 + 8);
    v35(v44, v11);
    return ((uint64_t (*)(char *, uint64_t))v35)(v20, v11);
  }
}

uint64_t CxxConvertibleToCollection<>.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *);
  void (*v21)(char *, char *, uint64_t);
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v23[0] = a1;
  v23[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)v23 - v6;
  v8 = sub_2375EC320();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - v10;
  v26 = *(char **)(a3 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v23 - v15;
  (*((void (**)(char *, uint64_t, uint64_t))v26 + 2))(v13, v27, a3);
  sub_2375EC2B4();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = v16;
  v27 = v14;
  sub_2375EC32C();
  v18 = v28;
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v19(v11, 1, AssociatedTypeWitness) != 1)
  {
    v25 = AssociatedConformanceWitness;
    v20 = (void (*)(char *))v23[0];
    v21 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    while (1)
    {
      v21(v7, v11, AssociatedTypeWitness);
      v20(v7);
      if (v3)
        break;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, AssociatedTypeWitness);
      sub_2375EC32C();
      if (v19(v11, 1, AssociatedTypeWitness) == 1)
        return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v27);
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v27);
}

uint64_t RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_2375E4070(a1, a2, a3, a4, MEMORY[0x24BEE1B30], (void (*)(char *))sub_2375E4040, a5);
}

uint64_t sub_2375E3F90(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v6 - v4, a1);
  return sub_2375EC2FC();
}

uint64_t sub_2375E4040(uint64_t a1)
{
  return sub_2375E4208(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2375E3F90);
}

uint64_t SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_2375E4070(a1, a2, a3, a4, MEMORY[0x24BEE22B8], (void (*)(char *))sub_2375E41EC, a5);
}

uint64_t sub_2375E4070@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, void (*a6)(char *)@<X6>, uint64_t a7@<X8>)
{
  _QWORD v14[8];

  a5(a1, a3);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  v14[6] = a7;
  return CxxConvertibleToCollection.forEach(_:)(a6, (uint64_t)v14, a2, a4);
}

uint64_t sub_2375E40F8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, AssociatedTypeWitness);
  sub_2375EC38C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, AssociatedTypeWitness);
}

uint64_t sub_2375E41EC(uint64_t a1)
{
  return sub_2375E4208(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2375E40F8);
}

uint64_t sub_2375E4208(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t CxxDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedConformanceWitness;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  void (*v21)(_BYTE *, _QWORD);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[32];

  v30 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v28 = (char *)&v27 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 104))(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 144))(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = sub_2375EC20C();
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  if ((v17 & 1) != 0)
  {
    v18(v15, v9);
    v19 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v30, 1, 1, v19);
  }
  else
  {
    v21 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v31, v9, AssociatedConformanceWitness);
    v22 = v28;
    v23 = v29;
    (*(void (**)(char *))(v29 + 16))(v28);
    v21(v31, 0);
    v18(v15, v9);
    v24 = swift_getAssociatedConformanceWitness();
    v25 = v30;
    (*(void (**)(uint64_t, uint64_t))(v24 + 56))(AssociatedTypeWitness, v24);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v22, AssociatedTypeWitness);
    v26 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 0, 1, v26);
  }
}

uint64_t CxxDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(_BYTE *, _QWORD);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *AssociatedConformanceWitness;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _BYTE v59[32];

  v58 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v54 = (char *)AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  AssociatedConformanceWitness = (char *)&v46 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)&v46 - v10;
  v55 = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v46 = (char *)&v46 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v46 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v57 = (char *)&v46 - v19;
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v56 = (char *)&v46 - v25;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(a1, 1, v20) == 1)
  {
    v26 = sub_2375EC320();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
    v27 = AssociatedConformanceWitness;
    v28 = v58;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 128))(v58, a3, a4);
    v29 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
    return (*(uint64_t (**)(char *, char *))(v53 + 8))(v27, v54);
  }
  else
  {
    v53 = *(_QWORD *)(v21 + 32);
    v54 = v24;
    ((void (*)(char *, uint64_t, uint64_t))v53)(v56, a1, v20);
    v31 = v57;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 112))(v58, a3, a4);
    v32 = v51;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v18, v31, v12);
    (*(void (**)(uint64_t, uint64_t))(a4 + 152))(a3, a4);
    AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
    v33 = sub_2375EC20C();
    v34 = *(void (**)(char *, uint64_t))(v32 + 8);
    v34(v15, v12);
    v34(v18, v12);
    if ((v33 & 1) != 0)
    {
      v34(v57, v12);
      v35 = v54;
      ((void (*)(char *, char *, uint64_t))v53)(v54, v56, v20);
      v36 = v55;
      v37 = swift_getAssociatedConformanceWitness();
      v38 = v46;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v37 + 24))(v58, v35, v36, v37);
      v39 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(a4 + 120))(v38, a3, a4);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v38, v36);
    }
    else
    {
      v40 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v58, v40);
      v41 = v54;
      ((void (*)(char *, char *, uint64_t))v53)(v54, v56, v20);
      v42 = v57;
      v43 = (void (*)(_BYTE *, _QWORD))(*((uint64_t (**)(_BYTE *, uint64_t))AssociatedConformanceWitness
                                                   + 3))(v59, v12);
      v44 = v55;
      v45 = swift_getAssociatedConformanceWitness();
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 64))(v41, v44, v45);
      v43(v59, 0);
      return ((uint64_t (*)(char *, uint64_t))v34)(v42, v12);
    }
  }
}

void (*CxxDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  size_t v16;

  v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  swift_getAssociatedTypeWitness();
  v10 = sub_2375EC320();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v9[6] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[7] = AssociatedTypeWitness;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[8] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v9[9] = malloc(v16);
  v9[10] = malloc(v16);
  (*(void (**)(void))(v15 + 16))();
  CxxDictionary.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return sub_2375E4A98;
}

void sub_2375E4A98(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (void *)(*a1)[9];
  v4 = (void *)(*a1)[10];
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    v7 = (void *)v2[5];
    v6 = (void *)v2[6];
    v8 = v2[3];
    v9 = v2[4];
    v10 = v2[1];
    v12 = v2[7];
    v11 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v12);
    CxxDictionary.subscript.setter((uint64_t)v7, (uint64_t)v3, v11, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    v7 = (void *)v2[5];
    v6 = (void *)v2[6];
    CxxDictionary.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t CxxDictionary.filter(_:)@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char v43;
  void (*v44)(_BYTE *, _QWORD);
  uint64_t v45;
  char *v46;
  char v47;
  char v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  void (**v53)(uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t (*v63)(_BYTE *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t (*v72)(char *, char *);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _BYTE v80[40];
  uint64_t v81;

  v72 = a1;
  v73 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v54 = (char *)&v53 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v53 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v67 = *(_QWORD *)(v11 - 8);
  v68 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v74 = (char *)&v53 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v78 = (char *)&v53 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v66 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v65 = (char *)&v53 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v53 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v53 - v24;
  v26 = a4[12];
  v57 = a5;
  v26(a3, (uint64_t)a4);
  a4[17](a3, (uint64_t)a4);
  a4[18](a3, (uint64_t)a4);
  v58 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v76 = v23;
  v77 = v25;
  v81 = v16;
  v64 = v28;
  if ((sub_2375EC20C() & 1) != 0)
  {
    v29 = *(void (**)(char *, uint64_t))(v75 + 8);
    v30 = v77;
LABEL_3:
    v31 = v81;
    v29(v76, v81);
    return ((uint64_t (*)(char *, uint64_t))v29)(v30, v31);
  }
  else
  {
    v63 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    v33 = swift_getAssociatedConformanceWitness();
    v61 = *(void (**)(uint64_t, uint64_t))(v33 + 32);
    v62 = v33;
    v60 = *(void (**)(uint64_t, uint64_t))(v33 + 56);
    v34 = v78;
    v35 = v79;
    v36 = v74;
    v53 = a4;
    v59 = AssociatedConformanceWitness;
    while (1)
    {
      v44 = (void (*)(_BYTE *, _QWORD))v63(v80, v81, AssociatedConformanceWitness);
      (*(void (**)(char *))(v14 + 16))(v34);
      v44(v80, 0);
      v45 = v62;
      v61(v13, v62);
      v46 = v71;
      v60(v13, v45);
      v47 = v72(v36, v46);
      if (v35)
        break;
      v48 = v47;
      v79 = 0;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v70);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v36, v68);
      v49 = v78;
      if ((v48 & 1) != 0)
      {
        v50 = v54;
        v53[15]((uint64_t)v78, v58);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v50, AssociatedTypeWitness);
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v49, v13);
      v37 = v75;
      v38 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      v39 = v66;
      v40 = v77;
      v41 = v81;
      v38(v66, v77, v81);
      AssociatedConformanceWitness = v59;
      v42 = v65;
      (*(void (**)(uint64_t, uint64_t))(v59 + 32))(v41, v59);
      v29 = *(void (**)(char *, uint64_t))(v37 + 8);
      v29(v39, v41);
      v38(v40, v42, v41);
      v43 = sub_2375EC20C();
      v30 = v40;
      v34 = v78;
      v35 = v79;
      v36 = v74;
      if ((v43 & 1) != 0)
        goto LABEL_3;
    }
    (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v70);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v36, v68);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v78, v13);
    v51 = *(void (**)(char *, uint64_t))(v75 + 8);
    v52 = v81;
    v51(v76, v81);
    v51(v77, v52);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v57);
  }
}

uint64_t CxxOptional.init(nilLiteral:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t CxxOptional.hasValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t CxxOptional.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(a2 + 32))() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
    v8 = a3;
    v9 = 0;
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
    v8 = a3;
    v9 = 1;
  }
  return v7(v8, v9, 1, AssociatedTypeWitness);
}

uint64_t Optional.init<A>(fromCxx:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = sub_2375EC320();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v15 - v12;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v13, 0, 1, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a5, 1, 1, a2);
  }
}

uint64_t CxxSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v32 = a5;
  v40 = a1;
  v41 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v38 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v35 = (char *)&v32 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v32 - v12;
  v14 = sub_2375EC320();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a3;
  v22 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v32 - v23;
  v25 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  v39 = a6;
  v36 = a4;
  v25(v41, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v40, v21);
  sub_2375EC2B4();
  swift_getAssociatedConformanceWitness();
  v26 = v24;
  v40 = v22;
  sub_2375EC32C();
  v27 = v33;
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v28(v17, 1, v11) != 1)
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v30 = v35;
    do
    {
      v29(v13, v17, v11);
      (*(void (**)(char *, uint64_t))(v36 + 48))(v13, v41);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
      sub_2375EC32C();
    }
    while (v28(v17, 1, v11) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v26, v40);
}

uint64_t CxxSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  _QWORD v18[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v18 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, a2, a3);
  swift_getAssociatedConformanceWitness();
  LOBYTE(a2) = sub_2375EC374();
  v13 = sub_2375EC368();
  if ((a2 & 1) == 0)
  {
    if (v13 > 63)
      goto LABEL_3;
LABEL_5:
    v16 = sub_2375EC35C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, AssociatedTypeWitness);
    v14 = v16 > 0;
    return v14 & 1;
  }
  if (v13 < 65)
    goto LABEL_5;
LABEL_3:
  v18[1] = 0;
  sub_2375B4240();
  sub_2375EC350();
  v14 = sub_2375EC200();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, AssociatedTypeWitness);
  v15(v12, AssociatedTypeWitness);
  return v14 & 1;
}

uint64_t CxxUniqueSet.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v24 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2, a3, v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v11, AssociatedConformanceWitness);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v25, v11, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v16 = LOBYTE(v25[0]);
  v17 = swift_getAssociatedConformanceWitness();
  v18 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v17 + 24))(v25, AssociatedTypeWitness, v17);
  v20 = v19;
  v21 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v24, v20, v21);
  v18(v25, 0);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, AssociatedTypeWitness);
  return v16;
}

uint64_t CxxRandomAccessCollection.startIndex.getter()
{
  return 0;
}

uint64_t CxxRandomAccessCollection.endIndex.getter()
{
  return sub_2375EC2F0();
}

uint64_t CxxRandomAccessCollection.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  char v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  char v46;
  char *i;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t result;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  char *v59;
  char *v60;
  char v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int64_t v67;
  uint64_t v68;
  BOOL v69;
  char *v70;
  char *v71;
  uint64_t AssociatedTypeWitness;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t AssociatedConformanceWitness;
  char *v80;
  char *v81;
  uint64_t v82;
  int64_t v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v78 = swift_getAssociatedConformanceWitness();
  v73 = *(_QWORD *)(*(_QWORD *)(v78 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v70 = (char *)&v70 - v4;
  v5 = swift_checkMetadataState();
  v77 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v70 - v9;
  v11 = swift_checkMetadataState();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v71 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v74 = (char *)&v70 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v80 = (char *)&v70 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v81 = (char *)&v70 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v76 = (char *)&v70 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v75 = (char *)&v70 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v70 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v70 - v28;
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(a1, v3);
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 32))(v10, v8, v5);
  v30 = *(void (**)(char *, uint64_t))(v77 + 8);
  v30(v8, v5);
  v30(v10, v5);
  LOBYTE(v30) = sub_2375EC374();
  v31 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v31(v27, v29, v11);
  if ((v30 & 1) == 0)
  {
    v33 = *(void (**)(char *, uint64_t))(v12 + 8);
    v33(v27, v11);
    goto LABEL_7;
  }
  v32 = sub_2375EC368();
  v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v27, v11);
  if (v32 <= 64)
  {
LABEL_7:
    v37 = v80;
    v36 = v81;
    goto LABEL_8;
  }
  v34 = v75;
  v31(v75, v29, v11);
  v83 = 0x8000000000000000;
  v35 = sub_2375EC374();
  v37 = v80;
  v36 = v81;
  if ((v35 & 1) != 0)
  {
    if (sub_2375EC368() >= 64)
    {
      sub_2375B4240();
      v59 = v76;
      sub_2375EC350();
      v60 = v34;
      v61 = sub_2375EC200();
      v62 = v59;
      v36 = v81;
      v33(v62, v11);
      v33(v60, v11);
      if ((v61 & 1) != 0)
        goto LABEL_32;
      goto LABEL_8;
    }
    v38 = sub_2375EC35C();
    v39 = v34;
    v40 = v38;
    v41 = v39;
LABEL_31:
    v33(v41, v11);
    if (v40 < v83)
      goto LABEL_32;
LABEL_8:
    v42 = sub_2375EC368();
    v31(v36, v29, v11);
    if (v42 < 65)
    {
      v48 = sub_2375EC368();
      v33(v36, v11);
      if (v48 != 64 || (sub_2375EC374() & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v33(v36, v11);
    }
    v31(v37, v29, v11);
    v83 = 0x7FFFFFFFFFFFFFFFLL;
    v43 = sub_2375EC374();
    v44 = sub_2375EC368();
    if ((v43 & 1) != 0)
    {
      if (v44 > 64)
      {
        sub_2375B4240();
        v45 = v76;
        sub_2375EC350();
        v46 = sub_2375EC200();
        v33(v45, v11);
        for (i = v37; ; i = v50)
        {
          v33(i, v11);
          if ((v46 & 1) == 0)
            break;
LABEL_18:
          __break(1u);
LABEL_19:
          v82 = 0x7FFFFFFFFFFFFFFFLL;
          v50 = v76;
          (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v76, v37, v11);
          sub_2375B4240();
          v51 = v74;
          sub_2375EC350();
          v46 = sub_2375EC200();
          v33(v51, v11);
        }
        goto LABEL_21;
      }
    }
    else if (v44 > 63)
    {
      goto LABEL_19;
    }
    v49 = sub_2375EC35C();
    v33(v37, v11);
    if (v83 < v49)
      goto LABEL_18;
LABEL_21:
    v52 = sub_2375EC35C();
    v33(v29, v11);
    return v52;
  }
  v54 = sub_2375EC374();
  v55 = sub_2375EC368();
  if ((v54 & 1) == 0)
  {
    if (v55 >= 64)
    {
      v33(v75, v11);
      goto LABEL_8;
    }
    v63 = v75;
    v40 = sub_2375EC35C();
    v41 = v63;
    goto LABEL_31;
  }
  if (v55 <= 64)
    goto LABEL_33;
  sub_2375B4240();
  v56 = v76;
  sub_2375EC350();
  v57 = v75;
  v58 = sub_2375EC200();
  v33(v56, v11);
  v33(v57, v11);
  v36 = v81;
  if ((v58 & 1) == 0)
    goto LABEL_8;
LABEL_32:
  while (1)
  {
    __break(1u);
LABEL_33:
    swift_getAssociatedConformanceWitness();
    sub_2375EC494();
    v64 = v76;
    sub_2375EC47C();
    v65 = v75;
    LODWORD(AssociatedConformanceWitness) = sub_2375EC200();
    v33(v64, v11);
    v66 = v71;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v71, v65, v11);
    if ((AssociatedConformanceWitness & 1) != 0)
      break;
    v67 = v83;
    v68 = sub_2375EC35C();
    v33(v66, v11);
    v69 = v68 < v67;
    v36 = v81;
    if (!v69)
      goto LABEL_8;
  }
  result = ((uint64_t (*)(char *, uint64_t))v33)(v66, v11);
  __break(1u);
  return result;
}

void (*CxxRandomAccessCollection.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v18;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = malloc(*(_QWORD *)(v18 + 64));
  v6[5] = v10;
  v11 = swift_checkMetadataState();
  v6[6] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[7] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v14 = malloc(v13);
  v6[8] = v14;
  v15 = malloc(v13);
  v6[9] = v15;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(a3, v7);
  v6[4] = a2;
  swift_getAssociatedConformanceWitness();
  sub_2375B4240();
  sub_2375EC380();
  (*(void (**)(void *, void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v15, v10, v11, AssociatedConformanceWitness);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v10, AssociatedTypeWitness);
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v14, v15, v11);
  v6[10] = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 24))(v6, v11);
  return sub_2375E63C0;
}

void sub_2375E63C0(_QWORD *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 56);
  v3 = *(void **)(*a1 + 64);
  v6 = *(void **)(*a1 + 40);
  v5 = *(_QWORD *)(*a1 + 48);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 80))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  free(v2);
  free(v3);
  free(v6);
  free(v1);
}

uint64_t CxxRandomAccessCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(_QWORD *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v20 = a1;
  v22 = a4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v19 - v9;
  v11 = swift_checkMetadataState();
  v21 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - v12;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, v5);
  v23[0] = v20;
  swift_getAssociatedConformanceWitness();
  sub_2375B4240();
  sub_2375EC380();
  (*(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v13, v10, v11, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  v14 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                                            + 24))(v23, v11);
  v16 = v15;
  v17 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v22, v16, v17);
  v14(v23, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v13, v11);
}

uint64_t CxxSequenceBox.sequence.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t CxxSequenceBox.sequence.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1);
}

uint64_t (*CxxSequenceBox.sequence.modify())(_QWORD)
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100];
}

uint64_t CxxSequenceBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 16))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96), a1);
  return v2;
}

uint64_t CxxSequenceBox.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1);
  return v1;
}

uint64_t CxxSequenceBox.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return v0;
}

uint64_t CxxSequenceBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_deallocClassInstance();
}

uint64_t CxxIterator.sequence.getter()
{
  return swift_retain();
}

uint64_t CxxIterator.rawIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t CxxIterator.rawIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*CxxIterator.rawIterator.modify())(_QWORD)
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100];
}

uint64_t CxxIterator.endIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t CxxIterator.init(sequence:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  type metadata accessor for CxxSequenceBox(0, a2, a3, a4);
  v9 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 80) - 8) + 16))(v9 + *(_QWORD *)(*(_QWORD *)v9 + 96), a1);
  *a5 = v9;
  v10 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  type metadata accessor for CxxIterator(0, a2, a3, v11);
  swift_retain();
  v10(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return swift_release();
}

uint64_t type metadata accessor for CxxSequenceBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CxxSequenceBox);
}

uint64_t type metadata accessor for CxxIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CxxIterator);
}

uint64_t CxxIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  char v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD);
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  _BYTE v25[32];

  v24 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  v11 = v2 + *(int *)(a1 + 36);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v23((char *)&v21 - v9, v11, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = sub_2375EC20C();
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v10, AssociatedTypeWitness);
  if ((v13 & 1) != 0)
  {
    v14 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v24, 1, 1, v14);
  }
  else
  {
    v21 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v25, AssociatedTypeWitness, AssociatedConformanceWitness);
    v17 = v16;
    v18 = swift_getAssociatedTypeWitness();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v24, v17, v18);
    v21(v25, 0);
    v23(v8, v11, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v22(v8, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v11, v10, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v20, 0, 1, v18);
  }
}

uint64_t CxxSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return CxxIterator.init(sequence:)(v4, a1, a2, a3, a4);
}

uint64_t CxxVector.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v30[1] = a5;
  v31 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)v30 - v11;
  v13 = sub_2375EC320();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v30 - v15;
  v30[0] = a3;
  v17 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v30 - v21;
  v23 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  v34 = a4;
  v35 = a6;
  v36 = a2;
  v23(a2, a4);
  (*(void (**)(char *, uint64_t, _QWORD))(v17 + 16))(v19, v31, v30[0]);
  sub_2375EC2B4();
  swift_getAssociatedConformanceWitness();
  v24 = v22;
  v25 = v20;
  sub_2375EC32C();
  v26 = v32;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v27(v16, 1, AssociatedTypeWitness) != 1)
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    do
    {
      v28(v12, v16, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v34 + 48))(v12, v36);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v12, AssociatedTypeWitness);
      sub_2375EC32C();
    }
    while (v27(v16, 1, AssociatedTypeWitness) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v24, v25);
}

uint64_t CxxVector.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a1;
  swift_getAssociatedTypeWitness();
  v7 = sub_2375EC2E4();
  v8 = MEMORY[0x23B8163BC](MEMORY[0x24BEE12C8], v7);
  CxxVector.init<A>(_:)((uint64_t)&v10, a2, v7, a3, v8, a4);
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2375E6F20())(_QWORD)
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100];
}

uint64_t sub_2375E6F30@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) - 8) + 72);
  return result;
}

uint64_t Optional<A>.pointee.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _BYTE v20[32];

  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, v14, a1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, a1);
    result = sub_2375EC3E0();
    __break(1u);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v13, v9, v10);
    v15 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a2 + 24))(v20, v10, a2);
    v17 = v16;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v17, AssociatedTypeWitness);
    v15(v20, 0);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

uint64_t Optional<A>.successor()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v14, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
    result = sub_2375EC3E0();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 32))(v10, a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a3, 0, 1, v10);
  }
  return result;
}

uint64_t sub_2375E728C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B8163BC](MEMORY[0x24BEE0970]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375E72B8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B8163BC](MEMORY[0x24BEE1C40]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_2375E72E4(uint64_t **a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_2375E736C(v6, a2, *(_QWORD *)(a3 - 8));
  return sub_2375E7340;
}

void sub_2375E7340(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_2375E736C(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  Optional<A>.pointee.getter(a2, a3, (uint64_t)v8);
  return sub_2375E73F8;
}

void sub_2375E73F8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_2375E7428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional<A>.successor()(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t sub_2375E7430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x23B8163BC](MEMORY[0x24BEE4AB8], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2375E7474(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, a1, v5);
}

uint64_t sub_2375E74C4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B8163BC](&protocol conformance descriptor for UnsafeMutablePointer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_2375E74F4(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  *result += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * *a2;
  return result;
}

uint64_t sub_2375E7514(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B8163BC](&protocol conformance descriptor for UnsafePointer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_2375E7540@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72);
  if (v4)
  {
    v5 = *result - *a2;
    if (v5 != 0x8000000000000000 || v4 != -1)
    {
      *a4 = v5 / v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2375E7580(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x23B8163BC](&protocol conformance descriptor for UnsafeMutablePointer<A>);
  result = MEMORY[0x23B8163BC](&protocol conformance descriptor for UnsafeMutablePointer<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2375E75C8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_2375E7638()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2375E7640()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2375E76D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + v6;
  v9 = *(_DWORD *)(v5 + 80) & 0x100000;
  v10 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v9 != 0 || ((v7 + v6 + ((v6 + 8) & ~v6)) & (unint64_t)~v6) + v7 > 0x18)
  {
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v13 = ~v6;
    v14 = (char *)a1 + v6;
    v15 = (char *)a2 + v6;
    v16 = (unint64_t)(v14 + 8) & v13;
    v17 = (unint64_t)(v15 + 8) & v13;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v18(v16, v17, AssociatedTypeWitness);
    v18((v8 + v16) & v13, (v8 + v17) & v13, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_2375E77DC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + v4 + 8) & ~v4;
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v5, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)((*(_QWORD *)(v3 + 64) + v4 + v5) & ~v4, AssociatedTypeWitness);
}

_QWORD *sub_2375E787C(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, AssociatedTypeWitness);
  v9((*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, (*(_QWORD *)(v5 + 64) + v6 + v8) & ~v6, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_2375E793C(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  swift_retain();
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v8((*(_QWORD *)(v5 + 64) + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6, (*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_2375E7A08(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v8((*(_QWORD *)(v5 + 64) + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6, (*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_2375E7AC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v8((*(_QWORD *)(v5 + 64) + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6, (*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2375E7B84(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = ((*(_QWORD *)(v4 + 64) + v7 + ((v7 + 8) & ~v7)) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(_WORD *)((char *)a1 + v8))
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_24:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((_BYTE *)a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = v8;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return v6 + v13 + 1;
}

void sub_2375E7D1C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B816368](a1, v6, a5);
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1>>.init(_:)()
{
  uint64_t v0;

  v0 = sub_2375EC518();
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v0);
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1000>>.init(_:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = sub_2375EC518();
  v2 = 1000 * result;
  if ((unsigned __int128)(result * (__int128)1000) >> 64 == (1000 * result) >> 63)
  {
    result = v2 + v1 / 1000000000000000;
    if (!__OFADD__(v2, v1 / 1000000000000000))
      return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](result);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1000000>>.init(_:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = sub_2375EC518();
  v2 = 1000000 * result;
  if ((unsigned __int128)(result * (__int128)1000000) >> 64 == (1000000 * result) >> 63)
  {
    result = v2 + v1 / 1000000000000;
    if (!__OFADD__(v2, v1 / 1000000000000))
      return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](result);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1000000000>>.init(_:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = sub_2375EC518();
  v2 = 1000000000 * result;
  if ((unsigned __int128)(result * (__int128)1000000000) >> 64 == (1000000000 * result) >> 63)
  {
    result = v2 + v1 / 1000000000;
    if (!__OFADD__(v2, v1 / 1000000000))
      return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](result);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Duration.init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return 1000000000000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

{
  uint64_t v2;

  v2 = a1;
  return 1000000000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

{
  uint64_t v2;

  v2 = a1;
  return 1000000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

{
  uint64_t v2;

  v2 = a1;
  return 1000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  std::string::size_type v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string::value_type v15;
  _QWORD v17[2];

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a3);
  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_33:
    v7 = sub_2375EC26C();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v7 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  std::string::reserve(a3, v7);
  if ((a2 & 0x2000000000000000) != 0)
    v8 = v6;
  else
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  v9 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v6 = 15;
  while (4 * v8 != v6 >> 14)
  {
    v11 = v6 & 0xC;
    v12 = v6;
    if (v11 == v10)
      v12 = sub_2375E9450(v6, a1, a2);
    v13 = v12 >> 16;
    if (v12 >> 16 >= v8)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      v15 = sub_2375EC290();
      if (v11 != v10)
        goto LABEL_24;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v15 = *((_BYTE *)v17 + v13);
      if (v11 != v10)
        goto LABEL_24;
    }
    else
    {
      v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a1 & 0x1000000000000000) == 0)
        v14 = sub_2375EC3BC();
      v15 = *(_BYTE *)(v14 + v13);
      if (v11 != v10)
      {
LABEL_24:
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_11;
        goto LABEL_25;
      }
    }
    v6 = sub_2375E9450(v6, a1, a2);
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_11:
      v6 = (v6 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_12;
    }
LABEL_25:
    if (v8 <= v6 >> 16)
      goto LABEL_32;
    v6 = sub_2375EC278();
LABEL_12:
    std::string::push_back(a3, v15);
  }
  return swift_bridgeObjectRelease();
}

void std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(const char *a1@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  size_t i;
  int v6;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  if (a1)
  {
    v4 = _swift_stdlib_strlen(a1);
    if ((v4 & 0x8000000000000000) != 0)
    {
LABEL_9:
      __break(1u);
    }
    else
    {
      for (i = v4; i; --i)
      {
        v6 = *a1;
        if (v6 < 0)
        {
          __break(1u);
          goto LABEL_9;
        }
        ++a1;
        std::string::push_back(a2, v6);
      }
    }
  }
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  uint64_t v6;
  std::basic_string<char16_t>::value_type v7;
  uint64_t v8;
  unsigned int i;
  uint64_t v10;
  unsigned int v11;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a3);
  if ((a2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a2) & 0xF;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_10;
    if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
LABEL_8:
      sub_2375EC3BC();
LABEL_16:
    for (i = sub_2375EC3C8(); ; i = sub_2375EC398())
    {
      v11 = i;
      v8 += v10;
      if (i >= 0x10000)
      {
        v7 = sub_2375EC50C();
        LOWORD(i) = sub_2375EC50C();
      }
      std::basic_string<char16_t>::push_back(a3, i);
      if (v11 >= 0x10000)
      {
        std::basic_string<char16_t>::push_back(a3, v7);
        v7 = 0;
      }
      if (v8 >= v6)
        break;
      if ((a2 & 0x1000000000000000) == 0)
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
          goto LABEL_8;
        goto LABEL_16;
      }
LABEL_10:
      ;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, std::basic_string<char32_t> *a3@<X8>)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  std::basic_string<char32_t>::value_type v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a3);
  if ((a2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a2) & 0xF;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i < v6; i += v11)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v9 = sub_2375EC398();
        v11 = v10;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v13[0] = a1;
          v13[1] = a2 & 0xFFFFFFFFFFFFFFLL;
          v9 = *((unsigned __int8 *)v13 + i);
          if (*((char *)v13 + i) < 0)
            __asm { BR              X10 }
        }
        else
        {
          v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            v8 = sub_2375EC3BC();
          v9 = *(unsigned __int8 *)(v8 + i);
          if (*(char *)(v8 + i) < 0)
            __asm { BR              X10 }
        }
        v11 = 1;
      }
      std::basic_string<char32_t>::push_back(a3, v9);
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2375E87AC@<X0>(unint64_t *a1@<X0>, std::string *a2@<X8>)
{
  return std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(*a1, a1[1], a2);
}

uint64_t sub_2375E87BC@<X0>(uint64_t a1@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  return std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.init(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_2375E87CC@<X0>(uint64_t a1@<X0>, std::basic_string<char32_t> *a2@<X8>)
{
  return std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.init(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

BOOL static std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.== infix(_:_:)(const void **a1, _BYTE *a2)
{
  return std::string::compare[abi:ne180100](a1, a2) == 0;
}

uint64_t static std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2);
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.append(_:)(uint64_t *a1)
{
  uint64_t v1;

  return std::string::append[abi:ne180100](v1, a1);
}

uint64_t static std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.+ infix(_:_:)@<X0>(std::string *__str@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  std::string *v4;

  v4 = std::string::basic_string(a3, __str);
  return std::string::append[abi:ne180100]((uint64_t)v4, a2);
}

BOOL sub_2375E8864(const void **a1, _BYTE *a2)
{
  return std::string::compare[abi:ne180100](a1, a2) == 0;
}

BOOL static std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.== infix(_:_:)(const std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  return std::basic_string<char16_t>::compare(a1, a2) == 0;
}

uint64_t static std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return std::basic_string<char16_t>::append[abi:ne180100](a1, a2);
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.append(_:)(uint64_t *a1)
{
  uint64_t v1;

  return std::basic_string<char16_t>::append[abi:ne180100](v1, a1);
}

uint64_t static std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.+ infix(_:_:)@<X0>(std::basic_string<char16_t> *__str@<X0>, uint64_t *a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  std::basic_string<char16_t> *v4;

  v4 = std::basic_string<char16_t>::basic_string(a3, __str);
  return std::basic_string<char16_t>::append[abi:ne180100]((uint64_t)v4, a2);
}

BOOL sub_2375E890C(const std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  return std::basic_string<char16_t>::compare(a1, a2) == 0;
}

BOOL static std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.== infix(_:_:)(const std::basic_string<char32_t> *a1, const std::basic_string<char32_t> *a2)
{
  return std::basic_string<char32_t>::compare(a1, a2) == 0;
}

uint64_t static std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return std::basic_string<char32_t>::append[abi:ne180100](a1, a2);
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.append(_:)(uint64_t *a1)
{
  uint64_t v1;

  return std::basic_string<char32_t>::append[abi:ne180100](v1, a1);
}

uint64_t static std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.+ infix(_:_:)@<X0>(std::basic_string<char32_t> *__str@<X0>, uint64_t *a2@<X1>, std::basic_string<char32_t> *a3@<X8>)
{
  std::basic_string<char32_t> *v4;

  v4 = std::basic_string<char32_t>::basic_string(a3, __str);
  return std::basic_string<char32_t>::append[abi:ne180100]((uint64_t)v4, a2);
}

BOOL sub_2375E89B4(const std::basic_string<char32_t> *a1, const std::basic_string<char32_t> *a2)
{
  return std::basic_string<char32_t>::compare(a1, a2) == 0;
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.hash(into:)(uint64_t a1)
{
  return sub_2375E8AAC(a1, (void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::string>::operator());
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.hashValue.getter()
{
  return sub_2375E8B10((void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::string>::operator());
}

uint64_t sub_2375E89F8(uint64_t a1, uint64_t a2)
{
  return sub_2375E8B88(a1, a2, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::string>::operator());
}

uint64_t sub_2375E8A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375E8BFC(a1, a2, a3, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::string>::operator());
}

uint64_t sub_2375E8A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375E8C5C(a1, a2, a3, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::string>::operator());
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.hash(into:)(uint64_t a1)
{
  return sub_2375E8AAC(a1, (void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::operator());
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.hashValue.getter()
{
  return sub_2375E8B10((void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::operator());
}

uint64_t sub_2375E8A5C(uint64_t a1, uint64_t a2)
{
  return sub_2375E8B88(a1, a2, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::operator());
}

uint64_t sub_2375E8A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375E8BFC(a1, a2, a3, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::operator());
}

uint64_t sub_2375E8A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375E8C5C(a1, a2, a3, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::operator());
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.hash(into:)(uint64_t a1)
{
  return sub_2375E8AAC(a1, (void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::operator());
}

uint64_t sub_2375E8AAC(uint64_t a1, void (*a2)(char *), void (*a3)(char *, uint64_t))
{
  uint64_t v3;
  char v6;
  char v7;

  v7 = 0;
  a2(&v7);
  a3(&v6, v3);
  return sub_2375EC4DC();
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.hashValue.getter()
{
  return sub_2375E8B10((void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::operator());
}

uint64_t sub_2375E8B10(void (*a1)(char *), void (*a2)(char *, uint64_t))
{
  uint64_t v2;
  char v6;
  char v7;

  sub_2375EC4D0();
  v7 = 0;
  a1(&v7);
  a2(&v6, v2);
  sub_2375EC4DC();
  return sub_2375EC4E8();
}

uint64_t sub_2375E8B74(uint64_t a1, uint64_t a2)
{
  return sub_2375E8B88(a1, a2, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::operator());
}

uint64_t sub_2375E8B88(uint64_t a1, uint64_t a2, void (*a3)(char *), void (*a4)(char *, uint64_t))
{
  uint64_t v4;
  char v8;
  char v9;

  sub_2375EC4D0();
  a3(&v9);
  a4(&v8, v4);
  sub_2375EC4DC();
  return sub_2375EC4E8();
}

uint64_t sub_2375E8BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375E8BFC(a1, a2, a3, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::operator());
}

uint64_t sub_2375E8BFC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), void (*a5)(char *, uint64_t))
{
  uint64_t v5;
  char v8;
  char v9;

  a4(&v9);
  a5(&v8, v5);
  return sub_2375EC4DC();
}

uint64_t sub_2375E8C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375E8C5C(a1, a2, a3, (void (*)(char *))sub_2375E9840, (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::operator());
}

uint64_t sub_2375E8C5C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), void (*a5)(char *, uint64_t))
{
  uint64_t v5;
  char v9;
  char v10;

  sub_2375EC4D0();
  a4(&v10);
  a5(&v9, v5);
  sub_2375EC4DC();
  return sub_2375EC4E8();
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.debugDescription.getter()
{
  const std::string *v0;
  std::string v2;
  uint64_t v3;
  unint64_t v4;

  v3 = 0x697274732E647473;
  v4 = 0xEB0000000028676ELL;
  std::string::basic_string(&v2, v0);
  std::string::c_str[abi:ne180100]((char *)&v2);
  std::string::size[abi:ne180100]((uint64_t)&v2);
  sub_2375EC248();
  std::string::~string(&v2);
  sub_2375EC260();
  swift_bridgeObjectRelease();
  sub_2375EC260();
  return v3;
}

uint64_t String.init(_:)(std::string *a1)
{
  uint64_t v2;

  std::string::c_str[abi:ne180100]((char *)a1);
  std::string::size[abi:ne180100]((uint64_t)a1);
  v2 = sub_2375EC248();
  std::string::~string(a1);
  return v2;
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.debugDescription.getter()
{
  const std::basic_string<char16_t> *v0;
  uint64_t result;
  uint64_t v2;
  std::basic_string<char16_t> v3;
  _QWORD v4[2];

  v3.__r_.__value_.__r.__words[0] = 0;
  v3.__r_.__value_.__l.__size_ = 0xE000000000000000;
  sub_2375EC3A4();
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "std.u16string(");
  HIBYTE(v4[1]) = -18;
  std::basic_string<char16_t>::basic_string(&v3, v0);
  std::string::c_str[abi:ne180100]((char *)&v3);
  std::string::size[abi:ne180100]((uint64_t)&v3);
  swift_getCanonicalSpecializedMetadata();
  sub_2375E98BC(&qword_2567FB960);
  sub_2375E9860();
  result = sub_2375EC23C();
  if (v2)
  {
    ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v3);
    sub_2375EC260();
    swift_bridgeObjectRelease();
    sub_2375EC260();
    return v4[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t String.init(_:)(char *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  std::string::c_str[abi:ne180100](a1);
  std::string::size[abi:ne180100]((uint64_t)a1);
  swift_getCanonicalSpecializedMetadata();
  sub_2375E98BC(&qword_2567FB960);
  sub_2375E9860();
  result = sub_2375EC23C();
  if (v3)
  {
    v4 = result;
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a1);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = std::string::c_str[abi:ne180100](a1);
  std::string::size[abi:ne180100]((uint64_t)a1);
  if (v2)
  {
    swift_getCanonicalSpecializedMetadata();
    sub_2375E98BC(&qword_2567FB978);
    sub_2375E98FC();
    result = sub_2375EC23C();
    if (v4)
    {
LABEL_5:
      v6 = result;
      ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a1);
      return v6;
    }
    __break(1u);
  }
  swift_getCanonicalSpecializedMetadata();
  sub_2375E98BC(&qword_2567FB978);
  sub_2375E98FC();
  result = sub_2375EC23C();
  if (v5)
    goto LABEL_5;
  __break(1u);
  return result;
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.debugDescription.getter()
{
  const std::basic_string<char32_t> *v0;
  std::basic_string<char32_t> v2;
  _QWORD v3[2];

  v2.__r_.__value_.__r.__words[0] = 0;
  v2.__r_.__value_.__l.__size_ = 0xE000000000000000;
  sub_2375EC3A4();
  swift_bridgeObjectRelease();
  strcpy((char *)v3, "std.u32string(");
  HIBYTE(v3[1]) = -18;
  std::basic_string<char32_t>::basic_string(&v2, v0);
  String.init(_:)((char *)&v2);
  sub_2375EC260();
  swift_bridgeObjectRelease();
  sub_2375EC260();
  return v3[0];
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.description.getter()
{
  const std::string *v0;
  uint64_t v1;
  std::string v3;

  std::string::basic_string(&v3, v0);
  std::string::c_str[abi:ne180100]((char *)&v3);
  std::string::size[abi:ne180100]((uint64_t)&v3);
  v1 = sub_2375EC248();
  std::string::~string(&v3);
  return v1;
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.description.getter()
{
  const std::basic_string<char16_t> *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  std::basic_string<char16_t> v4;

  std::basic_string<char16_t>::basic_string(&v4, v0);
  std::string::c_str[abi:ne180100]((char *)&v4);
  std::string::size[abi:ne180100]((uint64_t)&v4);
  swift_getCanonicalSpecializedMetadata();
  sub_2375E98BC(&qword_2567FB960);
  sub_2375E9860();
  result = sub_2375EC23C();
  if (v2)
  {
    v3 = result;
    ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v4);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2375E931C()
{
  const std::basic_string<char16_t> *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  std::basic_string<char16_t> v4;

  std::basic_string<char16_t>::basic_string(&v4, v0);
  std::string::c_str[abi:ne180100]((char *)&v4);
  std::string::size[abi:ne180100]((uint64_t)&v4);
  swift_getCanonicalSpecializedMetadata();
  sub_2375E98BC(&qword_2567FB960);
  sub_2375E9860();
  result = sub_2375EC23C();
  if (v2)
  {
    v3 = result;
    ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v4);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.description.getter()
{
  const std::basic_string<char32_t> *v0;
  std::basic_string<char32_t> v2;

  std::basic_string<char32_t>::basic_string(&v2, v0);
  return String.init(_:)((char *)&v2);
}

uint64_t sub_2375E9420()
{
  const std::basic_string<char32_t> *v0;
  std::basic_string<char32_t> v2;

  std::basic_string<char32_t>::basic_string(&v2, v0);
  return String.init(_:)((char *)&v2);
}

uint64_t sub_2375E9450(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_2375EC29C();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B815CFC](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void std::basic_string<char16_t>::push_back(std::basic_string<char16_t> *this, std::basic_string<char16_t>::value_type __c)
{
  std::basic_string<char16_t> *v3;
  std::basic_string<char16_t>::size_type v4;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::value_type *v6;

  v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 10)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = (*((_BYTE *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 10;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::basic_string<char16_t>::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  v3 = (std::basic_string<char16_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  v6 = (std::basic_string<char16_t>::value_type *)((char *)v3 + 2 * size);
  *v6 = __c;
  v6[1] = 0;
}

void std::basic_string<char32_t>::push_back(std::basic_string<char32_t> *this, std::basic_string<char32_t>::value_type __c)
{
  std::basic_string<char32_t> *v3;
  std::basic_string<char32_t>::size_type v4;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::value_type *v6;

  v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 4)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = (*((_BYTE *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 4;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::basic_string<char32_t>::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  v3 = (std::basic_string<char32_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  v6 = (std::basic_string<char32_t>::value_type *)((char *)v3 + 4 * size);
  *v6 = __c;
  v6[1] = 0;
}

uint64_t std::string::compare[abi:ne180100](const void **a1, _BYTE *a2)
{
  char v2;
  size_t v3;
  const void **v4;
  size_t v5;
  size_t v6;
  uint64_t result;
  unsigned int v8;

  v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1;
    a1 = (const void **)*a1;
    v3 = (size_t)v4[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v2 < 0)
    a2 = *(_BYTE **)a2;
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5)
    v8 = -1;
  else
    v8 = v5 < v3;
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

uint64_t std::string::append[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2, MEMORY[0x24BEDAC40]);
}

int std::basic_string<char16_t>::compare(const std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  std::basic_string<char16_t>::size_type size;
  const std::basic_string<char16_t> *v3;
  std::basic_string<char16_t>::size_type v4;
  const std::basic_string<char16_t> *v5;
  std::basic_string<char16_t>::size_type v6;
  unsigned int v7;
  unsigned int v8;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = __str;
  else
    v3 = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = this;
    this = (const std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    v4 = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size >= v4)
    v6 = v4;
  else
    v6 = size;
  if (v6)
  {
    while (1)
    {
      v7 = (unsigned __int16)this->__r_.__value_.__s.__data_[0];
      v8 = (unsigned __int16)v3->__r_.__value_.__s.__data_[0];
      if (v7 < v8)
        return -1;
      if (v8 < v7)
        return 1;
      this = (const std::basic_string<char16_t> *)((char *)this + 2);
      v3 = (const std::basic_string<char16_t> *)((char *)v3 + 2);
      if (!--v6)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    if (v4 < size)
      return -1;
    else
      return size < v4;
  }
}

uint64_t std::basic_string<char16_t>::append[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2, (uint64_t (*)(uint64_t, uint64_t *, uint64_t))std::basic_string<char16_t>::append);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::basic_string(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  return (std::basic_string<char16_t> *)std::basic_string<char16_t>::basic_string((uint64_t)this, (__int128 *)__str, (void (*)(uint64_t, _QWORD, _QWORD))std::basic_string<char16_t>::__init_copy_ctor_external);
}

int std::basic_string<char32_t>::compare(const std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str)
{
  std::basic_string<char32_t>::size_type size;
  const std::basic_string<char32_t> *v3;
  std::basic_string<char32_t>::size_type v4;
  const std::basic_string<char32_t> *v5;
  std::basic_string<char32_t>::size_type v6;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = __str;
  else
    v3 = (const std::basic_string<char32_t> *)__str->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = this;
    this = (const std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    v4 = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size >= v4)
    v6 = v4;
  else
    v6 = size;
  if (v6)
  {
    while (1)
    {
      if (this->__r_.__value_.__s.__data_[0] < (unsigned __int32)v3->__r_.__value_.__s.__data_[0])
        return -1;
      if (v3->__r_.__value_.__s.__data_[0] < (unsigned __int32)this->__r_.__value_.__s.__data_[0])
        return 1;
      this = (const std::basic_string<char32_t> *)((char *)this + 4);
      v3 = (const std::basic_string<char32_t> *)((char *)v3 + 4);
      if (!--v6)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    if (v4 < size)
      return -1;
    else
      return size < v4;
  }
}

uint64_t std::basic_string<char32_t>::append[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2, (uint64_t (*)(uint64_t, uint64_t *, uint64_t))std::basic_string<char32_t>::append);
}

uint64_t std::string::append[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v5 = v4;
  }
  return a3(a1, a2, v5);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::basic_string(std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str)
{
  return (std::basic_string<char32_t> *)std::basic_string<char16_t>::basic_string((uint64_t)this, (__int128 *)__str, (void (*)(uint64_t, _QWORD, _QWORD))std::basic_string<char32_t>::__init_copy_ctor_external);
}

uint64_t std::basic_string<char16_t>::basic_string(uint64_t a1, __int128 *a2, void (*a3)(uint64_t, _QWORD, _QWORD))
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    a3(a1, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
  }
  return a1;
}

uint64_t sub_2375E9840(_BYTE *a1)
{
  *a1 = 0;
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](a1);
}

char *std::string::c_str[abi:ne180100](char *result)
{
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

unint64_t sub_2375E9860()
{
  unint64_t result;

  result = qword_2567FB968;
  if (!qword_2567FB968)
  {
    result = MEMORY[0x23B8163BC](MEMORY[0x24BEE4748], MEMORY[0x24BEE4740]);
    atomic_store(result, (unint64_t *)&qword_2567FB968);
  }
  return result;
}

uint64_t std::string::size[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    return *(_QWORD *)(a1 + 8);
  else
    return *(unsigned __int8 *)(a1 + 23);
}

uint64_t sub_2375E98BC(unint64_t *a1)
{
  uint64_t result;
  uint64_t CanonicalSpecializedMetadata;

  result = *a1;
  if (!result)
  {
    CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    result = MEMORY[0x23B8163BC](MEMORY[0x24BEE09E8], CanonicalSpecializedMetadata);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2375E98FC()
{
  unint64_t result;

  result = qword_2567FB980;
  if (!qword_2567FB980)
  {
    result = MEMORY[0x23B8163BC](MEMORY[0x24BEE4758], MEMORY[0x24BEE4750]);
    atomic_store(result, (unint64_t *)&qword_2567FB980);
  }
  return result;
}

uint64_t sub_2375E9940()
{
  return sub_2375B42FC(&qword_2567FB988, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>);
}

uint64_t sub_2375E996C()
{
  return MEMORY[0x24BEE0D80];
}

uint64_t sub_2375E9978()
{
  return sub_2375B42FC(&qword_2567FB990, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>);
}

uint64_t sub_2375E99A4()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_2375E99B0()
{
  return MEMORY[0x24BEE0D88];
}

uint64_t sub_2375E99BC()
{
  return sub_2375B42FC(&qword_2567FB998, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>);
}

void type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB9D8);
}

uint64_t sub_2375E99FC()
{
  return sub_2375B42FC(&qword_2567FB9A0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>);
}

uint64_t sub_2375E9A28()
{
  return sub_2375B42FC(&qword_2567FB9A8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>);
}

void type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__(uint64_t a1)
{
  sub_2375B8434(a1, &qword_2567FB9D0);
}

uint64_t sub_2375E9A68()
{
  return sub_2375B42FC(&qword_2567FB9B0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>);
}

uint64_t sub_2375E9A94()
{
  return sub_2375B42FC(&qword_2567FB9B8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>);
}

uint64_t sub_2375E9AC0()
{
  return sub_2375B42FC(&qword_2567FB9C0, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>);
}

uint64_t sub_2375E9AEC()
{
  return sub_2375B42FC(&qword_2567FB9C8, (uint64_t (*)(uint64_t))type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__, (uint64_t)&protocol conformance descriptor for std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>);
}

std::basic_string<char32_t> *sub_2375E9B1C(std::basic_string<char32_t> *a1, const std::basic_string<char32_t> *a2)
{
  return std::basic_string<char32_t>::basic_string(a1, a2);
}

std::basic_string<char32_t> *sub_2375E9B34(std::basic_string<char16_t> *a1, const std::basic_string<char32_t> *a2)
{
  std::basic_string<char32_t> *v3;

  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return std::basic_string<char32_t>::basic_string(v3, a2);
}

__n128 *sub_2375E9B60(__n128 *a1, __n128 *a2)
{
  std::basic_string<char32_t>::basic_string[abi:ne180100](a1, a2);
  ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a2);
  return a1;
}

__n128 std::basic_string<char32_t>::basic_string[abi:ne180100](__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t sub_2375E9BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2375B0C50(a1, a2, a3, (void (*)(void))ctb::chatbot::OrgNameEntry::~OrgNameEntry, (void (*)(uint64_t, uint64_t))std::basic_string<char32_t>::basic_string[abi:ne180100]);
}

std::basic_string<char16_t> *sub_2375E9BC0(std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  return std::basic_string<char16_t>::basic_string(a1, a2);
}

std::basic_string<char16_t> *sub_2375E9BD8(std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  std::basic_string<char16_t> *v3;

  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return std::basic_string<char16_t>::basic_string(v3, a2);
}

void std::basic_string<char16_t>::__grow_by(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add)
{
  std::basic_string<char16_t> *v13;
  std::basic_string<char16_t>::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::basic_string<char16_t>::size_type v19;
  uint64_t v20;
  uint64_t v21;

  if (0x7FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v13 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v14 = 2 * __old_cap;
  v15 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v14 | 3) != 0xB)
    v15 = v14 | 3;
  if (v14 >= 0xB)
    v16 = v15 + 1;
  else
    v16 = 11;
  if (__old_cap <= 0x3FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x7FFFFFFFFFFFFFF7;
  v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v17);
  v19 = (std::basic_string<char16_t>::size_type)v18;
  v21 = v20;
  if (__n_copy)
    memmove(v18, v13, 2 * __n_copy);
  if (__old_sz != __n_del + __n_copy)
    memmove((void *)(v19 + 2 * __n_copy + 2 * __n_add), (char *)v13 + 2 * __n_copy + 2 * __n_del, 2 * (__old_sz - (__n_del + __n_copy)));
  if (__old_cap != 10)
    operator delete(v13);
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void std::basic_string<char32_t>::__grow_by(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add)
{
  std::basic_string<char32_t> *v13;
  std::basic_string<char32_t>::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  std::basic_string<char32_t>::size_type v19;
  uint64_t v20;
  uint64_t v21;

  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v13 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v14 = 2 * __old_cap;
  v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v14 | 1) != 5)
    v15 = v14 | 1;
  if (v14 >= 5)
    v16 = v15 + 1;
  else
    v16 = 5;
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x3FFFFFFFFFFFFFF7;
  v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v17);
  v19 = (std::basic_string<char32_t>::size_type)v18;
  v21 = v20;
  if (__n_copy)
    memmove(v18, v13, 4 * __n_copy);
  if (__old_sz != __n_del + __n_copy)
    memmove((void *)(v19 + 4 * __n_copy + 4 * __n_add), (char *)v13 + 4 * __n_copy + 4 * __n_del, 4 * (__old_sz - (__n_del + __n_copy)));
  if (__old_cap != 4)
    operator delete(v13);
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t> *v8;
  std::basic_string<char16_t>::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 10;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 2 * size, __s, 2 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  std::basic_string<char16_t> *v15;
  std::basic_string<char16_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::basic_string<char16_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char16_t>::size_type v24;
  std::basic_string<char16_t>::size_type v25;

  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB)
    v17 = v16 | 3;
  if (v16 >= 0xB)
    v18 = v17 + 1;
  else
    v18 = 11;
  if (__old_cap > 0x3FFFFFFFFFFFFFF2)
    v19 = 0x7FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v19);
  v21 = (std::basic_string<char16_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 2 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  if (__old_cap != 10)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}

void std::basic_string<char16_t>::__init_copy_ctor_external(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __sz)
{
  std::basic_string<char16_t> *v5;
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t> *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 0xA)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((__sz | 3) != 0xB)
      v6 = __sz | 3;
    v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 2 * __sz + 2);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v8;
  std::basic_string<char32_t>::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 4;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char32_t>::__grow_by_and_replace(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add, const std::basic_string<char32_t>::value_type *__p_new_stuff)
{
  std::basic_string<char32_t> *v15;
  std::basic_string<char32_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  std::basic_string<char32_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char32_t>::size_type v24;
  std::basic_string<char32_t>::size_type v25;

  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5)
    v17 = v16 | 1;
  if (v16 >= 5)
    v18 = v17 + 1;
  else
    v18 = 5;
  if (__old_cap > 0x1FFFFFFFFFFFFFF2)
    v19 = 0x3FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v19);
  v21 = (std::basic_string<char32_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 4 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  if (__old_cap != 4)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

void std::basic_string<char32_t>::__init_copy_ctor_external(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __sz)
{
  std::basic_string<char32_t> *v5;
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t> *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::basic_string<char32_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

unint64_t std::__string_hash<char16_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v2 = v3;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, 2 * v2);
}

unint64_t std::__string_hash<char32_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v2 = v3;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, 4 * v2);
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100](void **a1)
{
  if (*((char *)a1 + 23) < 0)
    OUTLINED_FUNCTION_0(a1);
}

void ctb::ProvisioningConfiguration::ProvisioningConfiguration(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 688, *(char **)(a1 + 696));
}

void std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor const&,ctb::FileTransferDescriptor*>(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

void std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_2375EA9E8()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_2375EA9F4()
{
  return MEMORY[0x24BDCD810]();
}

uint64_t sub_2375EAA00()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t sub_2375EAA0C()
{
  return MEMORY[0x24BDCD870]();
}

uint64_t sub_2375EAA18()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_2375EAA24()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_2375EAA30()
{
  return MEMORY[0x24BDCDD70]();
}

uint64_t sub_2375EAA3C()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t sub_2375EAA48()
{
  return MEMORY[0x24BDCDD88]();
}

uint64_t sub_2375EAA54()
{
  return MEMORY[0x24BDCE2F0]();
}

uint64_t sub_2375EAA60()
{
  return MEMORY[0x24BDCE350]();
}

uint64_t sub_2375EAA6C()
{
  return MEMORY[0x24BDCE378]();
}

uint64_t sub_2375EAA78()
{
  return MEMORY[0x24BDCE3A0]();
}

uint64_t sub_2375EAA84()
{
  return MEMORY[0x24BDCE3B8]();
}

uint64_t sub_2375EAA90()
{
  return MEMORY[0x24BDCE3E8]();
}

uint64_t sub_2375EAA9C()
{
  return MEMORY[0x24BDCE448]();
}

uint64_t sub_2375EAAA8()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t sub_2375EAAB4()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_2375EAAC0()
{
  return MEMORY[0x24BDCF4C8]();
}

uint64_t sub_2375EAACC()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_2375EAAD8()
{
  return MEMORY[0x24BEE6218]();
}

uint64_t sub_2375EAAE4()
{
  return MEMORY[0x24BEE6228]();
}

uint64_t sub_2375EAAF0()
{
  return MEMORY[0x24BEE62B0]();
}

uint64_t sub_2375EAAFC()
{
  return MEMORY[0x24BEE63C0]();
}

uint64_t sub_2375EAB08()
{
  return MEMORY[0x24BEB48F8]();
}

uint64_t sub_2375EAB14()
{
  return MEMORY[0x24BEB4900]();
}

uint64_t sub_2375EAB20()
{
  return MEMORY[0x24BEB4908]();
}

uint64_t sub_2375EAB2C()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_2375EAB38()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_2375EAB44()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_2375EAB50()
{
  return MEMORY[0x24BE0CFC0]();
}

uint64_t sub_2375EAB5C()
{
  return MEMORY[0x24BE0CFD8]();
}

uint64_t sub_2375EAB68()
{
  return MEMORY[0x24BE0CFE8]();
}

uint64_t sub_2375EAB74()
{
  return MEMORY[0x24BE0CFF8]();
}

uint64_t sub_2375EAB80()
{
  return MEMORY[0x24BE0D010]();
}

uint64_t sub_2375EAB8C()
{
  return MEMORY[0x24BE0D018]();
}

uint64_t sub_2375EAB98()
{
  return MEMORY[0x24BE0D028]();
}

uint64_t sub_2375EABA4()
{
  return MEMORY[0x24BE0D040]();
}

uint64_t sub_2375EABB0()
{
  return MEMORY[0x24BE0D050]();
}

uint64_t sub_2375EABBC()
{
  return MEMORY[0x24BE0D070]();
}

uint64_t sub_2375EABC8()
{
  return MEMORY[0x24BE0D080]();
}

uint64_t sub_2375EABD4()
{
  return MEMORY[0x24BE0D088]();
}

uint64_t sub_2375EABE0()
{
  return MEMORY[0x24BE0D0C0]();
}

uint64_t sub_2375EABEC()
{
  return MEMORY[0x24BE0D0C8]();
}

uint64_t sub_2375EABF8()
{
  return MEMORY[0x24BE0D0E0]();
}

uint64_t sub_2375EAC04()
{
  return MEMORY[0x24BE0D100]();
}

uint64_t sub_2375EAC10()
{
  return MEMORY[0x24BE0D108]();
}

uint64_t sub_2375EAC1C()
{
  return MEMORY[0x24BE0D128]();
}

uint64_t sub_2375EAC28()
{
  return MEMORY[0x24BE0D138]();
}

uint64_t sub_2375EAC34()
{
  return MEMORY[0x24BE0D140]();
}

uint64_t sub_2375EAC40()
{
  return MEMORY[0x24BE0D160]();
}

uint64_t sub_2375EAC4C()
{
  return MEMORY[0x24BE0D178]();
}

uint64_t sub_2375EAC58()
{
  return MEMORY[0x24BE0D188]();
}

uint64_t sub_2375EAC64()
{
  return MEMORY[0x24BE0D190]();
}

uint64_t sub_2375EAC70()
{
  return MEMORY[0x24BE0D1A8]();
}

uint64_t sub_2375EAC7C()
{
  return MEMORY[0x24BE0D1B8]();
}

uint64_t sub_2375EAC88()
{
  return MEMORY[0x24BE0D1C8]();
}

uint64_t sub_2375EAC94()
{
  return MEMORY[0x24BE0D1E0]();
}

uint64_t sub_2375EACA0()
{
  return MEMORY[0x24BE0D210]();
}

uint64_t sub_2375EACAC()
{
  return MEMORY[0x24BE0D220]();
}

uint64_t sub_2375EACB8()
{
  return MEMORY[0x24BE0D228]();
}

uint64_t sub_2375EACC4()
{
  return MEMORY[0x24BE0D230]();
}

uint64_t sub_2375EACD0()
{
  return MEMORY[0x24BE0D240]();
}

uint64_t sub_2375EACDC()
{
  return MEMORY[0x24BE0D268]();
}

uint64_t sub_2375EACE8()
{
  return MEMORY[0x24BE0D280]();
}

uint64_t sub_2375EACF4()
{
  return MEMORY[0x24BE0D2A0]();
}

uint64_t sub_2375EAD00()
{
  return MEMORY[0x24BE0D2B8]();
}

uint64_t sub_2375EAD0C()
{
  return MEMORY[0x24BE0D2D0]();
}

uint64_t sub_2375EAD18()
{
  return MEMORY[0x24BE0D2F8]();
}

uint64_t sub_2375EAD24()
{
  return MEMORY[0x24BE0D300]();
}

uint64_t sub_2375EAD30()
{
  return MEMORY[0x24BE0D308]();
}

uint64_t sub_2375EAD3C()
{
  return MEMORY[0x24BE0D330]();
}

uint64_t sub_2375EAD48()
{
  return MEMORY[0x24BE0D358]();
}

uint64_t sub_2375EAD54()
{
  return MEMORY[0x24BE0D360]();
}

uint64_t sub_2375EAD60()
{
  return MEMORY[0x24BE0D370]();
}

uint64_t sub_2375EAD6C()
{
  return MEMORY[0x24BE0D380]();
}

uint64_t sub_2375EAD78()
{
  return MEMORY[0x24BE0D388]();
}

uint64_t sub_2375EAD84()
{
  return MEMORY[0x24BE0D470]();
}

uint64_t sub_2375EAD90()
{
  return MEMORY[0x24BE0D478]();
}

uint64_t sub_2375EAD9C()
{
  return MEMORY[0x24BE0D498]();
}

uint64_t sub_2375EADA8()
{
  return MEMORY[0x24BE0D4A0]();
}

uint64_t sub_2375EADB4()
{
  return MEMORY[0x24BE0D4B8]();
}

uint64_t sub_2375EADC0()
{
  return MEMORY[0x24BE0D4E8]();
}

uint64_t sub_2375EADCC()
{
  return MEMORY[0x24BE0D508]();
}

uint64_t sub_2375EADD8()
{
  return MEMORY[0x24BE0D510]();
}

uint64_t sub_2375EADE4()
{
  return MEMORY[0x24BE0D520]();
}

uint64_t sub_2375EADF0()
{
  return MEMORY[0x24BE0D540]();
}

uint64_t sub_2375EADFC()
{
  return MEMORY[0x24BE0D550]();
}

uint64_t sub_2375EAE08()
{
  return MEMORY[0x24BE0D560]();
}

uint64_t sub_2375EAE14()
{
  return MEMORY[0x24BE0D578]();
}

uint64_t sub_2375EAE20()
{
  return MEMORY[0x24BE0D598]();
}

uint64_t sub_2375EAE2C()
{
  return MEMORY[0x24BE0D5A8]();
}

uint64_t sub_2375EAE38()
{
  return MEMORY[0x24BE0D5C8]();
}

uint64_t sub_2375EAE44()
{
  return MEMORY[0x24BE0D5D8]();
}

uint64_t sub_2375EAE50()
{
  return MEMORY[0x24BE0D5F8]();
}

uint64_t sub_2375EAE5C()
{
  return MEMORY[0x24BE0D608]();
}

uint64_t sub_2375EAE68()
{
  return MEMORY[0x24BE0D610]();
}

uint64_t sub_2375EAE74()
{
  return MEMORY[0x24BE0D630]();
}

uint64_t sub_2375EAE80()
{
  return MEMORY[0x24BE0D678]();
}

uint64_t sub_2375EAE8C()
{
  return MEMORY[0x24BE0D6C8]();
}

uint64_t sub_2375EAE98()
{
  return MEMORY[0x24BE0D6D8]();
}

uint64_t sub_2375EAEA4()
{
  return MEMORY[0x24BE0D6E8]();
}

uint64_t sub_2375EAEB0()
{
  return MEMORY[0x24BE0D6F8]();
}

uint64_t sub_2375EAEBC()
{
  return MEMORY[0x24BE0D710]();
}

uint64_t sub_2375EAEC8()
{
  return MEMORY[0x24BE0D718]();
}

uint64_t sub_2375EAED4()
{
  return MEMORY[0x24BE0D720]();
}

uint64_t sub_2375EAEE0()
{
  return MEMORY[0x24BE0D7C0]();
}

uint64_t sub_2375EAEEC()
{
  return MEMORY[0x24BE0D7E0]();
}

uint64_t sub_2375EAEF8()
{
  return MEMORY[0x24BE0D7E8]();
}

uint64_t sub_2375EAF04()
{
  return MEMORY[0x24BE0D7F8]();
}

uint64_t sub_2375EAF10()
{
  return MEMORY[0x24BE0D820]();
}

uint64_t sub_2375EAF1C()
{
  return MEMORY[0x24BE0D838]();
}

uint64_t sub_2375EAF28()
{
  return MEMORY[0x24BE0D848]();
}

uint64_t sub_2375EAF34()
{
  return MEMORY[0x24BE0D858]();
}

uint64_t sub_2375EAF40()
{
  return MEMORY[0x24BE0D870]();
}

uint64_t sub_2375EAF4C()
{
  return MEMORY[0x24BE0D8A0]();
}

uint64_t sub_2375EAF58()
{
  return MEMORY[0x24BE0D8B8]();
}

uint64_t sub_2375EAF64()
{
  return MEMORY[0x24BE0D8C0]();
}

uint64_t sub_2375EAF70()
{
  return MEMORY[0x24BE0D8C8]();
}

uint64_t sub_2375EAF7C()
{
  return MEMORY[0x24BE0D8D0]();
}

uint64_t sub_2375EAF88()
{
  return MEMORY[0x24BE0D8D8]();
}

uint64_t sub_2375EAF94()
{
  return MEMORY[0x24BE0D8E0]();
}

uint64_t sub_2375EAFA0()
{
  return MEMORY[0x24BE0D8F0]();
}

uint64_t sub_2375EAFAC()
{
  return MEMORY[0x24BE0D8F8]();
}

uint64_t sub_2375EAFB8()
{
  return MEMORY[0x24BE0D938]();
}

uint64_t sub_2375EAFC4()
{
  return MEMORY[0x24BE0D940]();
}

uint64_t sub_2375EAFD0()
{
  return MEMORY[0x24BE0D980]();
}

uint64_t sub_2375EAFDC()
{
  return MEMORY[0x24BE0D988]();
}

uint64_t sub_2375EAFE8()
{
  return MEMORY[0x24BE0D9A8]();
}

uint64_t sub_2375EAFF4()
{
  return MEMORY[0x24BE0D9C8]();
}

uint64_t sub_2375EB000()
{
  return MEMORY[0x24BE0D9D8]();
}

uint64_t sub_2375EB00C()
{
  return MEMORY[0x24BE0D9F0]();
}

uint64_t sub_2375EB018()
{
  return MEMORY[0x24BE0D9F8]();
}

uint64_t sub_2375EB024()
{
  return MEMORY[0x24BE0DA00]();
}

uint64_t sub_2375EB030()
{
  return MEMORY[0x24BE0DA10]();
}

uint64_t sub_2375EB03C()
{
  return MEMORY[0x24BE0DA98]();
}

uint64_t sub_2375EB048()
{
  return MEMORY[0x24BE0DAA8]();
}

uint64_t sub_2375EB054()
{
  return MEMORY[0x24BE0DAC0]();
}

uint64_t sub_2375EB060()
{
  return MEMORY[0x24BE0DAC8]();
}

uint64_t sub_2375EB06C()
{
  return MEMORY[0x24BE0DAD0]();
}

uint64_t sub_2375EB078()
{
  return MEMORY[0x24BE0DAD8]();
}

uint64_t sub_2375EB084()
{
  return MEMORY[0x24BE0DAE0]();
}

uint64_t sub_2375EB090()
{
  return MEMORY[0x24BE0DAE8]();
}

uint64_t sub_2375EB09C()
{
  return MEMORY[0x24BE0DAF8]();
}

uint64_t sub_2375EB0A8()
{
  return MEMORY[0x24BE0DB18]();
}

uint64_t sub_2375EB0B4()
{
  return MEMORY[0x24BE0DB28]();
}

uint64_t sub_2375EB0C0()
{
  return MEMORY[0x24BE0DB40]();
}

uint64_t sub_2375EB0CC()
{
  return MEMORY[0x24BE0DB48]();
}

uint64_t sub_2375EB0D8()
{
  return MEMORY[0x24BE0DB50]();
}

uint64_t sub_2375EB0E4()
{
  return MEMORY[0x24BE0DB58]();
}

uint64_t sub_2375EB0F0()
{
  return MEMORY[0x24BE0DB60]();
}

uint64_t sub_2375EB0FC()
{
  return MEMORY[0x24BE0DB68]();
}

uint64_t sub_2375EB108()
{
  return MEMORY[0x24BE0DB70]();
}

uint64_t sub_2375EB114()
{
  return MEMORY[0x24BE0DB78]();
}

uint64_t sub_2375EB120()
{
  return MEMORY[0x24BE0DB80]();
}

uint64_t sub_2375EB12C()
{
  return MEMORY[0x24BE0DB88]();
}

uint64_t sub_2375EB138()
{
  return MEMORY[0x24BE0DB98]();
}

uint64_t sub_2375EB144()
{
  return MEMORY[0x24BE0DBA0]();
}

uint64_t sub_2375EB150()
{
  return MEMORY[0x24BE0DBA8]();
}

uint64_t sub_2375EB15C()
{
  return MEMORY[0x24BE0DBB0]();
}

uint64_t sub_2375EB168()
{
  return MEMORY[0x24BE0DBB8]();
}

uint64_t sub_2375EB174()
{
  return MEMORY[0x24BE0DBD8]();
}

uint64_t sub_2375EB180()
{
  return MEMORY[0x24BE0DBE0]();
}

uint64_t sub_2375EB18C()
{
  return MEMORY[0x24BE0DBF0]();
}

uint64_t sub_2375EB198()
{
  return MEMORY[0x24BE0DBF8]();
}

uint64_t sub_2375EB1A4()
{
  return MEMORY[0x24BE0DC00]();
}

uint64_t sub_2375EB1B0()
{
  return MEMORY[0x24BE0DC28]();
}

uint64_t sub_2375EB1BC()
{
  return MEMORY[0x24BE0DC30]();
}

uint64_t sub_2375EB1C8()
{
  return MEMORY[0x24BE0DC40]();
}

uint64_t sub_2375EB1D4()
{
  return MEMORY[0x24BE0DC58]();
}

uint64_t sub_2375EB1E0()
{
  return MEMORY[0x24BE0DC60]();
}

uint64_t sub_2375EB1EC()
{
  return MEMORY[0x24BE0DC68]();
}

uint64_t sub_2375EB1F8()
{
  return MEMORY[0x24BE0DCA8]();
}

uint64_t sub_2375EB204()
{
  return MEMORY[0x24BE0DCB0]();
}

uint64_t sub_2375EB210()
{
  return MEMORY[0x24BE0DCB8]();
}

uint64_t sub_2375EB21C()
{
  return MEMORY[0x24BE0DD00]();
}

uint64_t sub_2375EB228()
{
  return MEMORY[0x24BE0DD10]();
}

uint64_t sub_2375EB234()
{
  return MEMORY[0x24BE0DD28]();
}

uint64_t sub_2375EB240()
{
  return MEMORY[0x24BE0DD30]();
}

uint64_t sub_2375EB24C()
{
  return MEMORY[0x24BE0DD40]();
}

uint64_t sub_2375EB258()
{
  return MEMORY[0x24BE0DD48]();
}

uint64_t sub_2375EB264()
{
  return MEMORY[0x24BE0DD50]();
}

uint64_t sub_2375EB270()
{
  return MEMORY[0x24BE0DD70]();
}

uint64_t sub_2375EB27C()
{
  return MEMORY[0x24BE0DD78]();
}

uint64_t sub_2375EB288()
{
  return MEMORY[0x24BE0DD80]();
}

uint64_t sub_2375EB294()
{
  return MEMORY[0x24BE0DDB8]();
}

uint64_t sub_2375EB2A0()
{
  return MEMORY[0x24BE0DDC8]();
}

uint64_t sub_2375EB2AC()
{
  return MEMORY[0x24BE0DDE0]();
}

uint64_t sub_2375EB2B8()
{
  return MEMORY[0x24BE0DDF8]();
}

uint64_t sub_2375EB2C4()
{
  return MEMORY[0x24BE0DE00]();
}

uint64_t sub_2375EB2D0()
{
  return MEMORY[0x24BE0DE08]();
}

uint64_t sub_2375EB2DC()
{
  return MEMORY[0x24BE0DE10]();
}

uint64_t sub_2375EB2E8()
{
  return MEMORY[0x24BE0DE20]();
}

uint64_t sub_2375EB2F4()
{
  return MEMORY[0x24BE0DE30]();
}

uint64_t sub_2375EB300()
{
  return MEMORY[0x24BE0DE48]();
}

uint64_t sub_2375EB30C()
{
  return MEMORY[0x24BE0DE50]();
}

uint64_t sub_2375EB318()
{
  return MEMORY[0x24BE0DE58]();
}

uint64_t sub_2375EB324()
{
  return MEMORY[0x24BE0DE68]();
}

uint64_t sub_2375EB330()
{
  return MEMORY[0x24BE0DE90]();
}

uint64_t sub_2375EB33C()
{
  return MEMORY[0x24BE0DEA8]();
}

uint64_t sub_2375EB348()
{
  return MEMORY[0x24BE0DF00]();
}

uint64_t sub_2375EB354()
{
  return MEMORY[0x24BE0DF68]();
}

uint64_t sub_2375EB360()
{
  return MEMORY[0x24BE0DF70]();
}

uint64_t sub_2375EB36C()
{
  return MEMORY[0x24BE0DF78]();
}

uint64_t sub_2375EB378()
{
  return MEMORY[0x24BE0DFC8]();
}

uint64_t sub_2375EB384()
{
  return MEMORY[0x24BE0E038]();
}

uint64_t sub_2375EB390()
{
  return MEMORY[0x24BE0E040]();
}

uint64_t sub_2375EB39C()
{
  return MEMORY[0x24BE0E048]();
}

uint64_t sub_2375EB3A8()
{
  return MEMORY[0x24BE0E090]();
}

uint64_t sub_2375EB3B4()
{
  return MEMORY[0x24BE0E0A0]();
}

uint64_t sub_2375EB3C0()
{
  return MEMORY[0x24BE0E0A8]();
}

uint64_t sub_2375EB3CC()
{
  return MEMORY[0x24BE0E100]();
}

uint64_t sub_2375EB3D8()
{
  return MEMORY[0x24BE0E110]();
}

uint64_t sub_2375EB3E4()
{
  return MEMORY[0x24BE0E118]();
}

uint64_t sub_2375EB3F0()
{
  return MEMORY[0x24BE0E128]();
}

uint64_t sub_2375EB3FC()
{
  return MEMORY[0x24BE0E138]();
}

uint64_t sub_2375EB408()
{
  return MEMORY[0x24BE0E140]();
}

uint64_t sub_2375EB414()
{
  return MEMORY[0x24BE0E160]();
}

uint64_t sub_2375EB420()
{
  return MEMORY[0x24BE0E170]();
}

uint64_t sub_2375EB42C()
{
  return MEMORY[0x24BE0E178]();
}

uint64_t sub_2375EB438()
{
  return MEMORY[0x24BE0E180]();
}

uint64_t sub_2375EB444()
{
  return MEMORY[0x24BE0E188]();
}

uint64_t sub_2375EB450()
{
  return MEMORY[0x24BE0E1A8]();
}

uint64_t sub_2375EB45C()
{
  return MEMORY[0x24BE0E1C0]();
}

uint64_t sub_2375EB468()
{
  return MEMORY[0x24BE0E1D0]();
}

uint64_t sub_2375EB474()
{
  return MEMORY[0x24BE0E1F0]();
}

uint64_t sub_2375EB480()
{
  return MEMORY[0x24BE0E1F8]();
}

uint64_t sub_2375EB48C()
{
  return MEMORY[0x24BE0E208]();
}

uint64_t sub_2375EB498()
{
  return MEMORY[0x24BE0E228]();
}

uint64_t sub_2375EB4A4()
{
  return MEMORY[0x24BE0E230]();
}

uint64_t sub_2375EB4B0()
{
  return MEMORY[0x24BE0E238]();
}

uint64_t sub_2375EB4BC()
{
  return MEMORY[0x24BE0E248]();
}

uint64_t sub_2375EB4C8()
{
  return MEMORY[0x24BE0E268]();
}

uint64_t sub_2375EB4D4()
{
  return MEMORY[0x24BE0E270]();
}

uint64_t sub_2375EB4E0()
{
  return MEMORY[0x24BE0E278]();
}

uint64_t sub_2375EB4EC()
{
  return MEMORY[0x24BE0E280]();
}

uint64_t sub_2375EB4F8()
{
  return MEMORY[0x24BE0E288]();
}

uint64_t sub_2375EB504()
{
  return MEMORY[0x24BE0E290]();
}

uint64_t sub_2375EB510()
{
  return MEMORY[0x24BE0E298]();
}

uint64_t sub_2375EB51C()
{
  return MEMORY[0x24BE0E2A0]();
}

uint64_t sub_2375EB528()
{
  return MEMORY[0x24BE0E2B0]();
}

uint64_t sub_2375EB534()
{
  return MEMORY[0x24BE0E2C0]();
}

uint64_t sub_2375EB540()
{
  return MEMORY[0x24BE0E2D8]();
}

uint64_t sub_2375EB54C()
{
  return MEMORY[0x24BE0E2E0]();
}

uint64_t sub_2375EB558()
{
  return MEMORY[0x24BE0E2F0]();
}

uint64_t sub_2375EB564()
{
  return MEMORY[0x24BE0E310]();
}

uint64_t sub_2375EB570()
{
  return MEMORY[0x24BE0E318]();
}

uint64_t sub_2375EB57C()
{
  return MEMORY[0x24BE0E328]();
}

uint64_t sub_2375EB588()
{
  return MEMORY[0x24BE0E330]();
}

uint64_t sub_2375EB594()
{
  return MEMORY[0x24BE0E358]();
}

uint64_t sub_2375EB5A0()
{
  return MEMORY[0x24BE0E360]();
}

uint64_t sub_2375EB5AC()
{
  return MEMORY[0x24BE0E370]();
}

uint64_t sub_2375EB5B8()
{
  return MEMORY[0x24BE0E380]();
}

uint64_t sub_2375EB5C4()
{
  return MEMORY[0x24BE0E390]();
}

uint64_t sub_2375EB5D0()
{
  return MEMORY[0x24BE0E3A8]();
}

uint64_t sub_2375EB5DC()
{
  return MEMORY[0x24BE0E3B8]();
}

uint64_t sub_2375EB5E8()
{
  return MEMORY[0x24BE0E3C0]();
}

uint64_t sub_2375EB5F4()
{
  return MEMORY[0x24BE0E3C8]();
}

uint64_t sub_2375EB600()
{
  return MEMORY[0x24BE0E3D8]();
}

uint64_t sub_2375EB60C()
{
  return MEMORY[0x24BE0E3F8]();
}

uint64_t sub_2375EB618()
{
  return MEMORY[0x24BE0E418]();
}

uint64_t sub_2375EB624()
{
  return MEMORY[0x24BE0E438]();
}

uint64_t sub_2375EB630()
{
  return MEMORY[0x24BE0E440]();
}

uint64_t sub_2375EB63C()
{
  return MEMORY[0x24BE0E460]();
}

uint64_t sub_2375EB648()
{
  return MEMORY[0x24BE0E468]();
}

uint64_t sub_2375EB654()
{
  return MEMORY[0x24BE0E470]();
}

uint64_t sub_2375EB660()
{
  return MEMORY[0x24BE0E478]();
}

uint64_t sub_2375EB66C()
{
  return MEMORY[0x24BE0E4B0]();
}

uint64_t sub_2375EB678()
{
  return MEMORY[0x24BE0E4C8]();
}

uint64_t sub_2375EB684()
{
  return MEMORY[0x24BE0E4D0]();
}

uint64_t sub_2375EB690()
{
  return MEMORY[0x24BE0E4D8]();
}

uint64_t sub_2375EB69C()
{
  return MEMORY[0x24BE0E4E8]();
}

uint64_t sub_2375EB6A8()
{
  return MEMORY[0x24BE0E500]();
}

uint64_t sub_2375EB6B4()
{
  return MEMORY[0x24BE0E510]();
}

uint64_t sub_2375EB6C0()
{
  return MEMORY[0x24BE0E528]();
}

uint64_t sub_2375EB6CC()
{
  return MEMORY[0x24BE0E538]();
}

uint64_t sub_2375EB6D8()
{
  return MEMORY[0x24BE0E558]();
}

uint64_t sub_2375EB6E4()
{
  return MEMORY[0x24BE0E568]();
}

uint64_t sub_2375EB6F0()
{
  return MEMORY[0x24BE0E588]();
}

uint64_t sub_2375EB6FC()
{
  return MEMORY[0x24BE0E598]();
}

uint64_t sub_2375EB708()
{
  return MEMORY[0x24BE0E5B8]();
}

uint64_t sub_2375EB714()
{
  return MEMORY[0x24BE0E5C0]();
}

uint64_t sub_2375EB720()
{
  return MEMORY[0x24BE0E5E8]();
}

uint64_t sub_2375EB72C()
{
  return MEMORY[0x24BE0E5F0]();
}

uint64_t sub_2375EB738()
{
  return MEMORY[0x24BE0E618]();
}

uint64_t sub_2375EB744()
{
  return MEMORY[0x24BE0E620]();
}

uint64_t sub_2375EB750()
{
  return MEMORY[0x24BE0E640]();
}

uint64_t sub_2375EB75C()
{
  return MEMORY[0x24BE0E648]();
}

uint64_t sub_2375EB768()
{
  return MEMORY[0x24BE0E650]();
}

uint64_t sub_2375EB774()
{
  return MEMORY[0x24BE0E658]();
}

uint64_t sub_2375EB780()
{
  return MEMORY[0x24BE0E660]();
}

uint64_t sub_2375EB78C()
{
  return MEMORY[0x24BE0E668]();
}

uint64_t sub_2375EB798()
{
  return MEMORY[0x24BE0E678]();
}

uint64_t sub_2375EB7A4()
{
  return MEMORY[0x24BE0E680]();
}

uint64_t sub_2375EB7B0()
{
  return MEMORY[0x24BE0E688]();
}

uint64_t sub_2375EB7BC()
{
  return MEMORY[0x24BE0E698]();
}

uint64_t sub_2375EB7C8()
{
  return MEMORY[0x24BE0E6A8]();
}

uint64_t sub_2375EB7D4()
{
  return MEMORY[0x24BE0E6B8]();
}

uint64_t sub_2375EB7E0()
{
  return MEMORY[0x24BE0E740]();
}

uint64_t sub_2375EB7EC()
{
  return MEMORY[0x24BE0E750]();
}

uint64_t sub_2375EB7F8()
{
  return MEMORY[0x24BE0E770]();
}

uint64_t sub_2375EB804()
{
  return MEMORY[0x24BE0E780]();
}

uint64_t sub_2375EB810()
{
  return MEMORY[0x24BE0E788]();
}

uint64_t sub_2375EB81C()
{
  return MEMORY[0x24BE0E798]();
}

uint64_t sub_2375EB828()
{
  return MEMORY[0x24BE0E7C8]();
}

uint64_t sub_2375EB834()
{
  return MEMORY[0x24BE0E810]();
}

uint64_t sub_2375EB840()
{
  return MEMORY[0x24BE0E830]();
}

uint64_t sub_2375EB84C()
{
  return MEMORY[0x24BE0E838]();
}

uint64_t sub_2375EB858()
{
  return MEMORY[0x24BE0E848]();
}

uint64_t sub_2375EB864()
{
  return MEMORY[0x24BE0E868]();
}

uint64_t sub_2375EB870()
{
  return MEMORY[0x24BE0E870]();
}

uint64_t sub_2375EB87C()
{
  return MEMORY[0x24BE0E888]();
}

uint64_t sub_2375EB888()
{
  return MEMORY[0x24BE0E890]();
}

uint64_t sub_2375EB894()
{
  return MEMORY[0x24BE0E8C8]();
}

uint64_t sub_2375EB8A0()
{
  return MEMORY[0x24BE0E8F8]();
}

uint64_t sub_2375EB8AC()
{
  return MEMORY[0x24BE0E900]();
}

uint64_t sub_2375EB8B8()
{
  return MEMORY[0x24BE0E918]();
}

uint64_t sub_2375EB8C4()
{
  return MEMORY[0x24BE0E928]();
}

uint64_t sub_2375EB8D0()
{
  return MEMORY[0x24BE0E930]();
}

uint64_t sub_2375EB8DC()
{
  return MEMORY[0x24BE0E940]();
}

uint64_t sub_2375EB8E8()
{
  return MEMORY[0x24BE0E958]();
}

uint64_t sub_2375EB8F4()
{
  return MEMORY[0x24BE0E960]();
}

uint64_t sub_2375EB900()
{
  return MEMORY[0x24BE0E970]();
}

uint64_t sub_2375EB90C()
{
  return MEMORY[0x24BE0E978]();
}

uint64_t sub_2375EB918()
{
  return MEMORY[0x24BE0E9A0]();
}

uint64_t sub_2375EB924()
{
  return MEMORY[0x24BE0E9D8]();
}

uint64_t sub_2375EB930()
{
  return MEMORY[0x24BE0E9F8]();
}

uint64_t sub_2375EB93C()
{
  return MEMORY[0x24BE0EA00]();
}

uint64_t sub_2375EB948()
{
  return MEMORY[0x24BE0EA18]();
}

uint64_t sub_2375EB954()
{
  return MEMORY[0x24BE0EA28]();
}

uint64_t sub_2375EB960()
{
  return MEMORY[0x24BE0EA48]();
}

uint64_t sub_2375EB96C()
{
  return MEMORY[0x24BE0EA68]();
}

uint64_t sub_2375EB978()
{
  return MEMORY[0x24BE0EA70]();
}

uint64_t sub_2375EB984()
{
  return MEMORY[0x24BE0EAA8]();
}

uint64_t sub_2375EB990()
{
  return MEMORY[0x24BE0EAC0]();
}

uint64_t sub_2375EB99C()
{
  return MEMORY[0x24BE0EAD0]();
}

uint64_t sub_2375EB9A8()
{
  return MEMORY[0x24BE0EAD8]();
}

uint64_t sub_2375EB9B4()
{
  return MEMORY[0x24BE0EAE0]();
}

uint64_t sub_2375EB9C0()
{
  return MEMORY[0x24BE0EAF8]();
}

uint64_t sub_2375EB9CC()
{
  return MEMORY[0x24BE0EB00]();
}

uint64_t sub_2375EB9D8()
{
  return MEMORY[0x24BE0EB10]();
}

uint64_t sub_2375EB9E4()
{
  return MEMORY[0x24BE0EB18]();
}

uint64_t sub_2375EB9F0()
{
  return MEMORY[0x24BE0EB20]();
}

uint64_t sub_2375EB9FC()
{
  return MEMORY[0x24BE0EB30]();
}

uint64_t sub_2375EBA08()
{
  return MEMORY[0x24BE0EB58]();
}

uint64_t sub_2375EBA14()
{
  return MEMORY[0x24BE0EB90]();
}

uint64_t sub_2375EBA20()
{
  return MEMORY[0x24BE0EBA0]();
}

uint64_t sub_2375EBA2C()
{
  return MEMORY[0x24BE0EBB0]();
}

uint64_t sub_2375EBA38()
{
  return MEMORY[0x24BE0EBD0]();
}

uint64_t sub_2375EBA44()
{
  return MEMORY[0x24BE0EBE8]();
}

uint64_t sub_2375EBA50()
{
  return MEMORY[0x24BE0EC08]();
}

uint64_t sub_2375EBA5C()
{
  return MEMORY[0x24BE0EC18]();
}

uint64_t sub_2375EBA68()
{
  return MEMORY[0x24BE0EC28]();
}

uint64_t sub_2375EBA74()
{
  return MEMORY[0x24BE0EC40]();
}

uint64_t sub_2375EBA80()
{
  return MEMORY[0x24BE0EC58]();
}

uint64_t sub_2375EBA8C()
{
  return MEMORY[0x24BE0EC68]();
}

uint64_t sub_2375EBA98()
{
  return MEMORY[0x24BE0EC78]();
}

uint64_t sub_2375EBAA4()
{
  return MEMORY[0x24BE0EC88]();
}

uint64_t sub_2375EBAB0()
{
  return MEMORY[0x24BE0EC90]();
}

uint64_t sub_2375EBABC()
{
  return MEMORY[0x24BE0ECA8]();
}

uint64_t sub_2375EBAC8()
{
  return MEMORY[0x24BE0ECB0]();
}

uint64_t sub_2375EBAD4()
{
  return MEMORY[0x24BE0ECC0]();
}

uint64_t sub_2375EBAE0()
{
  return MEMORY[0x24BE0ECC8]();
}

uint64_t sub_2375EBAEC()
{
  return MEMORY[0x24BE0ED00]();
}

uint64_t sub_2375EBAF8()
{
  return MEMORY[0x24BE0ED18]();
}

uint64_t sub_2375EBB04()
{
  return MEMORY[0x24BE0ED20]();
}

uint64_t sub_2375EBB10()
{
  return MEMORY[0x24BE0ED28]();
}

uint64_t sub_2375EBB1C()
{
  return MEMORY[0x24BE0ED30]();
}

uint64_t sub_2375EBB28()
{
  return MEMORY[0x24BE0ED40]();
}

uint64_t sub_2375EBB34()
{
  return MEMORY[0x24BE0ED50]();
}

uint64_t sub_2375EBB40()
{
  return MEMORY[0x24BE0ED68]();
}

uint64_t sub_2375EBB4C()
{
  return MEMORY[0x24BE0ED70]();
}

uint64_t sub_2375EBB58()
{
  return MEMORY[0x24BE0ED80]();
}

uint64_t sub_2375EBB64()
{
  return MEMORY[0x24BE0ED98]();
}

uint64_t sub_2375EBB70()
{
  return MEMORY[0x24BE0EDA0]();
}

uint64_t sub_2375EBB7C()
{
  return MEMORY[0x24BE0EDB0]();
}

uint64_t sub_2375EBB88()
{
  return MEMORY[0x24BE0EDE8]();
}

uint64_t sub_2375EBB94()
{
  return MEMORY[0x24BE0EE00]();
}

uint64_t sub_2375EBBA0()
{
  return MEMORY[0x24BE0EE08]();
}

uint64_t sub_2375EBBAC()
{
  return MEMORY[0x24BE0EE10]();
}

uint64_t sub_2375EBBB8()
{
  return MEMORY[0x24BE0EE20]();
}

uint64_t sub_2375EBBC4()
{
  return MEMORY[0x24BE0EE28]();
}

uint64_t sub_2375EBBD0()
{
  return MEMORY[0x24BE0EE40]();
}

uint64_t sub_2375EBBDC()
{
  return MEMORY[0x24BE0EE48]();
}

uint64_t sub_2375EBBE8()
{
  return MEMORY[0x24BE0EE58]();
}

uint64_t sub_2375EBBF4()
{
  return MEMORY[0x24BE0EE60]();
}

uint64_t sub_2375EBC00()
{
  return MEMORY[0x24BE0EE98]();
}

uint64_t sub_2375EBC0C()
{
  return MEMORY[0x24BE0EEB0]();
}

uint64_t sub_2375EBC18()
{
  return MEMORY[0x24BE0EEB8]();
}

uint64_t sub_2375EBC24()
{
  return MEMORY[0x24BE0EEC0]();
}

uint64_t sub_2375EBC30()
{
  return MEMORY[0x24BE0EED0]();
}

uint64_t sub_2375EBC3C()
{
  return MEMORY[0x24BE0EED8]();
}

uint64_t sub_2375EBC48()
{
  return MEMORY[0x24BE0EEE0]();
}

uint64_t sub_2375EBC54()
{
  return MEMORY[0x24BE0EEF8]();
}

uint64_t sub_2375EBC60()
{
  return MEMORY[0x24BE0EF00]();
}

uint64_t sub_2375EBC6C()
{
  return MEMORY[0x24BE0EF20]();
}

uint64_t sub_2375EBC78()
{
  return MEMORY[0x24BE0EF28]();
}

uint64_t sub_2375EBC84()
{
  return MEMORY[0x24BE0EF48]();
}

uint64_t sub_2375EBC90()
{
  return MEMORY[0x24BE0EF60]();
}

uint64_t sub_2375EBC9C()
{
  return MEMORY[0x24BE0EF68]();
}

uint64_t sub_2375EBCA8()
{
  return MEMORY[0x24BE0EF78]();
}

uint64_t sub_2375EBCB4()
{
  return MEMORY[0x24BE0EF88]();
}

uint64_t sub_2375EBCC0()
{
  return MEMORY[0x24BE0EF90]();
}

uint64_t sub_2375EBCCC()
{
  return MEMORY[0x24BE0EF98]();
}

uint64_t sub_2375EBCD8()
{
  return MEMORY[0x24BE0EFA8]();
}

uint64_t sub_2375EBCE4()
{
  return MEMORY[0x24BE0EFB0]();
}

uint64_t sub_2375EBCF0()
{
  return MEMORY[0x24BE0EFB8]();
}

uint64_t sub_2375EBCFC()
{
  return MEMORY[0x24BE0EFD0]();
}

uint64_t sub_2375EBD08()
{
  return MEMORY[0x24BE0EFD8]();
}

uint64_t sub_2375EBD14()
{
  return MEMORY[0x24BE0EFF0]();
}

uint64_t sub_2375EBD20()
{
  return MEMORY[0x24BE0EFF8]();
}

uint64_t sub_2375EBD2C()
{
  return MEMORY[0x24BE0F000]();
}

uint64_t sub_2375EBD38()
{
  return MEMORY[0x24BE0F008]();
}

uint64_t sub_2375EBD44()
{
  return MEMORY[0x24BE0F028]();
}

uint64_t sub_2375EBD50()
{
  return MEMORY[0x24BE0F048]();
}

uint64_t sub_2375EBD5C()
{
  return MEMORY[0x24BE0F050]();
}

uint64_t sub_2375EBD68()
{
  return MEMORY[0x24BE0F070]();
}

uint64_t sub_2375EBD74()
{
  return MEMORY[0x24BE0F078]();
}

uint64_t sub_2375EBD80()
{
  return MEMORY[0x24BE0F090]();
}

uint64_t sub_2375EBD8C()
{
  return MEMORY[0x24BE0F0A0]();
}

uint64_t sub_2375EBD98()
{
  return MEMORY[0x24BE0F0B8]();
}

uint64_t sub_2375EBDA4()
{
  return MEMORY[0x24BE0F140]();
}

uint64_t sub_2375EBDB0()
{
  return MEMORY[0x24BE0F150]();
}

uint64_t sub_2375EBDBC()
{
  return MEMORY[0x24BE0F160]();
}

uint64_t sub_2375EBDC8()
{
  return MEMORY[0x24BE0F168]();
}

uint64_t sub_2375EBDD4()
{
  return MEMORY[0x24BE0F1B0]();
}

uint64_t sub_2375EBDE0()
{
  return MEMORY[0x24BE0F1C8]();
}

uint64_t sub_2375EBDEC()
{
  return MEMORY[0x24BE0F210]();
}

uint64_t sub_2375EBDF8()
{
  return MEMORY[0x24BE0F220]();
}

uint64_t sub_2375EBE04()
{
  return MEMORY[0x24BE0F228]();
}

uint64_t sub_2375EBE10()
{
  return MEMORY[0x24BE0F240]();
}

uint64_t sub_2375EBE1C()
{
  return MEMORY[0x24BE0F270]();
}

uint64_t sub_2375EBE28()
{
  return MEMORY[0x24BE0F288]();
}

uint64_t sub_2375EBE34()
{
  return MEMORY[0x24BE0F298]();
}

uint64_t sub_2375EBE40()
{
  return MEMORY[0x24BE0F2B0]();
}

uint64_t sub_2375EBE4C()
{
  return MEMORY[0x24BE0F2C0]();
}

uint64_t sub_2375EBE58()
{
  return MEMORY[0x24BE0F2D8]();
}

uint64_t sub_2375EBE64()
{
  return MEMORY[0x24BE0F2E0]();
}

uint64_t sub_2375EBE70()
{
  return MEMORY[0x24BE0F2E8]();
}

uint64_t sub_2375EBE7C()
{
  return MEMORY[0x24BE0F2F0]();
}

uint64_t sub_2375EBE88()
{
  return MEMORY[0x24BE0F300]();
}

uint64_t sub_2375EBE94()
{
  return MEMORY[0x24BE0F308]();
}

uint64_t sub_2375EBEA0()
{
  return MEMORY[0x24BE0F310]();
}

uint64_t sub_2375EBEAC()
{
  return MEMORY[0x24BE0F318]();
}

uint64_t sub_2375EBEB8()
{
  return MEMORY[0x24BE0F320]();
}

uint64_t sub_2375EBEC4()
{
  return MEMORY[0x24BE0F328]();
}

uint64_t sub_2375EBED0()
{
  return MEMORY[0x24BE0F368]();
}

uint64_t sub_2375EBEDC()
{
  return MEMORY[0x24BE0F378]();
}

uint64_t sub_2375EBEE8()
{
  return MEMORY[0x24BE0F390]();
}

uint64_t sub_2375EBEF4()
{
  return MEMORY[0x24BE0F3A8]();
}

uint64_t sub_2375EBF00()
{
  return MEMORY[0x24BE0F3B0]();
}

uint64_t sub_2375EBF0C()
{
  return MEMORY[0x24BE0F3D0]();
}

uint64_t sub_2375EBF18()
{
  return MEMORY[0x24BE0F3E8]();
}

uint64_t sub_2375EBF24()
{
  return MEMORY[0x24BE0F400]();
}

uint64_t sub_2375EBF30()
{
  return MEMORY[0x24BE0F420]();
}

uint64_t sub_2375EBF3C()
{
  return MEMORY[0x24BE0F430]();
}

uint64_t sub_2375EBF48()
{
  return MEMORY[0x24BE0F438]();
}

uint64_t sub_2375EBF54()
{
  return MEMORY[0x24BE0F440]();
}

uint64_t sub_2375EBF60()
{
  return MEMORY[0x24BE0F448]();
}

uint64_t sub_2375EBF6C()
{
  return MEMORY[0x24BE0F450]();
}

uint64_t sub_2375EBF78()
{
  return MEMORY[0x24BE0F458]();
}

uint64_t sub_2375EBF84()
{
  return MEMORY[0x24BE0F480]();
}

uint64_t sub_2375EBF90()
{
  return MEMORY[0x24BE0F498]();
}

uint64_t sub_2375EBF9C()
{
  return MEMORY[0x24BE0F4A0]();
}

uint64_t sub_2375EBFA8()
{
  return MEMORY[0x24BE0F4B0]();
}

uint64_t sub_2375EBFB4()
{
  return MEMORY[0x24BE0F4C8]();
}

uint64_t sub_2375EBFC0()
{
  return MEMORY[0x24BE0F4D8]();
}

uint64_t sub_2375EBFCC()
{
  return MEMORY[0x24BE0F4F8]();
}

uint64_t sub_2375EBFD8()
{
  return MEMORY[0x24BE0F508]();
}

uint64_t sub_2375EBFE4()
{
  return MEMORY[0x24BE0F510]();
}

uint64_t sub_2375EBFF0()
{
  return MEMORY[0x24BE0F550]();
}

uint64_t sub_2375EBFFC()
{
  return MEMORY[0x24BE0F558]();
}

uint64_t sub_2375EC008()
{
  return MEMORY[0x24BE0F568]();
}

uint64_t sub_2375EC014()
{
  return MEMORY[0x24BE0F580]();
}

uint64_t sub_2375EC020()
{
  return MEMORY[0x24BE0F598]();
}

uint64_t sub_2375EC02C()
{
  return MEMORY[0x24BE0F5A8]();
}

uint64_t sub_2375EC038()
{
  return MEMORY[0x24BE0F5D8]();
}

uint64_t sub_2375EC044()
{
  return MEMORY[0x24BE0F5E8]();
}

uint64_t sub_2375EC050()
{
  return MEMORY[0x24BE0F5F8]();
}

uint64_t sub_2375EC05C()
{
  return MEMORY[0x24BE0F610]();
}

uint64_t sub_2375EC068()
{
  return MEMORY[0x24BE0F628]();
}

uint64_t sub_2375EC074()
{
  return MEMORY[0x24BE0F638]();
}

uint64_t sub_2375EC080()
{
  return MEMORY[0x24BE0F650]();
}

uint64_t sub_2375EC08C()
{
  return MEMORY[0x24BE0F678]();
}

uint64_t sub_2375EC098()
{
  return MEMORY[0x24BE0F698]();
}

uint64_t sub_2375EC0A4()
{
  return MEMORY[0x24BE0F6A0]();
}

uint64_t sub_2375EC0B0()
{
  return MEMORY[0x24BE0F6D0]();
}

uint64_t sub_2375EC0BC()
{
  return MEMORY[0x24BE0F6F0]();
}

uint64_t sub_2375EC0C8()
{
  return MEMORY[0x24BE0F700]();
}

uint64_t sub_2375EC0D4()
{
  return MEMORY[0x24BE0F720]();
}

uint64_t sub_2375EC0E0()
{
  return MEMORY[0x24BE0F758]();
}

uint64_t sub_2375EC0EC()
{
  return MEMORY[0x24BE0F778]();
}

uint64_t sub_2375EC0F8()
{
  return MEMORY[0x24BE0F780]();
}

uint64_t sub_2375EC104()
{
  return MEMORY[0x24BE0F798]();
}

uint64_t sub_2375EC110()
{
  return MEMORY[0x24BE0F7A0]();
}

uint64_t sub_2375EC11C()
{
  return MEMORY[0x24BE0F7B8]();
}

uint64_t sub_2375EC128()
{
  return MEMORY[0x24BE0F7C0]();
}

uint64_t sub_2375EC134()
{
  return MEMORY[0x24BE0F7C8]();
}

uint64_t sub_2375EC140()
{
  return MEMORY[0x24BE0F7E0]();
}

uint64_t sub_2375EC14C()
{
  return MEMORY[0x24BE0F7F0]();
}

uint64_t sub_2375EC158()
{
  return MEMORY[0x24BE0F800]();
}

uint64_t sub_2375EC164()
{
  return MEMORY[0x24BE0F818]();
}

uint64_t sub_2375EC170()
{
  return MEMORY[0x24BE0F828]();
}

uint64_t sub_2375EC17C()
{
  return MEMORY[0x24BE0F830]();
}

uint64_t sub_2375EC188()
{
  return MEMORY[0x24BE0F850]();
}

uint64_t sub_2375EC194()
{
  return MEMORY[0x24BE0F878]();
}

uint64_t sub_2375EC1A0()
{
  return MEMORY[0x24BE0F880]();
}

uint64_t sub_2375EC1AC()
{
  return MEMORY[0x24BE0F8A0]();
}

uint64_t sub_2375EC1B8()
{
  return MEMORY[0x24BE0F8C0]();
}

uint64_t sub_2375EC1C4()
{
  return MEMORY[0x24BE0F8D0]();
}

uint64_t sub_2375EC1D0()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_2375EC1DC()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t sub_2375EC1E8()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_2375EC1F4()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_2375EC200()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_2375EC20C()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_2375EC218()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_2375EC224()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_2375EC230()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_2375EC23C()
{
  return MEMORY[0x24BEE0A48]();
}

uint64_t sub_2375EC248()
{
  return MEMORY[0x24BEE0AD0]();
}

uint64_t sub_2375EC254()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_2375EC260()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_2375EC26C()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_2375EC278()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_2375EC284()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_2375EC290()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_2375EC29C()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_2375EC2A8()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_2375EC2B4()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_2375EC2C0()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_2375EC2CC()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_2375EC2D8()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_2375EC2E4()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_2375EC2F0()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_2375EC2FC()
{
  return MEMORY[0x24BEE1A50]();
}

uint64_t sub_2375EC308()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_2375EC314()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_2375EC320()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_2375EC32C()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_2375EC338()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_2375EC344()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_2375EC350()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t sub_2375EC35C()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t sub_2375EC368()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t sub_2375EC374()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t sub_2375EC380()
{
  return MEMORY[0x24BEE20A0]();
}

uint64_t sub_2375EC38C()
{
  return MEMORY[0x24BEE2238]();
}

uint64_t sub_2375EC398()
{
  return MEMORY[0x24BEE2508]();
}

uint64_t sub_2375EC3A4()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_2375EC3B0()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_2375EC3BC()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_2375EC3C8()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t sub_2375EC3D4()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_2375EC3E0()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_2375EC3EC()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_2375EC3F8()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_2375EC404()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_2375EC410()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_2375EC41C()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_2375EC428()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_2375EC434()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_2375EC440()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_2375EC44C()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_2375EC458()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_2375EC464()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_2375EC470()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_2375EC47C()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t sub_2375EC488()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_2375EC494()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t sub_2375EC4A0()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_2375EC4AC()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_2375EC4B8()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_2375EC4C4()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_2375EC4D0()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_2375EC4DC()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_2375EC4E8()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_2375EC4F4()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_2375EC500()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_2375EC50C()
{
  return MEMORY[0x24BEE47F8]();
}

uint64_t sub_2375EC518()
{
  return MEMORY[0x24BEE4820]();
}

uint64_t sub_2375EC524()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_2375EC530()
{
  return MEMORY[0x24BEE4A10]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDACD0](this, __str);
}

void std::string::~string(std::string *this)
{
  MEMORY[0x24BEDACF0](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_2508E4180(__p);
}

uint64_t operator delete()
{
  return off_2508E4188();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_2508E4190(__sz);
}

uint64_t operator new()
{
  return off_2508E4198();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getCanonicalSpecializedMetadata()
{
  return MEMORY[0x24BEE4CF8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

