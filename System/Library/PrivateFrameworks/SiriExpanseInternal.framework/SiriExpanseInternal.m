_QWORD *initializeBufferWithCopyOfBuffer for AppDialogParams(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AppDialogParams()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for AppDialogParams(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for AppDialogParams(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDialogParams(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDialogParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDialogParams()
{
  return &type metadata for AppDialogParams;
}

ValueMetadata *type metadata accessor for EmptyDialogParams()
{
  return &type metadata for EmptyDialogParams;
}

void type metadata accessor for TUCallStatus()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TUCallStatus)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for TUCallStatus);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SharingDialogParams.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingDialogParams.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SharingDialogParams.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingDialogParams.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SharingDialogParams.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656D614E707061;
  if (*v0 != 1)
    v1 = 0x6E65697069636572;
  if (*v0)
    return v1;
  else
    return 0x6E65657263537369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SharingDialogParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SharingDialogParams.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SharingDialogParams.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance SharingDialogParams.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SharingDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SharingDialogParams.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[4];
  char v14;
  char v15;
  char v16;

  v13[1] = a3;
  v13[2] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SharingDialogParams.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[3] = a5;
    v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogPerson]);
    lazy protocol witness table accessor for type [DialogPerson] and conformance <A> [A]();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SharingDialogParams(_QWORD *a1)
{
  uint64_t *v1;

  return SharingDialogParams.encode(to:)(a1, *(unsigned __int8 *)v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GenericErrorParams.CodingKeys()
{
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericErrorParams.CodingKeys()
{
  return 0x5265726168537369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericErrorParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x5265726168537369 && a2 == 0xEE00747365757165)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericErrorParams.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericErrorParams.CodingKeys()
{
  lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericErrorParams.CodingKeys()
{
  lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<GenericErrorParams.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GenericErrorParams(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance AppDialogParams.CodingKeys()
{
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AppDialogParams.CodingKeys()
{
  return 0x656D614E707061;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AppDialogParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AppDialogParams(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AppDialogParams.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppDialogParams(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GenericErrorParams.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GenericErrorParams.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ConfirmationDialogParams.CodingKeys()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConfirmationDialogParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ConfirmationDialogParams.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConfirmationDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConfirmationDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ConfirmationDialogParams(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<ConfirmationDialogParams.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(void);

  v12 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EmptyDialogParams.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EmptyDialogParams.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EmptyDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EmptyDialogParams.CodingKeys()
{
  lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmptyDialogParams(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EmptyDialogParams.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void protocol witness for SetAlgebra.init() in conformance NSJSONReadingOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TUConversationActivitySessionState(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance TUCallStatus@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TUCallStatus(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2207E447C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for AppDialogParams.CodingKeys, &unk_24E636110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for AppDialogParams.CodingKeys, &unk_24E636110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for AppDialogParams.CodingKeys, &unk_24E636110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for AppDialogParams.CodingKeys, &unk_24E636110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for EmptyDialogParams.CodingKeys, &unk_24E636080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for EmptyDialogParams.CodingKeys, &unk_24E636080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for EmptyDialogParams.CodingKeys, &unk_24E636080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys);
  }
  return result;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance NSJSONReadingOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TUConversationActivitySessionState(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void *type metadata accessor for EmptyDialogParams.CodingKeys()
{
  return &unk_24E636080;
}

uint64_t getEnumTag for AppDialogParams.CodingKeys()
{
  return 0;
}

void *type metadata accessor for AppDialogParams.CodingKeys()
{
  return &unk_24E636110;
}

unint64_t lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationDialogParams.CodingKeys, &unk_24E6362C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationDialogParams.CodingKeys, &unk_24E6362C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationDialogParams.CodingKeys, &unk_24E6362C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationDialogParams.CodingKeys, &unk_24E6362C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingDialogParams.CodingKeys, &unk_24E636230);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingDialogParams.CodingKeys, &unk_24E636230);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingDialogParams.CodingKeys, &unk_24E636230);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingDialogParams.CodingKeys, &unk_24E636230);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DialogPerson] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [DialogPerson] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DialogPerson] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DialogPerson]);
    v2 = lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson();
    result = MEMORY[0x2207E4494](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DialogPerson] and conformance <A> [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2207E4488](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson;
  if (!lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson)
  {
    v1 = type metadata accessor for DialogPerson();
    result = MEMORY[0x2207E4494](MEMORY[0x24BE925A0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for GenericErrorParams.CodingKeys, &unk_24E6361A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for GenericErrorParams.CodingKeys, &unk_24E6361A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for GenericErrorParams.CodingKeys, &unk_24E6361A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for GenericErrorParams.CodingKeys, &unk_24E6361A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

void *type metadata accessor for GenericErrorParams.CodingKeys()
{
  return &unk_24E6361A0;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SharingDialogParams.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingDialogParams.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2203FCA10 + 4 * byte_220442725[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2203FCA44 + 4 * byte_220442720[v4]))();
}

uint64_t sub_2203FCA44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2203FCA4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2203FCA54);
  return result;
}

uint64_t sub_2203FCA60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2203FCA68);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2203FCA6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2203FCA74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for SharingDialogParams.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for SharingDialogParams.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for SharingDialogParams.CodingKeys()
{
  return &unk_24E636230;
}

uint64_t getEnumTagSinglePayload for AppDialogParams.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AppDialogParams.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2203FCB30 + 4 * byte_22044272A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2203FCB50 + 4 * byte_22044272F[v4]))();
}

_BYTE *sub_2203FCB30(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2203FCB50(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2203FCB58(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2203FCB60(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2203FCB68(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2203FCB70(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ConfirmationDialogParams.CodingKeys()
{
  return &unk_24E6362C0;
}

ValueMetadata *type metadata accessor for ConfirmationDialogParams()
{
  return &type metadata for ConfirmationDialogParams;
}

uint64_t initializeBufferWithCopyOfBuffer for SharingDialogParams(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SharingDialogParams()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SharingDialogParams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SharingDialogParams(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for SharingDialogParams(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingDialogParams(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingDialogParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingDialogParams()
{
  return &type metadata for SharingDialogParams;
}

uint64_t getEnumTagSinglePayload for ConfirmationDialogParams(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationDialogParams(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2203FCEB0 + 4 * byte_220442739[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2203FCEE4 + 4 * byte_220442734[v4]))();
}

uint64_t sub_2203FCEE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2203FCEEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2203FCEF4);
  return result;
}

uint64_t sub_2203FCF00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2203FCF08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2203FCF0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2203FCF14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericErrorParams()
{
  return &type metadata for GenericErrorParams;
}

uint64_t specialized SharingDialogParams.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E65657263537369 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ConfirmationDialogParams.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x8000000220447910)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t one-time initialization function for typeName()
{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SharingDirectInvocationIntent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingDirectInvocationIntent.Type);
  result = String.init<A>(describing:)();
  static SharingDirectInvocationIntent.typeName = result;
  *(_QWORD *)algn_2555D10C8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExpanseFlowProvider.Type);
  result = String.init<A>(describing:)();
  static ExpanseFlowProvider.typeName = result;
  unk_2555D1320 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingDirectInvocation.Type);
  result = String.init<A>(describing:)();
  static SharingDirectInvocation.typeName = result;
  *(_QWORD *)algn_2555D1368 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharingIntentHelper.Type);
  result = String.init<A>(describing:)();
  static SharingIntentHelper.typeName = result;
  *(_QWORD *)algn_2555D1398 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenShareType.Type);
  result = String.init<A>(describing:)();
  static ScreenShareType.typeName = result;
  *(_QWORD *)algn_2555D13E8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimpleSharingYesNoPromptFlowStrategy.Type);
  result = String.init<A>(describing:)();
  static SimpleSharingYesNoPromptFlowStrategy.typeName = result;
  unk_2555D1510 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingNLContextProvider.Type);
  result = String.init<A>(describing:)();
  static SharingNLContextProvider.typeName = result;
  *(_QWORD *)algn_2555D1708 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for StartSharingConfirmationFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StartSharingConfirmationFlow.Type);
  result = String.init<A>(describing:)();
  static StartSharingConfirmationFlow.typeName = result;
  *(_QWORD *)algn_2555D18D8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenSharingCallManager.Type);
  result = String.init<A>(describing:)();
  static ScreenSharingCallManager.typeName = result;
  unk_2555D1C10 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for OutputDialogFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OutputDialogFlow.Type);
  result = String.init<A>(describing:)();
  static OutputDialogFlow.typeName = result;
  *(_QWORD *)algn_2555D1C38 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SharePlayHelper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharePlayHelper.Type);
  result = String.init<A>(describing:)();
  static SharePlayHelper.typeName = result;
  unk_2555D1E60 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationContext.Type);
  result = String.init<A>(describing:)();
  static ConfirmationContext.typeName = result;
  *(_QWORD *)algn_2555D1F38 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ValidateCallStatusFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValidateCallStatusFlow.Type);
  result = String.init<A>(describing:)();
  static ValidateCallStatusFlow.typeName = result;
  *(_QWORD *)algn_2555D1F58 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShareStatus.Type);
  result = String.init<A>(describing:)();
  static ShareStatus.typeName = result;
  *(_QWORD *)algn_2555D21C8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for DismissSiriFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DismissSiriFlow.Type);
  result = String.init<A>(describing:)();
  static DismissSiriFlow.typeName = result;
  unk_2555D30D0 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sharer.Type);
  result = String.init<A>(describing:)();
  static Sharer.typeName = result;
  unk_2555D31B0 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ResponseExecutor();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseExecutor.Type);
  result = String.init<A>(describing:)();
  static ResponseExecutor.typeName = result;
  unk_2555D31E0 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ValidateRecipientsFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValidateRecipientsFlow.Type);
  result = String.init<A>(describing:)();
  static ValidateRecipientsFlow.typeName = result;
  unk_2555D3380 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SharingNLv4Intent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingNLv4Intent.Type);
  result = String.init<A>(describing:)();
  static SharingNLv4Intent.typeName = result;
  unk_2555D34D0 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Type);
  result = String.init<A>(describing:)();
  static ConfirmScreenShareOrMessageSendFlowStrategy.typeName = result;
  *(_QWORD *)algn_2555D3C98 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShareTargetResolver.Type);
  result = String.init<A>(describing:)();
  static ShareTargetResolver.typeName = result;
  unk_2555D3E80 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for StartSharingFlow(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StartSharingFlow.Type);
  result = String.init<A>(describing:)();
  static StartSharingFlow.typeName = result;
  *(_QWORD *)algn_2555D3EB8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ValidateStartSharingIntentFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValidateStartSharingIntentFlow.Type);
  result = String.init<A>(describing:)();
  static ValidateStartSharingIntentFlow.typeName = result;
  *(_QWORD *)algn_2555D41C8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for StopSharingFlow(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StopSharingFlow.Type);
  result = String.init<A>(describing:)();
  static StopSharingFlow.typeName = result;
  qword_2555D42D8 = v1;
  return result;
}

uint64_t SharingDirectInvocationIntent.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  __int128 v5;

  BYTE8(v5) = 0;
  _StringGuts.grow(_:)(52);
  v1._object = (void *)0x8000000220447950;
  v1._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v1);
  *(_QWORD *)&v5 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SharingDirectInvocationIntent() + 60));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationValue?);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return *(_QWORD *)((char *)&v5 + 1);
}

void SharingDirectInvocationIntent.init(from:)(char a1@<W0>, _BYTE *a2@<X8>)
{
  int *v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *a2 = 3;
  v4 = (int *)type metadata accessor for SharingDirectInvocationIntent();
  v5 = &a2[v4[5]];
  v6 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  a2[v4[6]] = 0;
  v7 = &a2[v4[7]];
  *v7 = 0;
  v7[1] = 0;
  v8 = &a2[v4[8]];
  *v8 = 0;
  v8[1] = 0;
  v9 = &a2[v4[9]];
  *v9 = 0;
  v9[1] = 0;
  v10 = &a2[v4[10]];
  *v10 = 0;
  v10[1] = 0;
  a2[v4[11]] = 0;
  a2[v4[12]] = 0;
  a2[v4[13]] = 0;
  *(_QWORD *)&a2[v4[14]] = 0;
  type metadata accessor for ShareTarget();
  swift_storeEnumTagMultiPayload();
  a2[v4[17]] = 0;
  *(_QWORD *)&a2[v4[18]] = 0;
  a2[v4[19]] = 0;
  a2[v4[20]] = 0;
  a2[v4[21]] = 0;
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.default);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v21 = v15;
    *(_DWORD *)v14 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v16 = static SharingDirectInvocationIntent.typeName;
    v17 = *(_QWORD *)algn_2555D10C8;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    if ((a1 & 1) != 0)
      v18 = 0x7463656A6572;
    else
      v18 = 0x6D7269666E6F63;
    if ((a1 & 1) != 0)
      v19 = 0xE600000000000000;
    else
      v19 = 0xE700000000000000;
    v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x8000000220447930, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v12, v13, "%s: Initializing self from invocation: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v15, -1, -1);
    MEMORY[0x2207E453C](v14, -1, -1);
  }

  a2[v4[15]] = 2 * (a1 & 1);
}

uint64_t protocol witness for SharingIntent.verb.getter in conformance SharingDirectInvocationIntent()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for SharingIntent.type.getter in conformance SharingDirectInvocationIntent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v2 + *(int *)(a1 + 20), a2);
}

uint64_t protocol witness for SharingIntent.type.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(a1, v2 + *(int *)(a2 + 20));
}

uint64_t protocol witness for SharingIntent.containsSharingReference.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 24));
}

uint64_t protocol witness for SharingIntent.containsSharingReference.setter in conformance SharingDirectInvocationIntent(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 24)) = result;
  return result;
}

uint64_t protocol witness for SharingIntent.appName.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.appName.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 28));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 32));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for SharingIntent.appIdentifier.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.appIdentifier.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for SharingIntent.associatedAppIdentifier.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.refersToScreen.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t protocol witness for SharingIntent.refersToEverything.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t protocol witness for SharingIntent.refersToDisplayedContent.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t protocol witness for SharingIntent.recipients.getter in conformance SharingDirectInvocationIntent()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingIntent.confirmationValue.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t protocol witness for SharingIntent.shareTarget.getter in conformance SharingDirectInvocationIntent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of ShareTarget(v2 + *(int *)(a1 + 64), a2);
}

uint64_t protocol witness for SharingIntent.isSharePlayRequest.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 68));
}

uint64_t protocol witness for SharingIntent.usoEntity.getter in conformance SharingDirectInvocationIntent()
{
  return swift_retain();
}

uint64_t protocol witness for SharingIntent.isExplicitShareViaMessagesIntent.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 76));
}

uint64_t protocol witness for SharingIntent.isExplicitShareInCallIntent.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 80));
}

uint64_t protocol witness for SharingIntent.isReformed.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 84));
}

uint64_t protocol witness for SharingIntent.isReformed.setter in conformance SharingDirectInvocationIntent(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 84)) = result;
  return result;
}

uint64_t type metadata accessor for SharingDirectInvocationIntent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SharingDirectInvocationIntent;
  if (!type metadata singleton initialization cache for SharingDirectInvocationIntent)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for SharingDirectInvocationIntent(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    v11 = *(_QWORD *)(v10 - 8);
    v42 = v11;
    v43 = v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[8];
    v19 = a3[9];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)((char *)v4 + v19);
    v24 = (_QWORD *)((char *)a2 + v19);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = a3[10];
    v27 = a3[11];
    v28 = (_QWORD *)((char *)v4 + v26);
    v29 = (_QWORD *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    *((_BYTE *)v4 + v27) = *((_BYTE *)a2 + v27);
    v31 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v4 + v31) = *((_BYTE *)a2 + v31);
    v32 = a3[15];
    *(_QWORD *)((char *)v4 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
    *((_BYTE *)v4 + v32) = *((_BYTE *)a2 + v32);
    v33 = a3[16];
    __dst = (char *)v4 + v33;
    v34 = (char *)a2 + v33;
    v35 = type metadata accessor for ShareTarget();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)__dst = *(_QWORD *)v34;
        swift_retain();
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
        (*(void (**)(char *, char *, uint64_t))(v42 + 16))(&__dst[*(int *)(v36 + 48)], &v34[*(int *)(v36 + 48)], v43);
        goto LABEL_11;
      case 1u:
      case 2u:
        v37 = *((_QWORD *)v34 + 1);
        *(_QWORD *)__dst = *(_QWORD *)v34;
        *((_QWORD *)__dst + 1) = v37;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 3u:
        v38 = *((_QWORD *)v34 + 1);
        *(_QWORD *)__dst = *(_QWORD *)v34;
        *((_QWORD *)__dst + 1) = v38;
        __dst[16] = v34[16];
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        break;
    }
    v39 = a3[18];
    *((_BYTE *)v4 + a3[17]) = *((_BYTE *)a2 + a3[17]);
    *(_QWORD *)((char *)v4 + v39) = *(_QWORD *)((char *)a2 + v39);
    v40 = a3[20];
    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
    *((_BYTE *)v4 + v40) = *((_BYTE *)a2 + v40);
    *((_BYTE *)v4 + a3[21]) = *((_BYTE *)a2 + a3[21]);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SharingDirectInvocationIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 64);
  type metadata accessor for ShareTarget();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7 + *(int *)(v8 + 48), v5);
      break;
    case 1u:
    case 2u:
    case 3u:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_release();
  }
  return swift_release();
}

_BYTE *initializeWithCopy for SharingDirectInvocationIntent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *__dst;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v10 = *(_QWORD *)(v9 - 8);
  v40 = v10;
  v41 = v9;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[8];
  v17 = a3[9];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = &a1[v17];
  v22 = &a2[v17];
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[10];
  v25 = a3[11];
  v26 = &a1[v24];
  v27 = &a2[v24];
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  a1[v25] = a2[v25];
  v29 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v29] = a2[v29];
  v30 = a3[15];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  a1[v30] = a2[v30];
  v31 = a3[16];
  __dst = &a1[v31];
  v32 = &a2[v31];
  v33 = type metadata accessor for ShareTarget();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(_QWORD *)__dst = *(_QWORD *)v32;
      swift_retain();
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&__dst[*(int *)(v34 + 48)], &v32[*(int *)(v34 + 48)], v41);
      goto LABEL_9;
    case 1u:
    case 2u:
      v35 = *((_QWORD *)v32 + 1);
      *(_QWORD *)__dst = *(_QWORD *)v32;
      *((_QWORD *)__dst + 1) = v35;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      v36 = *((_QWORD *)v32 + 1);
      *(_QWORD *)__dst = *(_QWORD *)v32;
      *((_QWORD *)__dst + 1) = v36;
      __dst[16] = v32[16];
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      break;
  }
  v37 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  *(_QWORD *)&a1[v37] = *(_QWORD *)&a2[v37];
  v38 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v38] = a2[v38];
  a1[a3[21]] = a2[a3[21]];
  swift_retain();
  return a1;
}

_BYTE *assignWithCopy for SharingDirectInvocationIntent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  a1[a3[6]] = a2[a3[6]];
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = a3[10];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  a1[a3[13]] = a2[a3[13]];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[15]] = a2[a3[15]];
  if (a1 != a2)
  {
    v27 = a3[16];
    v28 = &a1[v27];
    v29 = &a2[v27];
    outlined destroy of ShareTarget((uint64_t)&a1[v27]);
    v30 = type metadata accessor for ShareTarget();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)v28 = *(_QWORD *)v29;
        swift_retain();
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v28[*(int *)(v31 + 48)], &v29[*(int *)(v31 + 48)], v9);
        goto LABEL_14;
      case 1u:
      case 2u:
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 3u:
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
        v28[16] = v29[16];
        swift_bridgeObjectRetain();
LABEL_14:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        break;
    }
  }
  a1[a3[17]] = a2[a3[17]];
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  swift_retain();
  swift_release();
  a1[a3[19]] = a2[a3[19]];
  a1[a3[20]] = a2[a3[20]];
  a1[a3[21]] = a2[a3[21]];
  return a1;
}

uint64_t outlined destroy of ShareTarget(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShareTarget();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *initializeWithTake for SharingDirectInvocationIntent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  v13 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  v14 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  a1[v14] = a2[v14];
  v15 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v15] = a2[v15];
  v16 = a3[15];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  a1[v16] = a2[v16];
  v17 = a3[16];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = type metadata accessor for ShareTarget();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v18 + *(int *)(v21 + 48), (char *)v19 + *(int *)(v21 + 48), v9);
    swift_storeEnumTagMultiPayload();
  }
  v22 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v23 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v23] = a2[v23];
  a1[a3[21]] = a2[a3[21]];
  return a1;
}

_BYTE *assignWithTake for SharingDirectInvocationIntent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = (uint64_t *)&a2[v25];
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[10];
  v31 = &a1[v30];
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v35] = a2[v35];
  v36 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  *(_QWORD *)&a1[v36] = *(_QWORD *)&a2[v36];
  swift_bridgeObjectRelease();
  a1[a3[15]] = a2[a3[15]];
  if (a1 != a2)
  {
    v37 = a3[16];
    v38 = &a1[v37];
    v39 = &a2[v37];
    outlined destroy of ShareTarget((uint64_t)&a1[v37]);
    v40 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      *v38 = *v39;
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v38 + *(int *)(v41 + 48), (char *)v39 + *(int *)(v41 + 48), v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  v42 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  *(_QWORD *)&a1[v42] = *(_QWORD *)&a2[v42];
  swift_release();
  v43 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v43] = a2[v43];
  a1[a3[21]] = a2[a3[21]];
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingDirectInvocationIntent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2203FE9FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = type metadata accessor for ShareTarget();
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[16];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingDirectInvocationIntent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2203FEAC0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[7] + 8) = a2;
      return result;
    }
    v10 = type metadata accessor for ShareTarget();
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[16];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for SharingDirectInvocationIntent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ShareTarget();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?)
  {
    type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  }
}

unint64_t instantiation function for generic protocol witness table for SharingDirectInvocationIntent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent;
  if (!lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent)
  {
    v1 = type metadata accessor for SharingDirectInvocationIntent();
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingDirectInvocationIntent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent);
  }
  return result;
}

uint64_t outlined init with copy of ShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareTarget();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseValue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.promptResponse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.userCancelledResponse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseExecutor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.getActionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.actionForIntent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 80) + *(_QWORD *)(a4 + 80));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.makePrompt()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 88) + *(_QWORD *)(a3 + 88));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.makePrompt()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.makeUserCancelledResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 96) + *(_QWORD *)(a3 + 96));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return v9(a1, a2, a3);
}

uint64_t SharingPromptFlowStrategy.getActionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43[3];
  uint64_t v44;
  uint64_t v45;

  v37 = a2;
  v7 = type metadata accessor for Parse();
  v40 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Input();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v39 = a1;
  v16(v13, a1, v10);
  v38 = v15;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v35 = a3;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v36 = a4;
    v22 = v21;
    v43[0] = v21;
    v34 = v7;
    *(_DWORD *)v20 = 136315138;
    v33 = v20 + 4;
    lazy protocol witness table accessor for type Input and conformance Input();
    v23 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)&v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v43);
    v7 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_2203F9000, v17, v18, "SharingPromptFlowStrategy: actionForInput received input: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v22, -1, -1);
    MEMORY[0x2207E453C](v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  Input.parse.getter();
  v25 = static SharingIntentHelper.makeSharingIntentFrom(parse:)((uint64_t)v9, (uint64_t *)&v41);
  (*(void (**)(char *, uint64_t, double))(v40 + 8))(v9, v7, v25);
  if (v42)
  {
    outlined init with take of SharingIntent(&v41, (uint64_t)v43);
    v26 = v44;
    v27 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    v28 = (char *)&loc_2203FF284
        + 4 * byte_220442F90[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v27 + 184))(v26, v27)];
    __asm { BR              X10 }
  }
  outlined destroy of SharingResponse?((uint64_t)&v41, &demangling cache variable for type metadata for SharingIntent?);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_2203F9000, v29, v30, "SharingPromptFlowStrategy: Unable to create SharingIntent from parse; ignoring input.",
      v31,
      2u);
    MEMORY[0x2207E453C](v31, -1, -1);
  }

  return static ActionForInput.ignore()();
}

uint64_t SharingPromptFlowStrategy.makePrompt()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  return swift_task_switch();
}

uint64_t SharingPromptFlowStrategy.makePrompt()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[14];
  v2 = v0[13];
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  v3 = (_QWORD *)swift_task_alloc();
  v0[16] = v3;
  *v3 = v0;
  v3[1] = SharingPromptFlowStrategy.makePrompt();
  return ResponseExecutor.execute(response:)(v0[12], (uint64_t)(v0 + 7));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1 + 56;
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SharingPromptFlowStrategy.makeUserCancelledResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  return swift_task_switch();
}

uint64_t SharingPromptFlowStrategy.makeUserCancelledResponse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 152) + 48))(*(_QWORD *)(v0 + 144));
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 152);
    v2 = *(_QWORD *)(v0 + 144);
    outlined init with take of SharingIntent((__int128 *)(v0 + 56), v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v3;
    *v3 = v0;
    v3[1] = SharingPromptFlowStrategy.makeUserCancelledResponse();
    return ResponseExecutor.execute(response:)(*(_QWORD *)(v0 + 136), v0 + 16);
  }
  else
  {
    outlined destroy of SharingResponse?(v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for SharingPromptFlowStrategy.makePrompt() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  v8[14] = a3;
  v8[15] = v3;
  v8[12] = a1;
  v8[13] = a2;
  return swift_task_switch();
}

uint64_t protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  v8[19] = a3;
  v8[20] = v3;
  v8[17] = a1;
  v8[18] = a2;
  return swift_task_switch();
}

uint64_t protocol witness for SharingPromptFlowStrategy.makePrompt() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v8[14] = a3;
  v8[15] = v3;
  v8[12] = a1;
  v8[13] = a2;
  return swift_task_switch();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined destroy of SharingResponse?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of SharingIntent(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    v1 = type metadata accessor for Input();
    result = MEMORY[0x2207E4494](MEMORY[0x24BE98DE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

unint64_t TUCallStatus.description.getter(int a1)
{
  unint64_t result;
  Swift::String v3;
  Swift::String v4;

  result = 1701602409;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x657669746361;
      break;
    case 2:
      result = 0x646C6F682D6E6FLL;
      break;
    case 3:
    case 4:
      result = 0xD000000000000010;
      break;
    case 5:
    case 6:
      result = 0x656E6E6F63736964;
      break;
    default:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      result = 0xD000000000000013;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance TUCallStatus()
{
  int *v0;

  return TUCallStatus.description.getter(*v0);
}

uint64_t type metadata completion function for PromptForValueFlowWrapper()
{
  return swift_initClassMetadata2();
}

uint64_t PromptForValueFlowWrapper.exitValue.getter()
{
  return PromptForValueFlowAsync.exitValue.getter();
}

uint64_t PromptForValueFlowWrapper.on(input:)()
{
  return PromptForValueFlowAsync.on(input:)() & 1;
}

uint64_t PromptForValueFlowWrapper.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t PromptForValueFlowWrapper.execute()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = PromptForValueFlowWrapper.execute();
  return PromptForValueFlowAsync.execute()();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t PromptForValueFlowWrapper.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t PromptForValueFlowWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PromptForValueFlowWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromptForValueFlowWrapper);
}

uint64_t protocol witness for Flow.on(input:) in conformance PromptForValueFlowWrapper<A>()
{
  return PromptForValueFlowWrapper.on(input:)() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance PromptForValueFlowWrapper<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for Flow.onAsync(input:) in conformance PromptForValueFlowWrapper<A1>;
  return Flow.onAsync(input:)();
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance PromptForValueFlowWrapper<A1>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t protocol witness for Flow.execute() in conformance PromptForValueFlowWrapper<A>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PromptForValueFlowWrapper<A>()
{
  return PromptForValueFlowWrapper.exitValue.getter();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2207E441C](a1, v6, a5);
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStartSharing(target:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of ShareTargetResolving.resolveShareTargetForStartSharing(target:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStartSharing(target:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v8;

  v8 = *v3;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v8 + 8))(a1, a2, a3 & 0x1FFFF);
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStopSharing(target:call:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of ShareTargetResolving.resolveShareTargetForStopSharing(target:call:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStopSharing(target:call:)(__int16 a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 0x1FF);
}

uint64_t Flow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v20;

  v5 = v4;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5, a3);
  v16 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = 0;
  *((_QWORD *)v17 + 4) = a3;
  *((_QWORD *)v17 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v17[v16], (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  v18 = &v17[(v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in Flow.execute(completion:), (uint64_t)v17);
  return swift_release();
}

uint64_t closure #1 in Flow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v6[2] = a5;
  v6[3] = a6;
  v7 = type metadata accessor for ExecuteResponse();
  v6[4] = v7;
  v6[5] = *(_QWORD *)(v7 - 8);
  v6[6] = swift_task_alloc();
  v8 = (_QWORD *)swift_task_alloc();
  v6[7] = v8;
  *v8 = v6;
  v8[1] = closure #1 in Flow.execute(completion:);
  return dispatch thunk of Flow.execute()();
}

uint64_t closure #1 in Flow.execute(completion:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2204002E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Flow.execute(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(v1[4] - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (uint64_t)v1 + v5;
  v9 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return closure #1 in Flow.execute(completion:)(a1, v6, v7, v8, v10, v11);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_220400660()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t dispatch thunk of Sharing.startSharing(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of Sharing.stopSharing(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefinitiveShareTarget()
{
  return 0xD00000000000001CLL;
}

uint64_t storeEnumTagSinglePayload for DefinitiveShareTarget(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_220400760 + 4 * byte_2204431A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_220400780 + 4 * byte_2204431A5[v4]))();
}

_BYTE *sub_220400760(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_220400780(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_220400788(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_220400790(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_220400798(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2204007A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DefinitiveShareTarget()
{
  return &type metadata for DefinitiveShareTarget;
}

unint64_t lazy protocol witness table accessor for type DefinitiveShareTarget and conformance DefinitiveShareTarget()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefinitiveShareTarget and conformance DefinitiveShareTarget;
  if (!lazy protocol witness table cache variable for type DefinitiveShareTarget and conformance DefinitiveShareTarget)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for DefinitiveShareTarget, &type metadata for DefinitiveShareTarget);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefinitiveShareTarget and conformance DefinitiveShareTarget);
  }
  return result;
}

unint64_t Encodable.asDictionary()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  Class isa;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v11;
  id v12[5];

  v12[4] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v2 = v1;
  swift_release();
  v3 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12[0] = 0;
  v5 = objc_msgSend(v3, sel_JSONObjectWithData_options_error_, isa, 0, v12);

  if (!v5)
  {
    v8 = v12[0];
    v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  v6 = v12[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    outlined consume of Data._Representation(v0, v2);
    return v7;
  }
  outlined consume of Data._Representation(v0, v2);
  return v11;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t ExpanseFlowProvider.init()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;

  v23 = &type metadata for ScreenSharingCallManager;
  v24 = &protocol witness table for ScreenSharingCallManager;
  v2 = (_QWORD *)swift_allocObject();
  *(_QWORD *)&v22 = v2;
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v2[5] = type metadata accessor for TUCallCenter();
  v2[6] = &protocol witness table for TUCallCenter;
  v2[2] = v3;
  v4 = type metadata accessor for DialogExecutor();
  v5 = swift_allocObject();
  v6 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  v7 = ResponseFactory.init()();
  v20 = v6;
  v21 = MEMORY[0x24BE97F18];
  *(_QWORD *)&v19 = v7;
  static Device.current.getter();
  type metadata accessor for CATGlobals();
  v8 = CATGlobals.__allocating_init()();
  v17[3] = v4;
  v17[4] = &protocol witness table for DialogExecutor;
  v17[0] = v5;
  v9 = type metadata accessor for ResponseExecutor();
  v10 = (_QWORD *)swift_allocObject();
  v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v4);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (_QWORD *)((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = *v13;
  v10[5] = v4;
  v10[6] = &protocol witness table for DialogExecutor;
  v10[2] = v15;
  outlined init with take of SharingIntent(&v19, (uint64_t)(v10 + 7));
  outlined init with take of SharingIntent(&v18, (uint64_t)(v10 + 12));
  v10[17] = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  a1[8] = v9;
  a1[9] = &protocol witness table for ResponseExecutor;
  a1[5] = v10;
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  return outlined init with take of SharingIntent(&v22, (uint64_t)a1);
}

uint64_t sub_220400C64()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

unint64_t type metadata accessor for TUCallCenter()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUCallCenter;
  if (!lazy cache variable for type metadata for TUCallCenter)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUCallCenter);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t ExpanseFlowProvider.findFlowFor(parse:)(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v21[0] = v6;
    *(_DWORD *)v5 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v7 = static ExpanseFlowProvider.typeName;
    v8 = unk_2555D1320;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v3, v4, "%s: Making flow from parse", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v6, -1, -1);
    MEMORY[0x2207E453C](v5, -1, -1);

  }
  else
  {

  }
  static SharingIntentHelper.makeSharingIntentFrom(parse:)(a1, (uint64_t *)&v19);
  if (v20)
  {
    outlined init with take of SharingIntent(&v19, (uint64_t)v21);
    v9 = v22;
    v10 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    v11 = (char *)&loc_220400EE0
        + 4 * word_2204432A0[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10)];
    __asm { BR              X10 }
  }
  outlined destroy of SharingResponse?((uint64_t)&v19, &demangling cache variable for type metadata for SharingIntent?);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v21[0] = v15;
    *(_DWORD *)v14 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v16 = static ExpanseFlowProvider.typeName;
    v17 = unk_2555D1320;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v12, v13, "%s: Failed to make a SharingIntent from the parse", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v15, -1, -1);
    MEMORY[0x2207E453C](v14, -1, -1);
  }

  return static FlowSearchResult.noFlow.getter();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4D616956646E6573;
  else
    v3 = 0xD000000000000014;
  if (v2)
    v4 = 0x80000002204478E0;
  else
    v4 = 0xEF73656761737365;
  if ((a2 & 1) != 0)
    v5 = 0x4D616956646E6573;
  else
    v5 = 0xD000000000000014;
  if ((a2 & 1) != 0)
    v6 = 0xEF73656761737365;
  else
    v6 = 0x80000002204478E0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0xD00000000000001FLL;
  if (v2)
    v4 = 0x8000000220447480;
  else
    v4 = 0x80000002204474A0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0xD00000000000001FLL;
  if ((a2 & 1) != 0)
    v6 = 0x80000002204474A0;
  else
    v6 = 0x8000000220447480;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7463656A6572;
  else
    v3 = 0x6D7269666E6F63;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7463656A6572;
  else
    v5 = 0x6D7269666E6F63;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656C646E61686E75;
  else
    v3 = 0x64656C646E6168;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000064;
  if ((a2 & 1) != 0)
    v5 = 0x656C646E61686E75;
  else
    v5 = 0x64656C646E6168;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000064;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X12 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_220401EE4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_220401F54 + 4 * byte_2204432AC[a2]))(0x6F486E4F6C6C6163);
}

uint64_t sub_220401F54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F486E4F6C6C6163 && v1 == 0xEA0000000000646CLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_22040204C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2204020C4 + 4 * byte_2204432B4[a2]))(0x7041686372616553);
}

uint64_t sub_2204020C4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7041686372616553 && v1 == 0xEE0065726F745370)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 28526;
    else
      v3 = 0x6C65636E6163;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 28526;
      else
        v6 = 0x6C65636E6163;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE600000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7562617;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v3 != 7562617)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 1886352499;
    else
      v2 = 1684956531;
    v3 = 0xE400000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 1886352499;
      else
        v5 = 1684956531;
      v6 = 0xE400000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE500000000000000;
    v2 = 0x6572616873;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE500000000000000;
  if (v2 != 0x6572616873)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_QWORD *specialized SharingFlow.init(intent:call:responseExecutor:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t (*a8)(uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];

  v15 = a6(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v42 - v16;
  v51[3] = type metadata accessor for ResponseExecutor();
  v51[4] = &protocol witness table for ResponseExecutor;
  v51[0] = a3;
  a5[2] = 0x46676E6972616853;
  a5[3] = 0xEB00000000776F6CLL;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ResponseExecuting(a1, (uint64_t)a5 + *(_QWORD *)(*a5 + 112));
  outlined init with copy of ResponseExecuting(a2, (uint64_t)a5 + *(_QWORD *)(*a5 + 120));
  outlined init with copy of ResponseExecuting((uint64_t)v51, (uint64_t)a5 + *(_QWORD *)(*a5 + 128));
  outlined init with copy of ResponseExecuting(a4, (uint64_t)a5 + *(_QWORD *)(*a5 + 136));
  if (one-time initialization token for default != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.default);
  swift_retain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v50 = v44;
    *(_DWORD *)v22 = 136315650;
    v43 = v21;
    v45 = a2;
    v46 = a1;
    v23 = a5[2];
    v24 = a5[3];
    swift_bridgeObjectRetain();
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    v25 = (uint64_t)a5 + *(_QWORD *)(*a5 + 104);
    swift_beginAccess();
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v25, (uint64_t)v17, a6);
    v26 = swift_release();
    v27 = a8(v26);
    v29 = v28;
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v17, a6);
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    v30 = (_QWORD *)((char *)a5 + *(_QWORD *)(*a5 + 112));
    swift_beginAccess();
    v31 = v30[3];
    v32 = __swift_project_boxed_opaque_existential_1(v30, v31);
    v42 = a4;
    v33 = *(_QWORD *)(v31 - 8);
    MEMORY[0x24BDAC7A8](v32);
    v35 = (char *)&v42 - v34;
    (*(void (**)(char *))(v33 + 16))((char *)&v42 - v34);
    v36 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v31);
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v19, (os_log_type_t)v43, "%s: Initialized SharingFlow with state %s, intent %s", (uint8_t *)v22, 0x20u);
    v39 = v44;
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v39, -1, -1);
    MEMORY[0x2207E453C](v22, -1, -1);

    __swift_destroy_boxed_opaque_existential_1(v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    __swift_destroy_boxed_opaque_existential_1(v45);
    v40 = v46;
  }
  else
  {
    swift_release_n();

    __swift_destroy_boxed_opaque_existential_1(a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    __swift_destroy_boxed_opaque_existential_1(a2);
    v40 = a1;
  }
  __swift_destroy_boxed_opaque_existential_1(v40);
  return a5;
}

_QWORD *specialized StartSharingFlow.__allocating_init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:sharePlayHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  _BYTE v30[24];
  ValueMetadata *v31;
  _UNKNOWN **v32;
  _BYTE v33[24];
  ValueMetadata *v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;

  v37 = type metadata accessor for ResponseExecutor();
  v38 = &protocol witness table for ResponseExecutor;
  v36[0] = a3;
  v34 = &type metadata for ShareTargetResolver;
  v35 = &protocol witness table for ShareTargetResolver;
  v31 = &type metadata for Sharer;
  v32 = &protocol witness table for Sharer;
  v28 = type metadata accessor for SharePlayHelper();
  v29 = &protocol witness table for SharePlayHelper;
  v27[0] = a5;
  type metadata accessor for StartSharingFlow(0);
  v10 = (_QWORD *)swift_allocObject();
  v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (_QWORD *)((char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v33, (uint64_t)v34);
  MEMORY[0x24BDAC7A8](v15);
  (*(void (**)(char *))(v17 + 16))((char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, (uint64_t)v31);
  MEMORY[0x24BDAC7A8](v18);
  (*(void (**)(char *))(v20 + 16))((char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (_QWORD *)((char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  v25 = specialized StartSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:sharePlayHelper:)(a1, a2, *v13, a4, *v23, v10);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return v25;
}

_QWORD *specialized StopSharingFlow.__allocating_init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE v20[24];
  ValueMetadata *v21;
  _UNKNOWN **v22;
  _BYTE v23[24];
  ValueMetadata *v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;

  v27 = type metadata accessor for ResponseExecutor();
  v28 = &protocol witness table for ResponseExecutor;
  v26[0] = a3;
  v24 = &type metadata for ShareTargetResolver;
  v25 = &protocol witness table for ShareTargetResolver;
  v21 = &type metadata for Sharer;
  v22 = &protocol witness table for Sharer;
  type metadata accessor for StopSharingFlow(0);
  v8 = (_QWORD *)swift_allocObject();
  v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v26, v27);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)&v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, (uint64_t)v24);
  MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(void))(v14 + 16))();
  v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v20, (uint64_t)v21);
  MEMORY[0x24BDAC7A8](v15);
  (*(void (**)(void))(v16 + 16))();
  v17 = specialized StopSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:)(a1, a2, *v11, a4, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return v17;
}

uint64_t lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2207E4494](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for ExpanseFlowProvider(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
}

_OWORD *initializeWithCopy for ExpanseFlowProvider(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

uint64_t *assignWithCopy for ExpanseFlowProvider(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 10, a2 + 10);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ExpanseFlowProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseFlowProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseFlowProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseFlowProvider()
{
  return &type metadata for ExpanseFlowProvider;
}

_QWORD *specialized StartSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:sharePlayHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v12;
  _BYTE v14[40];
  _BYTE v15[40];
  _BYTE v16[40];
  _QWORD v17[5];
  _BYTE v18[24];
  ValueMetadata *v19;
  _UNKNOWN **v20;
  _BYTE v21[24];
  ValueMetadata *v22;
  _UNKNOWN **v23;

  v22 = &type metadata for ShareTargetResolver;
  v23 = &protocol witness table for ShareTargetResolver;
  v19 = &type metadata for Sharer;
  v20 = &protocol witness table for Sharer;
  v17[3] = type metadata accessor for SharePlayHelper();
  v17[4] = &protocol witness table for SharePlayHelper;
  v17[0] = a5;
  outlined init with copy of ResponseExecuting((uint64_t)v21, (uint64_t)a6 + direct field offset for StartSharingFlow.shareTargetResolver);
  outlined init with copy of ResponseExecuting((uint64_t)v18, (uint64_t)a6 + direct field offset for StartSharingFlow.sharer);
  outlined init with copy of ResponseExecuting((uint64_t)v17, (uint64_t)a6 + direct field offset for StartSharingFlow.sharePlayHelper);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v16);
  outlined init with copy of ResponseExecuting(a2, (uint64_t)v15);
  outlined init with copy of ResponseExecuting(a4, (uint64_t)v14);
  swift_retain();
  v12 = specialized SharingFlow.init(intent:call:responseExecutor:outputPublisher:)((uint64_t)v16, (uint64_t)v15, a3, (uint64_t)v14, a6, type metadata accessor for StartSharingFlow.StartSharingFlowState, 9, (uint64_t (*)(uint64_t))StartSharingFlow.StartSharingFlowState.description.getter);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

uint64_t outlined init with copy of ResponseExecuting(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *specialized StopSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v10;
  _BYTE v12[40];
  _BYTE v13[40];
  _BYTE v14[40];
  _BYTE v15[24];
  ValueMetadata *v16;
  _UNKNOWN **v17;
  _BYTE v18[24];
  ValueMetadata *v19;
  _UNKNOWN **v20;

  v19 = &type metadata for ShareTargetResolver;
  v20 = &protocol witness table for ShareTargetResolver;
  v16 = &type metadata for Sharer;
  v17 = &protocol witness table for Sharer;
  outlined init with copy of ResponseExecuting((uint64_t)v18, (uint64_t)a5 + direct field offset for StopSharingFlow.shareTargetResolver);
  outlined init with copy of ResponseExecuting((uint64_t)v15, (uint64_t)a5 + direct field offset for StopSharingFlow.sharer);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v14);
  outlined init with copy of ResponseExecuting(a2, (uint64_t)v13);
  outlined init with copy of ResponseExecuting(a4, (uint64_t)v12);
  swift_retain();
  v10 = specialized SharingFlow.init(intent:call:responseExecutor:outputPublisher:)((uint64_t)v14, (uint64_t)v13, a3, (uint64_t)v12, a5, type metadata accessor for StopSharingFlow.StopSharingFlowState, 5, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

uint64_t outlined init with copy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id SharingDirectInvocation.toSAIntentGroupRunSiriKitExecutor(deviceState:)(_QWORD *a1, char a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Class isa;
  void *v12;
  void *v13;
  id v14;

  v4 = objc_allocWithZone(MEMORY[0x24BE99168]);
  v5 = (void *)MEMORY[0x2207E3D14](0xD000000000000027, 0x8000000220447C70);
  v6 = objc_msgSend(v4, sel_initWithIdentifier_, v5);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_220443310;
  v8 = MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  v9 = 0x7463656A6572;
  if ((a2 & 1) == 0)
    v9 = 0x6D7269666E6F63;
  v10 = 0xE600000000000000;
  *(_QWORD *)(inited + 96) = v8;
  if ((a2 & 1) == 0)
    v10 = 0xE700000000000000;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = v10;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setUserData_, isa);

  v12 = (void *)objc_opt_self();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = (void *)DeviceState.asInvocationContext.getter();
  v14 = objc_msgSend(v12, sel_runSiriKitExecutorCommandWithContext_payload_, v13, v6);

  return v14;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SharingDirectInvocation(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingDirectInvocation()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SharingDirectInvocation()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingDirectInvocation()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SharingDirectInvocation@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SharingDirectInvocation.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SharingDirectInvocation(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6D7269666E6F63;
  if (*v1)
    v2 = 0x7463656A6572;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingDirectInvocation()
{
  unsigned __int8 *v0;
  int v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  v1 = *v0;
  _StringGuts.grow(_:)(26);
  v2._object = (void *)0x8000000220447930;
  v2._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v2);
  if (v1)
    v3 = 0x7463656A6572;
  else
    v3 = 0x6D7269666E6F63;
  if (v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t specialized SharingDirectInvocation.init(from:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  Swift::Int v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  Swift::String v59;
  __int128 v60;
  __int128 v61;

  v2 = type metadata accessor for Parse.DirectInvocation();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v53 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v53 - v10;
  if (one-time initialization token for default != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.default);
  v57 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v57(v11, a1, v2);
  v58 = v13;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v55 = v6;
    v56 = a1;
    v16 = swift_slowAlloc();
    v54 = swift_slowAlloc();
    *(_QWORD *)&v60 = v54;
    *(_DWORD *)v16 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v18 = static SharingDirectInvocation.typeName;
    v17 = *(_QWORD *)algn_2555D1368;
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v57(v9, v11, v2);
    v19 = String.init<A>(describing:)();
    v59._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v3 + 8);
    v21(v11, v2);
    _os_log_impl(&dword_2203F9000, v14, v15, "%s: Initializing SharingDirectInvocation from %s", (uint8_t *)v16, 0x16u);
    v22 = v54;
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v22, -1, -1);
    MEMORY[0x2207E453C](v16, -1, -1);

    v6 = v55;
    a1 = v56;
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t))(v3 + 8);
    v21(v11, v2);

  }
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000027 && v23 == 0x8000000220447C70)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    v25 = Parse.DirectInvocation.userData.getter();
    if (v25)
    {
      v26 = v25;
      if (*(_QWORD *)(v25 + 16)
        && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x8000000220443310),
            (v28 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v60);
      }
      else
      {
        v60 = 0u;
        v61 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v61 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v29 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SharingDirectInvocation.init(rawValue:), v59);
          swift_bridgeObjectRelease();
          if (v29 == 1)
          {
            v21(a1, v2);
            return 1;
          }
          if (!v29)
          {
            v21(a1, v2);
            return 0;
          }
          goto LABEL_37;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v60);
      }
      v31 = Logger.logObject.getter();
      v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v47))
      {
        v48 = swift_slowAlloc();
        v49 = swift_slowAlloc();
        *(_QWORD *)&v60 = v49;
        *(_DWORD *)v48 = 136315394;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v50 = static SharingDirectInvocation.typeName;
        v51 = *(_QWORD *)algn_2555D1368;
        swift_bridgeObjectRetain();
        v59._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2080;
        v59._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x8000000220443310, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2203F9000, v31, v47, "%s: Cannot init SharingDirectInvocation from direct invocation without userData containing key '%s' with a String value", (uint8_t *)v48, 0x16u);
        v30 = 2;
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v49, -1, -1);
        MEMORY[0x2207E453C](v48, -1, -1);

        v21(a1, v2);
        return v30;
      }
    }
    else
    {
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        v34 = swift_slowAlloc();
        *(_QWORD *)&v60 = v34;
        *(_DWORD *)v33 = 136315138;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v35 = static SharingDirectInvocation.typeName;
        v36 = *(_QWORD *)algn_2555D1368;
        swift_bridgeObjectRetain();
        v59._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2203F9000, v31, v32, "%s: Cannot init SharingDirectInvocation from direct invocation with nil userData", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v34, -1, -1);
        MEMORY[0x2207E453C](v33, -1, -1);

        v37 = a1;
        goto LABEL_38;
      }
    }

LABEL_37:
    v37 = a1;
LABEL_38:
    v21(v37, v2);
    return 2;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    goto LABEL_12;
  v57(v6, a1, v2);
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v38, v39))
  {

    v21(v6, v2);
    goto LABEL_37;
  }
  v40 = v6;
  v56 = a1;
  v41 = swift_slowAlloc();
  v42 = swift_slowAlloc();
  *(_QWORD *)&v60 = v42;
  *(_DWORD *)v41 = 136315394;
  if (one-time initialization token for typeName != -1)
    swift_once();
  v43 = static SharingDirectInvocation.typeName;
  v44 = *(_QWORD *)algn_2555D1368;
  swift_bridgeObjectRetain();
  v59._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v60);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v41 + 12) = 2080;
  v45 = Parse.DirectInvocation.identifier.getter();
  v59._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v60);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v21(v40, v2);
  _os_log_impl(&dword_2203F9000, v38, v39, "%s: Cannot init SharingDirectInvocation from direct invocation with identifier: %s", (uint8_t *)v41, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x2207E453C](v42, -1, -1);
  MEMORY[0x2207E453C](v41, -1, -1);

  v21(v56, v2);
  return 2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingDirectInvocation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingDirectInvocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2204049AC + 4 * byte_220443325[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2204049E0 + 4 * byte_220443320[v4]))();
}

uint64_t sub_2204049E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204049E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2204049F0);
  return result;
}

uint64_t sub_2204049FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x220404A04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_220404A08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220404A10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for SharingDirectInvocation(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SharingDirectInvocation()
{
  return &type metadata for SharingDirectInvocation;
}

unint64_t lazy protocol witness table accessor for type SharingDirectInvocation and conformance SharingDirectInvocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingDirectInvocation and conformance SharingDirectInvocation;
  if (!lazy protocol witness table cache variable for type SharingDirectInvocation and conformance SharingDirectInvocation)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingDirectInvocation, &type metadata for SharingDirectInvocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDirectInvocation and conformance SharingDirectInvocation);
  }
  return result;
}

uint64_t protocol witness for Contact.handles.getter in conformance <> Match<A, B>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Match.value.getter();
  v5 = Contact.handles.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t dispatch thunk of Contact.handles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SharingIntent.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SharingIntent.type.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SharingIntent.containsSharingReference.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of SharingIntent.appName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of SharingIntent.appName.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of SharingIntent.appName.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of SharingIntent.typeMatchingSpan.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of SharingIntent.typeMatchingSpan.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of SharingIntent.typeMatchingSpan.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of SharingIntent.appIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of SharingIntent.appIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of SharingIntent.appIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of SharingIntent.associatedAppIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of SharingIntent.refersToScreen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of SharingIntent.refersToEverything.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of SharingIntent.refersToDisplayedContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of SharingIntent.recipients.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of SharingIntent.confirmationValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of SharingIntent.shareTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of SharingIntent.isSharePlayRequest.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of SharingIntent.usoEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of SharingIntent.isExplicitShareViaMessagesIntent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of SharingIntent.isExplicitShareInCallIntent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of SharingIntent.reform()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of SharingIntent.isReformed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of SharingIntent.isReformed.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 248))();
}

uint64_t dispatch thunk of SharingIntent.isReformed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 256))();
}

uint64_t dispatch thunk of SharingIntent.merge(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 264))();
}

uint64_t specialized SharingIntent.reform()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t PartyAppBundle;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD v48[2];
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v1 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v56 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  v4 = MEMORY[0x24BDAC7A8](v55);
  v6 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v48 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v48 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v48 - v13;
  v15 = type metadata accessor for SharingDirectInvocationIntent();
  v16 = v0;
  v17 = v0 + *(int *)(v15 + 20);
  outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v17, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v14, 1, v1))
  {
    outlined destroy of SharingResponse?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    return 0;
  }
  else
  {
    v53 = v17;
    v54 = (int *)v15;
    v49 = v6;
    v50 = v9;
    v52 = v12;
    v19 = v56;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v56, v14, v1);
    outlined destroy of SharingResponse?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    PartyAppBundle = UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v19, v1);
    if (v22)
    {
      v51 = v2;
      v56 = (char *)v1;
      v23 = v54;
      v24 = (unint64_t *)(v16 + v54[9]);
      *v24 = PartyAppBundle;
      v24[1] = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25 = String.localizedAppDisplayName.getter();
      v27 = v26;
      swift_bridgeObjectRelease();
      if (v27)
      {
        v28 = (uint64_t *)(v16 + v23[7]);
        swift_bridgeObjectRelease();
        *v28 = v25;
        v28[1] = v27;
        v29 = (uint64_t)v52;
        v30 = v53;
        v31 = v23;
      }
      else
      {
        v32 = (uint64_t *)(v16 + v23[8]);
        v33 = v32[1];
        v29 = (uint64_t)v52;
        if (v33)
        {
          v31 = v23;
          v34 = *v32;
          v35 = (_QWORD *)(v16 + v23[7]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *v35 = v34;
          v35[1] = v33;
          v30 = v53;
        }
        else
        {
          v30 = v53;
          v36 = (uint64_t)v50;
          outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v53, (uint64_t)v50);
          if (one-time initialization token for default != -1)
            swift_once();
          v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.default);
          v38 = (uint64_t)v49;
          outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v36, (uint64_t)v49);
          v39 = Logger.logObject.getter();
          v40 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v39, v40))
          {
            v41 = (uint8_t *)swift_slowAlloc();
            v58 = swift_slowAlloc();
            v42 = v58;
            *(_DWORD *)v41 = 136315138;
            v48[1] = v41 + 4;
            outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v38, v29);
            v43 = String.init<A>(describing:)();
            v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v58);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of SharingResponse?(v38, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
            _os_log_impl(&dword_2203F9000, v39, v40, "SharingIntent: unable to determine appName for entity type=%s", v41, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2207E453C](v42, -1, -1);
            MEMORY[0x2207E453C](v41, -1, -1);

            v45 = (uint64_t)v50;
            v30 = v53;
          }
          else
          {

            outlined destroy of SharingResponse?(v38, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
            v45 = v36;
          }
          outlined destroy of SharingResponse?(v45, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
          v31 = v54;
        }
      }
      v18 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v51 + 56))(v29, 1, 1, v56);
      outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(v29, v30);
      v46 = (_QWORD *)(v16 + v31[8]);
      swift_bridgeObjectRelease();
      *v46 = 0;
      v46[1] = 0;
      *(_BYTE *)(v16 + v31[6]) = 0;
      *(_BYTE *)(v16 + v31[21]) = 1;
    }
    else
    {
      return 0;
    }
  }
  return v18;
}

Swift::Bool __swiftcall SharingIntent.reform()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint8_t *v19;
  Swift::Bool v20;
  char *v21;
  uint64_t v22;
  unint64_t PartyAppBundle;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint8_t *v46;
  char *v47;
  uint64_t v48;
  uint8_t *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;

  v3 = v1;
  v4 = v0;
  v5 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  v8 = MEMORY[0x24BDAC7A8](v54);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v49 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v49 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v49 - v17;
  v19 = *(uint8_t **)(v3 + 24);
  v55 = v4;
  ((void (*)(uint64_t, uint64_t))v19)(v4, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5))
  {
    outlined destroy of SharingResponse?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    return 0;
  }
  v49 = v19;
  v50 = v13;
  v51 = v16;
  v52 = v10;
  v53 = v2;
  v22 = v55;
  v21 = v56;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v56, v18, v5);
  outlined destroy of SharingResponse?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  PartyAppBundle = UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v5);
  if (!v25)
    return 0;
  v26 = v5;
  v27 = v6;
  v28 = v3;
  v29 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v3 + 128);
  swift_bridgeObjectRetain();
  v30 = v22;
  v29(PartyAppBundle, v25, v22, v3);
  v31 = String.localizedAppDisplayName.getter();
  v33 = v32;
  swift_bridgeObjectRelease();
  if (v33)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 80))(v31, v33, v22, v3);
  }
  else
  {
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96))(v22, v3);
    if (v35)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 80))(v34, v35, v22, v3);
    }
    else
    {
      v38 = (uint64_t)v51;
      ((void (*)(uint64_t, uint64_t))v49)(v22, v3);
      if (one-time initialization token for default != -1)
        swift_once();
      v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.default);
      v40 = (uint64_t)v50;
      outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v38, (uint64_t)v50);
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        v56 = (char *)swift_slowAlloc();
        v58 = v56;
        v49 = v43;
        *(_DWORD *)v43 = 136315138;
        outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v40, (uint64_t)v52);
        v44 = String.init<A>(describing:)();
        v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of SharingResponse?(v40, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
        v46 = v49;
        _os_log_impl(&dword_2203F9000, v41, v42, "SharingIntent: unable to determine appName for entity type=%s", v49, 0xCu);
        v47 = v56;
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v47, -1, -1);
        MEMORY[0x2207E453C](v46, -1, -1);

        v48 = (uint64_t)v51;
      }
      else
      {

        outlined destroy of SharingResponse?(v40, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
        v48 = v38;
      }
      outlined destroy of SharingResponse?(v48, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    }
  }
  v20 = 1;
  v36 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v52, 1, 1, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v36, v30, v28);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v28 + 104))(0, 0, v30, v28);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v28 + 56))(0, v30, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 248))(1, v30, v28);
  return v20;
}

double static SharingIntentHelper.makeSharingIntentFrom(parse:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  int v33;
  Class v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(os_log_t, NSObject *, NSObject *);
  os_log_t v38;
  NSObject *v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  os_log_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(os_log_t, NSObject *);
  os_log_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  os_log_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  os_log_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  os_log_t v85;
  int v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  os_log_t v97;
  uint64_t v98;
  void (*v99)(os_log_t, NSObject *, NSObject *);
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  os_log_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  NSObject *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void (*v115)(char *, uint64_t);
  os_log_t v116;
  os_log_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *boxed_opaque_existential_1;
  double result;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  os_log_t v141;
  uint64_t v142;
  void (*v143)(os_log_t, NSObject *, NSObject *);
  char *v144;
  os_log_t v145;
  char *v146;
  os_log_t v147;
  uint64_t *v148;
  os_log_t v149;
  unint64_t v150;
  uint64_t v151;

  v148 = a2;
  v3 = type metadata accessor for Parse.DirectInvocation();
  isa = v3[-1].isa;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v146 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v147 = (os_log_t)((char *)&v134 - v8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = ((char *)&v134 - v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x24BDAC7A8](v11);
  v140 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserParse();
  v142 = *(_QWORD *)(v13 - 8);
  v143 = (void (*)(os_log_t, NSObject *, NSObject *))v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v141 = (os_log_t)((char *)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v144 = (char *)&v134 - v16;
  v137 = type metadata accessor for USOParse();
  v139 = *(_QWORD *)(v137 - 8);
  v17 = MEMORY[0x24BDAC7A8](v137);
  v135 = (char *)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v138 = (char *)&v134 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v136 = (char *)&v134 - v21;
  v22 = type metadata accessor for Parse();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v134 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v134 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (uint64_t *)((char *)&v134 - v29);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v32 = a1;
  v31((char *)&v134 - v29, a1, v22);
  v33 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 88))(v30, v22);
  if (v33 == *MEMORY[0x24BE98E88])
  {
    (*(void (**)(uint64_t *, uint64_t))(v23 + 96))(v30, v22);
    (*((void (**)(NSObject *, uint64_t *, NSObject *))isa + 4))(v10, v30, v3);
    v34 = isa;
    if (one-time initialization token for default != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.default);
    v37 = (void (*)(os_log_t, NSObject *, NSObject *))*((_QWORD *)isa + 2);
    v38 = v147;
    v37(v147, v10, v3);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    v41 = os_log_type_enabled(v39, (os_log_type_t)v40);
    v145 = v10;
    if (v41)
    {
      LODWORD(v142) = v40;
      v143 = v37;
      v144 = (char *)v36;
      v42 = swift_slowAlloc();
      v141 = (os_log_t)swift_slowAlloc();
      v149 = v141;
      *(_DWORD *)v42 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v43 = static SharingIntentHelper.typeName;
      v44 = *(_QWORD *)algn_2555D1398;
      swift_bridgeObjectRetain();
      v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      v45 = v146;
      v46 = v147;
      v37 = v143;
      v143((os_log_t)v146, v147, v3);
      v47 = String.init<A>(describing:)();
      v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v49 = (void (*)(os_log_t, NSObject *))*((_QWORD *)v34 + 1);
      v49(v46, v3);
      _os_log_impl(&dword_2203F9000, v39, (os_log_type_t)v142, "%s: Received .directInvocation parse with directInvocation: %s", (uint8_t *)v42, 0x16u);
      v50 = v141;
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v50, -1, -1);
      v51 = v42;
      v52 = v45;
      MEMORY[0x2207E453C](v51, -1, -1);

      v10 = v145;
    }
    else
    {
      v49 = (void (*)(os_log_t, NSObject *))*((_QWORD *)v34 + 1);
      v49(v38, v3);

      v52 = v146;
    }
    v37((os_log_t)v52, v10, v3);
    v63 = specialized SharingDirectInvocation.init(from:)(v52);
    if (v63 == 2)
    {
      v64 = Logger.logObject.getter();
      v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc();
        v67 = (os_log_t)swift_slowAlloc();
        v149 = v67;
        *(_DWORD *)v66 = 136315138;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v68 = static SharingIntentHelper.typeName;
        v69 = *(_QWORD *)algn_2555D1398;
        swift_bridgeObjectRetain();
        v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2203F9000, v64, v65, "%s: Failed to construct SharingDirectInvocation from the provided directInvocation", v66, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v67, -1, -1);
        MEMORY[0x2207E453C](v66, -1, -1);
      }

      v49(v145, v3);
      goto LABEL_64;
    }
    v86 = v63 & 1;
    v87 = Logger.logObject.getter();
    v88 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v147 = v3;
      v89 = swift_slowAlloc();
      v90 = swift_slowAlloc();
      v151 = v90;
      *(_DWORD *)v89 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v91 = static SharingIntentHelper.typeName;
      v92 = *(_QWORD *)algn_2555D1398;
      swift_bridgeObjectRetain();
      v149 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v89 + 12) = 2080;
      v149 = 0;
      v150 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v149 = (os_log_t)0xD000000000000018;
      v150 = 0x8000000220447930;
      if (v86)
        v93 = 0x7463656A6572;
      else
        v93 = 0x6D7269666E6F63;
      if (v86)
        v94 = 0xE600000000000000;
      else
        v94 = 0xE700000000000000;
      v95 = v94;
      String.append(_:)(*(Swift::String *)&v93);
      swift_bridgeObjectRelease();
      v149 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v149, v150, &v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v87, v88, "%s: SharingDirectInvocation initialized to %s", (uint8_t *)v89, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v90, -1, -1);
      MEMORY[0x2207E453C](v89, -1, -1);

      v3 = v147;
    }
    else
    {

    }
    v118 = type metadata accessor for SharingDirectInvocationIntent();
    v119 = v148;
    v148[3] = v118;
    v119[4] = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent, (uint64_t (*)(uint64_t))type metadata accessor for SharingDirectInvocationIntent, (uint64_t)&protocol conformance descriptor for SharingDirectInvocationIntent);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v119);
    SharingDirectInvocationIntent.init(from:)(v86, boxed_opaque_existential_1);
    v49(v145, v3);
  }
  else
  {
    if (v33 == *MEMORY[0x24BE98E10])
    {
      (*(void (**)(uint64_t *, uint64_t))(v23 + 96))(v30, v22);
      v53 = *v30;
      if (one-time initialization token for default != -1)
        swift_once();
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.default);
      swift_unknownObjectRetain_n();
      v55 = Logger.logObject.getter();
      v56 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = swift_slowAlloc();
        v58 = (os_log_t)swift_slowAlloc();
        v149 = v58;
        *(_DWORD *)v57 = 136315394;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v59 = static SharingIntentHelper.typeName;
        v60 = *(_QWORD *)algn_2555D1398;
        swift_bridgeObjectRetain();
        v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 12) = 2080;
        v151 = v53;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
        v61 = String.init<A>(describing:)();
        v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2203F9000, v55, v56, "%s: Received .NLv4IntentOnly parse with userDialogAct: %s", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v58, -1, -1);
        MEMORY[0x2207E453C](v57, -1, -1);

      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      v97 = v141;
      v96 = v142;
      v98 = (uint64_t)v140;
      static ConversionUtils.toUserParse(from:)();
      v99 = v143;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v96 + 48))(v98, 1, v143) == 1)
      {
        outlined destroy of SharingResponse?(v98, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
        v100 = Logger.logObject.getter();
        v101 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v100, v101))
        {
          v102 = (uint8_t *)swift_slowAlloc();
          v103 = (os_log_t)swift_slowAlloc();
          v149 = v103;
          *(_DWORD *)v102 = 136315138;
          if (one-time initialization token for typeName != -1)
            swift_once();
          v104 = static SharingIntentHelper.typeName;
          v105 = *(_QWORD *)algn_2555D1398;
          swift_bridgeObjectRetain();
          v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, (uint64_t *)&v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2203F9000, v100, v101, "%s: Failed to convert UserDialogAct to Siri_Nlu_External_UserParse", v102, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x2207E453C](v103, -1, -1);
          MEMORY[0x2207E453C](v102, -1, -1);
          swift_unknownObjectRelease();

          goto LABEL_64;
        }

      }
      else
      {
        (*(void (**)(os_log_t, uint64_t, _QWORD))(v96 + 32))(v97, v98, v99);
        v122 = (uint64_t)v144;
        (*(void (**)(char *, os_log_t, _QWORD))(v96 + 16))(v144, v97, v99);
        v123 = type metadata accessor for SharingNLv4Intent();
        swift_allocObject();
        v124 = SharingNLv4Intent.init(from:)(v122);
        if (v124)
        {
          v125 = v124;
          v126 = v148;
          v148[3] = v123;
          v126[4] = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent, (uint64_t (*)(uint64_t))type metadata accessor for SharingNLv4Intent, (uint64_t)&protocol conformance descriptor for SharingNLv4Intent);
          swift_unknownObjectRelease();
          *v126 = v125;
          (*(void (**)(os_log_t, void (*)(os_log_t, NSObject *, NSObject *)))(v96 + 8))(v97, v99);
          return result;
        }
        (*(void (**)(os_log_t, void (*)(os_log_t, NSObject *, NSObject *)))(v96 + 8))(v97, v99);
      }
      swift_unknownObjectRelease();
LABEL_64:
      v133 = v148;
      v148[4] = 0;
      result = 0.0;
      *(_OWORD *)v133 = 0u;
      *((_OWORD *)v133 + 1) = 0u;
      return result;
    }
    if (v33 == *MEMORY[0x24BE98E98])
    {
      (*(void (**)(uint64_t *, uint64_t))(v23 + 96))(v30, v22);
      v70 = v139;
      v72 = v136;
      v71 = v137;
      (*(void (**)(char *, uint64_t *, uint64_t))(v139 + 32))(v136, v30, v137);
      if (one-time initialization token for default != -1)
        swift_once();
      v73 = type metadata accessor for Logger();
      __swift_project_value_buffer(v73, (uint64_t)static Logger.default);
      v74 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      v75 = v138;
      v74(v138, v72, v71);
      v76 = Logger.logObject.getter();
      v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = swift_slowAlloc();
        v147 = (os_log_t)swift_slowAlloc();
        v149 = v147;
        *(_DWORD *)v78 = 136315394;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v79 = static SharingIntentHelper.typeName;
        v80 = *(_QWORD *)algn_2555D1398;
        swift_bridgeObjectRetain();
        v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v78 + 12) = 2080;
        v81 = v138;
        v74(v135, v138, v71);
        v82 = String.init<A>(describing:)();
        v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v84 = *(void (**)(char *, uint64_t))(v139 + 8);
        v84(v81, v71);
        _os_log_impl(&dword_2203F9000, v76, v77, "%s: Received .uso parse with usoParse: %s", (uint8_t *)v78, 0x16u);
        v85 = v147;
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v85, -1, -1);
        MEMORY[0x2207E453C](v78, -1, -1);
      }
      else
      {
        v84 = *(void (**)(char *, uint64_t))(v70 + 8);
        v84(v75, v71);
      }

      v127 = (uint64_t)v144;
      USOParse.userParse.getter();
      v128 = type metadata accessor for SharingNLv4Intent();
      swift_allocObject();
      v129 = SharingNLv4Intent.init(from:)(v127);
      if (v129)
      {
        v130 = v129;
        v131 = v148;
        v148[3] = v128;
        v131[4] = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent, (uint64_t (*)(uint64_t))type metadata accessor for SharingNLv4Intent, (uint64_t)&protocol conformance descriptor for SharingNLv4Intent);
        *v131 = v130;
        v84(v72, v71);
        return result;
      }
      v84(v72, v71);
      goto LABEL_64;
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v106 = type metadata accessor for Logger();
    __swift_project_value_buffer(v106, (uint64_t)static Logger.default);
    v107 = v28;
    v31(v28, v32, v22);
    v108 = Logger.logObject.getter();
    v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, (os_log_type_t)v109))
    {
      LODWORD(v146) = v109;
      v147 = v108;
      v110 = swift_slowAlloc();
      v145 = (os_log_t)swift_slowAlloc();
      v149 = v145;
      *(_DWORD *)v110 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v111 = static SharingIntentHelper.typeName;
      v112 = *(_QWORD *)algn_2555D1398;
      swift_bridgeObjectRetain();
      v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v110 + 12) = 2080;
      v31(v134, (uint64_t)v107, v22);
      v113 = String.init<A>(describing:)();
      v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v115 = *(void (**)(char *, uint64_t))(v23 + 8);
      v115(v107, v22);
      v116 = v147;
      _os_log_impl(&dword_2203F9000, v147, (os_log_type_t)v146, "%s: Received parse of unexpected type: %s", (uint8_t *)v110, 0x16u);
      v117 = v145;
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v117, -1, -1);
      MEMORY[0x2207E453C](v110, -1, -1);

    }
    else
    {
      v115 = *(void (**)(char *, uint64_t))(v23 + 8);
      v115(v107, v22);

    }
    v132 = v148;
    v148[4] = 0;
    *(_OWORD *)v132 = 0u;
    *((_OWORD *)v132 + 1) = 0u;
    v115((char *)v30, v22);
  }
  return result;
}

uint64_t SharingIntent.shareTarget.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  os_log_type_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  id v41;
  _BYTE *v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  os_log_type_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  char v61;
  void (*v62)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  char v66;
  char v67;
  uint64_t *v68;
  void (*v69)(_BYTE *, uint64_t);
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  void (**v75)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  int v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  _BYTE v83[4];
  int v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  void (*v88)(uint64_t, uint64_t);
  void (**v89)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[2];

  v91 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  MEMORY[0x24BDAC7A8](v6);
  v87 = &v83[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (void (*)(uint64_t, uint64_t))&v83[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (void (**)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t))&v83[-v14];
  v92 = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = &v83[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = &v83[-v20];
  MEMORY[0x24BDAC7A8](v19);
  v86 = &v83[-v22];
  v23 = type metadata accessor for Logger();
  v89 = *(void (***)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t))(v23 - 8);
  v90 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v88 = (void (*)(uint64_t, uint64_t))&v83[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(a1, a2);
  if (v26)
  {
    v27 = v26;
    v87 = v3;
    v28 = v25;
    v29 = objc_allocWithZone(MEMORY[0x24BDC1540]);
    swift_bridgeObjectRetain();
    v85 = v28;
    v41 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v28, v27, 0);

    v42 = v87;
    v43 = v88;
    v44 = v92;
    if (v41)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2) & 1) != 0)
      {
        v45 = v91;
        *v91 = v85;
        v45[1] = v27;
        type metadata accessor for ShareTarget();
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 240))(a1, a2) & 1) != 0)
          v67 = 0;
        else
          v67 = 2;
        v68 = v91;
        *v91 = v85;
        v68[1] = v27;
        *((_BYTE *)v68 + 16) = v67;
        type metadata accessor for ShareTarget();
      }
    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v30 = v90;
      v31 = __swift_project_value_buffer(v90, (uint64_t)static Logger.default);
      v89[2](v43, v31, v30);
      v32 = *(void (**)(uint64_t, uint64_t))(a2 + 72);
      v32(a1, a2);
      v34 = v33;
      swift_bridgeObjectRelease();
      v35 = v86;
      if (v34)
        v36 = static os_log_type_t.debug.getter();
      else
        v36 = static os_log_type_t.error.getter();
      v46 = v36;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v35, v42, a1);
      swift_bridgeObjectRetain();
      v47 = Logger.logObject.getter();
      if (os_log_type_enabled(v47, v46))
      {
        v48 = swift_slowAlloc();
        v88 = v32;
        v49 = v48;
        v50 = swift_slowAlloc();
        v94[0] = v50;
        *(_DWORD *)v49 = 136315394;
        v84 = v46;
        swift_bridgeObjectRetain();
        v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v27, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v49 + 12) = 2080;
        v51 = ((uint64_t (*)(uint64_t, uint64_t))v88)(a1, a2);
        if (v52)
        {
          v53 = v52;
        }
        else
        {
          v51 = 7104878;
          v53 = 0xE300000000000000;
        }
        v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v35, a1);
        _os_log_impl(&dword_2203F9000, v47, (os_log_type_t)v84, "SharingIntent: share target for appIdentifier=%s appName=%s not installed", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v50, -1, -1);
        v54 = v49;
        v32 = v88;
        MEMORY[0x2207E453C](v54, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n();
        (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v35, a1);

      }
      ((void (*)(_BYTE *, uint64_t))v89[1])(v43, v90);
      v55 = ((uint64_t (*)(uint64_t, uint64_t))v32)(a1, a2);
      if (v56)
        v57 = v55;
      else
        v57 = 0;
      v58 = 0xE000000000000000;
      if (v56)
        v58 = v56;
      v59 = v91;
      *v91 = v57;
      v59[1] = v58;
      type metadata accessor for ShareTarget();
    }
    return swift_storeEnumTagMultiPayload();
  }
  v37 = v18;
  v88 = v12;
  v89 = v15;
  v90 = v9;
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  if (v39)
  {
    v40 = v91;
    *v91 = v38;
    v40[1] = v39;
    type metadata accessor for ShareTarget();
    return swift_storeEnumTagMultiPayload();
  }
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 152))(a1, a2);
  v62 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16);
  v63 = v21;
  v64 = v21;
  v65 = v3;
  v62(v64, v3, a1);
  if ((v61 & 1) != 0)
    v66 = 1;
  else
    v66 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(a1, a2);
  v69 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
  v69(v63, a1);
  v62(v37, v65, a1);
  if ((v66 & 1) != 0)
  {
    v69(v37, a1);
LABEL_36:
    type metadata accessor for ShareTarget();
    return swift_storeEnumTagMultiPayload();
  }
  v70 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a1, a2);
  v69(v37, a1);
  if ((v70 & 1) != 0 || ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2) & 1) == 0)
    goto LABEL_36;
  v71 = (uint64_t)v87;
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v72 = v90;
  v73 = v8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v71, 1, v8) == 1)
  {
    outlined destroy of SharingResponse?(v71, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
LABEL_47:
    type metadata accessor for ShareTarget();
    v82 = v91;
    *v91 = 0;
    v82[1] = 0;
    return swift_storeEnumTagMultiPayload();
  }
  v74 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v72 + 32);
  v75 = v89;
  v74(v89, v71, v8);
  v76 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 208))(a1, a2);
  if (!v76)
  {
    (*(void (**)(void (**)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t), uint64_t))(v72 + 8))(v75, v8);
    goto LABEL_47;
  }
  v77 = v76;
  v78 = v88;
  (*(void (**)(void (*)(uint64_t, uint64_t), _BYTE *, uint64_t))(v72 + 16))(v88, v75, v73);
  v79 = (*(uint64_t (**)(_BYTE *, uint64_t))(v72 + 88))(v78, v73);
  if (v79 == *MEMORY[0x24BEA1AE0] || v79 == *MEMORY[0x24BEA1A88])
  {
    (*(void (**)(void (**)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t), uint64_t))(v72 + 8))(v75, v73);
    swift_release();
    goto LABEL_47;
  }
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
  v81 = (char *)v91 + *(int *)(v80 + 48);
  *v91 = v77;
  v74(v81, (uint64_t)v75, v73);
  type metadata accessor for ShareTarget();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v72 + 8))(v78, v73);
}

void SharingIntent.isExplicitShareViaMessagesIntent.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v7[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v7[1] = (char *)v7 - v3;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)sub_220406F5C + 4 * byte_220443480[(*(unsigned __int8 (**)(uint64_t))(v5 + 16))(v4)];
  __asm { BR              X10 }
}

uint64_t sub_220406F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v1, v0);
  if ((v6 & 1) == 0)
  {
    v7 = (char *)&loc_220407028 + 4 * byte_220443484[v3(v0, v4)];
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v0);
  return 1;
}

void SharingIntent.isExplicitShareInCallIntent.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v7[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v7[1] = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)sub_2204072CC + 4 * byte_220443488[(*(unsigned __int8 (**)(uint64_t))(v5 + 16))(v4)];
  __asm { BR              X10 }
}

uint64_t sub_2204072CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  return 1;
}

unint64_t UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v9;

  v1 = v0;
  v2 = 0xD000000000000013;
  v3 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == *MEMORY[0x24BEA1AF0])
    return 0xD00000000000001BLL;
  if (v7 != *MEMORY[0x24BEA1B20])
  {
    if (v7 == *MEMORY[0x24BEA1A90])
    {
      return 0xD000000000000010;
    }
    else if (v7 == *MEMORY[0x24BEA1A98])
    {
      return 0xD000000000000015;
    }
    else if (v7 != *MEMORY[0x24BEA1B00])
    {
      if (v7 == *MEMORY[0x24BEA1AC8])
      {
        return 0xD000000000000019;
      }
      else if (v7 == *MEMORY[0x24BEA1B08])
      {
        return 0xD000000000000012;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        return 0;
      }
    }
  }
  return v2;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x2207E3D14]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

ValueMetadata *type metadata accessor for SharingIntentHelper()
{
  return &type metadata for SharingIntentHelper;
}

unint64_t ResolvedRecipients.description.getter(uint64_t a1)
{
  unint64_t v1;
  Swift::String v3;
  Swift::String v4;

  v1 = 0xD000000000000020;
  if (a1 != 1)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = PermittedRecipients.description.getter(a1);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return 0xD000000000000027;
  }
  return v1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvedRecipients()
{
  uint64_t *v0;

  return ResolvedRecipients.description.getter(*v0);
}

uint64_t ScreenShareType.description.getter()
{
  Swift::String v0;
  uint64_t v2;

  if (one-time initialization token for typeName != -1)
    swift_once();
  v2 = static ScreenShareType.typeName;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6E65657263732ELL;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  return v2;
}

void ScreenShareType.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t static ScreenShareType.== infix(_:_:)()
{
  return 1;
}

Swift::Int ScreenShareType.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ScreenShareType and conformance ScreenShareType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScreenShareType and conformance ScreenShareType;
  if (!lazy protocol witness table cache variable for type ScreenShareType and conformance ScreenShareType)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ScreenShareType, &type metadata for ScreenShareType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenShareType and conformance ScreenShareType);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScreenShareType()
{
  Swift::String v0;
  uint64_t v2;

  if (one-time initialization token for typeName != -1)
    swift_once();
  v2 = static ScreenShareType.typeName;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6E65657263732ELL;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  return v2;
}

uint64_t storeEnumTagSinglePayload for ScreenShareType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_220407B3C + 4 * asc_2204434E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_220407B5C + 4 * byte_2204434E5[v4]))();
}

_BYTE *sub_220407B3C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_220407B5C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_220407B64(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_220407B6C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_220407B74(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_220407B7C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ScreenShareType()
{
  return &type metadata for ScreenShareType;
}

uint64_t type metadata completion function for SharingFlow()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t SharingFlow.on(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = v0;
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v3, v4, "%s: on(input:) called. This should never happen.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v6, -1, -1);
    MEMORY[0x2207E453C](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  return 0;
}

uint64_t SharingFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t SharingFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 32);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_2203F9000, v2, v3, "%s: execute() called. This should never happen.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v7, -1, -1);
    MEMORY[0x2207E453C](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  static ExecuteResponse.complete()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *SharingFlow.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  return v0;
}

uint64_t SharingFlow.__deallocating_deinit()
{
  SharingFlow.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SharingFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharingFlow);
}

uint64_t associated type witness table accessor for PromptManaging.StateType : PromptFlowState in SharingFlow<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8);
}

uint64_t instantiation function for generic protocol witness table for SharingFlow<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingFlow<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for Flow.on(input:) in conformance SharingFlow<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance SharingFlow<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v1 + 216) + *(_QWORD *)(**(_QWORD **)v1 + 216));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SharingFlow<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t SharingFlowError.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22040817C
                                                            + 4 * asc_2204435B0[a1]))(0x6F486E4F6C6C6163, 0xEA0000000000646CLL);
}

unint64_t sub_22040817C()
{
  return 0xD000000000000010;
}

uint64_t sub_220408198()
{
  return 0x6C61436E49746F6ELL;
}

unint64_t sub_2204081B4()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingFlowError()
{
  unsigned __int8 *v0;

  return SharingFlowError.description.getter(*v0);
}

uint64_t getEnumTagSinglePayload for SharingFlowError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingFlowError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2204082D0 + 4 * byte_2204435BA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_220408304 + 4 * byte_2204435B5[v4]))();
}

uint64_t sub_220408304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22040830C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x220408314);
  return result;
}

uint64_t sub_220408320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x220408328);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_22040832C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220408334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingFlowError()
{
  return &type metadata for SharingFlowError;
}

unint64_t lazy protocol witness table accessor for type SharingFlowError and conformance SharingFlowError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingFlowError and conformance SharingFlowError;
  if (!lazy protocol witness table cache variable for type SharingFlowError and conformance SharingFlowError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingFlowError, &type metadata for SharingFlowError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingFlowError and conformance SharingFlowError);
  }
  return result;
}

uint64_t SharingYesNoPromptFlowStrategy.actionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 + 8) + 64))();
}

uint64_t SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v3;
  v7 = *(_QWORD *)(a3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 88) + *(_QWORD *)(v7 + 88));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  return v10(a1, a2, v7);
}

uint64_t SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v3;
  v7 = *(_QWORD *)(a3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 96) + *(_QWORD *)(v7 + 96));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse();
  return v10(a1, a2, v7);
}

uint64_t SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id protocol witness for ConversationParticipant.handle.getter in conformance TUConversationParticipant()
{
  id *v0;

  return objc_msgSend(*v0, sel_handle);
}

unint64_t ExpanseFlowExitValue.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *v0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  if (v1)
    v2 = 0x656C646E61686E75;
  else
    v2 = 0x64656C646E6168;
  if (v1)
    v3 = 0xE900000000000064;
  else
    v3 = 0xE700000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t ExpanseFlowExitValue.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C646E61686E75;
  else
    return 0x64656C646E6168;
}

SiriExpanseInternal::ExpanseFlowExitValue_optional __swiftcall ExpanseFlowExitValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  SiriExpanseInternal::ExpanseFlowExitValue_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExpanseFlowExitValue.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue;
  if (!lazy protocol witness table cache variable for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseFlowExitValue, &type metadata for ExpanseFlowExitValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExpanseFlowExitValue()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExpanseFlowExitValue()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExpanseFlowExitValue()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

SiriExpanseInternal::ExpanseFlowExitValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ExpanseFlowExitValue(Swift::String *a1)
{
  return ExpanseFlowExitValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ExpanseFlowExitValue(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64656C646E6168;
  if (*v1)
    v2 = 0x656C646E61686E75;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE900000000000064;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExpanseFlowExitValue(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t storeEnumTagSinglePayload for ExpanseFlowExitValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_220408994 + 4 * byte_220443875[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2204089C8 + 4 * byte_220443870[v4]))();
}

uint64_t sub_2204089C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204089D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2204089D8);
  return result;
}

uint64_t sub_2204089E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2204089ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2204089F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204089F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExpanseFlowExitValue()
{
  return &type metadata for ExpanseFlowExitValue;
}

uint64_t specialized SharingPromptFlowStrategy.parseResponse(input:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for Input();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for Input();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for Input();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized SharingPromptFlowStrategy.parseResponse(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  v8 = os_log_type_enabled(v6, v7);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 72);
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v19 = v13;
    *(_DWORD *)v12 = 136315138;
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x24BE98DD0], MEMORY[0x24BE98DE0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_2203F9000, v6, v7, "SharingPromptFlowStrategy: parseResponse received input: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v13, -1, -1);
    MEMORY[0x2207E453C](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v16 = *(_QWORD *)(v0 + 48);
  v17 = *(_QWORD *)(v0 + 64) + 136;
  swift_beginAccess();
  outlined init with copy of SharingResponse?(v17, v16, &demangling cache variable for type metadata for SharingIntent?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  v8 = os_log_type_enabled(v6, v7);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 72);
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v20 = v13;
    *(_DWORD *)v12 = 136315138;
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x24BE98DD0], MEMORY[0x24BE98DE0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_2203F9000, v6, v7, "SharingPromptFlowStrategy: parseResponse received input: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v13, -1, -1);
    MEMORY[0x2207E453C](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v16 = *(_QWORD *)(v0 + 48);
  v17 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC19SiriExpanseInternal36SimpleSharingYesNoPromptFlowStrategy_responseValue;
  swift_beginAccess();
  v18 = type metadata accessor for SimpleConfirmationResponseProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  v8 = os_log_type_enabled(v6, v7);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 72);
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v19 = v13;
    *(_DWORD *)v12 = 136315138;
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x24BE98DD0], MEMORY[0x24BE98DE0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_2203F9000, v6, v7, "SharingPromptFlowStrategy: parseResponse received input: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v13, -1, -1);
    MEMORY[0x2207E453C](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v16 = *(_QWORD *)(v0 + 48);
  v17 = *(_QWORD *)(v0 + 64) + 136;
  swift_beginAccess();
  outlined init with copy of SharingResponse?(v17, v16, &demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void SimpleSharingYesNoPromptFlowStrategy.actionForIntent(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for SimpleConfirmationResponseProvider();
  MEMORY[0x24BDAC7A8](v3);
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (char *)sub_220409314
     + 4 * byte_220443990[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v5 + 184))(v4, v5)];
  __asm { BR              X10 }
}

uint64_t sub_220409314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *MEMORY[0x24BE98400];
  v6 = type metadata accessor for ConfirmationResponse();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v3, v5, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  SimpleConfirmationResponseProvider.init(_:)();
  v8 = v1 + OBJC_IVAR____TtC19SiriExpanseInternal36SimpleSharingYesNoPromptFlowStrategy_responseValue;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v8, v2, v0);
  swift_endAccess();
  static ActionForInput.handle()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
}

uint64_t SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = v1;
  return swift_task_switch();
}

uint64_t SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  outlined init with copy of SharingResponse?(*(_QWORD *)(v0 + 104) + 56, v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 104);
    outlined init with take of SharingIntent((__int128 *)(v0 + 56), v0 + 16);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 160));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v2;
    *v2 = v0;
    v2[1] = SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse();
    return ResponseExecutor.execute(response:)(*(_QWORD *)(v0 + 96), v0 + 16);
  }
  else
  {
    outlined destroy of SharingResponse?(v0 + 56);
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SimpleSharingYesNoPromptFlowStrategy.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of SharingResponse?(v0 + 56);
  outlined destroy of SharingResponse?(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  v1 = v0 + OBJC_IVAR____TtC19SiriExpanseInternal36SimpleSharingYesNoPromptFlowStrategy_responseValue;
  v2 = type metadata accessor for SimpleConfirmationResponseProvider();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SimpleSharingYesNoPromptFlowStrategy()
{
  return type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
}

uint64_t type metadata accessor for SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SimpleSharingYesNoPromptFlowStrategy;
  if (!type metadata singleton initialization cache for SimpleSharingYesNoPromptFlowStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SimpleConfirmationResponseProvider();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in SimpleSharingYesNoPromptFlowStrategy()
{
  return MEMORY[0x24BE98D10];
}

uint64_t protocol witness for YesNoPromptFlowStrategy.makePromptForYesNoResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  v6 = MEMORY[0x2207E4494](&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy, a2);
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1, a2, v6);
}

uint64_t protocol witness for SharingPromptFlowStrategy.promptResponse.getter in conformance SimpleSharingYesNoPromptFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ResponseExecuting(*v1 + 16, a1);
}

uint64_t protocol witness for SharingPromptFlowStrategy.userCancelledResponse.getter in conformance SimpleSharingYesNoPromptFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of SharingResponse?(*v1 + 96, a1, &demangling cache variable for type metadata for SharingResponse?);
}

uint64_t protocol witness for SharingPromptFlowStrategy.responseExecutor.getter in conformance SimpleSharingYesNoPromptFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ResponseExecuting(*v1 + 136, a1);
}

void protocol witness for SharingPromptFlowStrategy.actionForIntent(_:) in conformance SimpleSharingYesNoPromptFlowStrategy(_QWORD *a1)
{
  SimpleSharingYesNoPromptFlowStrategy.actionForIntent(_:)(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x2207E4494](&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy);
  return SharingYesNoPromptFlowStrategy.actionForInput(_:)(a1, a2, v4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:)
                                                + async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (uint64_t (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy, (uint64_t)&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy);
  *v1 = v0;
  v1[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return YesNoPromptFlowStrategy.makePromptForConfirmation(itemToConfirm:)();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (uint64_t (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy, (uint64_t)&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy);
  *v1 = v0;
  v1[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return YesNoPromptFlowStrategy.makeRepromptOnEmptyParse(itemToConfirm:)();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (uint64_t (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy, (uint64_t)&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy);
  *v1 = v0;
  v1[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return YesNoPromptFlowStrategy.makeRepromptOnLowConfidence(itemToConfirm:)();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  v4[12] = a1;
  v4[13] = v1;
  return swift_task_switch();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  v6 = MEMORY[0x2207E4494](&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy, a2);
  *v5 = v2;
  v5[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(a1, a2, v6);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)();
}

uint64_t base witness table accessor for PromptForConfirmationFlowStrategyAsync in SimpleSharingYesNoPromptFlowStrategy()
{
  return lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (uint64_t (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy, (uint64_t)&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy);
}

uint64_t instantiation function for generic protocol witness table for SimpleSharingYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (uint64_t (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy, (uint64_t)&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t outlined init with copy of SharingResponse?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of SharingResponse?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t one-time initialization function for target()
{
  uint64_t result;

  _StringGuts.grow(_:)(22);
  result = swift_bridgeObjectRelease();
  static SharingNLContextProvider.PromptResponse.Confirmation.target = 0xD000000000000025;
  *(_QWORD *)algn_2555D1718 = 0x8000000220447F50;
  return result;
}

void one-time initialization function for options()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_220443B10;
  if (one-time initialization token for target != -1)
    swift_once();
  v4 = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  v7 = *(_QWORD *)algn_2555D1718;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x592E65756C61562ELL;
  v1._object = (void *)0xEA00000000005345;
  String.append(_:)(v1);
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 40) = v7;
  v5 = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  v8 = *(_QWORD *)algn_2555D1718;
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 0x4E2E65756C61562ELL;
  v2._object = (void *)0xE90000000000004FLL;
  String.append(_:)(v2);
  *(_QWORD *)(v0 + 48) = v5;
  *(_QWORD *)(v0 + 56) = v8;
  v6 = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  v9 = *(_QWORD *)algn_2555D1718;
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0x432E65756C61562ELL;
  v3._object = (void *)0xED00004C45434E41;
  String.append(_:)(v3);
  *(_QWORD *)(v0 + 64) = v6;
  *(_QWORD *)(v0 + 72) = v9;
  static SharingNLContextProvider.PromptResponse.Confirmation.options = v0;
}

uint64_t static SharingNLContextProvider.makeNLContextUpdateForShareTargetPrompt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  NLContextUpdate.init()();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  type metadata accessor for UsoEntityBuilder_common_Message();
  swift_allocObject();
  v0 = UsoEntityBuilder_common_Message.init()();
  type metadata accessor for UsoEntityBuilder_common_Attachment();
  swift_allocObject();
  UsoEntityBuilder_common_Attachment.init()();
  MEMORY[0x2207E3A2C]();
  type metadata accessor for UsoTaskBuilder_share_common_Message();
  swift_allocObject();
  v1 = UsoTaskBuilder_share_common_Message.init()();
  MEMORY[0x2207E3A20](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_220443310;
  static SharingNLContextProvider.makePromptedSystemDialogAct(for:)(v1, v4 + v3);
  NLContextUpdate.nluSystemDialogActs.setter();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t static SharingNLContextProvider.makePromptedSystemDialogAct(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;

  v18[1] = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v18[0] = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v18 - v12;
  Siri_Nlu_External_SystemPrompted.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_220443B20;
  *(_QWORD *)(v14 + 32) = a1;
  v19 = v14;
  specialized Array._endMutation()();
  v15 = v19;
  v16 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  swift_retain();
  MEMORY[0x2207E38F4](v15, v6);
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?((uint64_t)v6);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  swift_release();
  if (!v2)
  {
    Siri_Nlu_External_SystemPrompted.target.setter();
    Siri_Nlu_External_SystemDialogAct.init()();
    (*(void (**)(_QWORD, char *, uint64_t))(v9 + 16))(v18[0], v13, v8);
    Siri_Nlu_External_SystemDialogAct.prompted.setter();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  NLContextUpdate.init()();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_220443310;
  if (one-time initialization token for target != -1)
    swift_once();
  v3 = *(_QWORD *)algn_2555D1718;
  *(_QWORD *)(v2 + 32) = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  *(_QWORD *)(v2 + 40) = v3;
  swift_bridgeObjectRetain();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  if (one-time initialization token for options != -1)
    swift_once();
  swift_bridgeObjectRetain();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  if ((a1 & 1) != 0)
  {
    type metadata accessor for UsoTaskBuilder_unshare_common_Message();
    swift_allocObject();
    v4 = UsoTaskBuilder_unshare_common_Message.init()();
  }
  else
  {
    type metadata accessor for UsoTaskBuilder_share_common_Message();
    swift_allocObject();
    v4 = UsoTaskBuilder_share_common_Message.init()();
  }
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8) + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_220443310;
  static SharingNLContextProvider.makeConfirmationSystemDialogAct(for:)(v5, v8 + v7);
  NLContextUpdate.nluSystemDialogActs.setter();
  return swift_release();
}

uint64_t static SharingNLContextProvider.makeConfirmationSystemDialogAct(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a2;
  v3 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v33 - v6;
  v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  MEMORY[0x24BDAC7A8](v15);
  v44 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v16 = *(_QWORD *)(v44 - 8);
  v17 = MEMORY[0x24BDAC7A8](v44);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v33 - v20;
  Siri_Nlu_External_UserWantedToProceed.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_220443B20;
  *(_QWORD *)(v22 + 32) = a1;
  v45 = v22;
  specialized Array._endMutation()();
  v23 = v45;
  v24 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v14, 1, 1, v24);
  swift_retain();
  MEMORY[0x2207E38F4](v23, v14);
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?((uint64_t)v14);
  v25 = v43;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  swift_release();
  if (v25)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v44);
  Siri_Nlu_External_UserWantedToProceed.reference.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  v34 = v16;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v44);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  v27 = v38;
  Siri_Nlu_External_SystemOffered.init()();
  v28 = v11;
  v33 = v11;
  v29 = v36;
  v30 = v37;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v35, v28, v37);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  v31 = v40;
  v32 = v41;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v27, v41);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v32);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v21, v44);
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for SharingNLContextProvider()
{
  return &type metadata for SharingNLContextProvider;
}

uint64_t NeedsShareTargetFlowStrategy.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of SharingResponse?(v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  outlined destroy of SharingResponse?(v0 + 136, &demangling cache variable for type metadata for SharingIntent?);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NeedsShareTargetFlowStrategy()
{
  return objc_opt_self();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x2207E4494](&protocol conformance descriptor for NeedsShareTargetFlowStrategy);
  return SharingYesNoPromptFlowStrategy.actionForInput(_:)(a1, a2, v4);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:)
                                                + async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  v6 = MEMORY[0x2207E4494](&protocol conformance descriptor for NeedsShareTargetFlowStrategy, a2);
  *v5 = v2;
  v5[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1, a2, v6);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance NeedsShareTargetFlowStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance NeedsShareTargetFlowStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  v6 = MEMORY[0x2207E4494](&protocol conformance descriptor for NeedsShareTargetFlowStrategy, a2);
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(a1, a2, v6);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance NeedsShareTargetFlowStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeErrorResponse(_:)();
}

uint64_t protocol witness for SharingPromptFlowStrategy.userCancelledResponse.getter in conformance NeedsShareTargetFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of SharingResponse?(*v1 + 56, a1);
}

uint64_t protocol witness for SharingPromptFlowStrategy.responseExecutor.getter in conformance NeedsShareTargetFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ResponseExecuting(*v1 + 96, a1);
}

uint64_t protocol witness for SharingPromptFlowStrategy.actionForIntent(_:) in conformance NeedsShareTargetFlowStrategy(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[40];
  _BYTE v5[40];

  v2 = *v1;
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v5);
  outlined init with take of SharingIntent?((uint64_t)v5, (uint64_t)v4);
  swift_beginAccess();
  outlined assign with take of SharingIntent?((uint64_t)v4, v2 + 136);
  swift_endAccess();
  return static ActionForInput.handle()();
}

unint64_t instantiation function for generic protocol witness table for NeedsShareTargetFlowStrategy(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy;
  if (!lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy)
  {
    v1 = type metadata accessor for NeedsShareTargetFlowStrategy();
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for NeedsShareTargetFlowStrategy, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy);
  }
  return result;
}

uint64_t outlined init with take of SharingIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SharingIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SharingResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v35[2];
  _QWORD v36[5];
  _BYTE v37[24];
  uint64_t v38;
  _BYTE v39[40];
  _BYTE v40[40];
  __int128 v41[3];

  v7 = v6;
  v35[1] = a6;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v41);
  outlined init with copy of SharingResponse?(a2, (uint64_t)v40);
  outlined init with copy of SharingResponse?(a3, (uint64_t)v39);
  outlined init with copy of ResponseExecuting(v7 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_responseExecutor, (uint64_t)v37);
  v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (_QWORD *)((char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v18;
  v21 = type metadata accessor for ResponseExecutor();
  v36[4] = &protocol witness table for ResponseExecutor;
  v36[3] = v21;
  v36[0] = v20;
  type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  v22 = (_QWORD *)swift_allocObject();
  v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v21);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (_QWORD *)((char *)v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = *v25;
  v22[20] = v21;
  v22[21] = &protocol witness table for ResponseExecutor;
  v22[17] = v27;
  v28 = *MEMORY[0x24BE983F8];
  v29 = type metadata accessor for ConfirmationResponse();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v15, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
  SimpleConfirmationResponseProvider.init(_:)();
  outlined init with take of SharingIntent(v41, (uint64_t)(v22 + 2));
  outlined init with take of SharingResponse?((uint64_t)v40, (uint64_t)(v22 + 7));
  outlined init with take of SharingResponse?((uint64_t)v39, (uint64_t)(v22 + 12));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  outlined init with copy of ResponseExecuting(v7 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_outputPublisher, (uint64_t)v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy>);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v22;
  outlined init with copy of ResponseExecuting((uint64_t)v41, (uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), SimpleConfirmationResponseProvider>);
  swift_allocObject();
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (uint64_t (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy, (uint64_t)&protocol conformance descriptor for SimpleSharingYesNoPromptFlowStrategy);
  swift_retain();
  v32 = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  *(_QWORD *)(v31 + 24) = v32;
  *(_QWORD *)&v41[0] = v31;
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = v7;
  v33[3] = a4;
  v33[4] = a5;
  lazy protocol witness table accessor for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>();
  swift_retain();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t StartSharingConfirmationFlow.State.description.getter()
{
  __int128 *v0;
  __int128 *v1;
  void *v2;
  int v3;
  uint64_t v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  _QWORD v15[7];
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;

  v1 = v0;
  outlined init with take of StartSharingConfirmationFlow.State(v0, (uint64_t)&v18);
  v2 = v18;
  outlined init with take of StartSharingConfirmationFlow.State(v1, (uint64_t)&v19);
  v3 = (v25 >> 4) & 3;
  if (v3)
  {
    v4 = v19;
    if (v3 == 1)
    {
      v25 &= 0xCFu;
      v26 = 0;
      v27 = 0xE000000000000000;
      v5 = v2;
      _StringGuts.grow(_:)(26);
      v6._countAndFlagsBits = 0xD000000000000017;
      v6._object = (void *)0x8000000220448060;
      String.append(_:)(v6);
      v15[0] = v4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
      return v26;
    }
    else
    {
      v11 = v22 | v23 | v24;
      if (v25 != 32 || v11 | v19 | v21 | v20)
      {
        v12 = v11 | v21 | v20;
        if (v25 == 32 && v19 == 1 && !v12)
        {
          return 0xD000000000000014;
        }
        else if (v25 == 32 && v19 == 2 && !v12)
        {
          return 0xD000000000000016;
        }
        else if (v25 == 32 && v19 == 3 && !v12)
        {
          v26 = 0;
          v27 = 0xE000000000000000;
          _StringGuts.grow(_:)(19);
          swift_bridgeObjectRelease();
          return 0xD00000000000002DLL;
        }
        else
        {
          v14 = v19 == 4 && v12 == 0;
          if (v25 == 32 && v14)
            return 0xD000000000000010;
          else
            return 0xD00000000000001ELL;
        }
      }
      else
      {
        return 0x696C616974696E69;
      }
    }
  }
  else
  {
    v25 &= 0xCFu;
    outlined init with take of ConfirmationContext((uint64_t)&v19, (uint64_t)&v26);
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    v16 = 0;
    v17 = 0xE000000000000000;
    v9._countAndFlagsBits = 0x43687469576E7572;
    v9._object = (void *)0xEF28747865746E6FLL;
    String.append(_:)(v9);
    outlined init with take of ConfirmationContext((uint64_t)&v26, (uint64_t)v15);
    _print_unlocked<A, B>(_:_:)();
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return v16;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StartSharingConfirmationFlow.State()
{
  __int128 *v0;
  _BYTE v2[56];

  outlined init with take of StartSharingConfirmationFlow.State(v0, (uint64_t)v2);
  return StartSharingConfirmationFlow.State.description.getter();
}

void StartSharingConfirmationFlow.state.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t started;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *oslog;
  uint64_t v17;
  _QWORD v18[7];

  v2 = v1;
  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
  outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
  swift_retain();
  outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
  swift_retain();
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v17 = v15;
    *(_DWORD *)v6 = 136315650;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v7 = static StartSharingConfirmationFlow.typeName;
    v8 = *(_QWORD *)algn_2555D18D8;
    swift_bridgeObjectRetain();
    v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
    started = StartSharingConfirmationFlow.State.description.getter();
    v11 = v10;
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(started, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    *(_WORD *)(v6 + 22) = 2080;
    outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v2 + 16), (uint64_t)v18);
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
    v12 = StartSharingConfirmationFlow.State.description.getter();
    v14 = v13;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_2203F9000, oslog, v5, "%s: transitioned from state %s to %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v15, -1, -1);
    MEMORY[0x2207E453C](v6, -1, -1);

  }
  else
  {
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    swift_release_n();

  }
}

uint64_t StartSharingConfirmationFlow.exitValue.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  __int128 *v3;
  unsigned int v4;
  int v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t started;
  unint64_t v22;
  unint64_t v23;
  BOOL v25;
  uint64_t v27;
  _QWORD v28[7];

  v1 = v0;
  v3 = (__int128 *)(v0 + 2);
  v2 = v0[2];
  v4 = *((unsigned __int8 *)v3 + 48);
  v5 = (v4 >> 4) & 3;
  if (!v5)
    goto LABEL_19;
  if (v5 == 1)
  {
    v6 = (id)v2;
    return v2;
  }
  v7 = v1[4];
  v8 = v1[3];
  v9 = v1[5] | v1[6] | v1[7];
  if (v4 == 32 && (v9 | v2 | v7 | v8) == 0)
  {
LABEL_19:
    if (one-time initialization token for default != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
    swift_retain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v27 = v18;
      *(_DWORD *)v17 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v19 = static StartSharingConfirmationFlow.typeName;
      v20 = *(_QWORD *)algn_2555D18D8;
      swift_bridgeObjectRetain();
      v28[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      outlined init with take of StartSharingConfirmationFlow.State(v3, (uint64_t)v28);
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
      started = StartSharingConfirmationFlow.State.description.getter();
      v23 = v22;
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(started, v23, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_2203F9000, v15, v16, "%s: exitValue accessed with flow in unexpected state %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v18, -1, -1);
      MEMORY[0x2207E453C](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
    return swift_allocError();
  }
  else
  {
    v11 = v9 | v7 | v8;
    if (v4 == 32 && v2 == 1 && v11 == 0)
    {
      return 0;
    }
    else if (v4 == 32 && v2 == 2 && !v11)
    {
      return 1;
    }
    else if (v4 == 32 && v2 == 3 && !v11)
    {
      return 2;
    }
    else
    {
      if (v11)
        v25 = 0;
      else
        v25 = v2 == 4;
      if (v25 && v4 == 32)
        return 3;
      else
        return 4;
    }
  }
}

uint64_t StartSharingConfirmationFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 424) = a1;
  *(_QWORD *)(v2 + 432) = v1;
  return swift_task_switch();
}

uint64_t StartSharingConfirmationFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  int8x16_t v14;
  int8x8_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 432);
  outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v1 + 16), v0 + 184);
  v33 = *(_QWORD *)(v1 + 16);
  v35 = *(_QWORD *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = *(_BYTE *)(v1 + 64);
  outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v0 + 184), v0 + 128);
  v7 = *(unsigned __int8 *)(v0 + 176);
  v8 = (v7 >> 4) & 3;
  if (!v8)
  {
    v26 = v6;
    v30 = v2;
    v32 = v0 + 184;
    *(_BYTE *)(v0 + 176) = v7 & 0xCF;
    outlined init with take of ConfirmationContext(v0 + 128, v0 + 72);
    outlined init with take of ConfirmationContext(v0 + 72, v0 + 16);
    v9 = *(unsigned __int8 *)(v0 + 64);
    if (v9 >> 6)
    {
      if (v9 >> 6 == 1)
      {
        v10 = *(_QWORD *)(v0 + 424);
        *(_BYTE *)(v0 + 64) = v9 & 0x3F;
        v11 = *(_QWORD *)(v0 + 16);
        v12 = *(_BYTE *)(v0 + 24);
        outlined copy of ConfirmationContext(v33, v35, v30, v3, v5, v4, v26);
        StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)(v11, v12, v10);
        v13 = v0 + 184;
LABEL_17:
        outlined release of StartSharingConfirmationFlow.State(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v22 = *(_QWORD *)(v0 + 424);
      *(_BYTE *)(v0 + 64) = v9 & 0x3F;
      v23 = *(_QWORD *)(v0 + 32);
      v24 = *(_BYTE *)(v0 + 40);
      v21 = v0 + 184;
      outlined release of StartSharingConfirmationFlow.State(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)(v24, v23, v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_BYTE *)(v0 + 64) = v9 & 0x3F;
      v18 = *(_QWORD *)(v0 + 56);
      v19 = *(_QWORD *)(v0 + 424);
      if (*(_BYTE *)(v0 + 50) == 1)
      {
        v20 = v9 & 1;
        v21 = v0 + 184;
        outlined release of StartSharingConfirmationFlow.State(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)(v20, v18, v19);
      }
      else
      {
        v34 = *(_QWORD *)(v1 + 24);
        v36 = *(_QWORD *)(v1 + 16);
        v29 = *(_QWORD *)(v1 + 40);
        v31 = *(_QWORD *)(v1 + 32);
        v27 = *(_QWORD *)(v1 + 56);
        v28 = *(_QWORD *)(v1 + 48);
        *(_QWORD *)(v1 + 16) = 2;
        *(_OWORD *)(v1 + 24) = 0u;
        *(_OWORD *)(v1 + 40) = 0u;
        *(_QWORD *)(v1 + 56) = 0;
        v25 = *(unsigned __int8 *)(v1 + 64);
        *(_BYTE *)(v1 + 64) = 32;
        v21 = v0 + 184;
        outlined release of StartSharingConfirmationFlow.State(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
        outlined release of StartSharingConfirmationFlow.State(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of StartSharingConfirmationFlow.State(v36, v34, v31, v29, v28, v27, v25);
        StartSharingConfirmationFlow.state.didset(v32);
        outlined release of StartSharingConfirmationFlow.State(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
        static ExecuteResponse.complete()();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v13 = v21;
    goto LABEL_17;
  }
  if (v8 == 1)
  {
    *(_BYTE *)(v0 + 176) = v7 & 0xCF;
  }
  else
  {
    v14 = vorrq_s8(*(int8x16_t *)(v0 + 144), *(int8x16_t *)(v0 + 160));
    v15 = vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
    if (v7 == 32 && !(*(_QWORD *)&v15 | *(_QWORD *)(v0 + 128) | *(_QWORD *)(v0 + 136)))
    {
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 440) = v16;
      *v16 = v0;
      v16[1] = StartSharingConfirmationFlow.execute();
      return StartSharingConfirmationFlow.makeConfirmationContext()(v0 + 352);
    }
  }
  static ExecuteResponse.complete()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 448) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(_OWORD *)(v2 + 368);
    *(_OWORD *)(v2 + 456) = *(_OWORD *)(v2 + 352);
    *(_OWORD *)(v2 + 472) = v3;
    *(_OWORD *)(v2 + 488) = *(_OWORD *)(v2 + 384);
    *(_BYTE *)(v2 + 65) = *(_BYTE *)(v2 + 400);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_BYTE *)(v0 + 65);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 472);
  v9 = *(_OWORD *)(v0 + 456);
  v10 = *(_OWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 432);
  outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v4 + 16), v0 + 296);
  v12 = *(_QWORD *)(v4 + 24);
  v13 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 40);
  v11 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD *)(v4 + 56);
  *(_OWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 40) = v10;
  *(_QWORD *)(v4 + 56) = v2;
  LODWORD(v2) = *(unsigned __int8 *)(v4 + 64);
  *(_BYTE *)(v4 + 64) = v1;
  outlined release of StartSharingConfirmationFlow.State(v0 + 296, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
  outlined release of StartSharingConfirmationFlow.State(v0 + 352, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ConfirmationContext);
  outlined consume of StartSharingConfirmationFlow.State(v13, v12, v11, v5, v6, v7, v2);
  StartSharingConfirmationFlow.state.didset(v0 + 296);
  outlined release of StartSharingConfirmationFlow.State(v0 + 352, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ConfirmationContext);
  outlined release of StartSharingConfirmationFlow.State(v0 + 296, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
  static ExecuteResponse.ongoing(requireInput:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  id v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = *(void **)(v0 + 448);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v28 = v26;
    *(_DWORD *)v7 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v9 = *(void **)(v0 + 448);
    v11 = static StartSharingConfirmationFlow.typeName;
    v10 = *(_QWORD *)algn_2555D18D8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    v12 = v9;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 416) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v13;

    _os_log_impl(&dword_2203F9000, v5, v6, "%s: Failed to initialize ConfirmationContext with error: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v26, -1, -1);
    MEMORY[0x2207E453C](v7, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 448);

  }
  v15 = *(void **)(v0 + 448);
  v16 = *(_QWORD *)(v0 + 432);
  outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v16 + 16), v0 + 240);
  v17 = *(_QWORD *)(v16 + 24);
  v27 = *(_QWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 32);
  v19 = *(_QWORD *)(v16 + 40);
  v20 = *(_QWORD *)(v16 + 48);
  v21 = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v16 + 16) = v15;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_QWORD *)(v16 + 56) = 0;
  v22 = *(unsigned __int8 *)(v16 + 64);
  *(_BYTE *)(v16 + 64) = 16;
  v23 = v15;
  v24 = v15;
  outlined release of StartSharingConfirmationFlow.State(v0 + 240, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
  outlined consume of StartSharingConfirmationFlow.State(v27, v17, v18, v19, v20, v21, v22);
  StartSharingConfirmationFlow.state.didset(v0 + 240);

  outlined release of StartSharingConfirmationFlow.State(v0 + 240, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
  static ExecuteResponse.ongoing(requireInput:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StartSharingConfirmationFlow.makeConfirmationContext()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[26] = a1;
  v2[27] = v1;
  type metadata accessor for ShareTarget();
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

void StartSharingConfirmationFlow.makeConfirmationContext()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  _QWORD *v5;
  char *v6;

  v2 = v0[27];
  v1 = v0[28];
  outlined init with copy of ResponseExecuting(v2 + 72, (uint64_t)(v0 + 9));
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v2 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_requestedTarget, v1, (uint64_t (*)(_QWORD))type metadata accessor for ShareTarget);
  outlined init with copy of ResponseExecuting(v2 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_call, (uint64_t)(v0 + 14));
  v3 = type metadata accessor for SharePlayHelper();
  inited = swift_initStackObject();
  v0[29] = inited;
  v0[19] = inited;
  v0[22] = v3;
  v0[23] = &protocol witness table for SharePlayHelper;
  v6 = (char *)&async function pointer to specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:)
     + async function pointer to specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[30] = v5;
  *v5 = v0;
  v5[1] = StartSharingConfirmationFlow.makeConfirmationContext();
  __asm { BR              X8; specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:) }
}

uint64_t StartSharingConfirmationFlow.makeConfirmationContext()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 248) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  outlined init with take of ConfirmationContext(v2 + 16, *(_QWORD *)(v2 + 208));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t started;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v12;
  uint64_t v14[5];
  uint64_t v15[5];

  started = type metadata accessor for Responses.StartSharing.ShareRequestCancelled(0);
  MEMORY[0x24BDAC7A8](started);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = -101;
  static DialogPhase.canceled.getter();
  v15[3] = started;
  v15[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ShareRequestCancelled;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  v14[3] = started;
  v14[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ShareRequestCancelled;
  v12 = __swift_allocate_boxed_opaque_existential_1(v14);
  outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v10, (uint64_t)v12, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  specialized PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(a1, (uint64_t)v15, (uint64_t)v14, a2, a3, a4);
  outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v10, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  outlined destroy of SharingResponse?((uint64_t)v14);
  return outlined destroy of SharingResponse?((uint64_t)v15);
}

uint64_t StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t started;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];
  uint64_t v56;
  _UNKNOWN **v57;

  v4 = v3;
  started = type metadata accessor for Responses.StartSharing.ConfirmReadyToShare(0);
  MEMORY[0x24BDAC7A8](started);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v4 + 16), (uint64_t)v55);
    v15 = *(_QWORD *)(v4 + 16);
    v16 = *(_QWORD *)(v4 + 24);
    v17 = *(_QWORD *)(v4 + 32);
    v18 = *(_QWORD *)(v4 + 40);
    v19 = *(_QWORD *)(v4 + 48);
    v20 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 16) = 1;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_QWORD *)(v4 + 56) = 0;
    v21 = *(unsigned __int8 *)(v4 + 64);
    *(_BYTE *)(v4 + 64) = 32;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
    outlined consume of StartSharingConfirmationFlow.State(v15, v16, v17, v18, v19, v20, v21);
    StartSharingConfirmationFlow.state.didset((uint64_t)v55);
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    return static ExecuteResponse.complete()();
  }
  if (!a1)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_18:
      v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.default);
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v51 = a3;
        v33 = (uint8_t *)swift_slowAlloc();
        v34 = swift_slowAlloc();
        v55[0] = v34;
        *(_DWORD *)v33 = 136315138;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v35 = static StartSharingConfirmationFlow.typeName;
        v36 = *(_QWORD *)algn_2555D18D8;
        swift_bridgeObjectRetain();
        v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2203F9000, v31, v32, "%s: Confirming with the user that they're ready to share their screen", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v34, -1, -1);
        MEMORY[0x2207E453C](v33, -1, -1);

        a3 = v51;
      }
      else
      {

      }
      *v10 = -118;
      static DialogPhase.clarification.getter();
      v37 = &v10[*(int *)(started + 24)];
      static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(0);
      v38 = type metadata accessor for NLContextUpdate();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 0, 1, v38);
      v39 = &v10[*(int *)(started + 28)];
      *v39 = 1;
      *((_QWORD *)v39 + 2) = 0;
      *((_QWORD *)v39 + 3) = 0;
      *((_QWORD *)v39 + 1) = 0;
      v56 = started;
      v57 = &protocol witness table for Responses.StartSharing.ConfirmReadyToShare;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
      outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ConfirmReadyToShare);
      swift_retain();
      StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)((uint64_t)v55, (uint64_t)partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:), v4, a3);
      swift_release();
      v41 = (uint64_t)v10;
      v42 = type metadata accessor for Responses.StartSharing.ConfirmReadyToShare;
      goto LABEL_27;
    }
LABEL_29:
    swift_once();
    goto LABEL_18;
  }
  v52 = v14;
  v54 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    started = _CocoaArrayWrapper.endIndex.getter();
    if (started)
      goto LABEL_6;
  }
  else
  {
    started = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (started)
    {
LABEL_6:
      v49 = v12;
      v50 = v4;
      v51 = a3;
      v53 = type metadata accessor for DialogPerson();
      if (started >= 1)
      {
        v23 = 0;
        v24 = a1 & 0xC000000000000001;
        v25 = a1;
        do
        {
          if (v24)
            v26 = (id)MEMORY[0x2207E3F60](v23, a1);
          else
            v26 = *(id *)(a1 + 8 * v23 + 32);
          v27 = v26;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v55, v56);
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
          v28 = DialogPerson.__allocating_init(person:locale:useConversationalName:)();

          if (v28)
          {
            MEMORY[0x2207E3D98]();
            if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v23;
          a1 = v25;
        }
        while (started != v23);
        swift_bridgeObjectRelease();
        v29 = v54;
        v4 = v50;
        a3 = v51;
        v12 = v49;
        goto LABEL_26;
      }
      __break(1u);
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease();
  v29 = MEMORY[0x24BEE4AF8];
LABEL_26:
  v43 = (uint64_t)v52;
  *v52 = -115;
  static DialogPhase.clarification.getter();
  v44 = v43 + *(int *)(v12 + 24);
  static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(0);
  v45 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
  v46 = v43 + *(int *)(v12 + 28);
  *(_BYTE *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  *(_QWORD *)(v46 + 24) = v29;
  v56 = v12;
  v57 = &protocol witness table for Responses.StartSharing.ConfirmShareWithEveryoneInCall;
  v47 = __swift_allocate_boxed_opaque_existential_1(v55);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v43, (uint64_t)v47, type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall);
  swift_retain();
  StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)((uint64_t)v55, (uint64_t)partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:), v4, a3);
  swift_release();
  v41 = v43;
  v42 = type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall;
LABEL_27:
  outlined destroy of StartSharingFlow.StartSharingFlowState(v41, v42);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
}

uint64_t closure #2 in StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BYTE v10[56];

  outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(a1 + 16), (uint64_t)v10);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 16) = 3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(unsigned __int8 *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = 32;
  outlined release of StartSharingConfirmationFlow.State((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
  outlined consume of StartSharingConfirmationFlow.State(v2, v3, v4, v5, v6, v7, v8);
  StartSharingConfirmationFlow.state.didset((uint64_t)v10);
  return outlined release of StartSharingConfirmationFlow.State((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
}

uint64_t StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t started;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23[7];

  started = type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen(0);
  MEMORY[0x24BDAC7A8](started);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v18 = a2 != 0;
    *v9 = -117;
    static DialogPhase.clarification.getter();
    v19 = &v9[*(int *)(started + 24)];
    static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(0);
    v20 = type metadata accessor for NLContextUpdate();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
    v9[*(int *)(started + 28)] = v18;
    v23[3] = started;
    v23[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ConfirmShareEntireScreen;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen);
    swift_retain();
    StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)((uint64_t)v23, (uint64_t)partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:), v3, a3);
    swift_release();
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v3 + 16), (uint64_t)v23);
    v10 = *(_QWORD *)(v3 + 16);
    v11 = *(_QWORD *)(v3 + 24);
    v12 = *(_QWORD *)(v3 + 32);
    v13 = *(_QWORD *)(v3 + 40);
    v14 = *(_QWORD *)(v3 + 48);
    v15 = *(_QWORD *)(v3 + 56);
    *(_QWORD *)(v3 + 16) = 5;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_QWORD *)(v3 + 56) = 0;
    v16 = *(unsigned __int8 *)(v3 + 64);
    *(_BYTE *)(v3 + 64) = 32;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
    outlined consume of StartSharingConfirmationFlow.State(v10, v11, v12, v13, v14, v15, v16);
    StartSharingConfirmationFlow.state.didset((uint64_t)v23);
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    return static ExecuteResponse.complete()();
  }
}

uint64_t StartSharingConfirmationFlow.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of StartSharingConfirmationFlow.State(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_requestedTarget, (uint64_t (*)(_QWORD))type metadata accessor for ShareTarget);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_call);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_responseExecutor);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_outputPublisher);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for StartSharingConfirmationFlow()
{
  return type metadata accessor for StartSharingConfirmationFlow();
}

uint64_t type metadata accessor for StartSharingConfirmationFlow()
{
  uint64_t result;

  result = type metadata singleton initialization cache for StartSharingConfirmationFlow;
  if (!type metadata singleton initialization cache for StartSharingConfirmationFlow)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for StartSharingConfirmationFlow()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ShareTarget();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t outlined copy of StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v7;

  v7 = (a7 >> 4) & 3;
  if (v7 == 1)
    return (uint64_t)(id)a1;
  if (!v7)
    return outlined copy of ConfirmationContext(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t outlined copy of ConfirmationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  int v7;
  uint64_t result;

  v7 = a7 >> 6;
  if (v7 == 2)
  {
LABEL_5:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (v7 != 1)
  {
    if (a7 >> 6)
      return result;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  return swift_bridgeObjectRetain();
}

void destroy for StartSharingConfirmationFlow.State(uint64_t a1)
{
  outlined consume of StartSharingConfirmationFlow.State(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void outlined consume of StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v7;

  v7 = (a7 >> 4) & 3;
  if (v7 == 1)
  {

  }
  else if (!v7)
  {
    outlined consume of ConfirmationContext(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t outlined consume of ConfirmationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  int v7;
  uint64_t result;

  v7 = a7 >> 6;
  if (v7 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (v7 != 1)
  {
    if (a7 >> 6)
      return result;
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of StartSharingConfirmationFlow.State(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of StartSharingConfirmationFlow.State(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of StartSharingConfirmationFlow.State(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of StartSharingConfirmationFlow.State(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartSharingConfirmationFlow.State(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 32) >> 2) & 0x3F80 | (*(_QWORD *)(a1 + 32) >> 1) | (*(_QWORD *)(a1 + 32) >> 3) & 0x1FC000 | (*(_QWORD *)(a1 + 32) >> 4) & 0xFFE00000;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for StartSharingConfirmationFlow.State(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = (-4 * a2) & 0xFE00 | (2 * (-a2 & 0x7FLL)) & 0xFFFFFFF00101FFFFLL | ((((unint64_t)-a2 >> 14) & 0x7F) << 17) & 0xFFFFFFF001FFFFFFLL | ((unint64_t)(-a2 >> 21) << 25);
      *(_QWORD *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for StartSharingConfirmationFlow.State(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 48);
  if (((v1 >> 4) & 2) != 0)
    return (*(_DWORD *)a1 + 2);
  else
    return (v1 >> 4) & 3;
}

uint64_t destructiveProjectEnumData for StartSharingConfirmationFlow.State(uint64_t result)
{
  *(_BYTE *)(result + 48) &= 0xCFu;
  return result;
}

uint64_t destructiveInjectEnumTag for StartSharingConfirmationFlow.State(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 48) & 0xC1 | (16 * (a2 & 3));
    *(_QWORD *)(result + 32) &= 0x1010101uLL;
    *(_BYTE *)(result + 48) = v2;
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    *(_BYTE *)(result + 48) = 32;
  }
  return result;
}

ValueMetadata *type metadata accessor for StartSharingConfirmationFlow.State()
{
  return &type metadata for StartSharingConfirmationFlow.State;
}

unint64_t instantiation function for generic protocol witness table for StartSharingConfirmationFlow.State(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State;
  if (!lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for StartSharingConfirmationFlow.State, &type metadata for StartSharingConfirmationFlow.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State;
  if (!lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for StartSharingConfirmationFlow.State, &type metadata for StartSharingConfirmationFlow.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State);
  }
  return result;
}

uint64_t protocol witness for Flow.execute() in conformance StartSharingConfirmationFlow(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[53] = a1;
  v5[54] = v4;
  return swift_task_switch();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance StartSharingConfirmationFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = StartSharingConfirmationFlow.exitValue.getter();
  *a1 = result;
  return result;
}

uint64_t specialized closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1, void (*a2)(char *, uint64_t), void (*a3)(void), uint64_t a4)
{
  swift_retain();
  swift_retain();
  specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(a1, (uint64_t)a2, a3, a4, a2);
  swift_release();
  return swift_release();
}

uint64_t specialized StartSharingConfirmationFlow.on(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Input();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static StartSharingConfirmationFlow.typeName;
    v12 = *(_QWORD *)algn_2555D18D8;
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x24BE98DD0], MEMORY[0x24BE98DE0]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2203F9000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v10, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t outlined init with take of StartSharingConfirmationFlow.State(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t outlined init with take of ConfirmationContext(uint64_t a1, uint64_t a2)
{
  __swift_memcpy49_8(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)()
{
  uint64_t v0;

  return closure #2 in StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)(v0);
}

uint64_t outlined init with take of SharingResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22040DFC0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(a1, *(void (**)(char *, uint64_t))(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>;
  if (!lazy protocol witness table cache variable for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy>);
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for PromptForConfirmationFlowWrapper<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>);
  }
  return result;
}

uint64_t outlined release of StartSharingConfirmationFlow.State(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

unint64_t lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError;
  if (!lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseError, &type metadata for ExpanseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError;
  if (!lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseError, &type metadata for ExpanseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for StartSharingConfirmationFlow.ConfirmationResult(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for StartSharingConfirmationFlow.ConfirmationResult(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for StartSharingConfirmationFlow.ConfirmationResult(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for StartSharingConfirmationFlow.ConfirmationResult(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for StartSharingConfirmationFlow.ConfirmationResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StartSharingConfirmationFlow.ConfirmationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for StartSharingConfirmationFlow.ConfirmationResult(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for StartSharingConfirmationFlow.ConfirmationResult(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for StartSharingConfirmationFlow.ConfirmationResult()
{
  return &type metadata for StartSharingConfirmationFlow.ConfirmationResult;
}

uint64_t Confidence.description.getter(char a1)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  if (a1 == 2)
    return 0x6E656469666E6F43;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0xD00000000000001FLL;
  if ((a1 & 1) != 0)
    v4 = 0x80000002204474A0;
  else
    v4 = 0x8000000220447480;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000017;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Confidence.LowConfidenceReason()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Confidence.LowConfidenceReason()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Confidence.LowConfidenceReason()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Confidence.LowConfidenceReason@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Confidence.LowConfidenceReason.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Confidence.LowConfidenceReason(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000012;
  else
    v2 = 0xD00000000000001FLL;
  v3 = 0x8000000220447480;
  if (*v1)
    v3 = 0x80000002204474A0;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Confidence.LowConfidenceReason()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0xD00000000000001FLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Confidence.LowConfidenceReason(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Confidence()
{
  char *v0;

  return Confidence.description.getter(*v0);
}

uint64_t getEnumTagSinglePayload for Confidence(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = v6 - 2;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_22040E5B0 + 4 * asc_220443DF0[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for Confidence(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22040E658 + 4 * byte_220443DFA[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22040E68C + 4 * byte_220443DF5[v5]))();
}

uint64_t sub_22040E68C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22040E694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22040E69CLL);
  return result;
}

uint64_t sub_22040E6A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22040E6B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22040E6B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22040E6BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for Confidence(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 2)
    return v1 - 1;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for Confidence(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for Confidence()
{
  return &type metadata for Confidence;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Confidence(char *a1, char *a2)
{
  return specialized static Confidence.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Confidence.== infix(_:_:)(char a1, char a2)
{
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = a2 == 2 && a1 == 2;
  if (a1 != 2 && a2 != 2)
  {
    if ((a1 & 1) != 0)
      v4 = 0xD000000000000012;
    else
      v4 = 0xD00000000000001FLL;
    if ((a1 & 1) != 0)
      v5 = 0x80000002204474A0;
    else
      v5 = 0x8000000220447480;
    if ((a2 & 1) != 0)
      v6 = 0xD000000000000012;
    else
      v6 = 0xD00000000000001FLL;
    if ((a2 & 1) != 0)
      v7 = 0x80000002204474A0;
    else
      v7 = 0x8000000220447480;
    if (v4 == v6 && v5 == v7)
      v3 = 1;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

uint64_t storeEnumTagSinglePayload for Confidence.LowConfidenceReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22040E828 + 4 * byte_220443E04[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22040E85C + 4 * byte_220443DFF[v4]))();
}

uint64_t sub_22040E85C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22040E864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22040E86CLL);
  return result;
}

uint64_t sub_22040E878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22040E880);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22040E884(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22040E88C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Confidence.LowConfidenceReason()
{
  return &type metadata for Confidence.LowConfidenceReason;
}

unint64_t lazy protocol witness table accessor for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason;
  if (!lazy protocol witness table cache variable for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for Confidence.LowConfidenceReason, &type metadata for Confidence.LowConfidenceReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason);
  }
  return result;
}

uint64_t dispatch thunk of RecipientsResolving.resolve(persons:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for SharingCATsSimple()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SharingCATsSimple;
  if (!type metadata singleton initialization cache for SharingCATsSimple)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SharingCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t SharingCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  outlined init with copy of URL?(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v11 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v11;
}

uint64_t SharingCATsSimple.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for CATOption();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  v7 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a2, v3);
  return v7;
}

uint64_t SharingCATsSimple.__deallocating_deinit()
{
  CATWrapperSimple.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SharingCATsSimple()
{
  return type metadata accessor for SharingCATsSimple();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for ShareTarget(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        swift_retain();
        v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        v8 = (char *)a1 + v7;
        v9 = (char *)a2 + v7;
        v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ShareTarget(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_release();
      v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      v4 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      break;
    case 1:
    case 2:
    case 3:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for ShareTarget(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *a1 = *a2;
      swift_retain();
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      goto LABEL_6;
    case 1u:
    case 2u:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain();
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for ShareTarget(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ShareTarget((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        swift_retain();
        v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        v7 = (char *)a1 + v6;
        v8 = (char *)a2 + v6;
        v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
        goto LABEL_7;
      case 1u:
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain();
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for ShareTarget()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ShareTarget;
  if (!type metadata singleton initialization cache for ShareTarget)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *initializeWithTake for ShareTarget(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithTake for ShareTarget(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ShareTarget((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ShareTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for ShareTarget()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ShareTarget()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[8];

  result = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = &unk_220444030;
    v2[6] = &unk_220444048;
    v2[7] = &unk_220444060;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(char a1)
{
  Swift::String v1;

  if (a1 != 4)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  v1._object = (void *)0x8000000220448250;
  String.append(_:)(v1);
  return swift_bridgeObjectRelease();
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  unint64_t v8;

  if (a1 == 2)
  {
    v2 = 0xEF686769682E6563;
    v3 = 0x6E656469666E6F43;
  }
  else
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    if ((a1 & 1) != 0)
      v4 = 0xD000000000000012;
    else
      v4 = 0xD00000000000001FLL;
    if ((a1 & 1) != 0)
      v5 = 0x80000002204474A0;
    else
      v5 = 0x8000000220447480;
    v6 = v5;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v3 = 0xD000000000000017;
    v2 = 0x8000000220448110;
  }
  v8 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  return swift_bridgeObjectRelease();
}

void ShareTarget.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for ShareTarget();
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of ShareTarget(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_22040F5F8 + 4 * byte_220444004[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22040F5F8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;

  v6 = *(_QWORD *)v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v1, &v2[*(int *)(v7 + 48)], v0);
  *(_QWORD *)(v5 - 80) = 0;
  *(_QWORD *)(v5 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v8 = *(_QWORD *)(v5 - 72);
  *(_QWORD *)(v5 - 80) = *(_QWORD *)(v5 - 80);
  *(_QWORD *)(v5 - 72) = v8;
  v9._countAndFlagsBits = v4 + 13;
  v9._object = (void *)0x8000000220448230;
  String.append(_:)(v9);
  *(_QWORD *)(v5 - 96) = v6;
  type metadata accessor for UsoEntity();
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0x203A65707974202CLL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = UsoEntity_common_AttachmentType.DefinedValues.rawValue.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_release();
  v13 = *(_QWORD *)(v5 - 80);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v13;
}

uint64_t specialized static ShareTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int EnumCaseMultiPayload;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v100 = (char *)a2;
  v3 = type metadata accessor for ShareTarget();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v90 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v92 = (uint64_t)&v89 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v91 = (uint64_t)&v89 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v93 = (uint64_t)&v89 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v94 = (uint64_t)&v89 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v96 = (uint64_t)&v89 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v95 = (uint64_t *)((char *)&v89 - v17);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v97 = (uint64_t *)((char *)&v89 - v19);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v98 = (uint64_t *)((char *)&v89 - v21);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (uint64_t *)((char *)&v89 - v23);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v99 = (uint64_t)&v89 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v28 = (uint64_t *)((char *)&v89 - v27);
  v29 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v89 - v35;
  v37 = MEMORY[0x24BDAC7A8](v34);
  v39 = (char *)&v89 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v89 - v40;
  outlined init with copy of ShareTarget(a1, (uint64_t)v28);
  if (swift_getEnumCaseMultiPayload())
  {
    v42 = (uint64_t)v100;
    outlined destroy of ShareTarget((uint64_t)v28);
    outlined init with copy of ShareTarget(a1, (uint64_t)v24);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v44 = *v24;
      v43 = v24[1];
      v45 = v98;
      outlined init with copy of ShareTarget(v42, (uint64_t)v98);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v46 = v45[1];
        if (v43)
        {
          if (v46)
          {
            if (v44 == *v45 && v43 == v46)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v47 = 1;
              return v47 & 1;
            }
LABEL_40:
            v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v47 & 1;
          }
LABEL_36:
          swift_bridgeObjectRelease();
          v47 = 0;
          return v47 & 1;
        }
        if (v46)
          goto LABEL_36;
LABEL_33:
        v47 = 1;
        return v47 & 1;
      }
      goto LABEL_16;
    }
    outlined destroy of ShareTarget((uint64_t)v24);
    v54 = v97;
    outlined init with copy of ShareTarget(a1, (uint64_t)v97);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v56 = *v54;
      v55 = v54[1];
      v45 = v95;
      outlined init with copy of ShareTarget(v42, (uint64_t)v95);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        v53 = (uint64_t)v45;
        goto LABEL_17;
      }
      if (v56 != *v45 || v55 != v45[1])
        goto LABEL_40;
LABEL_15:
      swift_bridgeObjectRelease_n();
      v47 = 1;
      return v47 & 1;
    }
    outlined destroy of ShareTarget((uint64_t)v54);
    v57 = v96;
    outlined init with copy of ShareTarget(a1, v96);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v59 = *(_QWORD *)v57;
      v58 = *(_QWORD *)(v57 + 8);
      v60 = *(unsigned __int8 *)(v57 + 16);
      v61 = v42;
      v62 = v94;
      outlined init with copy of ShareTarget(v61, v94);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        swift_bridgeObjectRelease();
        v53 = v62;
        goto LABEL_17;
      }
      v63 = *(_QWORD *)v62;
      v64 = *(_QWORD *)(v62 + 8);
      v65 = *(unsigned __int8 *)(v62 + 16);
      if (v59 == v63 && v58 == v64)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v47 = 0;
        if ((v83 & 1) == 0)
          return v47 & 1;
      }
      v47 = v65 == 2 && v60 == 2;
      if (v60 != 2 && v65 != 2)
      {
        if ((v60 & 1) != 0)
          v84 = 0xD000000000000012;
        else
          v84 = 0xD00000000000001FLL;
        if ((v60 & 1) != 0)
          v85 = 0x80000002204474A0;
        else
          v85 = 0x8000000220447480;
        if ((v65 & 1) != 0)
          v86 = 0xD000000000000012;
        else
          v86 = 0xD00000000000001FLL;
        if ((v65 & 1) != 0)
          v87 = 0x80000002204474A0;
        else
          v87 = 0x8000000220447480;
        if (v84 != v86 || v85 != v87)
          goto LABEL_40;
        goto LABEL_15;
      }
    }
    else
    {
      outlined destroy of ShareTarget(v57);
      v74 = v93;
      outlined init with copy of ShareTarget(a1, v93);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      outlined destroy of ShareTarget(v74);
      if (EnumCaseMultiPayload == 4)
      {
        v76 = v91;
        outlined init with copy of ShareTarget(v42, v91);
        v77 = swift_getEnumCaseMultiPayload();
        outlined destroy of ShareTarget(v76);
        if (v77 == 4)
          goto LABEL_33;
      }
      v78 = v92;
      outlined init with copy of ShareTarget(a1, v92);
      v79 = swift_getEnumCaseMultiPayload();
      outlined destroy of ShareTarget(v78);
      if (v79 == 5)
      {
        v80 = v90;
        outlined init with copy of ShareTarget(v42, v90);
        v47 = swift_getEnumCaseMultiPayload() == 5;
        outlined destroy of ShareTarget(v80);
      }
      else
      {
        v47 = 0;
      }
    }
  }
  else
  {
    v98 = v39;
    v48 = *v28;
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
    v50 = (char *)v28 + *(int *)(v49 + 48);
    v51 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v51(v41, v50, v29);
    v52 = v99;
    outlined init with copy of ShareTarget((uint64_t)v100, v99);
    if (swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v41, v29);
      swift_release();
      v53 = v52;
LABEL_17:
      outlined destroy of ShareTarget(v53);
      v47 = 0;
      return v47 & 1;
    }
    v66 = v52 + *(int *)(v49 + 48);
    v67 = (uint64_t)v98;
    v51((char *)v98, (char *)v66, v29);
    v68 = v48;
    v69 = UsoEntity.isEquivalentTo(_:)();
    v70 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    v100 = v41;
    v70(v36, v41, v29);
    v71 = v33;
    v72 = v67;
    v70(v71, (char *)v67, v29);
    if ((v69 & 1) != 0)
    {
      v99 = v68;
      lazy protocol witness table accessor for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v73 = v29;
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v103 == v101 && v104 == v102)
        v47 = 1;
      else
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v73 = v29;
      swift_release();
      swift_release();
      v47 = 0;
    }
    v81 = (uint64_t)v100;
    v82 = *(void (**)(char *, uint64_t))(v30 + 8);
    v82(v71, v73);
    v82(v36, v73);
    v82((char *)v72, v73);
    v82((char *)v81, v73);
  }
  return v47 & 1;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    result = MEMORY[0x2207E4494](MEMORY[0x24BEA1B50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues);
  }
  return result;
}

unint64_t ScreenSharingCallManager.init()@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  unint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  result = type metadata accessor for TUCallCenter();
  a1[3] = result;
  a1[4] = &protocol witness table for TUCallCenter;
  *a1 = v2;
  return result;
}

uint64_t ScreenSharingCallManager.currentShareStatus.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 8))(&v17, v3, v4);
  if (v18)
  {
    outlined init with take of SharingIntent(&v17, (uint64_t)v19);
    v5 = v20;
    v6 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(v5, v6);
    v12 = v8;
    switch(v8)
    {
      case 1:
        *(_QWORD *)a1 = 1;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        goto LABEL_7;
      case 2:
        *(_QWORD *)a1 = 2;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_BYTE *)(a1 + 32) = 2;
        goto LABEL_9;
      case 3:
        *(_BYTE *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        goto LABEL_9;
      case 4:
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
LABEL_7:
        v13 = 2;
        goto LABEL_8;
      default:
        v14 = v7;
        v15 = v9;
        v16 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of ShareSession?(v14, v12);
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v12;
        *(_QWORD *)(a1 + 16) = v15;
        *(_QWORD *)(a1 + 24) = v16;
        v13 = 1;
LABEL_8:
        *(_BYTE *)(a1 + 32) = v13;
LABEL_9:
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        break;
    }
  }
  else
  {
    result = outlined destroy of SharingResponse?((uint64_t)&v17, &demangling cache variable for type metadata for Call?);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 32) = -1;
  }
  return result;
}

Swift::Bool __swiftcall ScreenSharingCallManager.isScreenShareSupportingCallSalient()()
{
  Swift::Bool v0;
  _BYTE v2[24];
  uint64_t v3;

  ScreenSharingCallManager.getSalientScreenShareSupportingCall()((uint64_t)v2);
  v0 = v3 != 0;
  outlined destroy of SharingResponse?((uint64_t)v2, &demangling cache variable for type metadata for Call?);
  return v0;
}

double ScreenSharingCallManager.getSalientScreenShareSupportingCall()@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 8))(&v10, v3, v4);
  if (v11)
  {
    outlined init with take of SharingIntent(&v10, (uint64_t)v12);
    v5 = v13;
    v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6) & 1) != 0)
    {
      v7 = v13;
      v8 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 160))(v7, v8) & 1) != 0)
      {
        outlined init with copy of ResponseExecuting((uint64_t)v12, a1);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
        return result;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of SharingResponse?((uint64_t)&v10, &demangling cache variable for type metadata for Call?);
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ScreenSharingCallManager.getRemoteCallParticipantHandles()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 8))(&v27, v1, v2);
  if (!v28)
  {
    outlined destroy of SharingResponse?((uint64_t)&v27, &demangling cache variable for type metadata for Call?);
    return MEMORY[0x24BEE4B08];
  }
  outlined init with take of SharingIntent(&v27, (uint64_t)v30);
  v3 = v31;
  v4 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 40))(&v24, v3, v4);
  if (!v25)
  {
    outlined destroy of SharingResponse?((uint64_t)&v24, &demangling cache variable for type metadata for Conversation?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return MEMORY[0x24BEE4B08];
  }
  outlined init with take of SharingIntent(&v24, (uint64_t)&v27);
  v5 = v28;
  v6 = v29;
  __swift_project_boxed_opaque_existential_1(&v27, v28);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v7 + 32;
    v10 = v23;
    do
    {
      outlined init with copy of ResponseExecuting(v9, (uint64_t)&v24);
      v11 = v25;
      v12 = v26;
      __swift_project_boxed_opaque_existential_1(&v24, v25);
      v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      v14 = objc_msgSend(v13, sel_value);

      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v23;
      }
      v19 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v10 = v23;
      }
      *(_QWORD *)(v10 + 16) = v19 + 1;
      v20 = v10 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v21 = specialized Set.init<A>(_:)(v10);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return v21;
}

BOOL protocol witness for ScreenSharingCallManaging.isScreenShareSupportingCallSalient() in conformance ScreenSharingCallManager()
{
  _BOOL8 v0;
  _BYTE v2[24];
  uint64_t v3;

  ScreenSharingCallManager.getSalientScreenShareSupportingCall()((uint64_t)v2);
  v0 = v3 != 0;
  outlined destroy of SharingResponse?((uint64_t)v2, &demangling cache variable for type metadata for Call?);
  return v0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t outlined consume of ShareSession?(uint64_t a1, uint64_t a2)
{
  if (a2 != 4)
    return outlined consume of ShareSession(a1, a2);
  return a1;
}

uint64_t outlined consume of ShareSession(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ScreenSharingCallManager(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ScreenSharingCallManager(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ScreenSharingCallManager(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingCallManager(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingCallManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingCallManager()
{
  return &type metadata for ScreenSharingCallManager;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t OutputDialogFlow.execute()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[7] = a1;
  v2[8] = v1;
  v2[9] = *v1;
  return swift_task_switch();
}

uint64_t OutputDialogFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  outlined init with copy of ResponseExecuting(*(_QWORD *)(v0 + 64) + 104, v0 + 16);
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 16) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  static ExecuteResponse.complete<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in OutputDialogFlow.execute()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in OutputDialogFlow.execute()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[3];
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 88));
  v2 = (_QWORD *)swift_task_alloc();
  v0[4] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = PromptForValueFlowWrapper.execute();
  return ResponseExecutor.execute(response:)(v0[2], v1 + 24);
}

void closure #2 in OutputDialogFlow.execute()(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14[5];
  char v15;

  outlined init with copy of Result<Output, Error>(a1, (uint64_t)v14);
  if ((v15 & 1) != 0)
  {
    v1 = (void *)v14[0];
    if (one-time initialization token for default != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
    v3 = v1;
    v4 = v1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v14[0] = v9;
      *(_DWORD *)v7 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v10 = static OutputDialogFlow.typeName;
      v11 = *(_QWORD *)algn_2555D1C38;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2112;
      v12 = v1;
      v13 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v13;

      _os_log_impl(&dword_2203F9000, v5, v6, "%s: Ending flow silently due to error while producing output: %@", (uint8_t *)v7, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v8, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v9, -1, -1);
      MEMORY[0x2207E453C](v7, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    outlined destroy of Result<Output, Error>((uint64_t)v14);
  }
}

uint64_t OutputDialogFlow.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OutputDialogFlow()
{
  return objc_opt_self();
}

unint64_t instantiation function for generic protocol witness table for OutputDialogFlow(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow;
  if (!lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow)
  {
    v1 = type metadata accessor for OutputDialogFlow();
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for OutputDialogFlow, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow);
  }
  return result;
}

uint64_t protocol witness for Flow.execute() in conformance OutputDialogFlow(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[7] = a1;
  v5[8] = v4;
  v5[9] = *v4;
  return swift_task_switch();
}

void protocol witness for Flow.exitValue.getter in conformance OutputDialogFlow(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)v1 + 16);
}

uint64_t partial apply for closure #1 in OutputDialogFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch();
}

uint64_t sub_220411C44()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in OutputDialogFlow.execute()(uint64_t a1)
{
  closure #2 in OutputDialogFlow.execute()(a1);
}

uint64_t outlined init with copy of Result<Output, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Output, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<Output, Error>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Output, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for StartSharingTargetResolutionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_220411D30 + 4 * byte_220444235[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_220411D64 + 4 * byte_220444230[v4]))();
}

uint64_t sub_220411D64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_220411D6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x220411D74);
  return result;
}

uint64_t sub_220411D80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x220411D88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_220411D8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220411D94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StartSharingTargetResolutionError()
{
  return &type metadata for StartSharingTargetResolutionError;
}

unint64_t lazy protocol witness table accessor for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for StartSharingTargetResolutionError, &type metadata for StartSharingTargetResolutionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for StartSharingTargetResolutionError, &type metadata for StartSharingTargetResolutionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationValue()
{
  return &type metadata for ConfirmationValue;
}

uint64_t storeEnumTagSinglePayload for ConfirmationValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_220411E6C + 4 * byte_220444335[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_220411EA0 + 4 * byte_220444330[v4]))();
}

uint64_t sub_220411EA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_220411EA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x220411EB0);
  return result;
}

uint64_t sub_220411EBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x220411EC4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_220411EC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220411ED0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingVerb()
{
  return &type metadata for SharingVerb;
}

unint64_t lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingVerb, &type metadata for SharingVerb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingVerb, &type metadata for SharingVerb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingVerb, &type metadata for SharingVerb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingVerb, &type metadata for SharingVerb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingVerb, &type metadata for SharingVerb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingVerb, &type metadata for SharingVerb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SharingVerb(char *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingVerb()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SharingVerb()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingVerb()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SharingVerb@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of SharingVerb.init(rawValue:);
  result = specialized SharingVerb.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SharingVerb(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 1886352499;
  if (v2 != 1)
    v4 = 1684956531;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6572616873;
  if (!v5)
    v3 = 0xE400000000000000;
  *a1 = v6;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SharingVerb(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SharingVerb;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingVerb()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v1 = *v0;
  strcpy((char *)v7, "SharingVerb.");
  BYTE5(v7[1]) = 0;
  HIWORD(v7[1]) = -5120;
  v2 = 1886352499;
  if (v1 != 1)
    v2 = 1684956531;
  if (v1)
    v3 = v2;
  else
    v3 = 0x6572616873;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb, (void (*)(void))lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb, (void (*)(void))lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SharingVerb()
{
  return lazy protocol witness table accessor for type [SharingVerb] and conformance [A](&lazy protocol witness table cache variable for type [SharingVerb] and conformance [A], &demangling cache variable for type metadata for [SharingVerb]);
}

unint64_t lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationValue, &type metadata for ConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationValue, &type metadata for ConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationValue, &type metadata for ConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationValue, &type metadata for ConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationValue, &type metadata for ConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationValue, &type metadata for ConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

unint64_t ConfirmationValue.description.getter(char a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  if (a1)
  {
    if (a1 == 1)
      v2 = 28526;
    else
      v2 = 0x6C65636E6163;
    if (a1 == 1)
      v3 = 0xE200000000000000;
    else
      v3 = 0xE600000000000000;
  }
  else
  {
    v3 = 0xE300000000000000;
    v2 = 7562617;
  }
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConfirmationValue()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConfirmationValue()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConfirmationValue()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConfirmationValue@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of ConfirmationValue.init(rawValue:);
  result = specialized SharingVerb.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ConfirmationValue(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0xE200000000000000;
  v5 = 28526;
  if (v2 != 1)
  {
    v5 = 0x6C65636E6163;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 7562617;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ConfirmationValue(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ConfirmationValue;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConfirmationValue()
{
  char *v0;

  return ConfirmationValue.description.getter(*v0);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue, (void (*)(void))lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue, (void (*)(void))lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(void), void (*a6)(void))
{
  a4();
  a5();
  a6();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ConfirmationValue()
{
  return lazy protocol witness table accessor for type [SharingVerb] and conformance [A](&lazy protocol witness table cache variable for type [ConfirmationValue] and conformance [A], &demangling cache variable for type metadata for [ConfirmationValue]);
}

uint64_t lazy protocol witness table accessor for type [SharingVerb] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2207E4494](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized SharingVerb.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

uint64_t type metadata instantiation function for CATExecutionInfo()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for CATExecutionInfo()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CATExecutionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

uint64_t destroy for CATExecutionInfo(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *initializeWithCopy for CATExecutionInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *assignWithCopy for CATExecutionInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *initializeWithTake for CATExecutionInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *assignWithTake for CATExecutionInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for CATExecutionInfo(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 6)
    v6 = 6;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 6)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      if (((v15 >> 4) & 6) != 0)
        return 8 - ((v15 >> 4) & 6 | (v15 >> 7));
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_220412C74 + 4 * byte_220444630[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for CATExecutionInfo(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 6u)
    v6 = 6;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for CATExecutionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CATExecutionInfo);
}

uint64_t static CATExecutionInfo<>.== infix(_:_:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;

  v6 = *a2;
  v7 = CATIdentifier.stringValue.getter(*a1);
  v9 = v8;
  if (v7 == CATIdentifier.stringValue.getter(v6) && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return 0;
  }
  type metadata accessor for CATExecutionInfo(0, a3, a4, v13);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> CATExecutionInfo<A>(char *a1, char *a2, uint64_t a3)
{
  return static CATExecutionInfo<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t CATIdentifier.stringValue.getter(char a1)
{
  Swift::String v1;

  if ((a1 & 0x80) == 0)
    __asm { BR              X10 }
  v1._countAndFlagsBits = SharingCATFamily.rawValue.getter(a1 & 0x7F);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0x23676E6972616853;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ButtonLabelsCATFamily(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ButtonLabelsCATFamily()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_220413160()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ButtonLabelsCATFamily()
{
  __asm { BR              X10 }
}

uint64_t sub_22041321C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ButtonLabelsCATFamily()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_2204132D0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ButtonLabelsCATFamily@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ButtonLabelsCATFamily.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ButtonLabelsCATFamily()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2204133AC + 4 * byte_2204446F0[*v0]))();
}

void sub_2204133AC(char *a1@<X8>)
{
  strcpy(a1, "SearchAppStore");
  a1[15] = -18;
}

void sub_2204133D4(_QWORD *a1@<X8>)
{
  *a1 = 0x7070416572616853;
  a1[1] = 0xE800000000000000;
}

void sub_2204133F0(_QWORD *a1@<X8>)
{
  *a1 = 0x7263536572616853;
  a1[1] = 0xEB000000006E6565;
}

uint64_t SharingCATFamily.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_220413450 + 4 * byte_2204446F4[a1]))(0xD000000000000014, 0x8000000220447500);
}

uint64_t sub_220413450()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t getEnumTagSinglePayload for CATIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 7)
    goto LABEL_17;
  if (a2 + 249 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 249) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 249;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 249;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 249;
  }
LABEL_17:
  v6 = ((*a1 >> 4) & 6 | (*a1 >> 7)) ^ 7;
  if (v6 >= 6)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for CATIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 249 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 249) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 6)
    return ((uint64_t (*)(void))((char *)&loc_220413764 + 4 * byte_220444717[v4]))();
  *a1 = a2 - 7;
  return ((uint64_t (*)(void))((char *)sub_220413798 + 4 * byte_220444712[v4]))();
}

uint64_t sub_220413798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204137A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2204137A8);
  return result;
}

uint64_t sub_2204137C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2204137C8);
  *(_BYTE *)result = 32 * (((-a2 >> 1) & 3) - 4 * a2);
  return result;
}

uint64_t sub_2204137CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204137D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for CATIdentifier(unsigned __int8 *a1)
{
  return *a1 >> 7;
}

_BYTE *destructiveProjectEnumData for CATIdentifier(_BYTE *result)
{
  *result &= ~0x80u;
  return result;
}

_BYTE *destructiveInjectEnumTag for CATIdentifier(_BYTE *result, char a2)
{
  *result = *result & 0x1F | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for CATIdentifier()
{
  return &type metadata for CATIdentifier;
}

uint64_t getEnumTagSinglePayload for SharingCATFamily(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE3)
    goto LABEL_17;
  if (a2 + 29 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 29) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 29;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 29;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 29;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1E;
  v8 = v6 - 30;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingCATFamily(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 29 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 29) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE2)
    return ((uint64_t (*)(void))((char *)&loc_2204138FC + 4 * byte_220444721[v4]))();
  *a1 = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_220413930 + 4 * byte_22044471C[v4]))();
}

uint64_t sub_220413930(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_220413938(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x220413940);
  return result;
}

uint64_t sub_22041394C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x220413954);
  *(_BYTE *)result = a2 + 29;
  return result;
}

uint64_t sub_220413958(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220413960(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingCATFamily()
{
  return &type metadata for SharingCATFamily;
}

uint64_t getEnumTagSinglePayload for ButtonLabelsCATFamily(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonLabelsCATFamily(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_220413A58 + 4 * byte_22044472B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_220413A8C + 4 * byte_220444726[v4]))();
}

uint64_t sub_220413A8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_220413A94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x220413A9CLL);
  return result;
}

uint64_t sub_220413AA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x220413AB0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_220413AB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220413ABC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonLabelsCATFamily()
{
  return &type metadata for ButtonLabelsCATFamily;
}

unint64_t lazy protocol witness table accessor for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily;
  if (!lazy protocol witness table cache variable for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ButtonLabelsCATFamily, &type metadata for ButtonLabelsCATFamily);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SharingCATFamily(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = SharingCATFamily.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == SharingCATFamily.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingCATFamily()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SharingCATFamily.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SharingCATFamily()
{
  unsigned __int8 *v0;

  SharingCATFamily.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingCATFamily()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SharingCATFamily.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SharingCATFamily@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized SharingCATFamily.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SharingCATFamily@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = SharingCATFamily.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingCATFamily and conformance SharingCATFamily()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingCATFamily and conformance SharingCATFamily;
  if (!lazy protocol witness table cache variable for type SharingCATFamily and conformance SharingCATFamily)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingCATFamily, &type metadata for SharingCATFamily);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingCATFamily and conformance SharingCATFamily);
  }
  return result;
}

unint64_t specialized ButtonLabelsCATFamily.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ButtonLabelsCATFamily.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t specialized SharingCATFamily.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1E)
    return 30;
  else
    return v0;
}

uint64_t dispatch thunk of ScreenSharingCallManaging.currentShareStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScreenSharingCallManaging.isScreenShareSupportingCallSalient()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScreenSharingCallManagingInternal.getRemoteCallParticipantHandles()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SharePlayHelping.appSupportsSharePlay(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

id LSPropertyList.contains(entitlement:)()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v1 = Entitlement.rawValue.getter();
  v2 = (void *)MEMORY[0x2207E3D14](v1);
  swift_bridgeObjectRelease();
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v3 = objc_msgSend(v0, sel_objectForKey_ofClass_, v2, swift_getObjCClassFromMetadata());

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    outlined destroy of Any?((uint64_t)v8);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v4 = objc_msgSend(v6, sel_BOOLValue);

  return v4;
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x2207E3D14]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t SharePlayHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SharePlayHelper()
{
  return objc_opt_self();
}

uint64_t specialized SharePlayHelper.appSupportsSharePlay(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  void (*v19)(char *, _QWORD, uint64_t);
  id v20;
  unsigned int v21;
  void (*v22)(char *, uint64_t);
  unsigned int v23;
  unsigned int v24;
  char v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  v4 = type metadata accessor for Entitlement();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v37 = a1;
  if (v12)
  {
    v35 = v5;
    v36 = v9;
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v39[0] = v14;
    *(_DWORD *)v13 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v15 = static SharePlayHelper.typeName;
    v16 = unk_2555D1E60;
    swift_bridgeObjectRetain();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    a1 = v37;
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a2, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2203F9000, v10, v11, "%s: Checking if %s supports SharePlay", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v14, -1, -1);
    MEMORY[0x2207E453C](v13, -1, -1);

    v5 = v35;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for LSBundleRecord);
  swift_bridgeObjectRetain();
  v17 = @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  v18 = objc_msgSend(v17, sel_entitlements);

  v19 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v19(v7, *MEMORY[0x24BE19E90], v4);
  v20 = v18;
  v21 = LSPropertyList.contains(entitlement:)();
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v7, v4);
  v19(v7, *MEMORY[0x24BE19E80], v4);
  v23 = LSPropertyList.contains(entitlement:)();
  v22(v7, v4);
  v19(v7, *MEMORY[0x24BE19E78], v4);
  v24 = LSPropertyList.contains(entitlement:)();

  v22(v7, v4);
  LODWORD(v36) = v21;
  LODWORD(v35) = v23;
  v25 = v21 | v23 | v24;
  swift_bridgeObjectRetain_n();
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v34 = v24;
    v28 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v39[0] = v29;
    *(_DWORD *)v28 = 136316418;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v30 = static SharePlayHelper.typeName;
    v31 = unk_2555D1E60;
    swift_bridgeObjectRetain();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a2, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 22) = 1024;
    LODWORD(v38) = v25 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 28) = 1024;
    LODWORD(v38) = v36 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 34) = 1024;
    LODWORD(v38) = v35 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 40) = 1024;
    LODWORD(v38) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2203F9000, v26, v27, "%s: %s supports SharePlay: %{BOOL}d\nsupports public API: %{BOOL}d\nsupports deprecated public API %{BOOL}d\nsupports private API %{BOOL}d", (uint8_t *)v28, 0x2Eu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v29, -1, -1);
    MEMORY[0x2207E453C](v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v25 & 1;
}

uint64_t type metadata accessor for LSBundleRecord(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for StopSharingTargetResolutionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_220414940 + 4 * byte_2204449B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_220414960 + 4 * byte_2204449B5[v4]))();
}

_BYTE *sub_220414940(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_220414960(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_220414968(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_220414970(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_220414978(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_220414980(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StopSharingTargetResolutionError()
{
  return &type metadata for StopSharingTargetResolutionError;
}

unint64_t lazy protocol witness table accessor for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for StopSharingTargetResolutionError, &type metadata for StopSharingTargetResolutionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for StopSharingTargetResolutionError, &type metadata for StopSharingTargetResolutionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError);
  }
  return result;
}

uint64_t dispatch thunk of CommonConfirmationContextProviding.currentlySharedTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext.EntityConfirmationContext(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *((_QWORD *)a1 + 1);
  v3 = a1[16];
  if (a1[1])
    v4 = 256;
  else
    v4 = 0;
  v5 = v4 | *a1;
  if (a1[2])
    v6 = 0x10000;
  else
    v6 = 0;
  if (a1[3])
    v7 = 0x1000000;
  else
    v7 = 0;
  v8 = v5 | v6 | v7;
  if (a2[1])
    v9 = 256;
  else
    v9 = 0;
  v10 = v9 | *a2;
  if (a2[2])
    v11 = 0x10000;
  else
    v11 = 0;
  if (a2[3])
    v12 = 0x1000000;
  else
    v12 = 0;
  return specialized static ConfirmationContext.EntityConfirmationContext.== infix(_:_:)(v8, v2, v3, v10 | v11 | v12, *((_QWORD *)a2 + 1), a2[16]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unint64_t v6;
  int v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE *)(a1 + 8);
  v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  if (v4)
  {
    if (!v6 || (specialized static Array<A>.== infix(_:_:)(v4, v6) & 1) == 0)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  if ((v5 & 1) != 0)
  {
    if (v7)
      return 1;
  }
  else if ((v7 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  return specialized static ConfirmationContext.AppConfirmationContext.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext(uint64_t a1, uint64_t a2)
{
  _BYTE v4[56];
  _BYTE v5[56];

  outlined init with take of ConfirmationContext(a1, (uint64_t)v4);
  outlined init with take of ConfirmationContext(a2, (uint64_t)v5);
  return specialized static ConfirmationContext.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t specialized static ConfirmationContext.AppConfirmationContext.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (a3)
    {
      if (!a7 || (specialized static Array<A>.== infix(_:_:)(a3, a7) & 1) == 0)
        return 0;
    }
    else if (a7)
    {
      return 0;
    }
    if ((a4 & 1) != 0)
    {
      if ((a8 & 1) == 0)
        return 0;
    }
    else if ((a8 & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

BOOL specialized static ConfirmationContext.EntityConfirmationContext.== infix(_:_:)(unsigned int a1, uint64_t a2, char a3, unsigned int a4, unint64_t a5, char a6)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)veorq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a4), (int8x16_t)xmmword_220444AF0)), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a1), (int8x16_t)xmmword_220444AF0))))) & 1) != 0)return 0;
  if (a2)
  {
    if (!a5 || (specialized static Array<A>.== infix(_:_:)(a2, a5) & 1) == 0)
      return 0;
  }
  else if (a5)
  {
    return 0;
  }
  if ((a3 & 1) == 0)
    return (a6 & 1) == 0;
  return (a6 & 1) != 0;
}

uint64_t specialized static ConfirmationContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  uint64_t v56;
  unsigned __int8 v57;

  outlined init with take of ConfirmationContext(a1, (uint64_t)&v48);
  v3 = v57;
  v4 = v57 >> 6;
  if (v4)
  {
    if (v4 != 1)
    {
      v57 &= 0x3Fu;
      v24 = v48;
      v25 = v49;
      v26 = v50;
      v27 = v51;
      outlined init with take of ConfirmationContext(a2, (uint64_t)&v38);
      if ((v47 & 0xC0) != 0x80)
        return 0;
      v47 &= 0x3Fu;
      v28 = v40;
      v29 = v41;
      if ((v24 != v38 || v25 != v39) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        return 0;
      if (v26)
      {
        if (!v28 || (specialized static Array<A>.== infix(_:_:)(v26, v28) & 1) == 0)
          return 0;
      }
      else if (v28)
      {
        return 0;
      }
      if ((v27 & 1) != 0)
      {
        if ((v29 & 1) == 0)
          return 0;
      }
      else if ((v29 & 1) != 0)
      {
        return 0;
      }
      return 1;
    }
    v57 &= 0x3Fu;
    v5 = v48;
    v6 = v49;
    outlined init with take of ConfirmationContext(a2, (uint64_t)&v38);
    if ((v47 & 0xC0) != 0x40)
      return 0;
    v47 &= 0x3Fu;
    v7 = v39;
    if (v5)
    {
      if (!v38 || (specialized static Array<A>.== infix(_:_:)(v5, v38) & 1) == 0)
        return 0;
    }
    else if (v38)
    {
      return 0;
    }
    if ((v6 & 1) != 0)
      return (v7 & 1) != 0;
    return (v7 & 1) == 0;
  }
  v57 &= 0x3Fu;
  v8 = v48;
  v37 = v49;
  v10 = v50;
  v9 = v51;
  v11 = v52;
  v12 = v53;
  v13 = v54;
  v14 = v55;
  v15 = v56;
  outlined init with take of ConfirmationContext(a2, (uint64_t)&v38);
  v7 = v47;
  if (v47 > 0x3Fu)
    return 0;
  v36 = v15;
  v34 = v12;
  v35 = v11;
  v32 = v13;
  v30 = v14;
  v16 = v40;
  v17 = v41;
  v18 = v42;
  v33 = v43;
  v31 = v44;
  v19 = v45;
  v20 = v46;
  if (v8 == v38 && v37 == v39 || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v21 & 1) != 0))
  {
    if (v10 == v16 && v9 == v17 || (v23 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v23 & 1) != 0))
    {
      if (v35 != v18 || ((v34 ^ v33) & 1) != 0 || ((v32 ^ v31) & 1) != 0 || ((v30 ^ v19) & 1) != 0)
        return 0;
      if (v36)
      {
        if (!v20 || (specialized static Array<A>.== infix(_:_:)(v36, v20) & 1) == 0)
          return 0;
      }
      else if (v20)
      {
        return 0;
      }
      if ((v3 & 1) != 0)
        return (v7 & 1) != 0;
      return (v7 & 1) == 0;
    }
  }
  return result;
}

void specialized static ConfirmationContext.getCurrentlySharedTarget(in:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 104))(v1, v2);
  v4 = v3;
  if (v3)
  {
    if ((objc_msgSend(v3, sel_isWindowed) & 1) != 0)
    {
      lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
      swift_allocError();
      swift_willThrow();
    }

  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12 = v9;
      *(_DWORD *)v8 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v10 = static ConfirmationContext.typeName;
      v11 = *(_QWORD *)algn_2555D1F38;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v6, v7, "%s: The user is not currently sharing anything", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v9, -1, -1);
      MEMORY[0x2207E453C](v8, -1, -1);
    }

  }
}

uint64_t specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v8[8] = a8;
  v8[9] = v11;
  v8[6] = a5;
  v8[7] = a7;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  v8[10] = type metadata accessor for ShareTarget();
  v8[11] = swift_task_alloc();
  v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v8[12] = v9;
  v8[13] = *(_QWORD *)(v9 - 8);
  v8[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:)()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  specialized static ConfirmationContext.getCurrentlySharedTarget(in:)(*(_QWORD **)(v0 + 64));
  v2 = v1 & 1;
  if (*(_QWORD *)(v0 + 48))
  {
    outlined init with copy of ShareTarget(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 88));
    if (swift_getEnumCaseMultiPayload())
    {
      v3 = *(_QWORD *)(v0 + 88);
      v4 = *(_QWORD *)(v0 + 32);
      __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 + 64));
      outlined destroy of ShareTarget(v4);
      outlined destroy of ShareTarget(v3);
      v5 = 0;
      v6 = 0;
      v7 = *(_QWORD *)(v0 + 48);
      v8 = *(_QWORD *)(v0 + 56);
      v31 = 0x80;
      v29 = *(_QWORD *)(v0 + 40);
    }
    else
    {
      v31 = v2;
      v11 = *(_QWORD *)(v0 + 104);
      v10 = *(_QWORD *)(v0 + 112);
      v13 = *(_QWORD *)(v0 + 88);
      v12 = *(_QWORD *)(v0 + 96);
      v15 = *(_QWORD *)(v0 + 40);
      v14 = *(_QWORD *)(v0 + 48);
      v16 = *(_QWORD **)(v0 + 24);
      v28 = *(_QWORD *)(v0 + 64);
      v30 = *(_QWORD *)(v0 + 32);
      swift_bridgeObjectRetain();
      swift_release();
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v13 + *(int *)(v17 + 48), v12);
      v18 = v16[3];
      v19 = v16[4];
      __swift_project_boxed_opaque_existential_1(v16, v18);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 224))(v18, v19);
      LOBYTE(v15) = specialized SharePlayHelper.appSupportsSharePlay(_:)(v15, v14);
      v21 = UsoEntity_common_AttachmentType.DefinedValues.preferSharingInCall.getter();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v28);
      outlined destroy of ShareTarget(v30);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      v29 = 0;
      v22 = 256;
      if ((v15 & 1) == 0)
        v22 = 0;
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
      v24 = 0x10000;
      if ((v21 & 1) == 0)
        v24 = 0;
      v5 = v23 | v24;
      v2 = *(_QWORD *)(v0 + 48);
      v6 = *(_QWORD *)(v0 + 56);
      v8 = *(_QWORD *)(v0 + 40);
      v7 = 0xE000000000000000;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 32);
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 + 64));
    outlined destroy of ShareTarget(v9);
    v8 = 0;
    v5 = 0;
    v6 = 0;
    v29 = *(_QWORD *)(v0 + 56);
    v31 = 64;
    v7 = v2;
    v2 = 0;
  }
  v26 = *(_QWORD *)(v0 + 16);
  v25 = *(_QWORD *)(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 + 72));
  __swift_destroy_boxed_opaque_existential_1(v25);
  swift_task_dealloc();
  swift_task_dealloc();
  *(_QWORD *)v26 = v29;
  *(_QWORD *)(v26 + 8) = v7;
  *(_QWORD *)(v26 + 16) = v8;
  *(_QWORD *)(v26 + 24) = v2;
  *(_QWORD *)(v26 + 32) = v5;
  *(_QWORD *)(v26 + 40) = v6;
  *(_BYTE *)(v26 + 48) = v31;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for ConfirmationContext(uint64_t a1)
{
  return outlined consume of ConfirmationContext(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for ConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of ConfirmationContext(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for ConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of ConfirmationContext(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of ConfirmationContext(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for ConfirmationContext(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of ConfirmationContext(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTag for ConfirmationContext(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 6;
}

uint64_t destructiveProjectEnumData for ConfirmationContext(uint64_t result)
{
  *(_BYTE *)(result + 48) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for ConfirmationContext(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 48) & 1 | (a2 << 6);
  *(_QWORD *)(result + 32) &= 0x1010101uLL;
  *(_BYTE *)(result + 48) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext()
{
  return &type metadata for ConfirmationContext;
}

uint64_t destroy for ConfirmationContext.AppConfirmationContext()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationContext.AppConfirmationContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationContext.AppConfirmationContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext.AppConfirmationContext()
{
  return &type metadata for ConfirmationContext.AppConfirmationContext;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ConfirmationContext.ScreenConfirmationContext()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationContext.ScreenConfirmationContext(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationContext.ScreenConfirmationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext.ScreenConfirmationContext()
{
  return &type metadata for ConfirmationContext.ScreenConfirmationContext;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfirmationContext.EntityConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationContext.EntityConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ConfirmationContext.EntityConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationContext.EntityConfirmationContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationContext.EntityConfirmationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext.EntityConfirmationContext()
{
  return &type metadata for ConfirmationContext.EntityConfirmationContext;
}

unint64_t ValidateCallStatusFlow.ValidationResult.description.getter(char a1)
{
  unint64_t v1;
  Swift::String v3;
  Swift::String v4;

  v1 = 0xD000000000000015;
  if (a1 != 5)
  {
    _StringGuts.grow(_:)(33);
    v3._countAndFlagsBits = 0xD00000000000001ELL;
    v3._object = (void *)0x8000000220448370;
    String.append(_:)(v3);
    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(a1);
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return 0;
  }
  return v1;
}

unint64_t ValidateCallStatusFlow.ValidationResult.ValidationFailureReason.description.getter(char a1)
{
  if (a1 != 4)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  return 0xD00000000000001ELL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 4 && v3 != 4)
    specialized == infix<A>(_:_:)(v2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateCallStatusFlow.ValidationResult.ValidationFailureReason()
{
  char *v0;

  return ValidateCallStatusFlow.ValidationResult.ValidationFailureReason.description.getter(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValidateCallStatusFlow.ValidationResult(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 5)
  {
    if (v3 == 5)
      return 1;
  }
  else if (v3 != 5)
  {
    if (v2 == 4)
    {
      if (v3 == 4)
        return 1;
    }
    else if (v3 != 4)
    {
      specialized == infix<A>(_:_:)(v2);
      if ((v4 & 1) != 0)
        return 1;
    }
  }
  return 0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateCallStatusFlow.ValidationResult()
{
  char *v0;

  return ValidateCallStatusFlow.ValidationResult.description.getter(*v0);
}

uint64_t ValidateCallStatusFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t ValidateCallStatusFlow.execute()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v36;
  os_log_type_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[6];
  v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 152))(v2, v3);
  if (one-time initialization token for default != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  v8 = 0x2555D0000uLL;
  if (os_log_type_enabled(v6, v7))
  {
    v37 = v7;
    v38 = v4;
    v9 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v40 = v36;
    *(_DWORD *)v9 = 136315906;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v10 = static ValidateCallStatusFlow.typeName;
    v11 = *(_QWORD *)algn_2555D1F58;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 1024;
    v13 = v1[6];
    v12 = v1[7];
    __swift_project_boxed_opaque_existential_1(v1 + 3, v13);
    *(_DWORD *)(v0 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 56))(v13, v12) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 18) = 2080;
    v15 = v1[6];
    v14 = v1[7];
    __swift_project_boxed_opaque_existential_1(v1 + 3, v15);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v15, v14);
    v17 = TUCallStatus.description.getter(v16);
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 28) = 2080;
    v4 = v38;
    v19 = ScreenShareAvailability.description.getter(v38);
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v6, v37, "%s: Call/device allows screen sharing: %{BOOL}d, call status: %s -> derived screen sharing availability: %s", (uint8_t *)v9, 0x26u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v36, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);

    v8 = 0x2555D0000;
  }
  else
  {
    swift_release_n();

  }
  if (v4 == 5)
    v21 = 4;
  else
    v21 = v4;
  if (v4 == 4)
    v22 = 5;
  else
    v22 = v21;
  *(_BYTE *)(*(_QWORD *)(v0 + 32) + 16) = v22;
  swift_retain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v39 = v26;
    *(_DWORD *)v25 = 136315394;
    if (*(_QWORD *)(v8 + 3632) != -1)
      swift_once();
    v27 = 0xD000000000000015;
    v28 = *(_QWORD *)(v0 + 32);
    v29 = static ValidateCallStatusFlow.typeName;
    v30 = *(_QWORD *)algn_2555D1F58;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    v31 = *(unsigned __int8 *)(v28 + 16);
    if (v31 == 5)
    {
      v32 = 0x8000000220448390;
    }
    else
    {
      v40 = 0;
      v41 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      v33._countAndFlagsBits = 0xD00000000000001ELL;
      v33._object = (void *)0x8000000220448370;
      String.append(_:)(v33);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v31);
      v34._countAndFlagsBits = 41;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      v27 = v40;
      v32 = v41;
    }
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v32, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_2203F9000, v23, v24, "%s: Completing flow with exit value: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v26, -1, -1);
    MEMORY[0x2207E453C](v25, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  static ExecuteResponse.complete()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ValidateCallStatusFlow.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ValidateCallStatusFlow()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    if (*a1 <= 4u)
      v6 = 4;
    else
      v6 = *a1;
    v7 = v6 - 5;
    if (*a1 < 4u)
      v8 = -1;
    else
      v8 = v7;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2204164A0 + 4 * byte_220444D14[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_220416558 + 4 * byte_220444D1E[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_22041658C + 4 * byte_220444D19[v5]))();
}

uint64_t sub_22041658C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_220416594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22041659CLL);
  return result;
}

uint64_t sub_2204165A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2204165B0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2204165B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204165BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ValidateCallStatusFlow.ValidationResult(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;

  if (*a1 <= 4u)
    v1 = 4;
  else
    v1 = *a1;
  v2 = v1 - 4;
  if (*a1 >= 4u)
    return v2;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for ValidateCallStatusFlow.ValidationResult(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 4;
  return result;
}

ValueMetadata *type metadata accessor for ValidateCallStatusFlow.ValidationResult()
{
  return &type metadata for ValidateCallStatusFlow.ValidationResult;
}

uint64_t protocol witness for Flow.execute() in conformance ValidateCallStatusFlow(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized ValidateCallStatusFlow.on(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Input();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static ValidateCallStatusFlow.typeName;
    v12 = *(_QWORD *)algn_2555D1F58;
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2203F9000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v10, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t getEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    v7 = v6 >= 4;
    v8 = v6 - 4;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_22041697C + 4 * byte_220444D23[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_220416A24 + 4 * byte_220444D2D[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_220416A58 + 4 * byte_220444D28[v5]))();
}

uint64_t sub_220416A58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_220416A60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x220416A68);
  return result;
}

uint64_t sub_220416A74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x220416A7CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_220416A80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220416A88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason()
{
  return &type metadata for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason;
}

uint64_t type metadata completion function for PromptForConfirmationFlowWrapper()
{
  return swift_initClassMetadata2();
}

uint64_t PromptForConfirmationFlowWrapper.exitValue.getter()
{
  return PromptForConfirmationFlowAsync.exitValue.getter();
}

uint64_t PromptForConfirmationFlowWrapper.on(input:)()
{
  return PromptForConfirmationFlowAsync.on(input:)() & 1;
}

uint64_t PromptForConfirmationFlowWrapper.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t PromptForConfirmationFlowWrapper.execute()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = PromptForValueFlowWrapper.execute();
  return PromptForConfirmationFlowAsync.execute()();
}

uint64_t type metadata accessor for PromptForConfirmationFlowWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromptForConfirmationFlowWrapper);
}

uint64_t protocol witness for Flow.on(input:) in conformance PromptForConfirmationFlowWrapper<A>()
{
  return PromptForConfirmationFlowWrapper.on(input:)() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance PromptForConfirmationFlowWrapper<A>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PromptForConfirmationFlowWrapper<A>()
{
  return PromptForConfirmationFlowWrapper.exitValue.getter();
}

id one-time initialization function for bundle()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for DialogExecutor();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static DialogExecutor.bundle = (uint64_t)result;
  return result;
}

unint64_t DialogExecutor.DialogExecutorError.description.getter(char a1)
{
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = CATIdentifier.stringValue.getter(a1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000002ALL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DialogExecutor.DialogExecutorError()
{
  char *v0;

  return DialogExecutor.DialogExecutorError.description.getter(*v0);
}

uint64_t type metadata accessor for DialogExecutor()
{
  return objc_opt_self();
}

uint64_t specialized DialogExecutor.execute(catId:parameters:globals:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 64) = a3;
  *(_BYTE *)(v3 + 120) = a1;
  v4 = type metadata accessor for CATOption();
  *(_QWORD *)(v3 + 72) = v4;
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 88) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized DialogExecutor.execute(catId:parameters:globals:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for CATDialog();
  if (one-time initialization token for bundle != -1)
    swift_once();
  CATIdentifier.stringValue.getter(*(_BYTE *)(v0 + 120));
  *(_QWORD *)(v0 + 96) = v1;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  static CATOption.defaultMode.getter();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v2;
  *v2 = v0;
  v2[1] = specialized DialogExecutor.execute(catId:parameters:globals:);
  return static CATDialog.execute(bundle:catId:parameters:globals:callback:options:)();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized DialogExecutor.execute(catId:parameters:globals:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 112) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 80) + 8))(*(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 72));
  outlined destroy of CatCallable?(v4 + 16);
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t specialized DialogExecutor.executeAsLabel(catId:parameters:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a2;
  *(_BYTE *)(v2 + 88) = a1;
  v3 = type metadata accessor for ResponseMode();
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 40) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized DialogExecutor.executeAsLabel(catId:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (objc_class *)type metadata accessor for CATGlobals();
  static CATGlobals.defaultBuilder()();
  static ResponseMode.displayOnly.getter();
  *(_QWORD *)(v0 + 48) = dispatch thunk of CATGlobals.Builder.withResponseMode(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = objc_allocWithZone(v4);
  swift_retain();
  v6 = CATGlobals.init(builder:)();
  *(_QWORD *)(v0 + 56) = v6;
  v9 = (char *)&async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:)
     + async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v7;
  *v7 = v0;
  v7[1] = specialized DialogExecutor.executeAsLabel(catId:parameters:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v9)(*(unsigned __int8 *)(v0 + 88), *(_QWORD *)(v0 + 16), v6);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized DialogExecutor.executeAsLabel(catId:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

void specialized DialogExecutor.executeAsLabel(catId:parameters:)()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  _BYTE *v13;

  v1 = objc_msgSend(*(id *)(v0 + 72), sel_dialog);
  type metadata accessor for DialogElement();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    v11 = *(void **)(v0 + 72);
    v12 = *(_BYTE *)(v0 + 88);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError();
    swift_allocError();
    *v13 = v12;
    swift_willThrow();

    swift_release();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_11;
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v3 = (id)MEMORY[0x2207E3F60](0, v2);
LABEL_6:
    v4 = v3;
    swift_bridgeObjectRelease();
    v5 = objc_msgSend(v4, sel_fullPrint);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {

      swift_release();
      swift_task_dealloc();
      (*(void (**)(uint64_t, unint64_t))(v0 + 8))(v6, v8);
      return;
    }
    goto LABEL_11;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(id *)(v2 + 32);
    goto LABEL_6;
  }
  __break(1u);
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t result;

  result = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError;
  if (!lazy protocol witness table cache variable for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for DialogExecutor.DialogExecutorError, &type metadata for DialogExecutor.DialogExecutorError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError);
  }
  return result;
}

uint64_t outlined destroy of CatCallable?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatCallable?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DialogExecutor.DialogExecutorError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 249 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 249) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 6)
    return ((uint64_t (*)(void))((char *)&loc_220417494 + 4 * byte_220444FB5[v4]))();
  *a1 = a2 - 7;
  return ((uint64_t (*)(void))((char *)sub_2204174C8 + 4 * byte_220444FB0[v4]))();
}

uint64_t sub_2204174C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204174D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2204174D8);
  return result;
}

uint64_t sub_2204174F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2204174F8);
  *(_BYTE *)result = 32 * (((-a2 >> 1) & 3) - 4 * a2);
  return result;
}

uint64_t sub_2204174FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220417504(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogExecutor.DialogExecutorError()
{
  return &type metadata for DialogExecutor.DialogExecutorError;
}

uint64_t ShareStatus.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*((_BYTE *)v0 + 32))
  {
    _StringGuts.grow(_:)(29);
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static ShareStatus.typeName;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = v11;
    v12._countAndFlagsBits = 0xD000000000000018;
    v12._object = (void *)0x8000000220448430;
    String.append(_:)(v12);
    if (one-time initialization token for typeName != -1)
      swift_once();
    v20 = static ScreenShareType.typeName;
    v21 = *(_QWORD *)algn_2555D13E8;
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = 0x6E65657263732ELL;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    v9 = v20;
    v10 = v21;
    goto LABEL_11;
  }
  v2 = *v0;
  v1 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  if (*((_BYTE *)v0 + 32) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(44);
    if (one-time initialization token for typeName != -1)
      swift_once();
    v5 = static ShareStatus.typeName;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = v5;
    v6._countAndFlagsBits = 0xD000000000000019;
    v6._object = (void *)0x8000000220448410;
    String.append(_:)(v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v7._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x656C646E7562202CLL;
    v8._object = (void *)0xEC000000203A6449;
    String.append(_:)(v8);
    v9 = String.init<A>(describing:)();
LABEL_11:
    String.append(_:)(*(Swift::String *)&v9);
    swift_bridgeObjectRelease();
    v14 = 41;
    v15 = 0xE100000000000000;
    goto LABEL_12;
  }
  if (v4 | v1 | v2 | v3)
  {
    if (v2 == 1 && (v4 | v1 | v3) == 0)
    {
      _StringGuts.grow(_:)(20);
      if (one-time initialization token for typeName != -1)
        swift_once();
      v19 = static ShareStatus.typeName;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v22 = v19;
      v14 = 0xD000000000000012;
      v15 = 0x8000000220448470;
    }
    else
    {
      _StringGuts.grow(_:)(18);
      if (one-time initialization token for typeName != -1)
        swift_once();
      v18 = static ShareStatus.typeName;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v22 = v18;
      v15 = 0x8000000220448450;
      v14 = 0xD000000000000010;
    }
  }
  else
  {
    if (one-time initialization token for typeName != -1)
      swift_once();
    v22 = static ShareStatus.typeName;
    swift_bridgeObjectRetain();
    v14 = 0x76697463616E692ELL;
    v15 = 0xE900000000000065;
  }
LABEL_12:
  String.append(_:)(*(Swift::String *)&v14);
  return v22;
}

uint64_t specialized static ShareStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v26;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v8 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a1 + 32))
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      outlined consume of ShareStatus(*(_QWORD *)a1, v2, v4, v5, 0);
      v13 = v8;
      v14 = v7;
      v15 = v9;
      v16 = v10;
      v17 = 0;
LABEL_33:
      outlined consume of ShareStatus(v13, v14, v15, v16, v17);
      return 1;
    }
    goto LABEL_38;
  }
  if (v6 != 1)
  {
    if (!(v4 | v2 | v3 | v5))
    {
      if (v11 != 2 || (v9 | v7 | v8 | v10) != 0)
        goto LABEL_38;
      outlined consume of ShareStatus(0, 0, 0, 0, 2);
      v13 = 0;
      goto LABEL_32;
    }
    if (v3 == 1 && (v4 | v2 | v5) == 0)
    {
      if (v11 == 2 && v8 == 1 && !(v9 | v7 | v10))
      {
        v12 = 1;
        outlined consume of ShareStatus(1, 0, 0, 0, 2);
        outlined consume of ShareStatus(1, 0, 0, 0, 2);
        return v12;
      }
      goto LABEL_38;
    }
    if (v11 == 2 && v8 == 2 && !(v9 | v7 | v10))
    {
      outlined consume of ShareStatus(2, 0, 0, 0, 2);
      v13 = 2;
LABEL_32:
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      goto LABEL_33;
    }
LABEL_38:
    outlined copy of ShareStatus(v8, v7, v9, v10, v11);
    outlined consume of ShareStatus(v3, v2, v4, v5, v6);
    v20 = v8;
    v21 = v7;
    v22 = v9;
    v23 = v10;
    v24 = v11;
LABEL_39:
    outlined consume of ShareStatus(v20, v21, v22, v23, v24);
    return 0;
  }
  if (v11 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_38;
  }
  if (!v2)
  {
    if (!v7)
      goto LABEL_9;
    goto LABEL_43;
  }
  if (!v7 || (v3 != v8 || v2 != v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_43:
    outlined copy of ShareStatus(v8, v7, v9, v10, 1);
    outlined copy of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v3, v2, v4, v5, 1);
    v20 = v8;
    v21 = v7;
    v22 = v9;
    v23 = v10;
    v24 = 1;
    goto LABEL_39;
  }
LABEL_9:
  if (!v5)
  {
    v12 = 1;
    outlined copy of ShareStatus(v8, v7, v9, v10, 1);
    outlined copy of ShareStatus(v3, v2, v4, 0, 1);
    swift_bridgeObjectRetain();
    outlined consume of ShareStatus(v3, v2, v4, 0, 1);
    outlined consume of ShareStatus(v8, v7, v9, v10, 1);
    if (!v10)
      return v12;
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v10)
  {
    outlined copy of ShareStatus(v8, v7, v9, 0, 1);
    outlined copy of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v3, v2, v4, v5, 1);
    v20 = v8;
    v21 = v7;
    v22 = v9;
    v23 = 0;
    v24 = 1;
    goto LABEL_39;
  }
  if (v4 != v9 || v5 != v10)
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v12 = 1;
    outlined copy of ShareStatus(v8, v7, v9, v10, 1);
    outlined copy of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v8, v7, v9, v10, 1);
    if ((v26 & 1) != 0)
      return v12;
    return 0;
  }
  v12 = 1;
  outlined copy of ShareStatus(v8, v7, v4, v5, 1);
  outlined copy of ShareStatus(v3, v2, v4, v5, 1);
  outlined consume of ShareStatus(v3, v2, v4, v5, 1);
  outlined consume of ShareStatus(v8, v7, v4, v5, 1);
  return v12;
}

uint64_t outlined copy of ShareStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ShareStatus(uint64_t a1)
{
  return outlined consume of ShareStatus(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of ShareStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ShareStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of ShareStatus(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ShareStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of ShareStatus(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of ShareStatus(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ShareStatus(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of ShareStatus(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ShareStatus(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for ShareStatus(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShareStatus()
{
  return &type metadata for ShareStatus;
}

uint64_t dispatch thunk of Converter.convert(utils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v11(a1, a2, a3, a4);
}

uint64_t type metadata completion function for ExpanseUIModelConverter.BinaryButtonSnippetModelConverter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter(319, a1[10], a1[12], a4);
  if (v7 <= 0x3F)
  {
    result = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter(319, a1[11], a1[13], v6);
    if (v8 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a1;
  return swift_task_switch();
}

uint64_t ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(char, uint64_t);

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 72) = v1;
  v4 = (uint64_t (*)(char, uint64_t))((char *)&async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:)
                                             + async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:);
  return v4(1, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 24) = v1;
  swift_bridgeObjectRetain();
  Loggable.init(wrappedValue:)();
  type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v2;
  Loggable.init(wrappedValue:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 88) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 96) = a2;
    *(_QWORD *)(v6 + 104) = a1;
  }
  return swift_task_switch();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t *ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v4;
  v6 = (uint64_t)v4 + *(_QWORD *)(*v4 + 112);
  v7 = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 96), a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (uint64_t)v4 + *(_QWORD *)(*v4 + 120);
  v10 = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter(0, *(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 104), v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  return v4;
}

uint64_t ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.deinit(a1, a2, a3, a4);
  return swift_deallocClassInstance();
}

void type metadata accessor for ExpanseUIModelConverter.BinaryButtonSnippetModelConverter()
{
  JUMPOUT(0x2207E441CLL);
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExpanseUIModelConverter.ButtonModelConverter);
}

uint64_t ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter);
}

uint64_t ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter);
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter()
{
  return swift_initClassMetadata2();
}

uint64_t outlined copy of ExpanseUIModelConverter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 1)
    return swift_retain();
  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for ExpanseUIModelConverter(uint64_t a1)
{
  return outlined consume of ExpanseUIModelConverter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of ExpanseUIModelConverter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 1)
    return swift_release();
  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ExpanseUIModelConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ExpanseUIModelConverter(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ExpanseUIModelConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ExpanseUIModelConverter(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ExpanseUIModelConverter(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ExpanseUIModelConverter(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ExpanseUIModelConverter(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModelConverter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ExpanseUIModelConverter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ExpanseUIModelConverter(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ExpanseUIModelConverter()
{
  return &type metadata for ExpanseUIModelConverter;
}

uint64_t type metadata completion function for ExpanseUIModelConverter.ButtonModelConverter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for CATExecutionInfo(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ExpanseUIModelConverter.ButtonModelConverter(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ~v6;
  v8 = ((v6 + 1) & ~v6) + *(_QWORD *)(v5 + 64);
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || (unint64_t)(v8 + 1) > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v6 + 16) & v7));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v5 + 16))((unint64_t)&a1[v6 + 1] & v7, ((unint64_t)a2 + v6 + 1) & v7);
    *((_BYTE *)v4 + v8) = *((_BYTE *)a2 + v8);
  }
  return v4;
}

_BYTE *initializeWithCopy for ExpanseUIModelConverter.ButtonModelConverter(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6);
  v7 = ((v6 + 1) & ~v6) + *(_QWORD *)(v5 + 64);
  a1[v7] = a2[v7];
  return a1;
}

_BYTE *assignWithCopy for ExpanseUIModelConverter.ButtonModelConverter(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6);
  v7 = ((v6 + 1) & ~v6) + *(_QWORD *)(v5 + 64);
  a1[v7] = a2[v7];
  return a1;
}

_BYTE *initializeWithTake for ExpanseUIModelConverter.ButtonModelConverter(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6);
  v7 = ((v6 + 1) & ~v6) + *(_QWORD *)(v5 + 64);
  a1[v7] = a2[v7];
  return a1;
}

_BYTE *assignWithTake for ExpanseUIModelConverter.ButtonModelConverter(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6);
  v7 = ((v6 + 1) & ~v6) + *(_QWORD *)(v5 + 64);
  a1[v7] = a2[v7];
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter.ButtonModelConverter(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 6)
    v6 = 6;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = ((v8 + 1) & ~v8) + *(_QWORD *)(v4 + 64);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_25;
  v11 = v9 + 1;
  v12 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)&a1[v11];
      if (!v13)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11])
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_25:
      if (v6 == v7)
      {
        if (v5 > 6)
        {
          return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v8 + 1] & ~v8);
        }
        else
        {
          v17 = *a1;
          if (((v17 >> 4) & 6) != 0)
            return 8 - ((v17 >> 4) & 6 | (v17 >> 7));
          else
            return 0;
        }
      }
      else
      {
        v18 = a1[v9];
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
    }
  }
  v13 = a1[v11];
  if (!a1[v11])
    goto LABEL_25;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v9 == -1)
    return v7 + v16 + 1;
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_220418AE4 + 4 * byte_220445120[(v11 - 1)]))();
}

void storeEnumTagSinglePayload for ExpanseUIModelConverter.ButtonModelConverter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t destroy for ExpanseUIModelConverter.Utils(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for ExpanseUIModelConverter.Utils(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for ExpanseUIModelConverter.Utils(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ExpanseUIModelConverter.Utils(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter.Utils(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModelConverter.Utils(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseUIModelConverter.Utils()
{
  return &type metadata for ExpanseUIModelConverter.Utils;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter()
{
  return &type metadata for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter;
}

uint64_t getEnumTagSinglePayload for Responses.Common.NotInCall()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.Common.NotInCall()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.Common.NotInCall(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.NotInCall);
}

uint64_t protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.AlreadySharingTarget()
{
  return 0;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.StartSharing.AlreadySharingTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v2 + *(int *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  *(_BYTE *)a2 = *(_BYTE *)v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingResponse.nlContextUpdate.getter in conformance Responses.StartSharing.NeedsTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of NLContextUpdate?(v2 + *(int *)(a1 + 24), a2);
}

uint64_t protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.AppNotInstalled(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  v3 = *v2;
  v4 = v2[1];
  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.StartSharing.ConfirmShareEntireScreen@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 28));
  return result;
}

double protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.ConfirmShareWithEveryoneInCall()
{
  uint64_t v0;
  double result;

  type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(0);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 16777219;
  *(_DWORD *)(v0 + 16) = 16777219;
  return result;
}

uint64_t Responses.StartSharing.ConfirmReadyToShare.uiModelConverter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + *(int *)(type metadata accessor for Responses.StartSharing.ConfirmReadyToShare(0) + 28);
  if (*(_BYTE *)v1 == 1)
  {
    type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(0);
    v2 = swift_allocObject();
    *(_DWORD *)(v2 + 16) = 16777219;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 8);
    v3 = *(_QWORD *)(v1 + 16);
    type metadata accessor for ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter(0);
    v2 = swift_allocObject();
    *(_BYTE *)(v2 + 16) = 2;
    *(_QWORD *)(v2 + 24) = v4;
    *(_QWORD *)(v2 + 32) = v3;
    *(_WORD *)(v2 + 40) = 0;
    *(_BYTE *)(v2 + 42) = 1;
    swift_bridgeObjectRetain();
  }
  return v2;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.StartSharing.ConfirmShareWithEveryoneInCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v2 + *(int *)(a1 + 28);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  *(_BYTE *)a2 = *(_BYTE *)v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.ConfirmReadyToShare()
{
  return Responses.StartSharing.ConfirmReadyToShare.uiModelConverter.getter();
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ConfirmShareWithEveryoneInCall()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ConfirmShareWithEveryoneInCall()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ConfirmShareWithEveryoneInCall);
}

void type metadata completion function for Responses.StartSharing.ConfirmShareWithEveryoneInCall()
{
  type metadata completion function for Responses.StartSharing.ConfirmShareWithEveryoneInCall();
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DialogPhase();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NLContextUpdate?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for NLContextUpdate?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for NLContextUpdate?)
  {
    type metadata accessor for NLContextUpdate();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NLContextUpdate?);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DialogPhase();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for NLContextUpdate();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v18 = a3[7];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    *v19 = *v20;
    v21 = *((_QWORD *)v20 + 2);
    *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
    *((_QWORD *)v19 + 2) = v21;
    *((_QWORD *)v19 + 3) = *((_QWORD *)v20 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for NLContextUpdate();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for Responses.StartSharing.ConfirmShareWithEveryoneInCall(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *v17 = *v18;
  v19 = *((_QWORD *)v18 + 2);
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  *((_QWORD *)v17 + 2) = v19;
  *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for Responses.StartSharing.ConfirmShareWithEveryoneInCall(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *v20 = a2[v19];
  *((_QWORD *)v20 + 1) = *(_QWORD *)&a2[v19 + 8];
  *((_QWORD *)v20 + 2) = *(_QWORD *)&a2[v19 + 16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 3) = *((_QWORD *)v21 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for Responses.StartSharing.ConfirmShareWithEveryoneInCall(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  return a1;
}

_BYTE *assignWithTake for Responses.StartSharing.ConfirmShareWithEveryoneInCall(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *v20 = *v21;
  v22 = *((_QWORD *)v21 + 2);
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  *((_QWORD *)v20 + 2) = v22;
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 3) = *((_QWORD *)v21 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ConfirmReadyToShare()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;

  v6 = type metadata accessor for DialogPhase();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[7] + 16);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ConfirmReadyToShare()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for DialogPhase();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[7] + 16) = a2;
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.ConfirmReadyToShare(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ConfirmReadyToShare);
}

_QWORD *initializeBufferWithCopyOfBuffer for Responses.StartSharing.ConfirmShareEntireScreen(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DialogPhase();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for NLContextUpdate();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return v4;
}

_BYTE *initializeWithCopy for Responses.StartSharing.ConfirmShareEntireScreen(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *assignWithCopy for Responses.StartSharing.ConfirmShareEntireScreen(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *initializeWithTake for Responses.StartSharing.ConfirmShareEntireScreen(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *assignWithTake for Responses.StartSharing.ConfirmShareEntireScreen(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ConfirmShareEntireScreen()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22041A1E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  v6 = type metadata accessor for DialogPhase();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(unsigned __int8 *)(a1 + a3[7]);
  if (v12 >= 2)
    return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ConfirmShareEntireScreen()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22041A2A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for DialogPhase();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[7]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ConfirmShareEntireScreen);
}

void type metadata completion function for Responses.StartSharing.ConfirmShareEntireScreen()
{
  type metadata completion function for Responses.StartSharing.ConfirmShareWithEveryoneInCall();
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.NeedsTarget(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DialogPhase();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for NLContextUpdate();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for NLContextUpdate();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

_BYTE *initializeWithCopy for Responses.StartSharing.NeedsTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

_BYTE *assignWithCopy for Responses.StartSharing.NeedsTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  v16 = v15(v12, 1, v13);
  if (!(_DWORD)v8)
  {
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

_BYTE *initializeWithTake for Responses.StartSharing.NeedsTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

_BYTE *assignWithTake for Responses.StartSharing.NeedsTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for NLContextUpdate();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  v16 = v15(v12, 1, v13);
  if (!(_DWORD)v8)
  {
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.NeedsTarget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22041AA18(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 6)
  {
    v4 = *a1;
    if (((v4 >> 4) & 6) != 0)
      return 8 - ((v4 >> 4) & 6 | (v4 >> 7));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for DialogPhase();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.NeedsTarget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_22041AAD0(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 6)
  {
    *result = 32 * (((-(int)a2 >> 1) & 3) - 4 * a2);
  }
  else
  {
    v8 = type metadata accessor for DialogPhase();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.NeedsTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.NeedsTarget);
}

void type metadata completion function for Responses.StartSharing.NeedsTarget()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DialogPhase();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NLContextUpdate?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.InterstitialStartingScreenSharing()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.InterstitialStartingScreenSharing()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.InterstitialStartingScreenSharing);
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.AlreadySharingTarget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.AlreadySharingTarget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.StartSharing.AlreadySharingTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.AlreadySharingTarget);
}

uint64_t type metadata completion function for Responses.StartSharing.AlreadySharingTarget()
{
  return type metadata completion function for Responses.StartSharing.AlreadySharingTarget();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DialogPhase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.AppNotInstalled(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DialogPhase();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = (uint64_t *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (char *)v4 + v12;
    v17 = (char *)a2 + v12;
    *v16 = *v17;
    v18 = *((_QWORD *)v17 + 2);
    *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
    *((_QWORD *)v16 + 2) = v18;
    *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.AppNotInstalled(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for Responses.StartSharing.AppNotInstalled(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  *v15 = *v16;
  v17 = *((_QWORD *)v16 + 2);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  *((_QWORD *)v15 + 2) = v17;
  *((_QWORD *)v15 + 3) = *((_QWORD *)v16 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for Responses.StartSharing.AppNotInstalled(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *v14 = *v15;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for Responses.StartSharing.AppNotInstalled(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  return a1;
}

_BYTE *assignWithTake for Responses.StartSharing.AppNotInstalled(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = *v17;
  v18 = *((_QWORD *)v17 + 2);
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  *((_QWORD *)v16 + 2) = v18;
  swift_bridgeObjectRelease();
  *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.AppNotInstalled()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22041B0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for DialogPhase();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.AppNotInstalled()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22041B170(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DialogPhase();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.AppNotInstalled(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.AppNotInstalled);
}

uint64_t type metadata completion function for Responses.StartSharing.AppNotInstalled()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DialogPhase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.AlreadySharingTarget(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DialogPhase();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    *v12 = *v13;
    v14 = *((_QWORD *)v13 + 2);
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    *((_QWORD *)v12 + 2) = v14;
    *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.AlreadySharingTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for Responses.StartSharing.AlreadySharingTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v13 = *((_QWORD *)v12 + 2);
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  *((_QWORD *)v11 + 2) = v13;
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for Responses.StartSharing.AlreadySharingTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for Responses.StartSharing.AlreadySharingTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  return a1;
}

_BYTE *assignWithTake for Responses.StartSharing.AlreadySharingTarget(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v13 = *((_QWORD *)v12 + 2);
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  *((_QWORD *)v11 + 2) = v13;
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.UnableToStartSharingTarget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_11Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for DialogPhase();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 16);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.UnableToStartSharingTarget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_12Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DialogPhase();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 16) = a2;
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.UnableToStartSharingTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.UnableToStartSharingTarget);
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.SingleWindowSharingUnsupported()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.SingleWindowSharingUnsupported()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.StartSharing.SingleWindowSharingUnsupported(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.SingleWindowSharingUnsupported);
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ShareRequestCancelled()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ShareRequestCancelled()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.StartSharing.ShareRequestCancelled(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ShareRequestCancelled);
}

uint64_t getEnumTagSinglePayload for Responses.Common.CallOnHold()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.Common.CallOnHold()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.Common.CallOnHold(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.CallOnHold);
}

uint64_t getEnumTagSinglePayload for Responses.Common.CallOutgoing1on1()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.Common.CallOutgoing1on1()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.Common.CallOutgoing1on1(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.CallOutgoing1on1);
}

uint64_t getEnumTagSinglePayload for Responses.Common.SharePlayUnsupported()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.Common.SharePlayUnsupported()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.Common.SharePlayUnsupported(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.SharePlayUnsupported);
}

uint64_t getEnumTagSinglePayload for Responses.Common.ScreenSharingUnsupported()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.Common.ScreenSharingUnsupported()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.Common.ScreenSharingUnsupported(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.ScreenSharingUnsupported);
}

uint64_t getEnumTagSinglePayload for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget);
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.Common.NotInCall(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for DialogPhase();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_BYTE *initializeWithCopy for Responses.Common.NotInCall(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for Responses.Common.NotInCall(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for Responses.Common.NotInCall(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for Responses.Common.NotInCall(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StopSharing.NothingBeingShared()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 6)
  {
    v4 = *a1;
    if (((v4 >> 4) & 6) != 0)
      return 8 - ((v4 >> 4) & 6 | (v4 >> 7));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for DialogPhase();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Responses.StopSharing.NothingBeingShared()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *__swift_store_extra_inhabitant_indexTm(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 6)
  {
    *result = 32 * (((-(int)a2 >> 1) & 3) - 4 * a2);
  }
  else
  {
    v7 = type metadata accessor for DialogPhase();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for Responses.StopSharing.NothingBeingShared(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StopSharing.NothingBeingShared);
}

uint64_t type metadata completion function for Responses.Common.NotInCall()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DialogPhase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Responses.Common.GenericError(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DialogPhase();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t destroy for Responses.Common.NotInCall(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for DialogPhase();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for Responses.Common.GenericError(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *assignWithCopy for Responses.Common.GenericError(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *initializeWithTake for Responses.Common.GenericError(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *assignWithTake for Responses.Common.GenericError(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DialogPhase();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.Common.GenericError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22041BF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for DialogPhase();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Responses.Common.GenericError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22041BFDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DialogPhase();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for Responses.Common.GenericError(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.GenericError);
}

uint64_t type metadata completion function for Responses.Common.GenericError()
{
  return type metadata completion function for Responses.StartSharing.AlreadySharingTarget();
}

unint64_t lazy protocol witness table accessor for type GenericErrorParams and conformance GenericErrorParams()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericErrorParams and conformance GenericErrorParams;
  if (!lazy protocol witness table cache variable for type GenericErrorParams and conformance GenericErrorParams)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for GenericErrorParams, &type metadata for GenericErrorParams);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams and conformance GenericErrorParams);
  }
  return result;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.Common.GenericError@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 24));
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingDialogParams and conformance SharingDialogParams()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingDialogParams and conformance SharingDialogParams;
  if (!lazy protocol witness table cache variable for type SharingDialogParams and conformance SharingDialogParams)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingDialogParams, &type metadata for SharingDialogParams);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams and conformance SharingDialogParams);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConfirmationDialogParams and conformance ConfirmationDialogParams()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfirmationDialogParams and conformance ConfirmationDialogParams;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams and conformance ConfirmationDialogParams)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmationDialogParams, &type metadata for ConfirmationDialogParams);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams and conformance ConfirmationDialogParams);
  }
  return result;
}

uint64_t protocol witness for SharingResponse.dialogPhase.getter in conformance Responses.StartSharing.AlreadySharingTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for DialogPhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for SharingResponse.nlContextUpdate.getter in conformance Responses.StartSharing.AlreadySharingTarget@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for NLContextUpdate();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t outlined init with copy of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t String.localizedAppDisplayName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for Locale();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  App.__allocating_init(appIdentifier:)();
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  AppInformationResolver.init(app:)();
  static Locale.current.getter();
  v4 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  else
    v7 = 0;
  if (v6)
    v8 = v6;
  else
    v8 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v7;
  if (!v9)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CATIdentifier(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = CATIdentifier.stringValue.getter(*a1);
  v5 = v4;
  if (v3 == CATIdentifier.stringValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t DismissSiriFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for AceOutput();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DismissSiriFlow.execute()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v14;
  _OWORD v16[2];
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_220443B20;
  *(_QWORD *)(v1 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81890]), sel_init);
  specialized Array._endMutation()();
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  AceOutput.init(commands:flowActivity:)();
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_QWORD *)&v16[0] = v6;
    *(_DWORD *)v5 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v7 = static DismissSiriFlow.typeName;
    v8 = unk_2555D30D0;
    swift_bridgeObjectRetain();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v3, v4, "%s: Dismissing Siri", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v6, -1, -1);
    MEMORY[0x2207E453C](v5, -1, -1);
  }

  v10 = v0[13];
  v9 = v0[14];
  v11 = v0[12];
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0[11] + 16), *(_QWORD *)(v0[11] + 40));
  v12 = MEMORY[0x24BE99088];
  v0[5] = v11;
  v0[6] = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v9, v11);
  v14 = (_QWORD *)swift_task_alloc();
  v0[16] = (uint64_t)v14;
  *v14 = v0;
  v14[1] = DismissSiriFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v2 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v6 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v8 = *(void **)(v0 + 136);
    v10 = static DismissSiriFlow.typeName;
    v9 = unk_2555D30D0;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 64) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v12;

    _os_log_impl(&dword_2203F9000, v4, v5, "%s: Error publishing SAUICloseAssistant command: %@", (uint8_t *)v6, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v7, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v18, -1, -1);
    MEMORY[0x2207E453C](v6, -1, -1);

  }
  else
  {
    v13 = *(void **)(v0 + 136);

  }
  v15 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 96);
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DismissSiriFlow.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DismissSiriFlow()
{
  return objc_opt_self();
}

uint64_t protocol witness for Flow.execute() in conformance DismissSiriFlow(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return DismissSiriFlow.execute()(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance DismissSiriFlow()
{
  type metadata accessor for DismissSiriFlow();
  return Flow<>.exitValue.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedShareTarget(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ResolvedShareTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for ResolvedShareTarget(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t destructiveInjectEnumTag for ResolvedShareTarget(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedShareTarget()
{
  return &type metadata for ResolvedShareTarget;
}

unint64_t ResolvedShareTarget.description.getter(uint64_t a1, void *a2, char a3)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  if (a2)
  {
    _StringGuts.grow(_:)(53);
    v6._object = (void *)0x8000000220448600;
    v6._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v6);
    v7._countAndFlagsBits = a1;
    v7._object = a2;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x6469666E6F63202CLL;
    v8._object = (void *)0xEE00203A65636E65;
    String.append(_:)(v8);
    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(a3);
    v9._countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return 0;
  }
  else
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    return 0xD000000000000047;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvedShareTarget()
{
  uint64_t v0;

  return ResolvedShareTarget.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  return specialized static ResolvedShareTarget.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

BOOL specialized static ResolvedShareTarget.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v8;
  _BOOL8 result;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (!a2)
    return a5 == 0;
  if (!a5)
    return 0;
  if (a1 == a4 && a2 == a5 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
  {
    v10 = a6;
    if (a3 == 2)
    {
      if (a6 == 2)
        return 1;
    }
    else if (a6 != 2)
    {
      if ((a3 & 1) != 0)
        v11 = 0xD000000000000012;
      else
        v11 = 0xD00000000000001FLL;
      if ((a3 & 1) != 0)
        v12 = 0x80000002204474A0;
      else
        v12 = 0x8000000220447480;
      if ((v10 & 1) != 0)
        v13 = 0xD000000000000012;
      else
        v13 = 0xD00000000000001FLL;
      if ((v10 & 1) != 0)
        v14 = 0x80000002204474A0;
      else
        v14 = 0x8000000220447480;
      if (v11 == v13 && v12 == v14)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        return 1;
    }
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Sharer()
{
  return &type metadata for Sharer;
}

void specialized Sharer.enableSharingOf(target:in:)(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;

  if (one-time initialization token for fullScreenAttributes != -1)
    swift_once();
  v2 = (void *)static TUCallScreenShareAttributes.fullScreenAttributes;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 72);
  v6 = v2;
  if ((v5(v3, v4) & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.default);
    v8 = v6;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v31 = v6;
      v11 = swift_slowAlloc();
      v12 = (_QWORD *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v33 = v29;
      *(_DWORD *)v11 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v14 = static Sharer.typeName;
      v13 = unk_2555D31B0;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2112;
      v15 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v12 = v8;

      _os_log_impl(&dword_2203F9000, v9, v10, "%s: Local participant already sharing - replacing attributes with %@", (uint8_t *)v11, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v12, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v29, -1, -1);
      MEMORY[0x2207E453C](v11, -1, -1);

      v6 = v31;
    }
    else
    {

    }
    v25 = a1[3];
    v26 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v25);
    (*(void (**)(id, uint64_t, uint64_t))(v26 + 112))(v8, v25, v26);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.default);
    v17 = v6;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v32 = v6;
      v20 = swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v33 = v30;
      *(_DWORD *)v20 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v22 = static Sharer.typeName;
      v23 = unk_2555D31B0;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2112;
      v24 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v21 = v17;

      _os_log_impl(&dword_2203F9000, v18, v19, "%s: Enabling screen sharing with attributes %@", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v21, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v30, -1, -1);
      MEMORY[0x2207E453C](v20, -1, -1);

      v6 = v32;
    }
    else
    {

    }
    v27 = a1[3];
    v28 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v27);
    (*(void (**)(id, uint64_t, uint64_t))(v28 + 128))(v17, v27, v28);
  }

}

void specialized Sharer.setScreenSharingEnabled(_:for:in:)(char a1, _QWORD *a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15 = v8;
    *(_DWORD *)v7 = 136315650;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v9 = static Sharer.typeName;
    v10 = unk_2555D31B0;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    if ((a1 & 1) != 0)
      v11 = 0x676E696C62616E45;
    else
      v11 = 0x6E696C6261736944;
    if ((a1 & 1) != 0)
      v12 = 0xE800000000000000;
    else
      v12 = 0xE900000000000067;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000220447A00, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2203F9000, v5, v6, "%s: %s sharing of %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v8, -1, -1);
    MEMORY[0x2207E453C](v7, -1, -1);
  }

  if ((a1 & 1) != 0)
  {
    specialized Sharer.enableSharingOf(target:in:)(a2);
  }
  else
  {
    v13 = a2[3];
    v14 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 136))(v13, v14);
  }
}

uint64_t protocol witness for ActivitySession.bundleId.getter in conformance TUConversationActivitySession()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_activity);
  v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for ActivitySession.sceneId.getter in conformance TUConversationActivitySession()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_persistentSceneIdentifier);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id protocol witness for ActivitySession.isLocallyInitiated.getter in conformance TUConversationActivitySession()
{
  id *v0;

  return objc_msgSend(*v0, sel_isLocallyInitiated);
}

id protocol witness for ActivitySession.isScreenSharingActivitySession.getter in conformance TUConversationActivitySession()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, sel_activity);
  v2 = objc_msgSend(v1, sel_isScreenSharingActivity);

  return v2;
}

double TUCallCenter.frontmostCall.getter@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v3;
  id v4;
  id v5;
  double result;
  void *v7;
  void *v8;

  *(_QWORD *)(swift_allocObject() + 16) = v1;
  v3 = (void *)objc_opt_self();
  v4 = v1;
  if (objc_msgSend(v3, sel_isMainThread))
  {
    v5 = objc_msgSend(v4, sel_frontmostAudioOrVideoCall);

    swift_release();
    if (v5)
    {
LABEL_3:
      *(_QWORD *)(a1 + 24) = type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUCall);
      *(_QWORD *)(a1 + 32) = &protocol witness table for TUCall;
      *(_QWORD *)a1 = v5;
      return result;
    }
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v7 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x24BDAC7A8](v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUCall?);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
    v5 = v8;
    if (v8)
      goto LABEL_3;
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double protocol witness for CallCenter.frontmostCall.getter in conformance TUCallCenter@<D0>(uint64_t a1@<X8>)
{
  return TUCallCenter.frontmostCall.getter(a1);
}

uint64_t sub_22041DA90()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in TUCallCenter.frontmostCall.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id result;

  result = objc_msgSend(*(id *)(v1 + 16), sel_frontmostAudioOrVideoCall);
  *a1 = result;
  return result;
}

_QWORD *partial apply for specialized closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of SharingResponse?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of SharingResponse?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 153) = a6;
  *(_QWORD *)(v6 + 96) = a4;
  *(_QWORD *)(v6 + 104) = a5;
  *(_BYTE *)(v6 + 152) = a3;
  *(_QWORD *)(v6 + 80) = a1;
  *(_QWORD *)(v6 + 88) = a2;
  return swift_task_switch();
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 104);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type AppDialogParams and conformance AppDialogParams();
  v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v3 = v2;
  swift_release();
  v4 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 64) = 0;
  v6 = objc_msgSend(v4, sel_JSONObjectWithData_options_error_, isa, 0, v0 + 64);

  v7 = *(void **)(v0 + 64);
  if (!v6)
  {
    v10 = v7;
    v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  v8 = v7;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    outlined consume of Data._Representation(v1, v3);
    goto LABEL_6;
  }
  outlined consume of Data._Representation(v1, v3);
  v9 = *(_QWORD *)(v0 + 72);
LABEL_6:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = v9;
  v12 = async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v13;
  *v13 = v0;
  v13[1] = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  return ((uint64_t (*)(char, uint64_t))((char *)&async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:)
                                                + v12))(*(_BYTE *)(v0 + 152), v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD **)(v0 + 80);
  SharingDirectInvocation.toSAIntentGroupRunSiriKitExecutor(deviceState:)((_QWORD *)(*(_QWORD *)(v0 + 88) + 40), *(_BYTE *)(v0 + 153) & 1);
  *v3 = v1;
  v3[1] = v2;
  type metadata accessor for ExpanseUIModel.ButtonModel(0);
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  CodableAceObject.init(wrappedValue:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type EmptyDialogParams and conformance EmptyDialogParams();
  v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v3 = v2;
  swift_release();
  v4 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 48) = 0;
  v6 = objc_msgSend(v4, sel_JSONObjectWithData_options_error_, isa, 0, v0 + 48);

  v7 = *(void **)(v0 + 48);
  if (!v6)
  {
    v10 = v7;
    v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  v8 = v7;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    outlined consume of Data._Representation(v1, v3);
    goto LABEL_6;
  }
  outlined consume of Data._Representation(v1, v3);
  v9 = *(_QWORD *)(v0 + 56);
LABEL_6:
  *(_QWORD *)(v0 + 80) = v9;
  v12 = async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:);
  v13 = *(_BYTE *)(v0 + 120);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v14;
  *v14 = v0;
  v14[1] = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  return ((uint64_t (*)(char, uint64_t))((char *)&async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:)
                                                + v12))(v13, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD **)(v0 + 64);
  SharingDirectInvocation.toSAIntentGroupRunSiriKitExecutor(deviceState:)((_QWORD *)(*(_QWORD *)(v0 + 72) + 40), *(_BYTE *)(v0 + 121) & 1);
  *v3 = v1;
  v3[1] = v2;
  type metadata accessor for ExpanseUIModel.ButtonModel(0);
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  CodableAceObject.init(wrappedValue:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 128) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 136) = a2;
    *(_QWORD *)(v6 + 144) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 96) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 104) = a2;
    *(_QWORD *)(v6 + 112) = a1;
  }
  return swift_task_switch();
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v3;

  *(_WORD *)(v3 + 120) = a3;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = a2;
  return swift_task_switch();
}

uint64_t specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for ExpanseUIModel.ButtonModel(0);
  v3[6] = swift_task_alloc();
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for ExpanseUIModel.ButtonModel(0);
  v3[6] = swift_task_alloc();
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  _QWORD *v4;
  int v5;
  char *v7;

  v1 = v0[4];
  v2 = *(unsigned __int8 *)(v1 + 16);
  v3 = *(unsigned __int8 *)(v1 + 17);
  v7 = (char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  v4 = (_QWORD *)swift_task_alloc();
  v0[9] = v4;
  if (v3)
    v5 = 256;
  else
    v5 = 0;
  *v4 = v0;
  v4[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(v0[8], v0[3], v5 | v2);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  _QWORD *v4;
  int v5;
  char *v7;

  v1 = v0[4];
  v2 = *(unsigned __int8 *)(v1 + 18);
  v3 = *(unsigned __int8 *)(v1 + 19);
  v7 = (char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  v4 = (_QWORD *)swift_task_alloc();
  v0[11] = v4;
  if (v3)
    v5 = 256;
  else
    v5 = 0;
  *v4 = v0;
  v4[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(v0[7], v0[3], v5 | v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    outlined destroy of StartSharingFlow.StartSharingFlowState(*(_QWORD *)(v2 + 64), type metadata accessor for ExpanseUIModel.ButtonModel);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;

  v1 = v0[4];
  v3 = *(_QWORD *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 32);
  v4 = *(unsigned __int8 *)(v1 + 40);
  v8 = (char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  v5 = *(unsigned __int8 *)(v1 + 16);
  v6 = (_QWORD *)swift_task_alloc();
  v0[9] = v6;
  *v6 = v0;
  v6[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v8)(v0[8], v0[3], v5, v3, v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  _QWORD *v4;
  int v5;
  char *v7;

  v1 = v0[4];
  v2 = *(unsigned __int8 *)(v1 + 41);
  v3 = *(unsigned __int8 *)(v1 + 42);
  v7 = (char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  v4 = (_QWORD *)swift_task_alloc();
  v0[11] = v4;
  if (v3)
    v5 = 256;
  else
    v5 = 0;
  *v4 = v0;
  v4[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(v0[7], v0[3], v5 | v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    outlined destroy of StartSharingFlow.StartSharingFlowState(*(_QWORD *)(v2 + 64), type metadata accessor for ExpanseUIModel.ButtonModel);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v2, v3, type metadata accessor for ExpanseUIModel.ButtonModel);
  Loggable.init(wrappedValue:)();
  outlined destroy of StartSharingFlow.StartSharingFlowState(v2, type metadata accessor for ExpanseUIModel.ButtonModel);
  type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v1, v3, type metadata accessor for ExpanseUIModel.ButtonModel);
  Loggable.init(wrappedValue:)();
  outlined destroy of StartSharingFlow.StartSharingFlowState(v1, type metadata accessor for ExpanseUIModel.ButtonModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[256] = v2;
  v3[255] = a2;
  v3[249] = a1;
  v3[257] = *v2;
  v4 = type metadata accessor for ExpanseUIModel(0);
  v3[258] = v4;
  v3[259] = *(_QWORD *)(v4 - 8);
  v3[260] = swift_task_alloc();
  v3[261] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExpanseUIModel?);
  v3[262] = swift_task_alloc();
  v3[263] = swift_task_alloc();
  v3[264] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[265] = swift_task_alloc();
  v5 = type metadata accessor for DialogPhase();
  v3[266] = v5;
  v3[267] = *(_QWORD *)(v5 - 8);
  v3[268] = swift_task_alloc();
  v3[269] = swift_task_alloc();
  v6 = type metadata accessor for OutputGenerationManifest();
  v3[270] = v6;
  v3[271] = *(_QWORD *)(v6 - 8);
  v3[272] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ResponseExecutor.execute(response:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);

  v31 = (__int128 *)(v0 + 1416);
  v1 = *(_QWORD *)(v0 + 2152);
  v2 = *(_QWORD *)(v0 + 2144);
  v3 = *(_QWORD *)(v0 + 2136);
  v4 = *(_QWORD *)(v0 + 2128);
  v5 = *(_QWORD *)(v0 + 2120);
  v32 = *(_QWORD *)(v0 + 2056);
  v6 = *(_QWORD **)(v0 + 2040);
  v8 = v6[3];
  v7 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v8, v7);
  v9 = v6[3];
  v10 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v11 = (_QWORD *)swift_task_alloc();
  v11[2] = v1;
  v11[3] = v5;
  v11[4] = v32;
  v12 = (__int128 *)(v0 + 1336);
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  outlined destroy of SharingResponse?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  outlined init with copy of ResponseExecuting((uint64_t)v6, v0 + 1496);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterizedSharingResponse);
  if (swift_dynamicCast())
  {
    outlined init with take of SharingIntent(v12, v0 + 1656);
    v13 = *(_QWORD *)(v0 + 1680);
    v14 = *(_QWORD *)(v0 + 1688);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 1656), v13);
    v33 = *(void (**)(uint64_t, uint64_t))(v14 + 32);
    *(_QWORD *)(v0 + 1760) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(v0 + 1768) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 1736));
    v33(v13, v14);
    v15 = Encodable.asDictionary()();
    __swift_destroy_boxed_opaque_existential_1(v0 + 1736);
    __swift_destroy_boxed_opaque_existential_1(v0 + 1656);
  }
  else
  {
    *(_QWORD *)(v0 + 1368) = 0;
    *v12 = 0u;
    *(_OWORD *)(v0 + 1352) = 0u;
    outlined destroy of SharingResponse?((uint64_t)v12, &demangling cache variable for type metadata for ParameterizedSharingResponse?);
    v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  v16 = *(_QWORD *)(v0 + 2048);
  v17 = *(_QWORD **)(v0 + 2040);
  outlined init with copy of ResponseExecuting((uint64_t)v17, (uint64_t)v31);
  v18 = swift_allocObject();
  *(_QWORD *)(v0 + 2184) = v18;
  *(_QWORD *)(v18 + 16) = v16;
  outlined init with take of SharingIntent(v31, v18 + 24);
  *(_QWORD *)(v18 + 64) = v15;
  swift_retain();
  swift_retain();
  type metadata accessor for LSBundleRecord(255, &lazy cache variable for type metadata for DialogExecutionResult);
  swift_asyncLet_begin();
  v19 = v6[3];
  v20 = v6[4];
  __swift_project_boxed_opaque_existential_1(v17, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
  *(_QWORD *)(v0 + 2192) = v21;
  *(_QWORD *)(v0 + 2200) = v22;
  *(_BYTE *)(v0 + 2320) = v23;
  if (v23 == -1)
  {
    outlined init with copy of ResponseExecuting(*(_QWORD *)(v0 + 2048) + 56, v0 + 1576);
    v29 = *(_OWORD *)(v0 + 1600);
    *(_OWORD *)(v0 + 2264) = v29;
    *(_QWORD *)(v0 + 2280) = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 1576), v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v30 = swift_allocObject();
    *(_QWORD *)(v0 + 2288) = v30;
    *(_OWORD *)(v30 + 16) = xmmword_220443B20;
    return swift_asyncLet_get_throwing();
  }
  else
  {
    v24 = v21;
    v25 = v22;
    v26 = v23;
    v27 = swift_allocObject();
    *(_QWORD *)(v0 + 2208) = v27;
    *(_QWORD *)(v27 + 16) = v24;
    *(_QWORD *)(v27 + 24) = v25;
    *(_BYTE *)(v27 + 32) = v26;
    *(_OWORD *)(v27 + 40) = *(_OWORD *)(v0 + 2048);
    swift_retain();
    outlined copy of ExpanseUIModelConverter?(v24, v25, v26);
    swift_retain();
    swift_asyncLet_begin();
    return swift_asyncLet_get();
  }
}

{
  uint64_t v0;

  outlined init with copy of SharingResponse?(*(_QWORD *)(v0 + 2112), *(_QWORD *)(v0 + 2104), &demangling cache variable for type metadata for ExpanseUIModel?);
  return swift_asyncLet_get_throwing();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 2216) = v0;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;

  v1 = v0[263];
  v2 = v0[262];
  v3 = v0[259];
  v4 = v0[258];
  v5 = (void *)v0[243];
  v0[278] = (uint64_t)v5;
  outlined init with copy of SharingResponse?(v1, v2, &demangling cache variable for type metadata for ExpanseUIModel?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) == 1)
  {
    v6 = v0[262];
    v7 = v5;
    outlined destroy of SharingResponse?(v6, &demangling cache variable for type metadata for ExpanseUIModel?);
    if (one-time initialization token for default != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v26 = v12;
      *(_DWORD *)v11 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v13 = static ResponseExecutor.typeName;
      v14 = unk_2555D31E0;
      swift_bridgeObjectRetain();
      v0[237] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v9, v10, "%s: Response contained a UI model generator but generation failed -> the response will not contain the desired UI", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v12, -1, -1);
      MEMORY[0x2207E453C](v11, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0[256] + 56), *(_QWORD *)(v0[256] + 80));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_220443B20;
    *(_QWORD *)(v15 + 32) = v7;
    v26 = v15;
    specialized Array._endMutation()();
    v0[281] = v26;
    v16 = v7;
    v17 = (_QWORD *)swift_task_alloc();
    v0[282] = (uint64_t)v17;
    *v17 = v0;
    v17[1] = ResponseExecutor.execute(response:);
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)();
  }
  else
  {
    v19 = v0[260];
    v20 = v0[258];
    v21 = v0[256];
    outlined init with take of ExpanseUIModel(v0[262], v19);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v21 + 56), *(_QWORD *)(v21 + 80));
    v0[230] = v20;
    v0[231] = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel and conformance ExpanseUIModel, type metadata accessor for ExpanseUIModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 227);
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v19, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ExpanseUIModel);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_220443B20;
    *(_QWORD *)(v23 + 32) = v5;
    v26 = v23;
    specialized Array._endMutation()();
    v0[279] = v26;
    v24 = v5;
    v25 = (_QWORD *)swift_task_alloc();
    v0[280] = (uint64_t)v25;
    *v25 = v0;
    v25[1] = ResponseExecutor.execute(response:);
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)();
  }
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 1816;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 2104);
  v2 = *(_QWORD *)(v0 + 2080);

  outlined destroy of StartSharingFlow.StartSharingFlowState(v2, type metadata accessor for ExpanseUIModel);
  outlined destroy of SharingResponse?(v1, &demangling cache variable for type metadata for ExpanseUIModel?);
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter?(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), *(_BYTE *)(v0 + 2320));
  swift_release();
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2104);

  outlined destroy of SharingResponse?(v1, &demangling cache variable for type metadata for ExpanseUIModel?);
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter?(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), *(_BYTE *)(v0 + 2320));
  swift_release();
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2168) + 8))(*(_QWORD *)(v0 + 2176), *(_QWORD *)(v0 + 2160));
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe((uint64_t)&async function pointer to partial apply for implicit closure #2 in ResponseExecutor.execute(response:));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 2296) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = v0[286];
  v2 = (void *)v0[243];
  *(_QWORD *)(v1 + 32) = v2;
  v6 = v1;
  specialized Array._endMutation()();
  v0[288] = v6;
  v3 = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[289] = v4;
  *v4 = v0;
  v4[1] = ResponseExecutor.execute(response:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 1576);
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2168) + 8))(*(_QWORD *)(v0 + 2176), *(_QWORD *)(v0 + 2160));
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined destroy of SharingResponse?(*(_QWORD *)(v0 + 2104), &demangling cache variable for type metadata for ExpanseUIModel?);
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter?(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), *(_BYTE *)(v0 + 2320));
  swift_release();
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2168) + 8))(*(_QWORD *)(v0 + 2176), *(_QWORD *)(v0 + 2160));
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe((uint64_t)&async function pointer to partial apply for implicit closure #2 in ResponseExecutor.execute(response:));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 2288) + 16) = 0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 1576);
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2168) + 8))(*(_QWORD *)(v0 + 2176), *(_QWORD *)(v0 + 2160));
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #1 in ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t implicit closure #1 in ResponseExecutor.execute(response:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v2 = v0[3];
  v1 = (_QWORD *)v0[4];
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v6 = *(_QWORD *)(v2 + 136);
  v9 = (char *)&async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:)
     + async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:);
  v7 = (_QWORD *)swift_task_alloc();
  v0[6] = v7;
  *v7 = v0;
  v7[1] = implicit closure #1 in ResponseExecutor.execute(response:);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v9)(v5, v0[5], v6);
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #1 in ResponseExecutor.execute(response:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 56) = a1;
  return swift_task_switch();
}

uint64_t implicit closure #2 in ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a5;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch();
}

uint64_t implicit closure #2 in ResponseExecutor.execute(response:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  Swift::String v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t);

  _StringGuts.grow(_:)(31);
  if (one-time initialization token for typeName != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = static ResponseExecutor.typeName;
  v3 = unk_2555D31E0;
  v5 = *(_BYTE *)(v0 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000002204486A0;
  v6._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v6);
  *(_QWORD *)(v0 + 48) = v3;
  outlined copy of ExpanseUIModelConverter(v2, v1, v5);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t))((char *)&async function pointer to specialized logIfThrows<A>(message:_:)
                                                                                          + async function pointer to specialized logIfThrows<A>(message:_:));
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  *v7 = v0;
  v7[1] = implicit closure #2 in ResponseExecutor.execute(response:);
  return v9(*(_QWORD *)(v0 + 16), v4, v3, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 64), *(_QWORD *)(v0 + 40));
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in implicit closure #2 in ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 176) = a4;
  *(_QWORD *)(v5 + 112) = a3;
  *(_QWORD *)(v5 + 120) = a5;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in implicit closure #2 in ResponseExecutor.execute(response:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _QWORD *v3;
  uint64_t (*v4)();
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(unsigned __int8 *)(v0 + 176);
  outlined init with copy of ResponseExecuting(v1 + 16, v0 + 16);
  outlined init with copy of ResponseExecuting(v1 + 96, v0 + 56);
  if (v2)
  {
    if (v2 == 1)
    {
      v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)
                                                    + async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:));
      swift_retain();
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 144) = v3;
      v4 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
    }
    else
    {
      v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)
                                                    + async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:));
      swift_retain();
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 160) = v3;
      v4 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
    }
    *v3 = v0;
    v3[1] = v4;
    return v8(*(_QWORD *)(v0 + 96), v0 + 16);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 112);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v6;
    *v6 = v0;
    v6[1] = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
    return ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)(*(_QWORD *)(v0 + 96), v0 + 16, *(_QWORD *)(v0 + 104), v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for ExpanseUIModel(0);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), 1);
  type metadata accessor for ExpanseUIModel(0);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), 1);
  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), 2);
  type metadata accessor for ExpanseUIModel(0);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), 2);
  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ResponseExecutor.makeOutputGenerationManifest(dialogPhase:nlContextUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v27;
  char v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  os_log_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DialogPhase();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BE97700];
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v41 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v41 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17((char *)&v41 - v15, a2, v7);
  static DialogPhase.acknowledgement.getter();
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, v8, MEMORY[0x24BE97710]);
  LOBYTE(v8) = dispatch thunk of static Equatable.== infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v7);
  if ((v8 & 1) != 0)
    goto LABEL_9;
  static DialogPhase.reflection.getter();
  v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v14, v7);
  if ((v19 & 1) != 0)
    goto LABEL_9;
  static DialogPhase.status.getter();
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v14, v7);
  if ((v20 & 1) != 0)
    goto LABEL_9;
  static DialogPhase.summary.getter();
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v14, v7);
  if ((v21 & 1) != 0)
    goto LABEL_9;
  static DialogPhase.completion.getter();
  v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v14, v7);
  if ((v22 & 1) != 0)
    goto LABEL_9;
  static DialogPhase.error.getter();
  v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v14, v7);
  if ((v23 & 1) != 0)
    goto LABEL_9;
  static DialogPhase.confirmed.getter();
  v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v14, v7);
  if ((v24 & 1) != 0
    || (static DialogPhase.canceled.getter(),
        v25 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v18(v14, v7),
        (v25 & 1) != 0)
    || (static DialogPhase.clarification.getter(),
        v27 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v18(v14, v7),
        (v27 & 1) != 0))
  {
LABEL_9:
    v18(v16, v7);
  }
  else
  {
    static DialogPhase.confirmation.getter();
    v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18(v14, v7);
    v18(v16, v7);
    if ((v28 & 1) == 0)
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.default);
      v30 = v45;
      v17(v45, a2, v7);
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.error.getter();
      v44 = v31;
      if (os_log_type_enabled(v31, (os_log_type_t)v32))
      {
        v43 = v32;
        v33 = swift_slowAlloc();
        v42 = swift_slowAlloc();
        v48 = v42;
        *(_DWORD *)v33 = 136315394;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v35 = static ResponseExecutor.typeName;
        v34 = unk_2555D31E0;
        swift_bridgeObjectRetain();
        v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2080;
        v36 = v45;
        v17(v14, (uint64_t)v45, v7);
        v37 = String.init<A>(describing:)();
        v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v18(v36, v7);
        v39 = v44;
        _os_log_impl(&dword_2203F9000, v44, (os_log_type_t)v43, "%s: Encountered unexpected dialog phase: %s", (uint8_t *)v33, 0x16u);
        v40 = v42;
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v40, -1, -1);
        MEMORY[0x2207E453C](v33, -1, -1);

      }
      else
      {
        v18(v30, v7);

      }
    }
  }
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
  outlined init with copy of SharingResponse?(v46, (uint64_t)v6, &demangling cache variable for type metadata for NLContextUpdate?);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t ResponseExecutor.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResponseExecutor()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in ResponseExecutor.makeOutputGenerationManifest(dialogPhase:nlContextUpdate:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ResponseExecutor.makeOutputGenerationManifest(dialogPhase:nlContextUpdate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_220420DDC()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ResponseExecutor.execute(response:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = v1 + 24;
  v6 = *(_QWORD *)(v1 + 64);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  v7[4] = v5;
  v7[5] = v6;
  v7[2] = a1;
  v7[3] = v4;
  return swift_task_switch();
}

uint64_t _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_220420E98()
{
  uint64_t v0;

  outlined consume of ExpanseUIModelConverter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in ResponseExecutor.execute(response:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v8 = *(_OWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  *(_QWORD *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 64) = v4;
  *(_OWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t outlined copy of ExpanseUIModelConverter?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined copy of ExpanseUIModelConverter(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of ExpanseUIModelConverter?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined consume of ExpanseUIModelConverter(a1, a2, a3);
  return a1;
}

uint64_t outlined init with take of ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ExpanseUIModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ExpanseUIModelConverter.Utils(uint64_t a1)
{
  destroy for ExpanseUIModelConverter.Utils(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EmptyDialogParams and conformance EmptyDialogParams()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyDialogParams and conformance EmptyDialogParams;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams and conformance EmptyDialogParams)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for EmptyDialogParams, &type metadata for EmptyDialogParams);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams and conformance EmptyDialogParams);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x2207E3F18](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AppDialogParams and conformance AppDialogParams()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppDialogParams and conformance AppDialogParams;
  if (!lazy protocol witness table cache variable for type AppDialogParams and conformance AppDialogParams)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for AppDialogParams, &type metadata for AppDialogParams);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams and conformance AppDialogParams);
  }
  return result;
}

uint64_t ValidateRecipientsFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t ValidateRecipientsFlow.execute()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 32);
  v2 = 0x2555D0000uLL;
  if (v1)
  {
    v3 = one-time initialization token for default;
    swift_bridgeObjectRetain();
    if (v3 != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
    swift_bridgeObjectRetain();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v35[0] = v33;
      *(_DWORD *)v7 = 136315651;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v8 = static ValidateRecipientsFlow.typeName;
      v9 = unk_2555D3380;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2160;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2081;
      v10 = type metadata accessor for INPerson();
      v11 = swift_bridgeObjectRetain();
      v12 = MEMORY[0x2207E3DB0](v11, v10);
      v14 = v13;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2203F9000, v5, v6, "%s: Resolving requested recipients: %{private,mask.hash}s", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      v15 = v33;
LABEL_14:
      MEMORY[0x2207E453C](v15, -1, -1);
      MEMORY[0x2207E453C](v7, -1, -1);

      v2 = 0x2555D0000;
      goto LABEL_17;
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.default);
    v5 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v17))
    {
      v7 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v35[0] = v18;
      *(_DWORD *)v7 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v19 = static ValidateRecipientsFlow.typeName;
      v20 = unk_2555D3380;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v5, v17, "%s: Resolving requested recipients: nil", (uint8_t *)v7, 0xCu);
      swift_arrayDestroy();
      v15 = v18;
      goto LABEL_14;
    }
  }

LABEL_17:
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v0 + 32) + 64));
  v21 = RecipientsResolver.resolve(persons:)(v1);
  if (*(_QWORD *)(v2 + 3704) != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.default);
  outlined copy of ResolvedRecipients(v21);
  outlined copy of ResolvedRecipients(v21);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v35[0] = v34;
    *(_DWORD *)v25 = 136315651;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v26 = static ValidateRecipientsFlow.typeName;
    v27 = unk_2555D3380;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2160;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 22) = 2081;
    outlined copy of ResolvedRecipients(v21);
    v28 = ResolvedRecipients.description.getter(v21);
    v30 = v29;
    outlined consume of ResolvedRecipients(v21);
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of ResolvedRecipients(v21);
    outlined consume of ResolvedRecipients(v21);
    _os_log_impl(&dword_2203F9000, v23, v24, "%s: Recipients resolution succeeded with result: %{private,mask.hash}s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v34, -1, -1);
    MEMORY[0x2207E453C](v25, -1, -1);
  }
  else
  {
    outlined consume of ResolvedRecipients(v21);
    outlined consume of ResolvedRecipients(v21);
  }

  v31 = *(_QWORD *)(v0 + 32);
  if (v21 == 1)
  {
    *(_BYTE *)(v31 + 16) = 1;
  }
  else
  {
    *(_BYTE *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = v21;
    swift_bridgeObjectRelease();
  }
  static ExecuteResponse.complete()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ValidateRecipientsFlow.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ValidateRecipientsFlow()
{
  return objc_opt_self();
}

uint64_t protocol witness for Flow.execute() in conformance ValidateRecipientsFlow(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch();
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t specialized ValidateRecipientsFlow.on(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Input();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static ValidateRecipientsFlow.typeName;
    v12 = unk_2555D3380;
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2203F9000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v10, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t outlined copy of ResolvedRecipients(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of ResolvedRecipients(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result;

  result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, &lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    v1 = v18;
    v17 = v19;
    v2 = v20;
    v3 = v21;
    v4 = v22;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v17 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v16 = v2;
  v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
LABEL_8:
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v3 << 6);
    v11 = v3;
    goto LABEL_29;
  }
  v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      v14 = *(_QWORD *)(v17 + 8 * v13);
      v11 = v3 + 1;
      if (v14)
        goto LABEL_28;
      v11 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_33;
      v14 = *(_QWORD *)(v17 + 8 * v11);
      if (v14)
        goto LABEL_28;
      v11 = v3 + 3;
      if (v3 + 3 >= v8)
        goto LABEL_33;
      v14 = *(_QWORD *)(v17 + 8 * v11);
      if (v14)
        goto LABEL_28;
      v11 = v3 + 4;
      if (v3 + 4 >= v8)
        goto LABEL_33;
      v14 = *(_QWORD *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        v9 = (v14 - 1) & v14;
        v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (objc_msgSend(v12, sel_state, v16) != (id)2)
              break;

            v3 = v11;
            v4 = v9;
            if ((v1 & 0x8000000000000000) == 0)
              goto LABEL_8;
LABEL_10:
            if (!__CocoaSet.Iterator.next()())
              break;
            type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversationActivitySession);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v12 = v23;
            swift_unknownObjectRelease();
            v11 = v3;
            v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        v14 = *(_QWORD *)(v17 + 8 * v11);
        if (!v14)
        {
          v15 = v3 + 6;
          while (v8 != v15)
          {
            v14 = *(_QWORD *)(v17 + 8 * v15++);
            if (v14)
            {
              v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of Set<TUConversationActivitySession>.Iterator._Variant();
    return;
  }
  __break(1u);
}

uint64_t protocol witness for Conversation.activeRemotes.getter in conformance TUConversation()
{
  id *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(*v0, sel_activeRemoteParticipants);
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  v4 = specialized _arrayForceCast<A, B>(_:)(v3);
  swift_release();
  return v4;
}

double protocol witness for Conversation.activeActivitySession.getter in conformance TUConversation@<D0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = objc_msgSend(*v1, sel_activitySessions);
  v4 = type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, &lazy cache variable for type metadata for TUConversationActivitySession);
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.first(where:)(v5);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = &protocol witness table for TUConversationActivitySession;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t protocol witness for Conversation.isGroup.getter in conformance TUConversation()
{
  id *v0;

  return objc_msgSend(*v0, sel_isOneToOneModeEnabled) ^ 1;
}

uint64_t outlined consume of Set<TUConversationActivitySession>.Iterator._Variant()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for LSBundleRecord(255, a2);
    result = MEMORY[0x2207E4494](MEMORY[0x24BEE5BD8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = __CocoaSet.count.getter();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x24BEE4AF8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v2, a1);
  result = outlined consume of Set<TUConversationActivitySession>.Iterator._Variant();
  if (v6 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  v4 = a4;
  v6 = a2;
  v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    result = (_QWORD *)Set.Iterator.init(_cocoa:)();
    v4 = v27;
    v7 = v28;
    v8 = v29;
    v9 = v30;
    v10 = v31;
    if (v6)
      goto LABEL_3;
LABEL_36:
    v11 = 0;
    goto LABEL_38;
  }
  v9 = 0;
  v19 = -1 << *(_BYTE *)(a4 + 32);
  v7 = a4 + 56;
  v8 = ~v19;
  v20 = -v19;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v10 = v21 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v11 = 0;
LABEL_38:
    v22 = v24;
LABEL_41:
    *v22 = v4;
    v22[1] = v7;
    v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (_QWORD *)v11;
  }
  if (a3 < 0)
    goto LABEL_48;
  v11 = 0;
  v25 = (unint64_t)(v8 + 64) >> 6;
  v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_40;
      type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v14 = v26;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v26)
        goto LABEL_40;
      goto LABEL_8;
    }
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_7;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v15 >= v25)
    {
      v10 = 0;
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v7 + 8 * v15);
    if (v16)
      goto LABEL_23;
    v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25)
        goto LABEL_44;
      v16 = *(_QWORD *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        v15 = v9 + 3;
        goto LABEL_23;
      }
      v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      v16 = *(_QWORD *)(v7 + 8 * v17);
      if (!v16)
      {
        v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          v10 = 0;
          v9 = v17;
          goto LABEL_40;
        }
        v16 = *(_QWORD *)(v7 + 8 * v15);
        if (!v16)
        {
          v18 = v9 + 6;
          while (v25 != v18)
          {
            v16 = *(_QWORD *)(v7 + 8 * v18++);
            if (v16)
            {
              v15 = v18 - 1;
              goto LABEL_23;
            }
          }
          v10 = 0;
          v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    v15 = v17;
LABEL_23:
    v10 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v15 << 6);
    v9 = v15;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
    v14 = result;
    if (!result)
      goto LABEL_40;
LABEL_8:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      v11 = a3;
LABEL_40:
      v8 = v23;
      v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized SharingIntent.shareTarget.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  id v26;
  uint64_t *v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(char *, uint64_t);
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51[3];

  v2 = v1;
  v49 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v47 - v11;
  v13 = type metadata accessor for Logger();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier + 8);
  if (v17)
  {
    v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
    v19 = objc_allocWithZone(MEMORY[0x24BDC1540]);
    swift_bridgeObjectRetain_n();
    v26 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v18, v17, 0);

    if (v26)
    {
      if (*(_BYTE *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) == 1)
      {
        v27 = v49;
        *v49 = v18;
        v27[1] = v17;
        type metadata accessor for ShareTarget();
      }
      else
      {
        if (*(_BYTE *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed))
          v37 = 0;
        else
          v37 = 2;
        v38 = v49;
        *v49 = v18;
        v38[1] = v17;
        *((_BYTE *)v38 + 16) = v37;
        type metadata accessor for ShareTarget();
      }
      return swift_storeEnumTagMultiPayload();
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v20 = __swift_project_value_buffer(v13, (uint64_t)static Logger.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v20, v13);
    v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName + 8))
      v22 = static os_log_type_t.debug.getter();
    else
      v22 = static os_log_type_t.error.getter();
    v28 = v22;
    swift_retain_n();
    swift_bridgeObjectRetain();
    v29 = Logger.logObject.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v28))
    {
      v48 = v28;
      v30 = swift_slowAlloc();
      v47 = swift_slowAlloc();
      v51[0] = v47;
      *(_DWORD *)v30 = 136315394;
      swift_bridgeObjectRetain();
      v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      if (v21[1])
      {
        v31 = *v21;
        v32 = v21[1];
      }
      else
      {
        v32 = 0xE300000000000000;
        v31 = 7104878;
      }
      swift_bridgeObjectRetain();
      v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v29, (os_log_type_t)v48, "SharingIntent: share target for appIdentifier=%s appName=%s not installed", (uint8_t *)v30, 0x16u);
      v33 = v47;
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v33, -1, -1);
      MEMORY[0x2207E453C](v30, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v21[1])
    {
      v34 = *v21;
      v35 = v21[1];
    }
    else
    {
      v34 = 0;
      v35 = 0xE000000000000000;
    }
    v36 = v49;
    *v49 = v34;
    v36[1] = v35;
    type metadata accessor for ShareTarget();
    swift_storeEnumTagMultiPayload();
    return swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName + 8);
    if (v23)
    {
      v24 = v49;
      *v49 = *(_QWORD *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
      v24[1] = v23;
      type metadata accessor for ShareTarget();
      swift_storeEnumTagMultiPayload();
      return swift_bridgeObjectRetain();
    }
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen) & 1) != 0
      || (*(_BYTE *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything) & 1) != 0
      || *(_BYTE *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent) == 1
      || *(_BYTE *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) != 1)
    {
      type metadata accessor for ShareTarget();
      return swift_storeEnumTagMultiPayload();
    }
    v39 = v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
    swift_beginAccess();
    outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v39, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      outlined destroy of SharingResponse?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    }
    else
    {
      v40 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v40(v12, v5, v6);
      v41 = *(_QWORD *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity);
      if (v41)
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
        v42 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
        if (v42 != *MEMORY[0x24BEA1AE0] && v42 != *MEMORY[0x24BEA1A88])
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
          v44 = (char *)v49 + *(int *)(v43 + 48);
          *v49 = v41;
          v40(v44, v12, v6);
          type metadata accessor for ShareTarget();
          swift_storeEnumTagMultiPayload();
          v45 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
          swift_retain();
          return v45(v10, v6);
        }
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    type metadata accessor for ShareTarget();
    v46 = v49;
    *v49 = 0;
    v46[1] = 0;
    return swift_storeEnumTagMultiPayload();
  }
}

void specialized SharingIntent.isExplicitShareViaMessagesIntent.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_220422FF0()
{
  char v1;

  v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
    __asm { BR              X11 }
  return 1;
}

void specialized SharingIntent.isExplicitShareInCallIntent.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_220423178()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  if (a3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v7 = i - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x2207E3F60](i - 4, a3);
          v9 = i - 3;
          if (__OFADD__(v7, 1))
            goto LABEL_17;
        }
        else
        {
          v8 = *(_QWORD *)(a3 + 8 * i);
          swift_retain();
          v9 = i - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        v14 = v8;
        a1(&v13, &v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        v10 = swift_release();
        if (v13)
        {
          MEMORY[0x2207E3D98](v10);
          if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return v15;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t SharingNLv4Intent.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t *v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  char v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  Swift::String v59;
  char v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::String v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String v69;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;

  v1 = v0;
  v2 = type metadata accessor for ShareTarget();
  MEMORY[0x24BDAC7A8](v2);
  v71 = (uint64_t *)((char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = 0;
  v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(480);
  v76 = v74;
  v77 = v75;
  v7._countAndFlagsBits = 0xD00000000000001DLL;
  v7._object = (void *)0x8000000220448950;
  String.append(_:)(v7);
  LOBYTE(v74) = *(_BYTE *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingVerb?);
  v8._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x7974202020200A2CLL;
  v9._object = (void *)0xEC000000203A6570;
  String.append(_:)(v9);
  v10 = v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v10, (uint64_t)v6);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x8000000220448970;
  v12._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v12);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference))
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference))
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x7061202020200A2CLL;
  v16._object = (void *)0xEF203A656D614E70;
  String.append(_:)(v16);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName + 8);
  v72 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
  v73 = v17;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD000000000000018;
  v19._object = (void *)0x80000002204489A0;
  String.append(_:)(v19);
  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan + 8);
  v72 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
  v73 = v20;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0xD000000000000015;
  v22._object = (void *)0x80000002204489C0;
  String.append(_:)(v22);
  v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier + 8);
  v72 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
  v73 = v23;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0xD00000000000001FLL;
  v25._object = (void *)0x80000002204489E0;
  String.append(_:)(v25);
  v26 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier + 8);
  v72 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
  v73 = v26;
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0xD000000000000016;
  v28._object = (void *)0x8000000220448A00;
  String.append(_:)(v28);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen))
    v29 = 1702195828;
  else
    v29 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen))
    v30 = 0xE400000000000000;
  else
    v30 = 0xE500000000000000;
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  v32._object = (void *)0x8000000220448A20;
  v32._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v32);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything))
    v33 = 1702195828;
  else
    v33 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything))
    v34 = 0xE400000000000000;
  else
    v34 = 0xE500000000000000;
  v35 = v34;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  v36._object = (void *)0x8000000220448A40;
  v36._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v36);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent))
    v37 = 1702195828;
  else
    v37 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent))
    v38 = 0xE400000000000000;
  else
    v38 = 0xE500000000000000;
  v39 = v38;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease();
  v40._object = (void *)0x8000000220448A70;
  v40._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v40);
  v72 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_recipients);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  v41._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 0xD000000000000019;
  v42._object = (void *)0x8000000220448A90;
  String.append(_:)(v42);
  LOBYTE(v72) = *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationValue?);
  v43._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0xD000000000000013;
  v44._object = (void *)0x8000000220448AB0;
  String.append(_:)(v44);
  swift_retain();
  v45 = v71;
  specialized SharingIntent.shareTarget.getter(v71);
  swift_release();
  ShareTarget.description.getter();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  outlined destroy of ShareTarget((uint64_t)v45);
  v47._object = (void *)0x8000000220448AD0;
  v47._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v47);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest))
    v48 = 1702195828;
  else
    v48 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest))
    v49 = 0xE400000000000000;
  else
    v49 = 0xE500000000000000;
  v50 = v49;
  String.append(_:)(*(Swift::String *)&v48);
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 0xD000000000000011;
  v51._object = (void *)0x8000000220448AF0;
  String.append(_:)(v51);
  v72 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity?);
  v52._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0xD000000000000028;
  v53._object = (void *)0x8000000220448B10;
  String.append(_:)(v53);
  swift_retain();
  specialized SharingIntent.isExplicitShareViaMessagesIntent.getter();
  v55 = v54;
  swift_release();
  if ((v55 & 1) != 0)
    v56 = 1702195828;
  else
    v56 = 0x65736C6166;
  if ((v55 & 1) != 0)
    v57 = 0xE400000000000000;
  else
    v57 = 0xE500000000000000;
  v58 = v57;
  String.append(_:)(*(Swift::String *)&v56);
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = 0xD000000000000023;
  v59._object = (void *)0x8000000220448B40;
  String.append(_:)(v59);
  swift_retain();
  specialized SharingIntent.isExplicitShareInCallIntent.getter();
  v61 = v60;
  swift_release();
  if ((v61 & 1) != 0)
    v62 = 1702195828;
  else
    v62 = 0x65736C6166;
  if ((v61 & 1) != 0)
    v63 = 0xE400000000000000;
  else
    v63 = 0xE500000000000000;
  v64 = v63;
  String.append(_:)(*(Swift::String *)&v62);
  swift_bridgeObjectRelease();
  v65._object = (void *)0x8000000220448B70;
  v65._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v65);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed))
    v66 = 1702195828;
  else
    v66 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed))
    v67 = 0xE400000000000000;
  else
    v67 = 0xE500000000000000;
  v68 = v67;
  String.append(_:)(*(Swift::String *)&v66);
  swift_bridgeObjectRelease();
  v69._countAndFlagsBits = 10506;
  v69._object = (void *)0xE200000000000000;
  String.append(_:)(v69);
  return v76;
}

uint64_t SharingNLv4Intent.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v79;
  os_log_type_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  NSObject *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  _OWORD v116[2];

  v102 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  v100 = (char *)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v98 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v105 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x24BDAC7A8](v6);
  v110 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v111 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v112 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v108 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v95 - v14;
  *(_BYTE *)(v1 + 16) = 3;
  v16 = v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  v17 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) = 0;
  v18 = (_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
  *v18 = 0;
  v18[1] = 0;
  v19 = (_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
  *v19 = 0;
  v19[1] = 0;
  v20 = (_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
  *v20 = 0;
  v20[1] = 0;
  v21 = (_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
  *v21 = 0;
  v21[1] = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_recipients) = 0;
  v106 = OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue) = 3;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity) = 0;
  v109 = v1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed) = 0;
  if (one-time initialization token for default != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.default);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v15, a1, v10);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  v27 = os_log_type_enabled(v25, v26);
  v99 = v4;
  if (v27)
  {
    v103 = v10;
    v104 = v23;
    v107 = v8;
    v97 = a1;
    v28 = swift_slowAlloc();
    v96 = swift_slowAlloc();
    *(_QWORD *)&v116[0] = v96;
    *(_DWORD *)v28 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v30 = static SharingNLv4Intent.typeName;
    v29 = unk_2555D34D0;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, (uint64_t *)v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    v10 = v103;
    v24(v108, (uint64_t)v15, v103);
    v31 = String.init<A>(describing:)();
    *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33 = *(void (**)(char *, uint64_t))(v11 + 8);
    v33(v15, v10);
    _os_log_impl(&dword_2203F9000, v25, v26, "%s: Initializing self from user parse: %s", (uint8_t *)v28, 0x16u);
    v34 = v96;
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v34, -1, -1);
    MEMORY[0x2207E453C](v28, -1, -1);

    a1 = v97;
    v8 = v107;
    v23 = v104;
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t))(v11 + 8);
    v33(v15, v10);

  }
  v35 = MEMORY[0x2207E3744]();
  v37 = v111;
  v36 = (uint64_t)v112;
  if (*(_QWORD *)(v35 + 16))
  {
    v38 = (uint64_t)v110;
    (*(void (**)(char *, unint64_t, uint64_t))(v111 + 16))(v110, v35 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80)), v8);
    v39 = 0;
  }
  else
  {
    v39 = 1;
    v38 = (uint64_t)v110;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v38, v39, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1, v8) == 1)
  {
    swift_release();
    outlined destroy of SharingResponse?(v38, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = v10;
      v43 = (uint8_t *)swift_slowAlloc();
      v44 = swift_slowAlloc();
      *(_QWORD *)&v116[0] = v44;
      *(_DWORD *)v43 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v45 = static SharingNLv4Intent.typeName;
      v46 = unk_2555D34D0;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v40, v41, "%s: Failed to get UserDialogAct.", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v44, -1, -1);
      MEMORY[0x2207E453C](v43, -1, -1);

      v47 = a1;
      v48 = v42;
    }
    else
    {

      v47 = a1;
      v48 = v10;
    }
    v33((char *)v47, v48);
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v36, v38, v8);
  if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
  {
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = v10;
      v107 = v8;
      v52 = (uint8_t *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      *(_QWORD *)&v116[0] = v53;
      *(_DWORD *)v52 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v54 = static SharingNLv4Intent.typeName;
      v55 = unk_2555D34D0;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v49, v50, "%s: UserDialogAct is an accepted response.", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v53, -1, -1);
      MEMORY[0x2207E453C](v52, -1, -1);

      v33((char *)a1, v51);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v107);
    }
    else
    {

      v33((char *)a1, v10);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v8);
    }
    v56 = v109;
    *(_BYTE *)(v109 + v106) = 0;
    return v56;
  }
  if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) != 0)
  {
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = v10;
      v107 = v8;
      v60 = (uint8_t *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      *(_QWORD *)&v116[0] = v61;
      *(_DWORD *)v60 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v62 = static SharingNLv4Intent.typeName;
      v63 = unk_2555D34D0;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v57, v58, "%s: UserDialogAct is a rejected response.", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v61, -1, -1);
      MEMORY[0x2207E453C](v60, -1, -1);

      v33((char *)a1, v59);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v107);
    }
    else
    {

      v33((char *)a1, v10);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v8);
    }
    v71 = 1;
LABEL_45:
    v56 = v109;
    *(_BYTE *)(v109 + v106) = v71;
    return v56;
  }
  if ((Siri_Nlu_External_UserDialogAct.hasCancelled.getter() & 1) != 0)
  {
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = v10;
      v107 = v8;
      v67 = (uint8_t *)swift_slowAlloc();
      v68 = swift_slowAlloc();
      *(_QWORD *)&v116[0] = v68;
      *(_DWORD *)v67 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v69 = static SharingNLv4Intent.typeName;
      v70 = unk_2555D34D0;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v64, v65, "%s: UserDialogAct is a cancelled response.", v67, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v68, -1, -1);
      MEMORY[0x2207E453C](v67, -1, -1);

      v33((char *)a1, v66);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v107);
    }
    else
    {

      v33((char *)a1, v10);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v8);
    }
    v71 = 2;
    goto LABEL_45;
  }
  if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0)
  {
    swift_release();
    v33((char *)a1, v10);
LABEL_57:
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v8);
    return 0;
  }
  v104 = v23;
  v72 = Logger.logObject.getter();
  v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v72, v73))
  {
    v103 = v10;
    v11 = v8;
    v74 = (uint8_t *)swift_slowAlloc();
    v75 = swift_slowAlloc();
    *(_QWORD *)&v116[0] = v75;
    *(_DWORD *)v74 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v76 = static SharingNLv4Intent.typeName;
    v77 = unk_2555D34D0;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v72, v73, "%s: UserDialogAct has a user stated task.", v74, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v75, -1, -1);
    MEMORY[0x2207E453C](v74, -1, -1);

    v10 = v103;
    v37 = v111;
    v36 = (uint64_t)v112;
  }
  else
  {

  }
  v79 = v100;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v79, v102);
  v80 = OS_LOG_TYPE_DEFAULT;
  v88 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
  v89 = MEMORY[0x2207E3948]();
  v90 = v89;
  if (v89 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_64;
  }
  else if (!*(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_64;
  }
  if ((v90 & 0xC000000000000001) != 0)
  {
    MEMORY[0x2207E3F60](0, v90);
  }
  else
  {
    if (!*(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_80;
    }
    swift_retain();
  }
LABEL_64:
  swift_bridgeObjectRelease();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  swift_release();
  if (!*((_QWORD *)&v115 + 1))
  {
    swift_release();
    outlined destroy of SharingResponse?((uint64_t)&v114, &demangling cache variable for type metadata for Any?);
    v81 = Logger.logObject.getter();
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = v10;
      v107 = v8;
      v84 = (uint8_t *)swift_slowAlloc();
      v85 = swift_slowAlloc();
      *(_QWORD *)&v116[0] = v85;
      *(_DWORD *)v84 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v86 = static SharingNLv4Intent.typeName;
      v87 = unk_2555D34D0;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, (uint64_t *)v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v81, v82, "%s: Failed to convert graph into UsoTask.", v84, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v85, -1, -1);
      MEMORY[0x2207E453C](v84, -1, -1);

      v33((char *)a1, v83);
      goto LABEL_54;
    }

    v33((char *)a1, v10);
LABEL_56:
    (*(void (**)(char *, uint64_t))(v98 + 8))(v105, v99);
    goto LABEL_57;
  }
  v11 = a1;
  outlined init with take of Any(&v114, v116);
  outlined init with copy of Any((uint64_t)v116, (uint64_t)&v114);
  type metadata accessor for UsoTask_share_common_Message();
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined init with copy of Any((uint64_t)v116, (uint64_t)&v114);
    type metadata accessor for UsoTask_unshare_common_Message();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v56 = v109;
      *(_BYTE *)(v109 + 16) = 1;
      v92 = swift_retain();
      MEMORY[0x2207E39B4](&v114, v92);
      goto LABEL_69;
    }
    outlined init with copy of Any((uint64_t)v116, (uint64_t)&v114);
    type metadata accessor for UsoTask_send_common_Message();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      v33((char *)a1, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v105, v99);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v8);
      v56 = v109;
      *(_BYTE *)(v109 + 16) = 2;
      return v56;
    }
    swift_release();
    v88 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v80))
    {
      v103 = v10;
      v107 = v8;
      v90 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      *(_QWORD *)&v114 = v36;
      *(_DWORD *)v90 = 136315138;
      if (one-time initialization token for typeName == -1)
      {
LABEL_76:
        v93 = static SharingNLv4Intent.typeName;
        v94 = unk_2555D34D0;
        swift_bridgeObjectRetain();
        v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2203F9000, v88, v80, "%s: Failed to convert UsoTask to any expected type.", (uint8_t *)v90, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v36, -1, -1);
        MEMORY[0x2207E453C](v90, -1, -1);

        v33((char *)v11, v103);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
LABEL_54:
        (*(void (**)(char *, uint64_t))(v98 + 8))(v105, v99);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v107);
        return 0;
      }
LABEL_80:
      swift_once();
      goto LABEL_76;
    }

    v33((char *)a1, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    goto LABEL_56;
  }
  v56 = v109;
  *(_BYTE *)(v109 + 16) = 0;
  v91 = swift_retain();
  MEMORY[0x2207E3984](&v114, v91);
LABEL_69:
  swift_release_n();
  if ((_QWORD)v114)
  {
    swift_retain();
    SharingNLv4Intent.processCommonMessage(_:)();
    swift_release_n();
  }
  v33((char *)a1, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v105, v99);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v8);
  return v56;
}

uint64_t SharingNLv4Intent.processCommonMessage(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  void (*v83)(os_log_t, uint64_t, uint64_t);
  os_log_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  NSObject *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  os_log_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  os_log_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[3];
  uint64_t v131;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_CollaborationMode.DefinedValues?);
  MEMORY[0x24BDAC7A8](v2);
  v126 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  MEMORY[0x24BDAC7A8](v4);
  v125 = (char *)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v127 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v120 = (os_log_t)((char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v121 = (uint64_t)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v124 = (char *)&v117 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v123 = (uint64_t)&v117 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v122 = (char *)&v117 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntity_common_Agent, INPerson>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = static Transformer<>.transformer.getter();
  v20 = MEMORY[0x2207E3990](v19);
  if (!v20)
  {
    v28 = 0;
    goto LABEL_19;
  }
  v21 = v20;
  v130[0] = MEMORY[0x24BEE4AF8];
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    if (v22)
      goto LABEL_4;
  }
  else
  {
    v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22)
    {
LABEL_4:
      if (v22 < 1)
      {
        __break(1u);
        goto LABEL_90;
      }
      v128 = v0;
      v119 = v16;
      v23 = v18;
      v24 = v15;
      for (i = 0; i != v22; ++i)
      {
        if ((v21 & 0xC000000000000001) != 0)
          MEMORY[0x2207E3F60](i, v21);
        else
          swift_retain();
        dispatch thunk of CodeGenListEntry.entry.getter();
        v26 = swift_release();
        if (v131)
        {
          MEMORY[0x2207E3D98](v26);
          if (*(_QWORD *)((v130[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v130[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v27 = v130[0];
      v15 = v24;
      v18 = v23;
      v16 = v119;
      v1 = v128;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  v27 = MEMORY[0x24BEE4AF8];
LABEL_18:
  v29 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v29);
  *(&v117 - 2) = (uint64_t)v18;
  v28 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #2 in SharingNLv4Intent.processCommonMessage(_:), (uint64_t)(&v117 - 4), v27);
  swift_bridgeObjectRelease();
LABEL_19:
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_recipients) = v28;
  swift_bridgeObjectRelease();
  v30 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
  if (v30)
  {
    v31 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    if (v31)
    {
      v32 = Array<A>.firstAppBundleIdentifier.getter(v31);
      v34 = v33;
      swift_release();
      v30 = swift_bridgeObjectRelease();
      if (v34)
      {
        v35 = (uint64_t *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
        *v35 = v32;
        v35[1] = v34;
        v30 = swift_bridgeObjectRelease();
      }
    }
    else
    {
      v30 = swift_release();
    }
  }
  v36 = MEMORY[0x2207E399C](v30);
  if (!v36)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v21 = v36;
  v37 = v36 & 0xFFFFFFFFFFFFFF8;
  if (!(v36 >> 62))
  {
    v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v38)
    {
      if (v38 < 2)
        goto LABEL_34;
      goto LABEL_28;
    }
LABEL_88:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v115 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v115)
    goto LABEL_88;
  swift_bridgeObjectRetain();
  v116 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v116 < 2)
    goto LABEL_34;
LABEL_28:
  if (one-time initialization token for default != -1)
    goto LABEL_92;
  while (1)
  {
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.default);
    swift_bridgeObjectRetain_n();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, (os_log_type_t)v41))
    {
      v118 = v41;
      v128 = v1;
      v119 = v15;
      v42 = swift_slowAlloc();
      v117 = swift_slowAlloc();
      v130[0] = v117;
      *(_DWORD *)v42 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v43 = static SharingNLv4Intent.typeName;
      v44 = unk_2555D34D0;
      swift_bridgeObjectRetain();
      v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      swift_bridgeObjectRetain();
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodeGenListEntry<UsoEntity_common_Attachment>);
      v46 = MEMORY[0x2207E3DB0](v21, v45);
      v48 = v47;
      swift_bridgeObjectRelease();
      v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v40, (os_log_type_t)v118, "%s: Found more than one attachment, but only taking the first: %s", (uint8_t *)v42, 0x16u);
      v49 = v117;
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v49, -1, -1);
      MEMORY[0x2207E453C](v42, -1, -1);

      v15 = v119;
      v1 = v128;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_34:
    if ((v21 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)(v37 + 16))
    {
      swift_retain();
      goto LABEL_37;
    }
    __break(1u);
LABEL_92:
    swift_once();
  }
LABEL_90:
  MEMORY[0x2207E3F60](0, v21);
LABEL_37:
  swift_bridgeObjectRelease();
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  if (!v130[0])
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.default);
    v62 = Logger.logObject.getter();
    v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = v16;
      v65 = (uint8_t *)swift_slowAlloc();
      v66 = swift_slowAlloc();
      v130[0] = v66;
      *(_DWORD *)v65 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v67 = static SharingNLv4Intent.typeName;
      v68 = unk_2555D34D0;
      swift_bridgeObjectRetain();
      v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v62, v63, "%s: CodeGenListEntry<UsoEntity_common_Attachment> missing UsoEntity_common_Attachment entry - file a radar on SiriOntology?", v65, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v66, -1, -1);
      MEMORY[0x2207E453C](v65, -1, -1);

      v16 = v64;
    }
    else
    {

    }
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  swift_retain();
  v50 = CodeGenBase.entity.getter();
  swift_release();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity) = v50;
  v51 = swift_release();
  v52 = MEMORY[0x2207E39D8](v51);
  if (v52)
  {
    v53 = MEMORY[0x2207E3978]();
    v54 = (uint64_t *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
    *v54 = v53;
    v54[1] = v55;
    swift_bridgeObjectRelease();
    v56 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    if (v56)
    {
      v57 = Array<A>.firstAppBundleIdentifier.getter(v56);
      v59 = v58;
      swift_release();
      v52 = swift_bridgeObjectRelease();
      if (v59)
      {
        v60 = (uint64_t *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
        *v60 = v57;
        v60[1] = v59;
        v52 = swift_bridgeObjectRelease();
      }
    }
    else
    {
      v52 = swift_release();
    }
  }
  if (!MEMORY[0x2207E39CC](v52))
    goto LABEL_69;
  v69 = (uint64_t)v122;
  MEMORY[0x2207E3A50]();
  v128 = v1;
  v70 = v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(v69, v70);
  swift_endAccess();
  v71 = v123;
  outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v70, v123);
  v72 = v127;
  v73 = *(char **)(v127 + 48);
  v74 = v129;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v73)(v71, 1, v129))
  {
    v75 = outlined destroy of SharingResponse?(v71, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  }
  else
  {
    v83 = *(void (**)(os_log_t, uint64_t, uint64_t))(v72 + 16);
    v122 = v73;
    v84 = v120;
    v83(v120, v71, v74);
    outlined destroy of SharingResponse?(v71, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter();
    v86 = v85;
    v87 = v84;
    v73 = v122;
    v75 = (*(uint64_t (**)(os_log_t, uint64_t))(v72 + 8))(v87, v74);
    if (v86)
    {
      swift_bridgeObjectRelease();
      v75 = UsoEntity_common_AttachmentType.matchingSpan.getter();
      if (v88)
      {
        v89 = v75;
        v90 = v88;
        v91 = (uint64_t *)(v128 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
        *v91 = v75;
        v91[1] = v88;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (one-time initialization token for default != -1)
          swift_once();
        v92 = type metadata accessor for Logger();
        __swift_project_value_buffer(v92, (uint64_t)static Logger.default);
        swift_bridgeObjectRetain();
        v93 = Logger.logObject.getter();
        v94 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, (os_log_type_t)v94))
        {
          v118 = v94;
          v119 = v15;
          v120 = v93;
          v123 = v89;
          v95 = swift_slowAlloc();
          v117 = swift_slowAlloc();
          v130[0] = v117;
          *(_DWORD *)v95 = 136315394;
          if (one-time initialization token for typeName != -1)
            swift_once();
          v96 = static SharingNLv4Intent.typeName;
          v97 = unk_2555D34D0;
          swift_bridgeObjectRetain();
          v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v95 + 12) = 2080;
          swift_bridgeObjectRetain();
          v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v90, v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          v98 = v120;
          _os_log_impl(&dword_2203F9000, v120, (os_log_type_t)v118, "%s: typeMatchingSpan=%s'", (uint8_t *)v95, 0x16u);
          v99 = v117;
          swift_arrayDestroy();
          MEMORY[0x2207E453C](v99, -1, -1);
          MEMORY[0x2207E453C](v95, -1, -1);

          v15 = v119;
        }
        else
        {

          v75 = swift_bridgeObjectRelease_n();
        }
      }
    }
  }
  v76 = (uint64_t)v124;
  MEMORY[0x2207E3A50](v75);
  swift_release();
  v77 = v129;
  v78 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v73)(v76, 1, v129);
  v1 = v128;
  if (v78 != 1)
  {
    v79 = v121;
    outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v76, v121);
    v80 = v127;
    v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 88))(v79, v77);
    if (v81 == *MEMORY[0x24BEA1AD8])
    {
      v82 = OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen;
    }
    else
    {
      if (v81 != *MEMORY[0x24BEA1A80])
      {
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v77);
        goto LABEL_68;
      }
      v82 = OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent;
    }
    *(_BYTE *)(v1 + v82) = 1;
  }
LABEL_68:
  outlined destroy of SharingResponse?(v76, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
LABEL_69:
  swift_retain();
  v100 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter();
  v101 = swift_release();
  if (v100)
  {
    v102 = (uint64_t)v125;
    MEMORY[0x2207E39E4](v101);
    swift_release();
    v103 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
    v104 = *(_QWORD *)(v103 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103) == 1)
    {
      outlined destroy of SharingResponse?(v102, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    }
    else
    {
      v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 88))(v102, v103);
      v106 = v102;
      v107 = *MEMORY[0x24BEA0C28];
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v106, v103);
      if (v105 == v107)
        *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything) = 1;
    }
  }
  swift_retain();
  v108 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
  swift_release();
  v109 = swift_release();
  if (v108)
    *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) = 1;
  if (!MEMORY[0x2207E39C0](v109))
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  v110 = v126;
  MEMORY[0x2207E3A98]();
  swift_release();
  v111 = (uint64_t)v110;
  swift_release();
  v112 = type metadata accessor for UsoEntity_common_CollaborationMode.DefinedValues();
  v113 = *(_QWORD *)(v112 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return outlined destroy of SharingResponse?(v111, &demangling cache variable for type metadata for UsoEntity_common_CollaborationMode.DefinedValues?);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v113 + 88))(v111, v112) == *MEMORY[0x24BEA2448])
  {
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v111, v112);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest) = 1;
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v111, v112);
}

uint64_t closure #2 in SharingNLv4Intent.processCommonMessage(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  void (*v5)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntity_common_Agent, INPerson>);
  v5 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  v9 = v4;
  v5(&v8, &v9);
  if (v2)
  {

    result = swift_release();
    v7 = 0;
  }
  else
  {
    result = swift_release();
    v7 = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t UsoEntity_common_AttachmentType.matchingSpan.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  NSObject *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35[2];

  v0 = type metadata accessor for CharacterSet();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UtteranceAlignment?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UtteranceAlignment();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = dispatch thunk of CodeGenBase.getUtteranceAlignmentsHelper(attributeName:)();
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
LABEL_7:
    outlined destroy of SharingResponse?((uint64_t)v6, &demangling cache variable for type metadata for UtteranceAlignment?);
LABEL_18:
    if (one-time initialization token for default != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.default);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_2203F9000, v27, v28, "UsoEntity_common_AttachmentType: unable to determine matchingSpan", v29, 2u);
      MEMORY[0x2207E453C](v29, -1, -1);
    }

    return 0;
  }
  if (*(_QWORD *)(v11 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, v11 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v12, 1, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    goto LABEL_7;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  type metadata accessor for SiriEnvironment();
  if (!static SiriEnvironment.forCurrentTask.getter())
  {
LABEL_17:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_18;
  }
  SiriEnvironment.currentRequest.getter();
  v13 = (void *)CurrentRequest.speechPackage.getter();
  swift_release();
  if (!v13 || (v14 = objc_msgSend(v13, sel_recognition), v13, !v14))
  {
    swift_release();
    goto LABEL_17;
  }
  v15 = AFSpeechRecognition.extract(alignment:)((uint64_t)v10);
  if (!v16)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_release();

    goto LABEL_18;
  }
  v32 = v14;
  v33 = v10;
  v35[0] = v15;
  v35[1] = v16;
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v17 = StringProtocol.trimmingCharacters(in:)();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain_n();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  v23 = v21;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v35[0] = v25;
    *(_DWORD *)v24 = 136315138;
    v31 = v24 + 4;
    swift_bridgeObjectRetain();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2203F9000, v23, v22, "UsoEntity_common_AttachmentType: matchingSpan=%s'", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v25, -1, -1);
    MEMORY[0x2207E453C](v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v33, v7);
  return v17;
}

uint64_t Array<A>.firstAppBundleIdentifier.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  void (*v31)(unint64_t, char *);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  char v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(char *, unint64_t, uint64_t);
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v85 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v82 = (char *)&v79 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v84 = (char *)&v79 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v79 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v79 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v88 = (unint64_t)&v79 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v79 - v18;
  v20 = MEMORY[0x24BEE4AF8];
  v92 = MEMORY[0x24BEE4AF8];
  v21 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v89 = v3;
  v83 = v12;
  v80 = v21;
  v81 = a1;
  if (v21)
  {
    v22 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v23 = *(_QWORD *)(v3 + 72);
    v86 = v15;
    v87 = v22;
    v24 = a1 + v22;
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v25(v19, a1 + v22, v2);
    while (1)
    {
      v26 = UsoIdentifier.namespace.getter();
      if (!v27)
        break;
      if (v26 == 0x64695F6D657469 && v27 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
          break;
      }
      v29 = v2;
      v30 = v25;
      v31 = *(void (**)(unint64_t, char *))(v3 + 32);
      v32 = v29;
      v31(v88, v19);
      v33 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
        v33 = v92;
      }
      v35 = *(_QWORD *)(v33 + 16);
      v34 = *(_QWORD *)(v33 + 24);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        v33 = v92;
      }
      *(_QWORD *)(v33 + 16) = v35 + 1;
      ((void (*)(unint64_t, unint64_t, uint64_t))v31)(v33 + v87 + v35 * v23, v88, v32);
      v92 = v33;
      v3 = v89;
      v25 = v30;
      v2 = v32;
      v15 = v86;
LABEL_4:
      v24 += v23;
      if (!--v21)
      {
        v20 = v92;
        a1 = v81;
        v12 = v83;
        goto LABEL_17;
      }
      v25(v19, v24, v2);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v19, v2);
    goto LABEL_4;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  v36 = *(_QWORD *)(v20 + 16);
  if (v36)
  {
    v37 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v38 = *(_QWORD *)(v3 + 72);
    v87 = v20;
    v88 = v38;
    v39 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    swift_retain();
    v40 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v39(v15, v37, v2);
      v41 = UsoIdentifier.value.getter();
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
      v45 = v40[2];
      v44 = v40[3];
      if (v45 >= v44 >> 1)
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v40);
      v40[2] = v45 + 1;
      v46 = &v40[2 * v45];
      v46[4] = v41;
      v46[5] = v43;
      v3 = v89;
      v37 += v88;
      --v36;
    }
    while (v36);
    swift_release_n();
    a1 = v81;
    v12 = v83;
  }
  else
  {
    swift_release();
    v40 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v47 = v80;
  if (v40[2])
  {
    v48 = v40[4];
    swift_bridgeObjectRetain();
    goto LABEL_56;
  }
  swift_bridgeObjectRelease();
  v49 = MEMORY[0x24BEE4AF8];
  v94 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  if (!v47)
    goto LABEL_47;
  v50 = *(_QWORD *)(v3 + 72);
  v88 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v51 = a1 + v88;
  v52 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v52(v12, a1 + v88, v2);
  while (1)
  {
    v55 = UsoIdentifier.namespace.getter();
    if (!v56)
    {
      v53 = v84;
      v52(v84, (unint64_t)v12, v2);
LABEL_31:
      v54 = *(void (**)(char *, uint64_t))(v3 + 8);
      v54(v53, v2);
LABEL_32:
      v54(v12, v2);
      goto LABEL_33;
    }
    if (v55 == 0x656D614E707061 && v56 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      v53 = v84;
      v52(v84, (unint64_t)v12, v2);
    }
    else
    {
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v53 = v84;
      v52(v84, (unint64_t)v12, v2);
      if ((v57 & 1) == 0)
        goto LABEL_31;
    }
    v58 = v53;
    v92 = UsoIdentifier.value.getter();
    v93 = v59;
    v90 = 46;
    v91 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v60 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    v54 = *(void (**)(char *, uint64_t))(v3 + 8);
    v61 = v58;
    v12 = v83;
    v54(v61, v2);
    if ((v60 & 1) == 0)
      goto LABEL_32;
    v62 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v62(v82, v12, v2);
    v63 = v94;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v63 + 16) + 1, 1);
      v63 = v94;
    }
    v65 = *(_QWORD *)(v63 + 16);
    v64 = *(_QWORD *)(v63 + 24);
    if (v65 >= v64 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
      v63 = v94;
    }
    *(_QWORD *)(v63 + 16) = v65 + 1;
    v62((char *)(v63 + v88 + v65 * v50), v82, v2);
    v94 = v63;
    v3 = v89;
LABEL_33:
    v51 += v50;
    if (!--v47)
      break;
    v52(v12, v51, v2);
  }
  v49 = v94;
LABEL_47:
  swift_bridgeObjectRelease();
  v66 = *(_QWORD *)(v49 + 16);
  if (!v66)
  {
    swift_release();
    v70 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_55;
    goto LABEL_59;
  }
  v67 = v49 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v68 = *(_QWORD *)(v3 + 72);
  v69 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v88 = v49;
  swift_retain();
  v70 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v71 = v85;
    v69(v85, v67, v2);
    v72 = UsoIdentifier.value.getter();
    v74 = v73;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70[2] + 1, 1, v70);
    v76 = v70[2];
    v75 = v70[3];
    if (v76 >= v75 >> 1)
      v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v75 > 1), v76 + 1, 1, v70);
    v70[2] = v76 + 1;
    v77 = &v70[2 * v76];
    v77[4] = v72;
    v77[5] = v74;
    v67 += v68;
    --v66;
  }
  while (v66);
  swift_release_n();
  if (!v70[2])
  {
LABEL_59:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_55:
  v48 = v70[4];
  swift_bridgeObjectRetain();
LABEL_56:
  swift_bridgeObjectRelease();
  return v48;
}

uint64_t SharingNLv4Intent.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of SharingResponse?(v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SharingNLv4Intent()
{
  return type metadata accessor for SharingNLv4Intent();
}

uint64_t type metadata accessor for SharingNLv4Intent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SharingNLv4Intent;
  if (!type metadata singleton initialization cache for SharingNLv4Intent)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SharingNLv4Intent()
{
  unint64_t v0;

  type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t protocol witness for SharingIntent.verb.getter in conformance SharingNLv4Intent()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 16);
}

uint64_t protocol witness for SharingIntent.type.getter in conformance SharingNLv4Intent@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  return outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v3, a1);
}

uint64_t protocol witness for SharingIntent.type.setter in conformance SharingNLv4Intent(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(a1, v3);
  return swift_endAccess();
}

uint64_t protocol witness for SharingIntent.containsSharingReference.getter in conformance SharingNLv4Intent()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference);
}

uint64_t protocol witness for SharingIntent.containsSharingReference.setter in conformance SharingNLv4Intent(uint64_t result)
{
  _QWORD *v1;

  *(_BYTE *)(*v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) = result;
  return result;
}

uint64_t protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
}

uint64_t protocol witness for SharingIntent.appName.setter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)(*v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.setter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)(*v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SharingIntent.appIdentifier.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
}

uint64_t protocol witness for SharingIntent.appIdentifier.setter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)(*v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SharingIntent.associatedAppIdentifier.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
}

uint64_t protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(*v3 + *a3);
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t protocol witness for SharingIntent.refersToScreen.getter in conformance SharingNLv4Intent()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen);
}

uint64_t protocol witness for SharingIntent.refersToEverything.getter in conformance SharingNLv4Intent()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything);
}

uint64_t protocol witness for SharingIntent.refersToDisplayedContent.getter in conformance SharingNLv4Intent()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent);
}

uint64_t protocol witness for SharingIntent.recipients.getter in conformance SharingNLv4Intent()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingIntent.confirmationValue.getter in conformance SharingNLv4Intent()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue);
}

uint64_t protocol witness for SharingIntent.isSharePlayRequest.getter in conformance SharingNLv4Intent()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest);
}

uint64_t protocol witness for SharingIntent.usoEntity.getter in conformance SharingNLv4Intent()
{
  return swift_retain();
}

uint64_t protocol witness for SharingIntent.isReformed.getter in conformance SharingNLv4Intent()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed);
}

uint64_t protocol witness for SharingIntent.isReformed.setter in conformance SharingNLv4Intent(uint64_t result)
{
  _QWORD *v1;

  *(_BYTE *)(*v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed) = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingNLv4Intent()
{
  return SharingNLv4Intent.description.getter();
}

unint64_t instantiation function for generic protocol witness table for SharingNLv4Intent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SharingNLv4Intent and conformance SharingNLv4Intent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingNLv4Intent and conformance SharingNLv4Intent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent;
  if (!lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent)
  {
    v1 = type metadata accessor for SharingNLv4Intent();
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for SharingNLv4Intent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent);
  }
  return result;
}

uint64_t AFSpeechRecognition.extract(alignment:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v3 = type metadata accessor for UtteranceAlignment();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UtteranceSpan?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UtteranceSpan();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - v14;
  v16 = UtteranceAlignment.spans.getter();
  if (*(_QWORD *)(v16 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v9, v16 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v10);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v17, 1, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of SharingResponse?((uint64_t)v9, &demangling cache variable for type metadata for UtteranceSpan?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
  v18 = objc_msgSend(v1, sel_nBestTranscripts);
  if (!v18)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    return (uint64_t)v18;
  }
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v20 = UtteranceAlignment.asrHypothesisIndex.getter();
  v21 = *(_QWORD *)(v19 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  if (v21 <= v20)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    return 0;
  }
  UtteranceAlignment.asrHypothesisIndex.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  result = UtteranceAlignment.asrHypothesisIndex.getter();
  if (*(_QWORD *)(v19 + 16) <= (unint64_t)result)
  {
    __break(1u);
  }
  else
  {
    v23 = v19 + 16 * result;
    v25 = *(_QWORD *)(v23 + 32);
    v24 = *(_QWORD *)(v23 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    UtteranceSpan.startIndex.getter();
    v26 = UtteranceSpan.startIndex.getter();
    v27 = UtteranceSpan.endIndex.getter();
    v28 = v42;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v15, v10);
    if (v26 >= v27)
    {
      swift_bridgeObjectRelease();
      v31 = *(void (**)(char *, uint64_t))(v11 + 8);
      v31(v28, v10);
      goto LABEL_15;
    }
    v29 = UtteranceSpan.endIndex.getter();
    swift_bridgeObjectRetain();
    v30 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    v31 = *(void (**)(char *, uint64_t))(v11 + 8);
    v31(v28, v10);
    if (v30 < v29)
    {
      swift_bridgeObjectRelease();
LABEL_15:
      v31(v15, v10);
      return 0;
    }
    swift_bridgeObjectRetain();
    UtteranceSpan.startIndex.getter();
    v32 = String.UTF16View.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    UtteranceSpan.endIndex.getter();
    v33 = String.UTF16View.index(_:offsetBy:)();
    result = swift_bridgeObjectRelease();
    if (v33 >> 14 >= v32 >> 14)
    {
      v34 = MEMORY[0x2207E3D74](v32, v33, v25, v24);
      v36 = v35;
      v38 = v37;
      v40 = v39;
      swift_bridgeObjectRelease();
      v18 = (id)MEMORY[0x2207E3D80](v34, v36, v38, v40);
      v31(v15, v10);
      return (uint64_t)v18;
    }
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in SharingNLv4Intent.processCommonMessage(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #2 in SharingNLv4Intent.processCommonMessage(_:)(a1, a2);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, (uint64_t (*)(_QWORD))MEMORY[0x24BE9F9A0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Contact]>, &demangling cache variable for type metadata for [Contact]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>, (uint64_t (*)(_QWORD))MEMORY[0x24BE934C0]);
  *v3 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2207E4494](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationParticipant>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationParticipant);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2)
{
  return destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t getEnumTagSinglePayload for ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_220427D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_220427D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

void type metadata completion function for ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  unint64_t v0;

  type metadata accessor for Loggable<String>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Loggable<String>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Loggable<String>)
  {
    v0 = type metadata accessor for Loggable();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Loggable<String>);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(a4);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    v9((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v8);
  }
  return a1;
}

uint64_t destroy for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2)
{
  return destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(a1, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 20), v5);
}

uint64_t initializeWithCopy for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t assignWithCopy for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t initializeWithTake for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t assignWithTake for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModel.BinaryButtonSnippetModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22042813C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.BinaryButtonSnippetModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_220428190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel.BinaryButtonSnippetModel);
}

void type metadata completion function for ExpanseUIModel.BinaryButtonSnippetModel()
{
  unint64_t v0;

  type metadata accessor for Loggable<ExpanseUIModel.ButtonModel>(319, &lazy cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>, type metadata accessor for ExpanseUIModel.ButtonModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEAD360]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for ExpanseUIModel.ButtonModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel.ButtonModel);
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
      v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      v8 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      v8 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    }
    v7((uint64_t *)((char *)a1 + *(int *)(v8 + 20)), (uint64_t *)((char *)a2 + *(int *)(v8 + 20)), v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ExpanseUIModel(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
    v5(a1, v2);
    v3 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
    v5(a1, v2);
    v3 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v3 + 20), v2);
}

uint64_t initializeWithCopy for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
    v5(a1, a2, v4);
    v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  }
  else
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
    v5(a1, a2, v4);
    v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  }
  v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of StartSharingFlow.StartSharingFlowState(a1, type metadata accessor for ExpanseUIModel);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    }
    else
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    }
    v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for ExpanseUIModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel);
}

uint64_t initializeWithTake for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
    v5(a1, a2, v4);
    v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  }
  else
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
    v5(a1, a2, v4);
    v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  }
  v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of StartSharingFlow.StartSharingFlowState(a1, type metadata accessor for ExpanseUIModel);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
      v5(a1, a2, v4);
      v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    }
    else
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
      v5(a1, a2, v4);
      v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    }
    v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for ExpanseUIModel()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.ButtonModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain();
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t destroy for ExpanseUIModel.ButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for ExpanseUIModel.ButtonModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  swift_bridgeObjectRetain();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for ExpanseUIModel.ButtonModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for ExpanseUIModel.ButtonModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for ExpanseUIModel.ButtonModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModel.ButtonModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_220428B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.ButtonModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_220428BEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for ExpanseUIModel.ButtonModel()
{
  unint64_t v0;

  type metadata accessor for Loggable<ExpanseUIModel.ButtonModel>(319, &lazy cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>, (uint64_t (*)(uint64_t))type metadata accessor for SAIntentGroupRunSiriKitExecutor, MEMORY[0x24BEABA78]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Loggable<ExpanseUIModel.ButtonModel>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t type metadata accessor for SAIntentGroupRunSiriKitExecutor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor;
  if (!lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  }
  return result;
}

uint64_t ExpanseUIModel.AppStorePunchoutSnippetModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>, MEMORY[0x24BEAD370]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ExpanseUIModel.AppStorePunchoutSnippetModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v21 = a2;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  v24 = *(_QWORD *)(v26 - 8);
  v4 = MEMORY[0x24BDAC7A8](v26);
  v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v19 - v6;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys>);
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = v10;
  v20 = a1;
  v13 = v7;
  v14 = v22;
  v15 = v24;
  v28 = 0;
  lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>, MEMORY[0x24BEAD380]);
  v16 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = v25;
  v25 = *(char **)(v15 + 32);
  ((void (*)(char *, char *, uint64_t))v25)(v12, v17, v26);
  v27 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v16);
  ((void (*)(char *, char *, uint64_t))v25)(&v12[*(int *)(v19 + 20)], v14, v26);
  outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v12, v21, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v12, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

uint64_t ExpanseUIModel.BinaryButtonSnippetModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
  lazy protocol witness table accessor for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>, MEMORY[0x24BEAD370]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ExpanseUIModel.BinaryButtonSnippetModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v21 = a2;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
  v24 = *(_QWORD *)(v26 - 8);
  v4 = MEMORY[0x24BDAC7A8](v26);
  v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v19 - v6;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys>);
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = v10;
  v20 = a1;
  v13 = v7;
  v14 = v22;
  v15 = v24;
  v28 = 0;
  lazy protocol witness table accessor for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>, MEMORY[0x24BEAD380]);
  v16 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = v25;
  v25 = *(char **)(v15 + 32);
  ((void (*)(char *, char *, uint64_t))v25)(v12, v17, v26);
  v27 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v16);
  ((void (*)(char *, char *, uint64_t))v25)(&v12[*(int *)(v19 + 20)], v14, v26);
  outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v12, v21, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v12, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
}

uint64_t ExpanseUIModel.ButtonModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.ButtonModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ExpanseUIModel.ButtonModel(0);
    v8[14] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>, MEMORY[0x24BEABA88]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ExpanseUIModel.ButtonModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v19 = a2;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v18 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v20 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.ButtonModel.CodingKeys>);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ExpanseUIModel.ButtonModel(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (_QWORD *)((char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = a1;
  v11 = v5;
  v13 = v20;
  v12 = v21;
  v24 = 0;
  *v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[1] = v14;
  v16[1] = v14;
  v23 = 1;
  lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>, MEMORY[0x24BEABA90]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v22);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v10 + *(int *)(v8 + 20), v13, v12);
  outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v10, v19, type metadata accessor for ExpanseUIModel.ButtonModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v10, type metadata accessor for ExpanseUIModel.ButtonModel);
}

uint64_t ExpanseUIModel.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.BinaryButtonCodingKeys>);
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v29 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  MEMORY[0x24BDAC7A8](v27);
  v28 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.AppStorePunchoutCodingKeys>);
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  MEMORY[0x24BDAC7A8](v24);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ExpanseUIModel(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.CodingKeys>);
  v32 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v33, (uint64_t)v12, type metadata accessor for ExpanseUIModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = v28;
    outlined init with take of ExpanseUIModel((uint64_t)v12, v28, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
    v35 = 1;
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();
    v17 = v29;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel);
    v18 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v18);
    v19 = v16;
    v20 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel;
  }
  else
  {
    outlined init with take of ExpanseUIModel((uint64_t)v12, (uint64_t)v9, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
    v34 = 0;
    lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel and conformance ExpanseUIModel.AppStorePunchoutSnippetModel, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutSnippetModel);
    v21 = v26;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v21);
    v19 = (uint64_t)v9;
    v20 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel;
  }
  outlined destroy of StartSharingFlow.StartSharingFlowState(v19, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v13);
}

uint64_t ExpanseUIModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;

  v36 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.BinaryButtonCodingKeys>);
  v40 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v43 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.AppStorePunchoutCodingKeys>);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.CodingKeys>);
  v41 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ExpanseUIModel(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v32 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - v16;
  v18 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();
  v19 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
    goto LABEL_5;
  v34 = v12;
  v35 = v15;
  v20 = v43;
  v33 = v17;
  v45 = v9;
  v21 = v6;
  v22 = v8;
  if (*(_QWORD *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    v27 = type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v29 = v45;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x24BEE26D0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v6);
LABEL_5:
    v26 = (uint64_t)v44;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v46 = 1;
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();
  v23 = v20;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel);
  v24 = (uint64_t)v34;
  v25 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v25);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v21);
  v26 = (uint64_t)v44;
  swift_storeEnumTagMultiPayload();
  v31 = (uint64_t)v33;
  outlined init with take of ExpanseUIModel(v24, (uint64_t)v33, type metadata accessor for ExpanseUIModel);
  outlined init with take of ExpanseUIModel(v31, v36, type metadata accessor for ExpanseUIModel);
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656D614E707061;
  else
    return 0x614C6E6F74747562;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  if ((static Loggable<A>.== infix(_:_:)() & 1) != 0)
    return static Loggable<A>.== infix(_:_:)();
  else
    return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.AppStorePunchoutSnippetModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel(_QWORD *a1)
{
  return ExpanseUIModel.AppStorePunchoutSnippetModel.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7261646E6F636573;
  else
    return 0x427972616D697270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel.BinaryButtonSnippetModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.BinaryButtonSnippetModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel.BinaryButtonSnippetModel(_QWORD *a1)
{
  return ExpanseUIModel.BinaryButtonSnippetModel.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.ButtonModel.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6C6562616CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.ButtonModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ExpanseUIModel.ButtonModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.ButtonModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.ButtonModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel.ButtonModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.ButtonModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel.ButtonModel(_QWORD *a1)
{
  return ExpanseUIModel.ButtonModel.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.AppStorePunchoutCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.BinaryButtonCodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.BinaryButtonCodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x75427972616E6962;
  else
    return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ExpanseUIModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.CodingKeys()
{
  lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

unint64_t protocol witness for static SnippetPluginModel.bundleName.getter in conformance ExpanseUIModel()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel(_QWORD *a1)
{
  return ExpanseUIModel.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ExpanseUIModel.BinaryButtonSnippetModel()
{
  return lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel);
}

uint64_t base witness table accessor for Encodable in ExpanseUIModel.BinaryButtonSnippetModel()
{
  return lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel);
}

uint64_t base witness table accessor for Decodable in ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  return lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel and conformance ExpanseUIModel.AppStorePunchoutSnippetModel, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

uint64_t base witness table accessor for Encodable in ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  return lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel and conformance ExpanseUIModel.AppStorePunchoutSnippetModel, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

uint64_t base witness table accessor for Decodable in ExpanseUIModel()
{
  return lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel and conformance ExpanseUIModel, type metadata accessor for ExpanseUIModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel);
}

uint64_t base witness table accessor for Encodable in ExpanseUIModel()
{
  return lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel and conformance ExpanseUIModel, type metadata accessor for ExpanseUIModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel);
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys, &unk_24E638E80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys, &unk_24E638E80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys, &unk_24E638E80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys, &unk_24E638E80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<String>);
    v6[0] = MEMORY[0x24BEE0D38];
    v6[1] = MEMORY[0x24BEE0D08];
    result = MEMORY[0x2207E4494](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys, &unk_24E638DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys, &unk_24E638DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys, &unk_24E638DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys, &unk_24E638DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    v6[0] = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel and conformance ExpanseUIModel.ButtonModel, type metadata accessor for ExpanseUIModel.ButtonModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.ButtonModel);
    v6[1] = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel and conformance ExpanseUIModel.ButtonModel, type metadata accessor for ExpanseUIModel.ButtonModel, (uint64_t)&protocol conformance descriptor for ExpanseUIModel.ButtonModel);
    result = MEMORY[0x2207E4494](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.CodingKeys, &unk_24E638C40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.CodingKeys, &unk_24E638C40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.CodingKeys, &unk_24E638C40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.CodingKeys, &unk_24E638C40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonCodingKeys, &unk_24E638D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonCodingKeys, &unk_24E638D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonCodingKeys, &unk_24E638D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.BinaryButtonCodingKeys, &unk_24E638D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutCodingKeys, &unk_24E638CD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutCodingKeys, &unk_24E638CD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutCodingKeys, &unk_24E638CD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.AppStorePunchoutCodingKeys, &unk_24E638CD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

uint64_t outlined init with take of ExpanseUIModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.ButtonModel.CodingKeys, &unk_24E638BB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.ButtonModel.CodingKeys, &unk_24E638BB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.ButtonModel.CodingKeys, &unk_24E638BB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ExpanseUIModel.ButtonModel.CodingKeys, &unk_24E638BB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    result = MEMORY[0x2207E4494](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for ExpanseUIModel.ButtonModel.CodingKeys()
{
  return &unk_24E638BB0;
}

void *type metadata accessor for ExpanseUIModel.CodingKeys()
{
  return &unk_24E638C40;
}

void *type metadata accessor for ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  return &unk_24E638CD0;
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.AppStorePunchoutCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22042AB84 + 4 * byte_220445D10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22042ABA4 + 4 * byte_220445D15[v4]))();
}

_BYTE *sub_22042AB84(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22042ABA4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22042ABAC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22042ABB4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22042ABBC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22042ABC4(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ExpanseUIModel.BinaryButtonCodingKeys()
{
  return &unk_24E638D60;
}

void *type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  return &unk_24E638DF0;
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.ButtonModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22042AC3C + 4 * byte_220445D1F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22042AC70 + 4 * byte_220445D1A[v4]))();
}

uint64_t sub_22042AC70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22042AC78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22042AC80);
  return result;
}

uint64_t sub_22042AC8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22042AC94);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22042AC98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22042ACA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  return &unk_24E638E80;
}

uint64_t specialized ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x614C6E6F74747562 && a2 == 0xEB000000006C6562;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x427972616D697270 && a2 == 0xED00006E6F747475;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E6F636573 && a2 == 0xEF6E6F7474754279)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ExpanseUIModel.ButtonModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000220448C00)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ExpanseUIModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000220448BE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x75427972616E6962 && a2 == 0xEC0000006E6F7474)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_22042B6E0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_22042B7A4()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_22042B8E4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t ScreenShareAvailability.description.getter(char a1)
{
  if (a1 == 4)
    return 0xD000000000000021;
  if (a1 != 5)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  return 0xD00000000000001FLL;
}

uint64_t ScreenShareAvailability.UnavailabilityReason.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_22042BAE4 + 4 * byte_220446650[a1]))(0xD000000000000018, 0x8000000220447870);
}

uint64_t sub_22042BAE4()
{
  return 0x6F486E4F6C6C6163;
}

unint64_t sub_22042BB00()
{
  return 0xD000000000000010;
}

uint64_t sub_22042BB1C()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t ScreenShareAvailability.UnavailabilityReason.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_22042BB70 + 4 * byte_220446654[a1]))(0xD000000000000018, 0x8000000220447870);
}

uint64_t sub_22042BB70()
{
  return 0x6F486E4F6C6C6163;
}

unint64_t sub_22042BB8C()
{
  return 0xD000000000000010;
}

uint64_t sub_22042BBA8()
{
  uint64_t v0;

  return v0 + 3;
}

void protocol witness for Hashable.hashValue.getter in conformance ScreenShareAvailability.UnavailabilityReason()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ScreenShareAvailability.UnavailabilityReason(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ScreenShareAvailability.UnavailabilityReason(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ScreenShareAvailability.UnavailabilityReason@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ScreenShareAvailability.UnavailabilityReason.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ScreenShareAvailability.UnavailabilityReason@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ScreenShareAvailability.UnavailabilityReason.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ScreenShareAvailability.UnavailabilityReason(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScreenShareAvailability.UnavailabilityReason()
{
  unsigned __int8 *v0;

  return ScreenShareAvailability.UnavailabilityReason.description.getter(*v0);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ScreenShareAvailability(unsigned __int8 *a1, char *a2)
{
  int v2;
  char v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 5 && v2 != 4 && (v3 & 0xFE) != 4)
    specialized == infix<A>(_:_:)(v2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScreenShareAvailability()
{
  char *v0;

  return ScreenShareAvailability.description.getter(*v0);
}

uint64_t getEnumTagSinglePayload for ScreenShareAvailability(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_22042BCE4 + 4 * byte_220446658[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ScreenShareAvailability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_22042BD90 + 4 * byte_220446662[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_22042BDC4 + 4 * byte_22044665D[v5]))();
}

uint64_t sub_22042BDC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22042BDCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22042BDD4);
  return result;
}

uint64_t sub_22042BDE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22042BDE8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_22042BDEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22042BDF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScreenShareAvailability()
{
  return &type metadata for ScreenShareAvailability;
}

uint64_t storeEnumTagSinglePayload for ScreenShareAvailability.UnavailabilityReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_22042BE5C + 4 * byte_22044666C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_22042BE90 + 4 * byte_220446667[v4]))();
}

uint64_t sub_22042BE90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22042BE98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22042BEA0);
  return result;
}

uint64_t sub_22042BEAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22042BEB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_22042BEB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22042BEC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScreenShareAvailability.UnavailabilityReason()
{
  return &type metadata for ScreenShareAvailability.UnavailabilityReason;
}

unint64_t lazy protocol witness table accessor for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason;
  if (!lazy protocol witness table cache variable for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ScreenShareAvailability.UnavailabilityReason, &type metadata for ScreenShareAvailability.UnavailabilityReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason);
  }
  return result;
}

unint64_t specialized ScreenShareAvailability.UnavailabilityReason.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ScreenShareAvailability.UnavailabilityReason.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t Call.isFaceTimeCall.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 24))(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if ((v10 & 1) != 0)
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  else
    v11 = 0;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v11 & 1;
}

uint64_t Call.allowsScreenSharing.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 16))(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if ((v10 & 1) != 0)
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  else
    v11 = 0;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v11 & 1;
}

uint64_t Call.activeShareSession.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  (*(void (**)(__int128 *__return_ptr))(a2 + 40))(&v23);
  if (!v24)
  {
    outlined destroy of SharingResponse?((uint64_t)&v23, &demangling cache variable for type metadata for Conversation?);
    return 0;
  }
  outlined init with take of SharingIntent(&v23, (uint64_t)v26);
  v4 = v27;
  v5 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 16))(&v21, v4, v5);
  if (!v22)
  {
    outlined destroy of SharingResponse?((uint64_t)&v21, &demangling cache variable for type metadata for ActivitySession?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    return 0;
  }
  outlined init with take of SharingIntent(&v21, (uint64_t)&v23);
  v6 = v24;
  v7 = v25;
  __swift_project_boxed_opaque_existential_1(&v23, v24);
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
  v8 = v24;
  v9 = v25;
  __swift_project_boxed_opaque_existential_1(&v23, v24);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  if ((v7 & 1) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 104))(a1, v2);
      if (v11)
      {
        v12 = v11;
        if (!objc_msgSend(v11, sel_isWindowed))
        {

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
          return 0;
        }
        lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
        swift_allocError();
        swift_willThrow();

      }
      else
      {
        if (one-time initialization token for default != -1)
          swift_once();
        v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.default);
        v18 = Logger.logObject.getter();
        v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          v2 = swift_slowAlloc();
          *(_WORD *)v2 = 0;
          _os_log_impl(&dword_2203F9000, v18, v19, "Malformed call - screen sharing activity session is local, yet no screen share attributes are present. File a bug on TU?", (uint8_t *)v2, 2u);
          MEMORY[0x2207E453C](v2, -1, -1);
        }

        lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
        swift_allocError();
        swift_willThrow();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
    else
    {
      v13 = v24;
      v14 = v25;
      __swift_project_boxed_opaque_existential_1(&v23, v24);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      v15 = v24;
      v16 = v25;
      __swift_project_boxed_opaque_existential_1(&v23, v24);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    return 0;
  }
  return v2;
}

uint64_t Call.isGroupCall.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(_QWORD *__return_ptr))(a2 + 40))(v6);
  v2 = v7;
  if (v7)
  {
    v3 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3) & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    outlined destroy of SharingResponse?((uint64_t)v6, &demangling cache variable for type metadata for Conversation?);
    return 2;
  }
  return v4;
}

uint64_t Call.screenShareAvailability.getter(uint64_t a1, uint64_t a2)
{
  int v4;
  char v6;
  unsigned int v7;

  v4 = (*(uint64_t (**)(void))(a2 + 8))();
  switch(v4)
  {
    case 3:
      if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2) & 1) != 0)
      {
        v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(a1, a2);
        if ((v6 & 1) != 0)
          v7 = 4;
        else
          v7 = 2;
        if (v6 == 2)
          return 5;
        else
          return v7;
      }
      else
      {
        return 0;
      }
    case 2:
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2) & 1;
    case 1:
      if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2) & 1) != 0)
        return 4;
      else
        return 0;
    default:
      return 3;
  }
}

BOOL Call.isScreenShareSalient.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  int v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  _BOOL8 v18;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v20 - v11;
  v14 = *(uint64_t (**)(uint64_t))(v13 + 8);
  v15 = v14(v10);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v16(v12, v3, a1);
  if (v15 != 1)
    LOBYTE(v15) = ((unsigned int (*)(uint64_t, uint64_t))v14)(a1, a2) == 3;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v12, a1);
  v16(v9, v3, a1);
  v18 = (v15 & 1) != 0 || ((unsigned int (*)(uint64_t, uint64_t))v14)(a1, a2) == 2;
  v17(v9, a1);
  return v18;
}

void TUCall.setLocalScreenShareAttributes(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = (void *)objc_opt_self();
  v5 = v1;
  v6 = a1;
  v7 = v5;
  v8 = v6;
  if (objc_msgSend(v4, sel_isMainThread))
  {
    objc_msgSend(v7, sel_setScreenShareAttributes_, v8);

    swift_release();
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v9 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x24BDAC7A8](v9);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }
}

void TUCall.enableScreenSharing(with:)(void *a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = (void *)objc_opt_self();
  v5 = v1;
  v6 = a1;
  v7 = v5;
  v8 = v6;
  if (objc_msgSend(v4, sel_isMainThread))
  {
    objc_msgSend(v7, sel_setSharingScreen_attributes_, 1, v8);

    swift_release();
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v9 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x24BDAC7A8](v9);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }
}

Swift::Void __swiftcall TUCall.disableScreenSharing()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;

  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  *(_BYTE *)(v1 + 24) = 0;
  v2 = (void *)objc_opt_self();
  v3 = v0;
  if (objc_msgSend(v2, sel_isMainThread))
  {
    objc_msgSend(v3, sel_setSharingScreen_, 0);

    swift_release();
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v4 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x24BDAC7A8](v4);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }
}

id protocol witness for Call.status.getter in conformance TUCall()
{
  id *v0;

  return objc_msgSend(*v0, sel_status);
}

id protocol witness for Call.providerIsFaceTime.getter in conformance TUCall()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, sel_provider);
  v2 = objc_msgSend(v1, sel_isFaceTimeProvider);

  return v2;
}

id protocol witness for Call.isConversation.getter in conformance TUCall()
{
  id *v0;

  return objc_msgSend(*v0, sel_isConversation);
}

double protocol witness for Call.conversation.getter in conformance TUCall@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  id v5;
  double result;

  v3 = *v1;
  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v5 = objc_msgSend(v4, sel_activeConversationForCall_, v3);

  if (v5)
  {
    *(_QWORD *)(a1 + 24) = type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversation);
    *(_QWORD *)(a1 + 32) = &protocol witness table for TUConversation;
    *(_QWORD *)a1 = v5;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

id protocol witness for Call.isScreenSharingCapable.getter in conformance TUCall()
{
  id v0;
  id v1;
  id v2;

  if (!objc_msgSend((id)objc_opt_self(), sel_allowsScreenSharing))
    return 0;
  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_conversationManager);

  v2 = objc_msgSend(v1, sel_isScreenSharingAvailable);
  return v2;
}

uint64_t protocol witness for Call.activeShareSession.getter in conformance TUCall(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = Call.activeShareSession.getter(a1, a2);
  if (v2)
    return v4;
  return result;
}

id protocol witness for Call.isLocalParticipantSharingScreen.getter in conformance TUCall()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSharingScreen);
}

id protocol witness for Call.localScreenShareAttributes.getter in conformance TUCall()
{
  id *v0;
  id v1;

  v1 = *v0;
  if (objc_msgSend(*v0, sel_isSharingScreen))
    return objc_msgSend(v1, sel_screenShareAttributes);
  else
    return 0;
}

void protocol witness for Call.setLocalScreenShareAttributes(_:) in conformance TUCall(void *a1)
{
  TUCall.setLocalScreenShareAttributes(_:)(a1);
}

void protocol witness for Call.enableScreenSharing(with:) in conformance TUCall(void *a1)
{
  TUCall.enableScreenSharing(with:)(a1);
}

void protocol witness for Call.disableScreenSharing() in conformance TUCall()
{
  TUCall.disableScreenSharing()();
}

uint64_t dispatch thunk of Call.activeShareSession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Call.isLocalParticipantSharingScreen.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of Call.localScreenShareAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of Call.enableScreenSharing(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of Call.disableScreenSharing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t sub_22042CD84()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in TUCall.isLocalParticipantSharingScreen.setter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setSharingScreen_, *(unsigned __int8 *)(v0 + 24));
}

uint64_t partial apply for specialized closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_22042CDE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in TUCall.enableScreenSharing(with:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setSharingScreen_attributes_, 1, *(_QWORD *)(v0 + 24));
}

id partial apply for closure #1 in TUCall.setLocalScreenShareAttributes(_:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setScreenShareAttributes_, *(_QWORD *)(v0 + 24));
}

uint64_t closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)specialized partial apply()
{
  return partial apply for specialized closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)();
}

uint64_t storeEnumTagSinglePayload for ExpanseError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22042CE8C + 4 * byte_220446830[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22042CEAC + 4 * byte_220446835[v4]))();
}

_BYTE *sub_22042CE8C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22042CEAC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22042CEB4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22042CEBC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22042CEC4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22042CECC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ExpanseError()
{
  return &type metadata for ExpanseError;
}

uint64_t dispatch thunk of DialogExecuting.execute(catId:parameters:globals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = dispatch thunk of DialogExecuting.execute(catId:parameters:globals:);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of DialogExecuting.execute(catId:parameters:globals:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of DialogExecuting.executeAsLabel(catId:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of DialogExecuting.executeAsLabel(catId:parameters:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of DialogExecuting.executeAsLabel(catId:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t AppBundleID.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_22042D130 + 4 * byte_220446934[a1]))(0xD000000000000010, 0x8000000220447D60);
}

uint64_t sub_22042D130()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t specialized Array<A>.containsAtLeastOneOf<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t j;
  unint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v25 = a2 + 32;
  v4 = a1 + 56;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  for (i = 0; i != v2; ++i)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v6 = (uint64_t *)(v25 + 16 * i);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v9 = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(a1 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v23 = 1;
          goto LABEL_27;
        }
        v15 = ~v10;
        v16 = (v11 + 1) & ~v10;
        if (((*(_QWORD *)(v4 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
        {
          v17 = (_QWORD *)(v12 + 16 * v16);
          v18 = *v17 == v8 && v17[1] == v7;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_26;
          for (j = v16 + 1; ; j = v20 + 1)
          {
            v20 = j & v15;
            if (((*(_QWORD *)(v4 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0)
              break;
            v21 = (_QWORD *)(v12 + 16 * v20);
            v22 = *v21 == v8 && v21[1] == v7;
            if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_26;
          }
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease_n();
  v23 = 0;
LABEL_27:
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = specialized Set.startIndex.getter(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = specialized Set.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t RecipientsResolver.resolve(persons:)(unint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  id *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t j;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t k;
  uint64_t v74;
  char v75;
  char *v76;
  char *v77;
  int64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v3 = v2;
  v90 = type metadata accessor for ContactHandle();
  v92 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v89 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1;
  v7 = type metadata accessor for ContactQuery();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v76 - v12;
  if (!v6)
    return 0;
  v80 = v1;
  v82 = v3;
  v83 = v6;
  if (!(v6 >> 62))
  {
    v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14)
      goto LABEL_22;
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_22;
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_4:
    v94[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
      goto LABEL_91;
    v15 = v94[0];
    if ((v83 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v14; ++i)
      {
        MEMORY[0x2207E3F60](i, v83);
        INPerson.toContactQuery()();
        swift_unknownObjectRelease();
        v94[0] = v15;
        v18 = *(_QWORD *)(v15 + 16);
        v17 = *(_QWORD *)(v15 + 24);
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v15 = v94[0];
        }
        *(_QWORD *)(v15 + 16) = v18 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v18, v13, v7);
      }
    }
    else
    {
      v20 = (id *)(v83 + 32);
      do
      {
        v21 = *v20;
        INPerson.toContactQuery()();

        v94[0] = v15;
        v23 = *(_QWORD *)(v15 + 16);
        v22 = *(_QWORD *)(v15 + 24);
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          v15 = v94[0];
        }
        *(_QWORD *)(v15 + 16) = v23 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v23, v11, v7);
        ++v20;
        --v14;
      }
      while (v14);
    }
    goto LABEL_20;
  }
  v15 = MEMORY[0x24BEE4AF8];
LABEL_20:
  __swift_project_boxed_opaque_existential_1(v80, v80[3]);
  v24 = v82;
  v25 = ContactResolver.findMatches(queries:)(v15);
  if (v24)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = *((_QWORD *)v26 + 2);
  if (!v27)
  {
    v82 = 0;
    swift_bridgeObjectRelease();
    v63 = MEMORY[0x24BEE4AF8];
    goto LABEL_73;
  }
  v28 = *((_QWORD *)v26 + 4);
  v77 = v26 + 32;
  if (!*(_QWORD *)(v28 + 16))
    goto LABEL_72;
  if (v27 != 1)
  {
    v29 = 5;
    while (1)
    {
      v30 = v29 - 3;
      if (__OFADD__(v29 - 4, 1))
        goto LABEL_90;
      if (!*(_QWORD *)(*(_QWORD *)&v26[8 * v29] + 16))
        break;
      ++v29;
      if (v30 == v27)
        goto LABEL_30;
    }
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_30:
  v76 = v26;
  v82 = 0;
  v97 = MEMORY[0x24BEE4AF8];
  v78 = v27;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
  v31 = v78;
  v32 = 0;
  while (1)
  {
    if (v32 == v31)
      goto LABEL_89;
    v81 = v32;
    v33 = *(_QWORD *)&v77[8 * v32];
    v85 = *(_QWORD *)(v33 + 16);
    if (v85)
      break;
    v35 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_65:
    v63 = v97;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v63 + 16) + 1, 1);
      v63 = v97;
    }
    v31 = v78;
    v64 = v81;
    v66 = *(_QWORD *)(v63 + 16);
    v65 = *(_QWORD *)(v63 + 24);
    if (v66 >= v65 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
      v64 = v81;
      v31 = v78;
      v63 = v97;
    }
    v32 = v64 + 1;
    *(_QWORD *)(v63 + 16) = v66 + 1;
    *(_QWORD *)(v63 + 8 * v66 + 32) = v35;
    if (v32 == v31)
    {
      swift_bridgeObjectRelease();
LABEL_73:
      __swift_project_boxed_opaque_existential_1(v80 + 5, v80[8]);
      v67 = ScreenSharingCallManager.getRemoteCallParticipantHandles()();
      v68 = *(_QWORD *)(v63 + 16);
      if (v68)
      {
        swift_bridgeObjectRetain();
        for (j = 0; j != v68; ++j)
        {
          v70 = *(_QWORD *)(v63 + 8 * j + 32);
          swift_bridgeObjectRetain();
          v71 = specialized Array<A>.containsAtLeastOneOf<A>(_:)(v67, v70);
          swift_bridgeObjectRelease();
          if ((v71 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return 1;
          }
        }
        swift_bridgeObjectRelease();
        v72 = *(_QWORD *)(v63 + 16);
        v94[0] = MEMORY[0x24BEE4AF8];
        if (v72)
        {
          swift_bridgeObjectRetain();
          for (k = 0; k != v72; ++k)
          {
            v74 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v74);
          }
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v94[0] = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      v75 = specialized Set.isSubset<A>(of:)(v94[0], v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v75 & 1) == 0)
        return v83;
LABEL_22:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  v84 = v33 + 32;
  v79 = v33;
  swift_bridgeObjectRetain_n();
  v34 = 0;
  v35 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    outlined init with copy of ResponseExecuting(v84 + 40 * v34, (uint64_t)v94);
    v36 = v95;
    v37 = v96;
    __swift_project_boxed_opaque_existential_1(v94, v95);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
    {
      v87 = v34;
      v88 = v35;
      v93 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
      v40 = *(unsigned __int8 *)(v92 + 80);
      v86 = v38;
      v41 = v38 + ((v40 + 32) & ~v40);
      v91 = *(_QWORD *)(v92 + 72);
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
      do
      {
        v44 = v89;
        v43 = v90;
        v42(v89, v41, v90);
        v45 = ContactHandle.value.getter();
        v47 = v46;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v44, v43);
        v48 = v93;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v48 + 16) + 1, 1);
          v48 = v93;
        }
        v50 = *(_QWORD *)(v48 + 16);
        v49 = *(_QWORD *)(v48 + 24);
        if (v50 >= v49 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
          v48 = v93;
        }
        *(_QWORD *)(v48 + 16) = v50 + 1;
        v51 = v48 + 16 * v50;
        *(_QWORD *)(v51 + 32) = v45;
        *(_QWORD *)(v51 + 40) = v47;
        v41 += v91;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
      v34 = v87;
      v35 = v88;
    }
    else
    {
      swift_bridgeObjectRelease();
      v48 = MEMORY[0x24BEE4AF8];
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
    v52 = *(_QWORD *)(v48 + 16);
    v53 = v35[2];
    v54 = v53 + v52;
    if (__OFADD__(v53, v52))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v54 <= v35[3] >> 1)
    {
      if (*(_QWORD *)(v48 + 16))
        goto LABEL_54;
    }
    else
    {
      if (v53 <= v54)
        v56 = v53 + v52;
      else
        v56 = v53;
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v56, 1, v35);
      if (*(_QWORD *)(v48 + 16))
      {
LABEL_54:
        v57 = v35[2];
        if ((v35[3] >> 1) - v57 < v52)
          goto LABEL_87;
        v58 = (unint64_t)&v35[2 * v57 + 4];
        if (v48 + 32 < v58 + 16 * v52 && v58 < v48 + 32 + 16 * v52)
          goto LABEL_92;
        swift_arrayInitWithCopy();
        if (v52)
        {
          v60 = v35[2];
          v61 = __OFADD__(v60, v52);
          v62 = v60 + v52;
          if (v61)
            goto LABEL_88;
          v35[2] = v62;
        }
        goto LABEL_35;
      }
    }
    if (v52)
      goto LABEL_86;
LABEL_35:
    ++v34;
    swift_bridgeObjectRelease();
    if (v34 == v85)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.isSubset<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  char v12;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
  {
    v12 = 1;
    return v12 & 1;
  }
  if (v2 != 1)
  {
    swift_bridgeObjectRetain();
    v12 = specialized _NativeSet.isSubset<A>(of:)(a1, a2);
LABEL_16:
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
  result = specialized Collection.first.getter(a2);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v9 = result;
      v10 = (_QWORD *)(a1 + 40);
      while (1)
      {
        v11 = *(v10 - 1) == v9 && v7 == *v10;
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v10 += 2;
        if (!--v8)
          goto LABEL_12;
      }
      v12 = 1;
    }
    else
    {
LABEL_12:
      v12 = 0;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.isSubset<A>(of:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  size_t v5;
  char v6;
  void *v7;
  _QWORD v9[2];

  v3 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = ((unint64_t)((1 << v4) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = specialized closure #1 in _NativeSet.isSubset<A>(of:)((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v3, a2);
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v6 = specialized closure #1 in _NativeSet.isSubset<A>(of:)((uint64_t)v7, v3, a2);
    MEMORY[0x2207E453C](v7, -1, -1);
  }
  return v6 & 1;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  unint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = *(_QWORD *)(a2 + 16);
  if (v27)
  {
    v28 = a3 + 56;
    v26 = a2 + 32;
    swift_bridgeObjectRetain();
    v25 = 0;
    v4 = 0;
    while (1)
    {
      v5 = (uint64_t *)(v26 + 16 * v4);
      v7 = *v5;
      v6 = v5[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v8 = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(a3 + 32);
      v10 = v8 & ~v9;
      v11 = v10 >> 6;
      v12 = 1 << v10;
      if (((1 << v10) & *(_QWORD *)(v28 + 8 * (v10 >> 6))) == 0)
        goto LABEL_3;
      v13 = *(_QWORD *)(a3 + 48);
      v14 = (_QWORD *)(v13 + 16 * v10);
      v15 = *v14 == v7 && v14[1] == v6;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      result = swift_bridgeObjectRelease();
LABEL_12:
      v17 = *(_QWORD *)(a1 + 8 * v11);
      *(_QWORD *)(a1 + 8 * v11) = v12 | v17;
      if ((v12 & v17) == 0)
      {
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          return result;
        }
        if (++v25 == *(_QWORD *)(a3 + 16))
        {
          v23 = 1;
LABEL_26:
          swift_bridgeObjectRelease();
          return v23;
        }
      }
LABEL_4:
      if (++v4 == v27)
      {
        v23 = 0;
        goto LABEL_26;
      }
    }
    v18 = ~v9;
    for (i = v10 + 1; ; i = v20 + 1)
    {
      v20 = i & v18;
      if (((*(_QWORD *)(v28 + (((i & v18) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v18)) & 1) == 0)
        break;
      v21 = (_QWORD *)(v13 + 16 * v20);
      v22 = *v21 == v7 && v21[1] == v6;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        result = swift_bridgeObjectRelease();
        v11 = v20 >> 6;
        v12 = 1 << v20;
        goto LABEL_12;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  return 0;
}

ValueMetadata *type metadata accessor for RecipientsResolver()
{
  return &type metadata for RecipientsResolver;
}

id one-time initialization function for fullScreenAttributes()
{
  id result;

  result = closure #1 in variable initialization expression of static TUCallScreenShareAttributes.fullScreenAttributes();
  static TUCallScreenShareAttributes.fullScreenAttributes = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static TUCallScreenShareAttributes.fullScreenAttributes()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  double v6;
  double v7;
  id v8;
  Class isa;
  Class v10;
  uint64_t v12;

  v0 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB4958]), sel_init);
  objc_msgSend(v4, sel_setStyle_, 1);
  objc_msgSend(v4, sel_setDeviceFamily_, objc_msgSend((id)objc_opt_self(), sel_currentDeviceFamily));
  v5 = objc_msgSend((id)objc_opt_self(), sel_mainConfiguration);
  objc_msgSend(v5, sel_pointScale);
  v7 = v6;

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v7);
  objc_msgSend(v4, sel_setDisplayScale_, v8);

  type metadata accessor for NSNumber();
  isa = NSNumber.init(floatLiteral:)(1.0).super.super.isa;
  objc_msgSend(v4, sel_setScaleFactor_, isa);

  objc_msgSend(v4, sel_setWindowed_, 0);
  UUID.init()();
  v10 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, sel_setWindowUUID_, v10);

  return v4;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t one-time initialization function for default()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.default);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.default);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void static OS_dispatch_queue.executeOnMain<A>(_:)(void (*a1)(void))
{
  void *v2;

  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    a1();
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v2 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x24BDAC7A8](v2);
    OS_dispatch_queue.sync<A>(execute:)();

  }
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t partial apply for closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t dispatch thunk of PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 64))();
}

uint64_t dispatch thunk of PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t specialized closure #1 in closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  id v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  id v63;
  uint8_t *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72[7];

  v7 = type metadata accessor for SimpleConfirmationResponseProvider();
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v70 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v65 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v65 - v14;
  SimpleConfirmationResponseProvider.confirmationResponse.getter();
  v16 = type metadata accessor for ConfirmationResponse();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v18 = v15;
    if (one-time initialization token for default != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.default);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_2203F9000, v20, v21, "PromptGiving: Confirmation response has no value - this should never happen", v22, 2u);
      MEMORY[0x2207E453C](v22, -1, -1);
    }

    lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
    v23 = (void *)swift_allocError();
    outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(a4 + 16), (uint64_t)v72);
    v24 = *(_QWORD *)(a4 + 16);
    v25 = *(_QWORD *)(a4 + 24);
    v26 = *(_QWORD *)(a4 + 32);
    v27 = *(_QWORD *)(a4 + 40);
    v28 = *(_QWORD *)(a4 + 48);
    v29 = *(_QWORD *)(a4 + 56);
    *(_QWORD *)(a4 + 16) = v23;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    v30 = *(unsigned __int8 *)(a4 + 64);
    *(_BYTE *)(a4 + 64) = 16;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
    v31 = v23;
    outlined consume of StartSharingConfirmationFlow.State(v24, v25, v26, v27, v28, v29, v30);
    StartSharingConfirmationFlow.state.didset((uint64_t)v72);

    outlined release of StartSharingConfirmationFlow.State((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    v32 = (uint64_t)v18;
    return outlined destroy of SharingResponse?(v32, &demangling cache variable for type metadata for ConfirmationResponse?);
  }
  v67 = v15;
  outlined init with copy of ConfirmationResponse?((uint64_t)v15, (uint64_t)v13);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v13, v16);
  if (v33 == *MEMORY[0x24BE98400])
  {
    a2();
LABEL_21:
    v32 = (uint64_t)v67;
    return outlined destroy of SharingResponse?(v32, &demangling cache variable for type metadata for ConfirmationResponse?);
  }
  if (v33 != *MEMORY[0x24BE983F8])
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v16);
    if (one-time initialization token for default != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.default);
    v47 = v68;
    v46 = v69;
    v48 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v70, a1, v69);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v66 = swift_slowAlloc();
      v72[0] = v66;
      *(_DWORD *)v51 = 136315138;
      v65 = v51 + 4;
      SimpleConfirmationResponseProvider.confirmationResponse.getter();
      v52 = String.init<A>(describing:)();
      v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v70, v46);
      _os_log_impl(&dword_2203F9000, v49, v50, "PromptGiving: Confirmation response has unknown value %s - add support for it!", v51, 0xCu);
      v54 = v66;
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v54, -1, -1);
      MEMORY[0x2207E453C](v51, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
    }

    lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
    v55 = (void *)swift_allocError();
    outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(a4 + 16), (uint64_t)v72);
    v56 = *(_QWORD *)(a4 + 16);
    v57 = *(_QWORD *)(a4 + 24);
    v58 = *(_QWORD *)(a4 + 32);
    v59 = *(_QWORD *)(a4 + 40);
    v60 = *(_QWORD *)(a4 + 48);
    v61 = *(_QWORD *)(a4 + 56);
    *(_QWORD *)(a4 + 16) = v55;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    v62 = *(unsigned __int8 *)(a4 + 64);
    *(_BYTE *)(a4 + 64) = 16;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
    v63 = v55;
    outlined consume of StartSharingConfirmationFlow.State(v56, v57, v58, v59, v60, v61, v62);
    StartSharingConfirmationFlow.state.didset((uint64_t)v72);

    outlined release of StartSharingConfirmationFlow.State((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    goto LABEL_21;
  }
  v32 = (uint64_t)v67;
  if (one-time initialization token for default != -1)
    swift_once();
  v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.default);
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_2203F9000, v35, v36, "PromptGiving: User answered negatively to prompt - completing flow", v37, 2u);
    MEMORY[0x2207E453C](v37, -1, -1);
  }

  outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(a4 + 16), (uint64_t)v72);
  v38 = *(_QWORD *)(a4 + 16);
  v39 = *(_QWORD *)(a4 + 24);
  v40 = *(_QWORD *)(a4 + 32);
  v41 = *(_QWORD *)(a4 + 40);
  v42 = *(_QWORD *)(a4 + 48);
  v43 = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a4 + 16) = 4;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  v44 = *(unsigned __int8 *)(a4 + 64);
  *(_BYTE *)(a4 + 64) = 32;
  outlined release of StartSharingConfirmationFlow.State((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
  outlined consume of StartSharingConfirmationFlow.State(v38, v39, v40, v41, v42, v43, v44);
  StartSharingConfirmationFlow.state.didset((uint64_t)v72);
  outlined release of StartSharingConfirmationFlow.State((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
  return outlined destroy of SharingResponse?(v32, &demangling cache variable for type metadata for ConfirmationResponse?);
}

void specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void (*a5)(char *, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  int v21;
  void *v22;
  int v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  const char *v37;
  NSObject *v38;
  os_log_type_t v39;
  BOOL v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  id v68;
  id v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  id v88;
  _QWORD v89[2];
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[7];

  v91 = a4;
  v92 = a5;
  v93 = a2;
  v7 = type metadata accessor for SimpleConfirmationResponseProvider();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v90 = (char *)v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v89 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v89 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)v89 - v18, a1, v11);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v19, v11);
  if (v21 == *MEMORY[0x24BE97938])
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v19, v7);
    specialized closure #1 in closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)((uint64_t)v10, a3, v91, (uint64_t)v92);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return;
  }
  if (v21 == *MEMORY[0x24BE97930])
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    v22 = *(void **)v19;
    v23 = v19[8];
    if (one-time initialization token for default != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.default);
    v25 = v22;
    v26 = v22;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v29 = 138412290;
      v31 = v22;
      v32 = _swift_stdlib_bridgeErrorToNSError();
      v95[0] = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v30 = v32;

      _os_log_impl(&dword_2203F9000, v27, v28, "PromptGiving: Error during execution of prompt flow: %@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v30, -1, -1);
      MEMORY[0x2207E453C](v29, -1, -1);
    }
    else
    {

    }
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    v40 = os_log_type_enabled(v38, v39);
    if (v23)
    {
      if (v40)
      {
        v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_2203F9000, v38, v39, "PromptGiving: Error already handled - completing flow", v41, 2u);
        MEMORY[0x2207E453C](v41, -1, -1);
      }

      v42 = v93;
      outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v93 + 16), (uint64_t)v95);
      v43 = *(_QWORD *)(v42 + 16);
      v44 = *(_QWORD *)(v42 + 24);
      v45 = *(_QWORD *)(v42 + 32);
      v46 = *(_QWORD *)(v42 + 40);
      v47 = *(_QWORD *)(v42 + 48);
      v48 = *(_QWORD *)(v42 + 56);
      *(_QWORD *)(v42 + 16) = 4;
      *(_OWORD *)(v42 + 24) = 0u;
      *(_OWORD *)(v42 + 40) = 0u;
      *(_QWORD *)(v42 + 56) = 0;
      v49 = *(unsigned __int8 *)(v42 + 64);
      *(_BYTE *)(v42 + 64) = 32;
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
      outlined consume of StartSharingConfirmationFlow.State(v43, v44, v45, v46, v47, v48, v49);
      StartSharingConfirmationFlow.state.didset((uint64_t)v95);
    }
    else
    {
      if (v40)
      {
        v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v59 = 0;
        _os_log_impl(&dword_2203F9000, v38, v39, "PromptGiving: Error not already handled - transitioning to .failedWithUnknownError state", v59, 2u);
        MEMORY[0x2207E453C](v59, -1, -1);
      }

      v60 = v93;
      outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v93 + 16), (uint64_t)v95);
      v61 = *(_QWORD *)(v60 + 16);
      v62 = *(_QWORD *)(v60 + 24);
      v63 = *(_QWORD *)(v60 + 32);
      v64 = *(_QWORD *)(v60 + 40);
      v65 = *(_QWORD *)(v60 + 48);
      v66 = *(_QWORD *)(v60 + 56);
      *(_QWORD *)(v60 + 16) = v22;
      *(_OWORD *)(v60 + 24) = 0u;
      *(_OWORD *)(v60 + 40) = 0u;
      *(_QWORD *)(v60 + 56) = 0;
      v67 = *(unsigned __int8 *)(v60 + 64);
      *(_BYTE *)(v60 + 64) = 16;
      v68 = v22;
      v69 = v22;
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
      outlined consume of StartSharingConfirmationFlow.State(v61, v62, v63, v64, v65, v66, v67);
      StartSharingConfirmationFlow.state.didset((uint64_t)v95);

    }
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);

    return;
  }
  if (v21 == *MEMORY[0x24BE97940])
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.default);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v34, v35))
      goto LABEL_24;
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    v37 = "PromptGiving: User responded to prompt with 'cancel' - completing flow";
LABEL_23:
    _os_log_impl(&dword_2203F9000, v34, v35, v37, v36, 2u);
    MEMORY[0x2207E453C](v36, -1, -1);
LABEL_24:

    v51 = v93;
    outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v93 + 16), (uint64_t)v95);
    v52 = *(_QWORD *)(v51 + 16);
    v53 = *(_QWORD *)(v51 + 24);
    v54 = *(_QWORD *)(v51 + 32);
    v55 = *(_QWORD *)(v51 + 40);
    v56 = *(_QWORD *)(v51 + 48);
    v57 = *(_QWORD *)(v51 + 56);
    *(_QWORD *)(v51 + 16) = 4;
    *(_OWORD *)(v51 + 24) = 0u;
    *(_OWORD *)(v51 + 40) = 0u;
    *(_QWORD *)(v51 + 56) = 0;
    v58 = *(unsigned __int8 *)(v51 + 64);
    *(_BYTE *)(v51 + 64) = 32;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
    outlined consume of StartSharingConfirmationFlow.State(v52, v53, v54, v55, v56, v57, v58);
    StartSharingConfirmationFlow.state.didset((uint64_t)v95);
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
    return;
  }
  if (v21 == *MEMORY[0x24BE97928])
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.default);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v34, v35))
      goto LABEL_24;
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    v37 = "PromptGiving: User provided no answer to the prompt - completing flow";
    goto LABEL_23;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Logger.default);
  v20(v17, a1, v11);
  v71 = Logger.logObject.getter();
  v72 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v71, v72))
  {
    v73 = (uint8_t *)swift_slowAlloc();
    v91 = swift_slowAlloc();
    v95[0] = v91;
    *(_DWORD *)v73 = 136315138;
    v89[1] = v73 + 4;
    v74 = v90;
    v20(v90, (uint64_t)v17, v11);
    v75 = *(void (**)(char *, uint64_t))(v12 + 8);
    v75(v17, v11);
    lazy protocol witness table accessor for type PromptResult<SharingIntent?> and conformance PromptResult<A>(&lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    v76 = dispatch thunk of CustomStringConvertible.description.getter();
    v78 = v77;
    v92 = v75;
    v75(v74, v11);
    v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v71, v72, "PromptGiving: PromptForValueFlow exitValue has unknown value %s - add support for it!", v73, 0xCu);
    v79 = v91;
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v79, -1, -1);
    MEMORY[0x2207E453C](v73, -1, -1);
  }
  else
  {
    v92 = *(void (**)(char *, uint64_t))(v12 + 8);
    v92(v17, v11);
  }

  lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
  v80 = (void *)swift_allocError();
  v81 = v93;
  outlined init with take of StartSharingConfirmationFlow.State((__int128 *)(v93 + 16), (uint64_t)v95);
  v82 = *(_QWORD *)(v81 + 24);
  v91 = *(_QWORD *)(v81 + 16);
  v83 = *(_QWORD *)(v81 + 32);
  v84 = *(_QWORD *)(v81 + 40);
  v85 = *(_QWORD *)(v81 + 48);
  v86 = *(_QWORD *)(v81 + 56);
  *(_QWORD *)(v81 + 16) = v80;
  *(_OWORD *)(v81 + 24) = 0u;
  *(_OWORD *)(v81 + 40) = 0u;
  *(_QWORD *)(v81 + 56) = 0;
  v87 = *(unsigned __int8 *)(v81 + 64);
  *(_BYTE *)(v81 + 64) = 16;
  outlined release of StartSharingConfirmationFlow.State((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of StartSharingConfirmationFlow.State);
  v88 = v80;
  outlined consume of StartSharingConfirmationFlow.State(v91, v82, v83, v84, v85, v86, v87);
  StartSharingConfirmationFlow.state.didset((uint64_t)v95);

  outlined release of StartSharingConfirmationFlow.State((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of StartSharingConfirmationFlow.State);
  v92(v19, v11);
}

void specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  int v23;
  void *v24;
  int v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  const char *v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  uint8_t *v70;
  uint64_t v71;
  uint64_t started;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[8];

  v74 = a2;
  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v9 = MEMORY[0x24BDAC7A8](started);
  v75 = (uint64_t)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v73 = (_QWORD *)((char *)v69 - v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SharingIntent?>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v69 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v69 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22((char *)v69 - v20, a1, v12);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v21, v12);
  if (v23 == *MEMORY[0x24BE97938])
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v21, v12);
    outlined init with take of SharingIntent?((uint64_t)v21, (uint64_t)v76);
    specialized closure #1 in closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)((uint64_t)v76, a3, a4, a5);
    outlined destroy of SharingResponse?((uint64_t)v76, &demangling cache variable for type metadata for SharingIntent?);
    return;
  }
  if (v23 == *MEMORY[0x24BE97930])
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v21, v12);
    v24 = *(void **)v21;
    v25 = v21[8];
    if (one-time initialization token for default != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.default);
    v27 = v24;
    v28 = v24;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v31 = 138412290;
      v33 = v24;
      v34 = _swift_stdlib_bridgeErrorToNSError();
      v76[0] = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v32 = v34;

      _os_log_impl(&dword_2203F9000, v29, v30, "PromptGiving: Error during execution of prompt flow: %@", v31, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v32, -1, -1);
      MEMORY[0x2207E453C](v31, -1, -1);
    }
    else
    {

    }
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    v42 = os_log_type_enabled(v40, v41);
    if (v25)
    {
      if (v42)
      {
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_2203F9000, v40, v41, "PromptGiving: Error already handled - completing flow", v43, 2u);
        MEMORY[0x2207E453C](v43, -1, -1);
      }

      v44 = (uint64_t)v73;
      swift_storeEnumTagMultiPayload();
      v45 = v74 + *(_QWORD *)(*(_QWORD *)v74 + 104);
      swift_beginAccess();
      v46 = v75;
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v45, v75);
      swift_beginAccess();
    }
    else
    {
      if (v42)
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_2203F9000, v40, v41, "PromptGiving: Error not already handled - transitioning to .failedWithUnknownError state", v51, 2u);
        MEMORY[0x2207E453C](v51, -1, -1);
      }

      v44 = (uint64_t)v73;
      *v73 = (uint64_t)v24;
      swift_storeEnumTagMultiPayload();
      v45 = v74 + *(_QWORD *)(*(_QWORD *)v74 + 104);
      swift_beginAccess();
      v46 = v75;
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v45, v75);
      swift_beginAccess();
      v52 = v24;
    }
    outlined assign with copy of StartSharingFlow.StartSharingFlowState(v44, v45);
    swift_endAccess();
    specialized SharingFlow.state.didset(v46);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v44);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v46);

    return;
  }
  if (v23 == *MEMORY[0x24BE97940])
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.default);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v36, v37))
      goto LABEL_24;
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    v39 = "PromptGiving: User responded to prompt with 'cancel' - completing flow";
LABEL_23:
    _os_log_impl(&dword_2203F9000, v36, v37, v39, v38, 2u);
    MEMORY[0x2207E453C](v38, -1, -1);
LABEL_24:

    v48 = (uint64_t)v73;
    swift_storeEnumTagMultiPayload();
    v49 = v74 + *(_QWORD *)(*(_QWORD *)v74 + 104);
    swift_beginAccess();
    v50 = v75;
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v49, v75);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState(v48, v49);
    swift_endAccess();
    specialized SharingFlow.state.didset(v50);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v48);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v50);
    return;
  }
  if (v23 == *MEMORY[0x24BE97928])
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.default);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v36, v37))
      goto LABEL_24;
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    v39 = "PromptGiving: User provided no answer to the prompt - completing flow";
    goto LABEL_23;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.default);
  v22(v19, a1, v12);
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    v71 = swift_slowAlloc();
    v76[0] = v71;
    v70 = v56;
    *(_DWORD *)v56 = 136315138;
    v69[1] = v56 + 4;
    v22(v16, (uint64_t)v19, v12);
    v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v57(v19, v12);
    lazy protocol witness table accessor for type PromptResult<SharingIntent?> and conformance PromptResult<A>(&lazy protocol witness table cache variable for type PromptResult<SharingIntent?> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<SharingIntent?>);
    v58 = dispatch thunk of CustomStringConvertible.description.getter();
    v60 = v59;
    v61 = v16;
    v62 = v57;
    v57(v61, v12);
    v76[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v63 = v70;
    _os_log_impl(&dword_2203F9000, v54, v55, "PromptGiving: PromptForValueFlow exitValue has unknown value %s - add support for it!", v70, 0xCu);
    v64 = v71;
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v64, -1, -1);
    MEMORY[0x2207E453C](v63, -1, -1);
  }
  else
  {
    v62 = *(void (**)(char *, uint64_t))(v13 + 8);
    v62(v19, v12);
  }

  lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
  v65 = swift_allocError();
  v66 = (uint64_t)v73;
  *v73 = v65;
  swift_storeEnumTagMultiPayload();
  v67 = v74 + *(_QWORD *)(*(_QWORD *)v74 + 104);
  swift_beginAccess();
  v68 = v75;
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v67, v75);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v66, v67);
  swift_endAccess();
  specialized SharingFlow.state.didset(v68);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v66);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v68);
  v62(v21, v12);
}

uint64_t outlined init with copy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t started;

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 16))(a2, a1, started);
  return a2;
}

uint64_t outlined assign with copy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t started;

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 24))(a2, a1, started);
  return a2;
}

uint64_t outlined destroy of StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  uint64_t started;

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 8))(a1, started);
  return a1;
}

uint64_t lazy protocol witness table accessor for type PromptResult<SharingIntent?> and conformance PromptResult<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2207E4494](MEMORY[0x24BE97958], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ConfirmScreenShareOrMessageSendFlowStrategy.Decision.description.getter()
{
  __int128 *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;

  outlined init with copy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(v0, (uint64_t)&v6);
  if (!v7)
    return 0x436E496572616873;
  if (v7 == 1)
    return 0x4D616956646E6573;
  outlined init with take of SharingIntent(&v6, (uint64_t)v5);
  _StringGuts.grow(_:)(19);
  v2._object = (void *)0x8000000220448D30;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v1 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v1;
}

uint64_t ConfirmScreenShareOrMessageSendFlowStrategy.actionForIntent(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE v17[40];
  _QWORD v18[5];
  __int128 v19;
  _QWORD v20[4];

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 216))(v4, v5) & 1) == 0)
  {
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    v15 = (char *)&loc_22043050C
        + 4 * byte_2204469E0[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14)];
    __asm { BR              X10 }
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_QWORD *)&v19 = v10;
    *(_DWORD *)v9 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static ConfirmScreenShareOrMessageSendFlowStrategy.typeName;
    v12 = *(_QWORD *)algn_2555D3C98;
    swift_bridgeObjectRetain();
    v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v7, v8, "%s: User has opted to send via messages.", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v10, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);
  }

  v19 = 0uLL;
  v20[0] = 0;
  *(_OWORD *)&v20[1] = xmmword_2204469D0;
  outlined init with copy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(&v19, (uint64_t)v18);
  outlined init with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?((uint64_t)v18, (uint64_t)v17);
  swift_beginAccess();
  outlined assign with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?((uint64_t)v17, v2 + 136);
  swift_endAccess();
  static ActionForInput.handle()();
  return outlined destroy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision((uint64_t)&v19);
}

uint64_t ConfirmScreenShareOrMessageSendFlowStrategy.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of SharingResponse?(v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  outlined destroy of SharingResponse?(v0 + 136, &demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy()
{
  return objc_opt_self();
}

uint64_t destroy for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy.Decision()
{
  return &type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision;
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmScreenShareOrMessageSendFlowStrategy);
  return SharingYesNoPromptFlowStrategy.actionForInput(_:)(a1, a2, v4);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:)
                                                + async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  v6 = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmScreenShareOrMessageSendFlowStrategy, a2);
  *v5 = v2;
  v5[1] = protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy;
  return SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1, a2, v6);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  v6 = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmScreenShareOrMessageSendFlowStrategy, a2);
  *v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(a1, a2, v6);
}

uint64_t protocol witness for SharingPromptFlowStrategy.actionForIntent(_:) in conformance ConfirmScreenShareOrMessageSendFlowStrategy(_QWORD *a1)
{
  return ConfirmScreenShareOrMessageSendFlowStrategy.actionForIntent(_:)(a1);
}

unint64_t instantiation function for generic protocol witness table for ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy;
  if (!lazy protocol witness table cache variable for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy)
  {
    v1 = type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy();
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ConfirmScreenShareOrMessageSendFlowStrategy, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy);
  }
  return result;
}

uint64_t outlined init with copy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t outlined init with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t dispatch thunk of ResponseExecuting.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ExpanseFlowProviding.findFlowFor(parse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for ButtonLabelsCATsSimple()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ButtonLabelsCATsSimple;
  if (!type metadata singleton initialization cache for ButtonLabelsCATsSimple)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ButtonLabelsCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ButtonLabelsCATsSimple()
{
  return type metadata accessor for ButtonLabelsCATsSimple();
}

ValueMetadata *type metadata accessor for ShareTargetResolver()
{
  return &type metadata for ShareTargetResolver;
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v1 = *(_QWORD **)(v0 + 24);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v2, v3);
  if ((unint64_t)(v5 - 1) >= 4)
  {
    outlined consume of ShareSession?(v4, v5);
    LOBYTE(v6) = 2;
  }
  else
  {
    v6 = 0x30101u >> (8 * (v5 - 1));
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v6);
}

uint64_t specialized ShareTargetResolver.resolveAppTargetForStartSharing(_:_:errorHandler:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 40) = a3;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  return swift_task_switch();
}

uint64_t specialized ShareTargetResolver.resolveAppTargetForStartSharing(_:_:errorHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29[2];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v29[0] = v26;
    *(_DWORD *)v4 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v5 = *(_QWORD *)(v0 + 32);
    v24 = *(_QWORD *)(v0 + 24);
    v6 = static ShareTargetResolver.typeName;
    v7 = unk_2555D3E80;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v5, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2203F9000, v2, v3, "%s: Share target is the app: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v26, -1, -1);
    MEMORY[0x2207E453C](v4, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v9 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  objc_allocWithZone(MEMORY[0x24BDC1540]);
  swift_bridgeObjectRetain();
  v22 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v9, v8, 0);

  if (v22)
  {
    v21 = *(unsigned __int8 *)(v0 + 40);
    v13 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain();
    v12 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v10 = String.localizedAppDisplayName.getter();
    if (v11)
      v12 = v10;
    else
      v12 = 0;
    if (v11)
      v13 = v11;
    else
      v13 = 0xE000000000000000;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v27 = v15;
      v28 = v12;
      v16 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v29[0] = v25;
      *(_DWORD *)v16 = 136315650;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v18 = *(_QWORD *)(v0 + 24);
      v17 = *(_QWORD *)(v0 + 32);
      v20 = static ShareTargetResolver.typeName;
      v19 = unk_2555D3E80;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 22) = 2080;
      swift_bridgeObjectRetain();
      v12 = v28;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v13, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2203F9000, v14, v27, "%s: Share target is an uninstalled app appBundleID=%s appName=%s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v25, -1, -1);
      MEMORY[0x2207E453C](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    v21 = 256;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v0 + 8))(v12, v13, v21);
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)(uint64_t a1)
{
  _QWORD *v1;

  v1[8] = a1;
  v1[9] = type metadata accessor for ShareTarget();
  v1[10] = swift_task_alloc();
  return swift_task_switch();
}

void specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)()
{
  uint64_t v0;
  char *v1;

  outlined init with copy of ShareTarget(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 80));
  v1 = (char *)sub_220431900 + 4 * word_220446BF0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_220431900(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, os_log_t log, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  if (one-time initialization token for default != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.default);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v43 = v36;
    *(_DWORD *)v35 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v38 = static ShareTargetResolver.typeName;
    v37 = unk_2555D3E80;
    swift_bridgeObjectRetain();
    *v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v37, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v33, v34, "%s: Reference resolution is unsupported on the current platform.", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v36, -1, -1);
    MEMORY[0x2207E453C](v35, -1, -1);
  }
  swift_release();

  v39 = *(_QWORD *)(v31 + 80);
  v40 = v39
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
               + 48);
  v41 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v31 + 8))(0, 0, 0x10000);
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 104) = a1;
  *(_QWORD *)(v4 + 112) = a2;
  *(_DWORD *)(v4 + 120) = a3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v0 + 8))(v2, v3, v1 & 0x1FFFF);
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Match<Contact, ContactResolver.SignalSet>]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Contact]);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      *(_QWORD *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  __int128 v14;
  unint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v17 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = MEMORY[0x2207E3F60](v5, a1);
        v17 = v3;
        v8 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        ++v5;
        v15 = type metadata accessor for TUConversationParticipant();
        v16 = &protocol witness table for TUConversationParticipant;
        *(_QWORD *)&v14 = v6;
        *(_QWORD *)(v3 + 16) = v8 + 1;
        outlined init with take of SharingIntent(&v14, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v17 = v3;
        v11 = *(_QWORD *)(v3 + 16);
        v12 = *(_QWORD *)(v3 + 24);
        v13 = v10;
        if (v11 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
          v3 = v17;
        }
        v15 = type metadata accessor for TUConversationParticipant();
        v16 = &protocol witness table for TUConversationParticipant;
        *(_QWORD *)&v14 = v13;
        *(_QWORD *)(v3 + 16) = v11 + 1;
        outlined init with take of SharingIntent(&v14, v3 + 40 * v11 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

char *ContactResolver.findMatches(queries:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v1 = type metadata accessor for RecommenderType();
  v20 = *(_QWORD *)(v1 - 8);
  v21 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SearchSuggestedContacts();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContactResolverDomain();
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContactResolverConfig();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.current.getter();
  static ContactResolverDomain.all.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BE939D8], v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v3, *MEMORY[0x24BE937B0], v21);
  ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)();
  v16 = v23;
  v17 = dispatch thunk of ContactResolver.findMatches(queries:config:)();
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v11 = (char *)specialized _arrayForceCast<A, B>(_:)(v18);
    swift_bridgeObjectRelease();
  }
  return v11;
}

unint64_t type metadata accessor for TUConversationParticipant()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUConversationParticipant;
  if (!lazy cache variable for type metadata for TUConversationParticipant)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  }
  return result;
}

void StartSharingFlow.StartSharingFlowState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t started;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for ShareTarget();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v4 = MEMORY[0x24BDAC7A8](started);
  v5 = MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v0, (uint64_t)&v9 - v6, v7);
  v8 = (char *)sub_220432970 + 4 * word_220446C90[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_220432970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StartSharingFlow.StartSharingFlowState, validationFailFallbackState: StartSharingFlow.StartSharingFlowState));
  v4 = swift_projectBox();
  v5 = v4 + *(int *)(v3 + 48);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v4, v1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v5, v0, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  *(_QWORD *)(v2 - 80) = 0;
  *(_QWORD *)(v2 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(78);
  v6 = *(_QWORD *)(v2 - 72);
  *(_QWORD *)(v2 - 80) = *(_QWORD *)(v2 - 80);
  *(_QWORD *)(v2 - 72) = v6;
  v7._countAndFlagsBits = 0xD00000000000002ALL;
  v7._object = (void *)0x8000000220448FF0;
  String.append(_:)(v7);
  v8._countAndFlagsBits = StartSharingFlow.StartSharingFlowState.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD00000000000001FLL;
  v9._object = (void *)0x8000000220449020;
  String.append(_:)(v9);
  v10._countAndFlagsBits = StartSharingFlow.StartSharingFlowState.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v2 - 80);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v0, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_release();
  return v12;
}

unint64_t StartSharingFlow.StartSharingFlowError.description.getter(uint64_t a1, void *a2)
{
  Swift::String v5;
  Swift::String v6;

  if (a2)
  {
    if (a2 == (void *)1)
    {
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      return 0xD000000000000031;
    }
    else if (a2 == (void *)2)
    {
      return 0xD00000000000001ELL;
    }
    else
    {
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = a1;
      v5._object = a2;
      String.append(_:)(v5);
      v6._countAndFlagsBits = 41;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      return 0xD000000000000019;
    }
  }
  else
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    return 0xD000000000000032;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance StartSharingFlow.StartSharingFlowError()
{
  uint64_t v0;

  return StartSharingFlow.StartSharingFlowError.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t StartSharingFlow.exitValue.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t started;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  MEMORY[0x24BDAC7A8](started);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v6, (uint64_t)v5, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 12)
  {
    v8 = 1;
  }
  else
  {
    result = outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v5, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    v8 = 0;
  }
  *a1 = v8;
  return result;
}

uint64_t StartSharingFlow.on(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Input();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static StartSharingFlow.typeName;
    v12 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x24BE98DD0], MEMORY[0x24BE98DE0]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2203F9000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v10, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t StartSharingFlow.execute()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[65] = v1;
  v2[64] = a1;
  v2[66] = *v1;
  type metadata accessor for ShareTarget();
  v2[67] = swift_task_alloc();
  v2[68] = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  return swift_task_switch();
}

void StartSharingFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 520) + *(_QWORD *)(**(_QWORD **)(v0 + 520) + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v2, v1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  v3 = (char *)sub_220433718 + 4 * word_220446CB2[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_220433718()
{
  static ExecuteResponse.complete()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  __asm { BR              X0 }
}

uint64_t StartSharingFlow.execute()()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of StartSharingFlow.StartSharingFlowState(*(_QWORD *)(v0 + 536), (uint64_t (*)(_QWORD))type metadata accessor for ShareTarget);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in StartSharingFlow.validateIntent(needsValueCount:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v7 = MEMORY[0x24BDAC7A8](started);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (uint64_t *)((char *)&v36 - v10);
  v12 = *a1;
  if (v12 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.default);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v36 = a2;
      v37 = started;
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v39[0] = v17;
      *(_DWORD *)v16 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v19 = static StartSharingFlow.typeName;
      v18 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v14, v15, "%s: intent to be handled as a screen sharing or app casting intent", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v17, -1, -1);
      MEMORY[0x2207E453C](v16, -1, -1);

      a2 = v36;
    }
    else
    {

    }
    *v11 = a3;
  }
  else if ((v12 & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.default);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v37 = started;
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v39[0] = v31;
      *(_DWORD *)v30 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v32 = static StartSharingFlow.typeName;
      v33 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v28, v29, "%s: intent should be handled via message sending - sending back to SiriMessages", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v31, -1, -1);
      MEMORY[0x2207E453C](v30, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.default);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v37 = started;
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v39[0] = v24;
      *(_DWORD *)v23 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v25 = static StartSharingFlow.typeName;
      v26 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v21, v22, "%s: intent is a SharePlay request, which is unsupported", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v24, -1, -1);
      MEMORY[0x2207E453C](v23, -1, -1);

    }
    else
    {

    }
    *(_BYTE *)v11 = 3;
  }
  swift_storeEnumTagMultiPayload();
  v34 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v34, (uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, v34);
  swift_endAccess();
  specialized SharingFlow.state.didset((uint64_t)v9);
  outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
}

uint64_t StartSharingFlow.validateRecipientsForIntent(needsValueCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD v22[2];
  _QWORD v23[5];
  _QWORD v24[10];
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v22[0] = a1;
  v22[1] = a2;
  v4 = *v2;
  v5 = (uint64_t)v2 + *(_QWORD *)(*v2 + 112);
  swift_beginAccess();
  outlined init with copy of ResponseExecuting(v5, (uint64_t)v25);
  v6 = v26;
  v7 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 176))(v6, v7);
  v9 = type metadata accessor for ContactResolver();
  swift_allocObject();
  v24[3] = v9;
  v24[4] = &protocol witness table for ContactResolver;
  v24[0] = ContactResolver.init()();
  v24[8] = &type metadata for ScreenSharingCallManager;
  v24[9] = &protocol witness table for ScreenSharingCallManager;
  v10 = (_QWORD *)swift_allocObject();
  v24[5] = v10;
  v11 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v10[5] = type metadata accessor for TUCallCenter();
  v10[6] = &protocol witness table for TUCallCenter;
  v10[2] = v11;
  v23[3] = &type metadata for RecipientsResolver;
  v23[4] = &protocol witness table for RecipientsResolver;
  v23[0] = swift_allocObject();
  outlined init with copy of RecipientsResolver((uint64_t)v24, v23[0] + 16);
  type metadata accessor for ValidateRecipientsFlow();
  v12 = swift_allocObject();
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, (uint64_t)&type metadata for RecipientsResolver);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (_OWORD *)((char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v16 + 16))(v15);
  *(_QWORD *)(v12 + 64) = &type metadata for RecipientsResolver;
  *(_QWORD *)(v12 + 72) = &protocol witness table for RecipientsResolver;
  v17 = (_OWORD *)swift_allocObject();
  *(_QWORD *)(v12 + 32) = v8;
  *(_QWORD *)(v12 + 40) = v17;
  v18 = v15[3];
  v17[3] = v15[2];
  v17[4] = v18;
  v17[5] = v15[4];
  v19 = v15[1];
  v17[1] = *v15;
  v17[2] = v19;
  *(_BYTE *)(v12 + 16) = 1;
  *(_QWORD *)(v12 + 24) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  outlined destroy of RecipientsResolver((uint64_t)v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v24[0] = v12;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v3;
  v20[3] = v12;
  v20[4] = v22[0];
  v20[5] = v4;
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ValidateRecipientsFlow and conformance ValidateRecipientsFlow, (uint64_t (*)(uint64_t))type metadata accessor for ValidateRecipientsFlow, (uint64_t)&protocol conformance descriptor for ValidateRecipientsFlow);
  swift_retain();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in StartSharingFlow.validateRecipientsForIntent(needsValueCount:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t started;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51;

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v9 = MEMORY[0x24BDAC7A8](started);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v42 - v12;
  if ((*a1 & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v45 = started;
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v49[0] = v18;
      *(_DWORD *)v17 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v19 = static StartSharingFlow.typeName;
      v20 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v15, v16, "%s: recipients validation failed - falling back on SiriMessages sharing", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v18, -1, -1);
      MEMORY[0x2207E453C](v17, -1, -1);

    }
    else
    {

    }
    swift_storeEnumTagMultiPayload();
    v41 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
    swift_beginAccess();
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v41, (uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, v41);
    swift_endAccess();
    specialized SharingFlow.state.didset((uint64_t)v11);
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v44 = a4;
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.default);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    v24 = os_log_type_enabled(v22, v23);
    v45 = started;
    v43 = a3;
    if (v24)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v49[0] = v26;
      *(_DWORD *)v25 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v28 = static StartSharingFlow.typeName;
      v27 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v22, v23, "%s: recipients validation passed", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v26, -1, -1);
      MEMORY[0x2207E453C](v25, -1, -1);
    }

    v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
    v30 = v29[12];
    v31 = v29[16];
    v32 = v29[20];
    v33 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 112);
    swift_beginAccess();
    outlined init with copy of ResponseExecuting(v33, (uint64_t)v49);
    v34 = v50;
    v35 = v51;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    (*(void (**)(uint64_t, uint64_t))(v35 + 192))(v34, v35);
    *(_QWORD *)&v13[v30] = *(_QWORD *)(v43 + 24);
    *(_QWORD *)&v13[v31] = v44;
    outlined init with copy of ResponseExecuting(v33, (uint64_t)v46);
    v36 = v47;
    v37 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    v38 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 224);
    swift_bridgeObjectRetain();
    v13[v32] = v38(v36, v37) & 1;
    swift_storeEnumTagMultiPayload();
    v39 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
    swift_beginAccess();
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v39, (uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, v39);
    swift_endAccess();
    specialized SharingFlow.state.didset((uint64_t)v11);
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
}

uint64_t StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v5[37] = a4;
  v5[38] = v4;
  v5[35] = a2;
  v5[36] = a3;
  v5[34] = a1;
  v5[39] = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = type metadata accessor for Responses.StartSharing.NeedsTarget(0);
  v5[43] = swift_task_alloc();
  v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)
                                       + async function pointer to specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:));
  v7 = (_QWORD *)swift_task_alloc();
  v5[44] = v7;
  *v7 = v5;
  v7[1] = StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:);
  return v9(a2);
}

uint64_t StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 360) = a1;
  *(_QWORD *)(v4 + 368) = a2;
  *(_DWORD *)(v4 + 376) = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;

  v1 = *(unsigned int *)(v0 + 376);
  if ((v1 & 0x10000) != 0)
  {
    v8 = *(_QWORD *)(v0 + 360) & 1;
    if (one-time initialization token for default != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.default);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v58 = v13;
      *(_DWORD *)v12 = 136315394;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v14 = static StartSharingFlow.typeName;
      v15 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      *(_BYTE *)(v0 + 380) = v8;
      v16 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v10, v11, "%s: Target resolution failed with error %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v13, -1, -1);
      MEMORY[0x2207E453C](v12, -1, -1);
    }

    v18 = *(_QWORD *)(v0 + 320);
    v19 = *(uint64_t **)(v0 + 328);
    v20 = *(_QWORD *)(v0 + 304);
    if (v8)
    {
      lazy protocol witness table accessor for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError();
      v27 = swift_allocError();
      *v28 = 1;
      *v19 = v27;
      swift_storeEnumTagMultiPayload();
      v26 = v20 + *(_QWORD *)(*(_QWORD *)v20 + 104);
      swift_beginAccess();
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v26, v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 280);
      v21 = *(_QWORD *)(v0 + 288);
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      v24 = (char *)v19 + *(int *)(v23 + 48);
      v25 = *(int *)(v23 + 64);
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v22, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ShareTarget);
      *(_OWORD *)v24 = xmmword_220446ED0;
      v24[16] = 2;
      *(uint64_t *)((char *)v19 + v25) = v21;
      swift_storeEnumTagMultiPayload();
      v26 = v20 + *(_QWORD *)(*(_QWORD *)v20 + 104);
      swift_beginAccess();
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v26, v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      swift_bridgeObjectRetain();
    }
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v19, v26);
    swift_endAccess();
    specialized SharingFlow.state.didset(v18);
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v19, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    static ExecuteResponse.ongoing(requireInput:)();
  }
  else
  {
    if (!BYTE1(v1))
    {
      v3 = *(_QWORD *)(v0 + 360);
      v2 = *(_QWORD *)(v0 + 368);
      v29 = *(_QWORD *)(v0 + 328);
      v56 = *(_QWORD *)(v0 + 320);
      v55 = *(_QWORD *)(v0 + 304);
      v30 = *(_QWORD *)(v0 + 280);
      v31 = *(_QWORD *)(v0 + 288);
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      v33 = v29 + *(int *)(v32 + 48);
      v34 = *(int *)(v32 + 64);
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v30, v29, (uint64_t (*)(_QWORD))type metadata accessor for ShareTarget);
      *(_QWORD *)v33 = v3;
      *(_QWORD *)(v33 + 8) = v2;
      *(_BYTE *)(v33 + 16) = v1;
      *(_QWORD *)(v29 + v34) = v31;
      swift_storeEnumTagMultiPayload();
      v35 = v55 + *(_QWORD *)(*(_QWORD *)v55 + 104);
      swift_beginAccess();
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v35, v56, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      outlined copy of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      outlined copy of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      swift_bridgeObjectRetain();
      outlined assign with copy of StartSharingFlow.StartSharingFlowState(v29, v35);
      swift_endAccess();
      specialized SharingFlow.state.didset(v56);
      outlined destroy of StartSharingFlow.StartSharingFlowState(v29, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      outlined destroy of StartSharingFlow.StartSharingFlowState(v56, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      static ExecuteResponse.ongoing(requireInput:)();
      outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      goto LABEL_16;
    }
    if (BYTE1(v1) == 1)
    {
      v3 = *(_QWORD *)(v0 + 360);
      v2 = *(_QWORD *)(v0 + 368);
      v4 = *(_QWORD *)(v0 + 320);
      v5 = *(uint64_t **)(v0 + 328);
      v6 = *(_QWORD *)(v0 + 304);
      *v5 = v3;
      v5[1] = v2;
      swift_storeEnumTagMultiPayload();
      v7 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 104);
      swift_beginAccess();
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v7, v4, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      outlined copy of StartSharingTargetResolution(v3, v2, v1, 1u);
      outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v5, v7);
      swift_endAccess();
      specialized SharingFlow.state.didset(v4);
      outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v5, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      outlined destroy of StartSharingFlow.StartSharingFlowState(v4, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      static ExecuteResponse.ongoing(requireInput:)();
LABEL_16:
      outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      goto LABEL_24;
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.default);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v58 = v40;
      *(_DWORD *)v39 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v41 = static StartSharingFlow.typeName;
      v42 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v37, v38, "%s: Resolved needs value -> pushing needs value flow", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v40, -1, -1);
      MEMORY[0x2207E453C](v39, -1, -1);
    }

    v57 = *(_DWORD *)(v0 + 376);
    v44 = *(_QWORD *)(v0 + 360);
    v43 = *(_QWORD *)(v0 + 368);
    v46 = *(_QWORD *)(v0 + 336);
    v45 = *(_BYTE **)(v0 + 344);
    v47 = *(_QWORD *)(v0 + 296);
    v48 = *(_QWORD *)(v0 + 304);
    v49 = *(_QWORD *)(v0 + 272);
    *v45 = -109;
    static DialogPhase.clarification.getter();
    v50 = &v45[*(int *)(v46 + 24)];
    static SharingNLContextProvider.makeNLContextUpdateForShareTargetPrompt()();
    v51 = type metadata accessor for NLContextUpdate();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
    *(_QWORD *)(v0 + 40) = v46;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Responses.StartSharing.NeedsTarget;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
    outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v45, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.NeedsTarget);
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = v48;
    *(_QWORD *)(v53 + 24) = v47;
    swift_retain();
    StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(v0 + 16, (uint64_t)partial apply for closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:), v53, v49);
    swift_release();
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v45, type metadata accessor for Responses.StartSharing.NeedsTarget);
    outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v44, v43, v57, 0);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17[5];

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v7 = MEMORY[0x24BDAC7A8](started);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v16[-v10];
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v17);
  v12 = (uint64_t *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  swift_beginAccess();
  __swift_assign_boxed_opaque_existential_1(v12, v17);
  v13 = swift_endAccess();
  specialized SharingFlow.intent.didset(v13);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (__OFADD__(a3, 1))
  {
    __break(1u);
  }
  else
  {
    *v11 = a3 + 1;
    swift_storeEnumTagMultiPayload();
    v15 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
    swift_beginAccess();
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v15, (uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, v15);
    swift_endAccess();
    specialized SharingFlow.state.didset((uint64_t)v9);
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  }
  return result;
}

uint64_t StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 280) = a6;
  *(_QWORD *)(v7 + 288) = v6;
  *(_BYTE *)(v7 + 304) = a5;
  *(_QWORD *)(v7 + 264) = a3;
  *(_QWORD *)(v7 + 272) = a4;
  *(_QWORD *)(v7 + 248) = a1;
  *(_QWORD *)(v7 + 256) = a2;
  type metadata accessor for ShareTarget();
  *(_QWORD *)(v7 + 296) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v19 = v2;
  v22 = *(_BYTE *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 256);
  v20 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 280);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 112);
  swift_beginAccess();
  outlined init with copy of ResponseExecuting(v4, v0 + 16);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v3, v2, (uint64_t (*)(_QWORD))type metadata accessor for ShareTarget);
  outlined init with copy of ResponseExecuting(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120), v0 + 96);
  outlined init with copy of ResponseExecuting(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128), v0 + 136);
  outlined init with copy of ResponseExecuting(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136), v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 136, v5);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v5);
  v9 = *v8;
  v10 = type metadata accessor for ResponseExecutor();
  *(_QWORD *)(v0 + 80) = v10;
  *(_QWORD *)(v0 + 88) = &protocol witness table for ResponseExecutor;
  *(_QWORD *)(v0 + 56) = v9;
  type metadata accessor for StartSharingConfirmationFlow();
  v11 = swift_allocObject();
  v12 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 56, v10);
  v13 = *(_QWORD *)(v10 - 8);
  v14 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(v14, v12, v10);
  v15 = *v14;
  v16 = (_QWORD *)(v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_responseExecutor);
  v16[3] = v10;
  v16[4] = &protocol witness table for ResponseExecutor;
  *v16 = v15;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_BYTE *)(v11 + 64) = 32;
  outlined init with take of SharingIntent((__int128 *)(v0 + 16), v11 + 72);
  outlined init with take of ShareTarget(v19, v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_requestedTarget);
  v17 = v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_resolvedTarget;
  *(_QWORD *)v17 = v20;
  *(_QWORD *)(v17 + 8) = v21;
  *(_BYTE *)(v17 + 16) = v22;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_recipients) = v23;
  outlined init with take of SharingIntent((__int128 *)(v0 + 96), v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_call);
  outlined init with take of SharingIntent((__int128 *)(v0 + 176), v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_outputPublisher);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_task_dealloc();
  *(_QWORD *)(v0 + 240) = v11;
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type StartSharingConfirmationFlow and conformance StartSharingConfirmationFlow, (uint64_t (*)(uint64_t))type metadata accessor for StartSharingConfirmationFlow, (uint64_t)&protocol conformance descriptor for StartSharingConfirmationFlow);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(void **a1, uint64_t a2)
{
  uint64_t started;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE v18[24];

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v5 = MEMORY[0x24BDAC7A8](started);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = (uint64_t *)&v18[-v8];
  v10 = *a1;
  switch((unint64_t)v10)
  {
    case 0uLL:
      *v9 = 0;
      v9[1] = 0;
      goto LABEL_6;
    case 1uLL:
    case 3uLL:
      goto LABEL_6;
    case 2uLL:
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StartSharingFlow.StartSharingFlowState, validationFailFallbackState: StartSharingFlow.StartSharingFlowState));
      v14 = swift_allocBox();
      v16 = (_BYTE *)(v15 + *(int *)(v13 + 48));
      swift_storeEnumTagMultiPayload();
      *v16 = 2;
      swift_storeEnumTagMultiPayload();
      *v9 = v14;
      goto LABEL_6;
    case 4uLL:
      *(_OWORD *)v9 = xmmword_220446EE0;
LABEL_6:
      swift_storeEnumTagMultiPayload();
      v11 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
      swift_beginAccess();
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v11, (uint64_t)v7, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      break;
    default:
      *v9 = (uint64_t)v10;
      swift_storeEnumTagMultiPayload();
      v11 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
      swift_beginAccess();
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v11, (uint64_t)v7, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      v12 = v10;
      break;
  }
  outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, v11);
  swift_endAccess();
  specialized SharingFlow.state.didset((uint64_t)v7);
  outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v7, type metadata accessor for StartSharingFlow.StartSharingFlowState);
}

uint64_t StartSharingFlow.shareTarget(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[24] = a1;
  v2[25] = v1;
  v2[26] = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing(0);
  v2[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t StartSharingFlow.shareTarget(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v12;
  uint64_t v14;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[31] = __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v14 = v5;
    *(_DWORD *)v4 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v6 = static StartSharingFlow.typeName;
    v7 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v2, v3, "%s: Informing user that screen sharing is starting...", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v5, -1, -1);
    MEMORY[0x2207E453C](v4, -1, -1);
  }

  v8 = v0[29];
  v9 = (_BYTE *)v0[30];
  v10 = v0[25];
  *v9 = -110;
  static DialogPhase.confirmed.getter();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v10 + *(_QWORD *)(*(_QWORD *)v10 + 128)), *(_QWORD *)(v10 + *(_QWORD *)(*(_QWORD *)v10 + 128) + 24));
  v0[10] = v8;
  v0[11] = (uint64_t)&protocol witness table for Responses.StartSharing.InterstitialStartingScreenSharing;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  v12 = (_QWORD *)swift_task_alloc();
  v0[32] = (uint64_t)v12;
  *v12 = v0;
  v12[1] = StartSharingFlow.shareTarget(_:);
  return ResponseExecutor.execute(response:)((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v2 + 56);
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 200) + *(_QWORD *)(**(_QWORD **)(v0 + 200) + 136));
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 272) = v2;
  *v2 = v0;
  v2[1] = StartSharingFlow.shareTarget(_:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v1 = *(void **)(v0 + 264);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  v6 = &loc_220442000;
  if (os_log_type_enabled(v4, v5))
  {
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v7 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v33 = *(_QWORD *)(v0 + 240);
    v9 = static StartSharingFlow.typeName;
    v10 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    v11 = v1;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 176) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v12;

    _os_log_impl(&dword_2203F9000, v4, v5, "%s: Error producing or outputting InterstitialStartingScreenSharing dialog: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v32, -1, -1);
    MEMORY[0x2207E453C](v7, -1, -1);

    outlined destroy of StartSharingFlow.StartSharingFlowState(v33, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
    v6 = (_QWORD *)&loc_220442000;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 240);

    outlined destroy of StartSharingFlow.StartSharingFlowState(v13, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v34 = v18;
    *(_DWORD *)v17 = v6[464];
    if (one-time initialization token for typeName != -1)
      swift_once();
    v19 = static StartSharingFlow.typeName;
    v20 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000220447A00, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2203F9000, v15, v16, "%s: Starting sharing target %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v18, -1, -1);
    MEMORY[0x2207E453C](v17, -1, -1);
  }

  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (_QWORD *)(*(_QWORD *)(v0 + 200) + *(_QWORD *)(**(_QWORD **)(v0 + 200) + 120)));
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v34 = v24;
    *(_DWORD *)v23 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v25 = static StartSharingFlow.typeName;
    v26 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v21, v22, "%s: Successfully shared target", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v24, -1, -1);
    MEMORY[0x2207E453C](v23, -1, -1);
  }

  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v29 = *(_QWORD *)(v0 + 200);
  swift_storeEnumTagMultiPayload();
  v30 = v29 + *(_QWORD *)(*(_QWORD *)v29 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v30, v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v28, v30);
  swift_endAccess();
  specialized SharingFlow.state.didset(v27);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v28, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v1;
  *v1 = v0;
  v1[1] = StartSharingFlow.shareTarget(_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 240);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v1, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = (uint64_t *)(v0 + 152);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.default);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = 0x2555D0000uLL;
  if (os_log_type_enabled(v4, v5))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v22 = v8;
    *(_DWORD *)v7 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v9 = static StartSharingFlow.typeName;
    v10 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000220447A00, &v22);
    v2 = (uint64_t *)(v0 + 152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2203F9000, v4, v5, "%s: Starting sharing target %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v8, -1, -1);
    MEMORY[0x2207E453C](v7, -1, -1);

    v6 = 0x2555D0000;
  }
  else
  {

  }
  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (_QWORD *)(*(_QWORD *)(v0 + 200) + *(_QWORD *)(**(_QWORD **)(v0 + 200) + 120)));
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v22 = v14;
    *(_DWORD *)v13 = 136315138;
    if (*(_QWORD *)(v6 + 3728) != -1)
      swift_once();
    v15 = static StartSharingFlow.typeName;
    v16 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *v2 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v11, v12, "%s: Successfully shared target", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v14, -1, -1);
    MEMORY[0x2207E453C](v13, -1, -1);
  }

  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 200);
  swift_storeEnumTagMultiPayload();
  v20 = v19 + *(_QWORD *)(*(_QWORD *)v19 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v20, v17, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v18, v20);
  swift_endAccess();
  specialized SharingFlow.state.didset(v17);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v17, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = *(void **)(v0 + 280);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  v6 = &loc_220442000;
  if (os_log_type_enabled(v4, v5))
  {
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v7 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v33 = *(_QWORD *)(v0 + 240);
    v9 = static StartSharingFlow.typeName;
    v10 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    v11 = v1;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 176) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v12;

    _os_log_impl(&dword_2203F9000, v4, v5, "%s: Error producing or outputting InterstitialStartingScreenSharing dialog: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v32, -1, -1);
    MEMORY[0x2207E453C](v7, -1, -1);

    outlined destroy of StartSharingFlow.StartSharingFlowState(v33, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
    v6 = (_QWORD *)&loc_220442000;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 240);

    outlined destroy of StartSharingFlow.StartSharingFlowState(v13, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v34 = v18;
    *(_DWORD *)v17 = v6[464];
    if (one-time initialization token for typeName != -1)
      swift_once();
    v19 = static StartSharingFlow.typeName;
    v20 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000220447A00, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2203F9000, v15, v16, "%s: Starting sharing target %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v18, -1, -1);
    MEMORY[0x2207E453C](v17, -1, -1);
  }

  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (_QWORD *)(*(_QWORD *)(v0 + 200) + *(_QWORD *)(**(_QWORD **)(v0 + 200) + 120)));
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v34 = v24;
    *(_DWORD *)v23 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v25 = static StartSharingFlow.typeName;
    v26 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v21, v22, "%s: Successfully shared target", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v24, -1, -1);
    MEMORY[0x2207E453C](v23, -1, -1);
  }

  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v29 = *(_QWORD *)(v0 + 200);
  swift_storeEnumTagMultiPayload();
  v30 = v29 + *(_QWORD *)(*(_QWORD *)v29 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v30, v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v28, v30);
  swift_endAccess();
  specialized SharingFlow.state.didset(v27);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v28, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = *(void **)(v0 + 296);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  v6 = &loc_220442000;
  if (os_log_type_enabled(v4, v5))
  {
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v7 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v33 = *(_QWORD *)(v0 + 240);
    v9 = static StartSharingFlow.typeName;
    v10 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    v11 = v1;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 176) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v12;

    _os_log_impl(&dword_2203F9000, v4, v5, "%s: Error producing or outputting InterstitialStartingScreenSharing dialog: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v32, -1, -1);
    MEMORY[0x2207E453C](v7, -1, -1);

    outlined destroy of StartSharingFlow.StartSharingFlowState(v33, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
    v6 = (_QWORD *)&loc_220442000;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 240);

    outlined destroy of StartSharingFlow.StartSharingFlowState(v13, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v34 = v18;
    *(_DWORD *)v17 = v6[464];
    if (one-time initialization token for typeName != -1)
      swift_once();
    v19 = static StartSharingFlow.typeName;
    v20 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000220447A00, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2203F9000, v15, v16, "%s: Starting sharing target %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v18, -1, -1);
    MEMORY[0x2207E453C](v17, -1, -1);
  }

  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (_QWORD *)(*(_QWORD *)(v0 + 200) + *(_QWORD *)(**(_QWORD **)(v0 + 200) + 120)));
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v34 = v24;
    *(_DWORD *)v23 = 136315138;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v25 = static StartSharingFlow.typeName;
    v26 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v21, v22, "%s: Successfully shared target", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v24, -1, -1);
    MEMORY[0x2207E453C](v23, -1, -1);
  }

  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v29 = *(_QWORD *)(v0 + 200);
  swift_storeEnumTagMultiPayload();
  v30 = v29 + *(_QWORD *)(*(_QWORD *)v29 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v30, v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v28, v30);
  swift_endAccess();
  specialized SharingFlow.state.didset(v27);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v28, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StartSharingFlow.makeResponseForStartSharingError(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t started;
  uint64_t *boxed_opaque_existential_1;
  char *v5;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v12[3];
  uint64_t v13;
  _UNKNOWN **v14;

  switch(a2)
  {
    case 0:
      started = type metadata accessor for Responses.StartSharing.AlreadySharingTarget(0);
      v13 = started;
      v14 = &protocol witness table for Responses.StartSharing.AlreadySharingTarget;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
      *(_BYTE *)boxed_opaque_existential_1 = 0x80;
      static DialogPhase.completion.getter();
LABEL_7:
      v5 = (char *)boxed_opaque_existential_1 + *(int *)(started + 24);
      *v5 = 1;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      *((_QWORD *)v5 + 1) = 0;
      break;
    case 1:
      started = type metadata accessor for Responses.StartSharing.UnableToStartSharingTarget(0);
      v13 = started;
      v14 = &protocol witness table for Responses.StartSharing.UnableToStartSharingTarget;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
      *(_BYTE *)boxed_opaque_existential_1 = -99;
      static DialogPhase.error.getter();
      goto LABEL_7;
    case 2:
      v13 = type metadata accessor for Responses.StartSharing.SingleWindowSharingUnsupported(0);
      v14 = &protocol witness table for Responses.StartSharing.SingleWindowSharingUnsupported;
      *(_BYTE *)__swift_allocate_boxed_opaque_existential_1(v12) = -100;
      static DialogPhase.completion.getter();
      break;
    default:
      v7 = type metadata accessor for Responses.StartSharing.AppNotInstalled(0);
      v13 = v7;
      v14 = &protocol witness table for Responses.StartSharing.AppNotInstalled;
      v8 = __swift_allocate_boxed_opaque_existential_1(v12);
      *(_BYTE *)v8 = -126;
      swift_bridgeObjectRetain();
      static DialogPhase.completion.getter();
      v9 = (uint64_t *)((char *)v8 + *(int *)(v7 + 24));
      *v9 = a1;
      v9[1] = a2;
      v10 = (char *)v8 + *(int *)(v7 + 28);
      *v10 = 0;
      *((_QWORD *)v10 + 1) = a1;
      *((_QWORD *)v10 + 2) = a2;
      *((_QWORD *)v10 + 3) = 0;
      swift_bridgeObjectRetain();
      break;
  }
  specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)(v12);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t started;
  uint64_t v10;
  _BYTE *v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  _BYTE v34[24];
  uint64_t v35;
  uint64_t v36[5];
  __int128 v37[3];

  v5 = v4;
  v32 = a4;
  v31 = *v5;
  started = type metadata accessor for Responses.StartSharing.ShareRequestCancelled(0);
  MEMORY[0x24BDAC7A8](started);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v11 = -101;
  static DialogPhase.canceled.getter();
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v37);
  v36[3] = started;
  v36[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ShareRequestCancelled;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
  outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  outlined init with copy of ResponseExecuting((uint64_t)v5 + *(_QWORD *)(*v5 + 128), (uint64_t)v34);
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = *v15;
  v18 = type metadata accessor for ResponseExecutor();
  v33[3] = v18;
  v33[4] = &protocol witness table for ResponseExecutor;
  v33[0] = v17;
  type metadata accessor for NeedsShareTargetFlowStrategy();
  v19 = swift_allocObject();
  v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v33, v18);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = *v22;
  *(_QWORD *)(v19 + 120) = v18;
  *(_QWORD *)(v19 + 128) = &protocol witness table for ResponseExecutor;
  *(_QWORD *)(v19 + 96) = v24;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(_QWORD *)(v19 + 168) = 0;
  outlined init with take of SharingIntent(v37, v19 + 16);
  outlined init with take of SharingResponse?((uint64_t)v36, v19 + 56);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  outlined init with copy of ResponseExecuting((uint64_t)v5 + *(_QWORD *)(*v5 + 136), (uint64_t)v37);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy>);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v19;
  outlined init with copy of ResponseExecuting((uint64_t)v37, (uint64_t)v36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<SharingIntent?>);
  swift_allocObject();
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy, (uint64_t (*)(uint64_t))type metadata accessor for NeedsShareTargetFlowStrategy, (uint64_t)&protocol conformance descriptor for NeedsShareTargetFlowStrategy);
  swift_retain();
  v26 = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  *(_QWORD *)(v25 + 24) = v26;
  *(_QWORD *)&v37[0] = v25;
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v5;
  v27[3] = a2;
  v28 = v31;
  v27[4] = a3;
  v27[5] = v28;
  lazy protocol witness table accessor for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>();
  swift_retain();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  return outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
}

uint64_t closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  swift_retain();
  swift_retain();
  specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(a1, a2, a2, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t StartSharingFlow.__ivar_destroyer()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.shareTargetResolver);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.sharer);
  return __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.sharePlayHelper);
}

uint64_t StartSharingFlow.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of StartSharingFlow.StartSharingFlowState(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104), type metadata accessor for StartSharingFlow.StartSharingFlowState);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.shareTargetResolver);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.sharer);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.sharePlayHelper);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StartSharingFlow(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StartSharingFlow);
}

uint64_t type metadata completion function for StartSharingFlow()
{
  return swift_initClassMetadata2();
}

char *initializeBufferWithCopyOfBuffer for StartSharingFlow.StartSharingFlowState(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  char *v22;
  char *v23;
  int *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v7[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v9 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(_QWORD *)a1 = *a2;
            swift_retain();
            v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            v11 = &a1[v10];
            v12 = (uint64_t)a2 + v10;
            v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
            goto LABEL_19;
          case 1u:
          case 2u:
            v22 = a2[1];
            *(_QWORD *)a1 = *a2;
            *((_QWORD *)a1 + 1) = v22;
            swift_bridgeObjectRetain();
            goto LABEL_19;
          case 3u:
            v23 = a2[1];
            *(_QWORD *)a1 = *a2;
            *((_QWORD *)a1 + 1) = v23;
            a1[16] = *((_BYTE *)a2 + 16);
            swift_bridgeObjectRetain();
LABEL_19:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
            break;
        }
        v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
        *(_QWORD *)&a1[v24[12]] = *(char **)((char *)a2 + v24[12]);
        *(_QWORD *)&a1[v24[16]] = *(char **)((char *)a2 + v24[16]);
        a1[v24[20]] = *((_BYTE *)a2 + v24[20]);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v14 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(_QWORD *)a1 = *a2;
            swift_retain();
            v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            v16 = &a1[v15];
            v17 = (uint64_t)a2 + v15;
            v18 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
            goto LABEL_24;
          case 1u:
          case 2u:
            v25 = a2[1];
            *(_QWORD *)a1 = *a2;
            *((_QWORD *)a1 + 1) = v25;
            swift_bridgeObjectRetain();
            goto LABEL_24;
          case 3u:
            v26 = a2[1];
            *(_QWORD *)a1 = *a2;
            *((_QWORD *)a1 + 1) = v26;
            a1[16] = *((_BYTE *)a2 + 16);
            swift_bridgeObjectRetain();
LABEL_24:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
            break;
        }
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
        v28 = *(int *)(v27 + 48);
        v29 = &a1[v28];
        v30 = (uint64_t)a2 + v28;
        v32 = *(uint64_t *)((char *)a2 + v28);
        v31 = *(uint64_t *)((char *)a2 + v28 + 8);
        *(_QWORD *)v29 = v32;
        *((_QWORD *)v29 + 1) = v31;
        v29[16] = *(_BYTE *)(v30 + 16);
        *(_QWORD *)&a1[*(int *)(v27 + 64)] = *(char **)((char *)a2 + *(int *)(v27 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        v19 = (unint64_t)a2[1];
        if (v19 >= 3)
        {
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v19;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v20 = *a2;
        v21 = v20;
        *(_QWORD *)a1 = v20;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      return;
    case 4u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v4 = a1
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          v5 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      goto LABEL_14;
    case 5u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v2 = a1
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          v3 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      swift_bridgeObjectRelease();
      goto LABEL_14;
    case 6u:
      if (*(_QWORD *)(a1 + 8) < 3uLL)
        return;
LABEL_14:
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      goto LABEL_22;
    case 4u:
      v6 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          swift_retain();
          v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          v8 = a1 + v7;
          v9 = a2 + v7;
          v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
          goto LABEL_15;
        case 1u:
        case 2u:
          v19 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v19;
          swift_bridgeObjectRetain();
          goto LABEL_15;
        case 3u:
          v20 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v20;
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
          swift_bridgeObjectRetain();
LABEL_15:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      *(_QWORD *)(a1 + v21[12]) = *(_QWORD *)(a2 + v21[12]);
      *(_QWORD *)(a1 + v21[16]) = *(_QWORD *)(a2 + v21[16]);
      *(_BYTE *)(a1 + v21[20]) = *(_BYTE *)(a2 + v21[20]);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    case 5u:
      v11 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          swift_retain();
          v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          v13 = a1 + v12;
          v14 = a2 + v12;
          v15 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
          goto LABEL_20;
        case 1u:
        case 2u:
          v22 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v22;
          swift_bridgeObjectRetain();
          goto LABEL_20;
        case 3u:
          v23 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v23;
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
          swift_bridgeObjectRetain();
LABEL_20:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
          break;
      }
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      v25 = *(int *)(v24 + 48);
      v26 = a1 + v25;
      v27 = a2 + v25;
      v29 = *(_QWORD *)(a2 + v25);
      v28 = *(_QWORD *)(a2 + v25 + 8);
      *(_QWORD *)v26 = v29;
      *(_QWORD *)(v26 + 8) = v28;
      *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
      *(_QWORD *)(a1 + *(int *)(v24 + 64)) = *(_QWORD *)(a2 + *(int *)(v24 + 64));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_22;
    case 6u:
      v16 = *(_QWORD *)(a2 + 8);
      if (v16 >= 3)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v16;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      goto LABEL_22;
    case 8u:
      v17 = *(void **)a2;
      v18 = v17;
      *(_QWORD *)a1 = v17;
LABEL_22:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    outlined destroy of StartSharingFlow.StartSharingFlowState(a1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_retain();
        goto LABEL_23;
      case 4u:
        v6 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            swift_retain();
            v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                        + 48);
            v8 = a1 + v7;
            v9 = a2 + v7;
            v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
            goto LABEL_16;
          case 1u:
          case 2u:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_16;
          case 3u:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
            swift_bridgeObjectRetain();
LABEL_16:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
            break;
        }
        v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
        *(_QWORD *)(a1 + v18[12]) = *(_QWORD *)(a2 + v18[12]);
        *(_QWORD *)(a1 + v18[16]) = *(_QWORD *)(a2 + v18[16]);
        *(_BYTE *)(a1 + v18[20]) = *(_BYTE *)(a2 + v18[20]);
        swift_bridgeObjectRetain();
        goto LABEL_23;
      case 5u:
        v11 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            swift_retain();
            v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            v13 = a1 + v12;
            v14 = a2 + v12;
            v15 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
            goto LABEL_21;
          case 1u:
          case 2u:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_21;
          case 3u:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
            swift_bridgeObjectRetain();
LABEL_21:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
            break;
        }
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
        v20 = *(int *)(v19 + 48);
        v21 = a1 + v20;
        *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
        *(_QWORD *)(v21 + 8) = *(_QWORD *)(a2 + v20 + 8);
        *(_BYTE *)(v21 + 16) = *(_BYTE *)(a2 + v20 + 16);
        *(_QWORD *)(a1 + *(int *)(v19 + 64)) = *(_QWORD *)(a2 + *(int *)(v19 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_23;
      case 6u:
        if (*(_QWORD *)(a2 + 8) >= 3uLL)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        goto LABEL_23;
      case 8u:
        v16 = *(void **)a2;
        v17 = v16;
        *(_QWORD *)a1 = v16;
LABEL_23:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StartSharingFlow.StartSharingFlowState);
}

_QWORD *initializeWithTake for StartSharingFlow.StartSharingFlowState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v8 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                   + 48);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
    v19 = *(int *)(v18 + 48);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v20[16] = v21[16];
    *(_QWORD *)((char *)a1 + *(int *)(v18 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v18 + 64));
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 4)
  {
    v7 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
    *(_QWORD *)((char *)a1 + v13[12]) = *(_QWORD *)((char *)a2 + v13[12]);
    *(_QWORD *)((char *)a1 + v13[16]) = *(_QWORD *)((char *)a2 + v13[16]);
    *((_BYTE *)a1 + v13[20]) = *((_BYTE *)a2 + v13[20]);
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithTake for StartSharingFlow.StartSharingFlowState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  if (a1 != a2)
  {
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)a1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      v8 = type metadata accessor for ShareTarget();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                     + 48);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
        swift_storeEnumTagMultiPayload();
      }
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      v19 = *(int *)(v18 + 48);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v20[16] = v21[16];
      *(_QWORD *)((char *)a1 + *(int *)(v18 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v18 + 64));
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 4)
    {
      v7 = type metadata accessor for ShareTarget();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        swift_storeEnumTagMultiPayload();
      }
      v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      *(_QWORD *)((char *)a1 + v13[12]) = *(_QWORD *)((char *)a2 + v13[12]);
      *(_QWORD *)((char *)a1 + v13[16]) = *(_QWORD *)((char *)a2 + v13[16]);
      *((_BYTE *)a1 + v13[20]) = *((_BYTE *)a2 + v13[20]);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for StartSharingFlow.StartSharingFlowState()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  const char *v17;

  v0 = MEMORY[0x24BEE0178] + 64;
  v9 = "\b";
  v10 = MEMORY[0x24BEE0178] + 64;
  v11 = MEMORY[0x24BEE0178] + 64;
  v12 = MEMORY[0x24BEE0178] + 64;
  result = type metadata accessor for ShareTarget();
  if (v2 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v5 = &unk_220446DB0;
    v6 = v0;
    v7 = &unk_220446DC8;
    swift_getTupleTypeLayout();
    v13 = &v8;
    swift_getTupleTypeLayout3();
    v14 = &v3;
    v15 = &unk_220446DF8;
    v16 = &unk_220446E10;
    v17 = "\b";
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState, type metadata accessor for StartSharingFlow.StartSharingFlowState, (uint64_t)&protocol conformance descriptor for StartSharingFlow.StartSharingFlowState);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState, type metadata accessor for StartSharingFlow.StartSharingFlowState, (uint64_t)&protocol conformance descriptor for StartSharingFlow.StartSharingFlowState);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined consume of StartSharingFlow.StartSharingFlowError(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined init with take of ShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareTarget();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of StartSharingFlow.StartSharingFlowError(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_22043A200()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StartSharingFlow.validateIntent(needsValueCount:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return closure #1 in StartSharingFlow.validateIntent(needsValueCount:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_22043A230()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>;
  if (!lazy protocol witness table cache variable for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy>);
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for PromptForValueFlowWrapper<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>);
  }
  return result;
}

uint64_t specialized closure #1 in closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  uint64_t started;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38[5];

  started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v8 = MEMORY[0x24BDAC7A8](started);
  v34 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v30 - v10);
  if (one-time initialization token for default != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.default);
  outlined init with copy of SharingIntent?(a1, (uint64_t)v38);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v30 = a4;
    v31 = a3;
    v32 = a2;
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v35 = v16;
    *(_DWORD *)v15 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v18 = static StartSharingFlow.typeName;
    v17 = *(_QWORD *)algn_2555D3EB8;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    outlined init with copy of SharingIntent?((uint64_t)v38, (uint64_t)&v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
    v19 = String.init<A>(describing:)();
    *(_QWORD *)&v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SharingIntent?((uint64_t)v38);
    _os_log_impl(&dword_2203F9000, v13, v14, "%s: needs value flow succeeded with intent %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v16, -1, -1);
    MEMORY[0x2207E453C](v15, -1, -1);

    a3 = v31;
    a2 = v32;
  }
  else
  {
    outlined destroy of SharingIntent?((uint64_t)v38);

  }
  outlined init with copy of SharingIntent?(a1, (uint64_t)&v36);
  if (v37)
  {
    outlined init with take of SharingIntent(&v36, (uint64_t)v38);
    a3(v38);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  else
  {
    outlined destroy of SharingIntent?((uint64_t)&v36);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v38[0] = v25;
      *(_DWORD *)v24 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v26 = static StartSharingFlow.typeName;
      v27 = *(_QWORD *)algn_2555D3EB8;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v22, v23, "%s: Encountered a nil intent - this should never happen", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v25, -1, -1);
      MEMORY[0x2207E453C](v24, -1, -1);
    }

    lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
    *v11 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    v28 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
    swift_beginAccess();
    v29 = v34;
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v28, v34, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, v28);
    swift_endAccess();
    specialized SharingFlow.state.didset(v29);
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    return outlined destroy of StartSharingFlow.StartSharingFlowState(v29, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  }
}

uint64_t outlined init with copy of SharingIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SharingIntent?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(void **a1)
{
  uint64_t v1;

  return closure #1 in StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(a1, v1);
}

uint64_t outlined copy of StartSharingTargetResolution(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return outlined consume of StartSharingTargetResolution(result, a2, a3, BYTE1(a3));
  return result;
}

uint64_t outlined consume of StartSharingTargetResolution(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return outlined copy of StartSharingTargetResolution(result, a2, a3, BYTE1(a3));
  return result;
}

uint64_t sub_22043A894()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_22043A8C0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_22043A8E4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

uint64_t outlined init with copy of RecipientsResolver(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ExpanseUIModelConverter.Utils(a2, a1);
  return a2;
}

uint64_t outlined destroy of RecipientsResolver(uint64_t a1)
{
  destroy for ExpanseUIModelConverter.Utils(a1);
  return a1;
}

uint64_t sub_22043A980()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StartSharingFlow.validateRecipientsForIntent(needsValueCount:)(_BYTE *a1)
{
  uint64_t *v1;

  return closure #1 in StartSharingFlow.validateRecipientsForIntent(needsValueCount:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t destroy for StartSharingFlow.StartSharingFlowError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StartSharingFlow.StartSharingFlowError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for StartSharingFlow.StartSharingFlowError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StartSharingFlow.StartSharingFlowError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StartSharingFlow.StartSharingFlowError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StartSharingFlow.StartSharingFlowError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for StartSharingFlow.StartSharingFlowError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for StartSharingFlow.StartSharingFlowError()
{
  return &type metadata for StartSharingFlow.StartSharingFlowError;
}

uint64_t UsoEntity_common_AttachmentType.DefinedValues.preferSharingInCall.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  char v20;
  char v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v2 = *(_QWORD **)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v24 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v24 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v24 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - v13;
  v15 = *MEMORY[0x24BEA1AC8];
  v26 = (void (*)(char *, uint64_t, uint64_t))v2[13];
  v26((char *)&v24 - v13, v15, v1);
  lazy protocol witness table accessor for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v30 == v28 && v31 == v29)
    v16 = 1;
  else
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = (void (*)(char *, uint64_t))v2[1];
  v17(v14, v1);
  v18 = (void (*)(char *, uint64_t, uint64_t))v2[2];
  v18(v12, v0, v1);
  if ((v16 & 1) != 0)
    goto LABEL_9;
  v26(v9, *MEMORY[0x24BEA1AD0], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v30 == v28 && v31 == v29)
  {
    swift_bridgeObjectRelease_n();
    v17(v9, v1);
LABEL_9:
    v17(v12, v1);
    v19 = v27;
    v18(v27, v0, v1);
LABEL_10:
    v20 = 1;
    goto LABEL_11;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17(v9, v1);
  v17(v12, v1);
  v19 = v27;
  v18(v27, v0, v1);
  if ((v22 & 1) != 0)
    goto LABEL_10;
  v23 = v25;
  v26(v25, *MEMORY[0x24BEA1B10], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v30 == v28 && v31 == v29)
    v20 = 1;
  else
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17(v23, v1);
LABEL_11:
  v17(v19, v1);
  return v20 & 1;
}

unint64_t ValidateStartSharingIntentFlow.ValidationResult.description.getter(char a1)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  if (a1 == 2)
    return 0xD000000000000015;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
    v3 = 0x4D616956646E6573;
  else
    v3 = 0xD000000000000014;
  if ((a1 & 1) != 0)
    v4 = 0xEF73656761737365;
  else
    v4 = 0x80000002204478E0;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD00000000000001ELL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000014;
  if (*v1)
    v2 = 0x4D616956646E6573;
  v3 = 0x80000002204478E0;
  if (*v1)
    v3 = 0xEF73656761737365;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  _BYTE *v0;

  if (*v0)
    return 0x4D616956646E6573;
  else
    return 0xD000000000000014;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValidateStartSharingIntentFlow.ValidationResult(char *a1, char *a2)
{
  return specialized static ValidateStartSharingIntentFlow.ValidationResult.== infix(_:_:)(*a1, *a2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateStartSharingIntentFlow.ValidationResult()
{
  char *v0;

  return ValidateStartSharingIntentFlow.ValidationResult.description.getter(*v0);
}

uint64_t ValidateStartSharingIntentFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for ShareTarget();
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ValidateStartSharingIntentFlow.execute()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;

  v1 = *(_QWORD **)(v0 + 48);
  v2 = v1[6];
  v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 200))(v2, v3) & 1) == 0)
    goto LABEL_10;
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = v1[6];
  v7 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 192))(v6, v7);
  swift_storeEnumTagMultiPayload();
  v8 = specialized static ShareTarget.== infix(_:_:)(v4, v5);
  outlined destroy of ShareTarget(v5);
  outlined destroy of ShareTarget(v4);
  if ((v8 & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.default);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v34 = v13;
      *(_DWORD *)v12 = 136315138;
      if (one-time initialization token for typeName != -1)
        swift_once();
      v14 = static ValidateStartSharingIntentFlow.typeName;
      v15 = *(_QWORD *)algn_2555D41C8;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2203F9000, v10, v11, "%s: intent cannot be handled as a screen sharing or app casting intent because it is a SharePlay request with no target", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207E453C](v13, -1, -1);
      MEMORY[0x2207E453C](v12, -1, -1);
    }

    v16 = 0;
  }
  else
  {
LABEL_10:
    v17 = v1[6];
    v18 = v1[7];
    __swift_project_boxed_opaque_existential_1(v1 + 3, v17);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 216))(v17, v18) & 1) != 0)
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.default);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        v23 = swift_slowAlloc();
        v34 = v23;
        *(_DWORD *)v22 = 136315138;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v24 = static ValidateStartSharingIntentFlow.typeName;
        v25 = *(_QWORD *)algn_2555D41C8;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2203F9000, v20, v21, "%s: intent cannot be handled as a screen sharing or app casting intent because it should use message sending", v22, 0xCu);
        v16 = 1;
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v23, -1, -1);
        MEMORY[0x2207E453C](v22, -1, -1);

      }
      else
      {

        v16 = 1;
      }
    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.default);
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        v34 = v30;
        *(_DWORD *)v29 = 136315138;
        if (one-time initialization token for typeName != -1)
          swift_once();
        v31 = static ValidateStartSharingIntentFlow.typeName;
        v32 = *(_QWORD *)algn_2555D41C8;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2203F9000, v27, v28, "%s: intent to be handled as a screen sharing or app casting intent", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2207E453C](v30, -1, -1);
        MEMORY[0x2207E453C](v29, -1, -1);
      }

      v16 = 2;
    }
  }
  *(_BYTE *)(*(_QWORD *)(v0 + 48) + 16) = v16;
  static ExecuteResponse.complete()();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ValidateStartSharingIntentFlow()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for ValidateStartSharingIntentFlow.ValidationResult(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = v6 - 2;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_22043B95C + 4 * byte_220446F90[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ValidateStartSharingIntentFlow.ValidationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22043BA04 + 4 * byte_220446F9A[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22043BA38 + 4 * byte_220446F95[v5]))();
}

uint64_t sub_22043BA38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22043BA40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22043BA48);
  return result;
}

uint64_t sub_22043BA54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22043BA5CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22043BA60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22043BA68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ValidateStartSharingIntentFlow.ValidationResult()
{
  return &type metadata for ValidateStartSharingIntentFlow.ValidationResult;
}

uint64_t protocol witness for Flow.execute() in conformance ValidateStartSharingIntentFlow(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return ValidateStartSharingIntentFlow.execute()(a1);
}

uint64_t specialized static ValidateStartSharingIntentFlow.ValidationResult.== infix(_:_:)(char a1, char a2)
{
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = a2 == 2 && a1 == 2;
  if (a1 != 2 && a2 != 2)
  {
    if ((a1 & 1) != 0)
      v4 = 0x4D616956646E6573;
    else
      v4 = 0xD000000000000014;
    if ((a1 & 1) != 0)
      v5 = 0xEF73656761737365;
    else
      v5 = 0x80000002204478E0;
    if ((a2 & 1) != 0)
      v6 = 0x4D616956646E6573;
    else
      v6 = 0xD000000000000014;
    if ((a2 & 1) != 0)
      v7 = 0xEF73656761737365;
    else
      v7 = 0x80000002204478E0;
    if (v4 == v6 && v5 == v7)
      v3 = 1;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

uint64_t specialized ValidateStartSharingIntentFlow.on(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Input();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static ValidateStartSharingIntentFlow.typeName;
    v12 = *(_QWORD *)algn_2555D41C8;
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2203F9000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v10, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t storeEnumTagSinglePayload for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22043BE74 + 4 * byte_220446FA4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22043BEA8 + 4 * byte_220446F9F[v4]))();
}

uint64_t sub_22043BEA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22043BEB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22043BEB8);
  return result;
}

uint64_t sub_22043BEC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22043BECCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22043BED0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22043BED8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  return &type metadata for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason;
}

unint64_t lazy protocol witness table accessor for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason;
  if (!lazy protocol witness table cache variable for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason, &type metadata for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PermittedRecipients(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PermittedRecipients(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for PermittedRecipients(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PermittedRecipients(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PermittedRecipients(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PermittedRecipients()
{
  return &type metadata for PermittedRecipients;
}

unint64_t PermittedRecipients.description.getter(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  Swift::String v4;
  Swift::String v5;

  v1 = 0xD000000000000013;
  if (a1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v3 = type metadata accessor for INPerson();
    v4._countAndFlagsBits = MEMORY[0x2207E3DB0](a1, v3);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    return 0xD00000000000001ELL;
  }
  return v1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PermittedRecipients()
{
  uint64_t *v0;

  return PermittedRecipients.description.getter(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PermittedRecipients(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  char v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;

  v5 = (void *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_35:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == v23)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_35;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v8 = a1;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v24 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_41:
    result = MEMORY[0x2207E3F60](0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v5 = (void *)result;
  v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_43:
    v13 = (id)MEMORY[0x2207E3F60](0, a2);
LABEL_21:
    v14 = v13;
    type metadata accessor for INPerson();
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v21 = i - 4;
        if (v24)
        {
          v22 = (id)MEMORY[0x2207E3F60](i - 4, a1);
          if (v2)
            goto LABEL_23;
        }
        else
        {
          if (v21 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          v22 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_23:
            v18 = (id)MEMORY[0x2207E3F60](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v21 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_39;
        v18 = *(id *)(a2 + 8 * i);
LABEL_24:
        v19 = v18;
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t specialized logIfThrows<A>(message:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v13;

  *(_BYTE *)(v7 + 96) = a6;
  *(_QWORD *)(v7 + 64) = a5;
  *(_QWORD *)(v7 + 72) = a7;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 56) = a4;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 80) = v13;
  *v13 = v7;
  v13[1] = specialized logIfThrows<A>(message:_:);
  return closure #1 in implicit closure #2 in ResponseExecutor.execute(response:)(a1, a4, a5, a6, a7);
}

uint64_t specialized logIfThrows<A>(message:_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 96);
  v5 = type metadata accessor for ExpanseUIModel(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 0, 1, v5);
  outlined consume of ExpanseUIModelConverter(v1, v2, v4);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = *(void **)(v0 + 88);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain();
  v3 = v1;
  swift_bridgeObjectRetain();
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v21 = *(_QWORD *)(v0 + 40);
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v22 = v12;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    v13 = v8;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 24) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v11 = v14;

    _os_log_impl(&dword_2203F9000, v5, v6, "%s: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v12, -1, -1);
    MEMORY[0x2207E453C](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v15 = *(_QWORD *)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 32);
  v18 = *(_BYTE *)(v0 + 96);
  v19 = type metadata accessor for ExpanseUIModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  outlined consume of ExpanseUIModelConverter(v15, v16, v18);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized SharingFlow.state.didset(uint64_t a1)
{
  specialized SharingFlow.state.didset(a1, type metadata accessor for StartSharingFlow.StartSharingFlowState, (uint64_t (*)(uint64_t))StartSharingFlow.StartSharingFlowState.description.getter);
}

void specialized SharingFlow.state.didset(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t started;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[12];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = v3;
  v8 = a2(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v31[-v12];
  if (one-time initialization token for default != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(a1, (uint64_t)v13, a2);
  swift_retain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    v18 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v36 = v33;
    *(_DWORD *)v18 = 136315650;
    v32 = v17;
    v19 = v6[2];
    v20 = v6[3];
    swift_bridgeObjectRetain();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    outlined init with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, (uint64_t)v11, a2);
    started = outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, a2);
    v22 = a3(started);
    v24 = v23;
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, a2);
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 22) = 2080;
    v25 = (uint64_t)v6 + *(_QWORD *)(*v6 + 104);
    swift_beginAccess();
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v25, (uint64_t)v11, a2);
    v26 = swift_release();
    v27 = a3(v26);
    v29 = v28;
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, a2);
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v15, (os_log_type_t)v32, "%s: transitioned from state %s to %s", (uint8_t *)v18, 0x20u);
    v30 = v33;
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v30, -1, -1);
    MEMORY[0x2207E453C](v18, -1, -1);

  }
  else
  {
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, a2);

    swift_release_n();
  }
}

void specialized SharingFlow.intent.didset()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v21 = v18;
    *(_DWORD *)v4 = 136315394;
    v5 = v0[2];
    v6 = v0[3];
    swift_bridgeObjectRetain();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v17[1] = v4 + 14;
    v7 = (_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 112));
    swift_beginAccess();
    v8 = v7[3];
    v9 = __swift_project_boxed_opaque_existential_1(v7, v8);
    v10 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)v17 - v11;
    (*(void (**)(char *))(v10 + 16))((char *)v17 - v11);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v2, v3, "%s: intent set to: %s", (uint8_t *)v4, 0x16u);
    v16 = v18;
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v16, -1, -1);
    MEMORY[0x2207E453C](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t specialized SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(a1, a2, type metadata accessor for StartSharingFlow.StartSharingFlowState, (uint64_t)&unk_24E639A58, (uint64_t)partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:), a3);
}

uint64_t specialized SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  __int128 v25[2];

  v24[1] = a6;
  v24[2] = a5;
  v24[0] = a4;
  v8 = v6;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v24 - v16;
  outlined init with copy of ResponseExecuting(v6 + *(_QWORD *)(*(_QWORD *)v6 + 120), (uint64_t)v25);
  type metadata accessor for ValidateCallStatusFlow();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = 5;
  outlined init with take of SharingIntent(v25, v18 + 24);
  *(_QWORD *)&v25[0] = v18;
  outlined init with copy of StartSharingFlow.StartSharingFlowState(a1, (uint64_t)v17, a3);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(a2, (uint64_t)v15, a3);
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v13 + v19 + v20) & ~v19;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v8;
  outlined init with take of ExpanseUIModel((uint64_t)v17, v22 + v20, a3);
  outlined init with take of ExpanseUIModel((uint64_t)v15, v22 + v21, a3);
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type ValidateCallStatusFlow and conformance ValidateCallStatusFlow, (uint64_t (*)(uint64_t))type metadata accessor for ValidateCallStatusFlow, (uint64_t)&protocol conformance descriptor for ValidateCallStatusFlow);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

void specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;

  v6 = a5(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  __asm { BR              X10 }
}

uint64_t sub_22043D068()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  *v3 = 4;
  swift_storeEnumTagMultiPayload();
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v5, v2, v0);
  swift_beginAccess();
  outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v3, v5, v0);
  swift_endAccess();
  specialized SharingFlow.state.didset(v2, v0, v4);
  outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v3, v0);
  return outlined destroy of StartSharingFlow.StartSharingFlowState(v2, v0);
}

void specialized SharingFlow.makeResponseForCommonError(_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22043D2F4()
{
  uint64_t v0;
  uint64_t v2[11];

  v2[3] = type metadata accessor for Responses.Common.CallOnHold(0);
  v2[4] = (uint64_t)&protocol witness table for Responses.Common.CallOnHold;
  *(_BYTE *)__swift_allocate_boxed_opaque_existential_1(v2) = -125;
  static DialogPhase.completion.getter();
  specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)((uint64_t)v2, v0);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  __int128 v33[2];
  uint64_t v34[5];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  if (one-time initialization token for default != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)&v35);
  swift_retain();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v34[0] = v30;
    *(_DWORD *)v8 = 136315394;
    v31 = a2;
    v9 = v2[2];
    v10 = v2[3];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v33[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    v11 = v36;
    v12 = v37;
    __swift_project_boxed_opaque_existential_1(&v35, v36);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    v14 = CATIdentifier.stringValue.getter(v13);
    *(_QWORD *)&v33[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    _os_log_impl(&dword_2203F9000, v6, v7, "%s: Outputting %s dialog and completing flow", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v30, -1, -1);
    MEMORY[0x2207E453C](v8, -1, -1);
  }
  else
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  }

  outlined init with copy of ResponseExecuting(a1, (uint64_t)&v35);
  outlined init with copy of ResponseExecuting((uint64_t)v2 + *(_QWORD *)(*v2 + 128), (uint64_t)v34);
  outlined init with copy of ResponseExecuting((uint64_t)v2 + *(_QWORD *)(*v2 + 136), (uint64_t)v33);
  v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v34[3]);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (uint64_t *)((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v18;
  v21 = type metadata accessor for ResponseExecutor();
  v32[3] = v21;
  v32[4] = &protocol witness table for ResponseExecutor;
  v32[0] = v20;
  type metadata accessor for OutputDialogFlow();
  v22 = swift_allocObject();
  v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v32, v21);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (uint64_t *)((char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = *v25;
  *(_QWORD *)(v22 + 88) = v21;
  *(_QWORD *)(v22 + 96) = &protocol witness table for ResponseExecutor;
  *(_QWORD *)(v22 + 64) = v27;
  *(_BYTE *)(v22 + 16) = 0;
  outlined init with take of SharingIntent(&v35, v22 + 24);
  outlined init with take of SharingIntent(v33, v22 + 104);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  *(_QWORD *)&v35 = v22;
  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow, (uint64_t (*)(uint64_t))type metadata accessor for OutputDialogFlow, (uint64_t)&protocol conformance descriptor for OutputDialogFlow);
  static ExecuteResponse.complete<A>(next:)();
  return swift_release();
}

void StopSharingFlow.StopSharingFlowState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for ShareTarget();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v0, (uint64_t)&v8 - v5, v6);
  v7 = (char *)sub_22043D918 + 4 * word_22044723C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22043D918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StopSharingFlow.StopSharingFlowState, validationFailFallbackState: StopSharingFlow.StopSharingFlowState));
  v4 = swift_projectBox();
  v5 = v4 + *(int *)(v3 + 48);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v4, v1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v5, v0, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  *(_QWORD *)(v2 - 80) = 0;
  *(_QWORD *)(v2 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(78);
  v6 = *(_QWORD *)(v2 - 72);
  *(_QWORD *)(v2 - 80) = *(_QWORD *)(v2 - 80);
  *(_QWORD *)(v2 - 72) = v6;
  v7._countAndFlagsBits = 0xD00000000000002ALL;
  v7._object = (void *)0x8000000220448FF0;
  String.append(_:)(v7);
  v8._countAndFlagsBits = StopSharingFlow.StopSharingFlowState.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD00000000000001FLL;
  v9._object = (void *)0x8000000220449020;
  String.append(_:)(v9);
  v10._countAndFlagsBits = StopSharingFlow.StopSharingFlowState.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v2 - 80);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v0, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_release();
  return v12;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance StopSharingFlow.StopSharingFlowError()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0xD000000000000020;
}

void StopSharingFlow.exitValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t StopSharingFlow.on(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Input();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v11 = static StopSharingFlow.typeName;
    v12 = qword_2555D42D8;
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x24BE98DD0], MEMORY[0x24BE98DE0]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2203F9000, v7, v8, "%s: received input %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v10, -1, -1);
    MEMORY[0x2207E453C](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t StopSharingFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[66] = v1;
  v2[65] = a1;
  type metadata accessor for ShareTarget();
  v2[67] = swift_task_alloc();
  v2[68] = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  return swift_task_switch();
}

void StopSharingFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = *(_QWORD *)(v0 + 528) + *(_QWORD *)(**(_QWORD **)(v0 + 528) + 104);
  v2 = *(_QWORD *)(v0 + 568);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v1, v2, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  v3 = (char *)sub_22043E224 + 4 * word_220447256[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22043E224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 552);
  v3 = *(_QWORD *)(v0 + 520);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StopSharingFlow.StopSharingFlowState, validationFailFallbackState: StopSharingFlow.StopSharingFlowState));
  v5 = swift_projectBox();
  v6 = v5 + *(int *)(v4 + 48);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v5, v1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v6, v2, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  specialized SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(v1, v2, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t)&unk_24E639A30, (uint64_t)partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:), v3);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v2, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StopSharingFlow.execute()()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t StopSharingFlow.resolveTarget(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v3[34] = a1;
  v3[35] = v2;
  v3[36] = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v5 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 120);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:)
                                                + async function pointer to specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:));
  v6 = (_QWORD *)swift_task_alloc();
  v3[39] = v6;
  *v6 = v3;
  v6[1] = StopSharingFlow.resolveTarget(_:);
  return v8(a2, v5);
}

uint64_t StopSharingFlow.resolveTarget(_:)(__int16 a1)
{
  uint64_t v1;

  *(_WORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t StopSharingFlow.resolveTarget(_:)()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_WORD *)(v0 + 320);
  if ((v1 & 0x100) == 0)
    __asm { BR              X10 }
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v7 = static StopSharingFlow.typeName;
    v8 = qword_2555D42D8;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    v9 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v3, v4, "%s: Target resolution failed with error %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v6, -1, -1);
    MEMORY[0x2207E453C](v5, -1, -1);

  }
  else
  {

  }
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(uint64_t **)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 280);
  lazy protocol witness table accessor for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError();
  *v11 = swift_allocError();
  swift_storeEnumTagMultiPayload();
  v14 = v13 + *(_QWORD *)(*(_QWORD *)v13 + 104);
  swift_beginAccess();
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v14, v12, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v11, v14, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_endAccess();
  specialized SharingFlow.state.didset(v12, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
  outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(*(_QWORD *)(v0 + 296), type metadata accessor for StopSharingFlow.StopSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StopSharingFlow.stopSharingTarget(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];

  v2 = v1;
  v26 = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  v4 = MEMORY[0x24BDAC7A8](v26);
  v27 = (uint64_t)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v25 - v6;
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  v11 = 0x2555D0000uLL;
  if (os_log_type_enabled(v9, v10))
  {
    v25[1] = a1;
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v29[0] = v13;
    *(_DWORD *)v12 = 136315394;
    if (one-time initialization token for typeName != -1)
      swift_once();
    v14 = static StopSharingFlow.typeName;
    v15 = qword_2555D42D8;
    swift_bridgeObjectRetain();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000220447A00, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2203F9000, v9, v10, "%s: Stopping sharing of target %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v13, -1, -1);
    MEMORY[0x2207E453C](v12, -1, -1);

    v11 = 0x2555D0000;
  }
  else
  {

  }
  specialized Sharer.setScreenSharingEnabled(_:for:in:)(0, (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120)));
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v29[0] = v19;
    *(_DWORD *)v18 = 136315138;
    if (*(_QWORD *)(v11 + 3744) != -1)
      swift_once();
    v20 = static StopSharingFlow.typeName;
    v21 = qword_2555D42D8;
    swift_bridgeObjectRetain();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2203F9000, v16, v17, "%s: Successfully stopped sharing target", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207E453C](v19, -1, -1);
    MEMORY[0x2207E453C](v18, -1, -1);
  }

  swift_storeEnumTagMultiPayload();
  v22 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 104);
  swift_beginAccess();
  v23 = v27;
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v22, v27, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v7, v22, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_endAccess();
  specialized SharingFlow.state.didset(v23, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
  outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v7, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v23, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t StopSharingFlow.__ivar_destroyer()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StopSharingFlow.shareTargetResolver);
  return __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StopSharingFlow.sharer);
}

uint64_t StopSharingFlow.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of StartSharingFlow.StartSharingFlowState(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104), type metadata accessor for StopSharingFlow.StopSharingFlowState);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StopSharingFlow.shareTargetResolver);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StopSharingFlow.sharer);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StopSharingFlow(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StopSharingFlow);
}

uint64_t type metadata completion function for StopSharingFlow()
{
  return swift_initClassMetadata2();
}

char *initializeBufferWithCopyOfBuffer for StopSharingFlow.StopSharingFlowState(char *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v8;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = (char *)*a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      v10 = (char *)*a2;
      v11 = (char *)*a2;
      *(_QWORD *)a1 = v10;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *(_QWORD *)a1 = *a2;
          swift_retain();
          v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          v14 = &a1[v13];
          v15 = (uint64_t)a2 + v13;
          v16 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
          goto LABEL_15;
        case 1u:
        case 2u:
          v17 = (char *)a2[1];
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v17;
          swift_bridgeObjectRetain();
          goto LABEL_15;
        case 3u:
          v18 = (char *)a2[1];
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v18;
          a1[16] = *((_BYTE *)a2 + 16);
          swift_bridgeObjectRetain();
LABEL_15:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for StopSharingFlow.StopSharingFlowState(id *a1)
{
  int EnumCaseMultiPayload;
  char *v3;
  uint64_t v4;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:

      break;
    case 1:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v3 = (char *)a1
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          v4 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          return;
      }
      break;
    case 0:
      swift_release();
      break;
  }
}

_QWORD *initializeWithCopy for StopSharingFlow.StopSharingFlowState(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      v7 = *(id *)a2;
      v8 = *(id *)a2;
      *a1 = v7;
      goto LABEL_13;
    case 1:
      v9 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *a1 = *(_QWORD *)a2;
          swift_retain();
          v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          v11 = (char *)a1 + v10;
          v12 = a2 + v10;
          v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
          goto LABEL_12;
        case 1u:
        case 2u:
          v14 = *(_QWORD *)(a2 + 8);
          *a1 = *(_QWORD *)a2;
          a1[1] = v14;
          swift_bridgeObjectRetain();
          goto LABEL_12;
        case 3u:
          v15 = *(_QWORD *)(a2 + 8);
          *a1 = *(_QWORD *)a2;
          a1[1] = v15;
          *((_BYTE *)a1 + 16) = *(_BYTE *)(a2 + 16);
          swift_bridgeObjectRetain();
LABEL_12:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
          break;
      }
      goto LABEL_13;
    case 0:
      *a1 = *(_QWORD *)a2;
      swift_retain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for StopSharingFlow.StopSharingFlowState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)a1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 4:
        v7 = (void *)*a2;
        v8 = v7;
        *a1 = v7;
        goto LABEL_14;
      case 1:
        v9 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *a1 = *a2;
            swift_retain();
            v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            v11 = (char *)a1 + v10;
            v12 = (char *)a2 + v10;
            v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
            goto LABEL_13;
          case 1u:
          case 2u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_13;
          case 3u:
            *a1 = *a2;
            a1[1] = a2[1];
            *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
            swift_bridgeObjectRetain();
LABEL_13:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
            break;
        }
        goto LABEL_14;
      case 0:
        *a1 = *a2;
        swift_retain();
LABEL_14:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for StopSharingFlow.StopSharingFlowState(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StopSharingFlow.StopSharingFlowState);
}

_QWORD *initializeWithTake for StopSharingFlow.StopSharingFlowState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for StopSharingFlow.StopSharingFlowState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)a1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for ShareTarget();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        v8 = (char *)a1 + v7;
        v9 = (char *)a2 + v7;
        v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for StopSharingFlow.StopSharingFlowState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ShareTarget();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for StopSharingFlow.StopSharingFlowState(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t)&protocol conformance descriptor for StopSharingFlow.StopSharingFlowState);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(&lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t)&protocol conformance descriptor for StopSharingFlow.StopSharingFlowState);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_220440BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  int EnumCaseMultiPayload;
  char *v7;
  uint64_t v8;
  id *v9;
  int v10;
  char *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(type metadata accessor for StopSharingFlow.StopSharingFlowState(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v2 + v3) & ~v2;
  swift_release();
  v5 = (id *)(v0 + v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:

      break;
    case 1:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v7 = (char *)v5
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          v8 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          goto LABEL_9;
      }
      break;
    case 0:
      swift_release();
      break;
  }
LABEL_9:
  v9 = (id *)(v0 + v4);
  v10 = swift_getEnumCaseMultiPayload();
  switch(v10)
  {
    case 4:

      break;
    case 1:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v11 = (char *)v9
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          v12 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          return swift_deallocObject();
      }
      break;
    case 0:
      swift_release();
      break;
  }
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(char *a1)
{
  partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(a1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
}

{
  partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(a1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
}

uint64_t sub_220440DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(type metadata accessor for StartSharingFlow.StartSharingFlowState(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v2 + v3) & ~v2;
  swift_release();
  v5 = v0 + v3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      break;
    case 4u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v8 = v5
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      goto LABEL_14;
    case 5u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v6 = v5
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          v7 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      swift_bridgeObjectRelease();
      goto LABEL_14;
    case 6u:
      if (*(_QWORD *)(v5 + 8) < 3uLL)
        break;
LABEL_14:
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    default:
      break;
  }
  v10 = v0 + v4;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      return swift_deallocObject();
    case 4u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v13 = v10
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          v14 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      goto LABEL_28;
    case 5u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          v11 = v10
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          v12 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      swift_bridgeObjectRelease();
      goto LABEL_28;
    case 6u:
      if (*(_QWORD *)(v10 + 8) < 3uLL)
        return swift_deallocObject();
LABEL_28:
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(*a1, *(_QWORD *)(v2 + 16), v2 + ((v6 + 24) & ~v6), v2 + ((*(_QWORD *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6), a2);
}

uint64_t outlined assign with copy of StopSharingFlow.StopSharingFlowState(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for StopSharingFlow.StopSharingFlowError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2204412A4 + 4 * byte_2204472BB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2204412D8 + 4 * byte_2204472B6[v4]))();
}

uint64_t sub_2204412D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2204412E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2204412E8);
  return result;
}

uint64_t sub_2204412F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2204412FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_220441300(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_220441308(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StopSharingFlow.StopSharingFlowError()
{
  return &type metadata for StopSharingFlow.StopSharingFlowError;
}

unint64_t lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError;
  if (!lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError)
  {
    result = MEMORY[0x2207E4494](&protocol conformance descriptor for StopSharingFlow.StopSharingFlowError, &type metadata for StopSharingFlow.StopSharingFlowError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError);
  }
  return result;
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x24BDCB620]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x24BDCE9D0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t SnippetPluginModel.snippetHidden(for:idiom:)()
{
  return MEMORY[0x24BEAA5D8]();
}

uint64_t CodableAceObject.init(wrappedValue:)()
{
  return MEMORY[0x24BEABA58]();
}

uint64_t Loggable.init(wrappedValue:)()
{
  return MEMORY[0x24BEAD338]();
}

uint64_t static Loggable<A>.== infix(_:_:)()
{
  return MEMORY[0x24BEAD358]();
}

uint64_t type metadata accessor for Loggable()
{
  return MEMORY[0x24BEAD360]();
}

uint64_t YesNoPromptFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  return MEMORY[0x24BE95FA0]();
}

uint64_t YesNoPromptFlowStrategy.makeRepromptOnEmptyParse(itemToConfirm:)()
{
  return MEMORY[0x24BE95FB0]();
}

uint64_t YesNoPromptFlowStrategy.makeRepromptOnLowConfidence(itemToConfirm:)()
{
  return MEMORY[0x24BE95FC0]();
}

uint64_t SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)()
{
  return MEMORY[0x24BE960B8]();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return MEMORY[0x24BE960C8]();
}

uint64_t PromptForValueFlowStrategyAsync.makeErrorResponse(_:)()
{
  return MEMORY[0x24BE96198]();
}

uint64_t PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()()
{
  return MEMORY[0x24BE961A8]();
}

uint64_t PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()()
{
  return MEMORY[0x24BE961B8]();
}

uint64_t PromptForValueFlowAsync.exitValue.getter()
{
  return MEMORY[0x24BE961C8]();
}

uint64_t PromptForValueFlowAsync.on(input:)()
{
  return MEMORY[0x24BE961D0]();
}

uint64_t PromptForValueFlowAsync.execute()()
{
  return MEMORY[0x24BE961D8]();
}

uint64_t PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)()
{
  return MEMORY[0x24BE961E8]();
}

uint64_t PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)()
{
  return MEMORY[0x24BE96600]();
}

uint64_t PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)()
{
  return MEMORY[0x24BE96630]();
}

uint64_t PromptForConfirmationFlowAsync.on(input:)()
{
  return MEMORY[0x24BE96638]();
}

uint64_t PromptForConfirmationFlowAsync.execute()()
{
  return MEMORY[0x24BE96640]();
}

uint64_t PromptForConfirmationFlowAsync.exitValue.getter()
{
  return MEMORY[0x24BE96650]();
}

uint64_t dispatch thunk of Flow.execute()()
{
  return MEMORY[0x24BE96E60]();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return MEMORY[0x24BE96E78]();
}

uint64_t Flow.flexibleExecutionSupport.getter()
{
  return MEMORY[0x24BE96EA0]();
}

uint64_t Flow.onAsync(input:)()
{
  return MEMORY[0x24BE96EC0]();
}

uint64_t Flow<>.exitValue.getter()
{
  return MEMORY[0x24BE96ED0]();
}

uint64_t static FlowSearchResult.noFlow.getter()
{
  return MEMORY[0x24BE96EE8]();
}

uint64_t static FlowSearchResult.flow(_:)()
{
  return MEMORY[0x24BE96F08]();
}

uint64_t dispatch thunk of DeviceState.siriLocale.getter()
{
  return MEMORY[0x24BE97550]();
}

uint64_t DeviceState.asInvocationContext.getter()
{
  return MEMORY[0x24BE97670]();
}

uint64_t static DialogPhase.completion.getter()
{
  return MEMORY[0x24BE976A8]();
}

uint64_t static DialogPhase.reflection.getter()
{
  return MEMORY[0x24BE976B0]();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return MEMORY[0x24BE976B8]();
}

uint64_t static DialogPhase.clarification.getter()
{
  return MEMORY[0x24BE976C0]();
}

uint64_t static DialogPhase.acknowledgement.getter()
{
  return MEMORY[0x24BE976C8]();
}

uint64_t static DialogPhase.error.getter()
{
  return MEMORY[0x24BE976D0]();
}

uint64_t static DialogPhase.status.getter()
{
  return MEMORY[0x24BE976D8]();
}

uint64_t static DialogPhase.summary.getter()
{
  return MEMORY[0x24BE976E0]();
}

uint64_t static DialogPhase.canceled.getter()
{
  return MEMORY[0x24BE976F0]();
}

uint64_t static DialogPhase.confirmed.getter()
{
  return MEMORY[0x24BE976F8]();
}

uint64_t type metadata accessor for DialogPhase()
{
  return MEMORY[0x24BE97700]();
}

uint64_t static EmptyOutput.instance.getter()
{
  return MEMORY[0x24BE97740]();
}

uint64_t type metadata accessor for EmptyOutput()
{
  return MEMORY[0x24BE97748]();
}

uint64_t static ActionForInput.cancel()()
{
  return MEMORY[0x24BE97AA8]();
}

uint64_t static ActionForInput.handle()()
{
  return MEMORY[0x24BE97AB0]();
}

uint64_t static ActionForInput.ignore()()
{
  return MEMORY[0x24BE97AB8]();
}

uint64_t static ExecuteResponse.ongoing(requireInput:)()
{
  return MEMORY[0x24BE97D00]();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return MEMORY[0x24BE97D08]();
}

uint64_t static ExecuteResponse.complete<A>(next:childCompletion:)()
{
  return MEMORY[0x24BE97D30]();
}

uint64_t static ExecuteResponse.complete<A>(next:)()
{
  return MEMORY[0x24BE97D40]();
}

uint64_t static ExecuteResponse.complete()()
{
  return MEMORY[0x24BE97D58]();
}

uint64_t type metadata accessor for ExecuteResponse()
{
  return MEMORY[0x24BE97D78]();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return MEMORY[0x24BE97DC8]();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return MEMORY[0x24BE97DE0]();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return MEMORY[0x24BE97E08]();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return MEMORY[0x24BE97E20]();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return MEMORY[0x24BE97E30]();
}

uint64_t NLContextUpdate.init()()
{
  return MEMORY[0x24BE97E50]();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return MEMORY[0x24BE97E58]();
}

uint64_t ResponseFactory.init()()
{
  return MEMORY[0x24BE97F28]();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return MEMORY[0x24BE97F30]();
}

uint64_t dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)()
{
  return MEMORY[0x24BE98278]();
}

uint64_t dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)()
{
  return MEMORY[0x24BE98298]();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return MEMORY[0x24BE98408]();
}

uint64_t dispatch thunk of OutputPublisherAsync.publish(output:)()
{
  return MEMORY[0x24BE984E0]();
}

uint64_t dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)()
{
  return MEMORY[0x24BE98660]();
}

uint64_t AppInformationResolver.init(app:)()
{
  return MEMORY[0x24BE98670]();
}

uint64_t type metadata accessor for AppInformationResolver()
{
  return MEMORY[0x24BE98678]();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return MEMORY[0x24BE986D0]();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return MEMORY[0x24BE98808]();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return MEMORY[0x24BE98858]();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return MEMORY[0x24BE98868]();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return MEMORY[0x24BE98898]();
}

uint64_t OutputGenerationManifest.printSupportingDialogInDisplayModes.setter()
{
  return MEMORY[0x24BE988D0]();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return MEMORY[0x24BE988E0]();
}

uint64_t SimpleConfirmationResponseProvider.confirmationResponse.getter()
{
  return MEMORY[0x24BE98D08]();
}

uint64_t type metadata accessor for SimpleConfirmationResponseProvider()
{
  return MEMORY[0x24BE98D18]();
}

uint64_t SimpleConfirmationResponseProvider.init(_:)()
{
  return MEMORY[0x24BE98D28]();
}

uint64_t Input.parse.getter()
{
  return MEMORY[0x24BE98DC0]();
}

uint64_t type metadata accessor for Input()
{
  return MEMORY[0x24BE98DD0]();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return MEMORY[0x24BE98E30]();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return MEMORY[0x24BE98E38]();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return MEMORY[0x24BE98E40]();
}

uint64_t type metadata accessor for Parse()
{
  return MEMORY[0x24BE98EA8]();
}

uint64_t static Device.current.getter()
{
  return MEMORY[0x24BE98EE0]();
}

uint64_t USOParse.userParse.getter()
{
  return MEMORY[0x24BE99040]();
}

uint64_t type metadata accessor for USOParse()
{
  return MEMORY[0x24BE99050]();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return MEMORY[0x24BE99078]();
}

uint64_t type metadata accessor for AceOutput()
{
  return MEMORY[0x24BE99090]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x24BE9C2B8]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return MEMORY[0x24BE9C3E8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return MEMORY[0x24BE9C450]();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return MEMORY[0x24BE9C6D0]();
}

uint64_t Siri_Nlu_External_SystemOffered.init()()
{
  return MEMORY[0x24BE9C6D8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return MEMORY[0x24BE9C6E0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return MEMORY[0x24BE9C710]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return MEMORY[0x24BE9C720]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return MEMORY[0x24BE9C728]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return MEMORY[0x24BE9C740]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return MEMORY[0x24BE9C768]();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return MEMORY[0x24BE9C7A0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return MEMORY[0x24BE9C820]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x24BE9C828]();
}

uint64_t Siri_Nlu_External_SystemPrompted.target.setter()
{
  return MEMORY[0x24BE9CAD8]();
}

uint64_t Siri_Nlu_External_SystemPrompted.init()()
{
  return MEMORY[0x24BE9CAE8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemPrompted()
{
  return MEMORY[0x24BE9CAF0]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return MEMORY[0x24BE9CB10]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x24BE9CB28]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return MEMORY[0x24BE9CD40]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.prompted.setter()
{
  return MEMORY[0x24BE9CD58]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init()()
{
  return MEMORY[0x24BE9CD68]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return MEMORY[0x24BE9CD70]();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.reference.setter()
{
  return MEMORY[0x24BE9D0E0]();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init()()
{
  return MEMORY[0x24BE9D0E8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return MEMORY[0x24BE9D0F0]();
}

uint64_t static ConversionUtils.toUserParse(from:)()
{
  return MEMORY[0x24BE9DFF8]();
}

uint64_t static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)()
{
  return MEMORY[0x24BE9E018]();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return MEMORY[0x24BE9E028]();
}

uint64_t dispatch thunk of CodeGenBase.getUtteranceAlignmentsHelper(attributeName:)()
{
  return MEMORY[0x24BE9F760]();
}

uint64_t CodeGenBase.entity.getter()
{
  return MEMORY[0x24BE9F768]();
}

uint64_t UsoIdentifier.value.getter()
{
  return MEMORY[0x24BE9F990]();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return MEMORY[0x24BE9F998]();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return MEMORY[0x24BE9F9A0]();
}

uint64_t UtteranceSpan.startIndex.getter()
{
  return MEMORY[0x24BE9F9C8]();
}

uint64_t UtteranceSpan.endIndex.getter()
{
  return MEMORY[0x24BE9F9E0]();
}

uint64_t type metadata accessor for UtteranceSpan()
{
  return MEMORY[0x24BE9F9E8]();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return MEMORY[0x24BE9FE58]();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return MEMORY[0x24BE9FE70]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter()
{
  return MEMORY[0x24BE9FF28]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter()
{
  return MEMORY[0x24BE9FF38]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter()
{
  return MEMORY[0x24BE9FF40]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return MEMORY[0x24BE9FF60]();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return MEMORY[0x24BE9FF78]();
}

uint64_t static UsoConversionUtils.convertGraphToTasks(graph:)()
{
  return MEMORY[0x24BE9FFC8]();
}

uint64_t UtteranceAlignment.asrHypothesisIndex.getter()
{
  return MEMORY[0x24BEA0010]();
}

uint64_t UtteranceAlignment.spans.getter()
{
  return MEMORY[0x24BEA0018]();
}

uint64_t type metadata accessor for UtteranceAlignment()
{
  return MEMORY[0x24BEA0020]();
}

uint64_t dispatch thunk of UsoEntity_common_App.name.getter()
{
  return MEMORY[0x24BEA00D8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Target.target.getter()
{
  return MEMORY[0x24BEA0510]();
}

uint64_t dispatch thunk of UsoEntity_common_Message.recipients.getter()
{
  return MEMORY[0x24BEA05B8]();
}

uint64_t dispatch thunk of UsoEntity_common_Message.attachments.getter()
{
  return MEMORY[0x24BEA05C0]();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return MEMORY[0x24BEA0690]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return MEMORY[0x24BEA0B28]();
}

uint64_t dispatch thunk of UsoEntity_common_Attachment.collaborationMode.getter()
{
  return MEMORY[0x24BEA0B78]();
}

uint64_t dispatch thunk of UsoEntity_common_Attachment.type.getter()
{
  return MEMORY[0x24BEA0B80]();
}

uint64_t dispatch thunk of UsoEntity_common_Attachment.sharedApp.getter()
{
  return MEMORY[0x24BEA0B88]();
}

uint64_t dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter()
{
  return MEMORY[0x24BEA0C18]();
}

uint64_t type metadata accessor for UsoEntity_common_Quantifier.DefinedValues()
{
  return MEMORY[0x24BEA0C60]();
}

uint64_t type metadata accessor for UsoTask_send_common_Message()
{
  return MEMORY[0x24BEA0D48]();
}

uint64_t type metadata accessor for UsoTask_share_common_Message()
{
  return MEMORY[0x24BEA0F80]();
}

uint64_t type metadata accessor for UsoTask_unshare_common_Message()
{
  return MEMORY[0x24BEA1908]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)()
{
  return MEMORY[0x24BEA1918]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addAttachments(value:)()
{
  return MEMORY[0x24BEA1990]();
}

uint64_t UsoEntityBuilder_common_Message.init()()
{
  return MEMORY[0x24BEA19B0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Message()
{
  return MEMORY[0x24BEA19B8]();
}

uint64_t dispatch thunk of UsoEntity_common_AttachmentType.definedValue.getter()
{
  return MEMORY[0x24BEA1A58]();
}

uint64_t UsoEntity_common_AttachmentType.DefinedValues.rawValue.getter()
{
  return MEMORY[0x24BEA1B28]();
}

uint64_t type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues()
{
  return MEMORY[0x24BEA1B30]();
}

uint64_t static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)()
{
  return MEMORY[0x24BEA1CD8]();
}

uint64_t UsoEntityBuilder_common_Attachment.init()()
{
  return MEMORY[0x24BEA2360]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Attachment()
{
  return MEMORY[0x24BEA2368]();
}

uint64_t dispatch thunk of UsoEntity_common_CollaborationMode.definedValue.getter()
{
  return MEMORY[0x24BEA2440]();
}

uint64_t type metadata accessor for UsoEntity_common_CollaborationMode.DefinedValues()
{
  return MEMORY[0x24BEA2450]();
}

uint64_t UsoTaskBuilder_share_common_Message.init()()
{
  return MEMORY[0x24BEA26C0]();
}

uint64_t type metadata accessor for UsoTaskBuilder_share_common_Message()
{
  return MEMORY[0x24BEA26C8]();
}

uint64_t UsoTaskBuilder_unshare_common_Message.init()()
{
  return MEMORY[0x24BEA2C80]();
}

uint64_t type metadata accessor for UsoTaskBuilder_unshare_common_Message()
{
  return MEMORY[0x24BEA2C88]();
}

uint64_t UsoEntity.isEquivalentTo(_:)()
{
  return MEMORY[0x24BEA3808]();
}

uint64_t type metadata accessor for UsoEntity()
{
  return MEMORY[0x24BEA3820]();
}

uint64_t type metadata accessor for ContactQuery()
{
  return MEMORY[0x24BE934C0]();
}

uint64_t ContactHandle.value.getter()
{
  return MEMORY[0x24BE935D8]();
}

uint64_t type metadata accessor for ContactHandle()
{
  return MEMORY[0x24BE935E0]();
}

uint64_t dispatch thunk of ContactResolver.findMatches(queries:config:)()
{
  return MEMORY[0x24BE936B0]();
}

uint64_t ContactResolver.init()()
{
  return MEMORY[0x24BE936F0]();
}

uint64_t type metadata accessor for ContactResolver()
{
  return MEMORY[0x24BE936F8]();
}

uint64_t type metadata accessor for RecommenderType()
{
  return MEMORY[0x24BE937B8]();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)()
{
  return MEMORY[0x24BE938E0]();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return MEMORY[0x24BE938F0]();
}

uint64_t static ContactResolverDomain.all.getter()
{
  return MEMORY[0x24BE93900]();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return MEMORY[0x24BE93908]();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return MEMORY[0x24BE939E0]();
}

uint64_t Match.value.getter()
{
  return MEMORY[0x24BE93AE8]();
}

uint64_t Contact.handles.getter()
{
  return MEMORY[0x24BE93C88]();
}

uint64_t SiriEnvironment.currentRequest.getter()
{
  return MEMORY[0x24BE92EC0]();
}

uint64_t static SiriEnvironment.forCurrentTask.getter()
{
  return MEMORY[0x24BEA87F0]();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return MEMORY[0x24BEA8810]();
}

uint64_t static Transformer<>.transformer.getter()
{
  return MEMORY[0x24BE990F0]();
}

uint64_t Transformer.transform.getter()
{
  return MEMORY[0x24BEA8A88]();
}

uint64_t static ResponseMode.displayOnly.getter()
{
  return MEMORY[0x24BEA8AB8]();
}

uint64_t type metadata accessor for ResponseMode()
{
  return MEMORY[0x24BEA8AE8]();
}

uint64_t Entitlement.rawValue.getter()
{
  return MEMORY[0x24BE19E88]();
}

uint64_t type metadata accessor for Entitlement()
{
  return MEMORY[0x24BE19E98]();
}

uint64_t DialogPerson.__allocating_init(person:locale:useConversationalName:)()
{
  return MEMORY[0x24BE92488]();
}

uint64_t type metadata accessor for DialogPerson()
{
  return MEMORY[0x24BE92588]();
}

uint64_t static CATGlobals.defaultBuilder()()
{
  return MEMORY[0x24BE927E8]();
}

uint64_t dispatch thunk of CATGlobals.Builder.withResponseMode(_:)()
{
  return MEMORY[0x24BE92808]();
}

uint64_t CATGlobals.init(builder:)()
{
  return MEMORY[0x24BE92838]();
}

uint64_t CATGlobals.__allocating_init()()
{
  return MEMORY[0x24BE92840]();
}

uint64_t type metadata accessor for CATGlobals()
{
  return MEMORY[0x24BE92848]();
}

uint64_t CATWrapperSimple.init(templateDir:options:globals:)()
{
  return MEMORY[0x24BE929F0]();
}

uint64_t CATWrapperSimple.init(useResponseMode:options:)()
{
  return MEMORY[0x24BE92A00]();
}

uint64_t CATWrapperSimple.deinit()
{
  return MEMORY[0x24BE92A28]();
}

uint64_t static CATDialog.execute(bundle:catId:parameters:globals:callback:options:)()
{
  return MEMORY[0x24BE92BE0]();
}

uint64_t type metadata accessor for CATDialog()
{
  return MEMORY[0x24BE92BF0]();
}

uint64_t static CATOption.defaultMode.getter()
{
  return MEMORY[0x24BE92BF8]();
}

uint64_t type metadata accessor for CATOption()
{
  return MEMORY[0x24BE92C20]();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return MEMORY[0x24BE90B88]();
}

uint64_t type metadata accessor for App()
{
  return MEMORY[0x24BE90BB8]();
}

uint64_t CurrentRequest.speechPackage.getter()
{
  return MEMORY[0x24BE92F18]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF16View.count.getter()
{
  return MEMORY[0x24BEE0C90]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t String.UTF16View.subscript.getter()
{
  return MEMORY[0x24BEE0CC0]();
}

uint64_t String.init(_:)()
{
  return MEMORY[0x24BEE0DB0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t static Task<>.sleep(nanoseconds:)()
{
  return MEMORY[0x24BEE6B28]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t INPerson.toContactQuery()()
{
  return MEMORY[0x24BE94370]();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01E0](floatLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x24BEE3938]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x24BEE7198]();
}

uint64_t swift_asyncLet_finish()
{
  return MEMORY[0x24BEE71A0]();
}

uint64_t swift_asyncLet_get()
{
  return MEMORY[0x24BEE71A8]();
}

uint64_t swift_asyncLet_get_throwing()
{
  return MEMORY[0x24BEE71B0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x24BEE4DD8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

